# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GetLFTagRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, tag_key: str=None):
        """GetLFTagRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this GetLFTagRequest.
        :param tag_key: The tag_key of this GetLFTagRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'tag_key': str
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'tag_key': 'TagKey'
        }

        self._catalog_id = catalog_id
        self._tag_key = tag_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetLFTagRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetLFTag_request of this GetLFTagRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this GetLFTagRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this GetLFTagRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this GetLFTagRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this GetLFTagRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def tag_key(self):
        """Gets the tag_key of this GetLFTagRequest.

        The key-name for the LF-tag.

        :return: The tag_key of this GetLFTagRequest.
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this GetLFTagRequest.

        The key-name for the LF-tag.

        :param tag_key: The tag_key of this GetLFTagRequest.
        :type tag_key: str
        """
        if tag_key is None:
            raise ValueError("Invalid value for `tag_key`, must not be `None`")
        if tag_key is not None and len(tag_key) > 128:
            raise ValueError("Invalid value for `tag_key`, length must be less than or equal to `128`")
        if tag_key is not None and len(tag_key) < 1:
            raise ValueError("Invalid value for `tag_key`, length must be greater than or equal to `1`")
        if tag_key is not None and not re.search(r'^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$', tag_key):
            raise ValueError("Invalid value for `tag_key`, must be a follow pattern or equal to `/^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$/`")

        self._tag_key = tag_key
