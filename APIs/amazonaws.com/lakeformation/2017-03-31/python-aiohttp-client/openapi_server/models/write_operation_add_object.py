# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WriteOperationAddObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uri: str=None, e_tag: str=None, size: int=None, partition_values: List=None):
        """WriteOperationAddObject - a model defined in OpenAPI

        :param uri: The uri of this WriteOperationAddObject.
        :param e_tag: The e_tag of this WriteOperationAddObject.
        :param size: The size of this WriteOperationAddObject.
        :param partition_values: The partition_values of this WriteOperationAddObject.
        """
        self.openapi_types = {
            'uri': str,
            'e_tag': str,
            'size': int,
            'partition_values': List
        }

        self.attribute_map = {
            'uri': 'Uri',
            'e_tag': 'ETag',
            'size': 'Size',
            'partition_values': 'PartitionValues'
        }

        self._uri = uri
        self._e_tag = e_tag
        self._size = size
        self._partition_values = partition_values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WriteOperationAddObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WriteOperation_AddObject of this WriteOperationAddObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self):
        """Gets the uri of this WriteOperationAddObject.


        :return: The uri of this WriteOperationAddObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this WriteOperationAddObject.


        :param uri: The uri of this WriteOperationAddObject.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def e_tag(self):
        """Gets the e_tag of this WriteOperationAddObject.


        :return: The e_tag of this WriteOperationAddObject.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this WriteOperationAddObject.


        :param e_tag: The e_tag of this WriteOperationAddObject.
        :type e_tag: str
        """
        if e_tag is None:
            raise ValueError("Invalid value for `e_tag`, must not be `None`")

        self._e_tag = e_tag

    @property
    def size(self):
        """Gets the size of this WriteOperationAddObject.


        :return: The size of this WriteOperationAddObject.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this WriteOperationAddObject.


        :param size: The size of this WriteOperationAddObject.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def partition_values(self):
        """Gets the partition_values of this WriteOperationAddObject.


        :return: The partition_values of this WriteOperationAddObject.
        :rtype: List
        """
        return self._partition_values

    @partition_values.setter
    def partition_values(self, partition_values):
        """Sets the partition_values of this WriteOperationAddObject.


        :param partition_values: The partition_values of this WriteOperationAddObject.
        :type partition_values: List
        """

        self._partition_values = partition_values
