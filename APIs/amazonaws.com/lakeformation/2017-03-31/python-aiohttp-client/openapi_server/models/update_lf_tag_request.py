# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateLFTagRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, tag_key: str=None, tag_values_to_delete: List[str]=None, tag_values_to_add: List[str]=None):
        """UpdateLFTagRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this UpdateLFTagRequest.
        :param tag_key: The tag_key of this UpdateLFTagRequest.
        :param tag_values_to_delete: The tag_values_to_delete of this UpdateLFTagRequest.
        :param tag_values_to_add: The tag_values_to_add of this UpdateLFTagRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'tag_key': str,
            'tag_values_to_delete': List[str],
            'tag_values_to_add': List[str]
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'tag_key': 'TagKey',
            'tag_values_to_delete': 'TagValuesToDelete',
            'tag_values_to_add': 'TagValuesToAdd'
        }

        self._catalog_id = catalog_id
        self._tag_key = tag_key
        self._tag_values_to_delete = tag_values_to_delete
        self._tag_values_to_add = tag_values_to_add

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateLFTagRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateLFTag_request of this UpdateLFTagRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this UpdateLFTagRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :return: The catalog_id of this UpdateLFTagRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this UpdateLFTagRequest.

        The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 

        :param catalog_id: The catalog_id of this UpdateLFTagRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def tag_key(self):
        """Gets the tag_key of this UpdateLFTagRequest.

        The key-name for the LF-tag for which to add or delete values.

        :return: The tag_key of this UpdateLFTagRequest.
        :rtype: str
        """
        return self._tag_key

    @tag_key.setter
    def tag_key(self, tag_key):
        """Sets the tag_key of this UpdateLFTagRequest.

        The key-name for the LF-tag for which to add or delete values.

        :param tag_key: The tag_key of this UpdateLFTagRequest.
        :type tag_key: str
        """
        if tag_key is None:
            raise ValueError("Invalid value for `tag_key`, must not be `None`")
        if tag_key is not None and len(tag_key) > 128:
            raise ValueError("Invalid value for `tag_key`, length must be less than or equal to `128`")
        if tag_key is not None and len(tag_key) < 1:
            raise ValueError("Invalid value for `tag_key`, length must be greater than or equal to `1`")
        if tag_key is not None and not re.search(r'^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$', tag_key):
            raise ValueError("Invalid value for `tag_key`, must be a follow pattern or equal to `/^([\p{L}\p{Z}\p{N}_.:\/=+\-@%]*)$/`")

        self._tag_key = tag_key

    @property
    def tag_values_to_delete(self):
        """Gets the tag_values_to_delete of this UpdateLFTagRequest.

        A list of LF-tag values to delete from the LF-tag.

        :return: The tag_values_to_delete of this UpdateLFTagRequest.
        :rtype: List[str]
        """
        return self._tag_values_to_delete

    @tag_values_to_delete.setter
    def tag_values_to_delete(self, tag_values_to_delete):
        """Sets the tag_values_to_delete of this UpdateLFTagRequest.

        A list of LF-tag values to delete from the LF-tag.

        :param tag_values_to_delete: The tag_values_to_delete of this UpdateLFTagRequest.
        :type tag_values_to_delete: List[str]
        """
        if tag_values_to_delete is not None and len(tag_values_to_delete) > 50:
            raise ValueError("Invalid value for `tag_values_to_delete`, number of items must be less than or equal to `50`")
        if tag_values_to_delete is not None and len(tag_values_to_delete) < 1:
            raise ValueError("Invalid value for `tag_values_to_delete`, number of items must be greater than or equal to `1`")

        self._tag_values_to_delete = tag_values_to_delete

    @property
    def tag_values_to_add(self):
        """Gets the tag_values_to_add of this UpdateLFTagRequest.

        A list of LF-tag values to add from the LF-tag.

        :return: The tag_values_to_add of this UpdateLFTagRequest.
        :rtype: List[str]
        """
        return self._tag_values_to_add

    @tag_values_to_add.setter
    def tag_values_to_add(self, tag_values_to_add):
        """Sets the tag_values_to_add of this UpdateLFTagRequest.

        A list of LF-tag values to add from the LF-tag.

        :param tag_values_to_add: The tag_values_to_add of this UpdateLFTagRequest.
        :type tag_values_to_add: List[str]
        """
        if tag_values_to_add is not None and len(tag_values_to_add) > 50:
            raise ValueError("Invalid value for `tag_values_to_add`, number of items must be less than or equal to `50`")
        if tag_values_to_add is not None and len(tag_values_to_add) < 1:
            raise ValueError("Invalid value for `tag_values_to_add`, number of items must be greater than or equal to `1`")

        self._tag_values_to_add = tag_values_to_add
