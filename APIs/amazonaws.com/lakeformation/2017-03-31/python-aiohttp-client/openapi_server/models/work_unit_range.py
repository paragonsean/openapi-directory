# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkUnitRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, work_unit_id_max: int=None, work_unit_id_min: int=None, work_unit_token: str=None):
        """WorkUnitRange - a model defined in OpenAPI

        :param work_unit_id_max: The work_unit_id_max of this WorkUnitRange.
        :param work_unit_id_min: The work_unit_id_min of this WorkUnitRange.
        :param work_unit_token: The work_unit_token of this WorkUnitRange.
        """
        self.openapi_types = {
            'work_unit_id_max': int,
            'work_unit_id_min': int,
            'work_unit_token': str
        }

        self.attribute_map = {
            'work_unit_id_max': 'WorkUnitIdMax',
            'work_unit_id_min': 'WorkUnitIdMin',
            'work_unit_token': 'WorkUnitToken'
        }

        self._work_unit_id_max = work_unit_id_max
        self._work_unit_id_min = work_unit_id_min
        self._work_unit_token = work_unit_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkUnitRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkUnitRange of this WorkUnitRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def work_unit_id_max(self):
        """Gets the work_unit_id_max of this WorkUnitRange.


        :return: The work_unit_id_max of this WorkUnitRange.
        :rtype: int
        """
        return self._work_unit_id_max

    @work_unit_id_max.setter
    def work_unit_id_max(self, work_unit_id_max):
        """Sets the work_unit_id_max of this WorkUnitRange.


        :param work_unit_id_max: The work_unit_id_max of this WorkUnitRange.
        :type work_unit_id_max: int
        """
        if work_unit_id_max is None:
            raise ValueError("Invalid value for `work_unit_id_max`, must not be `None`")

        self._work_unit_id_max = work_unit_id_max

    @property
    def work_unit_id_min(self):
        """Gets the work_unit_id_min of this WorkUnitRange.


        :return: The work_unit_id_min of this WorkUnitRange.
        :rtype: int
        """
        return self._work_unit_id_min

    @work_unit_id_min.setter
    def work_unit_id_min(self, work_unit_id_min):
        """Sets the work_unit_id_min of this WorkUnitRange.


        :param work_unit_id_min: The work_unit_id_min of this WorkUnitRange.
        :type work_unit_id_min: int
        """
        if work_unit_id_min is None:
            raise ValueError("Invalid value for `work_unit_id_min`, must not be `None`")

        self._work_unit_id_min = work_unit_id_min

    @property
    def work_unit_token(self):
        """Gets the work_unit_token of this WorkUnitRange.


        :return: The work_unit_token of this WorkUnitRange.
        :rtype: str
        """
        return self._work_unit_token

    @work_unit_token.setter
    def work_unit_token(self, work_unit_token):
        """Sets the work_unit_token of this WorkUnitRange.


        :param work_unit_token: The work_unit_token of this WorkUnitRange.
        :type work_unit_token: str
        """
        if work_unit_token is None:
            raise ValueError("Invalid value for `work_unit_token`, must not be `None`")

        self._work_unit_token = work_unit_token
