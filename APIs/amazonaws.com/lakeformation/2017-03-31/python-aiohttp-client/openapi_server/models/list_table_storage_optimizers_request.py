# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListTableStorageOptimizersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, catalog_id: str=None, database_name: str=None, table_name: str=None, storage_optimizer_type: str=None, max_results: int=None, next_token: str=None):
        """ListTableStorageOptimizersRequest - a model defined in OpenAPI

        :param catalog_id: The catalog_id of this ListTableStorageOptimizersRequest.
        :param database_name: The database_name of this ListTableStorageOptimizersRequest.
        :param table_name: The table_name of this ListTableStorageOptimizersRequest.
        :param storage_optimizer_type: The storage_optimizer_type of this ListTableStorageOptimizersRequest.
        :param max_results: The max_results of this ListTableStorageOptimizersRequest.
        :param next_token: The next_token of this ListTableStorageOptimizersRequest.
        """
        self.openapi_types = {
            'catalog_id': str,
            'database_name': str,
            'table_name': str,
            'storage_optimizer_type': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'catalog_id': 'CatalogId',
            'database_name': 'DatabaseName',
            'table_name': 'TableName',
            'storage_optimizer_type': 'StorageOptimizerType',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._catalog_id = catalog_id
        self._database_name = database_name
        self._table_name = table_name
        self._storage_optimizer_type = storage_optimizer_type
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTableStorageOptimizersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTableStorageOptimizers_request of this ListTableStorageOptimizersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def catalog_id(self):
        """Gets the catalog_id of this ListTableStorageOptimizersRequest.

        The Catalog ID of the table.

        :return: The catalog_id of this ListTableStorageOptimizersRequest.
        :rtype: str
        """
        return self._catalog_id

    @catalog_id.setter
    def catalog_id(self, catalog_id):
        """Sets the catalog_id of this ListTableStorageOptimizersRequest.

        The Catalog ID of the table.

        :param catalog_id: The catalog_id of this ListTableStorageOptimizersRequest.
        :type catalog_id: str
        """
        if catalog_id is not None and len(catalog_id) > 255:
            raise ValueError("Invalid value for `catalog_id`, length must be less than or equal to `255`")
        if catalog_id is not None and len(catalog_id) < 1:
            raise ValueError("Invalid value for `catalog_id`, length must be greater than or equal to `1`")

        self._catalog_id = catalog_id

    @property
    def database_name(self):
        """Gets the database_name of this ListTableStorageOptimizersRequest.

        Name of the database where the table is present.

        :return: The database_name of this ListTableStorageOptimizersRequest.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this ListTableStorageOptimizersRequest.

        Name of the database where the table is present.

        :param database_name: The database_name of this ListTableStorageOptimizersRequest.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")
        if database_name is not None and len(database_name) > 255:
            raise ValueError("Invalid value for `database_name`, length must be less than or equal to `255`")
        if database_name is not None and len(database_name) < 1:
            raise ValueError("Invalid value for `database_name`, length must be greater than or equal to `1`")

        self._database_name = database_name

    @property
    def table_name(self):
        """Gets the table_name of this ListTableStorageOptimizersRequest.

        Name of the table.

        :return: The table_name of this ListTableStorageOptimizersRequest.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this ListTableStorageOptimizersRequest.

        Name of the table.

        :param table_name: The table_name of this ListTableStorageOptimizersRequest.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")
        if table_name is not None and len(table_name) > 255:
            raise ValueError("Invalid value for `table_name`, length must be less than or equal to `255`")
        if table_name is not None and len(table_name) < 1:
            raise ValueError("Invalid value for `table_name`, length must be greater than or equal to `1`")

        self._table_name = table_name

    @property
    def storage_optimizer_type(self):
        """Gets the storage_optimizer_type of this ListTableStorageOptimizersRequest.

        The specific type of storage optimizers to list. The supported value is <code>compaction</code>.

        :return: The storage_optimizer_type of this ListTableStorageOptimizersRequest.
        :rtype: str
        """
        return self._storage_optimizer_type

    @storage_optimizer_type.setter
    def storage_optimizer_type(self, storage_optimizer_type):
        """Sets the storage_optimizer_type of this ListTableStorageOptimizersRequest.

        The specific type of storage optimizers to list. The supported value is <code>compaction</code>.

        :param storage_optimizer_type: The storage_optimizer_type of this ListTableStorageOptimizersRequest.
        :type storage_optimizer_type: str
        """
        allowed_values = ["COMPACTION", "GARBAGE_COLLECTION", "ALL"]  # noqa: E501
        if storage_optimizer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_optimizer_type` ({0}), must be one of {1}"
                .format(storage_optimizer_type, allowed_values)
            )

        self._storage_optimizer_type = storage_optimizer_type

    @property
    def max_results(self):
        """Gets the max_results of this ListTableStorageOptimizersRequest.

        The number of storage optimizers to return on each call.

        :return: The max_results of this ListTableStorageOptimizersRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListTableStorageOptimizersRequest.

        The number of storage optimizers to return on each call.

        :param max_results: The max_results of this ListTableStorageOptimizersRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListTableStorageOptimizersRequest.

        A continuation token, if this is a continuation call.

        :return: The next_token of this ListTableStorageOptimizersRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListTableStorageOptimizersRequest.

        A continuation token, if this is a continuation call.

        :param next_token: The next_token of this ListTableStorageOptimizersRequest.
        :type next_token: str
        """

        self._next_token = next_token
