# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, uri: str=None, e_tag: str=None):
        """VirtualObject - a model defined in OpenAPI

        :param uri: The uri of this VirtualObject.
        :param e_tag: The e_tag of this VirtualObject.
        """
        self.openapi_types = {
            'uri': str,
            'e_tag': str
        }

        self.attribute_map = {
            'uri': 'Uri',
            'e_tag': 'ETag'
        }

        self._uri = uri
        self._e_tag = e_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualObject of this VirtualObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uri(self):
        """Gets the uri of this VirtualObject.


        :return: The uri of this VirtualObject.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this VirtualObject.


        :param uri: The uri of this VirtualObject.
        :type uri: str
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")

        self._uri = uri

    @property
    def e_tag(self):
        """Gets the e_tag of this VirtualObject.


        :return: The e_tag of this VirtualObject.
        :rtype: str
        """
        return self._e_tag

    @e_tag.setter
    def e_tag(self, e_tag):
        """Sets the e_tag of this VirtualObject.


        :param e_tag: The e_tag of this VirtualObject.
        :type e_tag: str
        """

        self._e_tag = e_tag
