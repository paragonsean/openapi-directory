/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LFTag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SearchDatabasesByLFTagsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SearchDatabasesByLFTagsRequest {
  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_EXPRESSION = "Expression";
  @SerializedName(SERIALIZED_NAME_EXPRESSION)
  private List<LFTag> expression = new ArrayList<>();

  public SearchDatabasesByLFTagsRequest() {
  }

  public SearchDatabasesByLFTagsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * A continuation token, if this is not the first call to retrieve this list.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public SearchDatabasesByLFTagsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return.
   * minimum: 1
   * maximum: 100
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public SearchDatabasesByLFTagsRequest catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public SearchDatabasesByLFTagsRequest expression(List<LFTag> expression) {
    this.expression = expression;
    return this;
  }

  public SearchDatabasesByLFTagsRequest addExpressionItem(LFTag expressionItem) {
    if (this.expression == null) {
      this.expression = new ArrayList<>();
    }
    this.expression.add(expressionItem);
    return this;
  }

  /**
   * A list of conditions (&lt;code&gt;LFTag&lt;/code&gt; structures) to search for in database resources.
   * @return expression
   */
  @javax.annotation.Nonnull
  public List<LFTag> getExpression() {
    return expression;
  }

  public void setExpression(List<LFTag> expression) {
    this.expression = expression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchDatabasesByLFTagsRequest searchDatabasesByLFTagsRequest = (SearchDatabasesByLFTagsRequest) o;
    return Objects.equals(this.nextToken, searchDatabasesByLFTagsRequest.nextToken) &&
        Objects.equals(this.maxResults, searchDatabasesByLFTagsRequest.maxResults) &&
        Objects.equals(this.catalogId, searchDatabasesByLFTagsRequest.catalogId) &&
        Objects.equals(this.expression, searchDatabasesByLFTagsRequest.expression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextToken, maxResults, catalogId, expression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchDatabasesByLFTagsRequest {\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");
    openapiFields.add("CatalogId");
    openapiFields.add("Expression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Expression");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchDatabasesByLFTagsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SearchDatabasesByLFTagsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchDatabasesByLFTagsRequest is not found in the empty JSON string", SearchDatabasesByLFTagsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchDatabasesByLFTagsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchDatabasesByLFTagsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SearchDatabasesByLFTagsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      if ((jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) && !jsonObj.get("CatalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CatalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CatalogId").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("Expression").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Expression` to be an array in the JSON string but got `%s`", jsonObj.get("Expression").toString()));
      }

      JsonArray jsonArrayexpression = jsonObj.getAsJsonArray("Expression");
      // validate the required field `Expression` (array)
      for (int i = 0; i < jsonArrayexpression.size(); i++) {
        LFTag.validateJsonElement(jsonArrayexpression.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchDatabasesByLFTagsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchDatabasesByLFTagsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchDatabasesByLFTagsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchDatabasesByLFTagsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchDatabasesByLFTagsRequest>() {
           @Override
           public void write(JsonWriter out, SearchDatabasesByLFTagsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchDatabasesByLFTagsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchDatabasesByLFTagsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchDatabasesByLFTagsRequest
   * @throws IOException if the JSON string is invalid with respect to SearchDatabasesByLFTagsRequest
   */
  public static SearchDatabasesByLFTagsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchDatabasesByLFTagsRequest.class);
  }

  /**
   * Convert an instance of SearchDatabasesByLFTagsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

