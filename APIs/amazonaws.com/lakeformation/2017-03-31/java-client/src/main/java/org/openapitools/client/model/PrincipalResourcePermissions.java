/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PrincipalResourcePermissionsAdditionalDetails;
import org.openapitools.client.model.PrincipalResourcePermissionsPrincipal;
import org.openapitools.client.model.PrincipalResourcePermissionsResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The permissions granted or revoked on a resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrincipalResourcePermissions {
  public static final String SERIALIZED_NAME_PRINCIPAL = "Principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private PrincipalResourcePermissionsPrincipal principal;

  public static final String SERIALIZED_NAME_RESOURCE = "Resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private PrincipalResourcePermissionsResource resource;

  public static final String SERIALIZED_NAME_PERMISSIONS = "Permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List permissions;

  public static final String SERIALIZED_NAME_PERMISSIONS_WITH_GRANT_OPTION = "PermissionsWithGrantOption";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_WITH_GRANT_OPTION)
  private List permissionsWithGrantOption;

  public static final String SERIALIZED_NAME_ADDITIONAL_DETAILS = "AdditionalDetails";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DETAILS)
  private PrincipalResourcePermissionsAdditionalDetails additionalDetails;

  public PrincipalResourcePermissions() {
  }

  public PrincipalResourcePermissions principal(PrincipalResourcePermissionsPrincipal principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nullable
  public PrincipalResourcePermissionsPrincipal getPrincipal() {
    return principal;
  }

  public void setPrincipal(PrincipalResourcePermissionsPrincipal principal) {
    this.principal = principal;
  }


  public PrincipalResourcePermissions resource(PrincipalResourcePermissionsResource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public PrincipalResourcePermissionsResource getResource() {
    return resource;
  }

  public void setResource(PrincipalResourcePermissionsResource resource) {
    this.resource = resource;
  }


  public PrincipalResourcePermissions permissions(List permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public List getPermissions() {
    return permissions;
  }

  public void setPermissions(List permissions) {
    this.permissions = permissions;
  }


  public PrincipalResourcePermissions permissionsWithGrantOption(List permissionsWithGrantOption) {
    this.permissionsWithGrantOption = permissionsWithGrantOption;
    return this;
  }

  /**
   * Get permissionsWithGrantOption
   * @return permissionsWithGrantOption
   */
  @javax.annotation.Nullable
  public List getPermissionsWithGrantOption() {
    return permissionsWithGrantOption;
  }

  public void setPermissionsWithGrantOption(List permissionsWithGrantOption) {
    this.permissionsWithGrantOption = permissionsWithGrantOption;
  }


  public PrincipalResourcePermissions additionalDetails(PrincipalResourcePermissionsAdditionalDetails additionalDetails) {
    this.additionalDetails = additionalDetails;
    return this;
  }

  /**
   * Get additionalDetails
   * @return additionalDetails
   */
  @javax.annotation.Nullable
  public PrincipalResourcePermissionsAdditionalDetails getAdditionalDetails() {
    return additionalDetails;
  }

  public void setAdditionalDetails(PrincipalResourcePermissionsAdditionalDetails additionalDetails) {
    this.additionalDetails = additionalDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrincipalResourcePermissions principalResourcePermissions = (PrincipalResourcePermissions) o;
    return Objects.equals(this.principal, principalResourcePermissions.principal) &&
        Objects.equals(this.resource, principalResourcePermissions.resource) &&
        Objects.equals(this.permissions, principalResourcePermissions.permissions) &&
        Objects.equals(this.permissionsWithGrantOption, principalResourcePermissions.permissionsWithGrantOption) &&
        Objects.equals(this.additionalDetails, principalResourcePermissions.additionalDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(principal, resource, permissions, permissionsWithGrantOption, additionalDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrincipalResourcePermissions {\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    permissionsWithGrantOption: ").append(toIndentedString(permissionsWithGrantOption)).append("\n");
    sb.append("    additionalDetails: ").append(toIndentedString(additionalDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Principal");
    openapiFields.add("Resource");
    openapiFields.add("Permissions");
    openapiFields.add("PermissionsWithGrantOption");
    openapiFields.add("AdditionalDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrincipalResourcePermissions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrincipalResourcePermissions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrincipalResourcePermissions is not found in the empty JSON string", PrincipalResourcePermissions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrincipalResourcePermissions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrincipalResourcePermissions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Principal`
      if (jsonObj.get("Principal") != null && !jsonObj.get("Principal").isJsonNull()) {
        PrincipalResourcePermissionsPrincipal.validateJsonElement(jsonObj.get("Principal"));
      }
      // validate the optional field `Resource`
      if (jsonObj.get("Resource") != null && !jsonObj.get("Resource").isJsonNull()) {
        PrincipalResourcePermissionsResource.validateJsonElement(jsonObj.get("Resource"));
      }
      // validate the optional field `Permissions`
      if (jsonObj.get("Permissions") != null && !jsonObj.get("Permissions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Permissions"));
      }
      // validate the optional field `PermissionsWithGrantOption`
      if (jsonObj.get("PermissionsWithGrantOption") != null && !jsonObj.get("PermissionsWithGrantOption").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PermissionsWithGrantOption"));
      }
      // validate the optional field `AdditionalDetails`
      if (jsonObj.get("AdditionalDetails") != null && !jsonObj.get("AdditionalDetails").isJsonNull()) {
        PrincipalResourcePermissionsAdditionalDetails.validateJsonElement(jsonObj.get("AdditionalDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrincipalResourcePermissions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrincipalResourcePermissions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrincipalResourcePermissions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrincipalResourcePermissions.class));

       return (TypeAdapter<T>) new TypeAdapter<PrincipalResourcePermissions>() {
           @Override
           public void write(JsonWriter out, PrincipalResourcePermissions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrincipalResourcePermissions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrincipalResourcePermissions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrincipalResourcePermissions
   * @throws IOException if the JSON string is invalid with respect to PrincipalResourcePermissions
   */
  public static PrincipalResourcePermissions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrincipalResourcePermissions.class);
  }

  /**
   * Convert an instance of PrincipalResourcePermissions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

