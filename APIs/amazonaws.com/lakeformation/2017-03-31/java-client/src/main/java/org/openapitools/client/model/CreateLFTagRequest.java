/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateLFTagRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateLFTagRequest {
  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_TAG_KEY = "TagKey";
  @SerializedName(SERIALIZED_NAME_TAG_KEY)
  private String tagKey;

  public static final String SERIALIZED_NAME_TAG_VALUES = "TagValues";
  @SerializedName(SERIALIZED_NAME_TAG_VALUES)
  private List<String> tagValues = new ArrayList<>();

  public CreateLFTagRequest() {
  }

  public CreateLFTagRequest catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public CreateLFTagRequest tagKey(String tagKey) {
    this.tagKey = tagKey;
    return this;
  }

  /**
   * The key-name for the LF-tag.
   * @return tagKey
   */
  @javax.annotation.Nonnull
  public String getTagKey() {
    return tagKey;
  }

  public void setTagKey(String tagKey) {
    this.tagKey = tagKey;
  }


  public CreateLFTagRequest tagValues(List<String> tagValues) {
    this.tagValues = tagValues;
    return this;
  }

  public CreateLFTagRequest addTagValuesItem(String tagValuesItem) {
    if (this.tagValues == null) {
      this.tagValues = new ArrayList<>();
    }
    this.tagValues.add(tagValuesItem);
    return this;
  }

  /**
   * A list of possible values an attribute can take.
   * @return tagValues
   */
  @javax.annotation.Nonnull
  public List<String> getTagValues() {
    return tagValues;
  }

  public void setTagValues(List<String> tagValues) {
    this.tagValues = tagValues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateLFTagRequest createLFTagRequest = (CreateLFTagRequest) o;
    return Objects.equals(this.catalogId, createLFTagRequest.catalogId) &&
        Objects.equals(this.tagKey, createLFTagRequest.tagKey) &&
        Objects.equals(this.tagValues, createLFTagRequest.tagValues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogId, tagKey, tagValues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateLFTagRequest {\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    tagKey: ").append(toIndentedString(tagKey)).append("\n");
    sb.append("    tagValues: ").append(toIndentedString(tagValues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CatalogId");
    openapiFields.add("TagKey");
    openapiFields.add("TagValues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TagKey");
    openapiRequiredFields.add("TagValues");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateLFTagRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateLFTagRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateLFTagRequest is not found in the empty JSON string", CreateLFTagRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateLFTagRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateLFTagRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateLFTagRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) && !jsonObj.get("CatalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CatalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CatalogId").toString()));
      }
      if (!jsonObj.get("TagKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TagKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TagKey").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("TagValues") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("TagValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TagValues` to be an array in the JSON string but got `%s`", jsonObj.get("TagValues").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateLFTagRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateLFTagRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateLFTagRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateLFTagRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateLFTagRequest>() {
           @Override
           public void write(JsonWriter out, CreateLFTagRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateLFTagRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateLFTagRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateLFTagRequest
   * @throws IOException if the JSON string is invalid with respect to CreateLFTagRequest
   */
  public static CreateLFTagRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateLFTagRequest.class);
  }

  /**
   * Convert an instance of CreateLFTagRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

