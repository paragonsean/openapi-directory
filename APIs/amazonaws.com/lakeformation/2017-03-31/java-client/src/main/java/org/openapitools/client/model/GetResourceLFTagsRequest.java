/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddLFTagsToResourceRequestResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetResourceLFTagsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetResourceLFTagsRequest {
  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_RESOURCE = "Resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private AddLFTagsToResourceRequestResource resource;

  public static final String SERIALIZED_NAME_SHOW_ASSIGNED_L_F_TAGS = "ShowAssignedLFTags";
  @SerializedName(SERIALIZED_NAME_SHOW_ASSIGNED_L_F_TAGS)
  private Boolean showAssignedLFTags;

  public GetResourceLFTagsRequest() {
  }

  public GetResourceLFTagsRequest catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public GetResourceLFTagsRequest resource(AddLFTagsToResourceRequestResource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nonnull
  public AddLFTagsToResourceRequestResource getResource() {
    return resource;
  }

  public void setResource(AddLFTagsToResourceRequestResource resource) {
    this.resource = resource;
  }


  public GetResourceLFTagsRequest showAssignedLFTags(Boolean showAssignedLFTags) {
    this.showAssignedLFTags = showAssignedLFTags;
    return this;
  }

  /**
   * Indicates whether to show the assigned LF-tags.
   * @return showAssignedLFTags
   */
  @javax.annotation.Nullable
  public Boolean getShowAssignedLFTags() {
    return showAssignedLFTags;
  }

  public void setShowAssignedLFTags(Boolean showAssignedLFTags) {
    this.showAssignedLFTags = showAssignedLFTags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetResourceLFTagsRequest getResourceLFTagsRequest = (GetResourceLFTagsRequest) o;
    return Objects.equals(this.catalogId, getResourceLFTagsRequest.catalogId) &&
        Objects.equals(this.resource, getResourceLFTagsRequest.resource) &&
        Objects.equals(this.showAssignedLFTags, getResourceLFTagsRequest.showAssignedLFTags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogId, resource, showAssignedLFTags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetResourceLFTagsRequest {\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    showAssignedLFTags: ").append(toIndentedString(showAssignedLFTags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CatalogId");
    openapiFields.add("Resource");
    openapiFields.add("ShowAssignedLFTags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Resource");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetResourceLFTagsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetResourceLFTagsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetResourceLFTagsRequest is not found in the empty JSON string", GetResourceLFTagsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetResourceLFTagsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetResourceLFTagsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetResourceLFTagsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) && !jsonObj.get("CatalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CatalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CatalogId").toString()));
      }
      // validate the required field `Resource`
      AddLFTagsToResourceRequestResource.validateJsonElement(jsonObj.get("Resource"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetResourceLFTagsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetResourceLFTagsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetResourceLFTagsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetResourceLFTagsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetResourceLFTagsRequest>() {
           @Override
           public void write(JsonWriter out, GetResourceLFTagsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetResourceLFTagsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetResourceLFTagsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetResourceLFTagsRequest
   * @throws IOException if the JSON string is invalid with respect to GetResourceLFTagsRequest
   */
  public static GetResourceLFTagsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetResourceLFTagsRequest.class);
  }

  /**
   * Convert an instance of GetResourceLFTagsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

