/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTableObjectsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTableObjectsRequest {
  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_DATABASE_NAME = "DatabaseName";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAME)
  private String databaseName;

  public static final String SERIALIZED_NAME_TABLE_NAME = "TableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "TransactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_QUERY_AS_OF_TIME = "QueryAsOfTime";
  @SerializedName(SERIALIZED_NAME_QUERY_AS_OF_TIME)
  private OffsetDateTime queryAsOfTime;

  public static final String SERIALIZED_NAME_PARTITION_PREDICATE = "PartitionPredicate";
  @SerializedName(SERIALIZED_NAME_PARTITION_PREDICATE)
  private String partitionPredicate;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public GetTableObjectsRequest() {
  }

  public GetTableObjectsRequest catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * The catalog containing the governed table. Defaults to the callerâ€™s account.
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public GetTableObjectsRequest databaseName(String databaseName) {
    this.databaseName = databaseName;
    return this;
  }

  /**
   * The database containing the governed table.
   * @return databaseName
   */
  @javax.annotation.Nonnull
  public String getDatabaseName() {
    return databaseName;
  }

  public void setDatabaseName(String databaseName) {
    this.databaseName = databaseName;
  }


  public GetTableObjectsRequest tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * The governed table for which to retrieve objects.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public GetTableObjectsRequest transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with &lt;code&gt;QueryAsOfTime&lt;/code&gt;.
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public GetTableObjectsRequest queryAsOfTime(OffsetDateTime queryAsOfTime) {
    this.queryAsOfTime = queryAsOfTime;
    return this;
  }

  /**
   * The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with &lt;code&gt;TransactionId&lt;/code&gt;.
   * @return queryAsOfTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getQueryAsOfTime() {
    return queryAsOfTime;
  }

  public void setQueryAsOfTime(OffsetDateTime queryAsOfTime) {
    this.queryAsOfTime = queryAsOfTime;
  }


  public GetTableObjectsRequest partitionPredicate(String partitionPredicate) {
    this.partitionPredicate = partitionPredicate;
    return this;
  }

  /**
   * &lt;p&gt;A predicate to filter the objects returned based on the partition keys defined in the governed table.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The comparison operators supported are: &#x3D;, &amp;gt;, &amp;lt;, &amp;gt;&#x3D;, &amp;lt;&#x3D;&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The logical operators supported are: AND&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss\&quot;), string and decimal.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return partitionPredicate
   */
  @javax.annotation.Nullable
  public String getPartitionPredicate() {
    return partitionPredicate;
  }

  public void setPartitionPredicate(String partitionPredicate) {
    this.partitionPredicate = partitionPredicate;
  }


  public GetTableObjectsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * Specifies how many values to return in a page.
   * minimum: 1
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public GetTableObjectsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * A continuation token if this is not the first call to retrieve these objects.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTableObjectsRequest getTableObjectsRequest = (GetTableObjectsRequest) o;
    return Objects.equals(this.catalogId, getTableObjectsRequest.catalogId) &&
        Objects.equals(this.databaseName, getTableObjectsRequest.databaseName) &&
        Objects.equals(this.tableName, getTableObjectsRequest.tableName) &&
        Objects.equals(this.transactionId, getTableObjectsRequest.transactionId) &&
        Objects.equals(this.queryAsOfTime, getTableObjectsRequest.queryAsOfTime) &&
        Objects.equals(this.partitionPredicate, getTableObjectsRequest.partitionPredicate) &&
        Objects.equals(this.maxResults, getTableObjectsRequest.maxResults) &&
        Objects.equals(this.nextToken, getTableObjectsRequest.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogId, databaseName, tableName, transactionId, queryAsOfTime, partitionPredicate, maxResults, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTableObjectsRequest {\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    databaseName: ").append(toIndentedString(databaseName)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    queryAsOfTime: ").append(toIndentedString(queryAsOfTime)).append("\n");
    sb.append("    partitionPredicate: ").append(toIndentedString(partitionPredicate)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CatalogId");
    openapiFields.add("DatabaseName");
    openapiFields.add("TableName");
    openapiFields.add("TransactionId");
    openapiFields.add("QueryAsOfTime");
    openapiFields.add("PartitionPredicate");
    openapiFields.add("MaxResults");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DatabaseName");
    openapiRequiredFields.add("TableName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTableObjectsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTableObjectsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTableObjectsRequest is not found in the empty JSON string", GetTableObjectsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTableObjectsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTableObjectsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTableObjectsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) && !jsonObj.get("CatalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CatalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CatalogId").toString()));
      }
      if (!jsonObj.get("DatabaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DatabaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DatabaseName").toString()));
      }
      if (!jsonObj.get("TableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableName").toString()));
      }
      if ((jsonObj.get("TransactionId") != null && !jsonObj.get("TransactionId").isJsonNull()) && !jsonObj.get("TransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionId").toString()));
      }
      if ((jsonObj.get("PartitionPredicate") != null && !jsonObj.get("PartitionPredicate").isJsonNull()) && !jsonObj.get("PartitionPredicate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PartitionPredicate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PartitionPredicate").toString()));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTableObjectsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTableObjectsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTableObjectsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTableObjectsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTableObjectsRequest>() {
           @Override
           public void write(JsonWriter out, GetTableObjectsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTableObjectsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTableObjectsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTableObjectsRequest
   * @throws IOException if the JSON string is invalid with respect to GetTableObjectsRequest
   */
  public static GetTableObjectsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTableObjectsRequest.class);
  }

  /**
   * Convert an instance of GetTableObjectsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

