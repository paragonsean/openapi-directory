/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BatchPermissionsRequestEntryPrincipal;
import org.openapitools.client.model.BatchPermissionsRequestEntryResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A permission to a resource granted by batch operation to the principal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchPermissionsRequestEntry {
  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRINCIPAL = "Principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private BatchPermissionsRequestEntryPrincipal principal;

  public static final String SERIALIZED_NAME_RESOURCE = "Resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private BatchPermissionsRequestEntryResource resource;

  public static final String SERIALIZED_NAME_PERMISSIONS = "Permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List permissions;

  public static final String SERIALIZED_NAME_PERMISSIONS_WITH_GRANT_OPTION = "PermissionsWithGrantOption";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_WITH_GRANT_OPTION)
  private List permissionsWithGrantOption;

  public BatchPermissionsRequestEntry() {
  }

  public BatchPermissionsRequestEntry id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BatchPermissionsRequestEntry principal(BatchPermissionsRequestEntryPrincipal principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nullable
  public BatchPermissionsRequestEntryPrincipal getPrincipal() {
    return principal;
  }

  public void setPrincipal(BatchPermissionsRequestEntryPrincipal principal) {
    this.principal = principal;
  }


  public BatchPermissionsRequestEntry resource(BatchPermissionsRequestEntryResource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public BatchPermissionsRequestEntryResource getResource() {
    return resource;
  }

  public void setResource(BatchPermissionsRequestEntryResource resource) {
    this.resource = resource;
  }


  public BatchPermissionsRequestEntry permissions(List permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public List getPermissions() {
    return permissions;
  }

  public void setPermissions(List permissions) {
    this.permissions = permissions;
  }


  public BatchPermissionsRequestEntry permissionsWithGrantOption(List permissionsWithGrantOption) {
    this.permissionsWithGrantOption = permissionsWithGrantOption;
    return this;
  }

  /**
   * Get permissionsWithGrantOption
   * @return permissionsWithGrantOption
   */
  @javax.annotation.Nullable
  public List getPermissionsWithGrantOption() {
    return permissionsWithGrantOption;
  }

  public void setPermissionsWithGrantOption(List permissionsWithGrantOption) {
    this.permissionsWithGrantOption = permissionsWithGrantOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchPermissionsRequestEntry batchPermissionsRequestEntry = (BatchPermissionsRequestEntry) o;
    return Objects.equals(this.id, batchPermissionsRequestEntry.id) &&
        Objects.equals(this.principal, batchPermissionsRequestEntry.principal) &&
        Objects.equals(this.resource, batchPermissionsRequestEntry.resource) &&
        Objects.equals(this.permissions, batchPermissionsRequestEntry.permissions) &&
        Objects.equals(this.permissionsWithGrantOption, batchPermissionsRequestEntry.permissionsWithGrantOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, principal, resource, permissions, permissionsWithGrantOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchPermissionsRequestEntry {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    permissionsWithGrantOption: ").append(toIndentedString(permissionsWithGrantOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Id");
    openapiFields.add("Principal");
    openapiFields.add("Resource");
    openapiFields.add("Permissions");
    openapiFields.add("PermissionsWithGrantOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchPermissionsRequestEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchPermissionsRequestEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchPermissionsRequestEntry is not found in the empty JSON string", BatchPermissionsRequestEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchPermissionsRequestEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchPermissionsRequestEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BatchPermissionsRequestEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Id`
      String.validateJsonElement(jsonObj.get("Id"));
      // validate the optional field `Principal`
      if (jsonObj.get("Principal") != null && !jsonObj.get("Principal").isJsonNull()) {
        BatchPermissionsRequestEntryPrincipal.validateJsonElement(jsonObj.get("Principal"));
      }
      // validate the optional field `Resource`
      if (jsonObj.get("Resource") != null && !jsonObj.get("Resource").isJsonNull()) {
        BatchPermissionsRequestEntryResource.validateJsonElement(jsonObj.get("Resource"));
      }
      // validate the optional field `Permissions`
      if (jsonObj.get("Permissions") != null && !jsonObj.get("Permissions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Permissions"));
      }
      // validate the optional field `PermissionsWithGrantOption`
      if (jsonObj.get("PermissionsWithGrantOption") != null && !jsonObj.get("PermissionsWithGrantOption").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PermissionsWithGrantOption"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchPermissionsRequestEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchPermissionsRequestEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchPermissionsRequestEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchPermissionsRequestEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchPermissionsRequestEntry>() {
           @Override
           public void write(JsonWriter out, BatchPermissionsRequestEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchPermissionsRequestEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchPermissionsRequestEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchPermissionsRequestEntry
   * @throws IOException if the JSON string is invalid with respect to BatchPermissionsRequestEntry
   */
  public static BatchPermissionsRequestEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchPermissionsRequestEntry.class);
  }

  /**
   * Convert an instance of BatchPermissionsRequestEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

