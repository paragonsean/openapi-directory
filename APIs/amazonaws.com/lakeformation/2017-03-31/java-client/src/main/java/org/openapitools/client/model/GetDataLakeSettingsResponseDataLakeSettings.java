/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDataLakeSettingsResponseDataLakeSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDataLakeSettingsResponseDataLakeSettings {
  public static final String SERIALIZED_NAME_DATA_LAKE_ADMINS = "DataLakeAdmins";
  @SerializedName(SERIALIZED_NAME_DATA_LAKE_ADMINS)
  private List dataLakeAdmins;

  public static final String SERIALIZED_NAME_READ_ONLY_ADMINS = "ReadOnlyAdmins";
  @SerializedName(SERIALIZED_NAME_READ_ONLY_ADMINS)
  private List readOnlyAdmins;

  public static final String SERIALIZED_NAME_CREATE_DATABASE_DEFAULT_PERMISSIONS = "CreateDatabaseDefaultPermissions";
  @SerializedName(SERIALIZED_NAME_CREATE_DATABASE_DEFAULT_PERMISSIONS)
  private List createDatabaseDefaultPermissions;

  public static final String SERIALIZED_NAME_CREATE_TABLE_DEFAULT_PERMISSIONS = "CreateTableDefaultPermissions";
  @SerializedName(SERIALIZED_NAME_CREATE_TABLE_DEFAULT_PERMISSIONS)
  private List createTableDefaultPermissions;

  public static final String SERIALIZED_NAME_PARAMETERS = "Parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_TRUSTED_RESOURCE_OWNERS = "TrustedResourceOwners";
  @SerializedName(SERIALIZED_NAME_TRUSTED_RESOURCE_OWNERS)
  private List trustedResourceOwners;

  public static final String SERIALIZED_NAME_ALLOW_EXTERNAL_DATA_FILTERING = "AllowExternalDataFiltering";
  @SerializedName(SERIALIZED_NAME_ALLOW_EXTERNAL_DATA_FILTERING)
  private Boolean allowExternalDataFiltering;

  public static final String SERIALIZED_NAME_ALLOW_FULL_TABLE_EXTERNAL_DATA_ACCESS = "AllowFullTableExternalDataAccess";
  @SerializedName(SERIALIZED_NAME_ALLOW_FULL_TABLE_EXTERNAL_DATA_ACCESS)
  private Boolean allowFullTableExternalDataAccess;

  public static final String SERIALIZED_NAME_EXTERNAL_DATA_FILTERING_ALLOW_LIST = "ExternalDataFilteringAllowList";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DATA_FILTERING_ALLOW_LIST)
  private List externalDataFilteringAllowList;

  public static final String SERIALIZED_NAME_AUTHORIZED_SESSION_TAG_VALUE_LIST = "AuthorizedSessionTagValueList";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_SESSION_TAG_VALUE_LIST)
  private List authorizedSessionTagValueList;

  public GetDataLakeSettingsResponseDataLakeSettings() {
  }

  public GetDataLakeSettingsResponseDataLakeSettings dataLakeAdmins(List dataLakeAdmins) {
    this.dataLakeAdmins = dataLakeAdmins;
    return this;
  }

  /**
   * Get dataLakeAdmins
   * @return dataLakeAdmins
   */
  @javax.annotation.Nullable
  public List getDataLakeAdmins() {
    return dataLakeAdmins;
  }

  public void setDataLakeAdmins(List dataLakeAdmins) {
    this.dataLakeAdmins = dataLakeAdmins;
  }


  public GetDataLakeSettingsResponseDataLakeSettings readOnlyAdmins(List readOnlyAdmins) {
    this.readOnlyAdmins = readOnlyAdmins;
    return this;
  }

  /**
   * Get readOnlyAdmins
   * @return readOnlyAdmins
   */
  @javax.annotation.Nullable
  public List getReadOnlyAdmins() {
    return readOnlyAdmins;
  }

  public void setReadOnlyAdmins(List readOnlyAdmins) {
    this.readOnlyAdmins = readOnlyAdmins;
  }


  public GetDataLakeSettingsResponseDataLakeSettings createDatabaseDefaultPermissions(List createDatabaseDefaultPermissions) {
    this.createDatabaseDefaultPermissions = createDatabaseDefaultPermissions;
    return this;
  }

  /**
   * Get createDatabaseDefaultPermissions
   * @return createDatabaseDefaultPermissions
   */
  @javax.annotation.Nullable
  public List getCreateDatabaseDefaultPermissions() {
    return createDatabaseDefaultPermissions;
  }

  public void setCreateDatabaseDefaultPermissions(List createDatabaseDefaultPermissions) {
    this.createDatabaseDefaultPermissions = createDatabaseDefaultPermissions;
  }


  public GetDataLakeSettingsResponseDataLakeSettings createTableDefaultPermissions(List createTableDefaultPermissions) {
    this.createTableDefaultPermissions = createTableDefaultPermissions;
    return this;
  }

  /**
   * Get createTableDefaultPermissions
   * @return createTableDefaultPermissions
   */
  @javax.annotation.Nullable
  public List getCreateTableDefaultPermissions() {
    return createTableDefaultPermissions;
  }

  public void setCreateTableDefaultPermissions(List createTableDefaultPermissions) {
    this.createTableDefaultPermissions = createTableDefaultPermissions;
  }


  public GetDataLakeSettingsResponseDataLakeSettings parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public GetDataLakeSettingsResponseDataLakeSettings trustedResourceOwners(List trustedResourceOwners) {
    this.trustedResourceOwners = trustedResourceOwners;
    return this;
  }

  /**
   * Get trustedResourceOwners
   * @return trustedResourceOwners
   */
  @javax.annotation.Nullable
  public List getTrustedResourceOwners() {
    return trustedResourceOwners;
  }

  public void setTrustedResourceOwners(List trustedResourceOwners) {
    this.trustedResourceOwners = trustedResourceOwners;
  }


  public GetDataLakeSettingsResponseDataLakeSettings allowExternalDataFiltering(Boolean allowExternalDataFiltering) {
    this.allowExternalDataFiltering = allowExternalDataFiltering;
    return this;
  }

  /**
   * Get allowExternalDataFiltering
   * @return allowExternalDataFiltering
   */
  @javax.annotation.Nullable
  public Boolean getAllowExternalDataFiltering() {
    return allowExternalDataFiltering;
  }

  public void setAllowExternalDataFiltering(Boolean allowExternalDataFiltering) {
    this.allowExternalDataFiltering = allowExternalDataFiltering;
  }


  public GetDataLakeSettingsResponseDataLakeSettings allowFullTableExternalDataAccess(Boolean allowFullTableExternalDataAccess) {
    this.allowFullTableExternalDataAccess = allowFullTableExternalDataAccess;
    return this;
  }

  /**
   * Get allowFullTableExternalDataAccess
   * @return allowFullTableExternalDataAccess
   */
  @javax.annotation.Nullable
  public Boolean getAllowFullTableExternalDataAccess() {
    return allowFullTableExternalDataAccess;
  }

  public void setAllowFullTableExternalDataAccess(Boolean allowFullTableExternalDataAccess) {
    this.allowFullTableExternalDataAccess = allowFullTableExternalDataAccess;
  }


  public GetDataLakeSettingsResponseDataLakeSettings externalDataFilteringAllowList(List externalDataFilteringAllowList) {
    this.externalDataFilteringAllowList = externalDataFilteringAllowList;
    return this;
  }

  /**
   * Get externalDataFilteringAllowList
   * @return externalDataFilteringAllowList
   */
  @javax.annotation.Nullable
  public List getExternalDataFilteringAllowList() {
    return externalDataFilteringAllowList;
  }

  public void setExternalDataFilteringAllowList(List externalDataFilteringAllowList) {
    this.externalDataFilteringAllowList = externalDataFilteringAllowList;
  }


  public GetDataLakeSettingsResponseDataLakeSettings authorizedSessionTagValueList(List authorizedSessionTagValueList) {
    this.authorizedSessionTagValueList = authorizedSessionTagValueList;
    return this;
  }

  /**
   * Get authorizedSessionTagValueList
   * @return authorizedSessionTagValueList
   */
  @javax.annotation.Nullable
  public List getAuthorizedSessionTagValueList() {
    return authorizedSessionTagValueList;
  }

  public void setAuthorizedSessionTagValueList(List authorizedSessionTagValueList) {
    this.authorizedSessionTagValueList = authorizedSessionTagValueList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDataLakeSettingsResponseDataLakeSettings getDataLakeSettingsResponseDataLakeSettings = (GetDataLakeSettingsResponseDataLakeSettings) o;
    return Objects.equals(this.dataLakeAdmins, getDataLakeSettingsResponseDataLakeSettings.dataLakeAdmins) &&
        Objects.equals(this.readOnlyAdmins, getDataLakeSettingsResponseDataLakeSettings.readOnlyAdmins) &&
        Objects.equals(this.createDatabaseDefaultPermissions, getDataLakeSettingsResponseDataLakeSettings.createDatabaseDefaultPermissions) &&
        Objects.equals(this.createTableDefaultPermissions, getDataLakeSettingsResponseDataLakeSettings.createTableDefaultPermissions) &&
        Objects.equals(this.parameters, getDataLakeSettingsResponseDataLakeSettings.parameters) &&
        Objects.equals(this.trustedResourceOwners, getDataLakeSettingsResponseDataLakeSettings.trustedResourceOwners) &&
        Objects.equals(this.allowExternalDataFiltering, getDataLakeSettingsResponseDataLakeSettings.allowExternalDataFiltering) &&
        Objects.equals(this.allowFullTableExternalDataAccess, getDataLakeSettingsResponseDataLakeSettings.allowFullTableExternalDataAccess) &&
        Objects.equals(this.externalDataFilteringAllowList, getDataLakeSettingsResponseDataLakeSettings.externalDataFilteringAllowList) &&
        Objects.equals(this.authorizedSessionTagValueList, getDataLakeSettingsResponseDataLakeSettings.authorizedSessionTagValueList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataLakeAdmins, readOnlyAdmins, createDatabaseDefaultPermissions, createTableDefaultPermissions, parameters, trustedResourceOwners, allowExternalDataFiltering, allowFullTableExternalDataAccess, externalDataFilteringAllowList, authorizedSessionTagValueList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDataLakeSettingsResponseDataLakeSettings {\n");
    sb.append("    dataLakeAdmins: ").append(toIndentedString(dataLakeAdmins)).append("\n");
    sb.append("    readOnlyAdmins: ").append(toIndentedString(readOnlyAdmins)).append("\n");
    sb.append("    createDatabaseDefaultPermissions: ").append(toIndentedString(createDatabaseDefaultPermissions)).append("\n");
    sb.append("    createTableDefaultPermissions: ").append(toIndentedString(createTableDefaultPermissions)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    trustedResourceOwners: ").append(toIndentedString(trustedResourceOwners)).append("\n");
    sb.append("    allowExternalDataFiltering: ").append(toIndentedString(allowExternalDataFiltering)).append("\n");
    sb.append("    allowFullTableExternalDataAccess: ").append(toIndentedString(allowFullTableExternalDataAccess)).append("\n");
    sb.append("    externalDataFilteringAllowList: ").append(toIndentedString(externalDataFilteringAllowList)).append("\n");
    sb.append("    authorizedSessionTagValueList: ").append(toIndentedString(authorizedSessionTagValueList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataLakeAdmins");
    openapiFields.add("ReadOnlyAdmins");
    openapiFields.add("CreateDatabaseDefaultPermissions");
    openapiFields.add("CreateTableDefaultPermissions");
    openapiFields.add("Parameters");
    openapiFields.add("TrustedResourceOwners");
    openapiFields.add("AllowExternalDataFiltering");
    openapiFields.add("AllowFullTableExternalDataAccess");
    openapiFields.add("ExternalDataFilteringAllowList");
    openapiFields.add("AuthorizedSessionTagValueList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDataLakeSettingsResponseDataLakeSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDataLakeSettingsResponseDataLakeSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDataLakeSettingsResponseDataLakeSettings is not found in the empty JSON string", GetDataLakeSettingsResponseDataLakeSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDataLakeSettingsResponseDataLakeSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDataLakeSettingsResponseDataLakeSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DataLakeAdmins`
      if (jsonObj.get("DataLakeAdmins") != null && !jsonObj.get("DataLakeAdmins").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DataLakeAdmins"));
      }
      // validate the optional field `ReadOnlyAdmins`
      if (jsonObj.get("ReadOnlyAdmins") != null && !jsonObj.get("ReadOnlyAdmins").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReadOnlyAdmins"));
      }
      // validate the optional field `CreateDatabaseDefaultPermissions`
      if (jsonObj.get("CreateDatabaseDefaultPermissions") != null && !jsonObj.get("CreateDatabaseDefaultPermissions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CreateDatabaseDefaultPermissions"));
      }
      // validate the optional field `CreateTableDefaultPermissions`
      if (jsonObj.get("CreateTableDefaultPermissions") != null && !jsonObj.get("CreateTableDefaultPermissions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("CreateTableDefaultPermissions"));
      }
      // validate the optional field `Parameters`
      if (jsonObj.get("Parameters") != null && !jsonObj.get("Parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Parameters"));
      }
      // validate the optional field `TrustedResourceOwners`
      if (jsonObj.get("TrustedResourceOwners") != null && !jsonObj.get("TrustedResourceOwners").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("TrustedResourceOwners"));
      }
      // validate the optional field `AllowExternalDataFiltering`
      if (jsonObj.get("AllowExternalDataFiltering") != null && !jsonObj.get("AllowExternalDataFiltering").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowExternalDataFiltering"));
      }
      // validate the optional field `AllowFullTableExternalDataAccess`
      if (jsonObj.get("AllowFullTableExternalDataAccess") != null && !jsonObj.get("AllowFullTableExternalDataAccess").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("AllowFullTableExternalDataAccess"));
      }
      // validate the optional field `ExternalDataFilteringAllowList`
      if (jsonObj.get("ExternalDataFilteringAllowList") != null && !jsonObj.get("ExternalDataFilteringAllowList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ExternalDataFilteringAllowList"));
      }
      // validate the optional field `AuthorizedSessionTagValueList`
      if (jsonObj.get("AuthorizedSessionTagValueList") != null && !jsonObj.get("AuthorizedSessionTagValueList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AuthorizedSessionTagValueList"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDataLakeSettingsResponseDataLakeSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDataLakeSettingsResponseDataLakeSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDataLakeSettingsResponseDataLakeSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDataLakeSettingsResponseDataLakeSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDataLakeSettingsResponseDataLakeSettings>() {
           @Override
           public void write(JsonWriter out, GetDataLakeSettingsResponseDataLakeSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDataLakeSettingsResponseDataLakeSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDataLakeSettingsResponseDataLakeSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDataLakeSettingsResponseDataLakeSettings
   * @throws IOException if the JSON string is invalid with respect to GetDataLakeSettingsResponseDataLakeSettings
   */
  public static GetDataLakeSettingsResponseDataLakeSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDataLakeSettingsResponseDataLakeSettings.class);
  }

  /**
   * Convert an instance of GetDataLakeSettingsResponseDataLakeSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

