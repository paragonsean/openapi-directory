/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RegisterResourceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterResourceRequest {
  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public static final String SERIALIZED_NAME_USE_SERVICE_LINKED_ROLE = "UseServiceLinkedRole";
  @SerializedName(SERIALIZED_NAME_USE_SERVICE_LINKED_ROLE)
  private Boolean useServiceLinkedRole;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_WITH_FEDERATION = "WithFederation";
  @SerializedName(SERIALIZED_NAME_WITH_FEDERATION)
  private Boolean withFederation;

  public RegisterResourceRequest() {
  }

  public RegisterResourceRequest resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the resource that you want to register.
   * @return resourceArn
   */
  @javax.annotation.Nonnull
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }


  public RegisterResourceRequest useServiceLinkedRole(Boolean useServiceLinkedRole) {
    this.useServiceLinkedRole = useServiceLinkedRole;
    return this;
  }

  /**
   * &lt;p&gt;Designates an Identity and Access Management (IAM) service-linked role by registering this role with the Data Catalog. A service-linked role is a unique type of IAM role that is linked directly to Lake Formation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lake-formation/latest/dg/service-linked-roles.html\&quot;&gt;Using Service-Linked Roles for Lake Formation&lt;/a&gt;.&lt;/p&gt;
   * @return useServiceLinkedRole
   */
  @javax.annotation.Nullable
  public Boolean getUseServiceLinkedRole() {
    return useServiceLinkedRole;
  }

  public void setUseServiceLinkedRole(Boolean useServiceLinkedRole) {
    this.useServiceLinkedRole = useServiceLinkedRole;
  }


  public RegisterResourceRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The identifier for the role that registers the resource.
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public RegisterResourceRequest withFederation(Boolean withFederation) {
    this.withFederation = withFederation;
    return this;
  }

  /**
   * Whether or not the resource is a federated resource.
   * @return withFederation
   */
  @javax.annotation.Nullable
  public Boolean getWithFederation() {
    return withFederation;
  }

  public void setWithFederation(Boolean withFederation) {
    this.withFederation = withFederation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterResourceRequest registerResourceRequest = (RegisterResourceRequest) o;
    return Objects.equals(this.resourceArn, registerResourceRequest.resourceArn) &&
        Objects.equals(this.useServiceLinkedRole, registerResourceRequest.useServiceLinkedRole) &&
        Objects.equals(this.roleArn, registerResourceRequest.roleArn) &&
        Objects.equals(this.withFederation, registerResourceRequest.withFederation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceArn, useServiceLinkedRole, roleArn, withFederation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterResourceRequest {\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("    useServiceLinkedRole: ").append(toIndentedString(useServiceLinkedRole)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    withFederation: ").append(toIndentedString(withFederation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ResourceArn");
    openapiFields.add("UseServiceLinkedRole");
    openapiFields.add("RoleArn");
    openapiFields.add("WithFederation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ResourceArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterResourceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterResourceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterResourceRequest is not found in the empty JSON string", RegisterResourceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterResourceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterResourceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegisterResourceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("ResourceArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceArn").toString()));
      }
      if ((jsonObj.get("RoleArn") != null && !jsonObj.get("RoleArn").isJsonNull()) && !jsonObj.get("RoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterResourceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterResourceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterResourceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterResourceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterResourceRequest>() {
           @Override
           public void write(JsonWriter out, RegisterResourceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterResourceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterResourceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterResourceRequest
   * @throws IOException if the JSON string is invalid with respect to RegisterResourceRequest
   */
  public static RegisterResourceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterResourceRequest.class);
  }

  /**
   * Convert an instance of RegisterResourceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

