/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AddLFTagsToResourceRequestResource;
import org.openapitools.client.model.GrantPermissionsRequestPrincipal;
import org.openapitools.client.model.Permission;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GrantPermissionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GrantPermissionsRequest {
  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_PRINCIPAL = "Principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private GrantPermissionsRequestPrincipal principal;

  public static final String SERIALIZED_NAME_RESOURCE = "Resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private AddLFTagsToResourceRequestResource resource;

  public static final String SERIALIZED_NAME_PERMISSIONS = "Permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<Permission> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERMISSIONS_WITH_GRANT_OPTION = "PermissionsWithGrantOption";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_WITH_GRANT_OPTION)
  private List<Permission> permissionsWithGrantOption = new ArrayList<>();

  public GrantPermissionsRequest() {
  }

  public GrantPermissionsRequest catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public GrantPermissionsRequest principal(GrantPermissionsRequestPrincipal principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nonnull
  public GrantPermissionsRequestPrincipal getPrincipal() {
    return principal;
  }

  public void setPrincipal(GrantPermissionsRequestPrincipal principal) {
    this.principal = principal;
  }


  public GrantPermissionsRequest resource(AddLFTagsToResourceRequestResource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nonnull
  public AddLFTagsToResourceRequestResource getResource() {
    return resource;
  }

  public void setResource(AddLFTagsToResourceRequestResource resource) {
    this.resource = resource;
  }


  public GrantPermissionsRequest permissions(List<Permission> permissions) {
    this.permissions = permissions;
    return this;
  }

  public GrantPermissionsRequest addPermissionsItem(Permission permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. 
   * @return permissions
   */
  @javax.annotation.Nonnull
  public List<Permission> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<Permission> permissions) {
    this.permissions = permissions;
  }


  public GrantPermissionsRequest permissionsWithGrantOption(List<Permission> permissionsWithGrantOption) {
    this.permissionsWithGrantOption = permissionsWithGrantOption;
    return this;
  }

  public GrantPermissionsRequest addPermissionsWithGrantOptionItem(Permission permissionsWithGrantOptionItem) {
    if (this.permissionsWithGrantOption == null) {
      this.permissionsWithGrantOption = new ArrayList<>();
    }
    this.permissionsWithGrantOption.add(permissionsWithGrantOptionItem);
    return this;
  }

  /**
   * Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the &lt;code&gt;Privileges&lt;/code&gt;.
   * @return permissionsWithGrantOption
   */
  @javax.annotation.Nullable
  public List<Permission> getPermissionsWithGrantOption() {
    return permissionsWithGrantOption;
  }

  public void setPermissionsWithGrantOption(List<Permission> permissionsWithGrantOption) {
    this.permissionsWithGrantOption = permissionsWithGrantOption;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GrantPermissionsRequest grantPermissionsRequest = (GrantPermissionsRequest) o;
    return Objects.equals(this.catalogId, grantPermissionsRequest.catalogId) &&
        Objects.equals(this.principal, grantPermissionsRequest.principal) &&
        Objects.equals(this.resource, grantPermissionsRequest.resource) &&
        Objects.equals(this.permissions, grantPermissionsRequest.permissions) &&
        Objects.equals(this.permissionsWithGrantOption, grantPermissionsRequest.permissionsWithGrantOption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogId, principal, resource, permissions, permissionsWithGrantOption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GrantPermissionsRequest {\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    permissionsWithGrantOption: ").append(toIndentedString(permissionsWithGrantOption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CatalogId");
    openapiFields.add("Principal");
    openapiFields.add("Resource");
    openapiFields.add("Permissions");
    openapiFields.add("PermissionsWithGrantOption");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Principal");
    openapiRequiredFields.add("Resource");
    openapiRequiredFields.add("Permissions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GrantPermissionsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GrantPermissionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GrantPermissionsRequest is not found in the empty JSON string", GrantPermissionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GrantPermissionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GrantPermissionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GrantPermissionsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) && !jsonObj.get("CatalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CatalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CatalogId").toString()));
      }
      // validate the required field `Principal`
      GrantPermissionsRequestPrincipal.validateJsonElement(jsonObj.get("Principal"));
      // validate the required field `Resource`
      AddLFTagsToResourceRequestResource.validateJsonElement(jsonObj.get("Resource"));
      // ensure the required json array is present
      if (jsonObj.get("Permissions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Permissions` to be an array in the JSON string but got `%s`", jsonObj.get("Permissions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("PermissionsWithGrantOption") != null && !jsonObj.get("PermissionsWithGrantOption").isJsonNull() && !jsonObj.get("PermissionsWithGrantOption").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PermissionsWithGrantOption` to be an array in the JSON string but got `%s`", jsonObj.get("PermissionsWithGrantOption").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GrantPermissionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GrantPermissionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GrantPermissionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GrantPermissionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GrantPermissionsRequest>() {
           @Override
           public void write(JsonWriter out, GrantPermissionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GrantPermissionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GrantPermissionsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GrantPermissionsRequest
   * @throws IOException if the JSON string is invalid with respect to GrantPermissionsRequest
   */
  public static GrantPermissionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GrantPermissionsRequest.class);
  }

  /**
   * Convert an instance of GrantPermissionsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

