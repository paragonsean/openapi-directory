/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetTemporaryGluePartitionCredentialsRequestAuditContext;
import org.openapitools.client.model.GetTemporaryGluePartitionCredentialsRequestPartition;
import org.openapitools.client.model.Permission;
import org.openapitools.client.model.PermissionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetTemporaryGluePartitionCredentialsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTemporaryGluePartitionCredentialsRequest {
  public static final String SERIALIZED_NAME_TABLE_ARN = "TableArn";
  @SerializedName(SERIALIZED_NAME_TABLE_ARN)
  private String tableArn;

  public static final String SERIALIZED_NAME_PARTITION = "Partition";
  @SerializedName(SERIALIZED_NAME_PARTITION)
  private GetTemporaryGluePartitionCredentialsRequestPartition partition;

  public static final String SERIALIZED_NAME_PERMISSIONS = "Permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<Permission> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DURATION_SECONDS = "DurationSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS)
  private Integer durationSeconds;

  public static final String SERIALIZED_NAME_AUDIT_CONTEXT = "AuditContext";
  @SerializedName(SERIALIZED_NAME_AUDIT_CONTEXT)
  private GetTemporaryGluePartitionCredentialsRequestAuditContext auditContext;

  public static final String SERIALIZED_NAME_SUPPORTED_PERMISSION_TYPES = "SupportedPermissionTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PERMISSION_TYPES)
  private List<PermissionType> supportedPermissionTypes = new ArrayList<>();

  public GetTemporaryGluePartitionCredentialsRequest() {
  }

  public GetTemporaryGluePartitionCredentialsRequest tableArn(String tableArn) {
    this.tableArn = tableArn;
    return this;
  }

  /**
   * The ARN of the partitions&#39; table.
   * @return tableArn
   */
  @javax.annotation.Nonnull
  public String getTableArn() {
    return tableArn;
  }

  public void setTableArn(String tableArn) {
    this.tableArn = tableArn;
  }


  public GetTemporaryGluePartitionCredentialsRequest partition(GetTemporaryGluePartitionCredentialsRequestPartition partition) {
    this.partition = partition;
    return this;
  }

  /**
   * Get partition
   * @return partition
   */
  @javax.annotation.Nonnull
  public GetTemporaryGluePartitionCredentialsRequestPartition getPartition() {
    return partition;
  }

  public void setPartition(GetTemporaryGluePartitionCredentialsRequestPartition partition) {
    this.partition = partition;
  }


  public GetTemporaryGluePartitionCredentialsRequest permissions(List<Permission> permissions) {
    this.permissions = permissions;
    return this;
  }

  public GetTemporaryGluePartitionCredentialsRequest addPermissionsItem(Permission permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

  /**
   * Filters the request based on the user having been granted a list of specified permissions on the requested resource(s).
   * @return permissions
   */
  @javax.annotation.Nullable
  public List<Permission> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<Permission> permissions) {
    this.permissions = permissions;
  }


  public GetTemporaryGluePartitionCredentialsRequest durationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
    return this;
  }

  /**
   * The time period, between 900 and 21,600 seconds, for the timeout of the temporary credentials.
   * minimum: 900
   * maximum: 43200
   * @return durationSeconds
   */
  @javax.annotation.Nullable
  public Integer getDurationSeconds() {
    return durationSeconds;
  }

  public void setDurationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
  }


  public GetTemporaryGluePartitionCredentialsRequest auditContext(GetTemporaryGluePartitionCredentialsRequestAuditContext auditContext) {
    this.auditContext = auditContext;
    return this;
  }

  /**
   * Get auditContext
   * @return auditContext
   */
  @javax.annotation.Nullable
  public GetTemporaryGluePartitionCredentialsRequestAuditContext getAuditContext() {
    return auditContext;
  }

  public void setAuditContext(GetTemporaryGluePartitionCredentialsRequestAuditContext auditContext) {
    this.auditContext = auditContext;
  }


  public GetTemporaryGluePartitionCredentialsRequest supportedPermissionTypes(List<PermissionType> supportedPermissionTypes) {
    this.supportedPermissionTypes = supportedPermissionTypes;
    return this;
  }

  public GetTemporaryGluePartitionCredentialsRequest addSupportedPermissionTypesItem(PermissionType supportedPermissionTypesItem) {
    if (this.supportedPermissionTypes == null) {
      this.supportedPermissionTypes = new ArrayList<>();
    }
    this.supportedPermissionTypes.add(supportedPermissionTypesItem);
    return this;
  }

  /**
   * A list of supported permission types for the partition. Valid values are &lt;code&gt;COLUMN_PERMISSION&lt;/code&gt; and &lt;code&gt;CELL_FILTER_PERMISSION&lt;/code&gt;.
   * @return supportedPermissionTypes
   */
  @javax.annotation.Nullable
  public List<PermissionType> getSupportedPermissionTypes() {
    return supportedPermissionTypes;
  }

  public void setSupportedPermissionTypes(List<PermissionType> supportedPermissionTypes) {
    this.supportedPermissionTypes = supportedPermissionTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTemporaryGluePartitionCredentialsRequest getTemporaryGluePartitionCredentialsRequest = (GetTemporaryGluePartitionCredentialsRequest) o;
    return Objects.equals(this.tableArn, getTemporaryGluePartitionCredentialsRequest.tableArn) &&
        Objects.equals(this.partition, getTemporaryGluePartitionCredentialsRequest.partition) &&
        Objects.equals(this.permissions, getTemporaryGluePartitionCredentialsRequest.permissions) &&
        Objects.equals(this.durationSeconds, getTemporaryGluePartitionCredentialsRequest.durationSeconds) &&
        Objects.equals(this.auditContext, getTemporaryGluePartitionCredentialsRequest.auditContext) &&
        Objects.equals(this.supportedPermissionTypes, getTemporaryGluePartitionCredentialsRequest.supportedPermissionTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tableArn, partition, permissions, durationSeconds, auditContext, supportedPermissionTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTemporaryGluePartitionCredentialsRequest {\n");
    sb.append("    tableArn: ").append(toIndentedString(tableArn)).append("\n");
    sb.append("    partition: ").append(toIndentedString(partition)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    durationSeconds: ").append(toIndentedString(durationSeconds)).append("\n");
    sb.append("    auditContext: ").append(toIndentedString(auditContext)).append("\n");
    sb.append("    supportedPermissionTypes: ").append(toIndentedString(supportedPermissionTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TableArn");
    openapiFields.add("Partition");
    openapiFields.add("Permissions");
    openapiFields.add("DurationSeconds");
    openapiFields.add("AuditContext");
    openapiFields.add("SupportedPermissionTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TableArn");
    openapiRequiredFields.add("Partition");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTemporaryGluePartitionCredentialsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTemporaryGluePartitionCredentialsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTemporaryGluePartitionCredentialsRequest is not found in the empty JSON string", GetTemporaryGluePartitionCredentialsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTemporaryGluePartitionCredentialsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTemporaryGluePartitionCredentialsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTemporaryGluePartitionCredentialsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("TableArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TableArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TableArn").toString()));
      }
      // validate the required field `Partition`
      GetTemporaryGluePartitionCredentialsRequestPartition.validateJsonElement(jsonObj.get("Partition"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("Permissions") != null && !jsonObj.get("Permissions").isJsonNull() && !jsonObj.get("Permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Permissions` to be an array in the JSON string but got `%s`", jsonObj.get("Permissions").toString()));
      }
      // validate the optional field `AuditContext`
      if (jsonObj.get("AuditContext") != null && !jsonObj.get("AuditContext").isJsonNull()) {
        GetTemporaryGluePartitionCredentialsRequestAuditContext.validateJsonElement(jsonObj.get("AuditContext"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("SupportedPermissionTypes") != null && !jsonObj.get("SupportedPermissionTypes").isJsonNull() && !jsonObj.get("SupportedPermissionTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `SupportedPermissionTypes` to be an array in the JSON string but got `%s`", jsonObj.get("SupportedPermissionTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTemporaryGluePartitionCredentialsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTemporaryGluePartitionCredentialsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTemporaryGluePartitionCredentialsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTemporaryGluePartitionCredentialsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTemporaryGluePartitionCredentialsRequest>() {
           @Override
           public void write(JsonWriter out, GetTemporaryGluePartitionCredentialsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTemporaryGluePartitionCredentialsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTemporaryGluePartitionCredentialsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTemporaryGluePartitionCredentialsRequest
   * @throws IOException if the JSON string is invalid with respect to GetTemporaryGluePartitionCredentialsRequest
   */
  public static GetTemporaryGluePartitionCredentialsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTemporaryGluePartitionCredentialsRequest.class);
  }

  /**
   * Convert an instance of GetTemporaryGluePartitionCredentialsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

