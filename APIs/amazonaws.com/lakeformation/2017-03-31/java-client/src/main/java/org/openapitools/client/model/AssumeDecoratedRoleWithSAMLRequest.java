/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AssumeDecoratedRoleWithSAMLRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssumeDecoratedRoleWithSAMLRequest {
  public static final String SERIALIZED_NAME_SA_M_L_ASSERTION = "SAMLAssertion";
  @SerializedName(SERIALIZED_NAME_SA_M_L_ASSERTION)
  private String saMLAssertion;

  public static final String SERIALIZED_NAME_ROLE_ARN = "RoleArn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_PRINCIPAL_ARN = "PrincipalArn";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_ARN)
  private String principalArn;

  public static final String SERIALIZED_NAME_DURATION_SECONDS = "DurationSeconds";
  @SerializedName(SERIALIZED_NAME_DURATION_SECONDS)
  private Integer durationSeconds;

  public AssumeDecoratedRoleWithSAMLRequest() {
  }

  public AssumeDecoratedRoleWithSAMLRequest saMLAssertion(String saMLAssertion) {
    this.saMLAssertion = saMLAssertion;
    return this;
  }

  /**
   * A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.
   * @return saMLAssertion
   */
  @javax.annotation.Nonnull
  public String getSaMLAssertion() {
    return saMLAssertion;
  }

  public void setSaMLAssertion(String saMLAssertion) {
    this.saMLAssertion = saMLAssertion;
  }


  public AssumeDecoratedRoleWithSAMLRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as &lt;code&gt;GetTemporaryTableCredentials&lt;/code&gt;. The caller must also have iam:PassRole permission on this role. 
   * @return roleArn
   */
  @javax.annotation.Nonnull
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public AssumeDecoratedRoleWithSAMLRequest principalArn(String principalArn) {
    this.principalArn = principalArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.
   * @return principalArn
   */
  @javax.annotation.Nonnull
  public String getPrincipalArn() {
    return principalArn;
  }

  public void setPrincipalArn(String principalArn) {
    this.principalArn = principalArn;
  }


  public AssumeDecoratedRoleWithSAMLRequest durationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
    return this;
  }

  /**
   * The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.
   * minimum: 900
   * maximum: 43200
   * @return durationSeconds
   */
  @javax.annotation.Nullable
  public Integer getDurationSeconds() {
    return durationSeconds;
  }

  public void setDurationSeconds(Integer durationSeconds) {
    this.durationSeconds = durationSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssumeDecoratedRoleWithSAMLRequest assumeDecoratedRoleWithSAMLRequest = (AssumeDecoratedRoleWithSAMLRequest) o;
    return Objects.equals(this.saMLAssertion, assumeDecoratedRoleWithSAMLRequest.saMLAssertion) &&
        Objects.equals(this.roleArn, assumeDecoratedRoleWithSAMLRequest.roleArn) &&
        Objects.equals(this.principalArn, assumeDecoratedRoleWithSAMLRequest.principalArn) &&
        Objects.equals(this.durationSeconds, assumeDecoratedRoleWithSAMLRequest.durationSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(saMLAssertion, roleArn, principalArn, durationSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssumeDecoratedRoleWithSAMLRequest {\n");
    sb.append("    saMLAssertion: ").append(toIndentedString(saMLAssertion)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    principalArn: ").append(toIndentedString(principalArn)).append("\n");
    sb.append("    durationSeconds: ").append(toIndentedString(durationSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("SAMLAssertion");
    openapiFields.add("RoleArn");
    openapiFields.add("PrincipalArn");
    openapiFields.add("DurationSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SAMLAssertion");
    openapiRequiredFields.add("RoleArn");
    openapiRequiredFields.add("PrincipalArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssumeDecoratedRoleWithSAMLRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssumeDecoratedRoleWithSAMLRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssumeDecoratedRoleWithSAMLRequest is not found in the empty JSON string", AssumeDecoratedRoleWithSAMLRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssumeDecoratedRoleWithSAMLRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssumeDecoratedRoleWithSAMLRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssumeDecoratedRoleWithSAMLRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("SAMLAssertion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SAMLAssertion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SAMLAssertion").toString()));
      }
      if (!jsonObj.get("RoleArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RoleArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RoleArn").toString()));
      }
      if (!jsonObj.get("PrincipalArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PrincipalArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PrincipalArn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssumeDecoratedRoleWithSAMLRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssumeDecoratedRoleWithSAMLRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssumeDecoratedRoleWithSAMLRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssumeDecoratedRoleWithSAMLRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AssumeDecoratedRoleWithSAMLRequest>() {
           @Override
           public void write(JsonWriter out, AssumeDecoratedRoleWithSAMLRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssumeDecoratedRoleWithSAMLRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssumeDecoratedRoleWithSAMLRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssumeDecoratedRoleWithSAMLRequest
   * @throws IOException if the JSON string is invalid with respect to AssumeDecoratedRoleWithSAMLRequest
   */
  public static AssumeDecoratedRoleWithSAMLRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssumeDecoratedRoleWithSAMLRequest.class);
  }

  /**
   * Convert an instance of AssumeDecoratedRoleWithSAMLRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

