/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AddLFTagsToResourceRequestResource;
import org.openapitools.client.model.GrantPermissionsRequestPrincipal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListPermissionsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:41.778535-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPermissionsRequest {
  public static final String SERIALIZED_NAME_CATALOG_ID = "CatalogId";
  @SerializedName(SERIALIZED_NAME_CATALOG_ID)
  private String catalogId;

  public static final String SERIALIZED_NAME_PRINCIPAL = "Principal";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL)
  private GrantPermissionsRequestPrincipal principal;

  /**
   * Specifies a resource type to filter the permissions returned.
   */
  @JsonAdapter(ResourceTypeEnum.Adapter.class)
  public enum ResourceTypeEnum {
    CATALOG("CATALOG"),
    
    DATABASE("DATABASE"),
    
    TABLE("TABLE"),
    
    DATA_LOCATION("DATA_LOCATION"),
    
    LF_TAG("LF_TAG"),
    
    LF_TAG_POLICY("LF_TAG_POLICY"),
    
    LF_TAG_POLICY_DATABASE("LF_TAG_POLICY_DATABASE"),
    
    LF_TAG_POLICY_TABLE("LF_TAG_POLICY_TABLE");

    private String value;

    ResourceTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResourceTypeEnum fromValue(String value) {
      for (ResourceTypeEnum b : ResourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResourceTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResourceTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResourceTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResourceTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResourceTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "ResourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private ResourceTypeEnum resourceType;

  public static final String SERIALIZED_NAME_RESOURCE = "Resource";
  @SerializedName(SERIALIZED_NAME_RESOURCE)
  private AddLFTagsToResourceRequestResource resource;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public static final String SERIALIZED_NAME_MAX_RESULTS = "MaxResults";
  @SerializedName(SERIALIZED_NAME_MAX_RESULTS)
  private Integer maxResults;

  public static final String SERIALIZED_NAME_INCLUDE_RELATED = "IncludeRelated";
  @SerializedName(SERIALIZED_NAME_INCLUDE_RELATED)
  private String includeRelated;

  public ListPermissionsRequest() {
  }

  public ListPermissionsRequest catalogId(String catalogId) {
    this.catalogId = catalogId;
    return this;
  }

  /**
   * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 
   * @return catalogId
   */
  @javax.annotation.Nullable
  public String getCatalogId() {
    return catalogId;
  }

  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
  }


  public ListPermissionsRequest principal(GrantPermissionsRequestPrincipal principal) {
    this.principal = principal;
    return this;
  }

  /**
   * Get principal
   * @return principal
   */
  @javax.annotation.Nullable
  public GrantPermissionsRequestPrincipal getPrincipal() {
    return principal;
  }

  public void setPrincipal(GrantPermissionsRequestPrincipal principal) {
    this.principal = principal;
  }


  public ListPermissionsRequest resourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Specifies a resource type to filter the permissions returned.
   * @return resourceType
   */
  @javax.annotation.Nullable
  public ResourceTypeEnum getResourceType() {
    return resourceType;
  }

  public void setResourceType(ResourceTypeEnum resourceType) {
    this.resourceType = resourceType;
  }


  public ListPermissionsRequest resource(AddLFTagsToResourceRequestResource resource) {
    this.resource = resource;
    return this;
  }

  /**
   * Get resource
   * @return resource
   */
  @javax.annotation.Nullable
  public AddLFTagsToResourceRequestResource getResource() {
    return resource;
  }

  public void setResource(AddLFTagsToResourceRequestResource resource) {
    this.resource = resource;
  }


  public ListPermissionsRequest nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * A continuation token, if this is not the first call to retrieve this list.
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }


  public ListPermissionsRequest maxResults(Integer maxResults) {
    this.maxResults = maxResults;
    return this;
  }

  /**
   * The maximum number of results to return.
   * minimum: 1
   * maximum: 1000
   * @return maxResults
   */
  @javax.annotation.Nullable
  public Integer getMaxResults() {
    return maxResults;
  }

  public void setMaxResults(Integer maxResults) {
    this.maxResults = maxResults;
  }


  public ListPermissionsRequest includeRelated(String includeRelated) {
    this.includeRelated = includeRelated;
    return this;
  }

  /**
   * Indicates that related permissions should be included in the results.
   * @return includeRelated
   */
  @javax.annotation.Nullable
  public String getIncludeRelated() {
    return includeRelated;
  }

  public void setIncludeRelated(String includeRelated) {
    this.includeRelated = includeRelated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPermissionsRequest listPermissionsRequest = (ListPermissionsRequest) o;
    return Objects.equals(this.catalogId, listPermissionsRequest.catalogId) &&
        Objects.equals(this.principal, listPermissionsRequest.principal) &&
        Objects.equals(this.resourceType, listPermissionsRequest.resourceType) &&
        Objects.equals(this.resource, listPermissionsRequest.resource) &&
        Objects.equals(this.nextToken, listPermissionsRequest.nextToken) &&
        Objects.equals(this.maxResults, listPermissionsRequest.maxResults) &&
        Objects.equals(this.includeRelated, listPermissionsRequest.includeRelated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogId, principal, resourceType, resource, nextToken, maxResults, includeRelated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPermissionsRequest {\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    principal: ").append(toIndentedString(principal)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    resource: ").append(toIndentedString(resource)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("    maxResults: ").append(toIndentedString(maxResults)).append("\n");
    sb.append("    includeRelated: ").append(toIndentedString(includeRelated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CatalogId");
    openapiFields.add("Principal");
    openapiFields.add("ResourceType");
    openapiFields.add("Resource");
    openapiFields.add("NextToken");
    openapiFields.add("MaxResults");
    openapiFields.add("IncludeRelated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPermissionsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPermissionsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPermissionsRequest is not found in the empty JSON string", ListPermissionsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPermissionsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPermissionsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CatalogId") != null && !jsonObj.get("CatalogId").isJsonNull()) && !jsonObj.get("CatalogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CatalogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CatalogId").toString()));
      }
      // validate the optional field `Principal`
      if (jsonObj.get("Principal") != null && !jsonObj.get("Principal").isJsonNull()) {
        GrantPermissionsRequestPrincipal.validateJsonElement(jsonObj.get("Principal"));
      }
      if ((jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) && !jsonObj.get("ResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ResourceType").toString()));
      }
      // validate the optional field `ResourceType`
      if (jsonObj.get("ResourceType") != null && !jsonObj.get("ResourceType").isJsonNull()) {
        ResourceTypeEnum.validateJsonElement(jsonObj.get("ResourceType"));
      }
      // validate the optional field `Resource`
      if (jsonObj.get("Resource") != null && !jsonObj.get("Resource").isJsonNull()) {
        AddLFTagsToResourceRequestResource.validateJsonElement(jsonObj.get("Resource"));
      }
      if ((jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) && !jsonObj.get("NextToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NextToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NextToken").toString()));
      }
      if ((jsonObj.get("IncludeRelated") != null && !jsonObj.get("IncludeRelated").isJsonNull()) && !jsonObj.get("IncludeRelated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `IncludeRelated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("IncludeRelated").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPermissionsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPermissionsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPermissionsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPermissionsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPermissionsRequest>() {
           @Override
           public void write(JsonWriter out, ListPermissionsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPermissionsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPermissionsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPermissionsRequest
   * @throws IOException if the JSON string is invalid with respect to ListPermissionsRequest
   */
  public static ListPermissionsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPermissionsRequest.class);
  }

  /**
   * Convert an instance of ListPermissionsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

