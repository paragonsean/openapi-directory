/*
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddLFTagsToResourceRequest;
import org.openapitools.client.model.AddLFTagsToResourceResponse;
import org.openapitools.client.model.AssumeDecoratedRoleWithSAMLRequest;
import org.openapitools.client.model.AssumeDecoratedRoleWithSAMLResponse;
import org.openapitools.client.model.BatchGrantPermissionsRequest;
import org.openapitools.client.model.BatchGrantPermissionsResponse;
import org.openapitools.client.model.BatchRevokePermissionsRequest;
import org.openapitools.client.model.BatchRevokePermissionsResponse;
import org.openapitools.client.model.CancelTransactionRequest;
import org.openapitools.client.model.CommitTransactionRequest;
import org.openapitools.client.model.CommitTransactionResponse;
import org.openapitools.client.model.CreateDataCellsFilterRequest;
import org.openapitools.client.model.CreateLFTagRequest;
import org.openapitools.client.model.DeleteDataCellsFilterRequest;
import org.openapitools.client.model.DeleteLFTagRequest;
import org.openapitools.client.model.DeleteObjectsOnCancelRequest;
import org.openapitools.client.model.DeregisterResourceRequest;
import org.openapitools.client.model.DescribeResourceRequest;
import org.openapitools.client.model.DescribeResourceResponse;
import org.openapitools.client.model.DescribeTransactionRequest;
import org.openapitools.client.model.DescribeTransactionResponse;
import org.openapitools.client.model.ExtendTransactionRequest;
import org.openapitools.client.model.GetDataCellsFilterRequest;
import org.openapitools.client.model.GetDataCellsFilterResponse;
import org.openapitools.client.model.GetDataLakeSettingsRequest;
import org.openapitools.client.model.GetDataLakeSettingsResponse;
import org.openapitools.client.model.GetEffectivePermissionsForPathRequest;
import org.openapitools.client.model.GetEffectivePermissionsForPathResponse;
import org.openapitools.client.model.GetLFTagRequest;
import org.openapitools.client.model.GetLFTagResponse;
import org.openapitools.client.model.GetQueryStateRequest;
import org.openapitools.client.model.GetQueryStateResponse;
import org.openapitools.client.model.GetQueryStatisticsResponse;
import org.openapitools.client.model.GetResourceLFTagsRequest;
import org.openapitools.client.model.GetResourceLFTagsResponse;
import org.openapitools.client.model.GetTableObjectsRequest;
import org.openapitools.client.model.GetTableObjectsResponse;
import org.openapitools.client.model.GetTemporaryGluePartitionCredentialsRequest;
import org.openapitools.client.model.GetTemporaryGluePartitionCredentialsResponse;
import org.openapitools.client.model.GetTemporaryGlueTableCredentialsRequest;
import org.openapitools.client.model.GetTemporaryGlueTableCredentialsResponse;
import org.openapitools.client.model.GetWorkUnitResultsRequest;
import org.openapitools.client.model.GetWorkUnitResultsResponse;
import org.openapitools.client.model.GetWorkUnitsRequest;
import org.openapitools.client.model.GetWorkUnitsResponse;
import org.openapitools.client.model.GrantPermissionsRequest;
import org.openapitools.client.model.ListDataCellsFilterRequest;
import org.openapitools.client.model.ListDataCellsFilterResponse;
import org.openapitools.client.model.ListLFTagsRequest;
import org.openapitools.client.model.ListLFTagsResponse;
import org.openapitools.client.model.ListPermissionsRequest;
import org.openapitools.client.model.ListPermissionsResponse;
import org.openapitools.client.model.ListResourcesRequest;
import org.openapitools.client.model.ListResourcesResponse;
import org.openapitools.client.model.ListTableStorageOptimizersRequest;
import org.openapitools.client.model.ListTableStorageOptimizersResponse;
import org.openapitools.client.model.ListTransactionsRequest;
import org.openapitools.client.model.ListTransactionsResponse;
import org.openapitools.client.model.PutDataLakeSettingsRequest;
import org.openapitools.client.model.RegisterResourceRequest;
import org.openapitools.client.model.RemoveLFTagsFromResourceRequest;
import org.openapitools.client.model.RemoveLFTagsFromResourceResponse;
import org.openapitools.client.model.RevokePermissionsRequest;
import org.openapitools.client.model.SearchDatabasesByLFTagsRequest;
import org.openapitools.client.model.SearchDatabasesByLFTagsResponse;
import org.openapitools.client.model.SearchTablesByLFTagsRequest;
import org.openapitools.client.model.SearchTablesByLFTagsResponse;
import org.openapitools.client.model.StartQueryPlanningRequest;
import org.openapitools.client.model.StartQueryPlanningResponse;
import org.openapitools.client.model.StartTransactionRequest;
import org.openapitools.client.model.StartTransactionResponse;
import org.openapitools.client.model.UpdateLFTagRequest;
import org.openapitools.client.model.UpdateResourceRequest;
import org.openapitools.client.model.UpdateTableObjectsRequest;
import org.openapitools.client.model.UpdateTableStorageOptimizerRequest;
import org.openapitools.client.model.UpdateTableStorageOptimizerResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Attaches one or more LF-tags to an existing resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLFTagsToResourceTest() throws ApiException {
        AddLFTagsToResourceRequest addLFTagsToResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AddLFTagsToResourceResponse response = api.addLFTagsToResource(addLFTagsToResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Allows a caller to assume an IAM role decorated as the SAML user specified in the SAML assertion included in the request. This decoration allows Lake Formation to enforce access policies against the SAML users and groups. This API operation requires SAML federation setup in the callerâ€™s account as it can only be called with valid SAML assertions. Lake Formation does not scope down the permission of the assumed role. All permissions attached to the role via the SAML federation setup will be included in the role session. &lt;/p&gt; &lt;p&gt; This decorated role is expected to access data in Amazon S3 by getting temporary access from Lake Formation which is authorized via the virtual API &lt;code&gt;GetDataAccess&lt;/code&gt;. Therefore, all SAML roles that can be assumed via &lt;code&gt;AssumeDecoratedRoleWithSAML&lt;/code&gt; must at a minimum include &lt;code&gt;lakeformation:GetDataAccess&lt;/code&gt; in their role policies. A typical IAM policy attached to such a role would look as follows: &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assumeDecoratedRoleWithSAMLTest() throws ApiException {
        AssumeDecoratedRoleWithSAMLRequest assumeDecoratedRoleWithSAMLRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        AssumeDecoratedRoleWithSAMLResponse response = api.assumeDecoratedRoleWithSAML(assumeDecoratedRoleWithSAMLRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Batch operation to grant permissions to the principal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchGrantPermissionsTest() throws ApiException {
        BatchGrantPermissionsRequest batchGrantPermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchGrantPermissionsResponse response = api.batchGrantPermissions(batchGrantPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Batch operation to revoke permissions from the principal.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchRevokePermissionsTest() throws ApiException {
        BatchRevokePermissionsRequest batchRevokePermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        BatchRevokePermissionsResponse response = api.batchRevokePermissions(batchRevokePermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelTransactionTest() throws ApiException {
        CancelTransactionRequest cancelTransactionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelTransaction(cancelTransactionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void commitTransactionTest() throws ApiException {
        CommitTransactionRequest commitTransactionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CommitTransactionResponse response = api.commitTransaction(commitTransactionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a data cell filter to allow one to grant access to certain columns on certain rows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDataCellsFilterTest() throws ApiException {
        CreateDataCellsFilterRequest createDataCellsFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createDataCellsFilter(createDataCellsFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an LF-tag with the specified name and values.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLFTagTest() throws ApiException {
        CreateLFTagRequest createLFTagRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.createLFTag(createLFTagRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a data cell filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDataCellsFilterTest() throws ApiException {
        DeleteDataCellsFilterRequest deleteDataCellsFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteDataCellsFilter(deleteDataCellsFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified LF-tag given a key name. If the input parameter tag key was not found, then the operation will throw an exception. When you delete an LF-tag, the &lt;code&gt;LFTagPolicy&lt;/code&gt; attached to the LF-tag becomes invalid. If the deleted LF-tag was still assigned to any resource, the tag policy attach to the deleted LF-tag will no longer be applied to the resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLFTagTest() throws ApiException {
        DeleteLFTagRequest deleteLFTagRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteLFTag(deleteLFTagRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels. &lt;/p&gt; &lt;p&gt; The Glue ETL library function &lt;code&gt;write_dynamic_frame.from_catalog()&lt;/code&gt; includes an option to automatically call &lt;code&gt;DeleteObjectsOnCancel&lt;/code&gt; before writes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lake-formation/latest/dg/transactions-data-operations.html#rolling-back-writes\&quot;&gt;Rolling Back Amazon S3 Writes&lt;/a&gt;. &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteObjectsOnCancelTest() throws ApiException {
        DeleteObjectsOnCancelRequest deleteObjectsOnCancelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteObjectsOnCancel(deleteObjectsOnCancelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Deregisters the resource as managed by the Data Catalog.&lt;/p&gt; &lt;p&gt;When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deregisterResourceTest() throws ApiException {
        DeregisterResourceRequest deregisterResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deregisterResource(deregisterResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the current data access role for the given resource registered in Lake Formation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeResourceTest() throws ApiException {
        DescribeResourceRequest describeResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeResourceResponse response = api.describeResource(describeResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the details of a single transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeTransactionTest() throws ApiException {
        DescribeTransactionRequest describeTransactionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeTransactionResponse response = api.describeTransaction(describeTransactionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted.&lt;/p&gt; &lt;p&gt;Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extendTransactionTest() throws ApiException {
        ExtendTransactionRequest extendTransactionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.extendTransaction(extendTransactionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a data cells filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataCellsFilterTest() throws ApiException {
        GetDataCellsFilterRequest getDataCellsFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataCellsFilterResponse response = api.getDataCellsFilter(getDataCellsFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the list of the data lake administrators of a Lake Formation-managed data lake. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDataLakeSettingsTest() throws ApiException {
        GetDataLakeSettingsRequest getDataLakeSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDataLakeSettingsResponse response = api.getDataLakeSettings(getDataLakeSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. &lt;code&gt;GetEffectivePermissionsForPath&lt;/code&gt; will not return databases and tables if the catalog is encrypted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEffectivePermissionsForPathTest() throws ApiException {
        GetEffectivePermissionsForPathRequest getEffectivePermissionsForPathRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetEffectivePermissionsForPathResponse response = api.getEffectivePermissionsForPath(getEffectivePermissionsForPathRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns an LF-tag definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLFTagTest() throws ApiException {
        GetLFTagRequest getLFTagRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetLFTagResponse response = api.getLFTag(getLFTagRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the state of a query previously submitted. Clients are expected to poll &lt;code&gt;GetQueryState&lt;/code&gt; to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to &lt;code&gt;StartQueryPlanning&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryStateTest() throws ApiException {
        GetQueryStateRequest getQueryStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetQueryStateResponse response = api.getQueryState(getQueryStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves statistics on the planning and execution of a query.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQueryStatisticsTest() throws ApiException {
        GetQueryStateRequest getQueryStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetQueryStatisticsResponse response = api.getQueryStatistics(getQueryStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the LF-tags applied to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourceLFTagsTest() throws ApiException {
        GetResourceLFTagsRequest getResourceLFTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetResourceLFTagsResponse response = api.getResourceLFTags(getResourceLFTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTableObjectsTest() throws ApiException {
        GetTableObjectsRequest getTableObjectsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetTableObjectsResponse response = api.getTableObjects(getTableObjectsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * This API is identical to &lt;code&gt;GetTemporaryTableCredentials&lt;/code&gt; except that this is used when the target Data Catalog resource is of type Partition. Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemporaryGluePartitionCredentialsTest() throws ApiException {
        GetTemporaryGluePartitionCredentialsRequest getTemporaryGluePartitionCredentialsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTemporaryGluePartitionCredentialsResponse response = api.getTemporaryGluePartitionCredentials(getTemporaryGluePartitionCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemporaryGlueTableCredentialsTest() throws ApiException {
        GetTemporaryGlueTableCredentialsRequest getTemporaryGlueTableCredentialsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTemporaryGlueTableCredentialsResponse response = api.getTemporaryGlueTableCredentials(getTemporaryGlueTableCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns the work units resulting from the query. Work units can be executed in any order and in parallel. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkUnitResultsTest() throws ApiException {
        GetWorkUnitResultsRequest getWorkUnitResultsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetWorkUnitResultsResponse response = api.getWorkUnitResults(getWorkUnitResultsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the work units generated by the &lt;code&gt;StartQueryPlanning&lt;/code&gt; operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkUnitsTest() throws ApiException {
        GetWorkUnitsRequest getWorkUnitsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String pageSize = null;
        String nextToken = null;
        GetWorkUnitsResponse response = api.getWorkUnits(getWorkUnitsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, pageSize, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.&lt;/p&gt; &lt;p&gt;For information about permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html\&quot;&gt;Security and Access Control to Metadata and Data&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantPermissionsTest() throws ApiException {
        GrantPermissionsRequest grantPermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.grantPermissions(grantPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all the data cell filters on a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDataCellsFilterTest() throws ApiException {
        ListDataCellsFilterRequest listDataCellsFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListDataCellsFilterResponse response = api.listDataCellsFilter(listDataCellsFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists LF-tags that the requester has permission to view. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLFTagsTest() throws ApiException {
        ListLFTagsRequest listLFTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListLFTagsResponse response = api.listLFTags(listLFTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER.&lt;/p&gt; &lt;p&gt;This operation returns only those permissions that have been explicitly granted.&lt;/p&gt; &lt;p&gt;For information about permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html\&quot;&gt;Security and Access Control to Metadata and Data&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPermissionsTest() throws ApiException {
        ListPermissionsRequest listPermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPermissionsResponse response = api.listPermissions(listPermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists the resources registered to be managed by the Data Catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listResourcesTest() throws ApiException {
        ListResourcesRequest listResourcesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListResourcesResponse response = api.listResources(listResourcesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns the configuration of all storage optimizers associated with a specified table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTableStorageOptimizersTest() throws ApiException {
        ListTableStorageOptimizersRequest listTableStorageOptimizersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTableStorageOptimizersResponse response = api.listTableStorageOptimizers(listTableStorageOptimizersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned.&lt;/p&gt; &lt;p&gt;This operation can help you identify uncommitted transactions or to get information about transactions.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        ListTransactionsRequest listTransactionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTransactionsResponse response = api.listTransactions(listTransactionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/lake-formation/latest/dg/lake-formation-permissions.html\&quot;&gt;Granting Lake Formation Permissions&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putDataLakeSettingsTest() throws ApiException {
        PutDataLakeSettingsRequest putDataLakeSettingsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.putDataLakeSettings(putDataLakeSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Registers the resource as managed by the Data Catalog.&lt;/p&gt; &lt;p&gt;To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy.&lt;/p&gt; &lt;p&gt;The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ResourceArn &#x3D; arn:aws:s3:::my-bucket UseServiceLinkedRole &#x3D; true&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If &lt;code&gt;UseServiceLinkedRole&lt;/code&gt; is not set to true, you must provide or set the &lt;code&gt;RoleArn&lt;/code&gt;:&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:aws:iam::12345:role/my-data-access-role&lt;/code&gt; &lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerResourceTest() throws ApiException {
        RegisterResourceRequest registerResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.registerResource(registerResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in &lt;code&gt;tableWithColumns&lt;/code&gt; to specify column input.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLFTagsFromResourceTest() throws ApiException {
        RemoveLFTagsFromResourceRequest removeLFTagsFromResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        RemoveLFTagsFromResourceResponse response = api.removeLFTagsFromResource(removeLFTagsFromResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokePermissionsTest() throws ApiException {
        RevokePermissionsRequest revokePermissionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.revokePermissions(revokePermissionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * This operation allows a search on &lt;code&gt;DATABASE&lt;/code&gt; resources by &lt;code&gt;TagCondition&lt;/code&gt;. This operation is used by admins who want to grant user permissions on certain &lt;code&gt;TagConditions&lt;/code&gt;. Before making a grant, the admin can use &lt;code&gt;SearchDatabasesByTags&lt;/code&gt; to find all resources where the given &lt;code&gt;TagConditions&lt;/code&gt; are valid to verify whether the returned resources can be shared.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchDatabasesByLFTagsTest() throws ApiException {
        SearchDatabasesByLFTagsRequest searchDatabasesByLFTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchDatabasesByLFTagsResponse response = api.searchDatabasesByLFTags(searchDatabasesByLFTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * This operation allows a search on &lt;code&gt;TABLE&lt;/code&gt; resources by &lt;code&gt;LFTag&lt;/code&gt;s. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use &lt;code&gt;SearchTablesByLFTags&lt;/code&gt; to find all resources where the given &lt;code&gt;LFTag&lt;/code&gt;s are valid to verify whether the returned resources can be shared.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTablesByLFTagsTest() throws ApiException {
        SearchTablesByLFTagsRequest searchTablesByLFTagsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        SearchTablesByLFTagsResponse response = api.searchTablesByLFTags(searchTablesByLFTagsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Submits a request to process a query statement.&lt;/p&gt; &lt;p&gt;This operation generates work units that can be retrieved with the &lt;code&gt;GetWorkUnits&lt;/code&gt; operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startQueryPlanningTest() throws ApiException {
        StartQueryPlanningRequest startQueryPlanningRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartQueryPlanningResponse response = api.startQueryPlanning(startQueryPlanningRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTransactionTest() throws ApiException {
        StartTransactionRequest startTransactionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartTransactionResponse response = api.startTransaction(startTransactionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a data cell filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDataCellsFilterTest() throws ApiException {
        CreateDataCellsFilterRequest createDataCellsFilterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateDataCellsFilter(createDataCellsFilterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - \&quot;Update not allowed\&quot;. Untag the attribute before deleting the LF-tag key&#39;s value. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLFTagTest() throws ApiException {
        UpdateLFTagRequest updateLFTagRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateLFTag(updateLFTagRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the data access role used for vending access to the given (registered) resource in Lake Formation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateResourceTest() throws ApiException {
        UpdateResourceRequest updateResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateResource(updateResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the manifest of Amazon S3 objects that make up the specified governed table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTableObjectsTest() throws ApiException {
        UpdateTableObjectsRequest updateTableObjectsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateTableObjects(updateTableObjectsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the configuration of the storage optimizers for a table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTableStorageOptimizerTest() throws ApiException {
        UpdateTableStorageOptimizerRequest updateTableStorageOptimizerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateTableStorageOptimizerResponse response = api.updateTableStorageOptimizer(updateTableStorageOptimizerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
