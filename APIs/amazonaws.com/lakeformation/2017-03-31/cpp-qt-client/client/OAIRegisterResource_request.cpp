/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterResource_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterResource_request::OAIRegisterResource_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterResource_request::OAIRegisterResource_request() {
    this->initializeModel();
}

OAIRegisterResource_request::~OAIRegisterResource_request() {}

void OAIRegisterResource_request::initializeModel() {

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_use_service_linked_role_isSet = false;
    m_use_service_linked_role_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_with_federation_isSet = false;
    m_with_federation_isValid = false;
}

void OAIRegisterResource_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterResource_request::fromJsonObject(QJsonObject json) {

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_use_service_linked_role_isValid = ::OpenAPI::fromJsonValue(m_use_service_linked_role, json[QString("UseServiceLinkedRole")]);
    m_use_service_linked_role_isSet = !json[QString("UseServiceLinkedRole")].isNull() && m_use_service_linked_role_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_with_federation_isValid = ::OpenAPI::fromJsonValue(m_with_federation, json[QString("WithFederation")]);
    m_with_federation_isSet = !json[QString("WithFederation")].isNull() && m_with_federation_isValid;
}

QString OAIRegisterResource_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterResource_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_use_service_linked_role_isSet) {
        obj.insert(QString("UseServiceLinkedRole"), ::OpenAPI::toJsonValue(m_use_service_linked_role));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_with_federation_isSet) {
        obj.insert(QString("WithFederation"), ::OpenAPI::toJsonValue(m_with_federation));
    }
    return obj;
}

QString OAIRegisterResource_request::getResourceArn() const {
    return m_resource_arn;
}
void OAIRegisterResource_request::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIRegisterResource_request::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIRegisterResource_request::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIRegisterResource_request::isUseServiceLinkedRole() const {
    return m_use_service_linked_role;
}
void OAIRegisterResource_request::setUseServiceLinkedRole(const bool &use_service_linked_role) {
    m_use_service_linked_role = use_service_linked_role;
    m_use_service_linked_role_isSet = true;
}

bool OAIRegisterResource_request::is_use_service_linked_role_Set() const{
    return m_use_service_linked_role_isSet;
}

bool OAIRegisterResource_request::is_use_service_linked_role_Valid() const{
    return m_use_service_linked_role_isValid;
}

QString OAIRegisterResource_request::getRoleArn() const {
    return m_role_arn;
}
void OAIRegisterResource_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIRegisterResource_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIRegisterResource_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

bool OAIRegisterResource_request::isWithFederation() const {
    return m_with_federation;
}
void OAIRegisterResource_request::setWithFederation(const bool &with_federation) {
    m_with_federation = with_federation;
    m_with_federation_isSet = true;
}

bool OAIRegisterResource_request::is_with_federation_Set() const{
    return m_with_federation_isSet;
}

bool OAIRegisterResource_request::is_with_federation_Valid() const{
    return m_with_federation_isValid;
}

bool OAIRegisterResource_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_service_linked_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_with_federation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterResource_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_arn_isValid && true;
}

} // namespace OpenAPI
