/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaggedTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaggedTable::OAITaggedTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaggedTable::OAITaggedTable() {
    this->initializeModel();
}

OAITaggedTable::~OAITaggedTable() {}

void OAITaggedTable::initializeModel() {

    m_table_isSet = false;
    m_table_isValid = false;

    m_lf_tag_on_database_isSet = false;
    m_lf_tag_on_database_isValid = false;

    m_lf_tags_on_table_isSet = false;
    m_lf_tags_on_table_isValid = false;

    m_lf_tags_on_columns_isSet = false;
    m_lf_tags_on_columns_isValid = false;
}

void OAITaggedTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaggedTable::fromJsonObject(QJsonObject json) {

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("Table")]);
    m_table_isSet = !json[QString("Table")].isNull() && m_table_isValid;

    m_lf_tag_on_database_isValid = ::OpenAPI::fromJsonValue(m_lf_tag_on_database, json[QString("LFTagOnDatabase")]);
    m_lf_tag_on_database_isSet = !json[QString("LFTagOnDatabase")].isNull() && m_lf_tag_on_database_isValid;

    m_lf_tags_on_table_isValid = ::OpenAPI::fromJsonValue(m_lf_tags_on_table, json[QString("LFTagsOnTable")]);
    m_lf_tags_on_table_isSet = !json[QString("LFTagsOnTable")].isNull() && m_lf_tags_on_table_isValid;

    m_lf_tags_on_columns_isValid = ::OpenAPI::fromJsonValue(m_lf_tags_on_columns, json[QString("LFTagsOnColumns")]);
    m_lf_tags_on_columns_isSet = !json[QString("LFTagsOnColumns")].isNull() && m_lf_tags_on_columns_isValid;
}

QString OAITaggedTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaggedTable::asJsonObject() const {
    QJsonObject obj;
    if (m_table.isSet()) {
        obj.insert(QString("Table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_lf_tag_on_database.isSet()) {
        obj.insert(QString("LFTagOnDatabase"), ::OpenAPI::toJsonValue(m_lf_tag_on_database));
    }
    if (m_lf_tags_on_table.isSet()) {
        obj.insert(QString("LFTagsOnTable"), ::OpenAPI::toJsonValue(m_lf_tags_on_table));
    }
    if (m_lf_tags_on_columns.isSet()) {
        obj.insert(QString("LFTagsOnColumns"), ::OpenAPI::toJsonValue(m_lf_tags_on_columns));
    }
    return obj;
}

OAITaggedTable_Table OAITaggedTable::getTable() const {
    return m_table;
}
void OAITaggedTable::setTable(const OAITaggedTable_Table &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAITaggedTable::is_table_Set() const{
    return m_table_isSet;
}

bool OAITaggedTable::is_table_Valid() const{
    return m_table_isValid;
}

QList OAITaggedTable::getLfTagOnDatabase() const {
    return m_lf_tag_on_database;
}
void OAITaggedTable::setLfTagOnDatabase(const QList &lf_tag_on_database) {
    m_lf_tag_on_database = lf_tag_on_database;
    m_lf_tag_on_database_isSet = true;
}

bool OAITaggedTable::is_lf_tag_on_database_Set() const{
    return m_lf_tag_on_database_isSet;
}

bool OAITaggedTable::is_lf_tag_on_database_Valid() const{
    return m_lf_tag_on_database_isValid;
}

QList OAITaggedTable::getLfTagsOnTable() const {
    return m_lf_tags_on_table;
}
void OAITaggedTable::setLfTagsOnTable(const QList &lf_tags_on_table) {
    m_lf_tags_on_table = lf_tags_on_table;
    m_lf_tags_on_table_isSet = true;
}

bool OAITaggedTable::is_lf_tags_on_table_Set() const{
    return m_lf_tags_on_table_isSet;
}

bool OAITaggedTable::is_lf_tags_on_table_Valid() const{
    return m_lf_tags_on_table_isValid;
}

QList OAITaggedTable::getLfTagsOnColumns() const {
    return m_lf_tags_on_columns;
}
void OAITaggedTable::setLfTagsOnColumns(const QList &lf_tags_on_columns) {
    m_lf_tags_on_columns = lf_tags_on_columns;
    m_lf_tags_on_columns_isSet = true;
}

bool OAITaggedTable::is_lf_tags_on_columns_Set() const{
    return m_lf_tags_on_columns_isSet;
}

bool OAITaggedTable::is_lf_tags_on_columns_Valid() const{
    return m_lf_tags_on_columns_isValid;
}

bool OAITaggedTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lf_tag_on_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lf_tags_on_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lf_tags_on_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaggedTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
