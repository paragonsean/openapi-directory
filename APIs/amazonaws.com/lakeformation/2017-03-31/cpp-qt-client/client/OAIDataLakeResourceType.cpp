/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataLakeResourceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataLakeResourceType::OAIDataLakeResourceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataLakeResourceType::OAIDataLakeResourceType() {
    this->initializeModel();
}

OAIDataLakeResourceType::~OAIDataLakeResourceType() {}

void OAIDataLakeResourceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataLakeResourceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataLakeResourceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CATALOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLakeResourceType::CATALOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATABASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLakeResourceType::DATABASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLakeResourceType::TABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DATA_LOCATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLakeResourceType::DATA_LOCATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LF_TAG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLakeResourceType::LF_TAG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LF_TAG_POLICY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLakeResourceType::LF_TAG_POLICY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LF_TAG_POLICY_DATABASE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLakeResourceType::LF_TAG_POLICY_DATABASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LF_TAG_POLICY_TABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataLakeResourceType::LF_TAG_POLICY_TABLE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataLakeResourceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataLakeResourceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataLakeResourceType::CATALOG:
            val = "CATALOG";
            break;
        case eOAIDataLakeResourceType::DATABASE:
            val = "DATABASE";
            break;
        case eOAIDataLakeResourceType::TABLE:
            val = "TABLE";
            break;
        case eOAIDataLakeResourceType::DATA_LOCATION:
            val = "DATA_LOCATION";
            break;
        case eOAIDataLakeResourceType::LF_TAG:
            val = "LF_TAG";
            break;
        case eOAIDataLakeResourceType::LF_TAG_POLICY:
            val = "LF_TAG_POLICY";
            break;
        case eOAIDataLakeResourceType::LF_TAG_POLICY_DATABASE:
            val = "LF_TAG_POLICY_DATABASE";
            break;
        case eOAIDataLakeResourceType::LF_TAG_POLICY_TABLE:
            val = "LF_TAG_POLICY_TABLE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataLakeResourceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataLakeResourceType::eOAIDataLakeResourceType OAIDataLakeResourceType::getValue() const {
    return m_value;
}

void OAIDataLakeResourceType::setValue(const OAIDataLakeResourceType::eOAIDataLakeResourceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataLakeResourceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataLakeResourceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
