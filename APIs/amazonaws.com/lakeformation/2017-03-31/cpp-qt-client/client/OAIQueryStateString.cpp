/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryStateString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryStateString::OAIQueryStateString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryStateString::OAIQueryStateString() {
    this->initializeModel();
}

OAIQueryStateString::~OAIQueryStateString() {}

void OAIQueryStateString::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIQueryStateString::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIQueryStateString::fromJson(QString jsonString) {
    
    if ( jsonString.compare("PENDING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStateString::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WORKUNITS_AVAILABLE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStateString::WORKUNITS_AVAILABLE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ERROR", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStateString::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FINISHED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStateString::FINISHED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EXPIRED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIQueryStateString::EXPIRED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIQueryStateString::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIQueryStateString::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIQueryStateString::PENDING:
            val = "PENDING";
            break;
        case eOAIQueryStateString::WORKUNITS_AVAILABLE:
            val = "WORKUNITS_AVAILABLE";
            break;
        case eOAIQueryStateString::ERROR:
            val = "ERROR";
            break;
        case eOAIQueryStateString::FINISHED:
            val = "FINISHED";
            break;
        case eOAIQueryStateString::EXPIRED:
            val = "EXPIRED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIQueryStateString::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIQueryStateString::eOAIQueryStateString OAIQueryStateString::getValue() const {
    return m_value;
}

void OAIQueryStateString::setValue(const OAIQueryStateString::eOAIQueryStateString& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIQueryStateString::isSet() const {
    
    return m_value_isSet;
}

bool OAIQueryStateString::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
