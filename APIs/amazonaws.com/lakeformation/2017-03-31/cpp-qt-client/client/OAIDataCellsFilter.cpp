/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataCellsFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataCellsFilter::OAIDataCellsFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataCellsFilter::OAIDataCellsFilter() {
    this->initializeModel();
}

OAIDataCellsFilter::~OAIDataCellsFilter() {}

void OAIDataCellsFilter::initializeModel() {

    m_table_catalog_id_isSet = false;
    m_table_catalog_id_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_row_filter_isSet = false;
    m_row_filter_isValid = false;

    m_column_names_isSet = false;
    m_column_names_isValid = false;

    m_column_wildcard_isSet = false;
    m_column_wildcard_isValid = false;

    m_version_id_isSet = false;
    m_version_id_isValid = false;
}

void OAIDataCellsFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataCellsFilter::fromJsonObject(QJsonObject json) {

    m_table_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_table_catalog_id, json[QString("TableCatalogId")]);
    m_table_catalog_id_isSet = !json[QString("TableCatalogId")].isNull() && m_table_catalog_id_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_row_filter_isValid = ::OpenAPI::fromJsonValue(m_row_filter, json[QString("RowFilter")]);
    m_row_filter_isSet = !json[QString("RowFilter")].isNull() && m_row_filter_isValid;

    m_column_names_isValid = ::OpenAPI::fromJsonValue(m_column_names, json[QString("ColumnNames")]);
    m_column_names_isSet = !json[QString("ColumnNames")].isNull() && m_column_names_isValid;

    m_column_wildcard_isValid = ::OpenAPI::fromJsonValue(m_column_wildcard, json[QString("ColumnWildcard")]);
    m_column_wildcard_isSet = !json[QString("ColumnWildcard")].isNull() && m_column_wildcard_isValid;

    m_version_id_isValid = ::OpenAPI::fromJsonValue(m_version_id, json[QString("VersionId")]);
    m_version_id_isSet = !json[QString("VersionId")].isNull() && m_version_id_isValid;
}

QString OAIDataCellsFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataCellsFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_table_catalog_id_isSet) {
        obj.insert(QString("TableCatalogId"), ::OpenAPI::toJsonValue(m_table_catalog_id));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_row_filter.isSet()) {
        obj.insert(QString("RowFilter"), ::OpenAPI::toJsonValue(m_row_filter));
    }
    if (m_column_names.isSet()) {
        obj.insert(QString("ColumnNames"), ::OpenAPI::toJsonValue(m_column_names));
    }
    if (m_column_wildcard.isSet()) {
        obj.insert(QString("ColumnWildcard"), ::OpenAPI::toJsonValue(m_column_wildcard));
    }
    if (m_version_id_isSet) {
        obj.insert(QString("VersionId"), ::OpenAPI::toJsonValue(m_version_id));
    }
    return obj;
}

QString OAIDataCellsFilter::getTableCatalogId() const {
    return m_table_catalog_id;
}
void OAIDataCellsFilter::setTableCatalogId(const QString &table_catalog_id) {
    m_table_catalog_id = table_catalog_id;
    m_table_catalog_id_isSet = true;
}

bool OAIDataCellsFilter::is_table_catalog_id_Set() const{
    return m_table_catalog_id_isSet;
}

bool OAIDataCellsFilter::is_table_catalog_id_Valid() const{
    return m_table_catalog_id_isValid;
}

QString OAIDataCellsFilter::getDatabaseName() const {
    return m_database_name;
}
void OAIDataCellsFilter::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIDataCellsFilter::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIDataCellsFilter::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIDataCellsFilter::getTableName() const {
    return m_table_name;
}
void OAIDataCellsFilter::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDataCellsFilter::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDataCellsFilter::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIDataCellsFilter::getName() const {
    return m_name;
}
void OAIDataCellsFilter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataCellsFilter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataCellsFilter::is_name_Valid() const{
    return m_name_isValid;
}

OAICreateDataCellsFilter_request_TableData_RowFilter OAIDataCellsFilter::getRowFilter() const {
    return m_row_filter;
}
void OAIDataCellsFilter::setRowFilter(const OAICreateDataCellsFilter_request_TableData_RowFilter &row_filter) {
    m_row_filter = row_filter;
    m_row_filter_isSet = true;
}

bool OAIDataCellsFilter::is_row_filter_Set() const{
    return m_row_filter_isSet;
}

bool OAIDataCellsFilter::is_row_filter_Valid() const{
    return m_row_filter_isValid;
}

QList OAIDataCellsFilter::getColumnNames() const {
    return m_column_names;
}
void OAIDataCellsFilter::setColumnNames(const QList &column_names) {
    m_column_names = column_names;
    m_column_names_isSet = true;
}

bool OAIDataCellsFilter::is_column_names_Set() const{
    return m_column_names_isSet;
}

bool OAIDataCellsFilter::is_column_names_Valid() const{
    return m_column_names_isValid;
}

OAICreateDataCellsFilter_request_TableData_ColumnWildcard OAIDataCellsFilter::getColumnWildcard() const {
    return m_column_wildcard;
}
void OAIDataCellsFilter::setColumnWildcard(const OAICreateDataCellsFilter_request_TableData_ColumnWildcard &column_wildcard) {
    m_column_wildcard = column_wildcard;
    m_column_wildcard_isSet = true;
}

bool OAIDataCellsFilter::is_column_wildcard_Set() const{
    return m_column_wildcard_isSet;
}

bool OAIDataCellsFilter::is_column_wildcard_Valid() const{
    return m_column_wildcard_isValid;
}

QString OAIDataCellsFilter::getVersionId() const {
    return m_version_id;
}
void OAIDataCellsFilter::setVersionId(const QString &version_id) {
    m_version_id = version_id;
    m_version_id_isSet = true;
}

bool OAIDataCellsFilter::is_version_id_Set() const{
    return m_version_id_isSet;
}

bool OAIDataCellsFilter::is_version_id_Valid() const{
    return m_version_id_isValid;
}

bool OAIDataCellsFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_names.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_column_wildcard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataCellsFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_catalog_id_isValid && m_database_name_isValid && m_table_name_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
