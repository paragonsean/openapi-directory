/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkUnitRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkUnitRange::OAIWorkUnitRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkUnitRange::OAIWorkUnitRange() {
    this->initializeModel();
}

OAIWorkUnitRange::~OAIWorkUnitRange() {}

void OAIWorkUnitRange::initializeModel() {

    m_work_unit_id_max_isSet = false;
    m_work_unit_id_max_isValid = false;

    m_work_unit_id_min_isSet = false;
    m_work_unit_id_min_isValid = false;

    m_work_unit_token_isSet = false;
    m_work_unit_token_isValid = false;
}

void OAIWorkUnitRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkUnitRange::fromJsonObject(QJsonObject json) {

    m_work_unit_id_max_isValid = ::OpenAPI::fromJsonValue(m_work_unit_id_max, json[QString("WorkUnitIdMax")]);
    m_work_unit_id_max_isSet = !json[QString("WorkUnitIdMax")].isNull() && m_work_unit_id_max_isValid;

    m_work_unit_id_min_isValid = ::OpenAPI::fromJsonValue(m_work_unit_id_min, json[QString("WorkUnitIdMin")]);
    m_work_unit_id_min_isSet = !json[QString("WorkUnitIdMin")].isNull() && m_work_unit_id_min_isValid;

    m_work_unit_token_isValid = ::OpenAPI::fromJsonValue(m_work_unit_token, json[QString("WorkUnitToken")]);
    m_work_unit_token_isSet = !json[QString("WorkUnitToken")].isNull() && m_work_unit_token_isValid;
}

QString OAIWorkUnitRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkUnitRange::asJsonObject() const {
    QJsonObject obj;
    if (m_work_unit_id_max_isSet) {
        obj.insert(QString("WorkUnitIdMax"), ::OpenAPI::toJsonValue(m_work_unit_id_max));
    }
    if (m_work_unit_id_min_isSet) {
        obj.insert(QString("WorkUnitIdMin"), ::OpenAPI::toJsonValue(m_work_unit_id_min));
    }
    if (m_work_unit_token_isSet) {
        obj.insert(QString("WorkUnitToken"), ::OpenAPI::toJsonValue(m_work_unit_token));
    }
    return obj;
}

qint32 OAIWorkUnitRange::getWorkUnitIdMax() const {
    return m_work_unit_id_max;
}
void OAIWorkUnitRange::setWorkUnitIdMax(const qint32 &work_unit_id_max) {
    m_work_unit_id_max = work_unit_id_max;
    m_work_unit_id_max_isSet = true;
}

bool OAIWorkUnitRange::is_work_unit_id_max_Set() const{
    return m_work_unit_id_max_isSet;
}

bool OAIWorkUnitRange::is_work_unit_id_max_Valid() const{
    return m_work_unit_id_max_isValid;
}

qint32 OAIWorkUnitRange::getWorkUnitIdMin() const {
    return m_work_unit_id_min;
}
void OAIWorkUnitRange::setWorkUnitIdMin(const qint32 &work_unit_id_min) {
    m_work_unit_id_min = work_unit_id_min;
    m_work_unit_id_min_isSet = true;
}

bool OAIWorkUnitRange::is_work_unit_id_min_Set() const{
    return m_work_unit_id_min_isSet;
}

bool OAIWorkUnitRange::is_work_unit_id_min_Valid() const{
    return m_work_unit_id_min_isValid;
}

QString OAIWorkUnitRange::getWorkUnitToken() const {
    return m_work_unit_token;
}
void OAIWorkUnitRange::setWorkUnitToken(const QString &work_unit_token) {
    m_work_unit_token = work_unit_token;
    m_work_unit_token_isSet = true;
}

bool OAIWorkUnitRange::is_work_unit_token_Set() const{
    return m_work_unit_token_isSet;
}

bool OAIWorkUnitRange::is_work_unit_token_Valid() const{
    return m_work_unit_token_isValid;
}

bool OAIWorkUnitRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_work_unit_id_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_unit_id_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_unit_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkUnitRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_work_unit_id_max_isValid && m_work_unit_id_min_isValid && m_work_unit_token_isValid && true;
}

} // namespace OpenAPI
