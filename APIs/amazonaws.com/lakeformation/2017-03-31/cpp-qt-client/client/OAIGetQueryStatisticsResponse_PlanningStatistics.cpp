/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetQueryStatisticsResponse_PlanningStatistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetQueryStatisticsResponse_PlanningStatistics::OAIGetQueryStatisticsResponse_PlanningStatistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetQueryStatisticsResponse_PlanningStatistics::OAIGetQueryStatisticsResponse_PlanningStatistics() {
    this->initializeModel();
}

OAIGetQueryStatisticsResponse_PlanningStatistics::~OAIGetQueryStatisticsResponse_PlanningStatistics() {}

void OAIGetQueryStatisticsResponse_PlanningStatistics::initializeModel() {

    m_estimated_data_to_scan_bytes_isSet = false;
    m_estimated_data_to_scan_bytes_isValid = false;

    m_planning_time_millis_isSet = false;
    m_planning_time_millis_isValid = false;

    m_queue_time_millis_isSet = false;
    m_queue_time_millis_isValid = false;

    m_work_units_generated_count_isSet = false;
    m_work_units_generated_count_isValid = false;
}

void OAIGetQueryStatisticsResponse_PlanningStatistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetQueryStatisticsResponse_PlanningStatistics::fromJsonObject(QJsonObject json) {

    m_estimated_data_to_scan_bytes_isValid = ::OpenAPI::fromJsonValue(m_estimated_data_to_scan_bytes, json[QString("EstimatedDataToScanBytes")]);
    m_estimated_data_to_scan_bytes_isSet = !json[QString("EstimatedDataToScanBytes")].isNull() && m_estimated_data_to_scan_bytes_isValid;

    m_planning_time_millis_isValid = ::OpenAPI::fromJsonValue(m_planning_time_millis, json[QString("PlanningTimeMillis")]);
    m_planning_time_millis_isSet = !json[QString("PlanningTimeMillis")].isNull() && m_planning_time_millis_isValid;

    m_queue_time_millis_isValid = ::OpenAPI::fromJsonValue(m_queue_time_millis, json[QString("QueueTimeMillis")]);
    m_queue_time_millis_isSet = !json[QString("QueueTimeMillis")].isNull() && m_queue_time_millis_isValid;

    m_work_units_generated_count_isValid = ::OpenAPI::fromJsonValue(m_work_units_generated_count, json[QString("WorkUnitsGeneratedCount")]);
    m_work_units_generated_count_isSet = !json[QString("WorkUnitsGeneratedCount")].isNull() && m_work_units_generated_count_isValid;
}

QString OAIGetQueryStatisticsResponse_PlanningStatistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetQueryStatisticsResponse_PlanningStatistics::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_data_to_scan_bytes_isSet) {
        obj.insert(QString("EstimatedDataToScanBytes"), ::OpenAPI::toJsonValue(m_estimated_data_to_scan_bytes));
    }
    if (m_planning_time_millis_isSet) {
        obj.insert(QString("PlanningTimeMillis"), ::OpenAPI::toJsonValue(m_planning_time_millis));
    }
    if (m_queue_time_millis_isSet) {
        obj.insert(QString("QueueTimeMillis"), ::OpenAPI::toJsonValue(m_queue_time_millis));
    }
    if (m_work_units_generated_count_isSet) {
        obj.insert(QString("WorkUnitsGeneratedCount"), ::OpenAPI::toJsonValue(m_work_units_generated_count));
    }
    return obj;
}

qint32 OAIGetQueryStatisticsResponse_PlanningStatistics::getEstimatedDataToScanBytes() const {
    return m_estimated_data_to_scan_bytes;
}
void OAIGetQueryStatisticsResponse_PlanningStatistics::setEstimatedDataToScanBytes(const qint32 &estimated_data_to_scan_bytes) {
    m_estimated_data_to_scan_bytes = estimated_data_to_scan_bytes;
    m_estimated_data_to_scan_bytes_isSet = true;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::is_estimated_data_to_scan_bytes_Set() const{
    return m_estimated_data_to_scan_bytes_isSet;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::is_estimated_data_to_scan_bytes_Valid() const{
    return m_estimated_data_to_scan_bytes_isValid;
}

qint32 OAIGetQueryStatisticsResponse_PlanningStatistics::getPlanningTimeMillis() const {
    return m_planning_time_millis;
}
void OAIGetQueryStatisticsResponse_PlanningStatistics::setPlanningTimeMillis(const qint32 &planning_time_millis) {
    m_planning_time_millis = planning_time_millis;
    m_planning_time_millis_isSet = true;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::is_planning_time_millis_Set() const{
    return m_planning_time_millis_isSet;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::is_planning_time_millis_Valid() const{
    return m_planning_time_millis_isValid;
}

qint32 OAIGetQueryStatisticsResponse_PlanningStatistics::getQueueTimeMillis() const {
    return m_queue_time_millis;
}
void OAIGetQueryStatisticsResponse_PlanningStatistics::setQueueTimeMillis(const qint32 &queue_time_millis) {
    m_queue_time_millis = queue_time_millis;
    m_queue_time_millis_isSet = true;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::is_queue_time_millis_Set() const{
    return m_queue_time_millis_isSet;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::is_queue_time_millis_Valid() const{
    return m_queue_time_millis_isValid;
}

qint32 OAIGetQueryStatisticsResponse_PlanningStatistics::getWorkUnitsGeneratedCount() const {
    return m_work_units_generated_count;
}
void OAIGetQueryStatisticsResponse_PlanningStatistics::setWorkUnitsGeneratedCount(const qint32 &work_units_generated_count) {
    m_work_units_generated_count = work_units_generated_count;
    m_work_units_generated_count_isSet = true;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::is_work_units_generated_count_Set() const{
    return m_work_units_generated_count_isSet;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::is_work_units_generated_count_Valid() const{
    return m_work_units_generated_count_isValid;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_data_to_scan_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planning_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queue_time_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_units_generated_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetQueryStatisticsResponse_PlanningStatistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
