/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTemporaryGluePartitionCredentials_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTemporaryGluePartitionCredentials_request::OAIGetTemporaryGluePartitionCredentials_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTemporaryGluePartitionCredentials_request::OAIGetTemporaryGluePartitionCredentials_request() {
    this->initializeModel();
}

OAIGetTemporaryGluePartitionCredentials_request::~OAIGetTemporaryGluePartitionCredentials_request() {}

void OAIGetTemporaryGluePartitionCredentials_request::initializeModel() {

    m_table_arn_isSet = false;
    m_table_arn_isValid = false;

    m_partition_isSet = false;
    m_partition_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;

    m_audit_context_isSet = false;
    m_audit_context_isValid = false;

    m_supported_permission_types_isSet = false;
    m_supported_permission_types_isValid = false;
}

void OAIGetTemporaryGluePartitionCredentials_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTemporaryGluePartitionCredentials_request::fromJsonObject(QJsonObject json) {

    m_table_arn_isValid = ::OpenAPI::fromJsonValue(m_table_arn, json[QString("TableArn")]);
    m_table_arn_isSet = !json[QString("TableArn")].isNull() && m_table_arn_isValid;

    m_partition_isValid = ::OpenAPI::fromJsonValue(m_partition, json[QString("Partition")]);
    m_partition_isSet = !json[QString("Partition")].isNull() && m_partition_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("DurationSeconds")]);
    m_duration_seconds_isSet = !json[QString("DurationSeconds")].isNull() && m_duration_seconds_isValid;

    m_audit_context_isValid = ::OpenAPI::fromJsonValue(m_audit_context, json[QString("AuditContext")]);
    m_audit_context_isSet = !json[QString("AuditContext")].isNull() && m_audit_context_isValid;

    m_supported_permission_types_isValid = ::OpenAPI::fromJsonValue(m_supported_permission_types, json[QString("SupportedPermissionTypes")]);
    m_supported_permission_types_isSet = !json[QString("SupportedPermissionTypes")].isNull() && m_supported_permission_types_isValid;
}

QString OAIGetTemporaryGluePartitionCredentials_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTemporaryGluePartitionCredentials_request::asJsonObject() const {
    QJsonObject obj;
    if (m_table_arn_isSet) {
        obj.insert(QString("TableArn"), ::OpenAPI::toJsonValue(m_table_arn));
    }
    if (m_partition.isSet()) {
        obj.insert(QString("Partition"), ::OpenAPI::toJsonValue(m_partition));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("DurationSeconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    if (m_audit_context.isSet()) {
        obj.insert(QString("AuditContext"), ::OpenAPI::toJsonValue(m_audit_context));
    }
    if (m_supported_permission_types.size() > 0) {
        obj.insert(QString("SupportedPermissionTypes"), ::OpenAPI::toJsonValue(m_supported_permission_types));
    }
    return obj;
}

QString OAIGetTemporaryGluePartitionCredentials_request::getTableArn() const {
    return m_table_arn;
}
void OAIGetTemporaryGluePartitionCredentials_request::setTableArn(const QString &table_arn) {
    m_table_arn = table_arn;
    m_table_arn_isSet = true;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_table_arn_Set() const{
    return m_table_arn_isSet;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_table_arn_Valid() const{
    return m_table_arn_isValid;
}

OAIGetTemporaryGluePartitionCredentials_request_Partition OAIGetTemporaryGluePartitionCredentials_request::getPartition() const {
    return m_partition;
}
void OAIGetTemporaryGluePartitionCredentials_request::setPartition(const OAIGetTemporaryGluePartitionCredentials_request_Partition &partition) {
    m_partition = partition;
    m_partition_isSet = true;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_partition_Set() const{
    return m_partition_isSet;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_partition_Valid() const{
    return m_partition_isValid;
}

QList<OAIPermission> OAIGetTemporaryGluePartitionCredentials_request::getPermissions() const {
    return m_permissions;
}
void OAIGetTemporaryGluePartitionCredentials_request::setPermissions(const QList<OAIPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_permissions_Valid() const{
    return m_permissions_isValid;
}

qint32 OAIGetTemporaryGluePartitionCredentials_request::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIGetTemporaryGluePartitionCredentials_request::setDurationSeconds(const qint32 &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

OAIGetTemporaryGluePartitionCredentials_request_AuditContext OAIGetTemporaryGluePartitionCredentials_request::getAuditContext() const {
    return m_audit_context;
}
void OAIGetTemporaryGluePartitionCredentials_request::setAuditContext(const OAIGetTemporaryGluePartitionCredentials_request_AuditContext &audit_context) {
    m_audit_context = audit_context;
    m_audit_context_isSet = true;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_audit_context_Set() const{
    return m_audit_context_isSet;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_audit_context_Valid() const{
    return m_audit_context_isValid;
}

QList<OAIPermissionType> OAIGetTemporaryGluePartitionCredentials_request::getSupportedPermissionTypes() const {
    return m_supported_permission_types;
}
void OAIGetTemporaryGluePartitionCredentials_request::setSupportedPermissionTypes(const QList<OAIPermissionType> &supported_permission_types) {
    m_supported_permission_types = supported_permission_types;
    m_supported_permission_types_isSet = true;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_supported_permission_types_Set() const{
    return m_supported_permission_types_isSet;
}

bool OAIGetTemporaryGluePartitionCredentials_request::is_supported_permission_types_Valid() const{
    return m_supported_permission_types_isValid;
}

bool OAIGetTemporaryGluePartitionCredentials_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_permission_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTemporaryGluePartitionCredentials_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_table_arn_isValid && m_partition_isValid && true;
}

} // namespace OpenAPI
