/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetQueryStatisticsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetQueryStatisticsResponse::OAIGetQueryStatisticsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetQueryStatisticsResponse::OAIGetQueryStatisticsResponse() {
    this->initializeModel();
}

OAIGetQueryStatisticsResponse::~OAIGetQueryStatisticsResponse() {}

void OAIGetQueryStatisticsResponse::initializeModel() {

    m_execution_statistics_isSet = false;
    m_execution_statistics_isValid = false;

    m_planning_statistics_isSet = false;
    m_planning_statistics_isValid = false;

    m_query_submission_time_isSet = false;
    m_query_submission_time_isValid = false;
}

void OAIGetQueryStatisticsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetQueryStatisticsResponse::fromJsonObject(QJsonObject json) {

    m_execution_statistics_isValid = ::OpenAPI::fromJsonValue(m_execution_statistics, json[QString("ExecutionStatistics")]);
    m_execution_statistics_isSet = !json[QString("ExecutionStatistics")].isNull() && m_execution_statistics_isValid;

    m_planning_statistics_isValid = ::OpenAPI::fromJsonValue(m_planning_statistics, json[QString("PlanningStatistics")]);
    m_planning_statistics_isSet = !json[QString("PlanningStatistics")].isNull() && m_planning_statistics_isValid;

    m_query_submission_time_isValid = ::OpenAPI::fromJsonValue(m_query_submission_time, json[QString("QuerySubmissionTime")]);
    m_query_submission_time_isSet = !json[QString("QuerySubmissionTime")].isNull() && m_query_submission_time_isValid;
}

QString OAIGetQueryStatisticsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetQueryStatisticsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_execution_statistics.isSet()) {
        obj.insert(QString("ExecutionStatistics"), ::OpenAPI::toJsonValue(m_execution_statistics));
    }
    if (m_planning_statistics.isSet()) {
        obj.insert(QString("PlanningStatistics"), ::OpenAPI::toJsonValue(m_planning_statistics));
    }
    if (m_query_submission_time_isSet) {
        obj.insert(QString("QuerySubmissionTime"), ::OpenAPI::toJsonValue(m_query_submission_time));
    }
    return obj;
}

OAIGetQueryStatisticsResponse_ExecutionStatistics OAIGetQueryStatisticsResponse::getExecutionStatistics() const {
    return m_execution_statistics;
}
void OAIGetQueryStatisticsResponse::setExecutionStatistics(const OAIGetQueryStatisticsResponse_ExecutionStatistics &execution_statistics) {
    m_execution_statistics = execution_statistics;
    m_execution_statistics_isSet = true;
}

bool OAIGetQueryStatisticsResponse::is_execution_statistics_Set() const{
    return m_execution_statistics_isSet;
}

bool OAIGetQueryStatisticsResponse::is_execution_statistics_Valid() const{
    return m_execution_statistics_isValid;
}

OAIGetQueryStatisticsResponse_PlanningStatistics OAIGetQueryStatisticsResponse::getPlanningStatistics() const {
    return m_planning_statistics;
}
void OAIGetQueryStatisticsResponse::setPlanningStatistics(const OAIGetQueryStatisticsResponse_PlanningStatistics &planning_statistics) {
    m_planning_statistics = planning_statistics;
    m_planning_statistics_isSet = true;
}

bool OAIGetQueryStatisticsResponse::is_planning_statistics_Set() const{
    return m_planning_statistics_isSet;
}

bool OAIGetQueryStatisticsResponse::is_planning_statistics_Valid() const{
    return m_planning_statistics_isValid;
}

QDateTime OAIGetQueryStatisticsResponse::getQuerySubmissionTime() const {
    return m_query_submission_time;
}
void OAIGetQueryStatisticsResponse::setQuerySubmissionTime(const QDateTime &query_submission_time) {
    m_query_submission_time = query_submission_time;
    m_query_submission_time_isSet = true;
}

bool OAIGetQueryStatisticsResponse::is_query_submission_time_Set() const{
    return m_query_submission_time_isSet;
}

bool OAIGetQueryStatisticsResponse::is_query_submission_time_Valid() const{
    return m_query_submission_time_isValid;
}

bool OAIGetQueryStatisticsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_execution_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_planning_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_submission_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetQueryStatisticsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
