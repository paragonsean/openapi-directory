/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrantPermissions_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrantPermissions_request::OAIGrantPermissions_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrantPermissions_request::OAIGrantPermissions_request() {
    this->initializeModel();
}

OAIGrantPermissions_request::~OAIGrantPermissions_request() {}

void OAIGrantPermissions_request::initializeModel() {

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_permissions_with_grant_option_isSet = false;
    m_permissions_with_grant_option_isValid = false;
}

void OAIGrantPermissions_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrantPermissions_request::fromJsonObject(QJsonObject json) {

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("Principal")]);
    m_principal_isSet = !json[QString("Principal")].isNull() && m_principal_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("Resource")]);
    m_resource_isSet = !json[QString("Resource")].isNull() && m_resource_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("Permissions")]);
    m_permissions_isSet = !json[QString("Permissions")].isNull() && m_permissions_isValid;

    m_permissions_with_grant_option_isValid = ::OpenAPI::fromJsonValue(m_permissions_with_grant_option, json[QString("PermissionsWithGrantOption")]);
    m_permissions_with_grant_option_isSet = !json[QString("PermissionsWithGrantOption")].isNull() && m_permissions_with_grant_option_isValid;
}

QString OAIGrantPermissions_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrantPermissions_request::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_principal.isSet()) {
        obj.insert(QString("Principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("Resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("Permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_permissions_with_grant_option.size() > 0) {
        obj.insert(QString("PermissionsWithGrantOption"), ::OpenAPI::toJsonValue(m_permissions_with_grant_option));
    }
    return obj;
}

QString OAIGrantPermissions_request::getCatalogId() const {
    return m_catalog_id;
}
void OAIGrantPermissions_request::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAIGrantPermissions_request::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAIGrantPermissions_request::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

OAIGrantPermissions_request_Principal OAIGrantPermissions_request::getPrincipal() const {
    return m_principal;
}
void OAIGrantPermissions_request::setPrincipal(const OAIGrantPermissions_request_Principal &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIGrantPermissions_request::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIGrantPermissions_request::is_principal_Valid() const{
    return m_principal_isValid;
}

OAIAddLFTagsToResource_request_Resource OAIGrantPermissions_request::getResource() const {
    return m_resource;
}
void OAIGrantPermissions_request::setResource(const OAIAddLFTagsToResource_request_Resource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIGrantPermissions_request::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIGrantPermissions_request::is_resource_Valid() const{
    return m_resource_isValid;
}

QList<OAIPermission> OAIGrantPermissions_request::getPermissions() const {
    return m_permissions;
}
void OAIGrantPermissions_request::setPermissions(const QList<OAIPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIGrantPermissions_request::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIGrantPermissions_request::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QList<OAIPermission> OAIGrantPermissions_request::getPermissionsWithGrantOption() const {
    return m_permissions_with_grant_option;
}
void OAIGrantPermissions_request::setPermissionsWithGrantOption(const QList<OAIPermission> &permissions_with_grant_option) {
    m_permissions_with_grant_option = permissions_with_grant_option;
    m_permissions_with_grant_option_isSet = true;
}

bool OAIGrantPermissions_request::is_permissions_with_grant_option_Set() const{
    return m_permissions_with_grant_option_isSet;
}

bool OAIGrantPermissions_request::is_permissions_with_grant_option_Valid() const{
    return m_permissions_with_grant_option_isValid;
}

bool OAIGrantPermissions_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_with_grant_option.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrantPermissions_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_principal_isValid && m_resource_isValid && m_permissions_isValid && true;
}

} // namespace OpenAPI
