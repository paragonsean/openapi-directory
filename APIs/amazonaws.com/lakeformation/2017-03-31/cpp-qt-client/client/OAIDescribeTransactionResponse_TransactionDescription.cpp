/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeTransactionResponse_TransactionDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeTransactionResponse_TransactionDescription::OAIDescribeTransactionResponse_TransactionDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeTransactionResponse_TransactionDescription::OAIDescribeTransactionResponse_TransactionDescription() {
    this->initializeModel();
}

OAIDescribeTransactionResponse_TransactionDescription::~OAIDescribeTransactionResponse_TransactionDescription() {}

void OAIDescribeTransactionResponse_TransactionDescription::initializeModel() {

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_transaction_status_isSet = false;
    m_transaction_status_isValid = false;

    m_transaction_start_time_isSet = false;
    m_transaction_start_time_isValid = false;

    m_transaction_end_time_isSet = false;
    m_transaction_end_time_isValid = false;
}

void OAIDescribeTransactionResponse_TransactionDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeTransactionResponse_TransactionDescription::fromJsonObject(QJsonObject json) {

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("TransactionId")]);
    m_transaction_id_isSet = !json[QString("TransactionId")].isNull() && m_transaction_id_isValid;

    m_transaction_status_isValid = ::OpenAPI::fromJsonValue(m_transaction_status, json[QString("TransactionStatus")]);
    m_transaction_status_isSet = !json[QString("TransactionStatus")].isNull() && m_transaction_status_isValid;

    m_transaction_start_time_isValid = ::OpenAPI::fromJsonValue(m_transaction_start_time, json[QString("TransactionStartTime")]);
    m_transaction_start_time_isSet = !json[QString("TransactionStartTime")].isNull() && m_transaction_start_time_isValid;

    m_transaction_end_time_isValid = ::OpenAPI::fromJsonValue(m_transaction_end_time, json[QString("TransactionEndTime")]);
    m_transaction_end_time_isSet = !json[QString("TransactionEndTime")].isNull() && m_transaction_end_time_isValid;
}

QString OAIDescribeTransactionResponse_TransactionDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeTransactionResponse_TransactionDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction_id_isSet) {
        obj.insert(QString("TransactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_transaction_status.isSet()) {
        obj.insert(QString("TransactionStatus"), ::OpenAPI::toJsonValue(m_transaction_status));
    }
    if (m_transaction_start_time_isSet) {
        obj.insert(QString("TransactionStartTime"), ::OpenAPI::toJsonValue(m_transaction_start_time));
    }
    if (m_transaction_end_time_isSet) {
        obj.insert(QString("TransactionEndTime"), ::OpenAPI::toJsonValue(m_transaction_end_time));
    }
    return obj;
}

QString OAIDescribeTransactionResponse_TransactionDescription::getTransactionId() const {
    return m_transaction_id;
}
void OAIDescribeTransactionResponse_TransactionDescription::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIDescribeTransactionResponse_TransactionDescription::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIDescribeTransactionResponse_TransactionDescription::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

OAITransactionStatus OAIDescribeTransactionResponse_TransactionDescription::getTransactionStatus() const {
    return m_transaction_status;
}
void OAIDescribeTransactionResponse_TransactionDescription::setTransactionStatus(const OAITransactionStatus &transaction_status) {
    m_transaction_status = transaction_status;
    m_transaction_status_isSet = true;
}

bool OAIDescribeTransactionResponse_TransactionDescription::is_transaction_status_Set() const{
    return m_transaction_status_isSet;
}

bool OAIDescribeTransactionResponse_TransactionDescription::is_transaction_status_Valid() const{
    return m_transaction_status_isValid;
}

QDateTime OAIDescribeTransactionResponse_TransactionDescription::getTransactionStartTime() const {
    return m_transaction_start_time;
}
void OAIDescribeTransactionResponse_TransactionDescription::setTransactionStartTime(const QDateTime &transaction_start_time) {
    m_transaction_start_time = transaction_start_time;
    m_transaction_start_time_isSet = true;
}

bool OAIDescribeTransactionResponse_TransactionDescription::is_transaction_start_time_Set() const{
    return m_transaction_start_time_isSet;
}

bool OAIDescribeTransactionResponse_TransactionDescription::is_transaction_start_time_Valid() const{
    return m_transaction_start_time_isValid;
}

QDateTime OAIDescribeTransactionResponse_TransactionDescription::getTransactionEndTime() const {
    return m_transaction_end_time;
}
void OAIDescribeTransactionResponse_TransactionDescription::setTransactionEndTime(const QDateTime &transaction_end_time) {
    m_transaction_end_time = transaction_end_time;
    m_transaction_end_time_isSet = true;
}

bool OAIDescribeTransactionResponse_TransactionDescription::is_transaction_end_time_Set() const{
    return m_transaction_end_time_isSet;
}

bool OAIDescribeTransactionResponse_TransactionDescription::is_transaction_end_time_Valid() const{
    return m_transaction_end_time_isValid;
}

bool OAIDescribeTransactionResponse_TransactionDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeTransactionResponse_TransactionDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
