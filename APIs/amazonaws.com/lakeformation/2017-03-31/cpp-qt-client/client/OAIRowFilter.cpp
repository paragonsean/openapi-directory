/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRowFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRowFilter::OAIRowFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRowFilter::OAIRowFilter() {
    this->initializeModel();
}

OAIRowFilter::~OAIRowFilter() {}

void OAIRowFilter::initializeModel() {

    m_filter_expression_isSet = false;
    m_filter_expression_isValid = false;

    m_all_rows_wildcard_isSet = false;
    m_all_rows_wildcard_isValid = false;
}

void OAIRowFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRowFilter::fromJsonObject(QJsonObject json) {

    m_filter_expression_isValid = ::OpenAPI::fromJsonValue(m_filter_expression, json[QString("FilterExpression")]);
    m_filter_expression_isSet = !json[QString("FilterExpression")].isNull() && m_filter_expression_isValid;

    m_all_rows_wildcard_isValid = ::OpenAPI::fromJsonValue(m_all_rows_wildcard, json[QString("AllRowsWildcard")]);
    m_all_rows_wildcard_isSet = !json[QString("AllRowsWildcard")].isNull() && m_all_rows_wildcard_isValid;
}

QString OAIRowFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRowFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_expression_isSet) {
        obj.insert(QString("FilterExpression"), ::OpenAPI::toJsonValue(m_filter_expression));
    }
    if (m_all_rows_wildcard.isSet()) {
        obj.insert(QString("AllRowsWildcard"), ::OpenAPI::toJsonValue(m_all_rows_wildcard));
    }
    return obj;
}

QString OAIRowFilter::getFilterExpression() const {
    return m_filter_expression;
}
void OAIRowFilter::setFilterExpression(const QString &filter_expression) {
    m_filter_expression = filter_expression;
    m_filter_expression_isSet = true;
}

bool OAIRowFilter::is_filter_expression_Set() const{
    return m_filter_expression_isSet;
}

bool OAIRowFilter::is_filter_expression_Valid() const{
    return m_filter_expression_isValid;
}

OAIObject OAIRowFilter::getAllRowsWildcard() const {
    return m_all_rows_wildcard;
}
void OAIRowFilter::setAllRowsWildcard(const OAIObject &all_rows_wildcard) {
    m_all_rows_wildcard = all_rows_wildcard;
    m_all_rows_wildcard_isSet = true;
}

bool OAIRowFilter::is_all_rows_wildcard_Set() const{
    return m_all_rows_wildcard_isSet;
}

bool OAIRowFilter::is_all_rows_wildcard_Valid() const{
    return m_all_rows_wildcard_isValid;
}

bool OAIRowFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_rows_wildcard.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRowFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
