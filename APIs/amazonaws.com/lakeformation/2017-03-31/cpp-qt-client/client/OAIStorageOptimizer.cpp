/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageOptimizer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageOptimizer::OAIStorageOptimizer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageOptimizer::OAIStorageOptimizer() {
    this->initializeModel();
}

OAIStorageOptimizer::~OAIStorageOptimizer() {}

void OAIStorageOptimizer::initializeModel() {

    m_storage_optimizer_type_isSet = false;
    m_storage_optimizer_type_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;

    m_last_run_details_isSet = false;
    m_last_run_details_isValid = false;
}

void OAIStorageOptimizer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageOptimizer::fromJsonObject(QJsonObject json) {

    m_storage_optimizer_type_isValid = ::OpenAPI::fromJsonValue(m_storage_optimizer_type, json[QString("StorageOptimizerType")]);
    m_storage_optimizer_type_isSet = !json[QString("StorageOptimizerType")].isNull() && m_storage_optimizer_type_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("Config")]);
    m_config_isSet = !json[QString("Config")].isNull() && m_config_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("ErrorMessage")]);
    m_error_message_isSet = !json[QString("ErrorMessage")].isNull() && m_error_message_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;

    m_last_run_details_isValid = ::OpenAPI::fromJsonValue(m_last_run_details, json[QString("LastRunDetails")]);
    m_last_run_details_isSet = !json[QString("LastRunDetails")].isNull() && m_last_run_details_isValid;
}

QString OAIStorageOptimizer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageOptimizer::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_optimizer_type.isSet()) {
        obj.insert(QString("StorageOptimizerType"), ::OpenAPI::toJsonValue(m_storage_optimizer_type));
    }
    if (m_config.isSet()) {
        obj.insert(QString("Config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("ErrorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_warnings_isSet) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    if (m_last_run_details_isSet) {
        obj.insert(QString("LastRunDetails"), ::OpenAPI::toJsonValue(m_last_run_details));
    }
    return obj;
}

OAIOptimizerType OAIStorageOptimizer::getStorageOptimizerType() const {
    return m_storage_optimizer_type;
}
void OAIStorageOptimizer::setStorageOptimizerType(const OAIOptimizerType &storage_optimizer_type) {
    m_storage_optimizer_type = storage_optimizer_type;
    m_storage_optimizer_type_isSet = true;
}

bool OAIStorageOptimizer::is_storage_optimizer_type_Set() const{
    return m_storage_optimizer_type_isSet;
}

bool OAIStorageOptimizer::is_storage_optimizer_type_Valid() const{
    return m_storage_optimizer_type_isValid;
}

QMap OAIStorageOptimizer::getConfig() const {
    return m_config;
}
void OAIStorageOptimizer::setConfig(const QMap &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIStorageOptimizer::is_config_Set() const{
    return m_config_isSet;
}

bool OAIStorageOptimizer::is_config_Valid() const{
    return m_config_isValid;
}

QString OAIStorageOptimizer::getErrorMessage() const {
    return m_error_message;
}
void OAIStorageOptimizer::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIStorageOptimizer::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIStorageOptimizer::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIStorageOptimizer::getWarnings() const {
    return m_warnings;
}
void OAIStorageOptimizer::setWarnings(const QString &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIStorageOptimizer::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIStorageOptimizer::is_warnings_Valid() const{
    return m_warnings_isValid;
}

QString OAIStorageOptimizer::getLastRunDetails() const {
    return m_last_run_details;
}
void OAIStorageOptimizer::setLastRunDetails(const QString &last_run_details) {
    m_last_run_details = last_run_details;
    m_last_run_details_isSet = true;
}

bool OAIStorageOptimizer::is_last_run_details_Set() const{
    return m_last_run_details_isSet;
}

bool OAIStorageOptimizer::is_last_run_details_Valid() const{
    return m_last_run_details_isValid;
}

bool OAIStorageOptimizer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_optimizer_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_run_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageOptimizer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
