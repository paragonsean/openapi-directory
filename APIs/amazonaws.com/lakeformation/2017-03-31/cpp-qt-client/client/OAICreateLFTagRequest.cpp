/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLFTagRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLFTagRequest::OAICreateLFTagRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLFTagRequest::OAICreateLFTagRequest() {
    this->initializeModel();
}

OAICreateLFTagRequest::~OAICreateLFTagRequest() {}

void OAICreateLFTagRequest::initializeModel() {

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_tag_key_isSet = false;
    m_tag_key_isValid = false;

    m_tag_values_isSet = false;
    m_tag_values_isValid = false;
}

void OAICreateLFTagRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLFTagRequest::fromJsonObject(QJsonObject json) {

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;

    m_tag_key_isValid = ::OpenAPI::fromJsonValue(m_tag_key, json[QString("TagKey")]);
    m_tag_key_isSet = !json[QString("TagKey")].isNull() && m_tag_key_isValid;

    m_tag_values_isValid = ::OpenAPI::fromJsonValue(m_tag_values, json[QString("TagValues")]);
    m_tag_values_isSet = !json[QString("TagValues")].isNull() && m_tag_values_isValid;
}

QString OAICreateLFTagRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLFTagRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_tag_key_isSet) {
        obj.insert(QString("TagKey"), ::OpenAPI::toJsonValue(m_tag_key));
    }
    if (m_tag_values.isSet()) {
        obj.insert(QString("TagValues"), ::OpenAPI::toJsonValue(m_tag_values));
    }
    return obj;
}

QString OAICreateLFTagRequest::getCatalogId() const {
    return m_catalog_id;
}
void OAICreateLFTagRequest::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAICreateLFTagRequest::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAICreateLFTagRequest::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QString OAICreateLFTagRequest::getTagKey() const {
    return m_tag_key;
}
void OAICreateLFTagRequest::setTagKey(const QString &tag_key) {
    m_tag_key = tag_key;
    m_tag_key_isSet = true;
}

bool OAICreateLFTagRequest::is_tag_key_Set() const{
    return m_tag_key_isSet;
}

bool OAICreateLFTagRequest::is_tag_key_Valid() const{
    return m_tag_key_isValid;
}

QList OAICreateLFTagRequest::getTagValues() const {
    return m_tag_values;
}
void OAICreateLFTagRequest::setTagValues(const QList &tag_values) {
    m_tag_values = tag_values;
    m_tag_values_isSet = true;
}

bool OAICreateLFTagRequest::is_tag_values_Set() const{
    return m_tag_values_isSet;
}

bool OAICreateLFTagRequest::is_tag_values_Valid() const{
    return m_tag_values_isValid;
}

bool OAICreateLFTagRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLFTagRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tag_key_isValid && m_tag_values_isValid && true;
}

} // namespace OpenAPI
