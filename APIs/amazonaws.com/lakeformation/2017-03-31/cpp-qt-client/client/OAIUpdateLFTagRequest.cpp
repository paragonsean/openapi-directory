/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLFTagRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLFTagRequest::OAIUpdateLFTagRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLFTagRequest::OAIUpdateLFTagRequest() {
    this->initializeModel();
}

OAIUpdateLFTagRequest::~OAIUpdateLFTagRequest() {}

void OAIUpdateLFTagRequest::initializeModel() {

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_tag_key_isSet = false;
    m_tag_key_isValid = false;

    m_tag_values_to_delete_isSet = false;
    m_tag_values_to_delete_isValid = false;

    m_tag_values_to_add_isSet = false;
    m_tag_values_to_add_isValid = false;
}

void OAIUpdateLFTagRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLFTagRequest::fromJsonObject(QJsonObject json) {

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;

    m_tag_key_isValid = ::OpenAPI::fromJsonValue(m_tag_key, json[QString("TagKey")]);
    m_tag_key_isSet = !json[QString("TagKey")].isNull() && m_tag_key_isValid;

    m_tag_values_to_delete_isValid = ::OpenAPI::fromJsonValue(m_tag_values_to_delete, json[QString("TagValuesToDelete")]);
    m_tag_values_to_delete_isSet = !json[QString("TagValuesToDelete")].isNull() && m_tag_values_to_delete_isValid;

    m_tag_values_to_add_isValid = ::OpenAPI::fromJsonValue(m_tag_values_to_add, json[QString("TagValuesToAdd")]);
    m_tag_values_to_add_isSet = !json[QString("TagValuesToAdd")].isNull() && m_tag_values_to_add_isValid;
}

QString OAIUpdateLFTagRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLFTagRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_tag_key_isSet) {
        obj.insert(QString("TagKey"), ::OpenAPI::toJsonValue(m_tag_key));
    }
    if (m_tag_values_to_delete.isSet()) {
        obj.insert(QString("TagValuesToDelete"), ::OpenAPI::toJsonValue(m_tag_values_to_delete));
    }
    if (m_tag_values_to_add.isSet()) {
        obj.insert(QString("TagValuesToAdd"), ::OpenAPI::toJsonValue(m_tag_values_to_add));
    }
    return obj;
}

QString OAIUpdateLFTagRequest::getCatalogId() const {
    return m_catalog_id;
}
void OAIUpdateLFTagRequest::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAIUpdateLFTagRequest::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAIUpdateLFTagRequest::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QString OAIUpdateLFTagRequest::getTagKey() const {
    return m_tag_key;
}
void OAIUpdateLFTagRequest::setTagKey(const QString &tag_key) {
    m_tag_key = tag_key;
    m_tag_key_isSet = true;
}

bool OAIUpdateLFTagRequest::is_tag_key_Set() const{
    return m_tag_key_isSet;
}

bool OAIUpdateLFTagRequest::is_tag_key_Valid() const{
    return m_tag_key_isValid;
}

QList OAIUpdateLFTagRequest::getTagValuesToDelete() const {
    return m_tag_values_to_delete;
}
void OAIUpdateLFTagRequest::setTagValuesToDelete(const QList &tag_values_to_delete) {
    m_tag_values_to_delete = tag_values_to_delete;
    m_tag_values_to_delete_isSet = true;
}

bool OAIUpdateLFTagRequest::is_tag_values_to_delete_Set() const{
    return m_tag_values_to_delete_isSet;
}

bool OAIUpdateLFTagRequest::is_tag_values_to_delete_Valid() const{
    return m_tag_values_to_delete_isValid;
}

QList OAIUpdateLFTagRequest::getTagValuesToAdd() const {
    return m_tag_values_to_add;
}
void OAIUpdateLFTagRequest::setTagValuesToAdd(const QList &tag_values_to_add) {
    m_tag_values_to_add = tag_values_to_add;
    m_tag_values_to_add_isSet = true;
}

bool OAIUpdateLFTagRequest::is_tag_values_to_add_Set() const{
    return m_tag_values_to_add_isSet;
}

bool OAIUpdateLFTagRequest::is_tag_values_to_add_Valid() const{
    return m_tag_values_to_add_isValid;
}

bool OAIUpdateLFTagRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_values_to_delete.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_values_to_add.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLFTagRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tag_key_isValid && true;
}

} // namespace OpenAPI
