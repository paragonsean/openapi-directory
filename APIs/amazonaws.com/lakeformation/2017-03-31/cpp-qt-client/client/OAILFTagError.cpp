/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILFTagError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILFTagError::OAILFTagError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILFTagError::OAILFTagError() {
    this->initializeModel();
}

OAILFTagError::~OAILFTagError() {}

void OAILFTagError::initializeModel() {

    m_lf_tag_isSet = false;
    m_lf_tag_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAILFTagError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILFTagError::fromJsonObject(QJsonObject json) {

    m_lf_tag_isValid = ::OpenAPI::fromJsonValue(m_lf_tag, json[QString("LFTag")]);
    m_lf_tag_isSet = !json[QString("LFTag")].isNull() && m_lf_tag_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("Error")]);
    m_error_isSet = !json[QString("Error")].isNull() && m_error_isValid;
}

QString OAILFTagError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILFTagError::asJsonObject() const {
    QJsonObject obj;
    if (m_lf_tag.isSet()) {
        obj.insert(QString("LFTag"), ::OpenAPI::toJsonValue(m_lf_tag));
    }
    if (m_error.isSet()) {
        obj.insert(QString("Error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

OAILFTagError_LFTag OAILFTagError::getLfTag() const {
    return m_lf_tag;
}
void OAILFTagError::setLfTag(const OAILFTagError_LFTag &lf_tag) {
    m_lf_tag = lf_tag;
    m_lf_tag_isSet = true;
}

bool OAILFTagError::is_lf_tag_Set() const{
    return m_lf_tag_isSet;
}

bool OAILFTagError::is_lf_tag_Valid() const{
    return m_lf_tag_isValid;
}

OAILFTagError_Error OAILFTagError::getError() const {
    return m_error;
}
void OAILFTagError::setError(const OAILFTagError_Error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAILFTagError::is_error_Set() const{
    return m_error_isSet;
}

bool OAILFTagError::is_error_Valid() const{
    return m_error_isValid;
}

bool OAILFTagError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lf_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILFTagError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
