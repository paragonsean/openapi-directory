/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAssumeDecoratedRoleWithSAML_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAssumeDecoratedRoleWithSAML_request::OAIAssumeDecoratedRoleWithSAML_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAssumeDecoratedRoleWithSAML_request::OAIAssumeDecoratedRoleWithSAML_request() {
    this->initializeModel();
}

OAIAssumeDecoratedRoleWithSAML_request::~OAIAssumeDecoratedRoleWithSAML_request() {}

void OAIAssumeDecoratedRoleWithSAML_request::initializeModel() {

    m_saml_assertion_isSet = false;
    m_saml_assertion_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_principal_arn_isSet = false;
    m_principal_arn_isValid = false;

    m_duration_seconds_isSet = false;
    m_duration_seconds_isValid = false;
}

void OAIAssumeDecoratedRoleWithSAML_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAssumeDecoratedRoleWithSAML_request::fromJsonObject(QJsonObject json) {

    m_saml_assertion_isValid = ::OpenAPI::fromJsonValue(m_saml_assertion, json[QString("SAMLAssertion")]);
    m_saml_assertion_isSet = !json[QString("SAMLAssertion")].isNull() && m_saml_assertion_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleArn")]);
    m_role_arn_isSet = !json[QString("RoleArn")].isNull() && m_role_arn_isValid;

    m_principal_arn_isValid = ::OpenAPI::fromJsonValue(m_principal_arn, json[QString("PrincipalArn")]);
    m_principal_arn_isSet = !json[QString("PrincipalArn")].isNull() && m_principal_arn_isValid;

    m_duration_seconds_isValid = ::OpenAPI::fromJsonValue(m_duration_seconds, json[QString("DurationSeconds")]);
    m_duration_seconds_isSet = !json[QString("DurationSeconds")].isNull() && m_duration_seconds_isValid;
}

QString OAIAssumeDecoratedRoleWithSAML_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAssumeDecoratedRoleWithSAML_request::asJsonObject() const {
    QJsonObject obj;
    if (m_saml_assertion_isSet) {
        obj.insert(QString("SAMLAssertion"), ::OpenAPI::toJsonValue(m_saml_assertion));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleArn"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_principal_arn_isSet) {
        obj.insert(QString("PrincipalArn"), ::OpenAPI::toJsonValue(m_principal_arn));
    }
    if (m_duration_seconds_isSet) {
        obj.insert(QString("DurationSeconds"), ::OpenAPI::toJsonValue(m_duration_seconds));
    }
    return obj;
}

QString OAIAssumeDecoratedRoleWithSAML_request::getSamlAssertion() const {
    return m_saml_assertion;
}
void OAIAssumeDecoratedRoleWithSAML_request::setSamlAssertion(const QString &saml_assertion) {
    m_saml_assertion = saml_assertion;
    m_saml_assertion_isSet = true;
}

bool OAIAssumeDecoratedRoleWithSAML_request::is_saml_assertion_Set() const{
    return m_saml_assertion_isSet;
}

bool OAIAssumeDecoratedRoleWithSAML_request::is_saml_assertion_Valid() const{
    return m_saml_assertion_isValid;
}

QString OAIAssumeDecoratedRoleWithSAML_request::getRoleArn() const {
    return m_role_arn;
}
void OAIAssumeDecoratedRoleWithSAML_request::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIAssumeDecoratedRoleWithSAML_request::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIAssumeDecoratedRoleWithSAML_request::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIAssumeDecoratedRoleWithSAML_request::getPrincipalArn() const {
    return m_principal_arn;
}
void OAIAssumeDecoratedRoleWithSAML_request::setPrincipalArn(const QString &principal_arn) {
    m_principal_arn = principal_arn;
    m_principal_arn_isSet = true;
}

bool OAIAssumeDecoratedRoleWithSAML_request::is_principal_arn_Set() const{
    return m_principal_arn_isSet;
}

bool OAIAssumeDecoratedRoleWithSAML_request::is_principal_arn_Valid() const{
    return m_principal_arn_isValid;
}

qint32 OAIAssumeDecoratedRoleWithSAML_request::getDurationSeconds() const {
    return m_duration_seconds;
}
void OAIAssumeDecoratedRoleWithSAML_request::setDurationSeconds(const qint32 &duration_seconds) {
    m_duration_seconds = duration_seconds;
    m_duration_seconds_isSet = true;
}

bool OAIAssumeDecoratedRoleWithSAML_request::is_duration_seconds_Set() const{
    return m_duration_seconds_isSet;
}

bool OAIAssumeDecoratedRoleWithSAML_request::is_duration_seconds_Valid() const{
    return m_duration_seconds_isValid;
}

bool OAIAssumeDecoratedRoleWithSAML_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_saml_assertion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAssumeDecoratedRoleWithSAML_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_saml_assertion_isValid && m_role_arn_isValid && m_principal_arn_isValid && true;
}

} // namespace OpenAPI
