/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListDataCellsFilter_request_Table.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListDataCellsFilter_request_Table::OAIListDataCellsFilter_request_Table(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListDataCellsFilter_request_Table::OAIListDataCellsFilter_request_Table() {
    this->initializeModel();
}

OAIListDataCellsFilter_request_Table::~OAIListDataCellsFilter_request_Table() {}

void OAIListDataCellsFilter_request_Table::initializeModel() {

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_table_wildcard_isSet = false;
    m_table_wildcard_isValid = false;
}

void OAIListDataCellsFilter_request_Table::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListDataCellsFilter_request_Table::fromJsonObject(QJsonObject json) {

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_table_wildcard_isValid = ::OpenAPI::fromJsonValue(m_table_wildcard, json[QString("TableWildcard")]);
    m_table_wildcard_isSet = !json[QString("TableWildcard")].isNull() && m_table_wildcard_isValid;
}

QString OAIListDataCellsFilter_request_Table::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListDataCellsFilter_request_Table::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_table_wildcard.isSet()) {
        obj.insert(QString("TableWildcard"), ::OpenAPI::toJsonValue(m_table_wildcard));
    }
    return obj;
}

QString OAIListDataCellsFilter_request_Table::getCatalogId() const {
    return m_catalog_id;
}
void OAIListDataCellsFilter_request_Table::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAIListDataCellsFilter_request_Table::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAIListDataCellsFilter_request_Table::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QString OAIListDataCellsFilter_request_Table::getDatabaseName() const {
    return m_database_name;
}
void OAIListDataCellsFilter_request_Table::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIListDataCellsFilter_request_Table::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIListDataCellsFilter_request_Table::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIListDataCellsFilter_request_Table::getName() const {
    return m_name;
}
void OAIListDataCellsFilter_request_Table::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIListDataCellsFilter_request_Table::is_name_Set() const{
    return m_name_isSet;
}

bool OAIListDataCellsFilter_request_Table::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIListDataCellsFilter_request_Table::getTableWildcard() const {
    return m_table_wildcard;
}
void OAIListDataCellsFilter_request_Table::setTableWildcard(const OAIObject &table_wildcard) {
    m_table_wildcard = table_wildcard;
    m_table_wildcard_isSet = true;
}

bool OAIListDataCellsFilter_request_Table::is_table_wildcard_Set() const{
    return m_table_wildcard_isSet;
}

bool OAIListDataCellsFilter_request_Table::is_table_wildcard_Valid() const{
    return m_table_wildcard_isValid;
}

bool OAIListDataCellsFilter_request_Table::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_wildcard.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListDataCellsFilter_request_Table::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
