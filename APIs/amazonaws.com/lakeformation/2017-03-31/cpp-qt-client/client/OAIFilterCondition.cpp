/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilterCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilterCondition::OAIFilterCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilterCondition::OAIFilterCondition() {
    this->initializeModel();
}

OAIFilterCondition::~OAIFilterCondition() {}

void OAIFilterCondition::initializeModel() {

    m_field_isSet = false;
    m_field_isValid = false;

    m_comparison_operator_isSet = false;
    m_comparison_operator_isValid = false;

    m_string_value_list_isSet = false;
    m_string_value_list_isValid = false;
}

void OAIFilterCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilterCondition::fromJsonObject(QJsonObject json) {

    m_field_isValid = ::OpenAPI::fromJsonValue(m_field, json[QString("Field")]);
    m_field_isSet = !json[QString("Field")].isNull() && m_field_isValid;

    m_comparison_operator_isValid = ::OpenAPI::fromJsonValue(m_comparison_operator, json[QString("ComparisonOperator")]);
    m_comparison_operator_isSet = !json[QString("ComparisonOperator")].isNull() && m_comparison_operator_isValid;

    m_string_value_list_isValid = ::OpenAPI::fromJsonValue(m_string_value_list, json[QString("StringValueList")]);
    m_string_value_list_isSet = !json[QString("StringValueList")].isNull() && m_string_value_list_isValid;
}

QString OAIFilterCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilterCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_field.isSet()) {
        obj.insert(QString("Field"), ::OpenAPI::toJsonValue(m_field));
    }
    if (m_comparison_operator.isSet()) {
        obj.insert(QString("ComparisonOperator"), ::OpenAPI::toJsonValue(m_comparison_operator));
    }
    if (m_string_value_list.isSet()) {
        obj.insert(QString("StringValueList"), ::OpenAPI::toJsonValue(m_string_value_list));
    }
    return obj;
}

OAIFieldNameString OAIFilterCondition::getField() const {
    return m_field;
}
void OAIFilterCondition::setField(const OAIFieldNameString &field) {
    m_field = field;
    m_field_isSet = true;
}

bool OAIFilterCondition::is_field_Set() const{
    return m_field_isSet;
}

bool OAIFilterCondition::is_field_Valid() const{
    return m_field_isValid;
}

OAIComparisonOperator OAIFilterCondition::getComparisonOperator() const {
    return m_comparison_operator;
}
void OAIFilterCondition::setComparisonOperator(const OAIComparisonOperator &comparison_operator) {
    m_comparison_operator = comparison_operator;
    m_comparison_operator_isSet = true;
}

bool OAIFilterCondition::is_comparison_operator_Set() const{
    return m_comparison_operator_isSet;
}

bool OAIFilterCondition::is_comparison_operator_Valid() const{
    return m_comparison_operator_isValid;
}

QList OAIFilterCondition::getStringValueList() const {
    return m_string_value_list;
}
void OAIFilterCondition::setStringValueList(const QList &string_value_list) {
    m_string_value_list = string_value_list;
    m_string_value_list_isSet = true;
}

bool OAIFilterCondition::is_string_value_list_Set() const{
    return m_string_value_list_isSet;
}

bool OAIFilterCondition::is_string_value_list_Valid() const{
    return m_string_value_list_isValid;
}

bool OAIFilterCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_field.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_comparison_operator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_value_list.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilterCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
