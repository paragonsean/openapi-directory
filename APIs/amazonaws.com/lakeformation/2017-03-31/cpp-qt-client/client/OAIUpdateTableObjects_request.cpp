/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateTableObjects_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateTableObjects_request::OAIUpdateTableObjects_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateTableObjects_request::OAIUpdateTableObjects_request() {
    this->initializeModel();
}

OAIUpdateTableObjects_request::~OAIUpdateTableObjects_request() {}

void OAIUpdateTableObjects_request::initializeModel() {

    m_catalog_id_isSet = false;
    m_catalog_id_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_write_operations_isSet = false;
    m_write_operations_isValid = false;
}

void OAIUpdateTableObjects_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateTableObjects_request::fromJsonObject(QJsonObject json) {

    m_catalog_id_isValid = ::OpenAPI::fromJsonValue(m_catalog_id, json[QString("CatalogId")]);
    m_catalog_id_isSet = !json[QString("CatalogId")].isNull() && m_catalog_id_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("DatabaseName")]);
    m_database_name_isSet = !json[QString("DatabaseName")].isNull() && m_database_name_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("TransactionId")]);
    m_transaction_id_isSet = !json[QString("TransactionId")].isNull() && m_transaction_id_isValid;

    m_write_operations_isValid = ::OpenAPI::fromJsonValue(m_write_operations, json[QString("WriteOperations")]);
    m_write_operations_isSet = !json[QString("WriteOperations")].isNull() && m_write_operations_isValid;
}

QString OAIUpdateTableObjects_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateTableObjects_request::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog_id_isSet) {
        obj.insert(QString("CatalogId"), ::OpenAPI::toJsonValue(m_catalog_id));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("DatabaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("TransactionId"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_write_operations.size() > 0) {
        obj.insert(QString("WriteOperations"), ::OpenAPI::toJsonValue(m_write_operations));
    }
    return obj;
}

QString OAIUpdateTableObjects_request::getCatalogId() const {
    return m_catalog_id;
}
void OAIUpdateTableObjects_request::setCatalogId(const QString &catalog_id) {
    m_catalog_id = catalog_id;
    m_catalog_id_isSet = true;
}

bool OAIUpdateTableObjects_request::is_catalog_id_Set() const{
    return m_catalog_id_isSet;
}

bool OAIUpdateTableObjects_request::is_catalog_id_Valid() const{
    return m_catalog_id_isValid;
}

QString OAIUpdateTableObjects_request::getDatabaseName() const {
    return m_database_name;
}
void OAIUpdateTableObjects_request::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAIUpdateTableObjects_request::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAIUpdateTableObjects_request::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAIUpdateTableObjects_request::getTableName() const {
    return m_table_name;
}
void OAIUpdateTableObjects_request::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIUpdateTableObjects_request::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIUpdateTableObjects_request::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QString OAIUpdateTableObjects_request::getTransactionId() const {
    return m_transaction_id;
}
void OAIUpdateTableObjects_request::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIUpdateTableObjects_request::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIUpdateTableObjects_request::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QList<OAIWriteOperation> OAIUpdateTableObjects_request::getWriteOperations() const {
    return m_write_operations;
}
void OAIUpdateTableObjects_request::setWriteOperations(const QList<OAIWriteOperation> &write_operations) {
    m_write_operations = write_operations;
    m_write_operations_isSet = true;
}

bool OAIUpdateTableObjects_request::is_write_operations_Set() const{
    return m_write_operations_isSet;
}

bool OAIUpdateTableObjects_request::is_write_operations_Valid() const{
    return m_write_operations_isValid;
}

bool OAIUpdateTableObjects_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_operations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateTableObjects_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_database_name_isValid && m_table_name_isValid && m_write_operations_isValid && true;
}

} // namespace OpenAPI
