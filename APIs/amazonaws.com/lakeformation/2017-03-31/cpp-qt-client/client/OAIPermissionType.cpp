/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermissionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermissionType::OAIPermissionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermissionType::OAIPermissionType() {
    this->initializeModel();
}

OAIPermissionType::~OAIPermissionType() {}

void OAIPermissionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPermissionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPermissionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("COLUMN_PERMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionType::COLUMN_PERMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CELL_FILTER_PERMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionType::CELL_FILTER_PERMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NESTED_PERMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionType::NESTED_PERMISSION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NESTED_CELL_PERMISSION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPermissionType::NESTED_CELL_PERMISSION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPermissionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPermissionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPermissionType::COLUMN_PERMISSION:
            val = "COLUMN_PERMISSION";
            break;
        case eOAIPermissionType::CELL_FILTER_PERMISSION:
            val = "CELL_FILTER_PERMISSION";
            break;
        case eOAIPermissionType::NESTED_PERMISSION:
            val = "NESTED_PERMISSION";
            break;
        case eOAIPermissionType::NESTED_CELL_PERMISSION:
            val = "NESTED_CELL_PERMISSION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPermissionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPermissionType::eOAIPermissionType OAIPermissionType::getValue() const {
    return m_value;
}

void OAIPermissionType::setValue(const OAIPermissionType::eOAIPermissionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPermissionType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPermissionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
