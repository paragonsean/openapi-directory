/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteObjectInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteObjectInput::OAIDeleteObjectInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteObjectInput::OAIDeleteObjectInput() {
    this->initializeModel();
}

OAIDeleteObjectInput::~OAIDeleteObjectInput() {}

void OAIDeleteObjectInput::initializeModel() {

    m_uri_isSet = false;
    m_uri_isValid = false;

    m_e_tag_isSet = false;
    m_e_tag_isValid = false;

    m_partition_values_isSet = false;
    m_partition_values_isValid = false;
}

void OAIDeleteObjectInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteObjectInput::fromJsonObject(QJsonObject json) {

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("Uri")]);
    m_uri_isSet = !json[QString("Uri")].isNull() && m_uri_isValid;

    m_e_tag_isValid = ::OpenAPI::fromJsonValue(m_e_tag, json[QString("ETag")]);
    m_e_tag_isSet = !json[QString("ETag")].isNull() && m_e_tag_isValid;

    m_partition_values_isValid = ::OpenAPI::fromJsonValue(m_partition_values, json[QString("PartitionValues")]);
    m_partition_values_isSet = !json[QString("PartitionValues")].isNull() && m_partition_values_isValid;
}

QString OAIDeleteObjectInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteObjectInput::asJsonObject() const {
    QJsonObject obj;
    if (m_uri_isSet) {
        obj.insert(QString("Uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    if (m_e_tag_isSet) {
        obj.insert(QString("ETag"), ::OpenAPI::toJsonValue(m_e_tag));
    }
    if (m_partition_values.isSet()) {
        obj.insert(QString("PartitionValues"), ::OpenAPI::toJsonValue(m_partition_values));
    }
    return obj;
}

QString OAIDeleteObjectInput::getUri() const {
    return m_uri;
}
void OAIDeleteObjectInput::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIDeleteObjectInput::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIDeleteObjectInput::is_uri_Valid() const{
    return m_uri_isValid;
}

QString OAIDeleteObjectInput::getETag() const {
    return m_e_tag;
}
void OAIDeleteObjectInput::setETag(const QString &e_tag) {
    m_e_tag = e_tag;
    m_e_tag_isSet = true;
}

bool OAIDeleteObjectInput::is_e_tag_Set() const{
    return m_e_tag_isSet;
}

bool OAIDeleteObjectInput::is_e_tag_Valid() const{
    return m_e_tag_isValid;
}

QList OAIDeleteObjectInput::getPartitionValues() const {
    return m_partition_values;
}
void OAIDeleteObjectInput::setPartitionValues(const QList &partition_values) {
    m_partition_values = partition_values;
    m_partition_values_isSet = true;
}

bool OAIDeleteObjectInput::is_partition_values_Set() const{
    return m_partition_values_isSet;
}

bool OAIDeleteObjectInput::is_partition_values_Valid() const{
    return m_partition_values_isValid;
}

bool OAIDeleteObjectInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_e_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_values.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteObjectInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_uri_isValid && true;
}

} // namespace OpenAPI
