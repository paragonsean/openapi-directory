/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevokePermissionsRequest_Resource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevokePermissionsRequest_Resource::OAIRevokePermissionsRequest_Resource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevokePermissionsRequest_Resource::OAIRevokePermissionsRequest_Resource() {
    this->initializeModel();
}

OAIRevokePermissionsRequest_Resource::~OAIRevokePermissionsRequest_Resource() {}

void OAIRevokePermissionsRequest_Resource::initializeModel() {

    m_catalog_isSet = false;
    m_catalog_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_table_isSet = false;
    m_table_isValid = false;

    m_table_with_columns_isSet = false;
    m_table_with_columns_isValid = false;

    m_data_location_isSet = false;
    m_data_location_isValid = false;

    m_data_cells_filter_isSet = false;
    m_data_cells_filter_isValid = false;

    m_lf_tag_isSet = false;
    m_lf_tag_isValid = false;

    m_lf_tag_policy_isSet = false;
    m_lf_tag_policy_isValid = false;
}

void OAIRevokePermissionsRequest_Resource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevokePermissionsRequest_Resource::fromJsonObject(QJsonObject json) {

    m_catalog_isValid = ::OpenAPI::fromJsonValue(m_catalog, json[QString("Catalog")]);
    m_catalog_isSet = !json[QString("Catalog")].isNull() && m_catalog_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("Database")]);
    m_database_isSet = !json[QString("Database")].isNull() && m_database_isValid;

    m_table_isValid = ::OpenAPI::fromJsonValue(m_table, json[QString("Table")]);
    m_table_isSet = !json[QString("Table")].isNull() && m_table_isValid;

    m_table_with_columns_isValid = ::OpenAPI::fromJsonValue(m_table_with_columns, json[QString("TableWithColumns")]);
    m_table_with_columns_isSet = !json[QString("TableWithColumns")].isNull() && m_table_with_columns_isValid;

    m_data_location_isValid = ::OpenAPI::fromJsonValue(m_data_location, json[QString("DataLocation")]);
    m_data_location_isSet = !json[QString("DataLocation")].isNull() && m_data_location_isValid;

    m_data_cells_filter_isValid = ::OpenAPI::fromJsonValue(m_data_cells_filter, json[QString("DataCellsFilter")]);
    m_data_cells_filter_isSet = !json[QString("DataCellsFilter")].isNull() && m_data_cells_filter_isValid;

    m_lf_tag_isValid = ::OpenAPI::fromJsonValue(m_lf_tag, json[QString("LFTag")]);
    m_lf_tag_isSet = !json[QString("LFTag")].isNull() && m_lf_tag_isValid;

    m_lf_tag_policy_isValid = ::OpenAPI::fromJsonValue(m_lf_tag_policy, json[QString("LFTagPolicy")]);
    m_lf_tag_policy_isSet = !json[QString("LFTagPolicy")].isNull() && m_lf_tag_policy_isValid;
}

QString OAIRevokePermissionsRequest_Resource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevokePermissionsRequest_Resource::asJsonObject() const {
    QJsonObject obj;
    if (m_catalog.isSet()) {
        obj.insert(QString("Catalog"), ::OpenAPI::toJsonValue(m_catalog));
    }
    if (m_database.isSet()) {
        obj.insert(QString("Database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_table.isSet()) {
        obj.insert(QString("Table"), ::OpenAPI::toJsonValue(m_table));
    }
    if (m_table_with_columns.isSet()) {
        obj.insert(QString("TableWithColumns"), ::OpenAPI::toJsonValue(m_table_with_columns));
    }
    if (m_data_location.isSet()) {
        obj.insert(QString("DataLocation"), ::OpenAPI::toJsonValue(m_data_location));
    }
    if (m_data_cells_filter.isSet()) {
        obj.insert(QString("DataCellsFilter"), ::OpenAPI::toJsonValue(m_data_cells_filter));
    }
    if (m_lf_tag.isSet()) {
        obj.insert(QString("LFTag"), ::OpenAPI::toJsonValue(m_lf_tag));
    }
    if (m_lf_tag_policy.isSet()) {
        obj.insert(QString("LFTagPolicy"), ::OpenAPI::toJsonValue(m_lf_tag_policy));
    }
    return obj;
}

OAIObject OAIRevokePermissionsRequest_Resource::getCatalog() const {
    return m_catalog;
}
void OAIRevokePermissionsRequest_Resource::setCatalog(const OAIObject &catalog) {
    m_catalog = catalog;
    m_catalog_isSet = true;
}

bool OAIRevokePermissionsRequest_Resource::is_catalog_Set() const{
    return m_catalog_isSet;
}

bool OAIRevokePermissionsRequest_Resource::is_catalog_Valid() const{
    return m_catalog_isValid;
}

OAIAddLFTagsToResource_request_Resource_Database OAIRevokePermissionsRequest_Resource::getDatabase() const {
    return m_database;
}
void OAIRevokePermissionsRequest_Resource::setDatabase(const OAIAddLFTagsToResource_request_Resource_Database &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIRevokePermissionsRequest_Resource::is_database_Set() const{
    return m_database_isSet;
}

bool OAIRevokePermissionsRequest_Resource::is_database_Valid() const{
    return m_database_isValid;
}

OAIAddLFTagsToResource_request_Resource_Table OAIRevokePermissionsRequest_Resource::getTable() const {
    return m_table;
}
void OAIRevokePermissionsRequest_Resource::setTable(const OAIAddLFTagsToResource_request_Resource_Table &table) {
    m_table = table;
    m_table_isSet = true;
}

bool OAIRevokePermissionsRequest_Resource::is_table_Set() const{
    return m_table_isSet;
}

bool OAIRevokePermissionsRequest_Resource::is_table_Valid() const{
    return m_table_isValid;
}

OAIAddLFTagsToResource_request_Resource_TableWithColumns OAIRevokePermissionsRequest_Resource::getTableWithColumns() const {
    return m_table_with_columns;
}
void OAIRevokePermissionsRequest_Resource::setTableWithColumns(const OAIAddLFTagsToResource_request_Resource_TableWithColumns &table_with_columns) {
    m_table_with_columns = table_with_columns;
    m_table_with_columns_isSet = true;
}

bool OAIRevokePermissionsRequest_Resource::is_table_with_columns_Set() const{
    return m_table_with_columns_isSet;
}

bool OAIRevokePermissionsRequest_Resource::is_table_with_columns_Valid() const{
    return m_table_with_columns_isValid;
}

OAIAddLFTagsToResource_request_Resource_DataLocation OAIRevokePermissionsRequest_Resource::getDataLocation() const {
    return m_data_location;
}
void OAIRevokePermissionsRequest_Resource::setDataLocation(const OAIAddLFTagsToResource_request_Resource_DataLocation &data_location) {
    m_data_location = data_location;
    m_data_location_isSet = true;
}

bool OAIRevokePermissionsRequest_Resource::is_data_location_Set() const{
    return m_data_location_isSet;
}

bool OAIRevokePermissionsRequest_Resource::is_data_location_Valid() const{
    return m_data_location_isValid;
}

OAIAddLFTagsToResource_request_Resource_DataCellsFilter OAIRevokePermissionsRequest_Resource::getDataCellsFilter() const {
    return m_data_cells_filter;
}
void OAIRevokePermissionsRequest_Resource::setDataCellsFilter(const OAIAddLFTagsToResource_request_Resource_DataCellsFilter &data_cells_filter) {
    m_data_cells_filter = data_cells_filter;
    m_data_cells_filter_isSet = true;
}

bool OAIRevokePermissionsRequest_Resource::is_data_cells_filter_Set() const{
    return m_data_cells_filter_isSet;
}

bool OAIRevokePermissionsRequest_Resource::is_data_cells_filter_Valid() const{
    return m_data_cells_filter_isValid;
}

OAIAddLFTagsToResource_request_Resource_LFTag OAIRevokePermissionsRequest_Resource::getLfTag() const {
    return m_lf_tag;
}
void OAIRevokePermissionsRequest_Resource::setLfTag(const OAIAddLFTagsToResource_request_Resource_LFTag &lf_tag) {
    m_lf_tag = lf_tag;
    m_lf_tag_isSet = true;
}

bool OAIRevokePermissionsRequest_Resource::is_lf_tag_Set() const{
    return m_lf_tag_isSet;
}

bool OAIRevokePermissionsRequest_Resource::is_lf_tag_Valid() const{
    return m_lf_tag_isValid;
}

OAIAddLFTagsToResource_request_Resource_LFTagPolicy OAIRevokePermissionsRequest_Resource::getLfTagPolicy() const {
    return m_lf_tag_policy;
}
void OAIRevokePermissionsRequest_Resource::setLfTagPolicy(const OAIAddLFTagsToResource_request_Resource_LFTagPolicy &lf_tag_policy) {
    m_lf_tag_policy = lf_tag_policy;
    m_lf_tag_policy_isSet = true;
}

bool OAIRevokePermissionsRequest_Resource::is_lf_tag_policy_Set() const{
    return m_lf_tag_policy_isSet;
}

bool OAIRevokePermissionsRequest_Resource::is_lf_tag_policy_Valid() const{
    return m_lf_tag_policy_isValid;
}

bool OAIRevokePermissionsRequest_Resource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_catalog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_with_columns.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_cells_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lf_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lf_tag_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevokePermissionsRequest_Resource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
