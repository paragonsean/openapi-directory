/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsLakeFormation);
  }
}(this, function(expect, AwsLakeFormation) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsLakeFormation.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addLFTagsToResource', function() {
      it('should call addLFTagsToResource successfully', function(done) {
        //uncomment below and update the code to test addLFTagsToResource
        //instance.addLFTagsToResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assumeDecoratedRoleWithSAML', function() {
      it('should call assumeDecoratedRoleWithSAML successfully', function(done) {
        //uncomment below and update the code to test assumeDecoratedRoleWithSAML
        //instance.assumeDecoratedRoleWithSAML(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchGrantPermissions', function() {
      it('should call batchGrantPermissions successfully', function(done) {
        //uncomment below and update the code to test batchGrantPermissions
        //instance.batchGrantPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchRevokePermissions', function() {
      it('should call batchRevokePermissions successfully', function(done) {
        //uncomment below and update the code to test batchRevokePermissions
        //instance.batchRevokePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelTransaction', function() {
      it('should call cancelTransaction successfully', function(done) {
        //uncomment below and update the code to test cancelTransaction
        //instance.cancelTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('commitTransaction', function() {
      it('should call commitTransaction successfully', function(done) {
        //uncomment below and update the code to test commitTransaction
        //instance.commitTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDataCellsFilter', function() {
      it('should call createDataCellsFilter successfully', function(done) {
        //uncomment below and update the code to test createDataCellsFilter
        //instance.createDataCellsFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLFTag', function() {
      it('should call createLFTag successfully', function(done) {
        //uncomment below and update the code to test createLFTag
        //instance.createLFTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDataCellsFilter', function() {
      it('should call deleteDataCellsFilter successfully', function(done) {
        //uncomment below and update the code to test deleteDataCellsFilter
        //instance.deleteDataCellsFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLFTag', function() {
      it('should call deleteLFTag successfully', function(done) {
        //uncomment below and update the code to test deleteLFTag
        //instance.deleteLFTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteObjectsOnCancel', function() {
      it('should call deleteObjectsOnCancel successfully', function(done) {
        //uncomment below and update the code to test deleteObjectsOnCancel
        //instance.deleteObjectsOnCancel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deregisterResource', function() {
      it('should call deregisterResource successfully', function(done) {
        //uncomment below and update the code to test deregisterResource
        //instance.deregisterResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeResource', function() {
      it('should call describeResource successfully', function(done) {
        //uncomment below and update the code to test describeResource
        //instance.describeResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTransaction', function() {
      it('should call describeTransaction successfully', function(done) {
        //uncomment below and update the code to test describeTransaction
        //instance.describeTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('extendTransaction', function() {
      it('should call extendTransaction successfully', function(done) {
        //uncomment below and update the code to test extendTransaction
        //instance.extendTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataCellsFilter', function() {
      it('should call getDataCellsFilter successfully', function(done) {
        //uncomment below and update the code to test getDataCellsFilter
        //instance.getDataCellsFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDataLakeSettings', function() {
      it('should call getDataLakeSettings successfully', function(done) {
        //uncomment below and update the code to test getDataLakeSettings
        //instance.getDataLakeSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEffectivePermissionsForPath', function() {
      it('should call getEffectivePermissionsForPath successfully', function(done) {
        //uncomment below and update the code to test getEffectivePermissionsForPath
        //instance.getEffectivePermissionsForPath(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLFTag', function() {
      it('should call getLFTag successfully', function(done) {
        //uncomment below and update the code to test getLFTag
        //instance.getLFTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQueryState', function() {
      it('should call getQueryState successfully', function(done) {
        //uncomment below and update the code to test getQueryState
        //instance.getQueryState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getQueryStatistics', function() {
      it('should call getQueryStatistics successfully', function(done) {
        //uncomment below and update the code to test getQueryStatistics
        //instance.getQueryStatistics(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourceLFTags', function() {
      it('should call getResourceLFTags successfully', function(done) {
        //uncomment below and update the code to test getResourceLFTags
        //instance.getResourceLFTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTableObjects', function() {
      it('should call getTableObjects successfully', function(done) {
        //uncomment below and update the code to test getTableObjects
        //instance.getTableObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTemporaryGluePartitionCredentials', function() {
      it('should call getTemporaryGluePartitionCredentials successfully', function(done) {
        //uncomment below and update the code to test getTemporaryGluePartitionCredentials
        //instance.getTemporaryGluePartitionCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTemporaryGlueTableCredentials', function() {
      it('should call getTemporaryGlueTableCredentials successfully', function(done) {
        //uncomment below and update the code to test getTemporaryGlueTableCredentials
        //instance.getTemporaryGlueTableCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkUnitResults', function() {
      it('should call getWorkUnitResults successfully', function(done) {
        //uncomment below and update the code to test getWorkUnitResults
        //instance.getWorkUnitResults(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWorkUnits', function() {
      it('should call getWorkUnits successfully', function(done) {
        //uncomment below and update the code to test getWorkUnits
        //instance.getWorkUnits(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('grantPermissions', function() {
      it('should call grantPermissions successfully', function(done) {
        //uncomment below and update the code to test grantPermissions
        //instance.grantPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDataCellsFilter', function() {
      it('should call listDataCellsFilter successfully', function(done) {
        //uncomment below and update the code to test listDataCellsFilter
        //instance.listDataCellsFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLFTags', function() {
      it('should call listLFTags successfully', function(done) {
        //uncomment below and update the code to test listLFTags
        //instance.listLFTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPermissions', function() {
      it('should call listPermissions successfully', function(done) {
        //uncomment below and update the code to test listPermissions
        //instance.listPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listResources', function() {
      it('should call listResources successfully', function(done) {
        //uncomment below and update the code to test listResources
        //instance.listResources(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTableStorageOptimizers', function() {
      it('should call listTableStorageOptimizers successfully', function(done) {
        //uncomment below and update the code to test listTableStorageOptimizers
        //instance.listTableStorageOptimizers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTransactions', function() {
      it('should call listTransactions successfully', function(done) {
        //uncomment below and update the code to test listTransactions
        //instance.listTransactions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putDataLakeSettings', function() {
      it('should call putDataLakeSettings successfully', function(done) {
        //uncomment below and update the code to test putDataLakeSettings
        //instance.putDataLakeSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('registerResource', function() {
      it('should call registerResource successfully', function(done) {
        //uncomment below and update the code to test registerResource
        //instance.registerResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeLFTagsFromResource', function() {
      it('should call removeLFTagsFromResource successfully', function(done) {
        //uncomment below and update the code to test removeLFTagsFromResource
        //instance.removeLFTagsFromResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokePermissions', function() {
      it('should call revokePermissions successfully', function(done) {
        //uncomment below and update the code to test revokePermissions
        //instance.revokePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchDatabasesByLFTags', function() {
      it('should call searchDatabasesByLFTags successfully', function(done) {
        //uncomment below and update the code to test searchDatabasesByLFTags
        //instance.searchDatabasesByLFTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchTablesByLFTags', function() {
      it('should call searchTablesByLFTags successfully', function(done) {
        //uncomment below and update the code to test searchTablesByLFTags
        //instance.searchTablesByLFTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startQueryPlanning', function() {
      it('should call startQueryPlanning successfully', function(done) {
        //uncomment below and update the code to test startQueryPlanning
        //instance.startQueryPlanning(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startTransaction', function() {
      it('should call startTransaction successfully', function(done) {
        //uncomment below and update the code to test startTransaction
        //instance.startTransaction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDataCellsFilter', function() {
      it('should call updateDataCellsFilter successfully', function(done) {
        //uncomment below and update the code to test updateDataCellsFilter
        //instance.updateDataCellsFilter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLFTag', function() {
      it('should call updateLFTag successfully', function(done) {
        //uncomment below and update the code to test updateLFTag
        //instance.updateLFTag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateResource', function() {
      it('should call updateResource successfully', function(done) {
        //uncomment below and update the code to test updateResource
        //instance.updateResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTableObjects', function() {
      it('should call updateTableObjects successfully', function(done) {
        //uncomment below and update the code to test updateTableObjects
        //instance.updateTableObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateTableStorageOptimizer', function() {
      it('should call updateTableStorageOptimizer successfully', function(done) {
        //uncomment below and update the code to test updateTableStorageOptimizer
        //instance.updateTableStorageOptimizer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
