/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AddLFTagsToResourceRequestResource from './AddLFTagsToResourceRequestResource';
import GrantPermissionsRequestPrincipal from './GrantPermissionsRequestPrincipal';
import Permission from './Permission';

/**
 * The GrantPermissionsRequest model module.
 * @module model/GrantPermissionsRequest
 * @version 2017-03-31
 */
class GrantPermissionsRequest {
    /**
     * Constructs a new <code>GrantPermissionsRequest</code>.
     * @alias module:model/GrantPermissionsRequest
     * @param principal {module:model/GrantPermissionsRequestPrincipal} 
     * @param resource {module:model/AddLFTagsToResourceRequestResource} 
     * @param permissions {Array.<module:model/Permission>} The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. 
     */
    constructor(principal, resource, permissions) { 
        
        GrantPermissionsRequest.initialize(this, principal, resource, permissions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, principal, resource, permissions) { 
        obj['Principal'] = principal;
        obj['Resource'] = resource;
        obj['Permissions'] = permissions;
    }

    /**
     * Constructs a <code>GrantPermissionsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GrantPermissionsRequest} obj Optional instance to populate.
     * @return {module:model/GrantPermissionsRequest} The populated <code>GrantPermissionsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GrantPermissionsRequest();

            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('Principal')) {
                obj['Principal'] = GrantPermissionsRequestPrincipal.constructFromObject(data['Principal']);
            }
            if (data.hasOwnProperty('Resource')) {
                obj['Resource'] = AddLFTagsToResourceRequestResource.constructFromObject(data['Resource']);
            }
            if (data.hasOwnProperty('Permissions')) {
                obj['Permissions'] = ApiClient.convertToType(data['Permissions'], [Permission]);
            }
            if (data.hasOwnProperty('PermissionsWithGrantOption')) {
                obj['PermissionsWithGrantOption'] = ApiClient.convertToType(data['PermissionsWithGrantOption'], [Permission]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GrantPermissionsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GrantPermissionsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GrantPermissionsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CatalogId'] && !(typeof data['CatalogId'] === 'string' || data['CatalogId'] instanceof String)) {
            throw new Error("Expected the field `CatalogId` to be a primitive type in the JSON string but got " + data['CatalogId']);
        }
        // validate the optional field `Principal`
        if (data['Principal']) { // data not null
          GrantPermissionsRequestPrincipal.validateJSON(data['Principal']);
        }
        // validate the optional field `Resource`
        if (data['Resource']) { // data not null
          AddLFTagsToResourceRequestResource.validateJSON(data['Resource']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Permissions'])) {
            throw new Error("Expected the field `Permissions` to be an array in the JSON data but got " + data['Permissions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['PermissionsWithGrantOption'])) {
            throw new Error("Expected the field `PermissionsWithGrantOption` to be an array in the JSON data but got " + data['PermissionsWithGrantOption']);
        }

        return true;
    }


}

GrantPermissionsRequest.RequiredProperties = ["Principal", "Resource", "Permissions"];

/**
 * The identifier for the Data Catalog. By default, the account ID. The Data Catalog is the persistent metadata store. It contains database definitions, table definitions, and other control information to manage your Lake Formation environment. 
 * @member {String} CatalogId
 */
GrantPermissionsRequest.prototype['CatalogId'] = undefined;

/**
 * @member {module:model/GrantPermissionsRequestPrincipal} Principal
 */
GrantPermissionsRequest.prototype['Principal'] = undefined;

/**
 * @member {module:model/AddLFTagsToResourceRequestResource} Resource
 */
GrantPermissionsRequest.prototype['Resource'] = undefined;

/**
 * The permissions granted to the principal on the resource. Lake Formation defines privileges to grant and revoke access to metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3. Lake Formation requires that each principal be authorized to perform a specific task on Lake Formation resources. 
 * @member {Array.<module:model/Permission>} Permissions
 */
GrantPermissionsRequest.prototype['Permissions'] = undefined;

/**
 * Indicates a list of the granted permissions that the principal may pass to other users. These permissions may only be a subset of the permissions granted in the <code>Privileges</code>.
 * @member {Array.<module:model/Permission>} PermissionsWithGrantOption
 */
GrantPermissionsRequest.prototype['PermissionsWithGrantOption'] = undefined;






export default GrantPermissionsRequest;

