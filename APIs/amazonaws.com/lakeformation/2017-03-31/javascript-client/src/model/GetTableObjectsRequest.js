/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetTableObjectsRequest model module.
 * @module model/GetTableObjectsRequest
 * @version 2017-03-31
 */
class GetTableObjectsRequest {
    /**
     * Constructs a new <code>GetTableObjectsRequest</code>.
     * @alias module:model/GetTableObjectsRequest
     * @param databaseName {String} The database containing the governed table.
     * @param tableName {String} The governed table for which to retrieve objects.
     */
    constructor(databaseName, tableName) { 
        
        GetTableObjectsRequest.initialize(this, databaseName, tableName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseName, tableName) { 
        obj['DatabaseName'] = databaseName;
        obj['TableName'] = tableName;
    }

    /**
     * Constructs a <code>GetTableObjectsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetTableObjectsRequest} obj Optional instance to populate.
     * @return {module:model/GetTableObjectsRequest} The populated <code>GetTableObjectsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetTableObjectsRequest();

            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('TransactionId')) {
                obj['TransactionId'] = ApiClient.convertToType(data['TransactionId'], 'String');
            }
            if (data.hasOwnProperty('QueryAsOfTime')) {
                obj['QueryAsOfTime'] = ApiClient.convertToType(data['QueryAsOfTime'], 'Date');
            }
            if (data.hasOwnProperty('PartitionPredicate')) {
                obj['PartitionPredicate'] = ApiClient.convertToType(data['PartitionPredicate'], 'String');
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetTableObjectsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetTableObjectsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetTableObjectsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CatalogId'] && !(typeof data['CatalogId'] === 'string' || data['CatalogId'] instanceof String)) {
            throw new Error("Expected the field `CatalogId` to be a primitive type in the JSON string but got " + data['CatalogId']);
        }
        // ensure the json data is a string
        if (data['DatabaseName'] && !(typeof data['DatabaseName'] === 'string' || data['DatabaseName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseName` to be a primitive type in the JSON string but got " + data['DatabaseName']);
        }
        // ensure the json data is a string
        if (data['TableName'] && !(typeof data['TableName'] === 'string' || data['TableName'] instanceof String)) {
            throw new Error("Expected the field `TableName` to be a primitive type in the JSON string but got " + data['TableName']);
        }
        // ensure the json data is a string
        if (data['TransactionId'] && !(typeof data['TransactionId'] === 'string' || data['TransactionId'] instanceof String)) {
            throw new Error("Expected the field `TransactionId` to be a primitive type in the JSON string but got " + data['TransactionId']);
        }
        // ensure the json data is a string
        if (data['PartitionPredicate'] && !(typeof data['PartitionPredicate'] === 'string' || data['PartitionPredicate'] instanceof String)) {
            throw new Error("Expected the field `PartitionPredicate` to be a primitive type in the JSON string but got " + data['PartitionPredicate']);
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }

        return true;
    }


}

GetTableObjectsRequest.RequiredProperties = ["DatabaseName", "TableName"];

/**
 * The catalog containing the governed table. Defaults to the callerâ€™s account.
 * @member {String} CatalogId
 */
GetTableObjectsRequest.prototype['CatalogId'] = undefined;

/**
 * The database containing the governed table.
 * @member {String} DatabaseName
 */
GetTableObjectsRequest.prototype['DatabaseName'] = undefined;

/**
 * The governed table for which to retrieve objects.
 * @member {String} TableName
 */
GetTableObjectsRequest.prototype['TableName'] = undefined;

/**
 * The transaction ID at which to read the governed table contents. If this transaction has aborted, an error is returned. If not set, defaults to the most recent committed transaction. Cannot be specified along with <code>QueryAsOfTime</code>.
 * @member {String} TransactionId
 */
GetTableObjectsRequest.prototype['TransactionId'] = undefined;

/**
 * The time as of when to read the governed table contents. If not set, the most recent transaction commit time is used. Cannot be specified along with <code>TransactionId</code>.
 * @member {Date} QueryAsOfTime
 */
GetTableObjectsRequest.prototype['QueryAsOfTime'] = undefined;

/**
 * <p>A predicate to filter the objects returned based on the partition keys defined in the governed table.</p> <ul> <li> <p>The comparison operators supported are: =, &gt;, &lt;, &gt;=, &lt;=</p> </li> <li> <p>The logical operators supported are: AND</p> </li> <li> <p>The data types supported are integer, long, date(yyyy-MM-dd), timestamp(yyyy-MM-dd HH:mm:ssXXX or yyyy-MM-dd HH:mm:ss\"), string and decimal.</p> </li> </ul>
 * @member {String} PartitionPredicate
 */
GetTableObjectsRequest.prototype['PartitionPredicate'] = undefined;

/**
 * Specifies how many values to return in a page.
 * @member {Number} MaxResults
 */
GetTableObjectsRequest.prototype['MaxResults'] = undefined;

/**
 * A continuation token if this is not the first call to retrieve these objects.
 * @member {String} NextToken
 */
GetTableObjectsRequest.prototype['NextToken'] = undefined;






export default GetTableObjectsRequest;

