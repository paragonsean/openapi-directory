/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListTransactionsRequest model module.
 * @module model/ListTransactionsRequest
 * @version 2017-03-31
 */
class ListTransactionsRequest {
    /**
     * Constructs a new <code>ListTransactionsRequest</code>.
     * @alias module:model/ListTransactionsRequest
     */
    constructor() { 
        
        ListTransactionsRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ListTransactionsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListTransactionsRequest} obj Optional instance to populate.
     * @return {module:model/ListTransactionsRequest} The populated <code>ListTransactionsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListTransactionsRequest();

            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('StatusFilter')) {
                obj['StatusFilter'] = ApiClient.convertToType(data['StatusFilter'], 'String');
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListTransactionsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListTransactionsRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['CatalogId'] && !(typeof data['CatalogId'] === 'string' || data['CatalogId'] instanceof String)) {
            throw new Error("Expected the field `CatalogId` to be a primitive type in the JSON string but got " + data['CatalogId']);
        }
        // ensure the json data is a string
        if (data['StatusFilter'] && !(typeof data['StatusFilter'] === 'string' || data['StatusFilter'] instanceof String)) {
            throw new Error("Expected the field `StatusFilter` to be a primitive type in the JSON string but got " + data['StatusFilter']);
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }

        return true;
    }


}



/**
 * The catalog for which to list transactions. Defaults to the account ID of the caller.
 * @member {String} CatalogId
 */
ListTransactionsRequest.prototype['CatalogId'] = undefined;

/**
 *  A filter indicating the status of transactions to return. Options are ALL | COMPLETED | COMMITTED | ABORTED | ACTIVE. The default is <code>ALL</code>.
 * @member {module:model/ListTransactionsRequest.StatusFilterEnum} StatusFilter
 */
ListTransactionsRequest.prototype['StatusFilter'] = undefined;

/**
 * The maximum number of transactions to return in a single call.
 * @member {Number} MaxResults
 */
ListTransactionsRequest.prototype['MaxResults'] = undefined;

/**
 * A continuation token if this is not the first call to retrieve transactions.
 * @member {String} NextToken
 */
ListTransactionsRequest.prototype['NextToken'] = undefined;





/**
 * Allowed values for the <code>StatusFilter</code> property.
 * @enum {String}
 * @readonly
 */
ListTransactionsRequest['StatusFilterEnum'] = {

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL",

    /**
     * value: "COMPLETED"
     * @const
     */
    "COMPLETED": "COMPLETED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "COMMITTED"
     * @const
     */
    "COMMITTED": "COMMITTED",

    /**
     * value: "ABORTED"
     * @const
     */
    "ABORTED": "ABORTED"
};



export default ListTransactionsRequest;

