/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WriteOperation from './WriteOperation';

/**
 * The UpdateTableObjectsRequest model module.
 * @module model/UpdateTableObjectsRequest
 * @version 2017-03-31
 */
class UpdateTableObjectsRequest {
    /**
     * Constructs a new <code>UpdateTableObjectsRequest</code>.
     * @alias module:model/UpdateTableObjectsRequest
     * @param databaseName {String} The database containing the governed table to update.
     * @param tableName {String} The governed table to update.
     * @param writeOperations {Array.<module:model/WriteOperation>} A list of <code>WriteOperation</code> objects that define an object to add to or delete from the manifest for a governed table.
     */
    constructor(databaseName, tableName, writeOperations) { 
        
        UpdateTableObjectsRequest.initialize(this, databaseName, tableName, writeOperations);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseName, tableName, writeOperations) { 
        obj['DatabaseName'] = databaseName;
        obj['TableName'] = tableName;
        obj['WriteOperations'] = writeOperations;
    }

    /**
     * Constructs a <code>UpdateTableObjectsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateTableObjectsRequest} obj Optional instance to populate.
     * @return {module:model/UpdateTableObjectsRequest} The populated <code>UpdateTableObjectsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateTableObjectsRequest();

            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('TransactionId')) {
                obj['TransactionId'] = ApiClient.convertToType(data['TransactionId'], 'String');
            }
            if (data.hasOwnProperty('WriteOperations')) {
                obj['WriteOperations'] = ApiClient.convertToType(data['WriteOperations'], [WriteOperation]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateTableObjectsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateTableObjectsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdateTableObjectsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CatalogId'] && !(typeof data['CatalogId'] === 'string' || data['CatalogId'] instanceof String)) {
            throw new Error("Expected the field `CatalogId` to be a primitive type in the JSON string but got " + data['CatalogId']);
        }
        // ensure the json data is a string
        if (data['DatabaseName'] && !(typeof data['DatabaseName'] === 'string' || data['DatabaseName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseName` to be a primitive type in the JSON string but got " + data['DatabaseName']);
        }
        // ensure the json data is a string
        if (data['TableName'] && !(typeof data['TableName'] === 'string' || data['TableName'] instanceof String)) {
            throw new Error("Expected the field `TableName` to be a primitive type in the JSON string but got " + data['TableName']);
        }
        // ensure the json data is a string
        if (data['TransactionId'] && !(typeof data['TransactionId'] === 'string' || data['TransactionId'] instanceof String)) {
            throw new Error("Expected the field `TransactionId` to be a primitive type in the JSON string but got " + data['TransactionId']);
        }
        if (data['WriteOperations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['WriteOperations'])) {
                throw new Error("Expected the field `WriteOperations` to be an array in the JSON data but got " + data['WriteOperations']);
            }
            // validate the optional field `WriteOperations` (array)
            for (const item of data['WriteOperations']) {
                WriteOperation.validateJSON(item);
            };
        }

        return true;
    }


}

UpdateTableObjectsRequest.RequiredProperties = ["DatabaseName", "TableName", "WriteOperations"];

/**
 * The catalog containing the governed table to update. Defaults to the callerâ€™s account ID.
 * @member {String} CatalogId
 */
UpdateTableObjectsRequest.prototype['CatalogId'] = undefined;

/**
 * The database containing the governed table to update.
 * @member {String} DatabaseName
 */
UpdateTableObjectsRequest.prototype['DatabaseName'] = undefined;

/**
 * The governed table to update.
 * @member {String} TableName
 */
UpdateTableObjectsRequest.prototype['TableName'] = undefined;

/**
 * The transaction at which to do the write.
 * @member {String} TransactionId
 */
UpdateTableObjectsRequest.prototype['TransactionId'] = undefined;

/**
 * A list of <code>WriteOperation</code> objects that define an object to add to or delete from the manifest for a governed table.
 * @member {Array.<module:model/WriteOperation>} WriteOperations
 */
UpdateTableObjectsRequest.prototype['WriteOperations'] = undefined;






export default UpdateTableObjectsRequest;

