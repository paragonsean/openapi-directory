/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TaggedTableTable from './TaggedTableTable';

/**
 * The TaggedTable model module.
 * @module model/TaggedTable
 * @version 2017-03-31
 */
class TaggedTable {
    /**
     * Constructs a new <code>TaggedTable</code>.
     * A structure describing a table resource with LF-tags.
     * @alias module:model/TaggedTable
     */
    constructor() { 
        
        TaggedTable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TaggedTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaggedTable} obj Optional instance to populate.
     * @return {module:model/TaggedTable} The populated <code>TaggedTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaggedTable();

            if (data.hasOwnProperty('Table')) {
                obj['Table'] = TaggedTableTable.constructFromObject(data['Table']);
            }
            if (data.hasOwnProperty('LFTagOnDatabase')) {
                obj['LFTagOnDatabase'] = ApiClient.convertToType(data['LFTagOnDatabase'], Array);
            }
            if (data.hasOwnProperty('LFTagsOnTable')) {
                obj['LFTagsOnTable'] = ApiClient.convertToType(data['LFTagsOnTable'], Array);
            }
            if (data.hasOwnProperty('LFTagsOnColumns')) {
                obj['LFTagsOnColumns'] = ApiClient.convertToType(data['LFTagsOnColumns'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaggedTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaggedTable</code>.
     */
    static validateJSON(data) {
        // validate the optional field `Table`
        if (data['Table']) { // data not null
          TaggedTableTable.validateJSON(data['Table']);
        }
        // validate the optional field `LFTagOnDatabase`
        if (data['LFTagOnDatabase']) { // data not null
          Array.validateJSON(data['LFTagOnDatabase']);
        }
        // validate the optional field `LFTagsOnTable`
        if (data['LFTagsOnTable']) { // data not null
          Array.validateJSON(data['LFTagsOnTable']);
        }
        // validate the optional field `LFTagsOnColumns`
        if (data['LFTagsOnColumns']) { // data not null
          Array.validateJSON(data['LFTagsOnColumns']);
        }

        return true;
    }


}



/**
 * @member {module:model/TaggedTableTable} Table
 */
TaggedTable.prototype['Table'] = undefined;

/**
 * @member {Array} LFTagOnDatabase
 */
TaggedTable.prototype['LFTagOnDatabase'] = undefined;

/**
 * @member {Array} LFTagsOnTable
 */
TaggedTable.prototype['LFTagsOnTable'] = undefined;

/**
 * @member {Array} LFTagsOnColumns
 */
TaggedTable.prototype['LFTagsOnColumns'] = undefined;






export default TaggedTable;

