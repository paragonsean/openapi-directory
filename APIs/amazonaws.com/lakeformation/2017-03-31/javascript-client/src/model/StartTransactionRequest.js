/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StartTransactionRequest model module.
 * @module model/StartTransactionRequest
 * @version 2017-03-31
 */
class StartTransactionRequest {
    /**
     * Constructs a new <code>StartTransactionRequest</code>.
     * @alias module:model/StartTransactionRequest
     */
    constructor() { 
        
        StartTransactionRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StartTransactionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTransactionRequest} obj Optional instance to populate.
     * @return {module:model/StartTransactionRequest} The populated <code>StartTransactionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTransactionRequest();

            if (data.hasOwnProperty('TransactionType')) {
                obj['TransactionType'] = ApiClient.convertToType(data['TransactionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTransactionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTransactionRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['TransactionType'] && !(typeof data['TransactionType'] === 'string' || data['TransactionType'] instanceof String)) {
            throw new Error("Expected the field `TransactionType` to be a primitive type in the JSON string but got " + data['TransactionType']);
        }

        return true;
    }


}



/**
 * Indicates whether this transaction should be read only or read and write. Writes made using a read-only transaction ID will be rejected. Read-only transactions do not need to be committed. 
 * @member {module:model/StartTransactionRequest.TransactionTypeEnum} TransactionType
 */
StartTransactionRequest.prototype['TransactionType'] = undefined;





/**
 * Allowed values for the <code>TransactionType</code> property.
 * @enum {String}
 * @readonly
 */
StartTransactionRequest['TransactionTypeEnum'] = {

    /**
     * value: "READ_AND_WRITE"
     * @const
     */
    "AND_WRITE": "READ_AND_WRITE",

    /**
     * value: "READ_ONLY"
     * @const
     */
    "ONLY": "READ_ONLY"
};



export default StartTransactionRequest;

