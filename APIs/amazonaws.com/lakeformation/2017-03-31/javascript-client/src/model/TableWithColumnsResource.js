/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableWithColumnsResourceColumnWildcard from './TableWithColumnsResourceColumnWildcard';

/**
 * The TableWithColumnsResource model module.
 * @module model/TableWithColumnsResource
 * @version 2017-03-31
 */
class TableWithColumnsResource {
    /**
     * Constructs a new <code>TableWithColumnsResource</code>.
     * &lt;p&gt;A structure for a table with columns object. This object is only used when granting a SELECT permission.&lt;/p&gt; &lt;p&gt;This object must take a value for at least one of &lt;code&gt;ColumnsNames&lt;/code&gt;, &lt;code&gt;ColumnsIndexes&lt;/code&gt;, or &lt;code&gt;ColumnsWildcard&lt;/code&gt;.&lt;/p&gt;
     * @alias module:model/TableWithColumnsResource
     * @param databaseName {String} 
     * @param name {String} 
     */
    constructor(databaseName, name) { 
        
        TableWithColumnsResource.initialize(this, databaseName, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseName, name) { 
        obj['DatabaseName'] = databaseName;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>TableWithColumnsResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableWithColumnsResource} obj Optional instance to populate.
     * @return {module:model/TableWithColumnsResource} The populated <code>TableWithColumnsResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableWithColumnsResource();

            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('ColumnNames')) {
                obj['ColumnNames'] = ApiClient.convertToType(data['ColumnNames'], Array);
            }
            if (data.hasOwnProperty('ColumnWildcard')) {
                obj['ColumnWildcard'] = TableWithColumnsResourceColumnWildcard.constructFromObject(data['ColumnWildcard']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableWithColumnsResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableWithColumnsResource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TableWithColumnsResource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CatalogId`
        if (data['CatalogId']) { // data not null
          String.validateJSON(data['CatalogId']);
        }
        // validate the optional field `DatabaseName`
        if (data['DatabaseName']) { // data not null
          String.validateJSON(data['DatabaseName']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `ColumnNames`
        if (data['ColumnNames']) { // data not null
          Array.validateJSON(data['ColumnNames']);
        }
        // validate the optional field `ColumnWildcard`
        if (data['ColumnWildcard']) { // data not null
          TableWithColumnsResourceColumnWildcard.validateJSON(data['ColumnWildcard']);
        }

        return true;
    }


}

TableWithColumnsResource.RequiredProperties = ["DatabaseName", "Name"];

/**
 * @member {String} CatalogId
 */
TableWithColumnsResource.prototype['CatalogId'] = undefined;

/**
 * @member {String} DatabaseName
 */
TableWithColumnsResource.prototype['DatabaseName'] = undefined;

/**
 * @member {String} Name
 */
TableWithColumnsResource.prototype['Name'] = undefined;

/**
 * @member {Array} ColumnNames
 */
TableWithColumnsResource.prototype['ColumnNames'] = undefined;

/**
 * @member {module:model/TableWithColumnsResourceColumnWildcard} ColumnWildcard
 */
TableWithColumnsResource.prototype['ColumnWildcard'] = undefined;






export default TableWithColumnsResource;

