/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VirtualObject from './VirtualObject';

/**
 * The DeleteObjectsOnCancelRequest model module.
 * @module model/DeleteObjectsOnCancelRequest
 * @version 2017-03-31
 */
class DeleteObjectsOnCancelRequest {
    /**
     * Constructs a new <code>DeleteObjectsOnCancelRequest</code>.
     * @alias module:model/DeleteObjectsOnCancelRequest
     * @param databaseName {String} The database that contains the governed table.
     * @param tableName {String} The name of the governed table.
     * @param transactionId {String} ID of the transaction that the writes occur in.
     * @param objects {Array.<module:model/VirtualObject>} A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.
     */
    constructor(databaseName, tableName, transactionId, objects) { 
        
        DeleteObjectsOnCancelRequest.initialize(this, databaseName, tableName, transactionId, objects);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseName, tableName, transactionId, objects) { 
        obj['DatabaseName'] = databaseName;
        obj['TableName'] = tableName;
        obj['TransactionId'] = transactionId;
        obj['Objects'] = objects;
    }

    /**
     * Constructs a <code>DeleteObjectsOnCancelRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DeleteObjectsOnCancelRequest} obj Optional instance to populate.
     * @return {module:model/DeleteObjectsOnCancelRequest} The populated <code>DeleteObjectsOnCancelRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DeleteObjectsOnCancelRequest();

            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('TransactionId')) {
                obj['TransactionId'] = ApiClient.convertToType(data['TransactionId'], 'String');
            }
            if (data.hasOwnProperty('Objects')) {
                obj['Objects'] = ApiClient.convertToType(data['Objects'], [VirtualObject]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DeleteObjectsOnCancelRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DeleteObjectsOnCancelRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DeleteObjectsOnCancelRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CatalogId'] && !(typeof data['CatalogId'] === 'string' || data['CatalogId'] instanceof String)) {
            throw new Error("Expected the field `CatalogId` to be a primitive type in the JSON string but got " + data['CatalogId']);
        }
        // ensure the json data is a string
        if (data['DatabaseName'] && !(typeof data['DatabaseName'] === 'string' || data['DatabaseName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseName` to be a primitive type in the JSON string but got " + data['DatabaseName']);
        }
        // ensure the json data is a string
        if (data['TableName'] && !(typeof data['TableName'] === 'string' || data['TableName'] instanceof String)) {
            throw new Error("Expected the field `TableName` to be a primitive type in the JSON string but got " + data['TableName']);
        }
        // ensure the json data is a string
        if (data['TransactionId'] && !(typeof data['TransactionId'] === 'string' || data['TransactionId'] instanceof String)) {
            throw new Error("Expected the field `TransactionId` to be a primitive type in the JSON string but got " + data['TransactionId']);
        }
        if (data['Objects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Objects'])) {
                throw new Error("Expected the field `Objects` to be an array in the JSON data but got " + data['Objects']);
            }
            // validate the optional field `Objects` (array)
            for (const item of data['Objects']) {
                VirtualObject.validateJSON(item);
            };
        }

        return true;
    }


}

DeleteObjectsOnCancelRequest.RequiredProperties = ["DatabaseName", "TableName", "TransactionId", "Objects"];

/**
 * The Glue data catalog that contains the governed table. Defaults to the current account ID.
 * @member {String} CatalogId
 */
DeleteObjectsOnCancelRequest.prototype['CatalogId'] = undefined;

/**
 * The database that contains the governed table.
 * @member {String} DatabaseName
 */
DeleteObjectsOnCancelRequest.prototype['DatabaseName'] = undefined;

/**
 * The name of the governed table.
 * @member {String} TableName
 */
DeleteObjectsOnCancelRequest.prototype['TableName'] = undefined;

/**
 * ID of the transaction that the writes occur in.
 * @member {String} TransactionId
 */
DeleteObjectsOnCancelRequest.prototype['TransactionId'] = undefined;

/**
 * A list of VirtualObject structures, which indicates the Amazon S3 objects to be deleted if the transaction cancels.
 * @member {Array.<module:model/VirtualObject>} Objects
 */
DeleteObjectsOnCancelRequest.prototype['Objects'] = undefined;






export default DeleteObjectsOnCancelRequest;

