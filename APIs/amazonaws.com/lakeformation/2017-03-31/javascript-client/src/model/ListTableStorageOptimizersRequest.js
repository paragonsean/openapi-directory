/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ListTableStorageOptimizersRequest model module.
 * @module model/ListTableStorageOptimizersRequest
 * @version 2017-03-31
 */
class ListTableStorageOptimizersRequest {
    /**
     * Constructs a new <code>ListTableStorageOptimizersRequest</code>.
     * @alias module:model/ListTableStorageOptimizersRequest
     * @param databaseName {String} Name of the database where the table is present.
     * @param tableName {String} Name of the table.
     */
    constructor(databaseName, tableName) { 
        
        ListTableStorageOptimizersRequest.initialize(this, databaseName, tableName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseName, tableName) { 
        obj['DatabaseName'] = databaseName;
        obj['TableName'] = tableName;
    }

    /**
     * Constructs a <code>ListTableStorageOptimizersRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ListTableStorageOptimizersRequest} obj Optional instance to populate.
     * @return {module:model/ListTableStorageOptimizersRequest} The populated <code>ListTableStorageOptimizersRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ListTableStorageOptimizersRequest();

            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('StorageOptimizerType')) {
                obj['StorageOptimizerType'] = ApiClient.convertToType(data['StorageOptimizerType'], 'String');
            }
            if (data.hasOwnProperty('MaxResults')) {
                obj['MaxResults'] = ApiClient.convertToType(data['MaxResults'], 'Number');
            }
            if (data.hasOwnProperty('NextToken')) {
                obj['NextToken'] = ApiClient.convertToType(data['NextToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ListTableStorageOptimizersRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ListTableStorageOptimizersRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ListTableStorageOptimizersRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CatalogId'] && !(typeof data['CatalogId'] === 'string' || data['CatalogId'] instanceof String)) {
            throw new Error("Expected the field `CatalogId` to be a primitive type in the JSON string but got " + data['CatalogId']);
        }
        // ensure the json data is a string
        if (data['DatabaseName'] && !(typeof data['DatabaseName'] === 'string' || data['DatabaseName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseName` to be a primitive type in the JSON string but got " + data['DatabaseName']);
        }
        // ensure the json data is a string
        if (data['TableName'] && !(typeof data['TableName'] === 'string' || data['TableName'] instanceof String)) {
            throw new Error("Expected the field `TableName` to be a primitive type in the JSON string but got " + data['TableName']);
        }
        // ensure the json data is a string
        if (data['StorageOptimizerType'] && !(typeof data['StorageOptimizerType'] === 'string' || data['StorageOptimizerType'] instanceof String)) {
            throw new Error("Expected the field `StorageOptimizerType` to be a primitive type in the JSON string but got " + data['StorageOptimizerType']);
        }
        // ensure the json data is a string
        if (data['NextToken'] && !(typeof data['NextToken'] === 'string' || data['NextToken'] instanceof String)) {
            throw new Error("Expected the field `NextToken` to be a primitive type in the JSON string but got " + data['NextToken']);
        }

        return true;
    }


}

ListTableStorageOptimizersRequest.RequiredProperties = ["DatabaseName", "TableName"];

/**
 * The Catalog ID of the table.
 * @member {String} CatalogId
 */
ListTableStorageOptimizersRequest.prototype['CatalogId'] = undefined;

/**
 * Name of the database where the table is present.
 * @member {String} DatabaseName
 */
ListTableStorageOptimizersRequest.prototype['DatabaseName'] = undefined;

/**
 * Name of the table.
 * @member {String} TableName
 */
ListTableStorageOptimizersRequest.prototype['TableName'] = undefined;

/**
 * The specific type of storage optimizers to list. The supported value is <code>compaction</code>.
 * @member {module:model/ListTableStorageOptimizersRequest.StorageOptimizerTypeEnum} StorageOptimizerType
 */
ListTableStorageOptimizersRequest.prototype['StorageOptimizerType'] = undefined;

/**
 * The number of storage optimizers to return on each call.
 * @member {Number} MaxResults
 */
ListTableStorageOptimizersRequest.prototype['MaxResults'] = undefined;

/**
 * A continuation token, if this is a continuation call.
 * @member {String} NextToken
 */
ListTableStorageOptimizersRequest.prototype['NextToken'] = undefined;





/**
 * Allowed values for the <code>StorageOptimizerType</code> property.
 * @enum {String}
 * @readonly
 */
ListTableStorageOptimizersRequest['StorageOptimizerTypeEnum'] = {

    /**
     * value: "COMPACTION"
     * @const
     */
    "COMPACTION": "COMPACTION",

    /**
     * value: "GARBAGE_COLLECTION"
     * @const
     */
    "GARBAGE_COLLECTION": "GARBAGE_COLLECTION",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL"
};



export default ListTableStorageOptimizersRequest;

