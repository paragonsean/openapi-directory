/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssumeDecoratedRoleWithSAMLRequest model module.
 * @module model/AssumeDecoratedRoleWithSAMLRequest
 * @version 2017-03-31
 */
class AssumeDecoratedRoleWithSAMLRequest {
    /**
     * Constructs a new <code>AssumeDecoratedRoleWithSAMLRequest</code>.
     * @alias module:model/AssumeDecoratedRoleWithSAMLRequest
     * @param sAMLAssertion {String} A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.
     * @param roleArn {String} The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as <code>GetTemporaryTableCredentials</code>. The caller must also have iam:PassRole permission on this role. 
     * @param principalArn {String} The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.
     */
    constructor(sAMLAssertion, roleArn, principalArn) { 
        
        AssumeDecoratedRoleWithSAMLRequest.initialize(this, sAMLAssertion, roleArn, principalArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sAMLAssertion, roleArn, principalArn) { 
        obj['SAMLAssertion'] = sAMLAssertion;
        obj['RoleArn'] = roleArn;
        obj['PrincipalArn'] = principalArn;
    }

    /**
     * Constructs a <code>AssumeDecoratedRoleWithSAMLRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssumeDecoratedRoleWithSAMLRequest} obj Optional instance to populate.
     * @return {module:model/AssumeDecoratedRoleWithSAMLRequest} The populated <code>AssumeDecoratedRoleWithSAMLRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssumeDecoratedRoleWithSAMLRequest();

            if (data.hasOwnProperty('SAMLAssertion')) {
                obj['SAMLAssertion'] = ApiClient.convertToType(data['SAMLAssertion'], 'String');
            }
            if (data.hasOwnProperty('RoleArn')) {
                obj['RoleArn'] = ApiClient.convertToType(data['RoleArn'], 'String');
            }
            if (data.hasOwnProperty('PrincipalArn')) {
                obj['PrincipalArn'] = ApiClient.convertToType(data['PrincipalArn'], 'String');
            }
            if (data.hasOwnProperty('DurationSeconds')) {
                obj['DurationSeconds'] = ApiClient.convertToType(data['DurationSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssumeDecoratedRoleWithSAMLRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssumeDecoratedRoleWithSAMLRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssumeDecoratedRoleWithSAMLRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['SAMLAssertion'] && !(typeof data['SAMLAssertion'] === 'string' || data['SAMLAssertion'] instanceof String)) {
            throw new Error("Expected the field `SAMLAssertion` to be a primitive type in the JSON string but got " + data['SAMLAssertion']);
        }
        // ensure the json data is a string
        if (data['RoleArn'] && !(typeof data['RoleArn'] === 'string' || data['RoleArn'] instanceof String)) {
            throw new Error("Expected the field `RoleArn` to be a primitive type in the JSON string but got " + data['RoleArn']);
        }
        // ensure the json data is a string
        if (data['PrincipalArn'] && !(typeof data['PrincipalArn'] === 'string' || data['PrincipalArn'] instanceof String)) {
            throw new Error("Expected the field `PrincipalArn` to be a primitive type in the JSON string but got " + data['PrincipalArn']);
        }

        return true;
    }


}

AssumeDecoratedRoleWithSAMLRequest.RequiredProperties = ["SAMLAssertion", "RoleArn", "PrincipalArn"];

/**
 * A SAML assertion consisting of an assertion statement for the user who needs temporary credentials. This must match the SAML assertion that was issued to IAM. This must be Base64 encoded.
 * @member {String} SAMLAssertion
 */
AssumeDecoratedRoleWithSAMLRequest.prototype['SAMLAssertion'] = undefined;

/**
 * The role that represents an IAM principal whose scope down policy allows it to call credential vending APIs such as <code>GetTemporaryTableCredentials</code>. The caller must also have iam:PassRole permission on this role. 
 * @member {String} RoleArn
 */
AssumeDecoratedRoleWithSAMLRequest.prototype['RoleArn'] = undefined;

/**
 * The Amazon Resource Name (ARN) of the SAML provider in IAM that describes the IdP.
 * @member {String} PrincipalArn
 */
AssumeDecoratedRoleWithSAMLRequest.prototype['PrincipalArn'] = undefined;

/**
 * The time period, between 900 and 43,200 seconds, for the timeout of the temporary credentials.
 * @member {Number} DurationSeconds
 */
AssumeDecoratedRoleWithSAMLRequest.prototype['DurationSeconds'] = undefined;






export default AssumeDecoratedRoleWithSAMLRequest;

