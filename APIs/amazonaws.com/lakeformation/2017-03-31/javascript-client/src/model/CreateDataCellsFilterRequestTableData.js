/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateDataCellsFilterRequestTableDataColumnWildcard from './CreateDataCellsFilterRequestTableDataColumnWildcard';
import CreateDataCellsFilterRequestTableDataRowFilter from './CreateDataCellsFilterRequestTableDataRowFilter';
import DataCellsFilter from './DataCellsFilter';

/**
 * The CreateDataCellsFilterRequestTableData model module.
 * @module model/CreateDataCellsFilterRequestTableData
 * @version 2017-03-31
 */
class CreateDataCellsFilterRequestTableData {
    /**
     * Constructs a new <code>CreateDataCellsFilterRequestTableData</code>.
     * @alias module:model/CreateDataCellsFilterRequestTableData
     * @implements module:model/DataCellsFilter
     * @param tableCatalogId {String} 
     * @param databaseName {String} 
     * @param tableName {String} 
     * @param name {String} 
     */
    constructor(tableCatalogId, databaseName, tableName, name) { 
        DataCellsFilter.initialize(this, tableCatalogId, databaseName, tableName, name);
        CreateDataCellsFilterRequestTableData.initialize(this, tableCatalogId, databaseName, tableName, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tableCatalogId, databaseName, tableName, name) { 
        obj['TableCatalogId'] = tableCatalogId;
        obj['DatabaseName'] = databaseName;
        obj['TableName'] = tableName;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>CreateDataCellsFilterRequestTableData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateDataCellsFilterRequestTableData} obj Optional instance to populate.
     * @return {module:model/CreateDataCellsFilterRequestTableData} The populated <code>CreateDataCellsFilterRequestTableData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateDataCellsFilterRequestTableData();
            DataCellsFilter.constructFromObject(data, obj);

            if (data.hasOwnProperty('TableCatalogId')) {
                obj['TableCatalogId'] = ApiClient.convertToType(data['TableCatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('RowFilter')) {
                obj['RowFilter'] = CreateDataCellsFilterRequestTableDataRowFilter.constructFromObject(data['RowFilter']);
            }
            if (data.hasOwnProperty('ColumnNames')) {
                obj['ColumnNames'] = ApiClient.convertToType(data['ColumnNames'], Array);
            }
            if (data.hasOwnProperty('ColumnWildcard')) {
                obj['ColumnWildcard'] = CreateDataCellsFilterRequestTableDataColumnWildcard.constructFromObject(data['ColumnWildcard']);
            }
            if (data.hasOwnProperty('VersionId')) {
                obj['VersionId'] = ApiClient.convertToType(data['VersionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateDataCellsFilterRequestTableData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateDataCellsFilterRequestTableData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateDataCellsFilterRequestTableData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `TableCatalogId`
        if (data['TableCatalogId']) { // data not null
          String.validateJSON(data['TableCatalogId']);
        }
        // validate the optional field `DatabaseName`
        if (data['DatabaseName']) { // data not null
          String.validateJSON(data['DatabaseName']);
        }
        // validate the optional field `TableName`
        if (data['TableName']) { // data not null
          String.validateJSON(data['TableName']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `RowFilter`
        if (data['RowFilter']) { // data not null
          CreateDataCellsFilterRequestTableDataRowFilter.validateJSON(data['RowFilter']);
        }
        // validate the optional field `ColumnNames`
        if (data['ColumnNames']) { // data not null
          Array.validateJSON(data['ColumnNames']);
        }
        // validate the optional field `ColumnWildcard`
        if (data['ColumnWildcard']) { // data not null
          CreateDataCellsFilterRequestTableDataColumnWildcard.validateJSON(data['ColumnWildcard']);
        }
        // validate the optional field `VersionId`
        if (data['VersionId']) { // data not null
          String.validateJSON(data['VersionId']);
        }

        return true;
    }


}

CreateDataCellsFilterRequestTableData.RequiredProperties = ["TableCatalogId", "DatabaseName", "TableName", "Name"];

/**
 * @member {String} TableCatalogId
 */
CreateDataCellsFilterRequestTableData.prototype['TableCatalogId'] = undefined;

/**
 * @member {String} DatabaseName
 */
CreateDataCellsFilterRequestTableData.prototype['DatabaseName'] = undefined;

/**
 * @member {String} TableName
 */
CreateDataCellsFilterRequestTableData.prototype['TableName'] = undefined;

/**
 * @member {String} Name
 */
CreateDataCellsFilterRequestTableData.prototype['Name'] = undefined;

/**
 * @member {module:model/CreateDataCellsFilterRequestTableDataRowFilter} RowFilter
 */
CreateDataCellsFilterRequestTableData.prototype['RowFilter'] = undefined;

/**
 * @member {Array} ColumnNames
 */
CreateDataCellsFilterRequestTableData.prototype['ColumnNames'] = undefined;

/**
 * @member {module:model/CreateDataCellsFilterRequestTableDataColumnWildcard} ColumnWildcard
 */
CreateDataCellsFilterRequestTableData.prototype['ColumnWildcard'] = undefined;

/**
 * @member {String} VersionId
 */
CreateDataCellsFilterRequestTableData.prototype['VersionId'] = undefined;


// Implement DataCellsFilter interface:
/**
 * @member {String} TableCatalogId
 */
DataCellsFilter.prototype['TableCatalogId'] = undefined;
/**
 * @member {String} DatabaseName
 */
DataCellsFilter.prototype['DatabaseName'] = undefined;
/**
 * @member {String} TableName
 */
DataCellsFilter.prototype['TableName'] = undefined;
/**
 * @member {String} Name
 */
DataCellsFilter.prototype['Name'] = undefined;
/**
 * @member {module:model/CreateDataCellsFilterRequestTableDataRowFilter} RowFilter
 */
DataCellsFilter.prototype['RowFilter'] = undefined;
/**
 * @member {Array} ColumnNames
 */
DataCellsFilter.prototype['ColumnNames'] = undefined;
/**
 * @member {module:model/CreateDataCellsFilterRequestTableDataColumnWildcard} ColumnWildcard
 */
DataCellsFilter.prototype['ColumnWildcard'] = undefined;
/**
 * @member {String} VersionId
 */
DataCellsFilter.prototype['VersionId'] = undefined;




export default CreateDataCellsFilterRequestTableData;

