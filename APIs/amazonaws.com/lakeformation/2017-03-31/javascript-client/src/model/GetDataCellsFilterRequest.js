/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetDataCellsFilterRequest model module.
 * @module model/GetDataCellsFilterRequest
 * @version 2017-03-31
 */
class GetDataCellsFilterRequest {
    /**
     * Constructs a new <code>GetDataCellsFilterRequest</code>.
     * @alias module:model/GetDataCellsFilterRequest
     * @param tableCatalogId {String} The ID of the catalog to which the table belongs.
     * @param databaseName {String} A database in the Glue Data Catalog.
     * @param tableName {String} A table in the database.
     * @param name {String} The name given by the user to the data filter cell.
     */
    constructor(tableCatalogId, databaseName, tableName, name) { 
        
        GetDataCellsFilterRequest.initialize(this, tableCatalogId, databaseName, tableName, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tableCatalogId, databaseName, tableName, name) { 
        obj['TableCatalogId'] = tableCatalogId;
        obj['DatabaseName'] = databaseName;
        obj['TableName'] = tableName;
        obj['Name'] = name;
    }

    /**
     * Constructs a <code>GetDataCellsFilterRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetDataCellsFilterRequest} obj Optional instance to populate.
     * @return {module:model/GetDataCellsFilterRequest} The populated <code>GetDataCellsFilterRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDataCellsFilterRequest();

            if (data.hasOwnProperty('TableCatalogId')) {
                obj['TableCatalogId'] = ApiClient.convertToType(data['TableCatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetDataCellsFilterRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetDataCellsFilterRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetDataCellsFilterRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['TableCatalogId'] && !(typeof data['TableCatalogId'] === 'string' || data['TableCatalogId'] instanceof String)) {
            throw new Error("Expected the field `TableCatalogId` to be a primitive type in the JSON string but got " + data['TableCatalogId']);
        }
        // ensure the json data is a string
        if (data['DatabaseName'] && !(typeof data['DatabaseName'] === 'string' || data['DatabaseName'] instanceof String)) {
            throw new Error("Expected the field `DatabaseName` to be a primitive type in the JSON string but got " + data['DatabaseName']);
        }
        // ensure the json data is a string
        if (data['TableName'] && !(typeof data['TableName'] === 'string' || data['TableName'] instanceof String)) {
            throw new Error("Expected the field `TableName` to be a primitive type in the JSON string but got " + data['TableName']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }

        return true;
    }


}

GetDataCellsFilterRequest.RequiredProperties = ["TableCatalogId", "DatabaseName", "TableName", "Name"];

/**
 * The ID of the catalog to which the table belongs.
 * @member {String} TableCatalogId
 */
GetDataCellsFilterRequest.prototype['TableCatalogId'] = undefined;

/**
 * A database in the Glue Data Catalog.
 * @member {String} DatabaseName
 */
GetDataCellsFilterRequest.prototype['DatabaseName'] = undefined;

/**
 * A table in the database.
 * @member {String} TableName
 */
GetDataCellsFilterRequest.prototype['TableName'] = undefined;

/**
 * The name given by the user to the data filter cell.
 * @member {String} Name
 */
GetDataCellsFilterRequest.prototype['Name'] = undefined;






export default GetDataCellsFilterRequest;

