/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TableResource from './TableResource';

/**
 * The TaggedTableTable model module.
 * @module model/TaggedTableTable
 * @version 2017-03-31
 */
class TaggedTableTable {
    /**
     * Constructs a new <code>TaggedTableTable</code>.
     * @alias module:model/TaggedTableTable
     * @implements module:model/TableResource
     * @param databaseName {String} 
     */
    constructor(databaseName) { 
        TableResource.initialize(this, databaseName);
        TaggedTableTable.initialize(this, databaseName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, databaseName) { 
        obj['DatabaseName'] = databaseName;
    }

    /**
     * Constructs a <code>TaggedTableTable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TaggedTableTable} obj Optional instance to populate.
     * @return {module:model/TaggedTableTable} The populated <code>TaggedTableTable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TaggedTableTable();
            TableResource.constructFromObject(data, obj);

            if (data.hasOwnProperty('CatalogId')) {
                obj['CatalogId'] = ApiClient.convertToType(data['CatalogId'], 'String');
            }
            if (data.hasOwnProperty('DatabaseName')) {
                obj['DatabaseName'] = ApiClient.convertToType(data['DatabaseName'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('TableWildcard')) {
                obj['TableWildcard'] = ApiClient.convertToType(data['TableWildcard'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TaggedTableTable</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TaggedTableTable</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TaggedTableTable.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CatalogId`
        if (data['CatalogId']) { // data not null
          String.validateJSON(data['CatalogId']);
        }
        // validate the optional field `DatabaseName`
        if (data['DatabaseName']) { // data not null
          String.validateJSON(data['DatabaseName']);
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `TableWildcard`
        if (data['TableWildcard']) { // data not null
          Object.validateJSON(data['TableWildcard']);
        }

        return true;
    }


}

TaggedTableTable.RequiredProperties = ["DatabaseName"];

/**
 * @member {String} CatalogId
 */
TaggedTableTable.prototype['CatalogId'] = undefined;

/**
 * @member {String} DatabaseName
 */
TaggedTableTable.prototype['DatabaseName'] = undefined;

/**
 * @member {String} Name
 */
TaggedTableTable.prototype['Name'] = undefined;

/**
 * @member {Object} TableWildcard
 */
TaggedTableTable.prototype['TableWildcard'] = undefined;


// Implement TableResource interface:
/**
 * @member {String} CatalogId
 */
TableResource.prototype['CatalogId'] = undefined;
/**
 * @member {String} DatabaseName
 */
TableResource.prototype['DatabaseName'] = undefined;
/**
 * @member {String} Name
 */
TableResource.prototype['Name'] = undefined;
/**
 * @member {Object} TableWildcard
 */
TableResource.prototype['TableWildcard'] = undefined;




export default TaggedTableTable;

