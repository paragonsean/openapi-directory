/**
 * AWS Lake Formation
 * <fullname>Lake Formation</fullname> <p>Defines the public endpoint for the Lake Formation service.</p>
 *
 * The version of the OpenAPI document: 2017-03-31
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddLFTagsToResourceRequest from '../model/AddLFTagsToResourceRequest';
import AddLFTagsToResourceResponse from '../model/AddLFTagsToResourceResponse';
import AssumeDecoratedRoleWithSAMLRequest from '../model/AssumeDecoratedRoleWithSAMLRequest';
import AssumeDecoratedRoleWithSAMLResponse from '../model/AssumeDecoratedRoleWithSAMLResponse';
import BatchGrantPermissionsRequest from '../model/BatchGrantPermissionsRequest';
import BatchGrantPermissionsResponse from '../model/BatchGrantPermissionsResponse';
import BatchRevokePermissionsRequest from '../model/BatchRevokePermissionsRequest';
import BatchRevokePermissionsResponse from '../model/BatchRevokePermissionsResponse';
import CancelTransactionRequest from '../model/CancelTransactionRequest';
import CommitTransactionRequest from '../model/CommitTransactionRequest';
import CommitTransactionResponse from '../model/CommitTransactionResponse';
import CreateDataCellsFilterRequest from '../model/CreateDataCellsFilterRequest';
import CreateLFTagRequest from '../model/CreateLFTagRequest';
import DeleteDataCellsFilterRequest from '../model/DeleteDataCellsFilterRequest';
import DeleteLFTagRequest from '../model/DeleteLFTagRequest';
import DeleteObjectsOnCancelRequest from '../model/DeleteObjectsOnCancelRequest';
import DeregisterResourceRequest from '../model/DeregisterResourceRequest';
import DescribeResourceRequest from '../model/DescribeResourceRequest';
import DescribeResourceResponse from '../model/DescribeResourceResponse';
import DescribeTransactionRequest from '../model/DescribeTransactionRequest';
import DescribeTransactionResponse from '../model/DescribeTransactionResponse';
import ExtendTransactionRequest from '../model/ExtendTransactionRequest';
import GetDataCellsFilterRequest from '../model/GetDataCellsFilterRequest';
import GetDataCellsFilterResponse from '../model/GetDataCellsFilterResponse';
import GetDataLakeSettingsRequest from '../model/GetDataLakeSettingsRequest';
import GetDataLakeSettingsResponse from '../model/GetDataLakeSettingsResponse';
import GetEffectivePermissionsForPathRequest from '../model/GetEffectivePermissionsForPathRequest';
import GetEffectivePermissionsForPathResponse from '../model/GetEffectivePermissionsForPathResponse';
import GetLFTagRequest from '../model/GetLFTagRequest';
import GetLFTagResponse from '../model/GetLFTagResponse';
import GetQueryStateRequest from '../model/GetQueryStateRequest';
import GetQueryStateResponse from '../model/GetQueryStateResponse';
import GetQueryStatisticsResponse from '../model/GetQueryStatisticsResponse';
import GetResourceLFTagsRequest from '../model/GetResourceLFTagsRequest';
import GetResourceLFTagsResponse from '../model/GetResourceLFTagsResponse';
import GetTableObjectsRequest from '../model/GetTableObjectsRequest';
import GetTableObjectsResponse from '../model/GetTableObjectsResponse';
import GetTemporaryGluePartitionCredentialsRequest from '../model/GetTemporaryGluePartitionCredentialsRequest';
import GetTemporaryGluePartitionCredentialsResponse from '../model/GetTemporaryGluePartitionCredentialsResponse';
import GetTemporaryGlueTableCredentialsRequest from '../model/GetTemporaryGlueTableCredentialsRequest';
import GetTemporaryGlueTableCredentialsResponse from '../model/GetTemporaryGlueTableCredentialsResponse';
import GetWorkUnitResultsRequest from '../model/GetWorkUnitResultsRequest';
import GetWorkUnitResultsResponse from '../model/GetWorkUnitResultsResponse';
import GetWorkUnitsRequest from '../model/GetWorkUnitsRequest';
import GetWorkUnitsResponse from '../model/GetWorkUnitsResponse';
import GrantPermissionsRequest from '../model/GrantPermissionsRequest';
import ListDataCellsFilterRequest from '../model/ListDataCellsFilterRequest';
import ListDataCellsFilterResponse from '../model/ListDataCellsFilterResponse';
import ListLFTagsRequest from '../model/ListLFTagsRequest';
import ListLFTagsResponse from '../model/ListLFTagsResponse';
import ListPermissionsRequest from '../model/ListPermissionsRequest';
import ListPermissionsResponse from '../model/ListPermissionsResponse';
import ListResourcesRequest from '../model/ListResourcesRequest';
import ListResourcesResponse from '../model/ListResourcesResponse';
import ListTableStorageOptimizersRequest from '../model/ListTableStorageOptimizersRequest';
import ListTableStorageOptimizersResponse from '../model/ListTableStorageOptimizersResponse';
import ListTransactionsRequest from '../model/ListTransactionsRequest';
import ListTransactionsResponse from '../model/ListTransactionsResponse';
import PutDataLakeSettingsRequest from '../model/PutDataLakeSettingsRequest';
import RegisterResourceRequest from '../model/RegisterResourceRequest';
import RemoveLFTagsFromResourceRequest from '../model/RemoveLFTagsFromResourceRequest';
import RemoveLFTagsFromResourceResponse from '../model/RemoveLFTagsFromResourceResponse';
import RevokePermissionsRequest from '../model/RevokePermissionsRequest';
import SearchDatabasesByLFTagsRequest from '../model/SearchDatabasesByLFTagsRequest';
import SearchDatabasesByLFTagsResponse from '../model/SearchDatabasesByLFTagsResponse';
import SearchTablesByLFTagsRequest from '../model/SearchTablesByLFTagsRequest';
import SearchTablesByLFTagsResponse from '../model/SearchTablesByLFTagsResponse';
import StartQueryPlanningRequest from '../model/StartQueryPlanningRequest';
import StartQueryPlanningResponse from '../model/StartQueryPlanningResponse';
import StartTransactionRequest from '../model/StartTransactionRequest';
import StartTransactionResponse from '../model/StartTransactionResponse';
import UpdateLFTagRequest from '../model/UpdateLFTagRequest';
import UpdateResourceRequest from '../model/UpdateResourceRequest';
import UpdateTableObjectsRequest from '../model/UpdateTableObjectsRequest';
import UpdateTableStorageOptimizerRequest from '../model/UpdateTableStorageOptimizerRequest';
import UpdateTableStorageOptimizerResponse from '../model/UpdateTableStorageOptimizerResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2017-03-31
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addLFTagsToResource operation.
     * @callback module:api/DefaultApi~addLFTagsToResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddLFTagsToResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attaches one or more LF-tags to an existing resource.
     * @param {module:model/AddLFTagsToResourceRequest} addLFTagsToResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~addLFTagsToResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddLFTagsToResourceResponse}
     */
    addLFTagsToResource(addLFTagsToResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = addLFTagsToResourceRequest;
      // verify the required parameter 'addLFTagsToResourceRequest' is set
      if (addLFTagsToResourceRequest === undefined || addLFTagsToResourceRequest === null) {
        throw new Error("Missing the required parameter 'addLFTagsToResourceRequest' when calling addLFTagsToResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddLFTagsToResourceResponse;
      return this.apiClient.callApi(
        '/AddLFTagsToResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assumeDecoratedRoleWithSAML operation.
     * @callback module:api/DefaultApi~assumeDecoratedRoleWithSAMLCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssumeDecoratedRoleWithSAMLResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Allows a caller to assume an IAM role decorated as the SAML user specified in the SAML assertion included in the request. This decoration allows Lake Formation to enforce access policies against the SAML users and groups. This API operation requires SAML federation setup in the caller’s account as it can only be called with valid SAML assertions. Lake Formation does not scope down the permission of the assumed role. All permissions attached to the role via the SAML federation setup will be included in the role session. </p> <p> This decorated role is expected to access data in Amazon S3 by getting temporary access from Lake Formation which is authorized via the virtual API <code>GetDataAccess</code>. Therefore, all SAML roles that can be assumed via <code>AssumeDecoratedRoleWithSAML</code> must at a minimum include <code>lakeformation:GetDataAccess</code> in their role policies. A typical IAM policy attached to such a role would look as follows: </p>
     * @param {module:model/AssumeDecoratedRoleWithSAMLRequest} assumeDecoratedRoleWithSAMLRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~assumeDecoratedRoleWithSAMLCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssumeDecoratedRoleWithSAMLResponse}
     */
    assumeDecoratedRoleWithSAML(assumeDecoratedRoleWithSAMLRequest, opts, callback) {
      opts = opts || {};
      let postBody = assumeDecoratedRoleWithSAMLRequest;
      // verify the required parameter 'assumeDecoratedRoleWithSAMLRequest' is set
      if (assumeDecoratedRoleWithSAMLRequest === undefined || assumeDecoratedRoleWithSAMLRequest === null) {
        throw new Error("Missing the required parameter 'assumeDecoratedRoleWithSAMLRequest' when calling assumeDecoratedRoleWithSAML");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssumeDecoratedRoleWithSAMLResponse;
      return this.apiClient.callApi(
        '/AssumeDecoratedRoleWithSAML', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchGrantPermissions operation.
     * @callback module:api/DefaultApi~batchGrantPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchGrantPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch operation to grant permissions to the principal.
     * @param {module:model/BatchGrantPermissionsRequest} batchGrantPermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchGrantPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchGrantPermissionsResponse}
     */
    batchGrantPermissions(batchGrantPermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchGrantPermissionsRequest;
      // verify the required parameter 'batchGrantPermissionsRequest' is set
      if (batchGrantPermissionsRequest === undefined || batchGrantPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'batchGrantPermissionsRequest' when calling batchGrantPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchGrantPermissionsResponse;
      return this.apiClient.callApi(
        '/BatchGrantPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the batchRevokePermissions operation.
     * @callback module:api/DefaultApi~batchRevokePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchRevokePermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch operation to revoke permissions from the principal.
     * @param {module:model/BatchRevokePermissionsRequest} batchRevokePermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~batchRevokePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchRevokePermissionsResponse}
     */
    batchRevokePermissions(batchRevokePermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = batchRevokePermissionsRequest;
      // verify the required parameter 'batchRevokePermissionsRequest' is set
      if (batchRevokePermissionsRequest === undefined || batchRevokePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'batchRevokePermissionsRequest' when calling batchRevokePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchRevokePermissionsResponse;
      return this.apiClient.callApi(
        '/BatchRevokePermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelTransaction operation.
     * @callback module:api/DefaultApi~cancelTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attempts to cancel the specified transaction. Returns an exception if the transaction was previously committed.
     * @param {module:model/CancelTransactionRequest} cancelTransactionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelTransaction(cancelTransactionRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelTransactionRequest;
      // verify the required parameter 'cancelTransactionRequest' is set
      if (cancelTransactionRequest === undefined || cancelTransactionRequest === null) {
        throw new Error("Missing the required parameter 'cancelTransactionRequest' when calling cancelTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/CancelTransaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commitTransaction operation.
     * @callback module:api/DefaultApi~commitTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CommitTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attempts to commit the specified transaction. Returns an exception if the transaction was previously aborted. This API action is idempotent if called multiple times for the same transaction.
     * @param {module:model/CommitTransactionRequest} commitTransactionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~commitTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CommitTransactionResponse}
     */
    commitTransaction(commitTransactionRequest, opts, callback) {
      opts = opts || {};
      let postBody = commitTransactionRequest;
      // verify the required parameter 'commitTransactionRequest' is set
      if (commitTransactionRequest === undefined || commitTransactionRequest === null) {
        throw new Error("Missing the required parameter 'commitTransactionRequest' when calling commitTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommitTransactionResponse;
      return this.apiClient.callApi(
        '/CommitTransaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDataCellsFilter operation.
     * @callback module:api/DefaultApi~createDataCellsFilterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a data cell filter to allow one to grant access to certain columns on certain rows.
     * @param {module:model/CreateDataCellsFilterRequest} createDataCellsFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDataCellsFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createDataCellsFilter(createDataCellsFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDataCellsFilterRequest;
      // verify the required parameter 'createDataCellsFilterRequest' is set
      if (createDataCellsFilterRequest === undefined || createDataCellsFilterRequest === null) {
        throw new Error("Missing the required parameter 'createDataCellsFilterRequest' when calling createDataCellsFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/CreateDataCellsFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLFTag operation.
     * @callback module:api/DefaultApi~createLFTagCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an LF-tag with the specified name and values.
     * @param {module:model/CreateLFTagRequest} createLFTagRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLFTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createLFTag(createLFTagRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLFTagRequest;
      // verify the required parameter 'createLFTagRequest' is set
      if (createLFTagRequest === undefined || createLFTagRequest === null) {
        throw new Error("Missing the required parameter 'createLFTagRequest' when calling createLFTag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/CreateLFTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDataCellsFilter operation.
     * @callback module:api/DefaultApi~deleteDataCellsFilterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a data cell filter.
     * @param {module:model/DeleteDataCellsFilterRequest} deleteDataCellsFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDataCellsFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteDataCellsFilter(deleteDataCellsFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteDataCellsFilterRequest;
      // verify the required parameter 'deleteDataCellsFilterRequest' is set
      if (deleteDataCellsFilterRequest === undefined || deleteDataCellsFilterRequest === null) {
        throw new Error("Missing the required parameter 'deleteDataCellsFilterRequest' when calling deleteDataCellsFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteDataCellsFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLFTag operation.
     * @callback module:api/DefaultApi~deleteLFTagCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified LF-tag given a key name. If the input parameter tag key was not found, then the operation will throw an exception. When you delete an LF-tag, the <code>LFTagPolicy</code> attached to the LF-tag becomes invalid. If the deleted LF-tag was still assigned to any resource, the tag policy attach to the deleted LF-tag will no longer be applied to the resource.
     * @param {module:model/DeleteLFTagRequest} deleteLFTagRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLFTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLFTag(deleteLFTagRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLFTagRequest;
      // verify the required parameter 'deleteLFTagRequest' is set
      if (deleteLFTagRequest === undefined || deleteLFTagRequest === null) {
        throw new Error("Missing the required parameter 'deleteLFTagRequest' when calling deleteLFTag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteLFTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteObjectsOnCancel operation.
     * @callback module:api/DefaultApi~deleteObjectsOnCancelCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>For a specific governed table, provides a list of Amazon S3 objects that will be written during the current transaction and that can be automatically deleted if the transaction is canceled. Without this call, no Amazon S3 objects are automatically deleted when a transaction cancels. </p> <p> The Glue ETL library function <code>write_dynamic_frame.from_catalog()</code> includes an option to automatically call <code>DeleteObjectsOnCancel</code> before writes. For more information, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/transactions-data-operations.html#rolling-back-writes\">Rolling Back Amazon S3 Writes</a>. </p>
     * @param {module:model/DeleteObjectsOnCancelRequest} deleteObjectsOnCancelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteObjectsOnCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteObjectsOnCancel(deleteObjectsOnCancelRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteObjectsOnCancelRequest;
      // verify the required parameter 'deleteObjectsOnCancelRequest' is set
      if (deleteObjectsOnCancelRequest === undefined || deleteObjectsOnCancelRequest === null) {
        throw new Error("Missing the required parameter 'deleteObjectsOnCancelRequest' when calling deleteObjectsOnCancel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteObjectsOnCancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterResource operation.
     * @callback module:api/DefaultApi~deregisterResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Deregisters the resource as managed by the Data Catalog.</p> <p>When you deregister a path, Lake Formation removes the path from the inline policy attached to your service-linked role.</p>
     * @param {module:model/DeregisterResourceRequest} deregisterResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deregisterResource(deregisterResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = deregisterResourceRequest;
      // verify the required parameter 'deregisterResourceRequest' is set
      if (deregisterResourceRequest === undefined || deregisterResourceRequest === null) {
        throw new Error("Missing the required parameter 'deregisterResourceRequest' when calling deregisterResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeregisterResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeResource operation.
     * @callback module:api/DefaultApi~describeResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the current data access role for the given resource registered in Lake Formation.
     * @param {module:model/DescribeResourceRequest} describeResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeResourceResponse}
     */
    describeResource(describeResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeResourceRequest;
      // verify the required parameter 'describeResourceRequest' is set
      if (describeResourceRequest === undefined || describeResourceRequest === null) {
        throw new Error("Missing the required parameter 'describeResourceRequest' when calling describeResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeResourceResponse;
      return this.apiClient.callApi(
        '/DescribeResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeTransaction operation.
     * @callback module:api/DefaultApi~describeTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of a single transaction.
     * @param {module:model/DescribeTransactionRequest} describeTransactionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeTransactionResponse}
     */
    describeTransaction(describeTransactionRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeTransactionRequest;
      // verify the required parameter 'describeTransactionRequest' is set
      if (describeTransactionRequest === undefined || describeTransactionRequest === null) {
        throw new Error("Missing the required parameter 'describeTransactionRequest' when calling describeTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeTransactionResponse;
      return this.apiClient.callApi(
        '/DescribeTransaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extendTransaction operation.
     * @callback module:api/DefaultApi~extendTransactionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Indicates to the service that the specified transaction is still active and should not be treated as idle and aborted.</p> <p>Write transactions that remain idle for a long period are automatically aborted unless explicitly extended.</p>
     * @param {module:model/ExtendTransactionRequest} extendTransactionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~extendTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    extendTransaction(extendTransactionRequest, opts, callback) {
      opts = opts || {};
      let postBody = extendTransactionRequest;
      // verify the required parameter 'extendTransactionRequest' is set
      if (extendTransactionRequest === undefined || extendTransactionRequest === null) {
        throw new Error("Missing the required parameter 'extendTransactionRequest' when calling extendTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/ExtendTransaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataCellsFilter operation.
     * @callback module:api/DefaultApi~getDataCellsFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataCellsFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a data cells filter.
     * @param {module:model/GetDataCellsFilterRequest} getDataCellsFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataCellsFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataCellsFilterResponse}
     */
    getDataCellsFilter(getDataCellsFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDataCellsFilterRequest;
      // verify the required parameter 'getDataCellsFilterRequest' is set
      if (getDataCellsFilterRequest === undefined || getDataCellsFilterRequest === null) {
        throw new Error("Missing the required parameter 'getDataCellsFilterRequest' when calling getDataCellsFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataCellsFilterResponse;
      return this.apiClient.callApi(
        '/GetDataCellsFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataLakeSettings operation.
     * @callback module:api/DefaultApi~getDataLakeSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDataLakeSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the list of the data lake administrators of a Lake Formation-managed data lake. 
     * @param {module:model/GetDataLakeSettingsRequest} getDataLakeSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDataLakeSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDataLakeSettingsResponse}
     */
    getDataLakeSettings(getDataLakeSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDataLakeSettingsRequest;
      // verify the required parameter 'getDataLakeSettingsRequest' is set
      if (getDataLakeSettingsRequest === undefined || getDataLakeSettingsRequest === null) {
        throw new Error("Missing the required parameter 'getDataLakeSettingsRequest' when calling getDataLakeSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDataLakeSettingsResponse;
      return this.apiClient.callApi(
        '/GetDataLakeSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEffectivePermissionsForPath operation.
     * @callback module:api/DefaultApi~getEffectivePermissionsForPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEffectivePermissionsForPathResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the Lake Formation permissions for a specified table or database resource located at a path in Amazon S3. <code>GetEffectivePermissionsForPath</code> will not return databases and tables if the catalog is encrypted.
     * @param {module:model/GetEffectivePermissionsForPathRequest} getEffectivePermissionsForPathRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getEffectivePermissionsForPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEffectivePermissionsForPathResponse}
     */
    getEffectivePermissionsForPath(getEffectivePermissionsForPathRequest, opts, callback) {
      opts = opts || {};
      let postBody = getEffectivePermissionsForPathRequest;
      // verify the required parameter 'getEffectivePermissionsForPathRequest' is set
      if (getEffectivePermissionsForPathRequest === undefined || getEffectivePermissionsForPathRequest === null) {
        throw new Error("Missing the required parameter 'getEffectivePermissionsForPathRequest' when calling getEffectivePermissionsForPath");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetEffectivePermissionsForPathResponse;
      return this.apiClient.callApi(
        '/GetEffectivePermissionsForPath', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLFTag operation.
     * @callback module:api/DefaultApi~getLFTagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLFTagResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an LF-tag definition.
     * @param {module:model/GetLFTagRequest} getLFTagRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLFTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLFTagResponse}
     */
    getLFTag(getLFTagRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLFTagRequest;
      // verify the required parameter 'getLFTagRequest' is set
      if (getLFTagRequest === undefined || getLFTagRequest === null) {
        throw new Error("Missing the required parameter 'getLFTagRequest' when calling getLFTag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetLFTagResponse;
      return this.apiClient.callApi(
        '/GetLFTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryState operation.
     * @callback module:api/DefaultApi~getQueryStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetQueryStateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the state of a query previously submitted. Clients are expected to poll <code>GetQueryState</code> to monitor the current state of the planning before retrieving the work units. A query state is only visible to the principal that made the initial call to <code>StartQueryPlanning</code>.
     * @param {module:model/GetQueryStateRequest} getQueryStateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getQueryStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetQueryStateResponse}
     */
    getQueryState(getQueryStateRequest, opts, callback) {
      opts = opts || {};
      let postBody = getQueryStateRequest;
      // verify the required parameter 'getQueryStateRequest' is set
      if (getQueryStateRequest === undefined || getQueryStateRequest === null) {
        throw new Error("Missing the required parameter 'getQueryStateRequest' when calling getQueryState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetQueryStateResponse;
      return this.apiClient.callApi(
        '/GetQueryState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueryStatistics operation.
     * @callback module:api/DefaultApi~getQueryStatisticsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetQueryStatisticsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves statistics on the planning and execution of a query.
     * @param {module:model/GetQueryStateRequest} getQueryStateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getQueryStatisticsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetQueryStatisticsResponse}
     */
    getQueryStatistics(getQueryStateRequest, opts, callback) {
      opts = opts || {};
      let postBody = getQueryStateRequest;
      // verify the required parameter 'getQueryStateRequest' is set
      if (getQueryStateRequest === undefined || getQueryStateRequest === null) {
        throw new Error("Missing the required parameter 'getQueryStateRequest' when calling getQueryStatistics");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetQueryStatisticsResponse;
      return this.apiClient.callApi(
        '/GetQueryStatistics', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceLFTags operation.
     * @callback module:api/DefaultApi~getResourceLFTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourceLFTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the LF-tags applied to a resource.
     * @param {module:model/GetResourceLFTagsRequest} getResourceLFTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResourceLFTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourceLFTagsResponse}
     */
    getResourceLFTags(getResourceLFTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getResourceLFTagsRequest;
      // verify the required parameter 'getResourceLFTagsRequest' is set
      if (getResourceLFTagsRequest === undefined || getResourceLFTagsRequest === null) {
        throw new Error("Missing the required parameter 'getResourceLFTagsRequest' when calling getResourceLFTags");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetResourceLFTagsResponse;
      return this.apiClient.callApi(
        '/GetResourceLFTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTableObjects operation.
     * @callback module:api/DefaultApi~getTableObjectsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTableObjectsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the set of Amazon S3 objects that make up the specified governed table. A transaction ID or timestamp can be specified for time-travel queries.
     * @param {module:model/GetTableObjectsRequest} getTableObjectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getTableObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTableObjectsResponse}
     */
    getTableObjects(getTableObjectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTableObjectsRequest;
      // verify the required parameter 'getTableObjectsRequest' is set
      if (getTableObjectsRequest === undefined || getTableObjectsRequest === null) {
        throw new Error("Missing the required parameter 'getTableObjectsRequest' when calling getTableObjects");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTableObjectsResponse;
      return this.apiClient.callApi(
        '/GetTableObjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemporaryGluePartitionCredentials operation.
     * @callback module:api/DefaultApi~getTemporaryGluePartitionCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTemporaryGluePartitionCredentialsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API is identical to <code>GetTemporaryTableCredentials</code> except that this is used when the target Data Catalog resource is of type Partition. Lake Formation restricts the permission of the vended credentials with the same scope down policy which restricts access to a single Amazon S3 prefix.
     * @param {module:model/GetTemporaryGluePartitionCredentialsRequest} getTemporaryGluePartitionCredentialsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTemporaryGluePartitionCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTemporaryGluePartitionCredentialsResponse}
     */
    getTemporaryGluePartitionCredentials(getTemporaryGluePartitionCredentialsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTemporaryGluePartitionCredentialsRequest;
      // verify the required parameter 'getTemporaryGluePartitionCredentialsRequest' is set
      if (getTemporaryGluePartitionCredentialsRequest === undefined || getTemporaryGluePartitionCredentialsRequest === null) {
        throw new Error("Missing the required parameter 'getTemporaryGluePartitionCredentialsRequest' when calling getTemporaryGluePartitionCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTemporaryGluePartitionCredentialsResponse;
      return this.apiClient.callApi(
        '/GetTemporaryGluePartitionCredentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTemporaryGlueTableCredentials operation.
     * @callback module:api/DefaultApi~getTemporaryGlueTableCredentialsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTemporaryGlueTableCredentialsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows a caller in a secure environment to assume a role with permission to access Amazon S3. In order to vend such credentials, Lake Formation assumes the role associated with a registered location, for example an Amazon S3 bucket, with a scope down policy which restricts the access to a single prefix.
     * @param {module:model/GetTemporaryGlueTableCredentialsRequest} getTemporaryGlueTableCredentialsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTemporaryGlueTableCredentialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTemporaryGlueTableCredentialsResponse}
     */
    getTemporaryGlueTableCredentials(getTemporaryGlueTableCredentialsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getTemporaryGlueTableCredentialsRequest;
      // verify the required parameter 'getTemporaryGlueTableCredentialsRequest' is set
      if (getTemporaryGlueTableCredentialsRequest === undefined || getTemporaryGlueTableCredentialsRequest === null) {
        throw new Error("Missing the required parameter 'getTemporaryGlueTableCredentialsRequest' when calling getTemporaryGlueTableCredentials");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTemporaryGlueTableCredentialsResponse;
      return this.apiClient.callApi(
        '/GetTemporaryGlueTableCredentials', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkUnitResults operation.
     * @callback module:api/DefaultApi~getWorkUnitResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkUnitResultsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the work units resulting from the query. Work units can be executed in any order and in parallel. 
     * @param {module:model/GetWorkUnitResultsRequest} getWorkUnitResultsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getWorkUnitResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkUnitResultsResponse}
     */
    getWorkUnitResults(getWorkUnitResultsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getWorkUnitResultsRequest;
      // verify the required parameter 'getWorkUnitResultsRequest' is set
      if (getWorkUnitResultsRequest === undefined || getWorkUnitResultsRequest === null) {
        throw new Error("Missing the required parameter 'getWorkUnitResultsRequest' when calling getWorkUnitResults");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetWorkUnitResultsResponse;
      return this.apiClient.callApi(
        '/GetWorkUnitResults', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWorkUnits operation.
     * @callback module:api/DefaultApi~getWorkUnitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetWorkUnitsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the work units generated by the <code>StartQueryPlanning</code> operation.
     * @param {module:model/GetWorkUnitsRequest} getWorkUnitsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [pageSize] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~getWorkUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetWorkUnitsResponse}
     */
    getWorkUnits(getWorkUnitsRequest, opts, callback) {
      opts = opts || {};
      let postBody = getWorkUnitsRequest;
      // verify the required parameter 'getWorkUnitsRequest' is set
      if (getWorkUnitsRequest === undefined || getWorkUnitsRequest === null) {
        throw new Error("Missing the required parameter 'getWorkUnitsRequest' when calling getWorkUnits");
      }

      let pathParams = {
      };
      let queryParams = {
        'PageSize': opts['pageSize'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetWorkUnitsResponse;
      return this.apiClient.callApi(
        '/GetWorkUnits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the grantPermissions operation.
     * @callback module:api/DefaultApi~grantPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Grants permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.</p> <p>For information about permissions, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html\">Security and Access Control to Metadata and Data</a>.</p>
     * @param {module:model/GrantPermissionsRequest} grantPermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~grantPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    grantPermissions(grantPermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = grantPermissionsRequest;
      // verify the required parameter 'grantPermissionsRequest' is set
      if (grantPermissionsRequest === undefined || grantPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'grantPermissionsRequest' when calling grantPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/GrantPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDataCellsFilter operation.
     * @callback module:api/DefaultApi~listDataCellsFilterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDataCellsFilterResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the data cell filters on a table.
     * @param {module:model/ListDataCellsFilterRequest} listDataCellsFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listDataCellsFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDataCellsFilterResponse}
     */
    listDataCellsFilter(listDataCellsFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = listDataCellsFilterRequest;
      // verify the required parameter 'listDataCellsFilterRequest' is set
      if (listDataCellsFilterRequest === undefined || listDataCellsFilterRequest === null) {
        throw new Error("Missing the required parameter 'listDataCellsFilterRequest' when calling listDataCellsFilter");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListDataCellsFilterResponse;
      return this.apiClient.callApi(
        '/ListDataCellsFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLFTags operation.
     * @callback module:api/DefaultApi~listLFTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLFTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists LF-tags that the requester has permission to view. 
     * @param {module:model/ListLFTagsRequest} listLFTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLFTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLFTagsResponse}
     */
    listLFTags(listLFTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLFTagsRequest;
      // verify the required parameter 'listLFTagsRequest' is set
      if (listLFTagsRequest === undefined || listLFTagsRequest === null) {
        throw new Error("Missing the required parameter 'listLFTagsRequest' when calling listLFTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLFTagsResponse;
      return this.apiClient.callApi(
        '/ListLFTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPermissions operation.
     * @callback module:api/DefaultApi~listPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a list of the principal permissions on the resource, filtered by the permissions of the caller. For example, if you are granted an ALTER permission, you are able to see only the principal permissions for ALTER.</p> <p>This operation returns only those permissions that have been explicitly granted.</p> <p>For information about permissions, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/security-data-access.html\">Security and Access Control to Metadata and Data</a>.</p>
     * @param {module:model/ListPermissionsRequest} listPermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPermissionsResponse}
     */
    listPermissions(listPermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPermissionsRequest;
      // verify the required parameter 'listPermissionsRequest' is set
      if (listPermissionsRequest === undefined || listPermissionsRequest === null) {
        throw new Error("Missing the required parameter 'listPermissionsRequest' when calling listPermissions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPermissionsResponse;
      return this.apiClient.callApi(
        '/ListPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResources operation.
     * @callback module:api/DefaultApi~listResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the resources registered to be managed by the Data Catalog.
     * @param {module:model/ListResourcesRequest} listResourcesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourcesResponse}
     */
    listResources(listResourcesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listResourcesRequest;
      // verify the required parameter 'listResourcesRequest' is set
      if (listResourcesRequest === undefined || listResourcesRequest === null) {
        throw new Error("Missing the required parameter 'listResourcesRequest' when calling listResources");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListResourcesResponse;
      return this.apiClient.callApi(
        '/ListResources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTableStorageOptimizers operation.
     * @callback module:api/DefaultApi~listTableStorageOptimizersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTableStorageOptimizersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the configuration of all storage optimizers associated with a specified table.
     * @param {module:model/ListTableStorageOptimizersRequest} listTableStorageOptimizersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTableStorageOptimizersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTableStorageOptimizersResponse}
     */
    listTableStorageOptimizers(listTableStorageOptimizersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTableStorageOptimizersRequest;
      // verify the required parameter 'listTableStorageOptimizersRequest' is set
      if (listTableStorageOptimizersRequest === undefined || listTableStorageOptimizersRequest === null) {
        throw new Error("Missing the required parameter 'listTableStorageOptimizersRequest' when calling listTableStorageOptimizers");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTableStorageOptimizersResponse;
      return this.apiClient.callApi(
        '/ListTableStorageOptimizers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactions operation.
     * @callback module:api/DefaultApi~listTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTransactionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns metadata about transactions and their status. To prevent the response from growing indefinitely, only uncommitted transactions and those available for time-travel queries are returned.</p> <p>This operation can help you identify uncommitted transactions or to get information about transactions.</p>
     * @param {module:model/ListTransactionsRequest} listTransactionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTransactionsResponse}
     */
    listTransactions(listTransactionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTransactionsRequest;
      // verify the required parameter 'listTransactionsRequest' is set
      if (listTransactionsRequest === undefined || listTransactionsRequest === null) {
        throw new Error("Missing the required parameter 'listTransactionsRequest' when calling listTransactions");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTransactionsResponse;
      return this.apiClient.callApi(
        '/ListTransactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putDataLakeSettings operation.
     * @callback module:api/DefaultApi~putDataLakeSettingsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the list of data lake administrators who have admin privileges on all resources managed by Lake Formation. For more information on admin privileges, see <a href=\"https://docs.aws.amazon.com/lake-formation/latest/dg/lake-formation-permissions.html\">Granting Lake Formation Permissions</a>.</p> <p>This API replaces the current list of data lake admins with the new list being passed. To add an admin, fetch the current list and add the new admin to that list and pass that list in this API.</p>
     * @param {module:model/PutDataLakeSettingsRequest} putDataLakeSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putDataLakeSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    putDataLakeSettings(putDataLakeSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putDataLakeSettingsRequest;
      // verify the required parameter 'putDataLakeSettingsRequest' is set
      if (putDataLakeSettingsRequest === undefined || putDataLakeSettingsRequest === null) {
        throw new Error("Missing the required parameter 'putDataLakeSettingsRequest' when calling putDataLakeSettings");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/PutDataLakeSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerResource operation.
     * @callback module:api/DefaultApi~registerResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Registers the resource as managed by the Data Catalog.</p> <p>To add or update data, Lake Formation needs read/write access to the chosen Amazon S3 path. Choose a role that you know has permission to do this, or choose the AWSServiceRoleForLakeFormationDataAccess service-linked role. When you register the first Amazon S3 path, the service-linked role and a new inline policy are created on your behalf. Lake Formation adds the first path to the inline policy and attaches it to the service-linked role. When you register subsequent paths, Lake Formation adds the path to the existing policy.</p> <p>The following request registers a new location and gives Lake Formation permission to use the service-linked role to access that location.</p> <p> <code>ResourceArn = arn:aws:s3:::my-bucket UseServiceLinkedRole = true</code> </p> <p>If <code>UseServiceLinkedRole</code> is not set to true, you must provide or set the <code>RoleArn</code>:</p> <p> <code>arn:aws:iam::12345:role/my-data-access-role</code> </p>
     * @param {module:model/RegisterResourceRequest} registerResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    registerResource(registerResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerResourceRequest;
      // verify the required parameter 'registerResourceRequest' is set
      if (registerResourceRequest === undefined || registerResourceRequest === null) {
        throw new Error("Missing the required parameter 'registerResourceRequest' when calling registerResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/RegisterResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLFTagsFromResource operation.
     * @callback module:api/DefaultApi~removeLFTagsFromResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveLFTagsFromResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes an LF-tag from the resource. Only database, table, or tableWithColumns resource are allowed. To tag columns, use the column inclusion list in <code>tableWithColumns</code> to specify column input.
     * @param {module:model/RemoveLFTagsFromResourceRequest} removeLFTagsFromResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeLFTagsFromResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveLFTagsFromResourceResponse}
     */
    removeLFTagsFromResource(removeLFTagsFromResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeLFTagsFromResourceRequest;
      // verify the required parameter 'removeLFTagsFromResourceRequest' is set
      if (removeLFTagsFromResourceRequest === undefined || removeLFTagsFromResourceRequest === null) {
        throw new Error("Missing the required parameter 'removeLFTagsFromResourceRequest' when calling removeLFTagsFromResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RemoveLFTagsFromResourceResponse;
      return this.apiClient.callApi(
        '/RemoveLFTagsFromResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokePermissions operation.
     * @callback module:api/DefaultApi~revokePermissionsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revokes permissions to the principal to access metadata in the Data Catalog and data organized in underlying data storage such as Amazon S3.
     * @param {module:model/RevokePermissionsRequest} revokePermissionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~revokePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    revokePermissions(revokePermissionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = revokePermissionsRequest;
      // verify the required parameter 'revokePermissionsRequest' is set
      if (revokePermissionsRequest === undefined || revokePermissionsRequest === null) {
        throw new Error("Missing the required parameter 'revokePermissionsRequest' when calling revokePermissions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/RevokePermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchDatabasesByLFTags operation.
     * @callback module:api/DefaultApi~searchDatabasesByLFTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchDatabasesByLFTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation allows a search on <code>DATABASE</code> resources by <code>TagCondition</code>. This operation is used by admins who want to grant user permissions on certain <code>TagConditions</code>. Before making a grant, the admin can use <code>SearchDatabasesByTags</code> to find all resources where the given <code>TagConditions</code> are valid to verify whether the returned resources can be shared.
     * @param {module:model/SearchDatabasesByLFTagsRequest} searchDatabasesByLFTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchDatabasesByLFTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchDatabasesByLFTagsResponse}
     */
    searchDatabasesByLFTags(searchDatabasesByLFTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchDatabasesByLFTagsRequest;
      // verify the required parameter 'searchDatabasesByLFTagsRequest' is set
      if (searchDatabasesByLFTagsRequest === undefined || searchDatabasesByLFTagsRequest === null) {
        throw new Error("Missing the required parameter 'searchDatabasesByLFTagsRequest' when calling searchDatabasesByLFTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchDatabasesByLFTagsResponse;
      return this.apiClient.callApi(
        '/SearchDatabasesByLFTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTablesByLFTags operation.
     * @callback module:api/DefaultApi~searchTablesByLFTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchTablesByLFTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation allows a search on <code>TABLE</code> resources by <code>LFTag</code>s. This will be used by admins who want to grant user permissions on certain LF-tags. Before making a grant, the admin can use <code>SearchTablesByLFTags</code> to find all resources where the given <code>LFTag</code>s are valid to verify whether the returned resources can be shared.
     * @param {module:model/SearchTablesByLFTagsRequest} searchTablesByLFTagsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~searchTablesByLFTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchTablesByLFTagsResponse}
     */
    searchTablesByLFTags(searchTablesByLFTagsRequest, opts, callback) {
      opts = opts || {};
      let postBody = searchTablesByLFTagsRequest;
      // verify the required parameter 'searchTablesByLFTagsRequest' is set
      if (searchTablesByLFTagsRequest === undefined || searchTablesByLFTagsRequest === null) {
        throw new Error("Missing the required parameter 'searchTablesByLFTagsRequest' when calling searchTablesByLFTags");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchTablesByLFTagsResponse;
      return this.apiClient.callApi(
        '/SearchTablesByLFTags', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startQueryPlanning operation.
     * @callback module:api/DefaultApi~startQueryPlanningCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartQueryPlanningResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Submits a request to process a query statement.</p> <p>This operation generates work units that can be retrieved with the <code>GetWorkUnits</code> operation as soon as the query state is WORKUNITS_AVAILABLE or FINISHED.</p>
     * @param {module:model/StartQueryPlanningRequest} startQueryPlanningRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startQueryPlanningCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartQueryPlanningResponse}
     */
    startQueryPlanning(startQueryPlanningRequest, opts, callback) {
      opts = opts || {};
      let postBody = startQueryPlanningRequest;
      // verify the required parameter 'startQueryPlanningRequest' is set
      if (startQueryPlanningRequest === undefined || startQueryPlanningRequest === null) {
        throw new Error("Missing the required parameter 'startQueryPlanningRequest' when calling startQueryPlanning");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartQueryPlanningResponse;
      return this.apiClient.callApi(
        '/StartQueryPlanning', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTransaction operation.
     * @callback module:api/DefaultApi~startTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a new transaction and returns its transaction ID. Transaction IDs are opaque objects that you can use to identify a transaction.
     * @param {module:model/StartTransactionRequest} startTransactionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTransactionResponse}
     */
    startTransaction(startTransactionRequest, opts, callback) {
      opts = opts || {};
      let postBody = startTransactionRequest;
      // verify the required parameter 'startTransactionRequest' is set
      if (startTransactionRequest === undefined || startTransactionRequest === null) {
        throw new Error("Missing the required parameter 'startTransactionRequest' when calling startTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartTransactionResponse;
      return this.apiClient.callApi(
        '/StartTransaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDataCellsFilter operation.
     * @callback module:api/DefaultApi~updateDataCellsFilterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a data cell filter.
     * @param {module:model/CreateDataCellsFilterRequest} createDataCellsFilterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDataCellsFilterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateDataCellsFilter(createDataCellsFilterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDataCellsFilterRequest;
      // verify the required parameter 'createDataCellsFilterRequest' is set
      if (createDataCellsFilterRequest === undefined || createDataCellsFilterRequest === null) {
        throw new Error("Missing the required parameter 'createDataCellsFilterRequest' when calling updateDataCellsFilter");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/UpdateDataCellsFilter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLFTag operation.
     * @callback module:api/DefaultApi~updateLFTagCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the list of possible values for the specified LF-tag key. If the LF-tag does not exist, the operation throws an EntityNotFoundException. The values in the delete key values will be deleted from list of possible values. If any value in the delete key values is attached to a resource, then API errors out with a 400 Exception - \"Update not allowed\". Untag the attribute before deleting the LF-tag key's value. 
     * @param {module:model/UpdateLFTagRequest} updateLFTagRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLFTagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLFTag(updateLFTagRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLFTagRequest;
      // verify the required parameter 'updateLFTagRequest' is set
      if (updateLFTagRequest === undefined || updateLFTagRequest === null) {
        throw new Error("Missing the required parameter 'updateLFTagRequest' when calling updateLFTag");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/UpdateLFTag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResource operation.
     * @callback module:api/DefaultApi~updateResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the data access role used for vending access to the given (registered) resource in Lake Formation. 
     * @param {module:model/UpdateResourceRequest} updateResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateResource(updateResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResourceRequest;
      // verify the required parameter 'updateResourceRequest' is set
      if (updateResourceRequest === undefined || updateResourceRequest === null) {
        throw new Error("Missing the required parameter 'updateResourceRequest' when calling updateResource");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/UpdateResource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTableObjects operation.
     * @callback module:api/DefaultApi~updateTableObjectsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the manifest of Amazon S3 objects that make up the specified governed table.
     * @param {module:model/UpdateTableObjectsRequest} updateTableObjectsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTableObjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateTableObjects(updateTableObjectsRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTableObjectsRequest;
      // verify the required parameter 'updateTableObjectsRequest' is set
      if (updateTableObjectsRequest === undefined || updateTableObjectsRequest === null) {
        throw new Error("Missing the required parameter 'updateTableObjectsRequest' when calling updateTableObjects");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/UpdateTableObjects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTableStorageOptimizer operation.
     * @callback module:api/DefaultApi~updateTableStorageOptimizerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTableStorageOptimizerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the configuration of the storage optimizers for a table.
     * @param {module:model/UpdateTableStorageOptimizerRequest} updateTableStorageOptimizerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateTableStorageOptimizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTableStorageOptimizerResponse}
     */
    updateTableStorageOptimizer(updateTableStorageOptimizerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateTableStorageOptimizerRequest;
      // verify the required parameter 'updateTableStorageOptimizerRequest' is set
      if (updateTableStorageOptimizerRequest === undefined || updateTableStorageOptimizerRequest === null) {
        throw new Error("Missing the required parameter 'updateTableStorageOptimizerRequest' when calling updateTableStorageOptimizer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTableStorageOptimizerResponse;
      return this.apiClient.callApi(
        '/UpdateTableStorageOptimizer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
