/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StreamDescription from './StreamDescription';
import StreamStatus from './StreamStatus';
import StreamViewType from './StreamViewType';

/**
 * The DescribeStreamOutputStreamDescription model module.
 * @module model/DescribeStreamOutputStreamDescription
 * @version 2012-08-10
 */
class DescribeStreamOutputStreamDescription {
    /**
     * Constructs a new <code>DescribeStreamOutputStreamDescription</code>.
     * @alias module:model/DescribeStreamOutputStreamDescription
     * @implements module:model/StreamDescription
     */
    constructor() { 
        StreamDescription.initialize(this);
        DescribeStreamOutputStreamDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DescribeStreamOutputStreamDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DescribeStreamOutputStreamDescription} obj Optional instance to populate.
     * @return {module:model/DescribeStreamOutputStreamDescription} The populated <code>DescribeStreamOutputStreamDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DescribeStreamOutputStreamDescription();
            StreamDescription.constructFromObject(data, obj);

            if (data.hasOwnProperty('StreamArn')) {
                obj['StreamArn'] = ApiClient.convertToType(data['StreamArn'], 'String');
            }
            if (data.hasOwnProperty('StreamLabel')) {
                obj['StreamLabel'] = ApiClient.convertToType(data['StreamLabel'], 'String');
            }
            if (data.hasOwnProperty('StreamStatus')) {
                obj['StreamStatus'] = ApiClient.convertToType(data['StreamStatus'], StreamStatus);
            }
            if (data.hasOwnProperty('StreamViewType')) {
                obj['StreamViewType'] = ApiClient.convertToType(data['StreamViewType'], StreamViewType);
            }
            if (data.hasOwnProperty('CreationRequestDateTime')) {
                obj['CreationRequestDateTime'] = ApiClient.convertToType(data['CreationRequestDateTime'], 'Date');
            }
            if (data.hasOwnProperty('TableName')) {
                obj['TableName'] = ApiClient.convertToType(data['TableName'], 'String');
            }
            if (data.hasOwnProperty('KeySchema')) {
                obj['KeySchema'] = ApiClient.convertToType(data['KeySchema'], Array);
            }
            if (data.hasOwnProperty('Shards')) {
                obj['Shards'] = ApiClient.convertToType(data['Shards'], Array);
            }
            if (data.hasOwnProperty('LastEvaluatedShardId')) {
                obj['LastEvaluatedShardId'] = ApiClient.convertToType(data['LastEvaluatedShardId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DescribeStreamOutputStreamDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DescribeStreamOutputStreamDescription</code>.
     */
    static validateJSON(data) {
        // validate the optional field `StreamArn`
        if (data['StreamArn']) { // data not null
          String.validateJSON(data['StreamArn']);
        }
        // validate the optional field `StreamLabel`
        if (data['StreamLabel']) { // data not null
          String.validateJSON(data['StreamLabel']);
        }
        // validate the optional field `StreamStatus`
        if (data['StreamStatus']) { // data not null
          StreamStatus.validateJSON(data['StreamStatus']);
        }
        // validate the optional field `StreamViewType`
        if (data['StreamViewType']) { // data not null
          StreamViewType.validateJSON(data['StreamViewType']);
        }
        // validate the optional field `CreationRequestDateTime`
        if (data['CreationRequestDateTime']) { // data not null
          Date.validateJSON(data['CreationRequestDateTime']);
        }
        // validate the optional field `TableName`
        if (data['TableName']) { // data not null
          String.validateJSON(data['TableName']);
        }
        // validate the optional field `KeySchema`
        if (data['KeySchema']) { // data not null
          Array.validateJSON(data['KeySchema']);
        }
        // validate the optional field `Shards`
        if (data['Shards']) { // data not null
          Array.validateJSON(data['Shards']);
        }
        // validate the optional field `LastEvaluatedShardId`
        if (data['LastEvaluatedShardId']) { // data not null
          String.validateJSON(data['LastEvaluatedShardId']);
        }

        return true;
    }


}



/**
 * @member {String} StreamArn
 */
DescribeStreamOutputStreamDescription.prototype['StreamArn'] = undefined;

/**
 * @member {String} StreamLabel
 */
DescribeStreamOutputStreamDescription.prototype['StreamLabel'] = undefined;

/**
 * @member {module:model/StreamStatus} StreamStatus
 */
DescribeStreamOutputStreamDescription.prototype['StreamStatus'] = undefined;

/**
 * @member {module:model/StreamViewType} StreamViewType
 */
DescribeStreamOutputStreamDescription.prototype['StreamViewType'] = undefined;

/**
 * @member {Date} CreationRequestDateTime
 */
DescribeStreamOutputStreamDescription.prototype['CreationRequestDateTime'] = undefined;

/**
 * @member {String} TableName
 */
DescribeStreamOutputStreamDescription.prototype['TableName'] = undefined;

/**
 * @member {Array} KeySchema
 */
DescribeStreamOutputStreamDescription.prototype['KeySchema'] = undefined;

/**
 * @member {Array} Shards
 */
DescribeStreamOutputStreamDescription.prototype['Shards'] = undefined;

/**
 * @member {String} LastEvaluatedShardId
 */
DescribeStreamOutputStreamDescription.prototype['LastEvaluatedShardId'] = undefined;


// Implement StreamDescription interface:
/**
 * @member {String} StreamArn
 */
StreamDescription.prototype['StreamArn'] = undefined;
/**
 * @member {String} StreamLabel
 */
StreamDescription.prototype['StreamLabel'] = undefined;
/**
 * @member {module:model/StreamStatus} StreamStatus
 */
StreamDescription.prototype['StreamStatus'] = undefined;
/**
 * @member {module:model/StreamViewType} StreamViewType
 */
StreamDescription.prototype['StreamViewType'] = undefined;
/**
 * @member {Date} CreationRequestDateTime
 */
StreamDescription.prototype['CreationRequestDateTime'] = undefined;
/**
 * @member {String} TableName
 */
StreamDescription.prototype['TableName'] = undefined;
/**
 * @member {Array} KeySchema
 */
StreamDescription.prototype['KeySchema'] = undefined;
/**
 * @member {Array} Shards
 */
StreamDescription.prototype['Shards'] = undefined;
/**
 * @member {String} LastEvaluatedShardId
 */
StreamDescription.prototype['LastEvaluatedShardId'] = undefined;




export default DescribeStreamOutputStreamDescription;

