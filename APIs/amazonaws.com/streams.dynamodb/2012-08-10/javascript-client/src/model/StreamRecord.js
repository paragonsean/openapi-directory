/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StreamViewType from './StreamViewType';

/**
 * The StreamRecord model module.
 * @module model/StreamRecord
 * @version 2012-08-10
 */
class StreamRecord {
    /**
     * Constructs a new <code>StreamRecord</code>.
     * A description of a single data modification that was performed on an item in a DynamoDB table.
     * @alias module:model/StreamRecord
     */
    constructor() { 
        
        StreamRecord.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StreamRecord</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StreamRecord} obj Optional instance to populate.
     * @return {module:model/StreamRecord} The populated <code>StreamRecord</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StreamRecord();

            if (data.hasOwnProperty('ApproximateCreationDateTime')) {
                obj['ApproximateCreationDateTime'] = ApiClient.convertToType(data['ApproximateCreationDateTime'], 'Date');
            }
            if (data.hasOwnProperty('Keys')) {
                obj['Keys'] = ApiClient.convertToType(data['Keys'], Object);
            }
            if (data.hasOwnProperty('NewImage')) {
                obj['NewImage'] = ApiClient.convertToType(data['NewImage'], Object);
            }
            if (data.hasOwnProperty('OldImage')) {
                obj['OldImage'] = ApiClient.convertToType(data['OldImage'], Object);
            }
            if (data.hasOwnProperty('SequenceNumber')) {
                obj['SequenceNumber'] = ApiClient.convertToType(data['SequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('SizeBytes')) {
                obj['SizeBytes'] = ApiClient.convertToType(data['SizeBytes'], 'Number');
            }
            if (data.hasOwnProperty('StreamViewType')) {
                obj['StreamViewType'] = ApiClient.convertToType(data['StreamViewType'], StreamViewType);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StreamRecord</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StreamRecord</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ApproximateCreationDateTime`
        if (data['ApproximateCreationDateTime']) { // data not null
          Date.validateJSON(data['ApproximateCreationDateTime']);
        }
        // validate the optional field `Keys`
        if (data['Keys']) { // data not null
          Object.validateJSON(data['Keys']);
        }
        // validate the optional field `NewImage`
        if (data['NewImage']) { // data not null
          Object.validateJSON(data['NewImage']);
        }
        // validate the optional field `OldImage`
        if (data['OldImage']) { // data not null
          Object.validateJSON(data['OldImage']);
        }
        // validate the optional field `SequenceNumber`
        if (data['SequenceNumber']) { // data not null
          String.validateJSON(data['SequenceNumber']);
        }
        // validate the optional field `SizeBytes`
        if (data['SizeBytes']) { // data not null
          Number.validateJSON(data['SizeBytes']);
        }
        // validate the optional field `StreamViewType`
        if (data['StreamViewType']) { // data not null
          StreamViewType.validateJSON(data['StreamViewType']);
        }

        return true;
    }


}



/**
 * @member {Date} ApproximateCreationDateTime
 */
StreamRecord.prototype['ApproximateCreationDateTime'] = undefined;

/**
 * @member {Object} Keys
 */
StreamRecord.prototype['Keys'] = undefined;

/**
 * @member {Object} NewImage
 */
StreamRecord.prototype['NewImage'] = undefined;

/**
 * @member {Object} OldImage
 */
StreamRecord.prototype['OldImage'] = undefined;

/**
 * @member {String} SequenceNumber
 */
StreamRecord.prototype['SequenceNumber'] = undefined;

/**
 * @member {Number} SizeBytes
 */
StreamRecord.prototype['SizeBytes'] = undefined;

/**
 * @member {module:model/StreamViewType} StreamViewType
 */
StreamRecord.prototype['StreamViewType'] = undefined;






export default StreamRecord;

