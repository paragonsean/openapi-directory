/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AttributeValue model module.
 * @module model/AttributeValue
 * @version 2012-08-10
 */
class AttributeValue {
    /**
     * Constructs a new <code>AttributeValue</code>.
     * &lt;p&gt;Represents the data for an attribute.&lt;/p&gt; &lt;p&gt;Each attribute value is described as a name-value pair. The name is the data type, and the value is the data itself.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html#HowItWorks.DataTypes\&quot;&gt;Data Types&lt;/a&gt; in the &lt;i&gt;Amazon DynamoDB Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @alias module:model/AttributeValue
     */
    constructor() { 
        
        AttributeValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeValue} obj Optional instance to populate.
     * @return {module:model/AttributeValue} The populated <code>AttributeValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeValue();

            if (data.hasOwnProperty('S')) {
                obj['S'] = ApiClient.convertToType(data['S'], 'String');
            }
            if (data.hasOwnProperty('N')) {
                obj['N'] = ApiClient.convertToType(data['N'], 'String');
            }
            if (data.hasOwnProperty('B')) {
                obj['B'] = ApiClient.convertToType(data['B'], 'String');
            }
            if (data.hasOwnProperty('SS')) {
                obj['SS'] = ApiClient.convertToType(data['SS'], Array);
            }
            if (data.hasOwnProperty('NS')) {
                obj['NS'] = ApiClient.convertToType(data['NS'], Array);
            }
            if (data.hasOwnProperty('BS')) {
                obj['BS'] = ApiClient.convertToType(data['BS'], Array);
            }
            if (data.hasOwnProperty('M')) {
                obj['M'] = ApiClient.convertToType(data['M'], Object);
            }
            if (data.hasOwnProperty('L')) {
                obj['L'] = ApiClient.convertToType(data['L'], Array);
            }
            if (data.hasOwnProperty('NULL')) {
                obj['NULL'] = ApiClient.convertToType(data['NULL'], 'Boolean');
            }
            if (data.hasOwnProperty('BOOL')) {
                obj['BOOL'] = ApiClient.convertToType(data['BOOL'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `S`
        if (data['S']) { // data not null
          String.validateJSON(data['S']);
        }
        // validate the optional field `N`
        if (data['N']) { // data not null
          String.validateJSON(data['N']);
        }
        // validate the optional field `B`
        if (data['B']) { // data not null
          String.validateJSON(data['B']);
        }
        // validate the optional field `SS`
        if (data['SS']) { // data not null
          Array.validateJSON(data['SS']);
        }
        // validate the optional field `NS`
        if (data['NS']) { // data not null
          Array.validateJSON(data['NS']);
        }
        // validate the optional field `BS`
        if (data['BS']) { // data not null
          Array.validateJSON(data['BS']);
        }
        // validate the optional field `M`
        if (data['M']) { // data not null
          Object.validateJSON(data['M']);
        }
        // validate the optional field `L`
        if (data['L']) { // data not null
          Array.validateJSON(data['L']);
        }
        // validate the optional field `NULL`
        if (data['NULL']) { // data not null
          Boolean.validateJSON(data['NULL']);
        }
        // validate the optional field `BOOL`
        if (data['BOOL']) { // data not null
          Boolean.validateJSON(data['BOOL']);
        }

        return true;
    }


}



/**
 * @member {String} S
 */
AttributeValue.prototype['S'] = undefined;

/**
 * @member {String} N
 */
AttributeValue.prototype['N'] = undefined;

/**
 * @member {String} B
 */
AttributeValue.prototype['B'] = undefined;

/**
 * @member {Array} SS
 */
AttributeValue.prototype['SS'] = undefined;

/**
 * @member {Array} NS
 */
AttributeValue.prototype['NS'] = undefined;

/**
 * @member {Array} BS
 */
AttributeValue.prototype['BS'] = undefined;

/**
 * @member {Object} M
 */
AttributeValue.prototype['M'] = undefined;

/**
 * @member {Array} L
 */
AttributeValue.prototype['L'] = undefined;

/**
 * @member {Boolean} NULL
 */
AttributeValue.prototype['NULL'] = undefined;

/**
 * @member {Boolean} BOOL
 */
AttributeValue.prototype['BOOL'] = undefined;






export default AttributeValue;

