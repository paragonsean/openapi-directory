# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetRecordsInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shard_iterator: str=None, limit: int=None):
        """GetRecordsInput - a model defined in OpenAPI

        :param shard_iterator: The shard_iterator of this GetRecordsInput.
        :param limit: The limit of this GetRecordsInput.
        """
        self.openapi_types = {
            'shard_iterator': str,
            'limit': int
        }

        self.attribute_map = {
            'shard_iterator': 'ShardIterator',
            'limit': 'Limit'
        }

        self._shard_iterator = shard_iterator
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetRecordsInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetRecordsInput of this GetRecordsInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shard_iterator(self):
        """Gets the shard_iterator of this GetRecordsInput.


        :return: The shard_iterator of this GetRecordsInput.
        :rtype: str
        """
        return self._shard_iterator

    @shard_iterator.setter
    def shard_iterator(self, shard_iterator):
        """Sets the shard_iterator of this GetRecordsInput.


        :param shard_iterator: The shard_iterator of this GetRecordsInput.
        :type shard_iterator: str
        """
        if shard_iterator is None:
            raise ValueError("Invalid value for `shard_iterator`, must not be `None`")

        self._shard_iterator = shard_iterator

    @property
    def limit(self):
        """Gets the limit of this GetRecordsInput.


        :return: The limit of this GetRecordsInput.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetRecordsInput.


        :param limit: The limit of this GetRecordsInput.
        :type limit: int
        """

        self._limit = limit
