# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operation_type import OperationType
from openapi_server.models.record_dynamodb import RecordDynamodb
from openapi_server.models.record_user_identity import RecordUserIdentity
from openapi_server import util


class Record(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event_id: str=None, event_name: OperationType=None, event_version: str=None, event_source: str=None, aws_region: str=None, dynamodb: RecordDynamodb=None, user_identity: RecordUserIdentity=None):
        """Record - a model defined in OpenAPI

        :param event_id: The event_id of this Record.
        :param event_name: The event_name of this Record.
        :param event_version: The event_version of this Record.
        :param event_source: The event_source of this Record.
        :param aws_region: The aws_region of this Record.
        :param dynamodb: The dynamodb of this Record.
        :param user_identity: The user_identity of this Record.
        """
        self.openapi_types = {
            'event_id': str,
            'event_name': OperationType,
            'event_version': str,
            'event_source': str,
            'aws_region': str,
            'dynamodb': RecordDynamodb,
            'user_identity': RecordUserIdentity
        }

        self.attribute_map = {
            'event_id': 'eventID',
            'event_name': 'eventName',
            'event_version': 'eventVersion',
            'event_source': 'eventSource',
            'aws_region': 'awsRegion',
            'dynamodb': 'dynamodb',
            'user_identity': 'userIdentity'
        }

        self._event_id = event_id
        self._event_name = event_name
        self._event_version = event_version
        self._event_source = event_source
        self._aws_region = aws_region
        self._dynamodb = dynamodb
        self._user_identity = user_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Record':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Record of this Record.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_id(self):
        """Gets the event_id of this Record.


        :return: The event_id of this Record.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Record.


        :param event_id: The event_id of this Record.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def event_name(self):
        """Gets the event_name of this Record.


        :return: The event_name of this Record.
        :rtype: OperationType
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this Record.


        :param event_name: The event_name of this Record.
        :type event_name: OperationType
        """

        self._event_name = event_name

    @property
    def event_version(self):
        """Gets the event_version of this Record.


        :return: The event_version of this Record.
        :rtype: str
        """
        return self._event_version

    @event_version.setter
    def event_version(self, event_version):
        """Sets the event_version of this Record.


        :param event_version: The event_version of this Record.
        :type event_version: str
        """

        self._event_version = event_version

    @property
    def event_source(self):
        """Gets the event_source of this Record.


        :return: The event_source of this Record.
        :rtype: str
        """
        return self._event_source

    @event_source.setter
    def event_source(self, event_source):
        """Sets the event_source of this Record.


        :param event_source: The event_source of this Record.
        :type event_source: str
        """

        self._event_source = event_source

    @property
    def aws_region(self):
        """Gets the aws_region of this Record.


        :return: The aws_region of this Record.
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this Record.


        :param aws_region: The aws_region of this Record.
        :type aws_region: str
        """

        self._aws_region = aws_region

    @property
    def dynamodb(self):
        """Gets the dynamodb of this Record.


        :return: The dynamodb of this Record.
        :rtype: RecordDynamodb
        """
        return self._dynamodb

    @dynamodb.setter
    def dynamodb(self, dynamodb):
        """Sets the dynamodb of this Record.


        :param dynamodb: The dynamodb of this Record.
        :type dynamodb: RecordDynamodb
        """

        self._dynamodb = dynamodb

    @property
    def user_identity(self):
        """Gets the user_identity of this Record.


        :return: The user_identity of this Record.
        :rtype: RecordUserIdentity
        """
        return self._user_identity

    @user_identity.setter
    def user_identity(self, user_identity):
        """Sets the user_identity of this Record.


        :param user_identity: The user_identity of this Record.
        :type user_identity: RecordUserIdentity
        """

        self._user_identity = user_identity
