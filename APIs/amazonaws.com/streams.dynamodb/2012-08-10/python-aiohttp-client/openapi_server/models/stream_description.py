# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_status import StreamStatus
from openapi_server.models.stream_view_type import StreamViewType
from openapi_server import util


class StreamDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, stream_arn: str=None, stream_label: str=None, stream_status: StreamStatus=None, stream_view_type: StreamViewType=None, creation_request_date_time: datetime=None, table_name: str=None, key_schema: List=None, shards: List=None, last_evaluated_shard_id: str=None):
        """StreamDescription - a model defined in OpenAPI

        :param stream_arn: The stream_arn of this StreamDescription.
        :param stream_label: The stream_label of this StreamDescription.
        :param stream_status: The stream_status of this StreamDescription.
        :param stream_view_type: The stream_view_type of this StreamDescription.
        :param creation_request_date_time: The creation_request_date_time of this StreamDescription.
        :param table_name: The table_name of this StreamDescription.
        :param key_schema: The key_schema of this StreamDescription.
        :param shards: The shards of this StreamDescription.
        :param last_evaluated_shard_id: The last_evaluated_shard_id of this StreamDescription.
        """
        self.openapi_types = {
            'stream_arn': str,
            'stream_label': str,
            'stream_status': StreamStatus,
            'stream_view_type': StreamViewType,
            'creation_request_date_time': datetime,
            'table_name': str,
            'key_schema': List,
            'shards': List,
            'last_evaluated_shard_id': str
        }

        self.attribute_map = {
            'stream_arn': 'StreamArn',
            'stream_label': 'StreamLabel',
            'stream_status': 'StreamStatus',
            'stream_view_type': 'StreamViewType',
            'creation_request_date_time': 'CreationRequestDateTime',
            'table_name': 'TableName',
            'key_schema': 'KeySchema',
            'shards': 'Shards',
            'last_evaluated_shard_id': 'LastEvaluatedShardId'
        }

        self._stream_arn = stream_arn
        self._stream_label = stream_label
        self._stream_status = stream_status
        self._stream_view_type = stream_view_type
        self._creation_request_date_time = creation_request_date_time
        self._table_name = table_name
        self._key_schema = key_schema
        self._shards = shards
        self._last_evaluated_shard_id = last_evaluated_shard_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamDescription of this StreamDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def stream_arn(self):
        """Gets the stream_arn of this StreamDescription.


        :return: The stream_arn of this StreamDescription.
        :rtype: str
        """
        return self._stream_arn

    @stream_arn.setter
    def stream_arn(self, stream_arn):
        """Sets the stream_arn of this StreamDescription.


        :param stream_arn: The stream_arn of this StreamDescription.
        :type stream_arn: str
        """

        self._stream_arn = stream_arn

    @property
    def stream_label(self):
        """Gets the stream_label of this StreamDescription.


        :return: The stream_label of this StreamDescription.
        :rtype: str
        """
        return self._stream_label

    @stream_label.setter
    def stream_label(self, stream_label):
        """Sets the stream_label of this StreamDescription.


        :param stream_label: The stream_label of this StreamDescription.
        :type stream_label: str
        """

        self._stream_label = stream_label

    @property
    def stream_status(self):
        """Gets the stream_status of this StreamDescription.


        :return: The stream_status of this StreamDescription.
        :rtype: StreamStatus
        """
        return self._stream_status

    @stream_status.setter
    def stream_status(self, stream_status):
        """Sets the stream_status of this StreamDescription.


        :param stream_status: The stream_status of this StreamDescription.
        :type stream_status: StreamStatus
        """

        self._stream_status = stream_status

    @property
    def stream_view_type(self):
        """Gets the stream_view_type of this StreamDescription.


        :return: The stream_view_type of this StreamDescription.
        :rtype: StreamViewType
        """
        return self._stream_view_type

    @stream_view_type.setter
    def stream_view_type(self, stream_view_type):
        """Sets the stream_view_type of this StreamDescription.


        :param stream_view_type: The stream_view_type of this StreamDescription.
        :type stream_view_type: StreamViewType
        """

        self._stream_view_type = stream_view_type

    @property
    def creation_request_date_time(self):
        """Gets the creation_request_date_time of this StreamDescription.


        :return: The creation_request_date_time of this StreamDescription.
        :rtype: datetime
        """
        return self._creation_request_date_time

    @creation_request_date_time.setter
    def creation_request_date_time(self, creation_request_date_time):
        """Sets the creation_request_date_time of this StreamDescription.


        :param creation_request_date_time: The creation_request_date_time of this StreamDescription.
        :type creation_request_date_time: datetime
        """

        self._creation_request_date_time = creation_request_date_time

    @property
    def table_name(self):
        """Gets the table_name of this StreamDescription.


        :return: The table_name of this StreamDescription.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this StreamDescription.


        :param table_name: The table_name of this StreamDescription.
        :type table_name: str
        """

        self._table_name = table_name

    @property
    def key_schema(self):
        """Gets the key_schema of this StreamDescription.


        :return: The key_schema of this StreamDescription.
        :rtype: List
        """
        return self._key_schema

    @key_schema.setter
    def key_schema(self, key_schema):
        """Sets the key_schema of this StreamDescription.


        :param key_schema: The key_schema of this StreamDescription.
        :type key_schema: List
        """

        self._key_schema = key_schema

    @property
    def shards(self):
        """Gets the shards of this StreamDescription.


        :return: The shards of this StreamDescription.
        :rtype: List
        """
        return self._shards

    @shards.setter
    def shards(self, shards):
        """Sets the shards of this StreamDescription.


        :param shards: The shards of this StreamDescription.
        :type shards: List
        """

        self._shards = shards

    @property
    def last_evaluated_shard_id(self):
        """Gets the last_evaluated_shard_id of this StreamDescription.


        :return: The last_evaluated_shard_id of this StreamDescription.
        :rtype: str
        """
        return self._last_evaluated_shard_id

    @last_evaluated_shard_id.setter
    def last_evaluated_shard_id(self, last_evaluated_shard_id):
        """Sets the last_evaluated_shard_id of this StreamDescription.


        :param last_evaluated_shard_id: The last_evaluated_shard_id of this StreamDescription.
        :type last_evaluated_shard_id: str
        """

        self._last_evaluated_shard_id = last_evaluated_shard_id
