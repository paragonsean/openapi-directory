# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stream_view_type import StreamViewType
from openapi_server import util


class StreamRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approximate_creation_date_time: datetime=None, keys: Dict=None, new_image: Dict=None, old_image: Dict=None, sequence_number: str=None, size_bytes: int=None, stream_view_type: StreamViewType=None):
        """StreamRecord - a model defined in OpenAPI

        :param approximate_creation_date_time: The approximate_creation_date_time of this StreamRecord.
        :param keys: The keys of this StreamRecord.
        :param new_image: The new_image of this StreamRecord.
        :param old_image: The old_image of this StreamRecord.
        :param sequence_number: The sequence_number of this StreamRecord.
        :param size_bytes: The size_bytes of this StreamRecord.
        :param stream_view_type: The stream_view_type of this StreamRecord.
        """
        self.openapi_types = {
            'approximate_creation_date_time': datetime,
            'keys': Dict,
            'new_image': Dict,
            'old_image': Dict,
            'sequence_number': str,
            'size_bytes': int,
            'stream_view_type': StreamViewType
        }

        self.attribute_map = {
            'approximate_creation_date_time': 'ApproximateCreationDateTime',
            'keys': 'Keys',
            'new_image': 'NewImage',
            'old_image': 'OldImage',
            'sequence_number': 'SequenceNumber',
            'size_bytes': 'SizeBytes',
            'stream_view_type': 'StreamViewType'
        }

        self._approximate_creation_date_time = approximate_creation_date_time
        self._keys = keys
        self._new_image = new_image
        self._old_image = old_image
        self._sequence_number = sequence_number
        self._size_bytes = size_bytes
        self._stream_view_type = stream_view_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamRecord of this StreamRecord.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approximate_creation_date_time(self):
        """Gets the approximate_creation_date_time of this StreamRecord.


        :return: The approximate_creation_date_time of this StreamRecord.
        :rtype: datetime
        """
        return self._approximate_creation_date_time

    @approximate_creation_date_time.setter
    def approximate_creation_date_time(self, approximate_creation_date_time):
        """Sets the approximate_creation_date_time of this StreamRecord.


        :param approximate_creation_date_time: The approximate_creation_date_time of this StreamRecord.
        :type approximate_creation_date_time: datetime
        """

        self._approximate_creation_date_time = approximate_creation_date_time

    @property
    def keys(self):
        """Gets the keys of this StreamRecord.


        :return: The keys of this StreamRecord.
        :rtype: Dict
        """
        return self._keys

    @keys.setter
    def keys(self, keys):
        """Sets the keys of this StreamRecord.


        :param keys: The keys of this StreamRecord.
        :type keys: Dict
        """

        self._keys = keys

    @property
    def new_image(self):
        """Gets the new_image of this StreamRecord.


        :return: The new_image of this StreamRecord.
        :rtype: Dict
        """
        return self._new_image

    @new_image.setter
    def new_image(self, new_image):
        """Sets the new_image of this StreamRecord.


        :param new_image: The new_image of this StreamRecord.
        :type new_image: Dict
        """

        self._new_image = new_image

    @property
    def old_image(self):
        """Gets the old_image of this StreamRecord.


        :return: The old_image of this StreamRecord.
        :rtype: Dict
        """
        return self._old_image

    @old_image.setter
    def old_image(self, old_image):
        """Sets the old_image of this StreamRecord.


        :param old_image: The old_image of this StreamRecord.
        :type old_image: Dict
        """

        self._old_image = old_image

    @property
    def sequence_number(self):
        """Gets the sequence_number of this StreamRecord.


        :return: The sequence_number of this StreamRecord.
        :rtype: str
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this StreamRecord.


        :param sequence_number: The sequence_number of this StreamRecord.
        :type sequence_number: str
        """

        self._sequence_number = sequence_number

    @property
    def size_bytes(self):
        """Gets the size_bytes of this StreamRecord.


        :return: The size_bytes of this StreamRecord.
        :rtype: int
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this StreamRecord.


        :param size_bytes: The size_bytes of this StreamRecord.
        :type size_bytes: int
        """

        self._size_bytes = size_bytes

    @property
    def stream_view_type(self):
        """Gets the stream_view_type of this StreamRecord.


        :return: The stream_view_type of this StreamRecord.
        :rtype: StreamViewType
        """
        return self._stream_view_type

    @stream_view_type.setter
    def stream_view_type(self, stream_view_type):
        """Sets the stream_view_type of this StreamRecord.


        :param stream_view_type: The stream_view_type of this StreamRecord.
        :type stream_view_type: StreamViewType
        """

        self._stream_view_type = stream_view_type
