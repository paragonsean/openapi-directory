/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStreamInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStreamInput::OAIDescribeStreamInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStreamInput::OAIDescribeStreamInput() {
    this->initializeModel();
}

OAIDescribeStreamInput::~OAIDescribeStreamInput() {}

void OAIDescribeStreamInput::initializeModel() {

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_exclusive_start_shard_id_isSet = false;
    m_exclusive_start_shard_id_isValid = false;
}

void OAIDescribeStreamInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStreamInput::fromJsonObject(QJsonObject json) {

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamArn")]);
    m_stream_arn_isSet = !json[QString("StreamArn")].isNull() && m_stream_arn_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_exclusive_start_shard_id_isValid = ::OpenAPI::fromJsonValue(m_exclusive_start_shard_id, json[QString("ExclusiveStartShardId")]);
    m_exclusive_start_shard_id_isSet = !json[QString("ExclusiveStartShardId")].isNull() && m_exclusive_start_shard_id_isValid;
}

QString OAIDescribeStreamInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStreamInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamArn"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_exclusive_start_shard_id_isSet) {
        obj.insert(QString("ExclusiveStartShardId"), ::OpenAPI::toJsonValue(m_exclusive_start_shard_id));
    }
    return obj;
}

QString OAIDescribeStreamInput::getStreamArn() const {
    return m_stream_arn;
}
void OAIDescribeStreamInput::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIDescribeStreamInput::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIDescribeStreamInput::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

qint32 OAIDescribeStreamInput::getLimit() const {
    return m_limit;
}
void OAIDescribeStreamInput::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIDescribeStreamInput::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIDescribeStreamInput::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIDescribeStreamInput::getExclusiveStartShardId() const {
    return m_exclusive_start_shard_id;
}
void OAIDescribeStreamInput::setExclusiveStartShardId(const QString &exclusive_start_shard_id) {
    m_exclusive_start_shard_id = exclusive_start_shard_id;
    m_exclusive_start_shard_id_isSet = true;
}

bool OAIDescribeStreamInput::is_exclusive_start_shard_id_Set() const{
    return m_exclusive_start_shard_id_isSet;
}

bool OAIDescribeStreamInput::is_exclusive_start_shard_id_Valid() const{
    return m_exclusive_start_shard_id_isValid;
}

bool OAIDescribeStreamInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_start_shard_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStreamInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stream_arn_isValid && true;
}

} // namespace OpenAPI
