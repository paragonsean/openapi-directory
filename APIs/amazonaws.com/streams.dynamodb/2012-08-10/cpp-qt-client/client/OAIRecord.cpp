/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecord::OAIRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecord::OAIRecord() {
    this->initializeModel();
}

OAIRecord::~OAIRecord() {}

void OAIRecord::initializeModel() {

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_event_version_isSet = false;
    m_event_version_isValid = false;

    m_event_source_isSet = false;
    m_event_source_isValid = false;

    m_aws_region_isSet = false;
    m_aws_region_isValid = false;

    m_dynamodb_isSet = false;
    m_dynamodb_isValid = false;

    m_user_identity_isSet = false;
    m_user_identity_isValid = false;
}

void OAIRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecord::fromJsonObject(QJsonObject json) {

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventID")]);
    m_event_id_isSet = !json[QString("eventID")].isNull() && m_event_id_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_event_version_isValid = ::OpenAPI::fromJsonValue(m_event_version, json[QString("eventVersion")]);
    m_event_version_isSet = !json[QString("eventVersion")].isNull() && m_event_version_isValid;

    m_event_source_isValid = ::OpenAPI::fromJsonValue(m_event_source, json[QString("eventSource")]);
    m_event_source_isSet = !json[QString("eventSource")].isNull() && m_event_source_isValid;

    m_aws_region_isValid = ::OpenAPI::fromJsonValue(m_aws_region, json[QString("awsRegion")]);
    m_aws_region_isSet = !json[QString("awsRegion")].isNull() && m_aws_region_isValid;

    m_dynamodb_isValid = ::OpenAPI::fromJsonValue(m_dynamodb, json[QString("dynamodb")]);
    m_dynamodb_isSet = !json[QString("dynamodb")].isNull() && m_dynamodb_isValid;

    m_user_identity_isValid = ::OpenAPI::fromJsonValue(m_user_identity, json[QString("userIdentity")]);
    m_user_identity_isSet = !json[QString("userIdentity")].isNull() && m_user_identity_isValid;
}

QString OAIRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_event_id_isSet) {
        obj.insert(QString("eventID"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_event_name.isSet()) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_event_version_isSet) {
        obj.insert(QString("eventVersion"), ::OpenAPI::toJsonValue(m_event_version));
    }
    if (m_event_source_isSet) {
        obj.insert(QString("eventSource"), ::OpenAPI::toJsonValue(m_event_source));
    }
    if (m_aws_region_isSet) {
        obj.insert(QString("awsRegion"), ::OpenAPI::toJsonValue(m_aws_region));
    }
    if (m_dynamodb.isSet()) {
        obj.insert(QString("dynamodb"), ::OpenAPI::toJsonValue(m_dynamodb));
    }
    if (m_user_identity.isSet()) {
        obj.insert(QString("userIdentity"), ::OpenAPI::toJsonValue(m_user_identity));
    }
    return obj;
}

QString OAIRecord::getEventId() const {
    return m_event_id;
}
void OAIRecord::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAIRecord::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAIRecord::is_event_id_Valid() const{
    return m_event_id_isValid;
}

OAIOperationType OAIRecord::getEventName() const {
    return m_event_name;
}
void OAIRecord::setEventName(const OAIOperationType &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIRecord::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIRecord::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QString OAIRecord::getEventVersion() const {
    return m_event_version;
}
void OAIRecord::setEventVersion(const QString &event_version) {
    m_event_version = event_version;
    m_event_version_isSet = true;
}

bool OAIRecord::is_event_version_Set() const{
    return m_event_version_isSet;
}

bool OAIRecord::is_event_version_Valid() const{
    return m_event_version_isValid;
}

QString OAIRecord::getEventSource() const {
    return m_event_source;
}
void OAIRecord::setEventSource(const QString &event_source) {
    m_event_source = event_source;
    m_event_source_isSet = true;
}

bool OAIRecord::is_event_source_Set() const{
    return m_event_source_isSet;
}

bool OAIRecord::is_event_source_Valid() const{
    return m_event_source_isValid;
}

QString OAIRecord::getAwsRegion() const {
    return m_aws_region;
}
void OAIRecord::setAwsRegion(const QString &aws_region) {
    m_aws_region = aws_region;
    m_aws_region_isSet = true;
}

bool OAIRecord::is_aws_region_Set() const{
    return m_aws_region_isSet;
}

bool OAIRecord::is_aws_region_Valid() const{
    return m_aws_region_isValid;
}

OAIRecord_dynamodb OAIRecord::getDynamodb() const {
    return m_dynamodb;
}
void OAIRecord::setDynamodb(const OAIRecord_dynamodb &dynamodb) {
    m_dynamodb = dynamodb;
    m_dynamodb_isSet = true;
}

bool OAIRecord::is_dynamodb_Set() const{
    return m_dynamodb_isSet;
}

bool OAIRecord::is_dynamodb_Valid() const{
    return m_dynamodb_isValid;
}

OAIRecord_userIdentity OAIRecord::getUserIdentity() const {
    return m_user_identity;
}
void OAIRecord::setUserIdentity(const OAIRecord_userIdentity &user_identity) {
    m_user_identity = user_identity;
    m_user_identity_isSet = true;
}

bool OAIRecord::is_user_identity_Set() const{
    return m_user_identity_isSet;
}

bool OAIRecord::is_user_identity_Valid() const{
    return m_user_identity_isValid;
}

bool OAIRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aws_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamodb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
