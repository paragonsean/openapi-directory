/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShard::OAIShard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShard::OAIShard() {
    this->initializeModel();
}

OAIShard::~OAIShard() {}

void OAIShard::initializeModel() {

    m_shard_id_isSet = false;
    m_shard_id_isValid = false;

    m_sequence_number_range_isSet = false;
    m_sequence_number_range_isValid = false;

    m_parent_shard_id_isSet = false;
    m_parent_shard_id_isValid = false;
}

void OAIShard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShard::fromJsonObject(QJsonObject json) {

    m_shard_id_isValid = ::OpenAPI::fromJsonValue(m_shard_id, json[QString("ShardId")]);
    m_shard_id_isSet = !json[QString("ShardId")].isNull() && m_shard_id_isValid;

    m_sequence_number_range_isValid = ::OpenAPI::fromJsonValue(m_sequence_number_range, json[QString("SequenceNumberRange")]);
    m_sequence_number_range_isSet = !json[QString("SequenceNumberRange")].isNull() && m_sequence_number_range_isValid;

    m_parent_shard_id_isValid = ::OpenAPI::fromJsonValue(m_parent_shard_id, json[QString("ParentShardId")]);
    m_parent_shard_id_isSet = !json[QString("ParentShardId")].isNull() && m_parent_shard_id_isValid;
}

QString OAIShard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShard::asJsonObject() const {
    QJsonObject obj;
    if (m_shard_id_isSet) {
        obj.insert(QString("ShardId"), ::OpenAPI::toJsonValue(m_shard_id));
    }
    if (m_sequence_number_range.isSet()) {
        obj.insert(QString("SequenceNumberRange"), ::OpenAPI::toJsonValue(m_sequence_number_range));
    }
    if (m_parent_shard_id_isSet) {
        obj.insert(QString("ParentShardId"), ::OpenAPI::toJsonValue(m_parent_shard_id));
    }
    return obj;
}

QString OAIShard::getShardId() const {
    return m_shard_id;
}
void OAIShard::setShardId(const QString &shard_id) {
    m_shard_id = shard_id;
    m_shard_id_isSet = true;
}

bool OAIShard::is_shard_id_Set() const{
    return m_shard_id_isSet;
}

bool OAIShard::is_shard_id_Valid() const{
    return m_shard_id_isValid;
}

OAIShard_SequenceNumberRange OAIShard::getSequenceNumberRange() const {
    return m_sequence_number_range;
}
void OAIShard::setSequenceNumberRange(const OAIShard_SequenceNumberRange &sequence_number_range) {
    m_sequence_number_range = sequence_number_range;
    m_sequence_number_range_isSet = true;
}

bool OAIShard::is_sequence_number_range_Set() const{
    return m_sequence_number_range_isSet;
}

bool OAIShard::is_sequence_number_range_Valid() const{
    return m_sequence_number_range_isValid;
}

QString OAIShard::getParentShardId() const {
    return m_parent_shard_id;
}
void OAIShard::setParentShardId(const QString &parent_shard_id) {
    m_parent_shard_id = parent_shard_id;
    m_parent_shard_id_isSet = true;
}

bool OAIShard::is_parent_shard_id_Set() const{
    return m_parent_shard_id_isSet;
}

bool OAIShard::is_parent_shard_id_Valid() const{
    return m_parent_shard_id_isValid;
}

bool OAIShard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_shard_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
