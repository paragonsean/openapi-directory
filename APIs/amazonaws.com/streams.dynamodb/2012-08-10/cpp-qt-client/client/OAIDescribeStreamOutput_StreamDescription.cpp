/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeStreamOutput_StreamDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeStreamOutput_StreamDescription::OAIDescribeStreamOutput_StreamDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeStreamOutput_StreamDescription::OAIDescribeStreamOutput_StreamDescription() {
    this->initializeModel();
}

OAIDescribeStreamOutput_StreamDescription::~OAIDescribeStreamOutput_StreamDescription() {}

void OAIDescribeStreamOutput_StreamDescription::initializeModel() {

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_stream_label_isSet = false;
    m_stream_label_isValid = false;

    m_stream_status_isSet = false;
    m_stream_status_isValid = false;

    m_stream_view_type_isSet = false;
    m_stream_view_type_isValid = false;

    m_creation_request_date_time_isSet = false;
    m_creation_request_date_time_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_key_schema_isSet = false;
    m_key_schema_isValid = false;

    m_shards_isSet = false;
    m_shards_isValid = false;

    m_last_evaluated_shard_id_isSet = false;
    m_last_evaluated_shard_id_isValid = false;
}

void OAIDescribeStreamOutput_StreamDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeStreamOutput_StreamDescription::fromJsonObject(QJsonObject json) {

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamArn")]);
    m_stream_arn_isSet = !json[QString("StreamArn")].isNull() && m_stream_arn_isValid;

    m_stream_label_isValid = ::OpenAPI::fromJsonValue(m_stream_label, json[QString("StreamLabel")]);
    m_stream_label_isSet = !json[QString("StreamLabel")].isNull() && m_stream_label_isValid;

    m_stream_status_isValid = ::OpenAPI::fromJsonValue(m_stream_status, json[QString("StreamStatus")]);
    m_stream_status_isSet = !json[QString("StreamStatus")].isNull() && m_stream_status_isValid;

    m_stream_view_type_isValid = ::OpenAPI::fromJsonValue(m_stream_view_type, json[QString("StreamViewType")]);
    m_stream_view_type_isSet = !json[QString("StreamViewType")].isNull() && m_stream_view_type_isValid;

    m_creation_request_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_request_date_time, json[QString("CreationRequestDateTime")]);
    m_creation_request_date_time_isSet = !json[QString("CreationRequestDateTime")].isNull() && m_creation_request_date_time_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_key_schema_isValid = ::OpenAPI::fromJsonValue(m_key_schema, json[QString("KeySchema")]);
    m_key_schema_isSet = !json[QString("KeySchema")].isNull() && m_key_schema_isValid;

    m_shards_isValid = ::OpenAPI::fromJsonValue(m_shards, json[QString("Shards")]);
    m_shards_isSet = !json[QString("Shards")].isNull() && m_shards_isValid;

    m_last_evaluated_shard_id_isValid = ::OpenAPI::fromJsonValue(m_last_evaluated_shard_id, json[QString("LastEvaluatedShardId")]);
    m_last_evaluated_shard_id_isSet = !json[QString("LastEvaluatedShardId")].isNull() && m_last_evaluated_shard_id_isValid;
}

QString OAIDescribeStreamOutput_StreamDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeStreamOutput_StreamDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamArn"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_stream_label_isSet) {
        obj.insert(QString("StreamLabel"), ::OpenAPI::toJsonValue(m_stream_label));
    }
    if (m_stream_status.isSet()) {
        obj.insert(QString("StreamStatus"), ::OpenAPI::toJsonValue(m_stream_status));
    }
    if (m_stream_view_type.isSet()) {
        obj.insert(QString("StreamViewType"), ::OpenAPI::toJsonValue(m_stream_view_type));
    }
    if (m_creation_request_date_time_isSet) {
        obj.insert(QString("CreationRequestDateTime"), ::OpenAPI::toJsonValue(m_creation_request_date_time));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_key_schema.isSet()) {
        obj.insert(QString("KeySchema"), ::OpenAPI::toJsonValue(m_key_schema));
    }
    if (m_shards.isSet()) {
        obj.insert(QString("Shards"), ::OpenAPI::toJsonValue(m_shards));
    }
    if (m_last_evaluated_shard_id_isSet) {
        obj.insert(QString("LastEvaluatedShardId"), ::OpenAPI::toJsonValue(m_last_evaluated_shard_id));
    }
    return obj;
}

QString OAIDescribeStreamOutput_StreamDescription::getStreamArn() const {
    return m_stream_arn;
}
void OAIDescribeStreamOutput_StreamDescription::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

QString OAIDescribeStreamOutput_StreamDescription::getStreamLabel() const {
    return m_stream_label;
}
void OAIDescribeStreamOutput_StreamDescription::setStreamLabel(const QString &stream_label) {
    m_stream_label = stream_label;
    m_stream_label_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_stream_label_Set() const{
    return m_stream_label_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_stream_label_Valid() const{
    return m_stream_label_isValid;
}

OAIStreamStatus OAIDescribeStreamOutput_StreamDescription::getStreamStatus() const {
    return m_stream_status;
}
void OAIDescribeStreamOutput_StreamDescription::setStreamStatus(const OAIStreamStatus &stream_status) {
    m_stream_status = stream_status;
    m_stream_status_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_stream_status_Set() const{
    return m_stream_status_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_stream_status_Valid() const{
    return m_stream_status_isValid;
}

OAIStreamViewType OAIDescribeStreamOutput_StreamDescription::getStreamViewType() const {
    return m_stream_view_type;
}
void OAIDescribeStreamOutput_StreamDescription::setStreamViewType(const OAIStreamViewType &stream_view_type) {
    m_stream_view_type = stream_view_type;
    m_stream_view_type_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_stream_view_type_Set() const{
    return m_stream_view_type_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_stream_view_type_Valid() const{
    return m_stream_view_type_isValid;
}

QDateTime OAIDescribeStreamOutput_StreamDescription::getCreationRequestDateTime() const {
    return m_creation_request_date_time;
}
void OAIDescribeStreamOutput_StreamDescription::setCreationRequestDateTime(const QDateTime &creation_request_date_time) {
    m_creation_request_date_time = creation_request_date_time;
    m_creation_request_date_time_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_creation_request_date_time_Set() const{
    return m_creation_request_date_time_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_creation_request_date_time_Valid() const{
    return m_creation_request_date_time_isValid;
}

QString OAIDescribeStreamOutput_StreamDescription::getTableName() const {
    return m_table_name;
}
void OAIDescribeStreamOutput_StreamDescription::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_table_name_Valid() const{
    return m_table_name_isValid;
}

QList OAIDescribeStreamOutput_StreamDescription::getKeySchema() const {
    return m_key_schema;
}
void OAIDescribeStreamOutput_StreamDescription::setKeySchema(const QList &key_schema) {
    m_key_schema = key_schema;
    m_key_schema_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_key_schema_Set() const{
    return m_key_schema_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_key_schema_Valid() const{
    return m_key_schema_isValid;
}

QList OAIDescribeStreamOutput_StreamDescription::getShards() const {
    return m_shards;
}
void OAIDescribeStreamOutput_StreamDescription::setShards(const QList &shards) {
    m_shards = shards;
    m_shards_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_shards_Set() const{
    return m_shards_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_shards_Valid() const{
    return m_shards_isValid;
}

QString OAIDescribeStreamOutput_StreamDescription::getLastEvaluatedShardId() const {
    return m_last_evaluated_shard_id;
}
void OAIDescribeStreamOutput_StreamDescription::setLastEvaluatedShardId(const QString &last_evaluated_shard_id) {
    m_last_evaluated_shard_id = last_evaluated_shard_id;
    m_last_evaluated_shard_id_isSet = true;
}

bool OAIDescribeStreamOutput_StreamDescription::is_last_evaluated_shard_id_Set() const{
    return m_last_evaluated_shard_id_isSet;
}

bool OAIDescribeStreamOutput_StreamDescription::is_last_evaluated_shard_id_Valid() const{
    return m_last_evaluated_shard_id_isValid;
}

bool OAIDescribeStreamOutput_StreamDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_view_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_request_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shards.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_evaluated_shard_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeStreamOutput_StreamDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
