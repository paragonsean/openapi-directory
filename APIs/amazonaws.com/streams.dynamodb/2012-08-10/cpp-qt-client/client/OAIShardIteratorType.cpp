/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShardIteratorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShardIteratorType::OAIShardIteratorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShardIteratorType::OAIShardIteratorType() {
    this->initializeModel();
}

OAIShardIteratorType::~OAIShardIteratorType() {}

void OAIShardIteratorType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIShardIteratorType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIShardIteratorType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("TRIM_HORIZON", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShardIteratorType::TRIM_HORIZON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LATEST", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShardIteratorType::LATEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AT_SEQUENCE_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShardIteratorType::AT_SEQUENCE_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AFTER_SEQUENCE_NUMBER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIShardIteratorType::AFTER_SEQUENCE_NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIShardIteratorType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIShardIteratorType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIShardIteratorType::TRIM_HORIZON:
            val = "TRIM_HORIZON";
            break;
        case eOAIShardIteratorType::LATEST:
            val = "LATEST";
            break;
        case eOAIShardIteratorType::AT_SEQUENCE_NUMBER:
            val = "AT_SEQUENCE_NUMBER";
            break;
        case eOAIShardIteratorType::AFTER_SEQUENCE_NUMBER:
            val = "AFTER_SEQUENCE_NUMBER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIShardIteratorType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIShardIteratorType::eOAIShardIteratorType OAIShardIteratorType::getValue() const {
    return m_value;
}

void OAIShardIteratorType::setValue(const OAIShardIteratorType::eOAIShardIteratorType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIShardIteratorType::isSet() const {
    
    return m_value_isSet;
}

bool OAIShardIteratorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
