/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetShardIteratorInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetShardIteratorInput::OAIGetShardIteratorInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetShardIteratorInput::OAIGetShardIteratorInput() {
    this->initializeModel();
}

OAIGetShardIteratorInput::~OAIGetShardIteratorInput() {}

void OAIGetShardIteratorInput::initializeModel() {

    m_stream_arn_isSet = false;
    m_stream_arn_isValid = false;

    m_shard_id_isSet = false;
    m_shard_id_isValid = false;

    m_shard_iterator_type_isSet = false;
    m_shard_iterator_type_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;
}

void OAIGetShardIteratorInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetShardIteratorInput::fromJsonObject(QJsonObject json) {

    m_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_stream_arn, json[QString("StreamArn")]);
    m_stream_arn_isSet = !json[QString("StreamArn")].isNull() && m_stream_arn_isValid;

    m_shard_id_isValid = ::OpenAPI::fromJsonValue(m_shard_id, json[QString("ShardId")]);
    m_shard_id_isSet = !json[QString("ShardId")].isNull() && m_shard_id_isValid;

    m_shard_iterator_type_isValid = ::OpenAPI::fromJsonValue(m_shard_iterator_type, json[QString("ShardIteratorType")]);
    m_shard_iterator_type_isSet = !json[QString("ShardIteratorType")].isNull() && m_shard_iterator_type_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("SequenceNumber")]);
    m_sequence_number_isSet = !json[QString("SequenceNumber")].isNull() && m_sequence_number_isValid;
}

QString OAIGetShardIteratorInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetShardIteratorInput::asJsonObject() const {
    QJsonObject obj;
    if (m_stream_arn_isSet) {
        obj.insert(QString("StreamArn"), ::OpenAPI::toJsonValue(m_stream_arn));
    }
    if (m_shard_id_isSet) {
        obj.insert(QString("ShardId"), ::OpenAPI::toJsonValue(m_shard_id));
    }
    if (m_shard_iterator_type.isSet()) {
        obj.insert(QString("ShardIteratorType"), ::OpenAPI::toJsonValue(m_shard_iterator_type));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("SequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    return obj;
}

QString OAIGetShardIteratorInput::getStreamArn() const {
    return m_stream_arn;
}
void OAIGetShardIteratorInput::setStreamArn(const QString &stream_arn) {
    m_stream_arn = stream_arn;
    m_stream_arn_isSet = true;
}

bool OAIGetShardIteratorInput::is_stream_arn_Set() const{
    return m_stream_arn_isSet;
}

bool OAIGetShardIteratorInput::is_stream_arn_Valid() const{
    return m_stream_arn_isValid;
}

QString OAIGetShardIteratorInput::getShardId() const {
    return m_shard_id;
}
void OAIGetShardIteratorInput::setShardId(const QString &shard_id) {
    m_shard_id = shard_id;
    m_shard_id_isSet = true;
}

bool OAIGetShardIteratorInput::is_shard_id_Set() const{
    return m_shard_id_isSet;
}

bool OAIGetShardIteratorInput::is_shard_id_Valid() const{
    return m_shard_id_isValid;
}

OAIShardIteratorType OAIGetShardIteratorInput::getShardIteratorType() const {
    return m_shard_iterator_type;
}
void OAIGetShardIteratorInput::setShardIteratorType(const OAIShardIteratorType &shard_iterator_type) {
    m_shard_iterator_type = shard_iterator_type;
    m_shard_iterator_type_isSet = true;
}

bool OAIGetShardIteratorInput::is_shard_iterator_type_Set() const{
    return m_shard_iterator_type_isSet;
}

bool OAIGetShardIteratorInput::is_shard_iterator_type_Valid() const{
    return m_shard_iterator_type_isValid;
}

QString OAIGetShardIteratorInput::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIGetShardIteratorInput::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIGetShardIteratorInput::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIGetShardIteratorInput::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

bool OAIGetShardIteratorInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shard_iterator_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetShardIteratorInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stream_arn_isValid && m_shard_id_isValid && m_shard_iterator_type_isValid && true;
}

} // namespace OpenAPI
