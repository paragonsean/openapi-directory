/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRecordsOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRecordsOutput::OAIGetRecordsOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRecordsOutput::OAIGetRecordsOutput() {
    this->initializeModel();
}

OAIGetRecordsOutput::~OAIGetRecordsOutput() {}

void OAIGetRecordsOutput::initializeModel() {

    m_records_isSet = false;
    m_records_isValid = false;

    m_next_shard_iterator_isSet = false;
    m_next_shard_iterator_isValid = false;
}

void OAIGetRecordsOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRecordsOutput::fromJsonObject(QJsonObject json) {

    m_records_isValid = ::OpenAPI::fromJsonValue(m_records, json[QString("Records")]);
    m_records_isSet = !json[QString("Records")].isNull() && m_records_isValid;

    m_next_shard_iterator_isValid = ::OpenAPI::fromJsonValue(m_next_shard_iterator, json[QString("NextShardIterator")]);
    m_next_shard_iterator_isSet = !json[QString("NextShardIterator")].isNull() && m_next_shard_iterator_isValid;
}

QString OAIGetRecordsOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRecordsOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_records.isSet()) {
        obj.insert(QString("Records"), ::OpenAPI::toJsonValue(m_records));
    }
    if (m_next_shard_iterator_isSet) {
        obj.insert(QString("NextShardIterator"), ::OpenAPI::toJsonValue(m_next_shard_iterator));
    }
    return obj;
}

QList OAIGetRecordsOutput::getRecords() const {
    return m_records;
}
void OAIGetRecordsOutput::setRecords(const QList &records) {
    m_records = records;
    m_records_isSet = true;
}

bool OAIGetRecordsOutput::is_records_Set() const{
    return m_records_isSet;
}

bool OAIGetRecordsOutput::is_records_Valid() const{
    return m_records_isValid;
}

QString OAIGetRecordsOutput::getNextShardIterator() const {
    return m_next_shard_iterator;
}
void OAIGetRecordsOutput::setNextShardIterator(const QString &next_shard_iterator) {
    m_next_shard_iterator = next_shard_iterator;
    m_next_shard_iterator_isSet = true;
}

bool OAIGetRecordsOutput::is_next_shard_iterator_Set() const{
    return m_next_shard_iterator_isSet;
}

bool OAIGetRecordsOutput::is_next_shard_iterator_Valid() const{
    return m_next_shard_iterator_isValid;
}

bool OAIGetRecordsOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_records.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_shard_iterator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRecordsOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
