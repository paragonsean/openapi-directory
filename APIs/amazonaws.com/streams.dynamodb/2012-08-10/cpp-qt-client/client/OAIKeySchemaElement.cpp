/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeySchemaElement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeySchemaElement::OAIKeySchemaElement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeySchemaElement::OAIKeySchemaElement() {
    this->initializeModel();
}

OAIKeySchemaElement::~OAIKeySchemaElement() {}

void OAIKeySchemaElement::initializeModel() {

    m_attribute_name_isSet = false;
    m_attribute_name_isValid = false;

    m_key_type_isSet = false;
    m_key_type_isValid = false;
}

void OAIKeySchemaElement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeySchemaElement::fromJsonObject(QJsonObject json) {

    m_attribute_name_isValid = ::OpenAPI::fromJsonValue(m_attribute_name, json[QString("AttributeName")]);
    m_attribute_name_isSet = !json[QString("AttributeName")].isNull() && m_attribute_name_isValid;

    m_key_type_isValid = ::OpenAPI::fromJsonValue(m_key_type, json[QString("KeyType")]);
    m_key_type_isSet = !json[QString("KeyType")].isNull() && m_key_type_isValid;
}

QString OAIKeySchemaElement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeySchemaElement::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_name_isSet) {
        obj.insert(QString("AttributeName"), ::OpenAPI::toJsonValue(m_attribute_name));
    }
    if (m_key_type.isSet()) {
        obj.insert(QString("KeyType"), ::OpenAPI::toJsonValue(m_key_type));
    }
    return obj;
}

QString OAIKeySchemaElement::getAttributeName() const {
    return m_attribute_name;
}
void OAIKeySchemaElement::setAttributeName(const QString &attribute_name) {
    m_attribute_name = attribute_name;
    m_attribute_name_isSet = true;
}

bool OAIKeySchemaElement::is_attribute_name_Set() const{
    return m_attribute_name_isSet;
}

bool OAIKeySchemaElement::is_attribute_name_Valid() const{
    return m_attribute_name_isValid;
}

OAIKeyType OAIKeySchemaElement::getKeyType() const {
    return m_key_type;
}
void OAIKeySchemaElement::setKeyType(const OAIKeyType &key_type) {
    m_key_type = key_type;
    m_key_type_isSet = true;
}

bool OAIKeySchemaElement::is_key_type_Set() const{
    return m_key_type_isSet;
}

bool OAIKeySchemaElement::is_key_type_Valid() const{
    return m_key_type_isValid;
}

bool OAIKeySchemaElement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeySchemaElement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attribute_name_isValid && m_key_type_isValid && true;
}

} // namespace OpenAPI
