/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListStreamsInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListStreamsInput::OAIListStreamsInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListStreamsInput::OAIListStreamsInput() {
    this->initializeModel();
}

OAIListStreamsInput::~OAIListStreamsInput() {}

void OAIListStreamsInput::initializeModel() {

    m_table_name_isSet = false;
    m_table_name_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_exclusive_start_stream_arn_isSet = false;
    m_exclusive_start_stream_arn_isValid = false;
}

void OAIListStreamsInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListStreamsInput::fromJsonObject(QJsonObject json) {

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("TableName")]);
    m_table_name_isSet = !json[QString("TableName")].isNull() && m_table_name_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_exclusive_start_stream_arn_isValid = ::OpenAPI::fromJsonValue(m_exclusive_start_stream_arn, json[QString("ExclusiveStartStreamArn")]);
    m_exclusive_start_stream_arn_isSet = !json[QString("ExclusiveStartStreamArn")].isNull() && m_exclusive_start_stream_arn_isValid;
}

QString OAIListStreamsInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListStreamsInput::asJsonObject() const {
    QJsonObject obj;
    if (m_table_name_isSet) {
        obj.insert(QString("TableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_exclusive_start_stream_arn_isSet) {
        obj.insert(QString("ExclusiveStartStreamArn"), ::OpenAPI::toJsonValue(m_exclusive_start_stream_arn));
    }
    return obj;
}

QString OAIListStreamsInput::getTableName() const {
    return m_table_name;
}
void OAIListStreamsInput::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAIListStreamsInput::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAIListStreamsInput::is_table_name_Valid() const{
    return m_table_name_isValid;
}

qint32 OAIListStreamsInput::getLimit() const {
    return m_limit;
}
void OAIListStreamsInput::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIListStreamsInput::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIListStreamsInput::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIListStreamsInput::getExclusiveStartStreamArn() const {
    return m_exclusive_start_stream_arn;
}
void OAIListStreamsInput::setExclusiveStartStreamArn(const QString &exclusive_start_stream_arn) {
    m_exclusive_start_stream_arn = exclusive_start_stream_arn;
    m_exclusive_start_stream_arn_isSet = true;
}

bool OAIListStreamsInput::is_exclusive_start_stream_arn_Set() const{
    return m_exclusive_start_stream_arn_isSet;
}

bool OAIListStreamsInput::is_exclusive_start_stream_arn_Valid() const{
    return m_exclusive_start_stream_arn_isValid;
}

bool OAIListStreamsInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exclusive_start_stream_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListStreamsInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
