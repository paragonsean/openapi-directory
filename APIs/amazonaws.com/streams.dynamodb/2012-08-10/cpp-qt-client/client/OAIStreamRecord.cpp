/**
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStreamRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStreamRecord::OAIStreamRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStreamRecord::OAIStreamRecord() {
    this->initializeModel();
}

OAIStreamRecord::~OAIStreamRecord() {}

void OAIStreamRecord::initializeModel() {

    m_approximate_creation_date_time_isSet = false;
    m_approximate_creation_date_time_isValid = false;

    m_keys_isSet = false;
    m_keys_isValid = false;

    m_new_image_isSet = false;
    m_new_image_isValid = false;

    m_old_image_isSet = false;
    m_old_image_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_size_bytes_isSet = false;
    m_size_bytes_isValid = false;

    m_stream_view_type_isSet = false;
    m_stream_view_type_isValid = false;
}

void OAIStreamRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStreamRecord::fromJsonObject(QJsonObject json) {

    m_approximate_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_approximate_creation_date_time, json[QString("ApproximateCreationDateTime")]);
    m_approximate_creation_date_time_isSet = !json[QString("ApproximateCreationDateTime")].isNull() && m_approximate_creation_date_time_isValid;

    m_keys_isValid = ::OpenAPI::fromJsonValue(m_keys, json[QString("Keys")]);
    m_keys_isSet = !json[QString("Keys")].isNull() && m_keys_isValid;

    m_new_image_isValid = ::OpenAPI::fromJsonValue(m_new_image, json[QString("NewImage")]);
    m_new_image_isSet = !json[QString("NewImage")].isNull() && m_new_image_isValid;

    m_old_image_isValid = ::OpenAPI::fromJsonValue(m_old_image, json[QString("OldImage")]);
    m_old_image_isSet = !json[QString("OldImage")].isNull() && m_old_image_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("SequenceNumber")]);
    m_sequence_number_isSet = !json[QString("SequenceNumber")].isNull() && m_sequence_number_isValid;

    m_size_bytes_isValid = ::OpenAPI::fromJsonValue(m_size_bytes, json[QString("SizeBytes")]);
    m_size_bytes_isSet = !json[QString("SizeBytes")].isNull() && m_size_bytes_isValid;

    m_stream_view_type_isValid = ::OpenAPI::fromJsonValue(m_stream_view_type, json[QString("StreamViewType")]);
    m_stream_view_type_isSet = !json[QString("StreamViewType")].isNull() && m_stream_view_type_isValid;
}

QString OAIStreamRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStreamRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_approximate_creation_date_time_isSet) {
        obj.insert(QString("ApproximateCreationDateTime"), ::OpenAPI::toJsonValue(m_approximate_creation_date_time));
    }
    if (m_keys.isSet()) {
        obj.insert(QString("Keys"), ::OpenAPI::toJsonValue(m_keys));
    }
    if (m_new_image.isSet()) {
        obj.insert(QString("NewImage"), ::OpenAPI::toJsonValue(m_new_image));
    }
    if (m_old_image.isSet()) {
        obj.insert(QString("OldImage"), ::OpenAPI::toJsonValue(m_old_image));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("SequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_size_bytes_isSet) {
        obj.insert(QString("SizeBytes"), ::OpenAPI::toJsonValue(m_size_bytes));
    }
    if (m_stream_view_type.isSet()) {
        obj.insert(QString("StreamViewType"), ::OpenAPI::toJsonValue(m_stream_view_type));
    }
    return obj;
}

QDateTime OAIStreamRecord::getApproximateCreationDateTime() const {
    return m_approximate_creation_date_time;
}
void OAIStreamRecord::setApproximateCreationDateTime(const QDateTime &approximate_creation_date_time) {
    m_approximate_creation_date_time = approximate_creation_date_time;
    m_approximate_creation_date_time_isSet = true;
}

bool OAIStreamRecord::is_approximate_creation_date_time_Set() const{
    return m_approximate_creation_date_time_isSet;
}

bool OAIStreamRecord::is_approximate_creation_date_time_Valid() const{
    return m_approximate_creation_date_time_isValid;
}

QMap OAIStreamRecord::getKeys() const {
    return m_keys;
}
void OAIStreamRecord::setKeys(const QMap &keys) {
    m_keys = keys;
    m_keys_isSet = true;
}

bool OAIStreamRecord::is_keys_Set() const{
    return m_keys_isSet;
}

bool OAIStreamRecord::is_keys_Valid() const{
    return m_keys_isValid;
}

QMap OAIStreamRecord::getNewImage() const {
    return m_new_image;
}
void OAIStreamRecord::setNewImage(const QMap &new_image) {
    m_new_image = new_image;
    m_new_image_isSet = true;
}

bool OAIStreamRecord::is_new_image_Set() const{
    return m_new_image_isSet;
}

bool OAIStreamRecord::is_new_image_Valid() const{
    return m_new_image_isValid;
}

QMap OAIStreamRecord::getOldImage() const {
    return m_old_image;
}
void OAIStreamRecord::setOldImage(const QMap &old_image) {
    m_old_image = old_image;
    m_old_image_isSet = true;
}

bool OAIStreamRecord::is_old_image_Set() const{
    return m_old_image_isSet;
}

bool OAIStreamRecord::is_old_image_Valid() const{
    return m_old_image_isValid;
}

QString OAIStreamRecord::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIStreamRecord::setSequenceNumber(const QString &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIStreamRecord::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIStreamRecord::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

qint32 OAIStreamRecord::getSizeBytes() const {
    return m_size_bytes;
}
void OAIStreamRecord::setSizeBytes(const qint32 &size_bytes) {
    m_size_bytes = size_bytes;
    m_size_bytes_isSet = true;
}

bool OAIStreamRecord::is_size_bytes_Set() const{
    return m_size_bytes_isSet;
}

bool OAIStreamRecord::is_size_bytes_Valid() const{
    return m_size_bytes_isValid;
}

OAIStreamViewType OAIStreamRecord::getStreamViewType() const {
    return m_stream_view_type;
}
void OAIStreamRecord::setStreamViewType(const OAIStreamViewType &stream_view_type) {
    m_stream_view_type = stream_view_type;
    m_stream_view_type_isSet = true;
}

bool OAIStreamRecord::is_stream_view_type_Set() const{
    return m_stream_view_type_isSet;
}

bool OAIStreamRecord::is_stream_view_type_Valid() const{
    return m_stream_view_type_isValid;
}

bool OAIStreamRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approximate_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keys.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_view_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStreamRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
