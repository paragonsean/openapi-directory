/*
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets StreamViewType
 */
@JsonAdapter(StreamViewType.Adapter.class)
public enum StreamViewType {
  
  NEW_IMAGE("NEW_IMAGE"),
  
  OLD_IMAGE("OLD_IMAGE"),
  
  NEW_AND_OLD_IMAGES("NEW_AND_OLD_IMAGES"),
  
  KEYS_ONLY("KEYS_ONLY");

  private String value;

  StreamViewType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static StreamViewType fromValue(String value) {
    for (StreamViewType b : StreamViewType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<StreamViewType> {
    @Override
    public void write(final JsonWriter jsonWriter, final StreamViewType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public StreamViewType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return StreamViewType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    StreamViewType.fromValue(value);
  }
}

