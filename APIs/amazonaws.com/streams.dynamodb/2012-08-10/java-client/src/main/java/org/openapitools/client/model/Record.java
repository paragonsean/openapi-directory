/*
 * Amazon DynamoDB Streams
 * <fullname>Amazon DynamoDB</fullname> <p>Amazon DynamoDB Streams provides API actions for accessing streams and processing stream records. To learn more about application development with Streams, see <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html\">Capturing Table Activity with DynamoDB Streams</a> in the Amazon DynamoDB Developer Guide.</p>
 *
 * The version of the OpenAPI document: 2012-08-10
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OperationType;
import org.openapitools.client.model.RecordDynamodb;
import org.openapitools.client.model.RecordUserIdentity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A description of a unique event within a stream.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:11.810588-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Record {
  public static final String SERIALIZED_NAME_EVENT_I_D = "eventID";
  @SerializedName(SERIALIZED_NAME_EVENT_I_D)
  private String eventID;

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private OperationType eventName;

  public static final String SERIALIZED_NAME_EVENT_VERSION = "eventVersion";
  @SerializedName(SERIALIZED_NAME_EVENT_VERSION)
  private String eventVersion;

  public static final String SERIALIZED_NAME_EVENT_SOURCE = "eventSource";
  @SerializedName(SERIALIZED_NAME_EVENT_SOURCE)
  private String eventSource;

  public static final String SERIALIZED_NAME_AWS_REGION = "awsRegion";
  @SerializedName(SERIALIZED_NAME_AWS_REGION)
  private String awsRegion;

  public static final String SERIALIZED_NAME_DYNAMODB = "dynamodb";
  @SerializedName(SERIALIZED_NAME_DYNAMODB)
  private RecordDynamodb dynamodb;

  public static final String SERIALIZED_NAME_USER_IDENTITY = "userIdentity";
  @SerializedName(SERIALIZED_NAME_USER_IDENTITY)
  private RecordUserIdentity userIdentity;

  public Record() {
  }

  public Record eventID(String eventID) {
    this.eventID = eventID;
    return this;
  }

  /**
   * Get eventID
   * @return eventID
   */
  @javax.annotation.Nullable
  public String getEventID() {
    return eventID;
  }

  public void setEventID(String eventID) {
    this.eventID = eventID;
  }


  public Record eventName(OperationType eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Get eventName
   * @return eventName
   */
  @javax.annotation.Nullable
  public OperationType getEventName() {
    return eventName;
  }

  public void setEventName(OperationType eventName) {
    this.eventName = eventName;
  }


  public Record eventVersion(String eventVersion) {
    this.eventVersion = eventVersion;
    return this;
  }

  /**
   * Get eventVersion
   * @return eventVersion
   */
  @javax.annotation.Nullable
  public String getEventVersion() {
    return eventVersion;
  }

  public void setEventVersion(String eventVersion) {
    this.eventVersion = eventVersion;
  }


  public Record eventSource(String eventSource) {
    this.eventSource = eventSource;
    return this;
  }

  /**
   * Get eventSource
   * @return eventSource
   */
  @javax.annotation.Nullable
  public String getEventSource() {
    return eventSource;
  }

  public void setEventSource(String eventSource) {
    this.eventSource = eventSource;
  }


  public Record awsRegion(String awsRegion) {
    this.awsRegion = awsRegion;
    return this;
  }

  /**
   * Get awsRegion
   * @return awsRegion
   */
  @javax.annotation.Nullable
  public String getAwsRegion() {
    return awsRegion;
  }

  public void setAwsRegion(String awsRegion) {
    this.awsRegion = awsRegion;
  }


  public Record dynamodb(RecordDynamodb dynamodb) {
    this.dynamodb = dynamodb;
    return this;
  }

  /**
   * Get dynamodb
   * @return dynamodb
   */
  @javax.annotation.Nullable
  public RecordDynamodb getDynamodb() {
    return dynamodb;
  }

  public void setDynamodb(RecordDynamodb dynamodb) {
    this.dynamodb = dynamodb;
  }


  public Record userIdentity(RecordUserIdentity userIdentity) {
    this.userIdentity = userIdentity;
    return this;
  }

  /**
   * Get userIdentity
   * @return userIdentity
   */
  @javax.annotation.Nullable
  public RecordUserIdentity getUserIdentity() {
    return userIdentity;
  }

  public void setUserIdentity(RecordUserIdentity userIdentity) {
    this.userIdentity = userIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Record record = (Record) o;
    return Objects.equals(this.eventID, record.eventID) &&
        Objects.equals(this.eventName, record.eventName) &&
        Objects.equals(this.eventVersion, record.eventVersion) &&
        Objects.equals(this.eventSource, record.eventSource) &&
        Objects.equals(this.awsRegion, record.awsRegion) &&
        Objects.equals(this.dynamodb, record.dynamodb) &&
        Objects.equals(this.userIdentity, record.userIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eventID, eventName, eventVersion, eventSource, awsRegion, dynamodb, userIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Record {\n");
    sb.append("    eventID: ").append(toIndentedString(eventID)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    eventVersion: ").append(toIndentedString(eventVersion)).append("\n");
    sb.append("    eventSource: ").append(toIndentedString(eventSource)).append("\n");
    sb.append("    awsRegion: ").append(toIndentedString(awsRegion)).append("\n");
    sb.append("    dynamodb: ").append(toIndentedString(dynamodb)).append("\n");
    sb.append("    userIdentity: ").append(toIndentedString(userIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("eventID");
    openapiFields.add("eventName");
    openapiFields.add("eventVersion");
    openapiFields.add("eventSource");
    openapiFields.add("awsRegion");
    openapiFields.add("dynamodb");
    openapiFields.add("userIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Record
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Record.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Record is not found in the empty JSON string", Record.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Record.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Record` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `eventID`
      if (jsonObj.get("eventID") != null && !jsonObj.get("eventID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventID"));
      }
      // validate the optional field `eventName`
      if (jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) {
        OperationType.validateJsonElement(jsonObj.get("eventName"));
      }
      // validate the optional field `eventVersion`
      if (jsonObj.get("eventVersion") != null && !jsonObj.get("eventVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventVersion"));
      }
      // validate the optional field `eventSource`
      if (jsonObj.get("eventSource") != null && !jsonObj.get("eventSource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("eventSource"));
      }
      // validate the optional field `awsRegion`
      if (jsonObj.get("awsRegion") != null && !jsonObj.get("awsRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("awsRegion"));
      }
      // validate the optional field `dynamodb`
      if (jsonObj.get("dynamodb") != null && !jsonObj.get("dynamodb").isJsonNull()) {
        RecordDynamodb.validateJsonElement(jsonObj.get("dynamodb"));
      }
      // validate the optional field `userIdentity`
      if (jsonObj.get("userIdentity") != null && !jsonObj.get("userIdentity").isJsonNull()) {
        RecordUserIdentity.validateJsonElement(jsonObj.get("userIdentity"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Record.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Record' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Record> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Record.class));

       return (TypeAdapter<T>) new TypeAdapter<Record>() {
           @Override
           public void write(JsonWriter out, Record value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Record read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Record given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Record
   * @throws IOException if the JSON string is invalid with respect to Record
   */
  public static Record fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Record.class);
  }

  /**
   * Convert an instance of Record to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

