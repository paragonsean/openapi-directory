/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import S3BucketSource from './S3BucketSource';

/**
 * The ImportTaskS3BucketSource model module.
 * @module model/ImportTaskS3BucketSource
 * @version 2020-02-26
 */
class ImportTaskS3BucketSource {
    /**
     * Constructs a new <code>ImportTaskS3BucketSource</code>.
     * @alias module:model/ImportTaskS3BucketSource
     * @implements module:model/S3BucketSource
     * @param s3Bucket {String} 
     * @param s3Key {String} 
     */
    constructor(s3Bucket, s3Key) { 
        S3BucketSource.initialize(this, s3Bucket, s3Key);
        ImportTaskS3BucketSource.initialize(this, s3Bucket, s3Key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, s3Bucket, s3Key) { 
        obj['s3Bucket'] = s3Bucket;
        obj['s3Key'] = s3Key;
    }

    /**
     * Constructs a <code>ImportTaskS3BucketSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportTaskS3BucketSource} obj Optional instance to populate.
     * @return {module:model/ImportTaskS3BucketSource} The populated <code>ImportTaskS3BucketSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportTaskS3BucketSource();
            S3BucketSource.constructFromObject(data, obj);

            if (data.hasOwnProperty('s3Bucket')) {
                obj['s3Bucket'] = ApiClient.convertToType(data['s3Bucket'], 'String');
            }
            if (data.hasOwnProperty('s3BucketOwner')) {
                obj['s3BucketOwner'] = ApiClient.convertToType(data['s3BucketOwner'], 'String');
            }
            if (data.hasOwnProperty('s3Key')) {
                obj['s3Key'] = ApiClient.convertToType(data['s3Key'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportTaskS3BucketSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportTaskS3BucketSource</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportTaskS3BucketSource.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `s3Bucket`
        if (data['s3Bucket']) { // data not null
          String.validateJSON(data['s3Bucket']);
        }
        // validate the optional field `s3BucketOwner`
        if (data['s3BucketOwner']) { // data not null
          String.validateJSON(data['s3BucketOwner']);
        }
        // validate the optional field `s3Key`
        if (data['s3Key']) { // data not null
          String.validateJSON(data['s3Key']);
        }

        return true;
    }


}

ImportTaskS3BucketSource.RequiredProperties = ["s3Bucket", "s3Key"];

/**
 * @member {String} s3Bucket
 */
ImportTaskS3BucketSource.prototype['s3Bucket'] = undefined;

/**
 * @member {String} s3BucketOwner
 */
ImportTaskS3BucketSource.prototype['s3BucketOwner'] = undefined;

/**
 * @member {String} s3Key
 */
ImportTaskS3BucketSource.prototype['s3Key'] = undefined;


// Implement S3BucketSource interface:
/**
 * @member {String} s3Bucket
 */
S3BucketSource.prototype['s3Bucket'] = undefined;
/**
 * @member {String} s3BucketOwner
 */
S3BucketSource.prototype['s3BucketOwner'] = undefined;
/**
 * @member {String} s3Key
 */
S3BucketSource.prototype['s3Key'] = undefined;




export default ImportTaskS3BucketSource;

