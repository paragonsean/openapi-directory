/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReplicationType from './ReplicationType';
import SourceServerDataReplicationInfo from './SourceServerDataReplicationInfo';
import SourceServerLaunchedInstance from './SourceServerLaunchedInstance';
import SourceServerLifeCycle from './SourceServerLifeCycle';
import SourceServerSourceProperties from './SourceServerSourceProperties';

/**
 * The SourceServer model module.
 * @module model/SourceServer
 * @version 2020-02-26
 */
class SourceServer {
    /**
     * Constructs a new <code>SourceServer</code>.
     * @alias module:model/SourceServer
     */
    constructor() { 
        
        SourceServer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SourceServer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SourceServer} obj Optional instance to populate.
     * @return {module:model/SourceServer} The populated <code>SourceServer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SourceServer();

            if (data.hasOwnProperty('applicationID')) {
                obj['applicationID'] = ApiClient.convertToType(data['applicationID'], 'String');
            }
            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('dataReplicationInfo')) {
                obj['dataReplicationInfo'] = SourceServerDataReplicationInfo.constructFromObject(data['dataReplicationInfo']);
            }
            if (data.hasOwnProperty('fqdnForActionFramework')) {
                obj['fqdnForActionFramework'] = ApiClient.convertToType(data['fqdnForActionFramework'], 'String');
            }
            if (data.hasOwnProperty('isArchived')) {
                obj['isArchived'] = ApiClient.convertToType(data['isArchived'], 'Boolean');
            }
            if (data.hasOwnProperty('launchedInstance')) {
                obj['launchedInstance'] = SourceServerLaunchedInstance.constructFromObject(data['launchedInstance']);
            }
            if (data.hasOwnProperty('lifeCycle')) {
                obj['lifeCycle'] = SourceServerLifeCycle.constructFromObject(data['lifeCycle']);
            }
            if (data.hasOwnProperty('replicationType')) {
                obj['replicationType'] = ApiClient.convertToType(data['replicationType'], ReplicationType);
            }
            if (data.hasOwnProperty('sourceProperties')) {
                obj['sourceProperties'] = SourceServerSourceProperties.constructFromObject(data['sourceProperties']);
            }
            if (data.hasOwnProperty('sourceServerID')) {
                obj['sourceServerID'] = ApiClient.convertToType(data['sourceServerID'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('userProvidedID')) {
                obj['userProvidedID'] = ApiClient.convertToType(data['userProvidedID'], 'String');
            }
            if (data.hasOwnProperty('vcenterClientID')) {
                obj['vcenterClientID'] = ApiClient.convertToType(data['vcenterClientID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SourceServer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SourceServer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `applicationID`
        if (data['applicationID']) { // data not null
          String.validateJSON(data['applicationID']);
        }
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `dataReplicationInfo`
        if (data['dataReplicationInfo']) { // data not null
          SourceServerDataReplicationInfo.validateJSON(data['dataReplicationInfo']);
        }
        // validate the optional field `fqdnForActionFramework`
        if (data['fqdnForActionFramework']) { // data not null
          String.validateJSON(data['fqdnForActionFramework']);
        }
        // validate the optional field `isArchived`
        if (data['isArchived']) { // data not null
          Boolean.validateJSON(data['isArchived']);
        }
        // validate the optional field `launchedInstance`
        if (data['launchedInstance']) { // data not null
          SourceServerLaunchedInstance.validateJSON(data['launchedInstance']);
        }
        // validate the optional field `lifeCycle`
        if (data['lifeCycle']) { // data not null
          SourceServerLifeCycle.validateJSON(data['lifeCycle']);
        }
        // validate the optional field `replicationType`
        if (data['replicationType']) { // data not null
          ReplicationType.validateJSON(data['replicationType']);
        }
        // validate the optional field `sourceProperties`
        if (data['sourceProperties']) { // data not null
          SourceServerSourceProperties.validateJSON(data['sourceProperties']);
        }
        // validate the optional field `sourceServerID`
        if (data['sourceServerID']) { // data not null
          String.validateJSON(data['sourceServerID']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `userProvidedID`
        if (data['userProvidedID']) { // data not null
          String.validateJSON(data['userProvidedID']);
        }
        // validate the optional field `vcenterClientID`
        if (data['vcenterClientID']) { // data not null
          String.validateJSON(data['vcenterClientID']);
        }

        return true;
    }


}



/**
 * @member {String} applicationID
 */
SourceServer.prototype['applicationID'] = undefined;

/**
 * @member {String} arn
 */
SourceServer.prototype['arn'] = undefined;

/**
 * @member {module:model/SourceServerDataReplicationInfo} dataReplicationInfo
 */
SourceServer.prototype['dataReplicationInfo'] = undefined;

/**
 * @member {String} fqdnForActionFramework
 */
SourceServer.prototype['fqdnForActionFramework'] = undefined;

/**
 * @member {Boolean} isArchived
 */
SourceServer.prototype['isArchived'] = undefined;

/**
 * @member {module:model/SourceServerLaunchedInstance} launchedInstance
 */
SourceServer.prototype['launchedInstance'] = undefined;

/**
 * @member {module:model/SourceServerLifeCycle} lifeCycle
 */
SourceServer.prototype['lifeCycle'] = undefined;

/**
 * @member {module:model/ReplicationType} replicationType
 */
SourceServer.prototype['replicationType'] = undefined;

/**
 * @member {module:model/SourceServerSourceProperties} sourceProperties
 */
SourceServer.prototype['sourceProperties'] = undefined;

/**
 * @member {String} sourceServerID
 */
SourceServer.prototype['sourceServerID'] = undefined;

/**
 * @member {Object} tags
 */
SourceServer.prototype['tags'] = undefined;

/**
 * @member {String} userProvidedID
 */
SourceServer.prototype['userProvidedID'] = undefined;

/**
 * @member {String} vcenterClientID
 */
SourceServer.prototype['vcenterClientID'] = undefined;






export default SourceServer;

