/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SsmExternalParameter from './SsmExternalParameter';
import SsmParameterStoreParameter from './SsmParameterStoreParameter';

/**
 * The PutSourceServerActionRequest model module.
 * @module model/PutSourceServerActionRequest
 * @version 2020-02-26
 */
class PutSourceServerActionRequest {
    /**
     * Constructs a new <code>PutSourceServerActionRequest</code>.
     * @alias module:model/PutSourceServerActionRequest
     * @param actionID {String} Source server post migration custom action ID.
     * @param actionName {String} Source server post migration custom action name.
     * @param documentIdentifier {String} Source server post migration custom action document identifier.
     * @param order {Number} Source server post migration custom action order.
     * @param sourceServerID {String} Source server ID.
     */
    constructor(actionID, actionName, documentIdentifier, order, sourceServerID) { 
        
        PutSourceServerActionRequest.initialize(this, actionID, actionName, documentIdentifier, order, sourceServerID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, actionID, actionName, documentIdentifier, order, sourceServerID) { 
        obj['actionID'] = actionID;
        obj['actionName'] = actionName;
        obj['documentIdentifier'] = documentIdentifier;
        obj['order'] = order;
        obj['sourceServerID'] = sourceServerID;
    }

    /**
     * Constructs a <code>PutSourceServerActionRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PutSourceServerActionRequest} obj Optional instance to populate.
     * @return {module:model/PutSourceServerActionRequest} The populated <code>PutSourceServerActionRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PutSourceServerActionRequest();

            if (data.hasOwnProperty('accountID')) {
                obj['accountID'] = ApiClient.convertToType(data['accountID'], 'String');
            }
            if (data.hasOwnProperty('actionID')) {
                obj['actionID'] = ApiClient.convertToType(data['actionID'], 'String');
            }
            if (data.hasOwnProperty('actionName')) {
                obj['actionName'] = ApiClient.convertToType(data['actionName'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('documentIdentifier')) {
                obj['documentIdentifier'] = ApiClient.convertToType(data['documentIdentifier'], 'String');
            }
            if (data.hasOwnProperty('documentVersion')) {
                obj['documentVersion'] = ApiClient.convertToType(data['documentVersion'], 'String');
            }
            if (data.hasOwnProperty('externalParameters')) {
                obj['externalParameters'] = ApiClient.convertToType(data['externalParameters'], {'String': SsmExternalParameter});
            }
            if (data.hasOwnProperty('mustSucceedForCutover')) {
                obj['mustSucceedForCutover'] = ApiClient.convertToType(data['mustSucceedForCutover'], 'Boolean');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = ApiClient.convertToType(data['order'], 'Number');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], {'String': Array});
            }
            if (data.hasOwnProperty('sourceServerID')) {
                obj['sourceServerID'] = ApiClient.convertToType(data['sourceServerID'], 'String');
            }
            if (data.hasOwnProperty('timeoutSeconds')) {
                obj['timeoutSeconds'] = ApiClient.convertToType(data['timeoutSeconds'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PutSourceServerActionRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PutSourceServerActionRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PutSourceServerActionRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountID'] && !(typeof data['accountID'] === 'string' || data['accountID'] instanceof String)) {
            throw new Error("Expected the field `accountID` to be a primitive type in the JSON string but got " + data['accountID']);
        }
        // ensure the json data is a string
        if (data['actionID'] && !(typeof data['actionID'] === 'string' || data['actionID'] instanceof String)) {
            throw new Error("Expected the field `actionID` to be a primitive type in the JSON string but got " + data['actionID']);
        }
        // ensure the json data is a string
        if (data['actionName'] && !(typeof data['actionName'] === 'string' || data['actionName'] instanceof String)) {
            throw new Error("Expected the field `actionName` to be a primitive type in the JSON string but got " + data['actionName']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['documentIdentifier'] && !(typeof data['documentIdentifier'] === 'string' || data['documentIdentifier'] instanceof String)) {
            throw new Error("Expected the field `documentIdentifier` to be a primitive type in the JSON string but got " + data['documentIdentifier']);
        }
        // ensure the json data is a string
        if (data['documentVersion'] && !(typeof data['documentVersion'] === 'string' || data['documentVersion'] instanceof String)) {
            throw new Error("Expected the field `documentVersion` to be a primitive type in the JSON string but got " + data['documentVersion']);
        }
        // ensure the json data is a string
        if (data['sourceServerID'] && !(typeof data['sourceServerID'] === 'string' || data['sourceServerID'] instanceof String)) {
            throw new Error("Expected the field `sourceServerID` to be a primitive type in the JSON string but got " + data['sourceServerID']);
        }

        return true;
    }


}

PutSourceServerActionRequest.RequiredProperties = ["actionID", "actionName", "documentIdentifier", "order", "sourceServerID"];

/**
 * Source server post migration custom account ID.
 * @member {String} accountID
 */
PutSourceServerActionRequest.prototype['accountID'] = undefined;

/**
 * Source server post migration custom action ID.
 * @member {String} actionID
 */
PutSourceServerActionRequest.prototype['actionID'] = undefined;

/**
 * Source server post migration custom action name.
 * @member {String} actionName
 */
PutSourceServerActionRequest.prototype['actionName'] = undefined;

/**
 * Source server post migration custom action active status.
 * @member {Boolean} active
 */
PutSourceServerActionRequest.prototype['active'] = undefined;

/**
 * Source server post migration custom action category.
 * @member {module:model/PutSourceServerActionRequest.CategoryEnum} category
 */
PutSourceServerActionRequest.prototype['category'] = undefined;

/**
 * Source server post migration custom action description.
 * @member {String} description
 */
PutSourceServerActionRequest.prototype['description'] = undefined;

/**
 * Source server post migration custom action document identifier.
 * @member {String} documentIdentifier
 */
PutSourceServerActionRequest.prototype['documentIdentifier'] = undefined;

/**
 * Source server post migration custom action document version.
 * @member {String} documentVersion
 */
PutSourceServerActionRequest.prototype['documentVersion'] = undefined;

/**
 * Source server post migration custom action external parameters.
 * @member {Object.<String, module:model/SsmExternalParameter>} externalParameters
 */
PutSourceServerActionRequest.prototype['externalParameters'] = undefined;

/**
 * Source server post migration custom action must succeed for cutover.
 * @member {Boolean} mustSucceedForCutover
 */
PutSourceServerActionRequest.prototype['mustSucceedForCutover'] = undefined;

/**
 * Source server post migration custom action order.
 * @member {Number} order
 */
PutSourceServerActionRequest.prototype['order'] = undefined;

/**
 * Source server post migration custom action parameters.
 * @member {Object.<String, Array.<module:model/SsmParameterStoreParameter>>} parameters
 */
PutSourceServerActionRequest.prototype['parameters'] = undefined;

/**
 * Source server ID.
 * @member {String} sourceServerID
 */
PutSourceServerActionRequest.prototype['sourceServerID'] = undefined;

/**
 * Source server post migration custom action timeout in seconds.
 * @member {Number} timeoutSeconds
 */
PutSourceServerActionRequest.prototype['timeoutSeconds'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
PutSourceServerActionRequest['CategoryEnum'] = {

    /**
     * value: "DISASTER_RECOVERY"
     * @const
     */
    "DISASTER_RECOVERY": "DISASTER_RECOVERY",

    /**
     * value: "OPERATING_SYSTEM"
     * @const
     */
    "OPERATING_SYSTEM": "OPERATING_SYSTEM",

    /**
     * value: "LICENSE_AND_SUBSCRIPTION"
     * @const
     */
    "LICENSE_AND_SUBSCRIPTION": "LICENSE_AND_SUBSCRIPTION",

    /**
     * value: "VALIDATION"
     * @const
     */
    "VALIDATION": "VALIDATION",

    /**
     * value: "OBSERVABILITY"
     * @const
     */
    "OBSERVABILITY": "OBSERVABILITY",

    /**
     * value: "SECURITY"
     * @const
     */
    "SECURITY": "SECURITY",

    /**
     * value: "NETWORKING"
     * @const
     */
    "NETWORKING": "NETWORKING",

    /**
     * value: "CONFIGURATION"
     * @const
     */
    "CONFIGURATION": "CONFIGURATION",

    /**
     * value: "BACKUP"
     * @const
     */
    "BACKUP": "BACKUP",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default PutSourceServerActionRequest;

