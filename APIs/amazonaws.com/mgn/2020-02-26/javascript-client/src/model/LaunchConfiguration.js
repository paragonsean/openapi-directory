/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BootMode from './BootMode';
import LaunchConfigurationLicensing from './LaunchConfigurationLicensing';
import LaunchDisposition from './LaunchDisposition';
import PostLaunchActions from './PostLaunchActions';
import TargetInstanceTypeRightSizingMethod from './TargetInstanceTypeRightSizingMethod';

/**
 * The LaunchConfiguration model module.
 * @module model/LaunchConfiguration
 * @version 2020-02-26
 */
class LaunchConfiguration {
    /**
     * Constructs a new <code>LaunchConfiguration</code>.
     * @alias module:model/LaunchConfiguration
     */
    constructor() { 
        
        LaunchConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LaunchConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LaunchConfiguration} obj Optional instance to populate.
     * @return {module:model/LaunchConfiguration} The populated <code>LaunchConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LaunchConfiguration();

            if (data.hasOwnProperty('bootMode')) {
                obj['bootMode'] = ApiClient.convertToType(data['bootMode'], BootMode);
            }
            if (data.hasOwnProperty('copyPrivateIp')) {
                obj['copyPrivateIp'] = ApiClient.convertToType(data['copyPrivateIp'], 'Boolean');
            }
            if (data.hasOwnProperty('copyTags')) {
                obj['copyTags'] = ApiClient.convertToType(data['copyTags'], 'Boolean');
            }
            if (data.hasOwnProperty('ec2LaunchTemplateID')) {
                obj['ec2LaunchTemplateID'] = ApiClient.convertToType(data['ec2LaunchTemplateID'], 'String');
            }
            if (data.hasOwnProperty('enableMapAutoTagging')) {
                obj['enableMapAutoTagging'] = ApiClient.convertToType(data['enableMapAutoTagging'], 'Boolean');
            }
            if (data.hasOwnProperty('launchDisposition')) {
                obj['launchDisposition'] = ApiClient.convertToType(data['launchDisposition'], LaunchDisposition);
            }
            if (data.hasOwnProperty('licensing')) {
                obj['licensing'] = LaunchConfigurationLicensing.constructFromObject(data['licensing']);
            }
            if (data.hasOwnProperty('mapAutoTaggingMpeID')) {
                obj['mapAutoTaggingMpeID'] = ApiClient.convertToType(data['mapAutoTaggingMpeID'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('postLaunchActions')) {
                obj['postLaunchActions'] = PostLaunchActions.constructFromObject(data['postLaunchActions']);
            }
            if (data.hasOwnProperty('sourceServerID')) {
                obj['sourceServerID'] = ApiClient.convertToType(data['sourceServerID'], 'String');
            }
            if (data.hasOwnProperty('targetInstanceTypeRightSizingMethod')) {
                obj['targetInstanceTypeRightSizingMethod'] = ApiClient.convertToType(data['targetInstanceTypeRightSizingMethod'], TargetInstanceTypeRightSizingMethod);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LaunchConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LaunchConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bootMode`
        if (data['bootMode']) { // data not null
          BootMode.validateJSON(data['bootMode']);
        }
        // validate the optional field `copyPrivateIp`
        if (data['copyPrivateIp']) { // data not null
          Boolean.validateJSON(data['copyPrivateIp']);
        }
        // validate the optional field `copyTags`
        if (data['copyTags']) { // data not null
          Boolean.validateJSON(data['copyTags']);
        }
        // validate the optional field `ec2LaunchTemplateID`
        if (data['ec2LaunchTemplateID']) { // data not null
          String.validateJSON(data['ec2LaunchTemplateID']);
        }
        // validate the optional field `enableMapAutoTagging`
        if (data['enableMapAutoTagging']) { // data not null
          Boolean.validateJSON(data['enableMapAutoTagging']);
        }
        // validate the optional field `launchDisposition`
        if (data['launchDisposition']) { // data not null
          LaunchDisposition.validateJSON(data['launchDisposition']);
        }
        // validate the optional field `licensing`
        if (data['licensing']) { // data not null
          LaunchConfigurationLicensing.validateJSON(data['licensing']);
        }
        // validate the optional field `mapAutoTaggingMpeID`
        if (data['mapAutoTaggingMpeID']) { // data not null
          String.validateJSON(data['mapAutoTaggingMpeID']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `postLaunchActions`
        if (data['postLaunchActions']) { // data not null
          PostLaunchActions.validateJSON(data['postLaunchActions']);
        }
        // validate the optional field `sourceServerID`
        if (data['sourceServerID']) { // data not null
          String.validateJSON(data['sourceServerID']);
        }
        // validate the optional field `targetInstanceTypeRightSizingMethod`
        if (data['targetInstanceTypeRightSizingMethod']) { // data not null
          TargetInstanceTypeRightSizingMethod.validateJSON(data['targetInstanceTypeRightSizingMethod']);
        }

        return true;
    }


}



/**
 * @member {module:model/BootMode} bootMode
 */
LaunchConfiguration.prototype['bootMode'] = undefined;

/**
 * @member {Boolean} copyPrivateIp
 */
LaunchConfiguration.prototype['copyPrivateIp'] = undefined;

/**
 * @member {Boolean} copyTags
 */
LaunchConfiguration.prototype['copyTags'] = undefined;

/**
 * @member {String} ec2LaunchTemplateID
 */
LaunchConfiguration.prototype['ec2LaunchTemplateID'] = undefined;

/**
 * @member {Boolean} enableMapAutoTagging
 */
LaunchConfiguration.prototype['enableMapAutoTagging'] = undefined;

/**
 * @member {module:model/LaunchDisposition} launchDisposition
 */
LaunchConfiguration.prototype['launchDisposition'] = undefined;

/**
 * @member {module:model/LaunchConfigurationLicensing} licensing
 */
LaunchConfiguration.prototype['licensing'] = undefined;

/**
 * @member {String} mapAutoTaggingMpeID
 */
LaunchConfiguration.prototype['mapAutoTaggingMpeID'] = undefined;

/**
 * @member {String} name
 */
LaunchConfiguration.prototype['name'] = undefined;

/**
 * @member {module:model/PostLaunchActions} postLaunchActions
 */
LaunchConfiguration.prototype['postLaunchActions'] = undefined;

/**
 * @member {String} sourceServerID
 */
LaunchConfiguration.prototype['sourceServerID'] = undefined;

/**
 * @member {module:model/TargetInstanceTypeRightSizingMethod} targetInstanceTypeRightSizingMethod
 */
LaunchConfiguration.prototype['targetInstanceTypeRightSizingMethod'] = undefined;






export default LaunchConfiguration;

