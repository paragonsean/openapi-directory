/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BootMode from './BootMode';
import LaunchConfigurationTemplateLargeVolumeConf from './LaunchConfigurationTemplateLargeVolumeConf';
import LaunchConfigurationTemplatePostLaunchActions from './LaunchConfigurationTemplatePostLaunchActions';
import LaunchConfigurationTemplateSmallVolumeConf from './LaunchConfigurationTemplateSmallVolumeConf';
import LaunchDisposition from './LaunchDisposition';
import Licensing from './Licensing';
import TargetInstanceTypeRightSizingMethod from './TargetInstanceTypeRightSizingMethod';

/**
 * The LaunchConfigurationTemplate model module.
 * @module model/LaunchConfigurationTemplate
 * @version 2020-02-26
 */
class LaunchConfigurationTemplate {
    /**
     * Constructs a new <code>LaunchConfigurationTemplate</code>.
     * @alias module:model/LaunchConfigurationTemplate
     * @param launchConfigurationTemplateID {String} 
     */
    constructor(launchConfigurationTemplateID) { 
        
        LaunchConfigurationTemplate.initialize(this, launchConfigurationTemplateID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, launchConfigurationTemplateID) { 
        obj['launchConfigurationTemplateID'] = launchConfigurationTemplateID;
    }

    /**
     * Constructs a <code>LaunchConfigurationTemplate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LaunchConfigurationTemplate} obj Optional instance to populate.
     * @return {module:model/LaunchConfigurationTemplate} The populated <code>LaunchConfigurationTemplate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LaunchConfigurationTemplate();

            if (data.hasOwnProperty('arn')) {
                obj['arn'] = ApiClient.convertToType(data['arn'], 'String');
            }
            if (data.hasOwnProperty('associatePublicIpAddress')) {
                obj['associatePublicIpAddress'] = ApiClient.convertToType(data['associatePublicIpAddress'], 'Boolean');
            }
            if (data.hasOwnProperty('bootMode')) {
                obj['bootMode'] = ApiClient.convertToType(data['bootMode'], BootMode);
            }
            if (data.hasOwnProperty('copyPrivateIp')) {
                obj['copyPrivateIp'] = ApiClient.convertToType(data['copyPrivateIp'], 'Boolean');
            }
            if (data.hasOwnProperty('copyTags')) {
                obj['copyTags'] = ApiClient.convertToType(data['copyTags'], 'Boolean');
            }
            if (data.hasOwnProperty('ec2LaunchTemplateID')) {
                obj['ec2LaunchTemplateID'] = ApiClient.convertToType(data['ec2LaunchTemplateID'], 'String');
            }
            if (data.hasOwnProperty('enableMapAutoTagging')) {
                obj['enableMapAutoTagging'] = ApiClient.convertToType(data['enableMapAutoTagging'], 'Boolean');
            }
            if (data.hasOwnProperty('largeVolumeConf')) {
                obj['largeVolumeConf'] = LaunchConfigurationTemplateLargeVolumeConf.constructFromObject(data['largeVolumeConf']);
            }
            if (data.hasOwnProperty('launchConfigurationTemplateID')) {
                obj['launchConfigurationTemplateID'] = ApiClient.convertToType(data['launchConfigurationTemplateID'], 'String');
            }
            if (data.hasOwnProperty('launchDisposition')) {
                obj['launchDisposition'] = ApiClient.convertToType(data['launchDisposition'], LaunchDisposition);
            }
            if (data.hasOwnProperty('licensing')) {
                obj['licensing'] = Licensing.constructFromObject(data['licensing']);
            }
            if (data.hasOwnProperty('mapAutoTaggingMpeID')) {
                obj['mapAutoTaggingMpeID'] = ApiClient.convertToType(data['mapAutoTaggingMpeID'], 'String');
            }
            if (data.hasOwnProperty('postLaunchActions')) {
                obj['postLaunchActions'] = LaunchConfigurationTemplatePostLaunchActions.constructFromObject(data['postLaunchActions']);
            }
            if (data.hasOwnProperty('smallVolumeConf')) {
                obj['smallVolumeConf'] = LaunchConfigurationTemplateSmallVolumeConf.constructFromObject(data['smallVolumeConf']);
            }
            if (data.hasOwnProperty('smallVolumeMaxSize')) {
                obj['smallVolumeMaxSize'] = ApiClient.convertToType(data['smallVolumeMaxSize'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], Object);
            }
            if (data.hasOwnProperty('targetInstanceTypeRightSizingMethod')) {
                obj['targetInstanceTypeRightSizingMethod'] = ApiClient.convertToType(data['targetInstanceTypeRightSizingMethod'], TargetInstanceTypeRightSizingMethod);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LaunchConfigurationTemplate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LaunchConfigurationTemplate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LaunchConfigurationTemplate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `arn`
        if (data['arn']) { // data not null
          String.validateJSON(data['arn']);
        }
        // validate the optional field `associatePublicIpAddress`
        if (data['associatePublicIpAddress']) { // data not null
          Boolean.validateJSON(data['associatePublicIpAddress']);
        }
        // validate the optional field `bootMode`
        if (data['bootMode']) { // data not null
          BootMode.validateJSON(data['bootMode']);
        }
        // validate the optional field `copyPrivateIp`
        if (data['copyPrivateIp']) { // data not null
          Boolean.validateJSON(data['copyPrivateIp']);
        }
        // validate the optional field `copyTags`
        if (data['copyTags']) { // data not null
          Boolean.validateJSON(data['copyTags']);
        }
        // validate the optional field `ec2LaunchTemplateID`
        if (data['ec2LaunchTemplateID']) { // data not null
          String.validateJSON(data['ec2LaunchTemplateID']);
        }
        // validate the optional field `enableMapAutoTagging`
        if (data['enableMapAutoTagging']) { // data not null
          Boolean.validateJSON(data['enableMapAutoTagging']);
        }
        // validate the optional field `largeVolumeConf`
        if (data['largeVolumeConf']) { // data not null
          LaunchConfigurationTemplateLargeVolumeConf.validateJSON(data['largeVolumeConf']);
        }
        // validate the optional field `launchConfigurationTemplateID`
        if (data['launchConfigurationTemplateID']) { // data not null
          String.validateJSON(data['launchConfigurationTemplateID']);
        }
        // validate the optional field `launchDisposition`
        if (data['launchDisposition']) { // data not null
          LaunchDisposition.validateJSON(data['launchDisposition']);
        }
        // validate the optional field `licensing`
        if (data['licensing']) { // data not null
          Licensing.validateJSON(data['licensing']);
        }
        // validate the optional field `mapAutoTaggingMpeID`
        if (data['mapAutoTaggingMpeID']) { // data not null
          String.validateJSON(data['mapAutoTaggingMpeID']);
        }
        // validate the optional field `postLaunchActions`
        if (data['postLaunchActions']) { // data not null
          LaunchConfigurationTemplatePostLaunchActions.validateJSON(data['postLaunchActions']);
        }
        // validate the optional field `smallVolumeConf`
        if (data['smallVolumeConf']) { // data not null
          LaunchConfigurationTemplateSmallVolumeConf.validateJSON(data['smallVolumeConf']);
        }
        // validate the optional field `smallVolumeMaxSize`
        if (data['smallVolumeMaxSize']) { // data not null
          Number.validateJSON(data['smallVolumeMaxSize']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          Object.validateJSON(data['tags']);
        }
        // validate the optional field `targetInstanceTypeRightSizingMethod`
        if (data['targetInstanceTypeRightSizingMethod']) { // data not null
          TargetInstanceTypeRightSizingMethod.validateJSON(data['targetInstanceTypeRightSizingMethod']);
        }

        return true;
    }


}

LaunchConfigurationTemplate.RequiredProperties = ["launchConfigurationTemplateID"];

/**
 * @member {String} arn
 */
LaunchConfigurationTemplate.prototype['arn'] = undefined;

/**
 * @member {Boolean} associatePublicIpAddress
 */
LaunchConfigurationTemplate.prototype['associatePublicIpAddress'] = undefined;

/**
 * @member {module:model/BootMode} bootMode
 */
LaunchConfigurationTemplate.prototype['bootMode'] = undefined;

/**
 * @member {Boolean} copyPrivateIp
 */
LaunchConfigurationTemplate.prototype['copyPrivateIp'] = undefined;

/**
 * @member {Boolean} copyTags
 */
LaunchConfigurationTemplate.prototype['copyTags'] = undefined;

/**
 * @member {String} ec2LaunchTemplateID
 */
LaunchConfigurationTemplate.prototype['ec2LaunchTemplateID'] = undefined;

/**
 * @member {Boolean} enableMapAutoTagging
 */
LaunchConfigurationTemplate.prototype['enableMapAutoTagging'] = undefined;

/**
 * @member {module:model/LaunchConfigurationTemplateLargeVolumeConf} largeVolumeConf
 */
LaunchConfigurationTemplate.prototype['largeVolumeConf'] = undefined;

/**
 * @member {String} launchConfigurationTemplateID
 */
LaunchConfigurationTemplate.prototype['launchConfigurationTemplateID'] = undefined;

/**
 * @member {module:model/LaunchDisposition} launchDisposition
 */
LaunchConfigurationTemplate.prototype['launchDisposition'] = undefined;

/**
 * @member {module:model/Licensing} licensing
 */
LaunchConfigurationTemplate.prototype['licensing'] = undefined;

/**
 * @member {String} mapAutoTaggingMpeID
 */
LaunchConfigurationTemplate.prototype['mapAutoTaggingMpeID'] = undefined;

/**
 * @member {module:model/LaunchConfigurationTemplatePostLaunchActions} postLaunchActions
 */
LaunchConfigurationTemplate.prototype['postLaunchActions'] = undefined;

/**
 * @member {module:model/LaunchConfigurationTemplateSmallVolumeConf} smallVolumeConf
 */
LaunchConfigurationTemplate.prototype['smallVolumeConf'] = undefined;

/**
 * @member {Number} smallVolumeMaxSize
 */
LaunchConfigurationTemplate.prototype['smallVolumeMaxSize'] = undefined;

/**
 * @member {Object} tags
 */
LaunchConfigurationTemplate.prototype['tags'] = undefined;

/**
 * @member {module:model/TargetInstanceTypeRightSizingMethod} targetInstanceTypeRightSizingMethod
 */
LaunchConfigurationTemplate.prototype['targetInstanceTypeRightSizingMethod'] = undefined;






export default LaunchConfigurationTemplate;

