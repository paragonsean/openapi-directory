/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReplicationConfigurationDataPlaneRouting from './ReplicationConfigurationDataPlaneRouting';
import ReplicationConfigurationDefaultLargeStagingDiskType from './ReplicationConfigurationDefaultLargeStagingDiskType';
import ReplicationConfigurationEbsEncryption from './ReplicationConfigurationEbsEncryption';

/**
 * The ReplicationConfiguration model module.
 * @module model/ReplicationConfiguration
 * @version 2020-02-26
 */
class ReplicationConfiguration {
    /**
     * Constructs a new <code>ReplicationConfiguration</code>.
     * @alias module:model/ReplicationConfiguration
     */
    constructor() { 
        
        ReplicationConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplicationConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicationConfiguration} obj Optional instance to populate.
     * @return {module:model/ReplicationConfiguration} The populated <code>ReplicationConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicationConfiguration();

            if (data.hasOwnProperty('associateDefaultSecurityGroup')) {
                obj['associateDefaultSecurityGroup'] = ApiClient.convertToType(data['associateDefaultSecurityGroup'], 'Boolean');
            }
            if (data.hasOwnProperty('bandwidthThrottling')) {
                obj['bandwidthThrottling'] = ApiClient.convertToType(data['bandwidthThrottling'], 'Number');
            }
            if (data.hasOwnProperty('createPublicIP')) {
                obj['createPublicIP'] = ApiClient.convertToType(data['createPublicIP'], 'Boolean');
            }
            if (data.hasOwnProperty('dataPlaneRouting')) {
                obj['dataPlaneRouting'] = ApiClient.convertToType(data['dataPlaneRouting'], ReplicationConfigurationDataPlaneRouting);
            }
            if (data.hasOwnProperty('defaultLargeStagingDiskType')) {
                obj['defaultLargeStagingDiskType'] = ApiClient.convertToType(data['defaultLargeStagingDiskType'], ReplicationConfigurationDefaultLargeStagingDiskType);
            }
            if (data.hasOwnProperty('ebsEncryption')) {
                obj['ebsEncryption'] = ApiClient.convertToType(data['ebsEncryption'], ReplicationConfigurationEbsEncryption);
            }
            if (data.hasOwnProperty('ebsEncryptionKeyArn')) {
                obj['ebsEncryptionKeyArn'] = ApiClient.convertToType(data['ebsEncryptionKeyArn'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('replicatedDisks')) {
                obj['replicatedDisks'] = ApiClient.convertToType(data['replicatedDisks'], Array);
            }
            if (data.hasOwnProperty('replicationServerInstanceType')) {
                obj['replicationServerInstanceType'] = ApiClient.convertToType(data['replicationServerInstanceType'], 'String');
            }
            if (data.hasOwnProperty('replicationServersSecurityGroupsIDs')) {
                obj['replicationServersSecurityGroupsIDs'] = ApiClient.convertToType(data['replicationServersSecurityGroupsIDs'], Array);
            }
            if (data.hasOwnProperty('sourceServerID')) {
                obj['sourceServerID'] = ApiClient.convertToType(data['sourceServerID'], 'String');
            }
            if (data.hasOwnProperty('stagingAreaSubnetId')) {
                obj['stagingAreaSubnetId'] = ApiClient.convertToType(data['stagingAreaSubnetId'], 'String');
            }
            if (data.hasOwnProperty('stagingAreaTags')) {
                obj['stagingAreaTags'] = ApiClient.convertToType(data['stagingAreaTags'], Object);
            }
            if (data.hasOwnProperty('useDedicatedReplicationServer')) {
                obj['useDedicatedReplicationServer'] = ApiClient.convertToType(data['useDedicatedReplicationServer'], 'Boolean');
            }
            if (data.hasOwnProperty('useFipsEndpoint')) {
                obj['useFipsEndpoint'] = ApiClient.convertToType(data['useFipsEndpoint'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicationConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicationConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `associateDefaultSecurityGroup`
        if (data['associateDefaultSecurityGroup']) { // data not null
          Boolean.validateJSON(data['associateDefaultSecurityGroup']);
        }
        // validate the optional field `bandwidthThrottling`
        if (data['bandwidthThrottling']) { // data not null
          Number.validateJSON(data['bandwidthThrottling']);
        }
        // validate the optional field `createPublicIP`
        if (data['createPublicIP']) { // data not null
          Boolean.validateJSON(data['createPublicIP']);
        }
        // validate the optional field `dataPlaneRouting`
        if (data['dataPlaneRouting']) { // data not null
          ReplicationConfigurationDataPlaneRouting.validateJSON(data['dataPlaneRouting']);
        }
        // validate the optional field `defaultLargeStagingDiskType`
        if (data['defaultLargeStagingDiskType']) { // data not null
          ReplicationConfigurationDefaultLargeStagingDiskType.validateJSON(data['defaultLargeStagingDiskType']);
        }
        // validate the optional field `ebsEncryption`
        if (data['ebsEncryption']) { // data not null
          ReplicationConfigurationEbsEncryption.validateJSON(data['ebsEncryption']);
        }
        // validate the optional field `ebsEncryptionKeyArn`
        if (data['ebsEncryptionKeyArn']) { // data not null
          String.validateJSON(data['ebsEncryptionKeyArn']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          String.validateJSON(data['name']);
        }
        // validate the optional field `replicatedDisks`
        if (data['replicatedDisks']) { // data not null
          Array.validateJSON(data['replicatedDisks']);
        }
        // validate the optional field `replicationServerInstanceType`
        if (data['replicationServerInstanceType']) { // data not null
          String.validateJSON(data['replicationServerInstanceType']);
        }
        // validate the optional field `replicationServersSecurityGroupsIDs`
        if (data['replicationServersSecurityGroupsIDs']) { // data not null
          Array.validateJSON(data['replicationServersSecurityGroupsIDs']);
        }
        // validate the optional field `sourceServerID`
        if (data['sourceServerID']) { // data not null
          String.validateJSON(data['sourceServerID']);
        }
        // validate the optional field `stagingAreaSubnetId`
        if (data['stagingAreaSubnetId']) { // data not null
          String.validateJSON(data['stagingAreaSubnetId']);
        }
        // validate the optional field `stagingAreaTags`
        if (data['stagingAreaTags']) { // data not null
          Object.validateJSON(data['stagingAreaTags']);
        }
        // validate the optional field `useDedicatedReplicationServer`
        if (data['useDedicatedReplicationServer']) { // data not null
          Boolean.validateJSON(data['useDedicatedReplicationServer']);
        }
        // validate the optional field `useFipsEndpoint`
        if (data['useFipsEndpoint']) { // data not null
          Boolean.validateJSON(data['useFipsEndpoint']);
        }

        return true;
    }


}



/**
 * @member {Boolean} associateDefaultSecurityGroup
 */
ReplicationConfiguration.prototype['associateDefaultSecurityGroup'] = undefined;

/**
 * @member {Number} bandwidthThrottling
 */
ReplicationConfiguration.prototype['bandwidthThrottling'] = undefined;

/**
 * @member {Boolean} createPublicIP
 */
ReplicationConfiguration.prototype['createPublicIP'] = undefined;

/**
 * @member {module:model/ReplicationConfigurationDataPlaneRouting} dataPlaneRouting
 */
ReplicationConfiguration.prototype['dataPlaneRouting'] = undefined;

/**
 * @member {module:model/ReplicationConfigurationDefaultLargeStagingDiskType} defaultLargeStagingDiskType
 */
ReplicationConfiguration.prototype['defaultLargeStagingDiskType'] = undefined;

/**
 * @member {module:model/ReplicationConfigurationEbsEncryption} ebsEncryption
 */
ReplicationConfiguration.prototype['ebsEncryption'] = undefined;

/**
 * @member {String} ebsEncryptionKeyArn
 */
ReplicationConfiguration.prototype['ebsEncryptionKeyArn'] = undefined;

/**
 * @member {String} name
 */
ReplicationConfiguration.prototype['name'] = undefined;

/**
 * @member {Array} replicatedDisks
 */
ReplicationConfiguration.prototype['replicatedDisks'] = undefined;

/**
 * @member {String} replicationServerInstanceType
 */
ReplicationConfiguration.prototype['replicationServerInstanceType'] = undefined;

/**
 * @member {Array} replicationServersSecurityGroupsIDs
 */
ReplicationConfiguration.prototype['replicationServersSecurityGroupsIDs'] = undefined;

/**
 * @member {String} sourceServerID
 */
ReplicationConfiguration.prototype['sourceServerID'] = undefined;

/**
 * @member {String} stagingAreaSubnetId
 */
ReplicationConfiguration.prototype['stagingAreaSubnetId'] = undefined;

/**
 * @member {Object} stagingAreaTags
 */
ReplicationConfiguration.prototype['stagingAreaTags'] = undefined;

/**
 * @member {Boolean} useDedicatedReplicationServer
 */
ReplicationConfiguration.prototype['useDedicatedReplicationServer'] = undefined;

/**
 * @member {Boolean} useFipsEndpoint
 */
ReplicationConfiguration.prototype['useFipsEndpoint'] = undefined;






export default ReplicationConfiguration;

