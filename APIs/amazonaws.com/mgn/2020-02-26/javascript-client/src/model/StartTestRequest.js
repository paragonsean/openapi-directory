/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StartTestRequest model module.
 * @module model/StartTestRequest
 * @version 2020-02-26
 */
class StartTestRequest {
    /**
     * Constructs a new <code>StartTestRequest</code>.
     * @alias module:model/StartTestRequest
     * @param sourceServerIDs {Array.<String>} Start Test for Source Server IDs.
     */
    constructor(sourceServerIDs) { 
        
        StartTestRequest.initialize(this, sourceServerIDs);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sourceServerIDs) { 
        obj['sourceServerIDs'] = sourceServerIDs;
    }

    /**
     * Constructs a <code>StartTestRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StartTestRequest} obj Optional instance to populate.
     * @return {module:model/StartTestRequest} The populated <code>StartTestRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StartTestRequest();

            if (data.hasOwnProperty('accountID')) {
                obj['accountID'] = ApiClient.convertToType(data['accountID'], 'String');
            }
            if (data.hasOwnProperty('sourceServerIDs')) {
                obj['sourceServerIDs'] = ApiClient.convertToType(data['sourceServerIDs'], ['String']);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StartTestRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StartTestRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StartTestRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountID'] && !(typeof data['accountID'] === 'string' || data['accountID'] instanceof String)) {
            throw new Error("Expected the field `accountID` to be a primitive type in the JSON string but got " + data['accountID']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sourceServerIDs'])) {
            throw new Error("Expected the field `sourceServerIDs` to be an array in the JSON data but got " + data['sourceServerIDs']);
        }

        return true;
    }


}

StartTestRequest.RequiredProperties = ["sourceServerIDs"];

/**
 * Start Test for Account ID.
 * @member {String} accountID
 */
StartTestRequest.prototype['accountID'] = undefined;

/**
 * Start Test for Source Server IDs.
 * @member {Array.<String>} sourceServerIDs
 */
StartTestRequest.prototype['sourceServerIDs'] = undefined;

/**
 * Start Test by Tags.
 * @member {Object.<String, String>} tags
 */
StartTestRequest.prototype['tags'] = undefined;






export default StartTestRequest;

