/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Application from '../model/Application';
import ArchiveApplicationRequest from '../model/ArchiveApplicationRequest';
import ArchiveWaveRequest from '../model/ArchiveWaveRequest';
import AssociateApplicationsRequest from '../model/AssociateApplicationsRequest';
import AssociateSourceServersRequest from '../model/AssociateSourceServersRequest';
import ChangeServerLifeCycleStateRequest from '../model/ChangeServerLifeCycleStateRequest';
import CreateApplicationRequest from '../model/CreateApplicationRequest';
import CreateLaunchConfigurationTemplateRequest from '../model/CreateLaunchConfigurationTemplateRequest';
import CreateReplicationConfigurationTemplateRequest from '../model/CreateReplicationConfigurationTemplateRequest';
import CreateWaveRequest from '../model/CreateWaveRequest';
import DeleteJobRequest from '../model/DeleteJobRequest';
import DeleteLaunchConfigurationTemplateRequest from '../model/DeleteLaunchConfigurationTemplateRequest';
import DeleteReplicationConfigurationTemplateRequest from '../model/DeleteReplicationConfigurationTemplateRequest';
import DeleteSourceServerRequest from '../model/DeleteSourceServerRequest';
import DeleteVcenterClientRequest from '../model/DeleteVcenterClientRequest';
import DescribeJobLogItemsRequest from '../model/DescribeJobLogItemsRequest';
import DescribeJobLogItemsResponse from '../model/DescribeJobLogItemsResponse';
import DescribeJobsRequest from '../model/DescribeJobsRequest';
import DescribeJobsResponse from '../model/DescribeJobsResponse';
import DescribeLaunchConfigurationTemplatesRequest from '../model/DescribeLaunchConfigurationTemplatesRequest';
import DescribeLaunchConfigurationTemplatesResponse from '../model/DescribeLaunchConfigurationTemplatesResponse';
import DescribeReplicationConfigurationTemplatesRequest from '../model/DescribeReplicationConfigurationTemplatesRequest';
import DescribeReplicationConfigurationTemplatesResponse from '../model/DescribeReplicationConfigurationTemplatesResponse';
import DescribeSourceServersRequest from '../model/DescribeSourceServersRequest';
import DescribeSourceServersResponse from '../model/DescribeSourceServersResponse';
import DescribeVcenterClientsResponse from '../model/DescribeVcenterClientsResponse';
import DisconnectFromServiceRequest from '../model/DisconnectFromServiceRequest';
import FinalizeCutoverRequest from '../model/FinalizeCutoverRequest';
import GetLaunchConfigurationRequest from '../model/GetLaunchConfigurationRequest';
import GetReplicationConfigurationRequest from '../model/GetReplicationConfigurationRequest';
import LaunchConfiguration from '../model/LaunchConfiguration';
import LaunchConfigurationTemplate from '../model/LaunchConfigurationTemplate';
import ListApplicationsRequest from '../model/ListApplicationsRequest';
import ListApplicationsResponse from '../model/ListApplicationsResponse';
import ListExportErrorsRequest from '../model/ListExportErrorsRequest';
import ListExportErrorsResponse from '../model/ListExportErrorsResponse';
import ListExportsRequest from '../model/ListExportsRequest';
import ListExportsResponse from '../model/ListExportsResponse';
import ListImportErrorsRequest from '../model/ListImportErrorsRequest';
import ListImportErrorsResponse from '../model/ListImportErrorsResponse';
import ListImportsRequest from '../model/ListImportsRequest';
import ListImportsResponse from '../model/ListImportsResponse';
import ListManagedAccountsRequest from '../model/ListManagedAccountsRequest';
import ListManagedAccountsResponse from '../model/ListManagedAccountsResponse';
import ListSourceServerActionsRequest from '../model/ListSourceServerActionsRequest';
import ListSourceServerActionsResponse from '../model/ListSourceServerActionsResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import ListTemplateActionsRequest from '../model/ListTemplateActionsRequest';
import ListTemplateActionsResponse from '../model/ListTemplateActionsResponse';
import ListWavesRequest from '../model/ListWavesRequest';
import ListWavesResponse from '../model/ListWavesResponse';
import MarkAsArchivedRequest from '../model/MarkAsArchivedRequest';
import PauseReplicationRequest from '../model/PauseReplicationRequest';
import PutSourceServerActionRequest from '../model/PutSourceServerActionRequest';
import PutTemplateActionRequest from '../model/PutTemplateActionRequest';
import RemoveSourceServerActionRequest from '../model/RemoveSourceServerActionRequest';
import RemoveTemplateActionRequest from '../model/RemoveTemplateActionRequest';
import ReplicationConfiguration from '../model/ReplicationConfiguration';
import ReplicationConfigurationTemplate from '../model/ReplicationConfigurationTemplate';
import ResumeReplicationRequest from '../model/ResumeReplicationRequest';
import RetryDataReplicationRequest from '../model/RetryDataReplicationRequest';
import SourceServer from '../model/SourceServer';
import SourceServerActionDocument from '../model/SourceServerActionDocument';
import StartCutoverRequest from '../model/StartCutoverRequest';
import StartCutoverResponse from '../model/StartCutoverResponse';
import StartExportRequest from '../model/StartExportRequest';
import StartExportResponse from '../model/StartExportResponse';
import StartImportRequest from '../model/StartImportRequest';
import StartImportResponse from '../model/StartImportResponse';
import StartReplicationRequest from '../model/StartReplicationRequest';
import StartTestRequest from '../model/StartTestRequest';
import StartTestResponse from '../model/StartTestResponse';
import StopReplicationRequest from '../model/StopReplicationRequest';
import TagResourceRequest from '../model/TagResourceRequest';
import TemplateActionDocument from '../model/TemplateActionDocument';
import TerminateTargetInstancesRequest from '../model/TerminateTargetInstancesRequest';
import TerminateTargetInstancesResponse from '../model/TerminateTargetInstancesResponse';
import UpdateApplicationRequest from '../model/UpdateApplicationRequest';
import UpdateLaunchConfigurationRequest from '../model/UpdateLaunchConfigurationRequest';
import UpdateLaunchConfigurationTemplateRequest from '../model/UpdateLaunchConfigurationTemplateRequest';
import UpdateReplicationConfigurationRequest from '../model/UpdateReplicationConfigurationRequest';
import UpdateReplicationConfigurationTemplateRequest from '../model/UpdateReplicationConfigurationTemplateRequest';
import UpdateSourceServerReplicationTypeRequest from '../model/UpdateSourceServerReplicationTypeRequest';
import UpdateWaveRequest from '../model/UpdateWaveRequest';
import Wave from '../model/Wave';

/**
* Default service.
* @module api/DefaultApi
* @version 2020-02-26
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the archiveApplication operation.
     * @callback module:api/DefaultApi~archiveApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive application.
     * @param {module:model/ArchiveApplicationRequest} archiveApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~archiveApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    archiveApplication(archiveApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = archiveApplicationRequest;
      // verify the required parameter 'archiveApplicationRequest' is set
      if (archiveApplicationRequest === undefined || archiveApplicationRequest === null) {
        throw new Error("Missing the required parameter 'archiveApplicationRequest' when calling archiveApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/ArchiveApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveWave operation.
     * @callback module:api/DefaultApi~archiveWaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wave} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archive wave.
     * @param {module:model/ArchiveWaveRequest} archiveWaveRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~archiveWaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wave}
     */
    archiveWave(archiveWaveRequest, opts, callback) {
      opts = opts || {};
      let postBody = archiveWaveRequest;
      // verify the required parameter 'archiveWaveRequest' is set
      if (archiveWaveRequest === undefined || archiveWaveRequest === null) {
        throw new Error("Missing the required parameter 'archiveWaveRequest' when calling archiveWave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Wave;
      return this.apiClient.callApi(
        '/ArchiveWave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateApplications operation.
     * @callback module:api/DefaultApi~associateApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate applications to wave.
     * @param {module:model/AssociateApplicationsRequest} associateApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateApplications(associateApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateApplicationsRequest;
      // verify the required parameter 'associateApplicationsRequest' is set
      if (associateApplicationsRequest === undefined || associateApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'associateApplicationsRequest' when calling associateApplications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/AssociateApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the associateSourceServers operation.
     * @callback module:api/DefaultApi~associateSourceServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associate source servers to application.
     * @param {module:model/AssociateSourceServersRequest} associateSourceServersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~associateSourceServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    associateSourceServers(associateSourceServersRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateSourceServersRequest;
      // verify the required parameter 'associateSourceServersRequest' is set
      if (associateSourceServersRequest === undefined || associateSourceServersRequest === null) {
        throw new Error("Missing the required parameter 'associateSourceServersRequest' when calling associateSourceServers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/AssociateSourceServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeServerLifeCycleState operation.
     * @callback module:api/DefaultApi~changeServerLifeCycleStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)
     * @param {module:model/ChangeServerLifeCycleStateRequest} changeServerLifeCycleStateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~changeServerLifeCycleStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    changeServerLifeCycleState(changeServerLifeCycleStateRequest, opts, callback) {
      opts = opts || {};
      let postBody = changeServerLifeCycleStateRequest;
      // verify the required parameter 'changeServerLifeCycleStateRequest' is set
      if (changeServerLifeCycleStateRequest === undefined || changeServerLifeCycleStateRequest === null) {
        throw new Error("Missing the required parameter 'changeServerLifeCycleStateRequest' when calling changeServerLifeCycleState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/ChangeServerLifeCycleState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApplication operation.
     * @callback module:api/DefaultApi~createApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create application.
     * @param {module:model/CreateApplicationRequest} createApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    createApplication(createApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApplicationRequest;
      // verify the required parameter 'createApplicationRequest' is set
      if (createApplicationRequest === undefined || createApplicationRequest === null) {
        throw new Error("Missing the required parameter 'createApplicationRequest' when calling createApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/CreateApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLaunchConfigurationTemplate operation.
     * @callback module:api/DefaultApi~createLaunchConfigurationTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LaunchConfigurationTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Launch Configuration Template.
     * @param {module:model/CreateLaunchConfigurationTemplateRequest} createLaunchConfigurationTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLaunchConfigurationTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LaunchConfigurationTemplate}
     */
    createLaunchConfigurationTemplate(createLaunchConfigurationTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLaunchConfigurationTemplateRequest;
      // verify the required parameter 'createLaunchConfigurationTemplateRequest' is set
      if (createLaunchConfigurationTemplateRequest === undefined || createLaunchConfigurationTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createLaunchConfigurationTemplateRequest' when calling createLaunchConfigurationTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LaunchConfigurationTemplate;
      return this.apiClient.callApi(
        '/CreateLaunchConfigurationTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReplicationConfigurationTemplate operation.
     * @callback module:api/DefaultApi~createReplicationConfigurationTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationConfigurationTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new ReplicationConfigurationTemplate.
     * @param {module:model/CreateReplicationConfigurationTemplateRequest} createReplicationConfigurationTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createReplicationConfigurationTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationConfigurationTemplate}
     */
    createReplicationConfigurationTemplate(createReplicationConfigurationTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = createReplicationConfigurationTemplateRequest;
      // verify the required parameter 'createReplicationConfigurationTemplateRequest' is set
      if (createReplicationConfigurationTemplateRequest === undefined || createReplicationConfigurationTemplateRequest === null) {
        throw new Error("Missing the required parameter 'createReplicationConfigurationTemplateRequest' when calling createReplicationConfigurationTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationConfigurationTemplate;
      return this.apiClient.callApi(
        '/CreateReplicationConfigurationTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createWave operation.
     * @callback module:api/DefaultApi~createWaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wave} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create wave.
     * @param {module:model/CreateWaveRequest} createWaveRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createWaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wave}
     */
    createWave(createWaveRequest, opts, callback) {
      opts = opts || {};
      let postBody = createWaveRequest;
      // verify the required parameter 'createWaveRequest' is set
      if (createWaveRequest === undefined || createWaveRequest === null) {
        throw new Error("Missing the required parameter 'createWaveRequest' when calling createWave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Wave;
      return this.apiClient.callApi(
        '/CreateWave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApplication operation.
     * @callback module:api/DefaultApi~deleteApplicationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete application.
     * @param {module:model/ArchiveApplicationRequest} archiveApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteApplication(archiveApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = archiveApplicationRequest;
      // verify the required parameter 'archiveApplicationRequest' is set
      if (archiveApplicationRequest === undefined || archiveApplicationRequest === null) {
        throw new Error("Missing the required parameter 'archiveApplicationRequest' when calling deleteApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteJob operation.
     * @callback module:api/DefaultApi~deleteJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single Job by ID.
     * @param {module:model/DeleteJobRequest} deleteJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteJob(deleteJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteJobRequest;
      // verify the required parameter 'deleteJobRequest' is set
      if (deleteJobRequest === undefined || deleteJobRequest === null) {
        throw new Error("Missing the required parameter 'deleteJobRequest' when calling deleteJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteLaunchConfigurationTemplate operation.
     * @callback module:api/DefaultApi~deleteLaunchConfigurationTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single Launch Configuration Template by ID.
     * @param {module:model/DeleteLaunchConfigurationTemplateRequest} deleteLaunchConfigurationTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteLaunchConfigurationTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteLaunchConfigurationTemplate(deleteLaunchConfigurationTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteLaunchConfigurationTemplateRequest;
      // verify the required parameter 'deleteLaunchConfigurationTemplateRequest' is set
      if (deleteLaunchConfigurationTemplateRequest === undefined || deleteLaunchConfigurationTemplateRequest === null) {
        throw new Error("Missing the required parameter 'deleteLaunchConfigurationTemplateRequest' when calling deleteLaunchConfigurationTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteLaunchConfigurationTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReplicationConfigurationTemplate operation.
     * @callback module:api/DefaultApi~deleteReplicationConfigurationTemplateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single Replication Configuration Template by ID
     * @param {module:model/DeleteReplicationConfigurationTemplateRequest} deleteReplicationConfigurationTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReplicationConfigurationTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteReplicationConfigurationTemplate(deleteReplicationConfigurationTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteReplicationConfigurationTemplateRequest;
      // verify the required parameter 'deleteReplicationConfigurationTemplateRequest' is set
      if (deleteReplicationConfigurationTemplateRequest === undefined || deleteReplicationConfigurationTemplateRequest === null) {
        throw new Error("Missing the required parameter 'deleteReplicationConfigurationTemplateRequest' when calling deleteReplicationConfigurationTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteReplicationConfigurationTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSourceServer operation.
     * @callback module:api/DefaultApi~deleteSourceServerCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single source server by ID.
     * @param {module:model/DeleteSourceServerRequest} deleteSourceServerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSourceServerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteSourceServer(deleteSourceServerRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteSourceServerRequest;
      // verify the required parameter 'deleteSourceServerRequest' is set
      if (deleteSourceServerRequest === undefined || deleteSourceServerRequest === null) {
        throw new Error("Missing the required parameter 'deleteSourceServerRequest' when calling deleteSourceServer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteSourceServer', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVcenterClient operation.
     * @callback module:api/DefaultApi~deleteVcenterClientCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a given vCenter client by ID.
     * @param {module:model/DeleteVcenterClientRequest} deleteVcenterClientRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVcenterClientCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVcenterClient(deleteVcenterClientRequest, opts, callback) {
      opts = opts || {};
      let postBody = deleteVcenterClientRequest;
      // verify the required parameter 'deleteVcenterClientRequest' is set
      if (deleteVcenterClientRequest === undefined || deleteVcenterClientRequest === null) {
        throw new Error("Missing the required parameter 'deleteVcenterClientRequest' when calling deleteVcenterClient");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/DeleteVcenterClient', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteWave operation.
     * @callback module:api/DefaultApi~deleteWaveCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete wave.
     * @param {module:model/ArchiveWaveRequest} archiveWaveRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteWaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteWave(archiveWaveRequest, opts, callback) {
      opts = opts || {};
      let postBody = archiveWaveRequest;
      // verify the required parameter 'archiveWaveRequest' is set
      if (archiveWaveRequest === undefined || archiveWaveRequest === null) {
        throw new Error("Missing the required parameter 'archiveWaveRequest' when calling deleteWave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DeleteWave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeJobLogItems operation.
     * @callback module:api/DefaultApi~describeJobLogItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeJobLogItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves detailed job log items with paging.
     * @param {module:model/DescribeJobLogItemsRequest} describeJobLogItemsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeJobLogItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeJobLogItemsResponse}
     */
    describeJobLogItems(describeJobLogItemsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeJobLogItemsRequest;
      // verify the required parameter 'describeJobLogItemsRequest' is set
      if (describeJobLogItemsRequest === undefined || describeJobLogItemsRequest === null) {
        throw new Error("Missing the required parameter 'describeJobLogItemsRequest' when calling describeJobLogItems");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeJobLogItemsResponse;
      return this.apiClient.callApi(
        '/DescribeJobLogItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeJobs operation.
     * @callback module:api/DefaultApi~describeJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeJobsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.
     * @param {module:model/DescribeJobsRequest} describeJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeJobsResponse}
     */
    describeJobs(describeJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeJobsRequest;
      // verify the required parameter 'describeJobsRequest' is set
      if (describeJobsRequest === undefined || describeJobsRequest === null) {
        throw new Error("Missing the required parameter 'describeJobsRequest' when calling describeJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeJobsResponse;
      return this.apiClient.callApi(
        '/DescribeJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeLaunchConfigurationTemplates operation.
     * @callback module:api/DefaultApi~describeLaunchConfigurationTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeLaunchConfigurationTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all Launch Configuration Templates, filtered by Launch Configuration Template IDs
     * @param {module:model/DescribeLaunchConfigurationTemplatesRequest} describeLaunchConfigurationTemplatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeLaunchConfigurationTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeLaunchConfigurationTemplatesResponse}
     */
    describeLaunchConfigurationTemplates(describeLaunchConfigurationTemplatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeLaunchConfigurationTemplatesRequest;
      // verify the required parameter 'describeLaunchConfigurationTemplatesRequest' is set
      if (describeLaunchConfigurationTemplatesRequest === undefined || describeLaunchConfigurationTemplatesRequest === null) {
        throw new Error("Missing the required parameter 'describeLaunchConfigurationTemplatesRequest' when calling describeLaunchConfigurationTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeLaunchConfigurationTemplatesResponse;
      return this.apiClient.callApi(
        '/DescribeLaunchConfigurationTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReplicationConfigurationTemplates operation.
     * @callback module:api/DefaultApi~describeReplicationConfigurationTemplatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReplicationConfigurationTemplatesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.
     * @param {module:model/DescribeReplicationConfigurationTemplatesRequest} describeReplicationConfigurationTemplatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeReplicationConfigurationTemplatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReplicationConfigurationTemplatesResponse}
     */
    describeReplicationConfigurationTemplates(describeReplicationConfigurationTemplatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeReplicationConfigurationTemplatesRequest;
      // verify the required parameter 'describeReplicationConfigurationTemplatesRequest' is set
      if (describeReplicationConfigurationTemplatesRequest === undefined || describeReplicationConfigurationTemplatesRequest === null) {
        throw new Error("Missing the required parameter 'describeReplicationConfigurationTemplatesRequest' when calling describeReplicationConfigurationTemplates");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeReplicationConfigurationTemplatesResponse;
      return this.apiClient.callApi(
        '/DescribeReplicationConfigurationTemplates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSourceServers operation.
     * @callback module:api/DefaultApi~describeSourceServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSourceServersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all SourceServers or multiple SourceServers by ID.
     * @param {module:model/DescribeSourceServersRequest} describeSourceServersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeSourceServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSourceServersResponse}
     */
    describeSourceServers(describeSourceServersRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeSourceServersRequest;
      // verify the required parameter 'describeSourceServersRequest' is set
      if (describeSourceServersRequest === undefined || describeSourceServersRequest === null) {
        throw new Error("Missing the required parameter 'describeSourceServersRequest' when calling describeSourceServers");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeSourceServersResponse;
      return this.apiClient.callApi(
        '/DescribeSourceServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeVcenterClients operation.
     * @callback module:api/DefaultApi~describeVcenterClientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeVcenterClientsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the installed vCenter clients.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] Maximum results to be returned in DescribeVcenterClients.
     * @param {String} [nextToken] Next pagination token to be provided for DescribeVcenterClients.
     * @param {module:api/DefaultApi~describeVcenterClientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeVcenterClientsResponse}
     */
    describeVcenterClients(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeVcenterClientsResponse;
      return this.apiClient.callApi(
        '/DescribeVcenterClients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateApplications operation.
     * @callback module:api/DefaultApi~disassociateApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociate applications from wave.
     * @param {module:model/AssociateApplicationsRequest} associateApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateApplications(associateApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateApplicationsRequest;
      // verify the required parameter 'associateApplicationsRequest' is set
      if (associateApplicationsRequest === undefined || associateApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'associateApplicationsRequest' when calling disassociateApplications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DisassociateApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disassociateSourceServers operation.
     * @callback module:api/DefaultApi~disassociateSourceServersCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disassociate source servers from application.
     * @param {module:model/AssociateSourceServersRequest} associateSourceServersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disassociateSourceServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    disassociateSourceServers(associateSourceServersRequest, opts, callback) {
      opts = opts || {};
      let postBody = associateSourceServersRequest;
      // verify the required parameter 'associateSourceServersRequest' is set
      if (associateSourceServersRequest === undefined || associateSourceServersRequest === null) {
        throw new Error("Missing the required parameter 'associateSourceServersRequest' when calling disassociateSourceServers");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/DisassociateSourceServers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disconnectFromService operation.
     * @callback module:api/DefaultApi~disconnectFromServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
     * @param {module:model/DisconnectFromServiceRequest} disconnectFromServiceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~disconnectFromServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    disconnectFromService(disconnectFromServiceRequest, opts, callback) {
      opts = opts || {};
      let postBody = disconnectFromServiceRequest;
      // verify the required parameter 'disconnectFromServiceRequest' is set
      if (disconnectFromServiceRequest === undefined || disconnectFromServiceRequest === null) {
        throw new Error("Missing the required parameter 'disconnectFromServiceRequest' when calling disconnectFromService");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/DisconnectFromService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the finalizeCutover operation.
     * @callback module:api/DefaultApi~finalizeCutoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
     * @param {module:model/FinalizeCutoverRequest} finalizeCutoverRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~finalizeCutoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    finalizeCutover(finalizeCutoverRequest, opts, callback) {
      opts = opts || {};
      let postBody = finalizeCutoverRequest;
      // verify the required parameter 'finalizeCutoverRequest' is set
      if (finalizeCutoverRequest === undefined || finalizeCutoverRequest === null) {
        throw new Error("Missing the required parameter 'finalizeCutoverRequest' when calling finalizeCutover");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/FinalizeCutover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLaunchConfiguration operation.
     * @callback module:api/DefaultApi~getLaunchConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LaunchConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all LaunchConfigurations available, filtered by Source Server IDs.
     * @param {module:model/GetLaunchConfigurationRequest} getLaunchConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getLaunchConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LaunchConfiguration}
     */
    getLaunchConfiguration(getLaunchConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getLaunchConfigurationRequest;
      // verify the required parameter 'getLaunchConfigurationRequest' is set
      if (getLaunchConfigurationRequest === undefined || getLaunchConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'getLaunchConfigurationRequest' when calling getLaunchConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LaunchConfiguration;
      return this.apiClient.callApi(
        '/GetLaunchConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReplicationConfiguration operation.
     * @callback module:api/DefaultApi~getReplicationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all ReplicationConfigurations, filtered by Source Server ID.
     * @param {module:model/GetReplicationConfigurationRequest} getReplicationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReplicationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationConfiguration}
     */
    getReplicationConfiguration(getReplicationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = getReplicationConfigurationRequest;
      // verify the required parameter 'getReplicationConfigurationRequest' is set
      if (getReplicationConfigurationRequest === undefined || getReplicationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'getReplicationConfigurationRequest' when calling getReplicationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationConfiguration;
      return this.apiClient.callApi(
        '/GetReplicationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initializeService operation.
     * @callback module:api/DefaultApi~initializeServiceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initialize Application Migration Service.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~initializeServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    initializeService(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/InitializeService', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listApplications operation.
     * @callback module:api/DefaultApi~listApplicationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListApplicationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all applications or multiple applications by ID.
     * @param {module:model/ListApplicationsRequest} listApplicationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listApplicationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListApplicationsResponse}
     */
    listApplications(listApplicationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listApplicationsRequest;
      // verify the required parameter 'listApplicationsRequest' is set
      if (listApplicationsRequest === undefined || listApplicationsRequest === null) {
        throw new Error("Missing the required parameter 'listApplicationsRequest' when calling listApplications");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListApplicationsResponse;
      return this.apiClient.callApi(
        '/ListApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExportErrors operation.
     * @callback module:api/DefaultApi~listExportErrorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExportErrorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List export errors.
     * @param {module:model/ListExportErrorsRequest} listExportErrorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExportErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExportErrorsResponse}
     */
    listExportErrors(listExportErrorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExportErrorsRequest;
      // verify the required parameter 'listExportErrorsRequest' is set
      if (listExportErrorsRequest === undefined || listExportErrorsRequest === null) {
        throw new Error("Missing the required parameter 'listExportErrorsRequest' when calling listExportErrors");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExportErrorsResponse;
      return this.apiClient.callApi(
        '/ListExportErrors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listExports operation.
     * @callback module:api/DefaultApi~listExportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListExportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List exports.
     * @param {module:model/ListExportsRequest} listExportsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listExportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListExportsResponse}
     */
    listExports(listExportsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listExportsRequest;
      // verify the required parameter 'listExportsRequest' is set
      if (listExportsRequest === undefined || listExportsRequest === null) {
        throw new Error("Missing the required parameter 'listExportsRequest' when calling listExports");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListExportsResponse;
      return this.apiClient.callApi(
        '/ListExports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImportErrors operation.
     * @callback module:api/DefaultApi~listImportErrorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImportErrorsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List import errors.
     * @param {module:model/ListImportErrorsRequest} listImportErrorsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listImportErrorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImportErrorsResponse}
     */
    listImportErrors(listImportErrorsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listImportErrorsRequest;
      // verify the required parameter 'listImportErrorsRequest' is set
      if (listImportErrorsRequest === undefined || listImportErrorsRequest === null) {
        throw new Error("Missing the required parameter 'listImportErrorsRequest' when calling listImportErrors");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListImportErrorsResponse;
      return this.apiClient.callApi(
        '/ListImportErrors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImports operation.
     * @callback module:api/DefaultApi~listImportsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListImportsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List imports.
     * @param {module:model/ListImportsRequest} listImportsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listImportsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListImportsResponse}
     */
    listImports(listImportsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listImportsRequest;
      // verify the required parameter 'listImportsRequest' is set
      if (listImportsRequest === undefined || listImportsRequest === null) {
        throw new Error("Missing the required parameter 'listImportsRequest' when calling listImports");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListImportsResponse;
      return this.apiClient.callApi(
        '/ListImports', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagedAccounts operation.
     * @callback module:api/DefaultApi~listManagedAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListManagedAccountsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Managed Accounts.
     * @param {module:model/ListManagedAccountsRequest} listManagedAccountsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listManagedAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListManagedAccountsResponse}
     */
    listManagedAccounts(listManagedAccountsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listManagedAccountsRequest;
      // verify the required parameter 'listManagedAccountsRequest' is set
      if (listManagedAccountsRequest === undefined || listManagedAccountsRequest === null) {
        throw new Error("Missing the required parameter 'listManagedAccountsRequest' when calling listManagedAccounts");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListManagedAccountsResponse;
      return this.apiClient.callApi(
        '/ListManagedAccounts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSourceServerActions operation.
     * @callback module:api/DefaultApi~listSourceServerActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSourceServerActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List source server post migration custom actions.
     * @param {module:model/ListSourceServerActionsRequest} listSourceServerActionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listSourceServerActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSourceServerActionsResponse}
     */
    listSourceServerActions(listSourceServerActionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listSourceServerActionsRequest;
      // verify the required parameter 'listSourceServerActionsRequest' is set
      if (listSourceServerActionsRequest === undefined || listSourceServerActionsRequest === null) {
        throw new Error("Missing the required parameter 'listSourceServerActionsRequest' when calling listSourceServerActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListSourceServerActionsResponse;
      return this.apiClient.callApi(
        '/ListSourceServerActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all tags for your Application Migration Service resources.
     * @param {String} resourceArn List tags for resource request by ARN.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTemplateActions operation.
     * @callback module:api/DefaultApi~listTemplateActionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTemplateActionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List template post migration custom actions.
     * @param {module:model/ListTemplateActionsRequest} listTemplateActionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listTemplateActionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTemplateActionsResponse}
     */
    listTemplateActions(listTemplateActionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listTemplateActionsRequest;
      // verify the required parameter 'listTemplateActionsRequest' is set
      if (listTemplateActionsRequest === undefined || listTemplateActionsRequest === null) {
        throw new Error("Missing the required parameter 'listTemplateActionsRequest' when calling listTemplateActions");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListTemplateActionsResponse;
      return this.apiClient.callApi(
        '/ListTemplateActions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWaves operation.
     * @callback module:api/DefaultApi~listWavesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWavesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves all waves or multiple waves by ID.
     * @param {module:model/ListWavesRequest} listWavesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listWavesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWavesResponse}
     */
    listWaves(listWavesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listWavesRequest;
      // verify the required parameter 'listWavesRequest' is set
      if (listWavesRequest === undefined || listWavesRequest === null) {
        throw new Error("Missing the required parameter 'listWavesRequest' when calling listWaves");
      }

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListWavesResponse;
      return this.apiClient.callApi(
        '/ListWaves', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the markAsArchived operation.
     * @callback module:api/DefaultApi~markAsArchivedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.
     * @param {module:model/MarkAsArchivedRequest} markAsArchivedRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~markAsArchivedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    markAsArchived(markAsArchivedRequest, opts, callback) {
      opts = opts || {};
      let postBody = markAsArchivedRequest;
      // verify the required parameter 'markAsArchivedRequest' is set
      if (markAsArchivedRequest === undefined || markAsArchivedRequest === null) {
        throw new Error("Missing the required parameter 'markAsArchivedRequest' when calling markAsArchived");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/MarkAsArchived', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pauseReplication operation.
     * @callback module:api/DefaultApi~pauseReplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pause Replication.
     * @param {module:model/PauseReplicationRequest} pauseReplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~pauseReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    pauseReplication(pauseReplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = pauseReplicationRequest;
      // verify the required parameter 'pauseReplicationRequest' is set
      if (pauseReplicationRequest === undefined || pauseReplicationRequest === null) {
        throw new Error("Missing the required parameter 'pauseReplicationRequest' when calling pauseReplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/PauseReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSourceServerAction operation.
     * @callback module:api/DefaultApi~putSourceServerActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServerActionDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put source server post migration custom action.
     * @param {module:model/PutSourceServerActionRequest} putSourceServerActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putSourceServerActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServerActionDocument}
     */
    putSourceServerAction(putSourceServerActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = putSourceServerActionRequest;
      // verify the required parameter 'putSourceServerActionRequest' is set
      if (putSourceServerActionRequest === undefined || putSourceServerActionRequest === null) {
        throw new Error("Missing the required parameter 'putSourceServerActionRequest' when calling putSourceServerAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServerActionDocument;
      return this.apiClient.callApi(
        '/PutSourceServerAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTemplateAction operation.
     * @callback module:api/DefaultApi~putTemplateActionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateActionDocument} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put template post migration custom action.
     * @param {module:model/PutTemplateActionRequest} putTemplateActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putTemplateActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateActionDocument}
     */
    putTemplateAction(putTemplateActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = putTemplateActionRequest;
      // verify the required parameter 'putTemplateActionRequest' is set
      if (putTemplateActionRequest === undefined || putTemplateActionRequest === null) {
        throw new Error("Missing the required parameter 'putTemplateActionRequest' when calling putTemplateAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TemplateActionDocument;
      return this.apiClient.callApi(
        '/PutTemplateAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeSourceServerAction operation.
     * @callback module:api/DefaultApi~removeSourceServerActionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove source server post migration custom action.
     * @param {module:model/RemoveSourceServerActionRequest} removeSourceServerActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeSourceServerActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeSourceServerAction(removeSourceServerActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeSourceServerActionRequest;
      // verify the required parameter 'removeSourceServerActionRequest' is set
      if (removeSourceServerActionRequest === undefined || removeSourceServerActionRequest === null) {
        throw new Error("Missing the required parameter 'removeSourceServerActionRequest' when calling removeSourceServerAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/RemoveSourceServerAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeTemplateAction operation.
     * @callback module:api/DefaultApi~removeTemplateActionCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove template post migration custom action.
     * @param {module:model/RemoveTemplateActionRequest} removeTemplateActionRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~removeTemplateActionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    removeTemplateAction(removeTemplateActionRequest, opts, callback) {
      opts = opts || {};
      let postBody = removeTemplateActionRequest;
      // verify the required parameter 'removeTemplateActionRequest' is set
      if (removeTemplateActionRequest === undefined || removeTemplateActionRequest === null) {
        throw new Error("Missing the required parameter 'removeTemplateActionRequest' when calling removeTemplateAction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/RemoveTemplateAction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resumeReplication operation.
     * @callback module:api/DefaultApi~resumeReplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resume Replication.
     * @param {module:model/ResumeReplicationRequest} resumeReplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resumeReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    resumeReplication(resumeReplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = resumeReplicationRequest;
      // verify the required parameter 'resumeReplicationRequest' is set
      if (resumeReplicationRequest === undefined || resumeReplicationRequest === null) {
        throw new Error("Missing the required parameter 'resumeReplicationRequest' when calling resumeReplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/ResumeReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the retryDataReplication operation.
     * @callback module:api/DefaultApi~retryDataReplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.
     * @param {module:model/RetryDataReplicationRequest} retryDataReplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~retryDataReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    retryDataReplication(retryDataReplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = retryDataReplicationRequest;
      // verify the required parameter 'retryDataReplicationRequest' is set
      if (retryDataReplicationRequest === undefined || retryDataReplicationRequest === null) {
        throw new Error("Missing the required parameter 'retryDataReplicationRequest' when calling retryDataReplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/RetryDataReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startCutover operation.
     * @callback module:api/DefaultApi~startCutoverCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartCutoverResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.
     * @param {module:model/StartCutoverRequest} startCutoverRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startCutoverCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartCutoverResponse}
     */
    startCutover(startCutoverRequest, opts, callback) {
      opts = opts || {};
      let postBody = startCutoverRequest;
      // verify the required parameter 'startCutoverRequest' is set
      if (startCutoverRequest === undefined || startCutoverRequest === null) {
        throw new Error("Missing the required parameter 'startCutoverRequest' when calling startCutover");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartCutoverResponse;
      return this.apiClient.callApi(
        '/StartCutover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startExport operation.
     * @callback module:api/DefaultApi~startExportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartExportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start export.
     * @param {module:model/StartExportRequest} startExportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startExportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartExportResponse}
     */
    startExport(startExportRequest, opts, callback) {
      opts = opts || {};
      let postBody = startExportRequest;
      // verify the required parameter 'startExportRequest' is set
      if (startExportRequest === undefined || startExportRequest === null) {
        throw new Error("Missing the required parameter 'startExportRequest' when calling startExport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartExportResponse;
      return this.apiClient.callApi(
        '/StartExport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startImport operation.
     * @callback module:api/DefaultApi~startImportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartImportResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start import.
     * @param {module:model/StartImportRequest} startImportRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startImportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartImportResponse}
     */
    startImport(startImportRequest, opts, callback) {
      opts = opts || {};
      let postBody = startImportRequest;
      // verify the required parameter 'startImportRequest' is set
      if (startImportRequest === undefined || startImportRequest === null) {
        throw new Error("Missing the required parameter 'startImportRequest' when calling startImport");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartImportResponse;
      return this.apiClient.callApi(
        '/StartImport', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startReplication operation.
     * @callback module:api/DefaultApi~startReplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts replication for SNAPSHOT_SHIPPING agents.
     * @param {module:model/StartReplicationRequest} startReplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    startReplication(startReplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = startReplicationRequest;
      // verify the required parameter 'startReplicationRequest' is set
      if (startReplicationRequest === undefined || startReplicationRequest === null) {
        throw new Error("Missing the required parameter 'startReplicationRequest' when calling startReplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/StartReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startTest operation.
     * @callback module:api/DefaultApi~startTestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartTestResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.
     * @param {module:model/StartTestRequest} startTestRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startTestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartTestResponse}
     */
    startTest(startTestRequest, opts, callback) {
      opts = opts || {};
      let postBody = startTestRequest;
      // verify the required parameter 'startTestRequest' is set
      if (startTestRequest === undefined || startTestRequest === null) {
        throw new Error("Missing the required parameter 'startTestRequest' when calling startTest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StartTestResponse;
      return this.apiClient.callApi(
        '/StartTest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopReplication operation.
     * @callback module:api/DefaultApi~stopReplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop Replication.
     * @param {module:model/StopReplicationRequest} stopReplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopReplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    stopReplication(stopReplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = stopReplicationRequest;
      // verify the required parameter 'stopReplicationRequest' is set
      if (stopReplicationRequest === undefined || stopReplicationRequest === null) {
        throw new Error("Missing the required parameter 'stopReplicationRequest' when calling stopReplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/StopReplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.
     * @param {String} resourceArn Tag resource by ARN.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resourceArn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the terminateTargetInstances operation.
     * @callback module:api/DefaultApi~terminateTargetInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TerminateTargetInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.
     * @param {module:model/TerminateTargetInstancesRequest} terminateTargetInstancesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~terminateTargetInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TerminateTargetInstancesResponse}
     */
    terminateTargetInstances(terminateTargetInstancesRequest, opts, callback) {
      opts = opts || {};
      let postBody = terminateTargetInstancesRequest;
      // verify the required parameter 'terminateTargetInstancesRequest' is set
      if (terminateTargetInstancesRequest === undefined || terminateTargetInstancesRequest === null) {
        throw new Error("Missing the required parameter 'terminateTargetInstancesRequest' when calling terminateTargetInstances");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TerminateTargetInstancesResponse;
      return this.apiClient.callApi(
        '/TerminateTargetInstances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchiveApplication operation.
     * @callback module:api/DefaultApi~unarchiveApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive application.
     * @param {module:model/ArchiveApplicationRequest} archiveApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~unarchiveApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    unarchiveApplication(archiveApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = archiveApplicationRequest;
      // verify the required parameter 'archiveApplicationRequest' is set
      if (archiveApplicationRequest === undefined || archiveApplicationRequest === null) {
        throw new Error("Missing the required parameter 'archiveApplicationRequest' when calling unarchiveApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/UnarchiveApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unarchiveWave operation.
     * @callback module:api/DefaultApi~unarchiveWaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wave} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unarchive wave.
     * @param {module:model/ArchiveWaveRequest} archiveWaveRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~unarchiveWaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wave}
     */
    unarchiveWave(archiveWaveRequest, opts, callback) {
      opts = opts || {};
      let postBody = archiveWaveRequest;
      // verify the required parameter 'archiveWaveRequest' is set
      if (archiveWaveRequest === undefined || archiveWaveRequest === null) {
        throw new Error("Missing the required parameter 'archiveWaveRequest' when calling unarchiveWave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Wave;
      return this.apiClient.callApi(
        '/UnarchiveWave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified set of tags from the specified set of Application Migration Service resources.
     * @param {String} resourceArn Untag resource by ARN.
     * @param {Array.<String>} tagKeys Untag resource by Keys.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resourceArn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resourceArn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApplication operation.
     * @callback module:api/DefaultApi~updateApplicationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Application} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update application.
     * @param {module:model/UpdateApplicationRequest} updateApplicationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApplicationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Application}
     */
    updateApplication(updateApplicationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApplicationRequest;
      // verify the required parameter 'updateApplicationRequest' is set
      if (updateApplicationRequest === undefined || updateApplicationRequest === null) {
        throw new Error("Missing the required parameter 'updateApplicationRequest' when calling updateApplication");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Application;
      return this.apiClient.callApi(
        '/UpdateApplication', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLaunchConfiguration operation.
     * @callback module:api/DefaultApi~updateLaunchConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LaunchConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates multiple LaunchConfigurations by Source Server ID.
     * @param {module:model/UpdateLaunchConfigurationRequest} updateLaunchConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLaunchConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LaunchConfiguration}
     */
    updateLaunchConfiguration(updateLaunchConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLaunchConfigurationRequest;
      // verify the required parameter 'updateLaunchConfigurationRequest' is set
      if (updateLaunchConfigurationRequest === undefined || updateLaunchConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateLaunchConfigurationRequest' when calling updateLaunchConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LaunchConfiguration;
      return this.apiClient.callApi(
        '/UpdateLaunchConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLaunchConfigurationTemplate operation.
     * @callback module:api/DefaultApi~updateLaunchConfigurationTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LaunchConfigurationTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing Launch Configuration Template by ID.
     * @param {module:model/UpdateLaunchConfigurationTemplateRequest} updateLaunchConfigurationTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLaunchConfigurationTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LaunchConfigurationTemplate}
     */
    updateLaunchConfigurationTemplate(updateLaunchConfigurationTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLaunchConfigurationTemplateRequest;
      // verify the required parameter 'updateLaunchConfigurationTemplateRequest' is set
      if (updateLaunchConfigurationTemplateRequest === undefined || updateLaunchConfigurationTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateLaunchConfigurationTemplateRequest' when calling updateLaunchConfigurationTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LaunchConfigurationTemplate;
      return this.apiClient.callApi(
        '/UpdateLaunchConfigurationTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReplicationConfiguration operation.
     * @callback module:api/DefaultApi~updateReplicationConfigurationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to update multiple ReplicationConfigurations by Source Server ID.
     * @param {module:model/UpdateReplicationConfigurationRequest} updateReplicationConfigurationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateReplicationConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationConfiguration}
     */
    updateReplicationConfiguration(updateReplicationConfigurationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateReplicationConfigurationRequest;
      // verify the required parameter 'updateReplicationConfigurationRequest' is set
      if (updateReplicationConfigurationRequest === undefined || updateReplicationConfigurationRequest === null) {
        throw new Error("Missing the required parameter 'updateReplicationConfigurationRequest' when calling updateReplicationConfiguration");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationConfiguration;
      return this.apiClient.callApi(
        '/UpdateReplicationConfiguration', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReplicationConfigurationTemplate operation.
     * @callback module:api/DefaultApi~updateReplicationConfigurationTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReplicationConfigurationTemplate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates multiple ReplicationConfigurationTemplates by ID.
     * @param {module:model/UpdateReplicationConfigurationTemplateRequest} updateReplicationConfigurationTemplateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateReplicationConfigurationTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReplicationConfigurationTemplate}
     */
    updateReplicationConfigurationTemplate(updateReplicationConfigurationTemplateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateReplicationConfigurationTemplateRequest;
      // verify the required parameter 'updateReplicationConfigurationTemplateRequest' is set
      if (updateReplicationConfigurationTemplateRequest === undefined || updateReplicationConfigurationTemplateRequest === null) {
        throw new Error("Missing the required parameter 'updateReplicationConfigurationTemplateRequest' when calling updateReplicationConfigurationTemplate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReplicationConfigurationTemplate;
      return this.apiClient.callApi(
        '/UpdateReplicationConfigurationTemplate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSourceServerReplicationType operation.
     * @callback module:api/DefaultApi~updateSourceServerReplicationTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceServer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.
     * @param {module:model/UpdateSourceServerReplicationTypeRequest} updateSourceServerReplicationTypeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSourceServerReplicationTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceServer}
     */
    updateSourceServerReplicationType(updateSourceServerReplicationTypeRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSourceServerReplicationTypeRequest;
      // verify the required parameter 'updateSourceServerReplicationTypeRequest' is set
      if (updateSourceServerReplicationTypeRequest === undefined || updateSourceServerReplicationTypeRequest === null) {
        throw new Error("Missing the required parameter 'updateSourceServerReplicationTypeRequest' when calling updateSourceServerReplicationType");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SourceServer;
      return this.apiClient.callApi(
        '/UpdateSourceServerReplicationType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWave operation.
     * @callback module:api/DefaultApi~updateWaveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wave} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update wave.
     * @param {module:model/UpdateWaveRequest} updateWaveRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateWaveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wave}
     */
    updateWave(updateWaveRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateWaveRequest;
      // verify the required parameter 'updateWaveRequest' is set
      if (updateWaveRequest === undefined || updateWaveRequest === null) {
        throw new Error("Missing the required parameter 'updateWaveRequest' when calling updateWave");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Wave;
      return this.apiClient.callApi(
        '/UpdateWave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
