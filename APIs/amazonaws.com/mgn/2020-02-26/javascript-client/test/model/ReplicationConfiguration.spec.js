/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApplicationMigrationService);
  }
}(this, function(expect, ApplicationMigrationService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApplicationMigrationService.ReplicationConfiguration();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ReplicationConfiguration', function() {
    it('should create an instance of ReplicationConfiguration', function() {
      // uncomment below and update the code to test ReplicationConfiguration
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be.a(ApplicationMigrationService.ReplicationConfiguration);
    });

    it('should have the property associateDefaultSecurityGroup (base name: "associateDefaultSecurityGroup")', function() {
      // uncomment below and update the code to test the property associateDefaultSecurityGroup
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property bandwidthThrottling (base name: "bandwidthThrottling")', function() {
      // uncomment below and update the code to test the property bandwidthThrottling
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property createPublicIP (base name: "createPublicIP")', function() {
      // uncomment below and update the code to test the property createPublicIP
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property dataPlaneRouting (base name: "dataPlaneRouting")', function() {
      // uncomment below and update the code to test the property dataPlaneRouting
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property defaultLargeStagingDiskType (base name: "defaultLargeStagingDiskType")', function() {
      // uncomment below and update the code to test the property defaultLargeStagingDiskType
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property ebsEncryption (base name: "ebsEncryption")', function() {
      // uncomment below and update the code to test the property ebsEncryption
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property ebsEncryptionKeyArn (base name: "ebsEncryptionKeyArn")', function() {
      // uncomment below and update the code to test the property ebsEncryptionKeyArn
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property replicatedDisks (base name: "replicatedDisks")', function() {
      // uncomment below and update the code to test the property replicatedDisks
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property replicationServerInstanceType (base name: "replicationServerInstanceType")', function() {
      // uncomment below and update the code to test the property replicationServerInstanceType
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property replicationServersSecurityGroupsIDs (base name: "replicationServersSecurityGroupsIDs")', function() {
      // uncomment below and update the code to test the property replicationServersSecurityGroupsIDs
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property sourceServerID (base name: "sourceServerID")', function() {
      // uncomment below and update the code to test the property sourceServerID
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property stagingAreaSubnetId (base name: "stagingAreaSubnetId")', function() {
      // uncomment below and update the code to test the property stagingAreaSubnetId
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property stagingAreaTags (base name: "stagingAreaTags")', function() {
      // uncomment below and update the code to test the property stagingAreaTags
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property useDedicatedReplicationServer (base name: "useDedicatedReplicationServer")', function() {
      // uncomment below and update the code to test the property useDedicatedReplicationServer
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

    it('should have the property useFipsEndpoint (base name: "useFipsEndpoint")', function() {
      // uncomment below and update the code to test the property useFipsEndpoint
      //var instance = new ApplicationMigrationService.ReplicationConfiguration();
      //expect(instance).to.be();
    });

  });

}));
