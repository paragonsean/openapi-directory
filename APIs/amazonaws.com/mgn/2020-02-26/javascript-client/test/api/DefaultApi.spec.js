/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApplicationMigrationService);
  }
}(this, function(expect, ApplicationMigrationService) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApplicationMigrationService.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('archiveApplication', function() {
      it('should call archiveApplication successfully', function(done) {
        //uncomment below and update the code to test archiveApplication
        //instance.archiveApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('archiveWave', function() {
      it('should call archiveWave successfully', function(done) {
        //uncomment below and update the code to test archiveWave
        //instance.archiveWave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateApplications', function() {
      it('should call associateApplications successfully', function(done) {
        //uncomment below and update the code to test associateApplications
        //instance.associateApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateSourceServers', function() {
      it('should call associateSourceServers successfully', function(done) {
        //uncomment below and update the code to test associateSourceServers
        //instance.associateSourceServers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('changeServerLifeCycleState', function() {
      it('should call changeServerLifeCycleState successfully', function(done) {
        //uncomment below and update the code to test changeServerLifeCycleState
        //instance.changeServerLifeCycleState(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApplication', function() {
      it('should call createApplication successfully', function(done) {
        //uncomment below and update the code to test createApplication
        //instance.createApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createLaunchConfigurationTemplate', function() {
      it('should call createLaunchConfigurationTemplate successfully', function(done) {
        //uncomment below and update the code to test createLaunchConfigurationTemplate
        //instance.createLaunchConfigurationTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createReplicationConfigurationTemplate', function() {
      it('should call createReplicationConfigurationTemplate successfully', function(done) {
        //uncomment below and update the code to test createReplicationConfigurationTemplate
        //instance.createReplicationConfigurationTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createWave', function() {
      it('should call createWave successfully', function(done) {
        //uncomment below and update the code to test createWave
        //instance.createWave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApplication', function() {
      it('should call deleteApplication successfully', function(done) {
        //uncomment below and update the code to test deleteApplication
        //instance.deleteApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteJob', function() {
      it('should call deleteJob successfully', function(done) {
        //uncomment below and update the code to test deleteJob
        //instance.deleteJob(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteLaunchConfigurationTemplate', function() {
      it('should call deleteLaunchConfigurationTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteLaunchConfigurationTemplate
        //instance.deleteLaunchConfigurationTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteReplicationConfigurationTemplate', function() {
      it('should call deleteReplicationConfigurationTemplate successfully', function(done) {
        //uncomment below and update the code to test deleteReplicationConfigurationTemplate
        //instance.deleteReplicationConfigurationTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSourceServer', function() {
      it('should call deleteSourceServer successfully', function(done) {
        //uncomment below and update the code to test deleteSourceServer
        //instance.deleteSourceServer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVcenterClient', function() {
      it('should call deleteVcenterClient successfully', function(done) {
        //uncomment below and update the code to test deleteVcenterClient
        //instance.deleteVcenterClient(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWave', function() {
      it('should call deleteWave successfully', function(done) {
        //uncomment below and update the code to test deleteWave
        //instance.deleteWave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeJobLogItems', function() {
      it('should call describeJobLogItems successfully', function(done) {
        //uncomment below and update the code to test describeJobLogItems
        //instance.describeJobLogItems(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeJobs', function() {
      it('should call describeJobs successfully', function(done) {
        //uncomment below and update the code to test describeJobs
        //instance.describeJobs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeLaunchConfigurationTemplates', function() {
      it('should call describeLaunchConfigurationTemplates successfully', function(done) {
        //uncomment below and update the code to test describeLaunchConfigurationTemplates
        //instance.describeLaunchConfigurationTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeReplicationConfigurationTemplates', function() {
      it('should call describeReplicationConfigurationTemplates successfully', function(done) {
        //uncomment below and update the code to test describeReplicationConfigurationTemplates
        //instance.describeReplicationConfigurationTemplates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSourceServers', function() {
      it('should call describeSourceServers successfully', function(done) {
        //uncomment below and update the code to test describeSourceServers
        //instance.describeSourceServers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVcenterClients', function() {
      it('should call describeVcenterClients successfully', function(done) {
        //uncomment below and update the code to test describeVcenterClients
        //instance.describeVcenterClients(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateApplications', function() {
      it('should call disassociateApplications successfully', function(done) {
        //uncomment below and update the code to test disassociateApplications
        //instance.disassociateApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateSourceServers', function() {
      it('should call disassociateSourceServers successfully', function(done) {
        //uncomment below and update the code to test disassociateSourceServers
        //instance.disassociateSourceServers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disconnectFromService', function() {
      it('should call disconnectFromService successfully', function(done) {
        //uncomment below and update the code to test disconnectFromService
        //instance.disconnectFromService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('finalizeCutover', function() {
      it('should call finalizeCutover successfully', function(done) {
        //uncomment below and update the code to test finalizeCutover
        //instance.finalizeCutover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getLaunchConfiguration', function() {
      it('should call getLaunchConfiguration successfully', function(done) {
        //uncomment below and update the code to test getLaunchConfiguration
        //instance.getLaunchConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getReplicationConfiguration', function() {
      it('should call getReplicationConfiguration successfully', function(done) {
        //uncomment below and update the code to test getReplicationConfiguration
        //instance.getReplicationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('initializeService', function() {
      it('should call initializeService successfully', function(done) {
        //uncomment below and update the code to test initializeService
        //instance.initializeService(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listApplications', function() {
      it('should call listApplications successfully', function(done) {
        //uncomment below and update the code to test listApplications
        //instance.listApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExportErrors', function() {
      it('should call listExportErrors successfully', function(done) {
        //uncomment below and update the code to test listExportErrors
        //instance.listExportErrors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listExports', function() {
      it('should call listExports successfully', function(done) {
        //uncomment below and update the code to test listExports
        //instance.listExports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImportErrors', function() {
      it('should call listImportErrors successfully', function(done) {
        //uncomment below and update the code to test listImportErrors
        //instance.listImportErrors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listImports', function() {
      it('should call listImports successfully', function(done) {
        //uncomment below and update the code to test listImports
        //instance.listImports(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listManagedAccounts', function() {
      it('should call listManagedAccounts successfully', function(done) {
        //uncomment below and update the code to test listManagedAccounts
        //instance.listManagedAccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSourceServerActions', function() {
      it('should call listSourceServerActions successfully', function(done) {
        //uncomment below and update the code to test listSourceServerActions
        //instance.listSourceServerActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTemplateActions', function() {
      it('should call listTemplateActions successfully', function(done) {
        //uncomment below and update the code to test listTemplateActions
        //instance.listTemplateActions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listWaves', function() {
      it('should call listWaves successfully', function(done) {
        //uncomment below and update the code to test listWaves
        //instance.listWaves(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('markAsArchived', function() {
      it('should call markAsArchived successfully', function(done) {
        //uncomment below and update the code to test markAsArchived
        //instance.markAsArchived(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('pauseReplication', function() {
      it('should call pauseReplication successfully', function(done) {
        //uncomment below and update the code to test pauseReplication
        //instance.pauseReplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSourceServerAction', function() {
      it('should call putSourceServerAction successfully', function(done) {
        //uncomment below and update the code to test putSourceServerAction
        //instance.putSourceServerAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putTemplateAction', function() {
      it('should call putTemplateAction successfully', function(done) {
        //uncomment below and update the code to test putTemplateAction
        //instance.putTemplateAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeSourceServerAction', function() {
      it('should call removeSourceServerAction successfully', function(done) {
        //uncomment below and update the code to test removeSourceServerAction
        //instance.removeSourceServerAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTemplateAction', function() {
      it('should call removeTemplateAction successfully', function(done) {
        //uncomment below and update the code to test removeTemplateAction
        //instance.removeTemplateAction(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resumeReplication', function() {
      it('should call resumeReplication successfully', function(done) {
        //uncomment below and update the code to test resumeReplication
        //instance.resumeReplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retryDataReplication', function() {
      it('should call retryDataReplication successfully', function(done) {
        //uncomment below and update the code to test retryDataReplication
        //instance.retryDataReplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startCutover', function() {
      it('should call startCutover successfully', function(done) {
        //uncomment below and update the code to test startCutover
        //instance.startCutover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startExport', function() {
      it('should call startExport successfully', function(done) {
        //uncomment below and update the code to test startExport
        //instance.startExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startImport', function() {
      it('should call startImport successfully', function(done) {
        //uncomment below and update the code to test startImport
        //instance.startImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startReplication', function() {
      it('should call startReplication successfully', function(done) {
        //uncomment below and update the code to test startReplication
        //instance.startReplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startTest', function() {
      it('should call startTest successfully', function(done) {
        //uncomment below and update the code to test startTest
        //instance.startTest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopReplication', function() {
      it('should call stopReplication successfully', function(done) {
        //uncomment below and update the code to test stopReplication
        //instance.stopReplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('terminateTargetInstances', function() {
      it('should call terminateTargetInstances successfully', function(done) {
        //uncomment below and update the code to test terminateTargetInstances
        //instance.terminateTargetInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unarchiveApplication', function() {
      it('should call unarchiveApplication successfully', function(done) {
        //uncomment below and update the code to test unarchiveApplication
        //instance.unarchiveApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('unarchiveWave', function() {
      it('should call unarchiveWave successfully', function(done) {
        //uncomment below and update the code to test unarchiveWave
        //instance.unarchiveWave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApplication', function() {
      it('should call updateApplication successfully', function(done) {
        //uncomment below and update the code to test updateApplication
        //instance.updateApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLaunchConfiguration', function() {
      it('should call updateLaunchConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateLaunchConfiguration
        //instance.updateLaunchConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateLaunchConfigurationTemplate', function() {
      it('should call updateLaunchConfigurationTemplate successfully', function(done) {
        //uncomment below and update the code to test updateLaunchConfigurationTemplate
        //instance.updateLaunchConfigurationTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReplicationConfiguration', function() {
      it('should call updateReplicationConfiguration successfully', function(done) {
        //uncomment below and update the code to test updateReplicationConfiguration
        //instance.updateReplicationConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateReplicationConfigurationTemplate', function() {
      it('should call updateReplicationConfigurationTemplate successfully', function(done) {
        //uncomment below and update the code to test updateReplicationConfigurationTemplate
        //instance.updateReplicationConfigurationTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSourceServerReplicationType', function() {
      it('should call updateSourceServerReplicationType successfully', function(done) {
        //uncomment below and update the code to test updateSourceServerReplicationType
        //instance.updateSourceServerReplicationType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateWave', function() {
      it('should call updateWave successfully', function(done) {
        //uncomment below and update the code to test updateWave
        //instance.updateWave(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
