/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Application;
import org.openapitools.client.model.ArchiveApplicationRequest;
import org.openapitools.client.model.ArchiveWaveRequest;
import org.openapitools.client.model.AssociateApplicationsRequest;
import org.openapitools.client.model.AssociateSourceServersRequest;
import org.openapitools.client.model.ChangeServerLifeCycleStateRequest;
import org.openapitools.client.model.CreateApplicationRequest;
import org.openapitools.client.model.CreateLaunchConfigurationTemplateRequest;
import org.openapitools.client.model.CreateReplicationConfigurationTemplateRequest;
import org.openapitools.client.model.CreateWaveRequest;
import org.openapitools.client.model.DeleteJobRequest;
import org.openapitools.client.model.DeleteLaunchConfigurationTemplateRequest;
import org.openapitools.client.model.DeleteReplicationConfigurationTemplateRequest;
import org.openapitools.client.model.DeleteSourceServerRequest;
import org.openapitools.client.model.DeleteVcenterClientRequest;
import org.openapitools.client.model.DescribeJobLogItemsRequest;
import org.openapitools.client.model.DescribeJobLogItemsResponse;
import org.openapitools.client.model.DescribeJobsRequest;
import org.openapitools.client.model.DescribeJobsResponse;
import org.openapitools.client.model.DescribeLaunchConfigurationTemplatesRequest;
import org.openapitools.client.model.DescribeLaunchConfigurationTemplatesResponse;
import org.openapitools.client.model.DescribeReplicationConfigurationTemplatesRequest;
import org.openapitools.client.model.DescribeReplicationConfigurationTemplatesResponse;
import org.openapitools.client.model.DescribeSourceServersRequest;
import org.openapitools.client.model.DescribeSourceServersResponse;
import org.openapitools.client.model.DescribeVcenterClientsResponse;
import org.openapitools.client.model.DisconnectFromServiceRequest;
import org.openapitools.client.model.FinalizeCutoverRequest;
import org.openapitools.client.model.GetLaunchConfigurationRequest;
import org.openapitools.client.model.GetReplicationConfigurationRequest;
import org.openapitools.client.model.LaunchConfiguration;
import org.openapitools.client.model.LaunchConfigurationTemplate;
import org.openapitools.client.model.ListApplicationsRequest;
import org.openapitools.client.model.ListApplicationsResponse;
import org.openapitools.client.model.ListExportErrorsRequest;
import org.openapitools.client.model.ListExportErrorsResponse;
import org.openapitools.client.model.ListExportsRequest;
import org.openapitools.client.model.ListExportsResponse;
import org.openapitools.client.model.ListImportErrorsRequest;
import org.openapitools.client.model.ListImportErrorsResponse;
import org.openapitools.client.model.ListImportsRequest;
import org.openapitools.client.model.ListImportsResponse;
import org.openapitools.client.model.ListManagedAccountsRequest;
import org.openapitools.client.model.ListManagedAccountsResponse;
import org.openapitools.client.model.ListSourceServerActionsRequest;
import org.openapitools.client.model.ListSourceServerActionsResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListTemplateActionsRequest;
import org.openapitools.client.model.ListTemplateActionsResponse;
import org.openapitools.client.model.ListWavesRequest;
import org.openapitools.client.model.ListWavesResponse;
import org.openapitools.client.model.MarkAsArchivedRequest;
import org.openapitools.client.model.PauseReplicationRequest;
import org.openapitools.client.model.PutSourceServerActionRequest;
import org.openapitools.client.model.PutTemplateActionRequest;
import org.openapitools.client.model.RemoveSourceServerActionRequest;
import org.openapitools.client.model.RemoveTemplateActionRequest;
import org.openapitools.client.model.ReplicationConfiguration;
import org.openapitools.client.model.ReplicationConfigurationTemplate;
import org.openapitools.client.model.ResumeReplicationRequest;
import org.openapitools.client.model.RetryDataReplicationRequest;
import org.openapitools.client.model.SourceServer;
import org.openapitools.client.model.SourceServerActionDocument;
import org.openapitools.client.model.StartCutoverRequest;
import org.openapitools.client.model.StartCutoverResponse;
import org.openapitools.client.model.StartExportRequest;
import org.openapitools.client.model.StartExportResponse;
import org.openapitools.client.model.StartImportRequest;
import org.openapitools.client.model.StartImportResponse;
import org.openapitools.client.model.StartReplicationRequest;
import org.openapitools.client.model.StartTestRequest;
import org.openapitools.client.model.StartTestResponse;
import org.openapitools.client.model.StopReplicationRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.TemplateActionDocument;
import org.openapitools.client.model.TerminateTargetInstancesRequest;
import org.openapitools.client.model.TerminateTargetInstancesResponse;
import org.openapitools.client.model.UpdateApplicationRequest;
import org.openapitools.client.model.UpdateLaunchConfigurationRequest;
import org.openapitools.client.model.UpdateLaunchConfigurationTemplateRequest;
import org.openapitools.client.model.UpdateReplicationConfigurationRequest;
import org.openapitools.client.model.UpdateReplicationConfigurationTemplateRequest;
import org.openapitools.client.model.UpdateSourceServerReplicationTypeRequest;
import org.openapitools.client.model.UpdateWaveRequest;
import org.openapitools.client.model.Wave;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Archive application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveApplicationTest() throws ApiException {
        ArchiveApplicationRequest archiveApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Application response = api.archiveApplication(archiveApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Archive wave.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveWaveTest() throws ApiException {
        ArchiveWaveRequest archiveWaveRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Wave response = api.archiveWave(archiveWaveRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associate applications to wave.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateApplicationsTest() throws ApiException {
        AssociateApplicationsRequest associateApplicationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateApplications(associateApplicationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Associate source servers to application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associateSourceServersTest() throws ApiException {
        AssociateSourceServersRequest associateSourceServersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.associateSourceServers(associateSourceServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows the user to set the SourceServer.LifeCycle.state property for specific Source Server IDs to one of the following: READY_FOR_TEST or READY_FOR_CUTOVER. This command only works if the Source Server is already launchable (dataReplicationInfo.lagDuration is not null.)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changeServerLifeCycleStateTest() throws ApiException {
        ChangeServerLifeCycleStateRequest changeServerLifeCycleStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.changeServerLifeCycleState(changeServerLifeCycleStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApplicationTest() throws ApiException {
        CreateApplicationRequest createApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Application response = api.createApplication(createApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new Launch Configuration Template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLaunchConfigurationTemplateTest() throws ApiException {
        CreateLaunchConfigurationTemplateRequest createLaunchConfigurationTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        LaunchConfigurationTemplate response = api.createLaunchConfigurationTemplate(createLaunchConfigurationTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new ReplicationConfigurationTemplate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReplicationConfigurationTemplateTest() throws ApiException {
        CreateReplicationConfigurationTemplateRequest createReplicationConfigurationTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ReplicationConfigurationTemplate response = api.createReplicationConfigurationTemplate(createReplicationConfigurationTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Create wave.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWaveTest() throws ApiException {
        CreateWaveRequest createWaveRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Wave response = api.createWave(createWaveRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApplicationTest() throws ApiException {
        ArchiveApplicationRequest archiveApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteApplication(archiveApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a single Job by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteJobTest() throws ApiException {
        DeleteJobRequest deleteJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteJob(deleteJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a single Launch Configuration Template by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteLaunchConfigurationTemplateTest() throws ApiException {
        DeleteLaunchConfigurationTemplateRequest deleteLaunchConfigurationTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteLaunchConfigurationTemplate(deleteLaunchConfigurationTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a single Replication Configuration Template by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReplicationConfigurationTemplateTest() throws ApiException {
        DeleteReplicationConfigurationTemplateRequest deleteReplicationConfigurationTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteReplicationConfigurationTemplate(deleteReplicationConfigurationTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a single source server by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSourceServerTest() throws ApiException {
        DeleteSourceServerRequest deleteSourceServerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteSourceServer(deleteSourceServerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a given vCenter client by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVcenterClientTest() throws ApiException {
        DeleteVcenterClientRequest deleteVcenterClientRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteVcenterClient(deleteVcenterClientRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete wave.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWaveTest() throws ApiException {
        ArchiveWaveRequest archiveWaveRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteWave(archiveWaveRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves detailed job log items with paging.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeJobLogItemsTest() throws ApiException {
        DescribeJobLogItemsRequest describeJobLogItemsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeJobLogItemsResponse response = api.describeJobLogItems(describeJobLogItemsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of Jobs. Use the JobsID and fromDate and toData filters to limit which jobs are returned. The response is sorted by creationDataTime - latest date first. Jobs are normally created by the StartTest, StartCutover, and TerminateTargetInstances APIs. Jobs are also created by DiagnosticLaunch and TerminateDiagnosticInstances, which are APIs available only to *Support* and only used in response to relevant support tickets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeJobsTest() throws ApiException {
        DescribeJobsRequest describeJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeJobsResponse response = api.describeJobs(describeJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all Launch Configuration Templates, filtered by Launch Configuration Template IDs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeLaunchConfigurationTemplatesTest() throws ApiException {
        DescribeLaunchConfigurationTemplatesRequest describeLaunchConfigurationTemplatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeLaunchConfigurationTemplatesResponse response = api.describeLaunchConfigurationTemplates(describeLaunchConfigurationTemplatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all ReplicationConfigurationTemplates, filtered by Source Server IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReplicationConfigurationTemplatesTest() throws ApiException {
        DescribeReplicationConfigurationTemplatesRequest describeReplicationConfigurationTemplatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeReplicationConfigurationTemplatesResponse response = api.describeReplicationConfigurationTemplates(describeReplicationConfigurationTemplatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves all SourceServers or multiple SourceServers by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSourceServersTest() throws ApiException {
        DescribeSourceServersRequest describeSourceServersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeSourceServersResponse response = api.describeSourceServers(describeSourceServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns a list of the installed vCenter clients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeVcenterClientsTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer maxResults = null;
        String nextToken = null;
        DescribeVcenterClientsResponse response = api.describeVcenterClients(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Disassociate applications from wave.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateApplicationsTest() throws ApiException {
        AssociateApplicationsRequest associateApplicationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateApplications(associateApplicationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disassociate source servers from application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disassociateSourceServersTest() throws ApiException {
        AssociateSourceServersRequest associateSourceServersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.disassociateSourceServers(associateSourceServersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Disconnects specific Source Servers from Application Migration Service. Data replication is stopped immediately. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. If the agent on the source server has not been prevented from communicating with the Application Migration Service service, then it will receive a command to uninstall itself (within approximately 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be set to DISCONNECTED; The totalStorageBytes property for each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disconnectFromServiceTest() throws ApiException {
        DisconnectFromServiceRequest disconnectFromServiceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.disconnectFromService(disconnectFromServiceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Finalizes the cutover immediately for specific Source Servers. All AWS resources created by Application Migration Service for enabling the replication of these source servers will be terminated / deleted within 90 minutes. Launched Test or Cutover instances will NOT be terminated. The AWS Replication Agent will receive a command to uninstall itself (within 10 minutes). The following properties of the SourceServer will be changed immediately: dataReplicationInfo.dataReplicationState will be changed to DISCONNECTED; The SourceServer.lifeCycle.state will be changed to CUTOVER; The totalStorageBytes property fo each of dataReplicationInfo.replicatedDisks will be set to zero; dataReplicationInfo.lagDuration and dataReplicationInfo.lagDuration will be nullified.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finalizeCutoverTest() throws ApiException {
        FinalizeCutoverRequest finalizeCutoverRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.finalizeCutover(finalizeCutoverRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all LaunchConfigurations available, filtered by Source Server IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLaunchConfigurationTest() throws ApiException {
        GetLaunchConfigurationRequest getLaunchConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        LaunchConfiguration response = api.getLaunchConfiguration(getLaunchConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Lists all ReplicationConfigurations, filtered by Source Server ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplicationConfigurationTest() throws ApiException {
        GetReplicationConfigurationRequest getReplicationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ReplicationConfiguration response = api.getReplicationConfiguration(getReplicationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Initialize Application Migration Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initializeServiceTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.initializeService(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves all applications or multiple applications by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listApplicationsTest() throws ApiException {
        ListApplicationsRequest listApplicationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListApplicationsResponse response = api.listApplications(listApplicationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List export errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExportErrorsTest() throws ApiException {
        ListExportErrorsRequest listExportErrorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListExportErrorsResponse response = api.listExportErrors(listExportErrorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List exports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listExportsTest() throws ApiException {
        ListExportsRequest listExportsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListExportsResponse response = api.listExports(listExportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List import errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportErrorsTest() throws ApiException {
        ListImportErrorsRequest listImportErrorsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImportErrorsResponse response = api.listImportErrors(listImportErrorsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List imports.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImportsTest() throws ApiException {
        ListImportsRequest listImportsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListImportsResponse response = api.listImports(listImportsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List Managed Accounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listManagedAccountsTest() throws ApiException {
        ListManagedAccountsRequest listManagedAccountsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListManagedAccountsResponse response = api.listManagedAccounts(listManagedAccountsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List source server post migration custom actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSourceServerActionsTest() throws ApiException {
        ListSourceServerActionsRequest listSourceServerActionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListSourceServerActionsResponse response = api.listSourceServerActions(listSourceServerActionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * List all tags for your Application Migration Service resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * List template post migration custom actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTemplateActionsTest() throws ApiException {
        ListTemplateActionsRequest listTemplateActionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListTemplateActionsResponse response = api.listTemplateActions(listTemplateActionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Retrieves all waves or multiple waves by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWavesTest() throws ApiException {
        ListWavesRequest listWavesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListWavesResponse response = api.listWaves(listWavesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Archives specific Source Servers by setting the SourceServer.isArchived property to true for specified SourceServers by ID. This command only works for SourceServers with a lifecycle. state which equals DISCONNECTED or CUTOVER.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAsArchivedTest() throws ApiException {
        MarkAsArchivedRequest markAsArchivedRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.markAsArchived(markAsArchivedRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Pause Replication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pauseReplicationTest() throws ApiException {
        PauseReplicationRequest pauseReplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.pauseReplication(pauseReplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Put source server post migration custom action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSourceServerActionTest() throws ApiException {
        PutSourceServerActionRequest putSourceServerActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServerActionDocument response = api.putSourceServerAction(putSourceServerActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Put template post migration custom action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putTemplateActionTest() throws ApiException {
        PutTemplateActionRequest putTemplateActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TemplateActionDocument response = api.putTemplateAction(putTemplateActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove source server post migration custom action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeSourceServerActionTest() throws ApiException {
        RemoveSourceServerActionRequest removeSourceServerActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.removeSourceServerAction(removeSourceServerActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Remove template post migration custom action.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTemplateActionTest() throws ApiException {
        RemoveTemplateActionRequest removeTemplateActionRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.removeTemplateAction(removeTemplateActionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Resume Replication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resumeReplicationTest() throws ApiException {
        ResumeReplicationRequest resumeReplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.resumeReplication(resumeReplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retryDataReplicationTest() throws ApiException {
        RetryDataReplicationRequest retryDataReplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.retryDataReplication(retryDataReplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Launches a Cutover Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartCutover and changes the SourceServer.lifeCycle.state property to CUTTING_OVER.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startCutoverTest() throws ApiException {
        StartCutoverRequest startCutoverRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartCutoverResponse response = api.startCutover(startCutoverRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start export.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startExportTest() throws ApiException {
        StartExportRequest startExportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartExportResponse response = api.startExport(startExportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Start import.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startImportTest() throws ApiException {
        StartImportRequest startImportRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartImportResponse response = api.startImport(startImportRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts replication for SNAPSHOT_SHIPPING agents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startReplicationTest() throws ApiException {
        StartReplicationRequest startReplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.startReplication(startReplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Launches a Test Instance for specific Source Servers. This command starts a LAUNCH job whose initiatedBy property is StartTest and changes the SourceServer.lifeCycle.state property to TESTING.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTestTest() throws ApiException {
        StartTestRequest startTestRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartTestResponse response = api.startTest(startTestRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stop Replication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopReplicationTest() throws ApiException {
        StopReplicationRequest stopReplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.stopReplication(stopReplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Adds or overwrites only the specified tags for the specified Application Migration Service resource or resources. When you specify an existing tag key, the value is overwritten with the new value. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Starts a job that terminates specific launched EC2 Test and Cutover instances. This command will not work for any Source Server with a lifecycle.state of TESTING, CUTTING_OVER, or CUTOVER.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateTargetInstancesTest() throws ApiException {
        TerminateTargetInstancesRequest terminateTargetInstancesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        TerminateTargetInstancesResponse response = api.terminateTargetInstances(terminateTargetInstancesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Unarchive application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unarchiveApplicationTest() throws ApiException {
        ArchiveApplicationRequest archiveApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Application response = api.unarchiveApplication(archiveApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Unarchive wave.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unarchiveWaveTest() throws ApiException {
        ArchiveWaveRequest archiveWaveRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Wave response = api.unarchiveWave(archiveWaveRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the specified set of tags from the specified set of Application Migration Service resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update application.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApplicationTest() throws ApiException {
        UpdateApplicationRequest updateApplicationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Application response = api.updateApplication(updateApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates multiple LaunchConfigurations by Source Server ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLaunchConfigurationTest() throws ApiException {
        UpdateLaunchConfigurationRequest updateLaunchConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        LaunchConfiguration response = api.updateLaunchConfiguration(updateLaunchConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an existing Launch Configuration Template by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLaunchConfigurationTemplateTest() throws ApiException {
        UpdateLaunchConfigurationTemplateRequest updateLaunchConfigurationTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        LaunchConfigurationTemplate response = api.updateLaunchConfigurationTemplate(updateLaunchConfigurationTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows you to update multiple ReplicationConfigurations by Source Server ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReplicationConfigurationTest() throws ApiException {
        UpdateReplicationConfigurationRequest updateReplicationConfigurationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ReplicationConfiguration response = api.updateReplicationConfiguration(updateReplicationConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates multiple ReplicationConfigurationTemplates by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReplicationConfigurationTemplateTest() throws ApiException {
        UpdateReplicationConfigurationTemplateRequest updateReplicationConfigurationTemplateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ReplicationConfigurationTemplate response = api.updateReplicationConfigurationTemplate(updateReplicationConfigurationTemplateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Allows you to change between the AGENT_BASED replication type and the SNAPSHOT_SHIPPING replication type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSourceServerReplicationTypeTest() throws ApiException {
        UpdateSourceServerReplicationTypeRequest updateSourceServerReplicationTypeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        SourceServer response = api.updateSourceServerReplicationType(updateSourceServerReplicationTypeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Update wave.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWaveTest() throws ApiException {
        UpdateWaveRequest updateWaveRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Wave response = api.updateWave(updateWaveRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
