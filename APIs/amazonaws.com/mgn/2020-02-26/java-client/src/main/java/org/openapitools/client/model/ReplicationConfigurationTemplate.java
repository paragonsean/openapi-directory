/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ReplicationConfigurationDataPlaneRouting;
import org.openapitools.client.model.ReplicationConfigurationDefaultLargeStagingDiskType;
import org.openapitools.client.model.ReplicationConfigurationEbsEncryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReplicationConfigurationTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationConfigurationTemplate {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ASSOCIATE_DEFAULT_SECURITY_GROUP = "associateDefaultSecurityGroup";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE_DEFAULT_SECURITY_GROUP)
  private Boolean associateDefaultSecurityGroup;

  public static final String SERIALIZED_NAME_BANDWIDTH_THROTTLING = "bandwidthThrottling";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_THROTTLING)
  private Integer bandwidthThrottling;

  public static final String SERIALIZED_NAME_CREATE_PUBLIC_I_P = "createPublicIP";
  @SerializedName(SERIALIZED_NAME_CREATE_PUBLIC_I_P)
  private Boolean createPublicIP;

  public static final String SERIALIZED_NAME_DATA_PLANE_ROUTING = "dataPlaneRouting";
  @SerializedName(SERIALIZED_NAME_DATA_PLANE_ROUTING)
  private ReplicationConfigurationDataPlaneRouting dataPlaneRouting;

  public static final String SERIALIZED_NAME_DEFAULT_LARGE_STAGING_DISK_TYPE = "defaultLargeStagingDiskType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LARGE_STAGING_DISK_TYPE)
  private ReplicationConfigurationDefaultLargeStagingDiskType defaultLargeStagingDiskType;

  public static final String SERIALIZED_NAME_EBS_ENCRYPTION = "ebsEncryption";
  @SerializedName(SERIALIZED_NAME_EBS_ENCRYPTION)
  private ReplicationConfigurationEbsEncryption ebsEncryption;

  public static final String SERIALIZED_NAME_EBS_ENCRYPTION_KEY_ARN = "ebsEncryptionKeyArn";
  @SerializedName(SERIALIZED_NAME_EBS_ENCRYPTION_KEY_ARN)
  private String ebsEncryptionKeyArn;

  public static final String SERIALIZED_NAME_REPLICATION_CONFIGURATION_TEMPLATE_I_D = "replicationConfigurationTemplateID";
  @SerializedName(SERIALIZED_NAME_REPLICATION_CONFIGURATION_TEMPLATE_I_D)
  private String replicationConfigurationTemplateID;

  public static final String SERIALIZED_NAME_REPLICATION_SERVER_INSTANCE_TYPE = "replicationServerInstanceType";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVER_INSTANCE_TYPE)
  private String replicationServerInstanceType;

  public static final String SERIALIZED_NAME_REPLICATION_SERVERS_SECURITY_GROUPS_I_DS = "replicationServersSecurityGroupsIDs";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVERS_SECURITY_GROUPS_I_DS)
  private List replicationServersSecurityGroupsIDs;

  public static final String SERIALIZED_NAME_STAGING_AREA_SUBNET_ID = "stagingAreaSubnetId";
  @SerializedName(SERIALIZED_NAME_STAGING_AREA_SUBNET_ID)
  private String stagingAreaSubnetId;

  public static final String SERIALIZED_NAME_STAGING_AREA_TAGS = "stagingAreaTags";
  @SerializedName(SERIALIZED_NAME_STAGING_AREA_TAGS)
  private Map stagingAreaTags;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_USE_DEDICATED_REPLICATION_SERVER = "useDedicatedReplicationServer";
  @SerializedName(SERIALIZED_NAME_USE_DEDICATED_REPLICATION_SERVER)
  private Boolean useDedicatedReplicationServer;

  public static final String SERIALIZED_NAME_USE_FIPS_ENDPOINT = "useFipsEndpoint";
  @SerializedName(SERIALIZED_NAME_USE_FIPS_ENDPOINT)
  private Boolean useFipsEndpoint;

  public ReplicationConfigurationTemplate() {
  }

  public ReplicationConfigurationTemplate arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public ReplicationConfigurationTemplate associateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
    this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
    return this;
  }

  /**
   * Get associateDefaultSecurityGroup
   * @return associateDefaultSecurityGroup
   */
  @javax.annotation.Nullable
  public Boolean getAssociateDefaultSecurityGroup() {
    return associateDefaultSecurityGroup;
  }

  public void setAssociateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
    this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
  }


  public ReplicationConfigurationTemplate bandwidthThrottling(Integer bandwidthThrottling) {
    this.bandwidthThrottling = bandwidthThrottling;
    return this;
  }

  /**
   * Get bandwidthThrottling
   * @return bandwidthThrottling
   */
  @javax.annotation.Nullable
  public Integer getBandwidthThrottling() {
    return bandwidthThrottling;
  }

  public void setBandwidthThrottling(Integer bandwidthThrottling) {
    this.bandwidthThrottling = bandwidthThrottling;
  }


  public ReplicationConfigurationTemplate createPublicIP(Boolean createPublicIP) {
    this.createPublicIP = createPublicIP;
    return this;
  }

  /**
   * Get createPublicIP
   * @return createPublicIP
   */
  @javax.annotation.Nullable
  public Boolean getCreatePublicIP() {
    return createPublicIP;
  }

  public void setCreatePublicIP(Boolean createPublicIP) {
    this.createPublicIP = createPublicIP;
  }


  public ReplicationConfigurationTemplate dataPlaneRouting(ReplicationConfigurationDataPlaneRouting dataPlaneRouting) {
    this.dataPlaneRouting = dataPlaneRouting;
    return this;
  }

  /**
   * Get dataPlaneRouting
   * @return dataPlaneRouting
   */
  @javax.annotation.Nullable
  public ReplicationConfigurationDataPlaneRouting getDataPlaneRouting() {
    return dataPlaneRouting;
  }

  public void setDataPlaneRouting(ReplicationConfigurationDataPlaneRouting dataPlaneRouting) {
    this.dataPlaneRouting = dataPlaneRouting;
  }


  public ReplicationConfigurationTemplate defaultLargeStagingDiskType(ReplicationConfigurationDefaultLargeStagingDiskType defaultLargeStagingDiskType) {
    this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
    return this;
  }

  /**
   * Get defaultLargeStagingDiskType
   * @return defaultLargeStagingDiskType
   */
  @javax.annotation.Nullable
  public ReplicationConfigurationDefaultLargeStagingDiskType getDefaultLargeStagingDiskType() {
    return defaultLargeStagingDiskType;
  }

  public void setDefaultLargeStagingDiskType(ReplicationConfigurationDefaultLargeStagingDiskType defaultLargeStagingDiskType) {
    this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
  }


  public ReplicationConfigurationTemplate ebsEncryption(ReplicationConfigurationEbsEncryption ebsEncryption) {
    this.ebsEncryption = ebsEncryption;
    return this;
  }

  /**
   * Get ebsEncryption
   * @return ebsEncryption
   */
  @javax.annotation.Nullable
  public ReplicationConfigurationEbsEncryption getEbsEncryption() {
    return ebsEncryption;
  }

  public void setEbsEncryption(ReplicationConfigurationEbsEncryption ebsEncryption) {
    this.ebsEncryption = ebsEncryption;
  }


  public ReplicationConfigurationTemplate ebsEncryptionKeyArn(String ebsEncryptionKeyArn) {
    this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
    return this;
  }

  /**
   * Get ebsEncryptionKeyArn
   * @return ebsEncryptionKeyArn
   */
  @javax.annotation.Nullable
  public String getEbsEncryptionKeyArn() {
    return ebsEncryptionKeyArn;
  }

  public void setEbsEncryptionKeyArn(String ebsEncryptionKeyArn) {
    this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
  }


  public ReplicationConfigurationTemplate replicationConfigurationTemplateID(String replicationConfigurationTemplateID) {
    this.replicationConfigurationTemplateID = replicationConfigurationTemplateID;
    return this;
  }

  /**
   * Get replicationConfigurationTemplateID
   * @return replicationConfigurationTemplateID
   */
  @javax.annotation.Nonnull
  public String getReplicationConfigurationTemplateID() {
    return replicationConfigurationTemplateID;
  }

  public void setReplicationConfigurationTemplateID(String replicationConfigurationTemplateID) {
    this.replicationConfigurationTemplateID = replicationConfigurationTemplateID;
  }


  public ReplicationConfigurationTemplate replicationServerInstanceType(String replicationServerInstanceType) {
    this.replicationServerInstanceType = replicationServerInstanceType;
    return this;
  }

  /**
   * Get replicationServerInstanceType
   * @return replicationServerInstanceType
   */
  @javax.annotation.Nullable
  public String getReplicationServerInstanceType() {
    return replicationServerInstanceType;
  }

  public void setReplicationServerInstanceType(String replicationServerInstanceType) {
    this.replicationServerInstanceType = replicationServerInstanceType;
  }


  public ReplicationConfigurationTemplate replicationServersSecurityGroupsIDs(List replicationServersSecurityGroupsIDs) {
    this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
    return this;
  }

  /**
   * Get replicationServersSecurityGroupsIDs
   * @return replicationServersSecurityGroupsIDs
   */
  @javax.annotation.Nullable
  public List getReplicationServersSecurityGroupsIDs() {
    return replicationServersSecurityGroupsIDs;
  }

  public void setReplicationServersSecurityGroupsIDs(List replicationServersSecurityGroupsIDs) {
    this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
  }


  public ReplicationConfigurationTemplate stagingAreaSubnetId(String stagingAreaSubnetId) {
    this.stagingAreaSubnetId = stagingAreaSubnetId;
    return this;
  }

  /**
   * Get stagingAreaSubnetId
   * @return stagingAreaSubnetId
   */
  @javax.annotation.Nullable
  public String getStagingAreaSubnetId() {
    return stagingAreaSubnetId;
  }

  public void setStagingAreaSubnetId(String stagingAreaSubnetId) {
    this.stagingAreaSubnetId = stagingAreaSubnetId;
  }


  public ReplicationConfigurationTemplate stagingAreaTags(Map stagingAreaTags) {
    this.stagingAreaTags = stagingAreaTags;
    return this;
  }

  /**
   * Get stagingAreaTags
   * @return stagingAreaTags
   */
  @javax.annotation.Nullable
  public Map getStagingAreaTags() {
    return stagingAreaTags;
  }

  public void setStagingAreaTags(Map stagingAreaTags) {
    this.stagingAreaTags = stagingAreaTags;
  }


  public ReplicationConfigurationTemplate tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public ReplicationConfigurationTemplate useDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
    this.useDedicatedReplicationServer = useDedicatedReplicationServer;
    return this;
  }

  /**
   * Get useDedicatedReplicationServer
   * @return useDedicatedReplicationServer
   */
  @javax.annotation.Nullable
  public Boolean getUseDedicatedReplicationServer() {
    return useDedicatedReplicationServer;
  }

  public void setUseDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
    this.useDedicatedReplicationServer = useDedicatedReplicationServer;
  }


  public ReplicationConfigurationTemplate useFipsEndpoint(Boolean useFipsEndpoint) {
    this.useFipsEndpoint = useFipsEndpoint;
    return this;
  }

  /**
   * Get useFipsEndpoint
   * @return useFipsEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getUseFipsEndpoint() {
    return useFipsEndpoint;
  }

  public void setUseFipsEndpoint(Boolean useFipsEndpoint) {
    this.useFipsEndpoint = useFipsEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationConfigurationTemplate replicationConfigurationTemplate = (ReplicationConfigurationTemplate) o;
    return Objects.equals(this.arn, replicationConfigurationTemplate.arn) &&
        Objects.equals(this.associateDefaultSecurityGroup, replicationConfigurationTemplate.associateDefaultSecurityGroup) &&
        Objects.equals(this.bandwidthThrottling, replicationConfigurationTemplate.bandwidthThrottling) &&
        Objects.equals(this.createPublicIP, replicationConfigurationTemplate.createPublicIP) &&
        Objects.equals(this.dataPlaneRouting, replicationConfigurationTemplate.dataPlaneRouting) &&
        Objects.equals(this.defaultLargeStagingDiskType, replicationConfigurationTemplate.defaultLargeStagingDiskType) &&
        Objects.equals(this.ebsEncryption, replicationConfigurationTemplate.ebsEncryption) &&
        Objects.equals(this.ebsEncryptionKeyArn, replicationConfigurationTemplate.ebsEncryptionKeyArn) &&
        Objects.equals(this.replicationConfigurationTemplateID, replicationConfigurationTemplate.replicationConfigurationTemplateID) &&
        Objects.equals(this.replicationServerInstanceType, replicationConfigurationTemplate.replicationServerInstanceType) &&
        Objects.equals(this.replicationServersSecurityGroupsIDs, replicationConfigurationTemplate.replicationServersSecurityGroupsIDs) &&
        Objects.equals(this.stagingAreaSubnetId, replicationConfigurationTemplate.stagingAreaSubnetId) &&
        Objects.equals(this.stagingAreaTags, replicationConfigurationTemplate.stagingAreaTags) &&
        Objects.equals(this.tags, replicationConfigurationTemplate.tags) &&
        Objects.equals(this.useDedicatedReplicationServer, replicationConfigurationTemplate.useDedicatedReplicationServer) &&
        Objects.equals(this.useFipsEndpoint, replicationConfigurationTemplate.useFipsEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, associateDefaultSecurityGroup, bandwidthThrottling, createPublicIP, dataPlaneRouting, defaultLargeStagingDiskType, ebsEncryption, ebsEncryptionKeyArn, replicationConfigurationTemplateID, replicationServerInstanceType, replicationServersSecurityGroupsIDs, stagingAreaSubnetId, stagingAreaTags, tags, useDedicatedReplicationServer, useFipsEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationConfigurationTemplate {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    associateDefaultSecurityGroup: ").append(toIndentedString(associateDefaultSecurityGroup)).append("\n");
    sb.append("    bandwidthThrottling: ").append(toIndentedString(bandwidthThrottling)).append("\n");
    sb.append("    createPublicIP: ").append(toIndentedString(createPublicIP)).append("\n");
    sb.append("    dataPlaneRouting: ").append(toIndentedString(dataPlaneRouting)).append("\n");
    sb.append("    defaultLargeStagingDiskType: ").append(toIndentedString(defaultLargeStagingDiskType)).append("\n");
    sb.append("    ebsEncryption: ").append(toIndentedString(ebsEncryption)).append("\n");
    sb.append("    ebsEncryptionKeyArn: ").append(toIndentedString(ebsEncryptionKeyArn)).append("\n");
    sb.append("    replicationConfigurationTemplateID: ").append(toIndentedString(replicationConfigurationTemplateID)).append("\n");
    sb.append("    replicationServerInstanceType: ").append(toIndentedString(replicationServerInstanceType)).append("\n");
    sb.append("    replicationServersSecurityGroupsIDs: ").append(toIndentedString(replicationServersSecurityGroupsIDs)).append("\n");
    sb.append("    stagingAreaSubnetId: ").append(toIndentedString(stagingAreaSubnetId)).append("\n");
    sb.append("    stagingAreaTags: ").append(toIndentedString(stagingAreaTags)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    useDedicatedReplicationServer: ").append(toIndentedString(useDedicatedReplicationServer)).append("\n");
    sb.append("    useFipsEndpoint: ").append(toIndentedString(useFipsEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("associateDefaultSecurityGroup");
    openapiFields.add("bandwidthThrottling");
    openapiFields.add("createPublicIP");
    openapiFields.add("dataPlaneRouting");
    openapiFields.add("defaultLargeStagingDiskType");
    openapiFields.add("ebsEncryption");
    openapiFields.add("ebsEncryptionKeyArn");
    openapiFields.add("replicationConfigurationTemplateID");
    openapiFields.add("replicationServerInstanceType");
    openapiFields.add("replicationServersSecurityGroupsIDs");
    openapiFields.add("stagingAreaSubnetId");
    openapiFields.add("stagingAreaTags");
    openapiFields.add("tags");
    openapiFields.add("useDedicatedReplicationServer");
    openapiFields.add("useFipsEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("replicationConfigurationTemplateID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationConfigurationTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationConfigurationTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationConfigurationTemplate is not found in the empty JSON string", ReplicationConfigurationTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationConfigurationTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationConfigurationTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplicationConfigurationTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `associateDefaultSecurityGroup`
      if (jsonObj.get("associateDefaultSecurityGroup") != null && !jsonObj.get("associateDefaultSecurityGroup").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("associateDefaultSecurityGroup"));
      }
      // validate the optional field `bandwidthThrottling`
      if (jsonObj.get("bandwidthThrottling") != null && !jsonObj.get("bandwidthThrottling").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("bandwidthThrottling"));
      }
      // validate the optional field `createPublicIP`
      if (jsonObj.get("createPublicIP") != null && !jsonObj.get("createPublicIP").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("createPublicIP"));
      }
      // validate the optional field `dataPlaneRouting`
      if (jsonObj.get("dataPlaneRouting") != null && !jsonObj.get("dataPlaneRouting").isJsonNull()) {
        ReplicationConfigurationDataPlaneRouting.validateJsonElement(jsonObj.get("dataPlaneRouting"));
      }
      // validate the optional field `defaultLargeStagingDiskType`
      if (jsonObj.get("defaultLargeStagingDiskType") != null && !jsonObj.get("defaultLargeStagingDiskType").isJsonNull()) {
        ReplicationConfigurationDefaultLargeStagingDiskType.validateJsonElement(jsonObj.get("defaultLargeStagingDiskType"));
      }
      // validate the optional field `ebsEncryption`
      if (jsonObj.get("ebsEncryption") != null && !jsonObj.get("ebsEncryption").isJsonNull()) {
        ReplicationConfigurationEbsEncryption.validateJsonElement(jsonObj.get("ebsEncryption"));
      }
      // validate the optional field `ebsEncryptionKeyArn`
      if (jsonObj.get("ebsEncryptionKeyArn") != null && !jsonObj.get("ebsEncryptionKeyArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ebsEncryptionKeyArn"));
      }
      // validate the required field `replicationConfigurationTemplateID`
      String.validateJsonElement(jsonObj.get("replicationConfigurationTemplateID"));
      // validate the optional field `replicationServerInstanceType`
      if (jsonObj.get("replicationServerInstanceType") != null && !jsonObj.get("replicationServerInstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("replicationServerInstanceType"));
      }
      // validate the optional field `replicationServersSecurityGroupsIDs`
      if (jsonObj.get("replicationServersSecurityGroupsIDs") != null && !jsonObj.get("replicationServersSecurityGroupsIDs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("replicationServersSecurityGroupsIDs"));
      }
      // validate the optional field `stagingAreaSubnetId`
      if (jsonObj.get("stagingAreaSubnetId") != null && !jsonObj.get("stagingAreaSubnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stagingAreaSubnetId"));
      }
      // validate the optional field `stagingAreaTags`
      if (jsonObj.get("stagingAreaTags") != null && !jsonObj.get("stagingAreaTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("stagingAreaTags"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `useDedicatedReplicationServer`
      if (jsonObj.get("useDedicatedReplicationServer") != null && !jsonObj.get("useDedicatedReplicationServer").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useDedicatedReplicationServer"));
      }
      // validate the optional field `useFipsEndpoint`
      if (jsonObj.get("useFipsEndpoint") != null && !jsonObj.get("useFipsEndpoint").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useFipsEndpoint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationConfigurationTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationConfigurationTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationConfigurationTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationConfigurationTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationConfigurationTemplate>() {
           @Override
           public void write(JsonWriter out, ReplicationConfigurationTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationConfigurationTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationConfigurationTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationConfigurationTemplate
   * @throws IOException if the JSON string is invalid with respect to ReplicationConfigurationTemplate
   */
  public static ReplicationConfigurationTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationConfigurationTemplate.class);
  }

  /**
   * Convert an instance of ReplicationConfigurationTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

