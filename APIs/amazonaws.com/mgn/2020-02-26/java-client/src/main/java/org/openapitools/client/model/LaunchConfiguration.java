/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BootMode;
import org.openapitools.client.model.LaunchConfigurationLicensing;
import org.openapitools.client.model.LaunchDisposition;
import org.openapitools.client.model.PostLaunchActions;
import org.openapitools.client.model.TargetInstanceTypeRightSizingMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LaunchConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LaunchConfiguration {
  public static final String SERIALIZED_NAME_BOOT_MODE = "bootMode";
  @SerializedName(SERIALIZED_NAME_BOOT_MODE)
  private BootMode bootMode;

  public static final String SERIALIZED_NAME_COPY_PRIVATE_IP = "copyPrivateIp";
  @SerializedName(SERIALIZED_NAME_COPY_PRIVATE_IP)
  private Boolean copyPrivateIp;

  public static final String SERIALIZED_NAME_COPY_TAGS = "copyTags";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS)
  private Boolean copyTags;

  public static final String SERIALIZED_NAME_EC2_LAUNCH_TEMPLATE_I_D = "ec2LaunchTemplateID";
  @SerializedName(SERIALIZED_NAME_EC2_LAUNCH_TEMPLATE_I_D)
  private String ec2LaunchTemplateID;

  public static final String SERIALIZED_NAME_ENABLE_MAP_AUTO_TAGGING = "enableMapAutoTagging";
  @SerializedName(SERIALIZED_NAME_ENABLE_MAP_AUTO_TAGGING)
  private Boolean enableMapAutoTagging;

  public static final String SERIALIZED_NAME_LAUNCH_DISPOSITION = "launchDisposition";
  @SerializedName(SERIALIZED_NAME_LAUNCH_DISPOSITION)
  private LaunchDisposition launchDisposition;

  public static final String SERIALIZED_NAME_LICENSING = "licensing";
  @SerializedName(SERIALIZED_NAME_LICENSING)
  private LaunchConfigurationLicensing licensing;

  public static final String SERIALIZED_NAME_MAP_AUTO_TAGGING_MPE_I_D = "mapAutoTaggingMpeID";
  @SerializedName(SERIALIZED_NAME_MAP_AUTO_TAGGING_MPE_I_D)
  private String mapAutoTaggingMpeID;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POST_LAUNCH_ACTIONS = "postLaunchActions";
  @SerializedName(SERIALIZED_NAME_POST_LAUNCH_ACTIONS)
  private PostLaunchActions postLaunchActions;

  public static final String SERIALIZED_NAME_SOURCE_SERVER_I_D = "sourceServerID";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVER_I_D)
  private String sourceServerID;

  public static final String SERIALIZED_NAME_TARGET_INSTANCE_TYPE_RIGHT_SIZING_METHOD = "targetInstanceTypeRightSizingMethod";
  @SerializedName(SERIALIZED_NAME_TARGET_INSTANCE_TYPE_RIGHT_SIZING_METHOD)
  private TargetInstanceTypeRightSizingMethod targetInstanceTypeRightSizingMethod;

  public LaunchConfiguration() {
  }

  public LaunchConfiguration bootMode(BootMode bootMode) {
    this.bootMode = bootMode;
    return this;
  }

  /**
   * Get bootMode
   * @return bootMode
   */
  @javax.annotation.Nullable
  public BootMode getBootMode() {
    return bootMode;
  }

  public void setBootMode(BootMode bootMode) {
    this.bootMode = bootMode;
  }


  public LaunchConfiguration copyPrivateIp(Boolean copyPrivateIp) {
    this.copyPrivateIp = copyPrivateIp;
    return this;
  }

  /**
   * Get copyPrivateIp
   * @return copyPrivateIp
   */
  @javax.annotation.Nullable
  public Boolean getCopyPrivateIp() {
    return copyPrivateIp;
  }

  public void setCopyPrivateIp(Boolean copyPrivateIp) {
    this.copyPrivateIp = copyPrivateIp;
  }


  public LaunchConfiguration copyTags(Boolean copyTags) {
    this.copyTags = copyTags;
    return this;
  }

  /**
   * Get copyTags
   * @return copyTags
   */
  @javax.annotation.Nullable
  public Boolean getCopyTags() {
    return copyTags;
  }

  public void setCopyTags(Boolean copyTags) {
    this.copyTags = copyTags;
  }


  public LaunchConfiguration ec2LaunchTemplateID(String ec2LaunchTemplateID) {
    this.ec2LaunchTemplateID = ec2LaunchTemplateID;
    return this;
  }

  /**
   * Get ec2LaunchTemplateID
   * @return ec2LaunchTemplateID
   */
  @javax.annotation.Nullable
  public String getEc2LaunchTemplateID() {
    return ec2LaunchTemplateID;
  }

  public void setEc2LaunchTemplateID(String ec2LaunchTemplateID) {
    this.ec2LaunchTemplateID = ec2LaunchTemplateID;
  }


  public LaunchConfiguration enableMapAutoTagging(Boolean enableMapAutoTagging) {
    this.enableMapAutoTagging = enableMapAutoTagging;
    return this;
  }

  /**
   * Get enableMapAutoTagging
   * @return enableMapAutoTagging
   */
  @javax.annotation.Nullable
  public Boolean getEnableMapAutoTagging() {
    return enableMapAutoTagging;
  }

  public void setEnableMapAutoTagging(Boolean enableMapAutoTagging) {
    this.enableMapAutoTagging = enableMapAutoTagging;
  }


  public LaunchConfiguration launchDisposition(LaunchDisposition launchDisposition) {
    this.launchDisposition = launchDisposition;
    return this;
  }

  /**
   * Get launchDisposition
   * @return launchDisposition
   */
  @javax.annotation.Nullable
  public LaunchDisposition getLaunchDisposition() {
    return launchDisposition;
  }

  public void setLaunchDisposition(LaunchDisposition launchDisposition) {
    this.launchDisposition = launchDisposition;
  }


  public LaunchConfiguration licensing(LaunchConfigurationLicensing licensing) {
    this.licensing = licensing;
    return this;
  }

  /**
   * Get licensing
   * @return licensing
   */
  @javax.annotation.Nullable
  public LaunchConfigurationLicensing getLicensing() {
    return licensing;
  }

  public void setLicensing(LaunchConfigurationLicensing licensing) {
    this.licensing = licensing;
  }


  public LaunchConfiguration mapAutoTaggingMpeID(String mapAutoTaggingMpeID) {
    this.mapAutoTaggingMpeID = mapAutoTaggingMpeID;
    return this;
  }

  /**
   * Get mapAutoTaggingMpeID
   * @return mapAutoTaggingMpeID
   */
  @javax.annotation.Nullable
  public String getMapAutoTaggingMpeID() {
    return mapAutoTaggingMpeID;
  }

  public void setMapAutoTaggingMpeID(String mapAutoTaggingMpeID) {
    this.mapAutoTaggingMpeID = mapAutoTaggingMpeID;
  }


  public LaunchConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LaunchConfiguration postLaunchActions(PostLaunchActions postLaunchActions) {
    this.postLaunchActions = postLaunchActions;
    return this;
  }

  /**
   * Get postLaunchActions
   * @return postLaunchActions
   */
  @javax.annotation.Nullable
  public PostLaunchActions getPostLaunchActions() {
    return postLaunchActions;
  }

  public void setPostLaunchActions(PostLaunchActions postLaunchActions) {
    this.postLaunchActions = postLaunchActions;
  }


  public LaunchConfiguration sourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
    return this;
  }

  /**
   * Get sourceServerID
   * @return sourceServerID
   */
  @javax.annotation.Nullable
  public String getSourceServerID() {
    return sourceServerID;
  }

  public void setSourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
  }


  public LaunchConfiguration targetInstanceTypeRightSizingMethod(TargetInstanceTypeRightSizingMethod targetInstanceTypeRightSizingMethod) {
    this.targetInstanceTypeRightSizingMethod = targetInstanceTypeRightSizingMethod;
    return this;
  }

  /**
   * Get targetInstanceTypeRightSizingMethod
   * @return targetInstanceTypeRightSizingMethod
   */
  @javax.annotation.Nullable
  public TargetInstanceTypeRightSizingMethod getTargetInstanceTypeRightSizingMethod() {
    return targetInstanceTypeRightSizingMethod;
  }

  public void setTargetInstanceTypeRightSizingMethod(TargetInstanceTypeRightSizingMethod targetInstanceTypeRightSizingMethod) {
    this.targetInstanceTypeRightSizingMethod = targetInstanceTypeRightSizingMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LaunchConfiguration launchConfiguration = (LaunchConfiguration) o;
    return Objects.equals(this.bootMode, launchConfiguration.bootMode) &&
        Objects.equals(this.copyPrivateIp, launchConfiguration.copyPrivateIp) &&
        Objects.equals(this.copyTags, launchConfiguration.copyTags) &&
        Objects.equals(this.ec2LaunchTemplateID, launchConfiguration.ec2LaunchTemplateID) &&
        Objects.equals(this.enableMapAutoTagging, launchConfiguration.enableMapAutoTagging) &&
        Objects.equals(this.launchDisposition, launchConfiguration.launchDisposition) &&
        Objects.equals(this.licensing, launchConfiguration.licensing) &&
        Objects.equals(this.mapAutoTaggingMpeID, launchConfiguration.mapAutoTaggingMpeID) &&
        Objects.equals(this.name, launchConfiguration.name) &&
        Objects.equals(this.postLaunchActions, launchConfiguration.postLaunchActions) &&
        Objects.equals(this.sourceServerID, launchConfiguration.sourceServerID) &&
        Objects.equals(this.targetInstanceTypeRightSizingMethod, launchConfiguration.targetInstanceTypeRightSizingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootMode, copyPrivateIp, copyTags, ec2LaunchTemplateID, enableMapAutoTagging, launchDisposition, licensing, mapAutoTaggingMpeID, name, postLaunchActions, sourceServerID, targetInstanceTypeRightSizingMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LaunchConfiguration {\n");
    sb.append("    bootMode: ").append(toIndentedString(bootMode)).append("\n");
    sb.append("    copyPrivateIp: ").append(toIndentedString(copyPrivateIp)).append("\n");
    sb.append("    copyTags: ").append(toIndentedString(copyTags)).append("\n");
    sb.append("    ec2LaunchTemplateID: ").append(toIndentedString(ec2LaunchTemplateID)).append("\n");
    sb.append("    enableMapAutoTagging: ").append(toIndentedString(enableMapAutoTagging)).append("\n");
    sb.append("    launchDisposition: ").append(toIndentedString(launchDisposition)).append("\n");
    sb.append("    licensing: ").append(toIndentedString(licensing)).append("\n");
    sb.append("    mapAutoTaggingMpeID: ").append(toIndentedString(mapAutoTaggingMpeID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    postLaunchActions: ").append(toIndentedString(postLaunchActions)).append("\n");
    sb.append("    sourceServerID: ").append(toIndentedString(sourceServerID)).append("\n");
    sb.append("    targetInstanceTypeRightSizingMethod: ").append(toIndentedString(targetInstanceTypeRightSizingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bootMode");
    openapiFields.add("copyPrivateIp");
    openapiFields.add("copyTags");
    openapiFields.add("ec2LaunchTemplateID");
    openapiFields.add("enableMapAutoTagging");
    openapiFields.add("launchDisposition");
    openapiFields.add("licensing");
    openapiFields.add("mapAutoTaggingMpeID");
    openapiFields.add("name");
    openapiFields.add("postLaunchActions");
    openapiFields.add("sourceServerID");
    openapiFields.add("targetInstanceTypeRightSizingMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LaunchConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LaunchConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LaunchConfiguration is not found in the empty JSON string", LaunchConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LaunchConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LaunchConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bootMode`
      if (jsonObj.get("bootMode") != null && !jsonObj.get("bootMode").isJsonNull()) {
        BootMode.validateJsonElement(jsonObj.get("bootMode"));
      }
      // validate the optional field `copyPrivateIp`
      if (jsonObj.get("copyPrivateIp") != null && !jsonObj.get("copyPrivateIp").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("copyPrivateIp"));
      }
      // validate the optional field `copyTags`
      if (jsonObj.get("copyTags") != null && !jsonObj.get("copyTags").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("copyTags"));
      }
      // validate the optional field `ec2LaunchTemplateID`
      if (jsonObj.get("ec2LaunchTemplateID") != null && !jsonObj.get("ec2LaunchTemplateID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ec2LaunchTemplateID"));
      }
      // validate the optional field `enableMapAutoTagging`
      if (jsonObj.get("enableMapAutoTagging") != null && !jsonObj.get("enableMapAutoTagging").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("enableMapAutoTagging"));
      }
      // validate the optional field `launchDisposition`
      if (jsonObj.get("launchDisposition") != null && !jsonObj.get("launchDisposition").isJsonNull()) {
        LaunchDisposition.validateJsonElement(jsonObj.get("launchDisposition"));
      }
      // validate the optional field `licensing`
      if (jsonObj.get("licensing") != null && !jsonObj.get("licensing").isJsonNull()) {
        LaunchConfigurationLicensing.validateJsonElement(jsonObj.get("licensing"));
      }
      // validate the optional field `mapAutoTaggingMpeID`
      if (jsonObj.get("mapAutoTaggingMpeID") != null && !jsonObj.get("mapAutoTaggingMpeID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("mapAutoTaggingMpeID"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `postLaunchActions`
      if (jsonObj.get("postLaunchActions") != null && !jsonObj.get("postLaunchActions").isJsonNull()) {
        PostLaunchActions.validateJsonElement(jsonObj.get("postLaunchActions"));
      }
      // validate the optional field `sourceServerID`
      if (jsonObj.get("sourceServerID") != null && !jsonObj.get("sourceServerID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceServerID"));
      }
      // validate the optional field `targetInstanceTypeRightSizingMethod`
      if (jsonObj.get("targetInstanceTypeRightSizingMethod") != null && !jsonObj.get("targetInstanceTypeRightSizingMethod").isJsonNull()) {
        TargetInstanceTypeRightSizingMethod.validateJsonElement(jsonObj.get("targetInstanceTypeRightSizingMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LaunchConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LaunchConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LaunchConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LaunchConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<LaunchConfiguration>() {
           @Override
           public void write(JsonWriter out, LaunchConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LaunchConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LaunchConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LaunchConfiguration
   * @throws IOException if the JSON string is invalid with respect to LaunchConfiguration
   */
  public static LaunchConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LaunchConfiguration.class);
  }

  /**
   * Convert an instance of LaunchConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

