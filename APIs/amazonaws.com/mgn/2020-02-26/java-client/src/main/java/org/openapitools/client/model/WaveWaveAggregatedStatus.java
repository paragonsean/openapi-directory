/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.WaveHealthStatus;
import org.openapitools.client.model.WaveProgressStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WaveWaveAggregatedStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WaveWaveAggregatedStatus {
  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  private WaveHealthStatus healthStatus;

  public static final String SERIALIZED_NAME_LAST_UPDATE_DATE_TIME = "lastUpdateDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATE_DATE_TIME)
  private String lastUpdateDateTime;

  public static final String SERIALIZED_NAME_PROGRESS_STATUS = "progressStatus";
  @SerializedName(SERIALIZED_NAME_PROGRESS_STATUS)
  private WaveProgressStatus progressStatus;

  public static final String SERIALIZED_NAME_REPLICATION_STARTED_DATE_TIME = "replicationStartedDateTime";
  @SerializedName(SERIALIZED_NAME_REPLICATION_STARTED_DATE_TIME)
  private String replicationStartedDateTime;

  public static final String SERIALIZED_NAME_TOTAL_APPLICATIONS = "totalApplications";
  @SerializedName(SERIALIZED_NAME_TOTAL_APPLICATIONS)
  private Integer totalApplications;

  public WaveWaveAggregatedStatus() {
  }

  public WaveWaveAggregatedStatus healthStatus(WaveHealthStatus healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Get healthStatus
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public WaveHealthStatus getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(WaveHealthStatus healthStatus) {
    this.healthStatus = healthStatus;
  }


  public WaveWaveAggregatedStatus lastUpdateDateTime(String lastUpdateDateTime) {
    this.lastUpdateDateTime = lastUpdateDateTime;
    return this;
  }

  /**
   * Get lastUpdateDateTime
   * @return lastUpdateDateTime
   */
  @javax.annotation.Nullable
  public String getLastUpdateDateTime() {
    return lastUpdateDateTime;
  }

  public void setLastUpdateDateTime(String lastUpdateDateTime) {
    this.lastUpdateDateTime = lastUpdateDateTime;
  }


  public WaveWaveAggregatedStatus progressStatus(WaveProgressStatus progressStatus) {
    this.progressStatus = progressStatus;
    return this;
  }

  /**
   * Get progressStatus
   * @return progressStatus
   */
  @javax.annotation.Nullable
  public WaveProgressStatus getProgressStatus() {
    return progressStatus;
  }

  public void setProgressStatus(WaveProgressStatus progressStatus) {
    this.progressStatus = progressStatus;
  }


  public WaveWaveAggregatedStatus replicationStartedDateTime(String replicationStartedDateTime) {
    this.replicationStartedDateTime = replicationStartedDateTime;
    return this;
  }

  /**
   * Get replicationStartedDateTime
   * @return replicationStartedDateTime
   */
  @javax.annotation.Nullable
  public String getReplicationStartedDateTime() {
    return replicationStartedDateTime;
  }

  public void setReplicationStartedDateTime(String replicationStartedDateTime) {
    this.replicationStartedDateTime = replicationStartedDateTime;
  }


  public WaveWaveAggregatedStatus totalApplications(Integer totalApplications) {
    this.totalApplications = totalApplications;
    return this;
  }

  /**
   * Get totalApplications
   * @return totalApplications
   */
  @javax.annotation.Nullable
  public Integer getTotalApplications() {
    return totalApplications;
  }

  public void setTotalApplications(Integer totalApplications) {
    this.totalApplications = totalApplications;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaveWaveAggregatedStatus waveWaveAggregatedStatus = (WaveWaveAggregatedStatus) o;
    return Objects.equals(this.healthStatus, waveWaveAggregatedStatus.healthStatus) &&
        Objects.equals(this.lastUpdateDateTime, waveWaveAggregatedStatus.lastUpdateDateTime) &&
        Objects.equals(this.progressStatus, waveWaveAggregatedStatus.progressStatus) &&
        Objects.equals(this.replicationStartedDateTime, waveWaveAggregatedStatus.replicationStartedDateTime) &&
        Objects.equals(this.totalApplications, waveWaveAggregatedStatus.totalApplications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(healthStatus, lastUpdateDateTime, progressStatus, replicationStartedDateTime, totalApplications);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaveWaveAggregatedStatus {\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("    lastUpdateDateTime: ").append(toIndentedString(lastUpdateDateTime)).append("\n");
    sb.append("    progressStatus: ").append(toIndentedString(progressStatus)).append("\n");
    sb.append("    replicationStartedDateTime: ").append(toIndentedString(replicationStartedDateTime)).append("\n");
    sb.append("    totalApplications: ").append(toIndentedString(totalApplications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("healthStatus");
    openapiFields.add("lastUpdateDateTime");
    openapiFields.add("progressStatus");
    openapiFields.add("replicationStartedDateTime");
    openapiFields.add("totalApplications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaveWaveAggregatedStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WaveWaveAggregatedStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaveWaveAggregatedStatus is not found in the empty JSON string", WaveWaveAggregatedStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaveWaveAggregatedStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaveWaveAggregatedStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `healthStatus`
      if (jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) {
        WaveHealthStatus.validateJsonElement(jsonObj.get("healthStatus"));
      }
      // validate the optional field `lastUpdateDateTime`
      if (jsonObj.get("lastUpdateDateTime") != null && !jsonObj.get("lastUpdateDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastUpdateDateTime"));
      }
      // validate the optional field `progressStatus`
      if (jsonObj.get("progressStatus") != null && !jsonObj.get("progressStatus").isJsonNull()) {
        WaveProgressStatus.validateJsonElement(jsonObj.get("progressStatus"));
      }
      // validate the optional field `replicationStartedDateTime`
      if (jsonObj.get("replicationStartedDateTime") != null && !jsonObj.get("replicationStartedDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("replicationStartedDateTime"));
      }
      // validate the optional field `totalApplications`
      if (jsonObj.get("totalApplications") != null && !jsonObj.get("totalApplications").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("totalApplications"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaveWaveAggregatedStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaveWaveAggregatedStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaveWaveAggregatedStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaveWaveAggregatedStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<WaveWaveAggregatedStatus>() {
           @Override
           public void write(JsonWriter out, WaveWaveAggregatedStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaveWaveAggregatedStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaveWaveAggregatedStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaveWaveAggregatedStatus
   * @throws IOException if the JSON string is invalid with respect to WaveWaveAggregatedStatus
   */
  public static WaveWaveAggregatedStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaveWaveAggregatedStatus.class);
  }

  /**
   * Convert an instance of WaveWaveAggregatedStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

