/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SourcePropertiesIdentificationHints;
import org.openapitools.client.model.SourcePropertiesOs;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SourceServerSourceProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceServerSourceProperties {
  public static final String SERIALIZED_NAME_CPUS = "cpus";
  @SerializedName(SERIALIZED_NAME_CPUS)
  private List cpus;

  public static final String SERIALIZED_NAME_DISKS = "disks";
  @SerializedName(SERIALIZED_NAME_DISKS)
  private List disks;

  public static final String SERIALIZED_NAME_IDENTIFICATION_HINTS = "identificationHints";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_HINTS)
  private SourcePropertiesIdentificationHints identificationHints;

  public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
  private String lastUpdatedDateTime;

  public static final String SERIALIZED_NAME_NETWORK_INTERFACES = "networkInterfaces";
  @SerializedName(SERIALIZED_NAME_NETWORK_INTERFACES)
  private List networkInterfaces;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private SourcePropertiesOs os;

  public static final String SERIALIZED_NAME_RAM_BYTES = "ramBytes";
  @SerializedName(SERIALIZED_NAME_RAM_BYTES)
  private Integer ramBytes;

  public static final String SERIALIZED_NAME_RECOMMENDED_INSTANCE_TYPE = "recommendedInstanceType";
  @SerializedName(SERIALIZED_NAME_RECOMMENDED_INSTANCE_TYPE)
  private String recommendedInstanceType;

  public SourceServerSourceProperties() {
  }

  public SourceServerSourceProperties cpus(List cpus) {
    this.cpus = cpus;
    return this;
  }

  /**
   * Get cpus
   * @return cpus
   */
  @javax.annotation.Nullable
  public List getCpus() {
    return cpus;
  }

  public void setCpus(List cpus) {
    this.cpus = cpus;
  }


  public SourceServerSourceProperties disks(List disks) {
    this.disks = disks;
    return this;
  }

  /**
   * Get disks
   * @return disks
   */
  @javax.annotation.Nullable
  public List getDisks() {
    return disks;
  }

  public void setDisks(List disks) {
    this.disks = disks;
  }


  public SourceServerSourceProperties identificationHints(SourcePropertiesIdentificationHints identificationHints) {
    this.identificationHints = identificationHints;
    return this;
  }

  /**
   * Get identificationHints
   * @return identificationHints
   */
  @javax.annotation.Nullable
  public SourcePropertiesIdentificationHints getIdentificationHints() {
    return identificationHints;
  }

  public void setIdentificationHints(SourcePropertiesIdentificationHints identificationHints) {
    this.identificationHints = identificationHints;
  }


  public SourceServerSourceProperties lastUpdatedDateTime(String lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
    return this;
  }

  /**
   * Get lastUpdatedDateTime
   * @return lastUpdatedDateTime
   */
  @javax.annotation.Nullable
  public String getLastUpdatedDateTime() {
    return lastUpdatedDateTime;
  }

  public void setLastUpdatedDateTime(String lastUpdatedDateTime) {
    this.lastUpdatedDateTime = lastUpdatedDateTime;
  }


  public SourceServerSourceProperties networkInterfaces(List networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
    return this;
  }

  /**
   * Get networkInterfaces
   * @return networkInterfaces
   */
  @javax.annotation.Nullable
  public List getNetworkInterfaces() {
    return networkInterfaces;
  }

  public void setNetworkInterfaces(List networkInterfaces) {
    this.networkInterfaces = networkInterfaces;
  }


  public SourceServerSourceProperties os(SourcePropertiesOs os) {
    this.os = os;
    return this;
  }

  /**
   * Get os
   * @return os
   */
  @javax.annotation.Nullable
  public SourcePropertiesOs getOs() {
    return os;
  }

  public void setOs(SourcePropertiesOs os) {
    this.os = os;
  }


  public SourceServerSourceProperties ramBytes(Integer ramBytes) {
    this.ramBytes = ramBytes;
    return this;
  }

  /**
   * Get ramBytes
   * @return ramBytes
   */
  @javax.annotation.Nullable
  public Integer getRamBytes() {
    return ramBytes;
  }

  public void setRamBytes(Integer ramBytes) {
    this.ramBytes = ramBytes;
  }


  public SourceServerSourceProperties recommendedInstanceType(String recommendedInstanceType) {
    this.recommendedInstanceType = recommendedInstanceType;
    return this;
  }

  /**
   * Get recommendedInstanceType
   * @return recommendedInstanceType
   */
  @javax.annotation.Nullable
  public String getRecommendedInstanceType() {
    return recommendedInstanceType;
  }

  public void setRecommendedInstanceType(String recommendedInstanceType) {
    this.recommendedInstanceType = recommendedInstanceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceServerSourceProperties sourceServerSourceProperties = (SourceServerSourceProperties) o;
    return Objects.equals(this.cpus, sourceServerSourceProperties.cpus) &&
        Objects.equals(this.disks, sourceServerSourceProperties.disks) &&
        Objects.equals(this.identificationHints, sourceServerSourceProperties.identificationHints) &&
        Objects.equals(this.lastUpdatedDateTime, sourceServerSourceProperties.lastUpdatedDateTime) &&
        Objects.equals(this.networkInterfaces, sourceServerSourceProperties.networkInterfaces) &&
        Objects.equals(this.os, sourceServerSourceProperties.os) &&
        Objects.equals(this.ramBytes, sourceServerSourceProperties.ramBytes) &&
        Objects.equals(this.recommendedInstanceType, sourceServerSourceProperties.recommendedInstanceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cpus, disks, identificationHints, lastUpdatedDateTime, networkInterfaces, os, ramBytes, recommendedInstanceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceServerSourceProperties {\n");
    sb.append("    cpus: ").append(toIndentedString(cpus)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    identificationHints: ").append(toIndentedString(identificationHints)).append("\n");
    sb.append("    lastUpdatedDateTime: ").append(toIndentedString(lastUpdatedDateTime)).append("\n");
    sb.append("    networkInterfaces: ").append(toIndentedString(networkInterfaces)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    ramBytes: ").append(toIndentedString(ramBytes)).append("\n");
    sb.append("    recommendedInstanceType: ").append(toIndentedString(recommendedInstanceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cpus");
    openapiFields.add("disks");
    openapiFields.add("identificationHints");
    openapiFields.add("lastUpdatedDateTime");
    openapiFields.add("networkInterfaces");
    openapiFields.add("os");
    openapiFields.add("ramBytes");
    openapiFields.add("recommendedInstanceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceServerSourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceServerSourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceServerSourceProperties is not found in the empty JSON string", SourceServerSourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceServerSourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceServerSourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cpus`
      if (jsonObj.get("cpus") != null && !jsonObj.get("cpus").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("cpus"));
      }
      // validate the optional field `disks`
      if (jsonObj.get("disks") != null && !jsonObj.get("disks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("disks"));
      }
      // validate the optional field `identificationHints`
      if (jsonObj.get("identificationHints") != null && !jsonObj.get("identificationHints").isJsonNull()) {
        SourcePropertiesIdentificationHints.validateJsonElement(jsonObj.get("identificationHints"));
      }
      // validate the optional field `lastUpdatedDateTime`
      if (jsonObj.get("lastUpdatedDateTime") != null && !jsonObj.get("lastUpdatedDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastUpdatedDateTime"));
      }
      // validate the optional field `networkInterfaces`
      if (jsonObj.get("networkInterfaces") != null && !jsonObj.get("networkInterfaces").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("networkInterfaces"));
      }
      // validate the optional field `os`
      if (jsonObj.get("os") != null && !jsonObj.get("os").isJsonNull()) {
        SourcePropertiesOs.validateJsonElement(jsonObj.get("os"));
      }
      // validate the optional field `ramBytes`
      if (jsonObj.get("ramBytes") != null && !jsonObj.get("ramBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ramBytes"));
      }
      // validate the optional field `recommendedInstanceType`
      if (jsonObj.get("recommendedInstanceType") != null && !jsonObj.get("recommendedInstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("recommendedInstanceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceServerSourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceServerSourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceServerSourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceServerSourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceServerSourceProperties>() {
           @Override
           public void write(JsonWriter out, SourceServerSourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceServerSourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceServerSourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceServerSourceProperties
   * @throws IOException if the JSON string is invalid with respect to SourceServerSourceProperties
   */
  public static SourceServerSourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceServerSourceProperties.class);
  }

  /**
   * Convert an instance of SourceServerSourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

