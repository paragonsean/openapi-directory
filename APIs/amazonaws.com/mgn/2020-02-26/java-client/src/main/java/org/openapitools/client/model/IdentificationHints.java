/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identification hints.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentificationHints {
  public static final String SERIALIZED_NAME_AWS_INSTANCE_I_D = "awsInstanceID";
  @SerializedName(SERIALIZED_NAME_AWS_INSTANCE_I_D)
  private String awsInstanceID;

  public static final String SERIALIZED_NAME_FQDN = "fqdn";
  @SerializedName(SERIALIZED_NAME_FQDN)
  private String fqdn;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_VM_PATH = "vmPath";
  @SerializedName(SERIALIZED_NAME_VM_PATH)
  private String vmPath;

  public static final String SERIALIZED_NAME_VM_WARE_UUID = "vmWareUuid";
  @SerializedName(SERIALIZED_NAME_VM_WARE_UUID)
  private String vmWareUuid;

  public IdentificationHints() {
  }

  public IdentificationHints awsInstanceID(String awsInstanceID) {
    this.awsInstanceID = awsInstanceID;
    return this;
  }

  /**
   * Get awsInstanceID
   * @return awsInstanceID
   */
  @javax.annotation.Nullable
  public String getAwsInstanceID() {
    return awsInstanceID;
  }

  public void setAwsInstanceID(String awsInstanceID) {
    this.awsInstanceID = awsInstanceID;
  }


  public IdentificationHints fqdn(String fqdn) {
    this.fqdn = fqdn;
    return this;
  }

  /**
   * Get fqdn
   * @return fqdn
   */
  @javax.annotation.Nullable
  public String getFqdn() {
    return fqdn;
  }

  public void setFqdn(String fqdn) {
    this.fqdn = fqdn;
  }


  public IdentificationHints hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public IdentificationHints vmPath(String vmPath) {
    this.vmPath = vmPath;
    return this;
  }

  /**
   * Get vmPath
   * @return vmPath
   */
  @javax.annotation.Nullable
  public String getVmPath() {
    return vmPath;
  }

  public void setVmPath(String vmPath) {
    this.vmPath = vmPath;
  }


  public IdentificationHints vmWareUuid(String vmWareUuid) {
    this.vmWareUuid = vmWareUuid;
    return this;
  }

  /**
   * Get vmWareUuid
   * @return vmWareUuid
   */
  @javax.annotation.Nullable
  public String getVmWareUuid() {
    return vmWareUuid;
  }

  public void setVmWareUuid(String vmWareUuid) {
    this.vmWareUuid = vmWareUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentificationHints identificationHints = (IdentificationHints) o;
    return Objects.equals(this.awsInstanceID, identificationHints.awsInstanceID) &&
        Objects.equals(this.fqdn, identificationHints.fqdn) &&
        Objects.equals(this.hostname, identificationHints.hostname) &&
        Objects.equals(this.vmPath, identificationHints.vmPath) &&
        Objects.equals(this.vmWareUuid, identificationHints.vmWareUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsInstanceID, fqdn, hostname, vmPath, vmWareUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentificationHints {\n");
    sb.append("    awsInstanceID: ").append(toIndentedString(awsInstanceID)).append("\n");
    sb.append("    fqdn: ").append(toIndentedString(fqdn)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    vmPath: ").append(toIndentedString(vmPath)).append("\n");
    sb.append("    vmWareUuid: ").append(toIndentedString(vmWareUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("awsInstanceID");
    openapiFields.add("fqdn");
    openapiFields.add("hostname");
    openapiFields.add("vmPath");
    openapiFields.add("vmWareUuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentificationHints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentificationHints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentificationHints is not found in the empty JSON string", IdentificationHints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentificationHints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentificationHints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `awsInstanceID`
      if (jsonObj.get("awsInstanceID") != null && !jsonObj.get("awsInstanceID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("awsInstanceID"));
      }
      // validate the optional field `fqdn`
      if (jsonObj.get("fqdn") != null && !jsonObj.get("fqdn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fqdn"));
      }
      // validate the optional field `hostname`
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("hostname"));
      }
      // validate the optional field `vmPath`
      if (jsonObj.get("vmPath") != null && !jsonObj.get("vmPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vmPath"));
      }
      // validate the optional field `vmWareUuid`
      if (jsonObj.get("vmWareUuid") != null && !jsonObj.get("vmWareUuid").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vmWareUuid"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentificationHints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentificationHints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentificationHints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentificationHints.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentificationHints>() {
           @Override
           public void write(JsonWriter out, IdentificationHints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentificationHints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentificationHints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentificationHints
   * @throws IOException if the JSON string is invalid with respect to IdentificationHints
   */
  public static IdentificationHints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentificationHints.class);
  }

  /**
   * Convert an instance of IdentificationHints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

