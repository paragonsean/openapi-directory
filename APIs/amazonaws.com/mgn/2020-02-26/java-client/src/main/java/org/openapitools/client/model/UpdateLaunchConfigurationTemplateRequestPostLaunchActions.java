/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PostLaunchActionsDeploymentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLaunchConfigurationTemplateRequestPostLaunchActions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLaunchConfigurationTemplateRequestPostLaunchActions {
  public static final String SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_NAME = "cloudWatchLogGroupName";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_LOG_GROUP_NAME)
  private String cloudWatchLogGroupName;

  public static final String SERIALIZED_NAME_DEPLOYMENT = "deployment";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT)
  private PostLaunchActionsDeploymentType deployment;

  public static final String SERIALIZED_NAME_S3_LOG_BUCKET = "s3LogBucket";
  @SerializedName(SERIALIZED_NAME_S3_LOG_BUCKET)
  private String s3LogBucket;

  public static final String SERIALIZED_NAME_S3_OUTPUT_KEY_PREFIX = "s3OutputKeyPrefix";
  @SerializedName(SERIALIZED_NAME_S3_OUTPUT_KEY_PREFIX)
  private String s3OutputKeyPrefix;

  public static final String SERIALIZED_NAME_SSM_DOCUMENTS = "ssmDocuments";
  @SerializedName(SERIALIZED_NAME_SSM_DOCUMENTS)
  private List ssmDocuments;

  public UpdateLaunchConfigurationTemplateRequestPostLaunchActions() {
  }

  public UpdateLaunchConfigurationTemplateRequestPostLaunchActions cloudWatchLogGroupName(String cloudWatchLogGroupName) {
    this.cloudWatchLogGroupName = cloudWatchLogGroupName;
    return this;
  }

  /**
   * Get cloudWatchLogGroupName
   * @return cloudWatchLogGroupName
   */
  @javax.annotation.Nullable
  public String getCloudWatchLogGroupName() {
    return cloudWatchLogGroupName;
  }

  public void setCloudWatchLogGroupName(String cloudWatchLogGroupName) {
    this.cloudWatchLogGroupName = cloudWatchLogGroupName;
  }


  public UpdateLaunchConfigurationTemplateRequestPostLaunchActions deployment(PostLaunchActionsDeploymentType deployment) {
    this.deployment = deployment;
    return this;
  }

  /**
   * Get deployment
   * @return deployment
   */
  @javax.annotation.Nullable
  public PostLaunchActionsDeploymentType getDeployment() {
    return deployment;
  }

  public void setDeployment(PostLaunchActionsDeploymentType deployment) {
    this.deployment = deployment;
  }


  public UpdateLaunchConfigurationTemplateRequestPostLaunchActions s3LogBucket(String s3LogBucket) {
    this.s3LogBucket = s3LogBucket;
    return this;
  }

  /**
   * Get s3LogBucket
   * @return s3LogBucket
   */
  @javax.annotation.Nullable
  public String getS3LogBucket() {
    return s3LogBucket;
  }

  public void setS3LogBucket(String s3LogBucket) {
    this.s3LogBucket = s3LogBucket;
  }


  public UpdateLaunchConfigurationTemplateRequestPostLaunchActions s3OutputKeyPrefix(String s3OutputKeyPrefix) {
    this.s3OutputKeyPrefix = s3OutputKeyPrefix;
    return this;
  }

  /**
   * Get s3OutputKeyPrefix
   * @return s3OutputKeyPrefix
   */
  @javax.annotation.Nullable
  public String getS3OutputKeyPrefix() {
    return s3OutputKeyPrefix;
  }

  public void setS3OutputKeyPrefix(String s3OutputKeyPrefix) {
    this.s3OutputKeyPrefix = s3OutputKeyPrefix;
  }


  public UpdateLaunchConfigurationTemplateRequestPostLaunchActions ssmDocuments(List ssmDocuments) {
    this.ssmDocuments = ssmDocuments;
    return this;
  }

  /**
   * Get ssmDocuments
   * @return ssmDocuments
   */
  @javax.annotation.Nullable
  public List getSsmDocuments() {
    return ssmDocuments;
  }

  public void setSsmDocuments(List ssmDocuments) {
    this.ssmDocuments = ssmDocuments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLaunchConfigurationTemplateRequestPostLaunchActions updateLaunchConfigurationTemplateRequestPostLaunchActions = (UpdateLaunchConfigurationTemplateRequestPostLaunchActions) o;
    return Objects.equals(this.cloudWatchLogGroupName, updateLaunchConfigurationTemplateRequestPostLaunchActions.cloudWatchLogGroupName) &&
        Objects.equals(this.deployment, updateLaunchConfigurationTemplateRequestPostLaunchActions.deployment) &&
        Objects.equals(this.s3LogBucket, updateLaunchConfigurationTemplateRequestPostLaunchActions.s3LogBucket) &&
        Objects.equals(this.s3OutputKeyPrefix, updateLaunchConfigurationTemplateRequestPostLaunchActions.s3OutputKeyPrefix) &&
        Objects.equals(this.ssmDocuments, updateLaunchConfigurationTemplateRequestPostLaunchActions.ssmDocuments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudWatchLogGroupName, deployment, s3LogBucket, s3OutputKeyPrefix, ssmDocuments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLaunchConfigurationTemplateRequestPostLaunchActions {\n");
    sb.append("    cloudWatchLogGroupName: ").append(toIndentedString(cloudWatchLogGroupName)).append("\n");
    sb.append("    deployment: ").append(toIndentedString(deployment)).append("\n");
    sb.append("    s3LogBucket: ").append(toIndentedString(s3LogBucket)).append("\n");
    sb.append("    s3OutputKeyPrefix: ").append(toIndentedString(s3OutputKeyPrefix)).append("\n");
    sb.append("    ssmDocuments: ").append(toIndentedString(ssmDocuments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudWatchLogGroupName");
    openapiFields.add("deployment");
    openapiFields.add("s3LogBucket");
    openapiFields.add("s3OutputKeyPrefix");
    openapiFields.add("ssmDocuments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLaunchConfigurationTemplateRequestPostLaunchActions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLaunchConfigurationTemplateRequestPostLaunchActions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLaunchConfigurationTemplateRequestPostLaunchActions is not found in the empty JSON string", UpdateLaunchConfigurationTemplateRequestPostLaunchActions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLaunchConfigurationTemplateRequestPostLaunchActions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLaunchConfigurationTemplateRequestPostLaunchActions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cloudWatchLogGroupName`
      if (jsonObj.get("cloudWatchLogGroupName") != null && !jsonObj.get("cloudWatchLogGroupName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("cloudWatchLogGroupName"));
      }
      // validate the optional field `deployment`
      if (jsonObj.get("deployment") != null && !jsonObj.get("deployment").isJsonNull()) {
        PostLaunchActionsDeploymentType.validateJsonElement(jsonObj.get("deployment"));
      }
      // validate the optional field `s3LogBucket`
      if (jsonObj.get("s3LogBucket") != null && !jsonObj.get("s3LogBucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3LogBucket"));
      }
      // validate the optional field `s3OutputKeyPrefix`
      if (jsonObj.get("s3OutputKeyPrefix") != null && !jsonObj.get("s3OutputKeyPrefix").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3OutputKeyPrefix"));
      }
      // validate the optional field `ssmDocuments`
      if (jsonObj.get("ssmDocuments") != null && !jsonObj.get("ssmDocuments").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ssmDocuments"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLaunchConfigurationTemplateRequestPostLaunchActions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLaunchConfigurationTemplateRequestPostLaunchActions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLaunchConfigurationTemplateRequestPostLaunchActions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLaunchConfigurationTemplateRequestPostLaunchActions.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLaunchConfigurationTemplateRequestPostLaunchActions>() {
           @Override
           public void write(JsonWriter out, UpdateLaunchConfigurationTemplateRequestPostLaunchActions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLaunchConfigurationTemplateRequestPostLaunchActions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLaunchConfigurationTemplateRequestPostLaunchActions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLaunchConfigurationTemplateRequestPostLaunchActions
   * @throws IOException if the JSON string is invalid with respect to UpdateLaunchConfigurationTemplateRequestPostLaunchActions
   */
  public static UpdateLaunchConfigurationTemplateRequestPostLaunchActions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLaunchConfigurationTemplateRequestPostLaunchActions.class);
  }

  /**
   * Convert an instance of UpdateLaunchConfigurationTemplateRequestPostLaunchActions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

