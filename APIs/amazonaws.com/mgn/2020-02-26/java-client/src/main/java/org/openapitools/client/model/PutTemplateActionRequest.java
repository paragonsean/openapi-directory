/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SsmExternalParameter;
import org.openapitools.client.model.SsmParameterStoreParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutTemplateActionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutTemplateActionRequest {
  public static final String SERIALIZED_NAME_ACTION_I_D = "actionID";
  @SerializedName(SERIALIZED_NAME_ACTION_I_D)
  private String actionID;

  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private String actionName;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active;

  /**
   * Template post migration custom action category.
   */
  @JsonAdapter(CategoryEnum.Adapter.class)
  public enum CategoryEnum {
    DISASTER_RECOVERY("DISASTER_RECOVERY"),
    
    OPERATING_SYSTEM("OPERATING_SYSTEM"),
    
    LICENSE_AND_SUBSCRIPTION("LICENSE_AND_SUBSCRIPTION"),
    
    VALIDATION("VALIDATION"),
    
    OBSERVABILITY("OBSERVABILITY"),
    
    SECURITY("SECURITY"),
    
    NETWORKING("NETWORKING"),
    
    CONFIGURATION("CONFIGURATION"),
    
    BACKUP("BACKUP"),
    
    OTHER("OTHER");

    private String value;

    CategoryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CategoryEnum fromValue(String value) {
      for (CategoryEnum b : CategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CategoryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CategoryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CategoryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CategoryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CategoryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private CategoryEnum category;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOCUMENT_IDENTIFIER = "documentIdentifier";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_IDENTIFIER)
  private String documentIdentifier;

  public static final String SERIALIZED_NAME_DOCUMENT_VERSION = "documentVersion";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_VERSION)
  private String documentVersion;

  public static final String SERIALIZED_NAME_EXTERNAL_PARAMETERS = "externalParameters";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PARAMETERS)
  private Map<String, SsmExternalParameter> externalParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_LAUNCH_CONFIGURATION_TEMPLATE_I_D = "launchConfigurationTemplateID";
  @SerializedName(SERIALIZED_NAME_LAUNCH_CONFIGURATION_TEMPLATE_I_D)
  private String launchConfigurationTemplateID;

  public static final String SERIALIZED_NAME_MUST_SUCCEED_FOR_CUTOVER = "mustSucceedForCutover";
  @SerializedName(SERIALIZED_NAME_MUST_SUCCEED_FOR_CUTOVER)
  private Boolean mustSucceedForCutover;

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM = "operatingSystem";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM)
  private String operatingSystem;

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, List<SsmParameterStoreParameter>> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_TIMEOUT_SECONDS = "timeoutSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_SECONDS)
  private Integer timeoutSeconds;

  public PutTemplateActionRequest() {
  }

  public PutTemplateActionRequest actionID(String actionID) {
    this.actionID = actionID;
    return this;
  }

  /**
   * Template post migration custom action ID.
   * @return actionID
   */
  @javax.annotation.Nonnull
  public String getActionID() {
    return actionID;
  }

  public void setActionID(String actionID) {
    this.actionID = actionID;
  }


  public PutTemplateActionRequest actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * Template post migration custom action name.
   * @return actionName
   */
  @javax.annotation.Nonnull
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }


  public PutTemplateActionRequest active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * Template post migration custom action active status.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  public PutTemplateActionRequest category(CategoryEnum category) {
    this.category = category;
    return this;
  }

  /**
   * Template post migration custom action category.
   * @return category
   */
  @javax.annotation.Nullable
  public CategoryEnum getCategory() {
    return category;
  }

  public void setCategory(CategoryEnum category) {
    this.category = category;
  }


  public PutTemplateActionRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Template post migration custom action description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PutTemplateActionRequest documentIdentifier(String documentIdentifier) {
    this.documentIdentifier = documentIdentifier;
    return this;
  }

  /**
   * Template post migration custom action document identifier.
   * @return documentIdentifier
   */
  @javax.annotation.Nonnull
  public String getDocumentIdentifier() {
    return documentIdentifier;
  }

  public void setDocumentIdentifier(String documentIdentifier) {
    this.documentIdentifier = documentIdentifier;
  }


  public PutTemplateActionRequest documentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
    return this;
  }

  /**
   * Template post migration custom action document version.
   * @return documentVersion
   */
  @javax.annotation.Nullable
  public String getDocumentVersion() {
    return documentVersion;
  }

  public void setDocumentVersion(String documentVersion) {
    this.documentVersion = documentVersion;
  }


  public PutTemplateActionRequest externalParameters(Map<String, SsmExternalParameter> externalParameters) {
    this.externalParameters = externalParameters;
    return this;
  }

  public PutTemplateActionRequest putExternalParametersItem(String key, SsmExternalParameter externalParametersItem) {
    if (this.externalParameters == null) {
      this.externalParameters = new HashMap<>();
    }
    this.externalParameters.put(key, externalParametersItem);
    return this;
  }

  /**
   * Template post migration custom action external parameters.
   * @return externalParameters
   */
  @javax.annotation.Nullable
  public Map<String, SsmExternalParameter> getExternalParameters() {
    return externalParameters;
  }

  public void setExternalParameters(Map<String, SsmExternalParameter> externalParameters) {
    this.externalParameters = externalParameters;
  }


  public PutTemplateActionRequest launchConfigurationTemplateID(String launchConfigurationTemplateID) {
    this.launchConfigurationTemplateID = launchConfigurationTemplateID;
    return this;
  }

  /**
   * Launch configuration template ID.
   * @return launchConfigurationTemplateID
   */
  @javax.annotation.Nonnull
  public String getLaunchConfigurationTemplateID() {
    return launchConfigurationTemplateID;
  }

  public void setLaunchConfigurationTemplateID(String launchConfigurationTemplateID) {
    this.launchConfigurationTemplateID = launchConfigurationTemplateID;
  }


  public PutTemplateActionRequest mustSucceedForCutover(Boolean mustSucceedForCutover) {
    this.mustSucceedForCutover = mustSucceedForCutover;
    return this;
  }

  /**
   * Template post migration custom action must succeed for cutover.
   * @return mustSucceedForCutover
   */
  @javax.annotation.Nullable
  public Boolean getMustSucceedForCutover() {
    return mustSucceedForCutover;
  }

  public void setMustSucceedForCutover(Boolean mustSucceedForCutover) {
    this.mustSucceedForCutover = mustSucceedForCutover;
  }


  public PutTemplateActionRequest operatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
    return this;
  }

  /**
   * Operating system eligible for this template post migration custom action.
   * @return operatingSystem
   */
  @javax.annotation.Nullable
  public String getOperatingSystem() {
    return operatingSystem;
  }

  public void setOperatingSystem(String operatingSystem) {
    this.operatingSystem = operatingSystem;
  }


  public PutTemplateActionRequest order(Integer order) {
    this.order = order;
    return this;
  }

  /**
   * Template post migration custom action order.
   * minimum: 1001
   * maximum: 10000
   * @return order
   */
  @javax.annotation.Nonnull
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public PutTemplateActionRequest parameters(Map<String, List<SsmParameterStoreParameter>> parameters) {
    this.parameters = parameters;
    return this;
  }

  public PutTemplateActionRequest putParametersItem(String key, List<SsmParameterStoreParameter> parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Template post migration custom action parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, List<SsmParameterStoreParameter>> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, List<SsmParameterStoreParameter>> parameters) {
    this.parameters = parameters;
  }


  public PutTemplateActionRequest timeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
    return this;
  }

  /**
   * Template post migration custom action timeout in seconds.
   * minimum: 1
   * @return timeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeoutSeconds() {
    return timeoutSeconds;
  }

  public void setTimeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutTemplateActionRequest putTemplateActionRequest = (PutTemplateActionRequest) o;
    return Objects.equals(this.actionID, putTemplateActionRequest.actionID) &&
        Objects.equals(this.actionName, putTemplateActionRequest.actionName) &&
        Objects.equals(this.active, putTemplateActionRequest.active) &&
        Objects.equals(this.category, putTemplateActionRequest.category) &&
        Objects.equals(this.description, putTemplateActionRequest.description) &&
        Objects.equals(this.documentIdentifier, putTemplateActionRequest.documentIdentifier) &&
        Objects.equals(this.documentVersion, putTemplateActionRequest.documentVersion) &&
        Objects.equals(this.externalParameters, putTemplateActionRequest.externalParameters) &&
        Objects.equals(this.launchConfigurationTemplateID, putTemplateActionRequest.launchConfigurationTemplateID) &&
        Objects.equals(this.mustSucceedForCutover, putTemplateActionRequest.mustSucceedForCutover) &&
        Objects.equals(this.operatingSystem, putTemplateActionRequest.operatingSystem) &&
        Objects.equals(this.order, putTemplateActionRequest.order) &&
        Objects.equals(this.parameters, putTemplateActionRequest.parameters) &&
        Objects.equals(this.timeoutSeconds, putTemplateActionRequest.timeoutSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionID, actionName, active, category, description, documentIdentifier, documentVersion, externalParameters, launchConfigurationTemplateID, mustSucceedForCutover, operatingSystem, order, parameters, timeoutSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutTemplateActionRequest {\n");
    sb.append("    actionID: ").append(toIndentedString(actionID)).append("\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentIdentifier: ").append(toIndentedString(documentIdentifier)).append("\n");
    sb.append("    documentVersion: ").append(toIndentedString(documentVersion)).append("\n");
    sb.append("    externalParameters: ").append(toIndentedString(externalParameters)).append("\n");
    sb.append("    launchConfigurationTemplateID: ").append(toIndentedString(launchConfigurationTemplateID)).append("\n");
    sb.append("    mustSucceedForCutover: ").append(toIndentedString(mustSucceedForCutover)).append("\n");
    sb.append("    operatingSystem: ").append(toIndentedString(operatingSystem)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    timeoutSeconds: ").append(toIndentedString(timeoutSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionID");
    openapiFields.add("actionName");
    openapiFields.add("active");
    openapiFields.add("category");
    openapiFields.add("description");
    openapiFields.add("documentIdentifier");
    openapiFields.add("documentVersion");
    openapiFields.add("externalParameters");
    openapiFields.add("launchConfigurationTemplateID");
    openapiFields.add("mustSucceedForCutover");
    openapiFields.add("operatingSystem");
    openapiFields.add("order");
    openapiFields.add("parameters");
    openapiFields.add("timeoutSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionID");
    openapiRequiredFields.add("actionName");
    openapiRequiredFields.add("documentIdentifier");
    openapiRequiredFields.add("launchConfigurationTemplateID");
    openapiRequiredFields.add("order");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutTemplateActionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutTemplateActionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutTemplateActionRequest is not found in the empty JSON string", PutTemplateActionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutTemplateActionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutTemplateActionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutTemplateActionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("actionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionID").toString()));
      }
      if (!jsonObj.get("actionName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionName").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        CategoryEnum.validateJsonElement(jsonObj.get("category"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("documentIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentIdentifier").toString()));
      }
      if ((jsonObj.get("documentVersion") != null && !jsonObj.get("documentVersion").isJsonNull()) && !jsonObj.get("documentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentVersion").toString()));
      }
      if (!jsonObj.get("launchConfigurationTemplateID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchConfigurationTemplateID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchConfigurationTemplateID").toString()));
      }
      if ((jsonObj.get("operatingSystem") != null && !jsonObj.get("operatingSystem").isJsonNull()) && !jsonObj.get("operatingSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystem").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutTemplateActionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutTemplateActionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutTemplateActionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutTemplateActionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutTemplateActionRequest>() {
           @Override
           public void write(JsonWriter out, PutTemplateActionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutTemplateActionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutTemplateActionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutTemplateActionRequest
   * @throws IOException if the JSON string is invalid with respect to PutTemplateActionRequest
   */
  public static PutTemplateActionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutTemplateActionRequest.class);
  }

  /**
   * Convert an instance of PutTemplateActionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

