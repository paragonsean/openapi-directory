/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DataReplicationInfoDataReplicationError;
import org.openapitools.client.model.DataReplicationInfoDataReplicationInitiation;
import org.openapitools.client.model.DataReplicationState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SourceServerDataReplicationInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceServerDataReplicationInfo {
  public static final String SERIALIZED_NAME_DATA_REPLICATION_ERROR = "dataReplicationError";
  @SerializedName(SERIALIZED_NAME_DATA_REPLICATION_ERROR)
  private DataReplicationInfoDataReplicationError dataReplicationError;

  public static final String SERIALIZED_NAME_DATA_REPLICATION_INITIATION = "dataReplicationInitiation";
  @SerializedName(SERIALIZED_NAME_DATA_REPLICATION_INITIATION)
  private DataReplicationInfoDataReplicationInitiation dataReplicationInitiation;

  public static final String SERIALIZED_NAME_DATA_REPLICATION_STATE = "dataReplicationState";
  @SerializedName(SERIALIZED_NAME_DATA_REPLICATION_STATE)
  private DataReplicationState dataReplicationState;

  public static final String SERIALIZED_NAME_ETA_DATE_TIME = "etaDateTime";
  @SerializedName(SERIALIZED_NAME_ETA_DATE_TIME)
  private String etaDateTime;

  public static final String SERIALIZED_NAME_LAG_DURATION = "lagDuration";
  @SerializedName(SERIALIZED_NAME_LAG_DURATION)
  private String lagDuration;

  public static final String SERIALIZED_NAME_LAST_SNAPSHOT_DATE_TIME = "lastSnapshotDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_SNAPSHOT_DATE_TIME)
  private String lastSnapshotDateTime;

  public static final String SERIALIZED_NAME_REPLICATED_DISKS = "replicatedDisks";
  @SerializedName(SERIALIZED_NAME_REPLICATED_DISKS)
  private List replicatedDisks;

  public SourceServerDataReplicationInfo() {
  }

  public SourceServerDataReplicationInfo dataReplicationError(DataReplicationInfoDataReplicationError dataReplicationError) {
    this.dataReplicationError = dataReplicationError;
    return this;
  }

  /**
   * Get dataReplicationError
   * @return dataReplicationError
   */
  @javax.annotation.Nullable
  public DataReplicationInfoDataReplicationError getDataReplicationError() {
    return dataReplicationError;
  }

  public void setDataReplicationError(DataReplicationInfoDataReplicationError dataReplicationError) {
    this.dataReplicationError = dataReplicationError;
  }


  public SourceServerDataReplicationInfo dataReplicationInitiation(DataReplicationInfoDataReplicationInitiation dataReplicationInitiation) {
    this.dataReplicationInitiation = dataReplicationInitiation;
    return this;
  }

  /**
   * Get dataReplicationInitiation
   * @return dataReplicationInitiation
   */
  @javax.annotation.Nullable
  public DataReplicationInfoDataReplicationInitiation getDataReplicationInitiation() {
    return dataReplicationInitiation;
  }

  public void setDataReplicationInitiation(DataReplicationInfoDataReplicationInitiation dataReplicationInitiation) {
    this.dataReplicationInitiation = dataReplicationInitiation;
  }


  public SourceServerDataReplicationInfo dataReplicationState(DataReplicationState dataReplicationState) {
    this.dataReplicationState = dataReplicationState;
    return this;
  }

  /**
   * Get dataReplicationState
   * @return dataReplicationState
   */
  @javax.annotation.Nullable
  public DataReplicationState getDataReplicationState() {
    return dataReplicationState;
  }

  public void setDataReplicationState(DataReplicationState dataReplicationState) {
    this.dataReplicationState = dataReplicationState;
  }


  public SourceServerDataReplicationInfo etaDateTime(String etaDateTime) {
    this.etaDateTime = etaDateTime;
    return this;
  }

  /**
   * Get etaDateTime
   * @return etaDateTime
   */
  @javax.annotation.Nullable
  public String getEtaDateTime() {
    return etaDateTime;
  }

  public void setEtaDateTime(String etaDateTime) {
    this.etaDateTime = etaDateTime;
  }


  public SourceServerDataReplicationInfo lagDuration(String lagDuration) {
    this.lagDuration = lagDuration;
    return this;
  }

  /**
   * Get lagDuration
   * @return lagDuration
   */
  @javax.annotation.Nullable
  public String getLagDuration() {
    return lagDuration;
  }

  public void setLagDuration(String lagDuration) {
    this.lagDuration = lagDuration;
  }


  public SourceServerDataReplicationInfo lastSnapshotDateTime(String lastSnapshotDateTime) {
    this.lastSnapshotDateTime = lastSnapshotDateTime;
    return this;
  }

  /**
   * Get lastSnapshotDateTime
   * @return lastSnapshotDateTime
   */
  @javax.annotation.Nullable
  public String getLastSnapshotDateTime() {
    return lastSnapshotDateTime;
  }

  public void setLastSnapshotDateTime(String lastSnapshotDateTime) {
    this.lastSnapshotDateTime = lastSnapshotDateTime;
  }


  public SourceServerDataReplicationInfo replicatedDisks(List replicatedDisks) {
    this.replicatedDisks = replicatedDisks;
    return this;
  }

  /**
   * Get replicatedDisks
   * @return replicatedDisks
   */
  @javax.annotation.Nullable
  public List getReplicatedDisks() {
    return replicatedDisks;
  }

  public void setReplicatedDisks(List replicatedDisks) {
    this.replicatedDisks = replicatedDisks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceServerDataReplicationInfo sourceServerDataReplicationInfo = (SourceServerDataReplicationInfo) o;
    return Objects.equals(this.dataReplicationError, sourceServerDataReplicationInfo.dataReplicationError) &&
        Objects.equals(this.dataReplicationInitiation, sourceServerDataReplicationInfo.dataReplicationInitiation) &&
        Objects.equals(this.dataReplicationState, sourceServerDataReplicationInfo.dataReplicationState) &&
        Objects.equals(this.etaDateTime, sourceServerDataReplicationInfo.etaDateTime) &&
        Objects.equals(this.lagDuration, sourceServerDataReplicationInfo.lagDuration) &&
        Objects.equals(this.lastSnapshotDateTime, sourceServerDataReplicationInfo.lastSnapshotDateTime) &&
        Objects.equals(this.replicatedDisks, sourceServerDataReplicationInfo.replicatedDisks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataReplicationError, dataReplicationInitiation, dataReplicationState, etaDateTime, lagDuration, lastSnapshotDateTime, replicatedDisks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceServerDataReplicationInfo {\n");
    sb.append("    dataReplicationError: ").append(toIndentedString(dataReplicationError)).append("\n");
    sb.append("    dataReplicationInitiation: ").append(toIndentedString(dataReplicationInitiation)).append("\n");
    sb.append("    dataReplicationState: ").append(toIndentedString(dataReplicationState)).append("\n");
    sb.append("    etaDateTime: ").append(toIndentedString(etaDateTime)).append("\n");
    sb.append("    lagDuration: ").append(toIndentedString(lagDuration)).append("\n");
    sb.append("    lastSnapshotDateTime: ").append(toIndentedString(lastSnapshotDateTime)).append("\n");
    sb.append("    replicatedDisks: ").append(toIndentedString(replicatedDisks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataReplicationError");
    openapiFields.add("dataReplicationInitiation");
    openapiFields.add("dataReplicationState");
    openapiFields.add("etaDateTime");
    openapiFields.add("lagDuration");
    openapiFields.add("lastSnapshotDateTime");
    openapiFields.add("replicatedDisks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceServerDataReplicationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceServerDataReplicationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceServerDataReplicationInfo is not found in the empty JSON string", SourceServerDataReplicationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceServerDataReplicationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceServerDataReplicationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataReplicationError`
      if (jsonObj.get("dataReplicationError") != null && !jsonObj.get("dataReplicationError").isJsonNull()) {
        DataReplicationInfoDataReplicationError.validateJsonElement(jsonObj.get("dataReplicationError"));
      }
      // validate the optional field `dataReplicationInitiation`
      if (jsonObj.get("dataReplicationInitiation") != null && !jsonObj.get("dataReplicationInitiation").isJsonNull()) {
        DataReplicationInfoDataReplicationInitiation.validateJsonElement(jsonObj.get("dataReplicationInitiation"));
      }
      // validate the optional field `dataReplicationState`
      if (jsonObj.get("dataReplicationState") != null && !jsonObj.get("dataReplicationState").isJsonNull()) {
        DataReplicationState.validateJsonElement(jsonObj.get("dataReplicationState"));
      }
      // validate the optional field `etaDateTime`
      if (jsonObj.get("etaDateTime") != null && !jsonObj.get("etaDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("etaDateTime"));
      }
      // validate the optional field `lagDuration`
      if (jsonObj.get("lagDuration") != null && !jsonObj.get("lagDuration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lagDuration"));
      }
      // validate the optional field `lastSnapshotDateTime`
      if (jsonObj.get("lastSnapshotDateTime") != null && !jsonObj.get("lastSnapshotDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastSnapshotDateTime"));
      }
      // validate the optional field `replicatedDisks`
      if (jsonObj.get("replicatedDisks") != null && !jsonObj.get("replicatedDisks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("replicatedDisks"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceServerDataReplicationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceServerDataReplicationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceServerDataReplicationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceServerDataReplicationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceServerDataReplicationInfo>() {
           @Override
           public void write(JsonWriter out, SourceServerDataReplicationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceServerDataReplicationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceServerDataReplicationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceServerDataReplicationInfo
   * @throws IOException if the JSON string is invalid with respect to SourceServerDataReplicationInfo
   */
  public static SourceServerDataReplicationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceServerDataReplicationInfo.class);
  }

  /**
   * Convert an instance of SourceServerDataReplicationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

