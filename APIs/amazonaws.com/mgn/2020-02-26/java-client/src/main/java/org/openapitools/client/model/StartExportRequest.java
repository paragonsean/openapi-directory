/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartExportRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartExportRequest {
  public static final String SERIALIZED_NAME_S3_BUCKET = "s3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3_BUCKET_OWNER = "s3BucketOwner";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_OWNER)
  private String s3BucketOwner;

  public static final String SERIALIZED_NAME_S3_KEY = "s3Key";
  @SerializedName(SERIALIZED_NAME_S3_KEY)
  private String s3Key;

  public StartExportRequest() {
  }

  public StartExportRequest s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Start export request s3 bucket.
   * @return s3Bucket
   */
  @javax.annotation.Nonnull
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public StartExportRequest s3BucketOwner(String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
    return this;
  }

  /**
   * Start export request s3 bucket owner.
   * @return s3BucketOwner
   */
  @javax.annotation.Nullable
  public String getS3BucketOwner() {
    return s3BucketOwner;
  }

  public void setS3BucketOwner(String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
  }


  public StartExportRequest s3Key(String s3Key) {
    this.s3Key = s3Key;
    return this;
  }

  /**
   * Start export request s3key.
   * @return s3Key
   */
  @javax.annotation.Nonnull
  public String getS3Key() {
    return s3Key;
  }

  public void setS3Key(String s3Key) {
    this.s3Key = s3Key;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartExportRequest startExportRequest = (StartExportRequest) o;
    return Objects.equals(this.s3Bucket, startExportRequest.s3Bucket) &&
        Objects.equals(this.s3BucketOwner, startExportRequest.s3BucketOwner) &&
        Objects.equals(this.s3Key, startExportRequest.s3Key);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Bucket, s3BucketOwner, s3Key);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartExportRequest {\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3BucketOwner: ").append(toIndentedString(s3BucketOwner)).append("\n");
    sb.append("    s3Key: ").append(toIndentedString(s3Key)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("s3Bucket");
    openapiFields.add("s3BucketOwner");
    openapiFields.add("s3Key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("s3Bucket");
    openapiRequiredFields.add("s3Key");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartExportRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartExportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartExportRequest is not found in the empty JSON string", StartExportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartExportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartExportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StartExportRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("s3Bucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3Bucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3Bucket").toString()));
      }
      if ((jsonObj.get("s3BucketOwner") != null && !jsonObj.get("s3BucketOwner").isJsonNull()) && !jsonObj.get("s3BucketOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3BucketOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3BucketOwner").toString()));
      }
      if (!jsonObj.get("s3Key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `s3Key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("s3Key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartExportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartExportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartExportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartExportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<StartExportRequest>() {
           @Override
           public void write(JsonWriter out, StartExportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartExportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartExportRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartExportRequest
   * @throws IOException if the JSON string is invalid with respect to StartExportRequest
   */
  public static StartExportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartExportRequest.class);
  }

  /**
   * Convert an instance of StartExportRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

