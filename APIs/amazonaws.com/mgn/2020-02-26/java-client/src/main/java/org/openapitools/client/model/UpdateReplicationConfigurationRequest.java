/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ReplicationConfigurationReplicatedDisk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateReplicationConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateReplicationConfigurationRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_I_D = "accountID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D)
  private String accountID;

  public static final String SERIALIZED_NAME_ASSOCIATE_DEFAULT_SECURITY_GROUP = "associateDefaultSecurityGroup";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE_DEFAULT_SECURITY_GROUP)
  private Boolean associateDefaultSecurityGroup;

  public static final String SERIALIZED_NAME_BANDWIDTH_THROTTLING = "bandwidthThrottling";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_THROTTLING)
  private Integer bandwidthThrottling;

  public static final String SERIALIZED_NAME_CREATE_PUBLIC_I_P = "createPublicIP";
  @SerializedName(SERIALIZED_NAME_CREATE_PUBLIC_I_P)
  private Boolean createPublicIP;

  /**
   * Update replication configuration data plane routing request.
   */
  @JsonAdapter(DataPlaneRoutingEnum.Adapter.class)
  public enum DataPlaneRoutingEnum {
    PRIVATE_IP("PRIVATE_IP"),
    
    PUBLIC_IP("PUBLIC_IP");

    private String value;

    DataPlaneRoutingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataPlaneRoutingEnum fromValue(String value) {
      for (DataPlaneRoutingEnum b : DataPlaneRoutingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataPlaneRoutingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataPlaneRoutingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataPlaneRoutingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataPlaneRoutingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataPlaneRoutingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_PLANE_ROUTING = "dataPlaneRouting";
  @SerializedName(SERIALIZED_NAME_DATA_PLANE_ROUTING)
  private DataPlaneRoutingEnum dataPlaneRouting;

  /**
   * Update replication configuration use default large Staging Disk type request.
   */
  @JsonAdapter(DefaultLargeStagingDiskTypeEnum.Adapter.class)
  public enum DefaultLargeStagingDiskTypeEnum {
    GP2("GP2"),
    
    ST1("ST1"),
    
    GP3("GP3");

    private String value;

    DefaultLargeStagingDiskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultLargeStagingDiskTypeEnum fromValue(String value) {
      for (DefaultLargeStagingDiskTypeEnum b : DefaultLargeStagingDiskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultLargeStagingDiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultLargeStagingDiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultLargeStagingDiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultLargeStagingDiskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultLargeStagingDiskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_LARGE_STAGING_DISK_TYPE = "defaultLargeStagingDiskType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LARGE_STAGING_DISK_TYPE)
  private DefaultLargeStagingDiskTypeEnum defaultLargeStagingDiskType;

  /**
   * Update replication configuration EBS encryption request.
   */
  @JsonAdapter(EbsEncryptionEnum.Adapter.class)
  public enum EbsEncryptionEnum {
    DEFAULT("DEFAULT"),
    
    CUSTOM("CUSTOM");

    private String value;

    EbsEncryptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EbsEncryptionEnum fromValue(String value) {
      for (EbsEncryptionEnum b : EbsEncryptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EbsEncryptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EbsEncryptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EbsEncryptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EbsEncryptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EbsEncryptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EBS_ENCRYPTION = "ebsEncryption";
  @SerializedName(SERIALIZED_NAME_EBS_ENCRYPTION)
  private EbsEncryptionEnum ebsEncryption;

  public static final String SERIALIZED_NAME_EBS_ENCRYPTION_KEY_ARN = "ebsEncryptionKeyArn";
  @SerializedName(SERIALIZED_NAME_EBS_ENCRYPTION_KEY_ARN)
  private String ebsEncryptionKeyArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPLICATED_DISKS = "replicatedDisks";
  @SerializedName(SERIALIZED_NAME_REPLICATED_DISKS)
  private List<ReplicationConfigurationReplicatedDisk> replicatedDisks = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLICATION_SERVER_INSTANCE_TYPE = "replicationServerInstanceType";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVER_INSTANCE_TYPE)
  private String replicationServerInstanceType;

  public static final String SERIALIZED_NAME_REPLICATION_SERVERS_SECURITY_GROUPS_I_DS = "replicationServersSecurityGroupsIDs";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVERS_SECURITY_GROUPS_I_DS)
  private List<String> replicationServersSecurityGroupsIDs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_SERVER_I_D = "sourceServerID";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVER_I_D)
  private String sourceServerID;

  public static final String SERIALIZED_NAME_STAGING_AREA_SUBNET_ID = "stagingAreaSubnetId";
  @SerializedName(SERIALIZED_NAME_STAGING_AREA_SUBNET_ID)
  private String stagingAreaSubnetId;

  public static final String SERIALIZED_NAME_STAGING_AREA_TAGS = "stagingAreaTags";
  @SerializedName(SERIALIZED_NAME_STAGING_AREA_TAGS)
  private Map<String, String> stagingAreaTags = new HashMap<>();

  public static final String SERIALIZED_NAME_USE_DEDICATED_REPLICATION_SERVER = "useDedicatedReplicationServer";
  @SerializedName(SERIALIZED_NAME_USE_DEDICATED_REPLICATION_SERVER)
  private Boolean useDedicatedReplicationServer;

  public static final String SERIALIZED_NAME_USE_FIPS_ENDPOINT = "useFipsEndpoint";
  @SerializedName(SERIALIZED_NAME_USE_FIPS_ENDPOINT)
  private Boolean useFipsEndpoint;

  public UpdateReplicationConfigurationRequest() {
  }

  public UpdateReplicationConfigurationRequest accountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  /**
   * Update replication configuration Account ID request.
   * @return accountID
   */
  @javax.annotation.Nullable
  public String getAccountID() {
    return accountID;
  }

  public void setAccountID(String accountID) {
    this.accountID = accountID;
  }


  public UpdateReplicationConfigurationRequest associateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
    this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
    return this;
  }

  /**
   * Update replication configuration associate default Application Migration Service Security group request.
   * @return associateDefaultSecurityGroup
   */
  @javax.annotation.Nullable
  public Boolean getAssociateDefaultSecurityGroup() {
    return associateDefaultSecurityGroup;
  }

  public void setAssociateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
    this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
  }


  public UpdateReplicationConfigurationRequest bandwidthThrottling(Integer bandwidthThrottling) {
    this.bandwidthThrottling = bandwidthThrottling;
    return this;
  }

  /**
   * Update replication configuration bandwidth throttling request.
   * minimum: 0
   * maximum: 10000
   * @return bandwidthThrottling
   */
  @javax.annotation.Nullable
  public Integer getBandwidthThrottling() {
    return bandwidthThrottling;
  }

  public void setBandwidthThrottling(Integer bandwidthThrottling) {
    this.bandwidthThrottling = bandwidthThrottling;
  }


  public UpdateReplicationConfigurationRequest createPublicIP(Boolean createPublicIP) {
    this.createPublicIP = createPublicIP;
    return this;
  }

  /**
   * Update replication configuration create Public IP request.
   * @return createPublicIP
   */
  @javax.annotation.Nullable
  public Boolean getCreatePublicIP() {
    return createPublicIP;
  }

  public void setCreatePublicIP(Boolean createPublicIP) {
    this.createPublicIP = createPublicIP;
  }


  public UpdateReplicationConfigurationRequest dataPlaneRouting(DataPlaneRoutingEnum dataPlaneRouting) {
    this.dataPlaneRouting = dataPlaneRouting;
    return this;
  }

  /**
   * Update replication configuration data plane routing request.
   * @return dataPlaneRouting
   */
  @javax.annotation.Nullable
  public DataPlaneRoutingEnum getDataPlaneRouting() {
    return dataPlaneRouting;
  }

  public void setDataPlaneRouting(DataPlaneRoutingEnum dataPlaneRouting) {
    this.dataPlaneRouting = dataPlaneRouting;
  }


  public UpdateReplicationConfigurationRequest defaultLargeStagingDiskType(DefaultLargeStagingDiskTypeEnum defaultLargeStagingDiskType) {
    this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
    return this;
  }

  /**
   * Update replication configuration use default large Staging Disk type request.
   * @return defaultLargeStagingDiskType
   */
  @javax.annotation.Nullable
  public DefaultLargeStagingDiskTypeEnum getDefaultLargeStagingDiskType() {
    return defaultLargeStagingDiskType;
  }

  public void setDefaultLargeStagingDiskType(DefaultLargeStagingDiskTypeEnum defaultLargeStagingDiskType) {
    this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
  }


  public UpdateReplicationConfigurationRequest ebsEncryption(EbsEncryptionEnum ebsEncryption) {
    this.ebsEncryption = ebsEncryption;
    return this;
  }

  /**
   * Update replication configuration EBS encryption request.
   * @return ebsEncryption
   */
  @javax.annotation.Nullable
  public EbsEncryptionEnum getEbsEncryption() {
    return ebsEncryption;
  }

  public void setEbsEncryption(EbsEncryptionEnum ebsEncryption) {
    this.ebsEncryption = ebsEncryption;
  }


  public UpdateReplicationConfigurationRequest ebsEncryptionKeyArn(String ebsEncryptionKeyArn) {
    this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
    return this;
  }

  /**
   * Update replication configuration EBS encryption key ARN request.
   * @return ebsEncryptionKeyArn
   */
  @javax.annotation.Nullable
  public String getEbsEncryptionKeyArn() {
    return ebsEncryptionKeyArn;
  }

  public void setEbsEncryptionKeyArn(String ebsEncryptionKeyArn) {
    this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
  }


  public UpdateReplicationConfigurationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Update replication configuration name request.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateReplicationConfigurationRequest replicatedDisks(List<ReplicationConfigurationReplicatedDisk> replicatedDisks) {
    this.replicatedDisks = replicatedDisks;
    return this;
  }

  public UpdateReplicationConfigurationRequest addReplicatedDisksItem(ReplicationConfigurationReplicatedDisk replicatedDisksItem) {
    if (this.replicatedDisks == null) {
      this.replicatedDisks = new ArrayList<>();
    }
    this.replicatedDisks.add(replicatedDisksItem);
    return this;
  }

  /**
   * Update replication configuration replicated disks request.
   * @return replicatedDisks
   */
  @javax.annotation.Nullable
  public List<ReplicationConfigurationReplicatedDisk> getReplicatedDisks() {
    return replicatedDisks;
  }

  public void setReplicatedDisks(List<ReplicationConfigurationReplicatedDisk> replicatedDisks) {
    this.replicatedDisks = replicatedDisks;
  }


  public UpdateReplicationConfigurationRequest replicationServerInstanceType(String replicationServerInstanceType) {
    this.replicationServerInstanceType = replicationServerInstanceType;
    return this;
  }

  /**
   * Update replication configuration Replication Server instance type request.
   * @return replicationServerInstanceType
   */
  @javax.annotation.Nullable
  public String getReplicationServerInstanceType() {
    return replicationServerInstanceType;
  }

  public void setReplicationServerInstanceType(String replicationServerInstanceType) {
    this.replicationServerInstanceType = replicationServerInstanceType;
  }


  public UpdateReplicationConfigurationRequest replicationServersSecurityGroupsIDs(List<String> replicationServersSecurityGroupsIDs) {
    this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
    return this;
  }

  public UpdateReplicationConfigurationRequest addReplicationServersSecurityGroupsIDsItem(String replicationServersSecurityGroupsIDsItem) {
    if (this.replicationServersSecurityGroupsIDs == null) {
      this.replicationServersSecurityGroupsIDs = new ArrayList<>();
    }
    this.replicationServersSecurityGroupsIDs.add(replicationServersSecurityGroupsIDsItem);
    return this;
  }

  /**
   * Update replication configuration Replication Server Security Groups IDs request.
   * @return replicationServersSecurityGroupsIDs
   */
  @javax.annotation.Nullable
  public List<String> getReplicationServersSecurityGroupsIDs() {
    return replicationServersSecurityGroupsIDs;
  }

  public void setReplicationServersSecurityGroupsIDs(List<String> replicationServersSecurityGroupsIDs) {
    this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
  }


  public UpdateReplicationConfigurationRequest sourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
    return this;
  }

  /**
   * Update replication configuration Source Server ID request.
   * @return sourceServerID
   */
  @javax.annotation.Nonnull
  public String getSourceServerID() {
    return sourceServerID;
  }

  public void setSourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
  }


  public UpdateReplicationConfigurationRequest stagingAreaSubnetId(String stagingAreaSubnetId) {
    this.stagingAreaSubnetId = stagingAreaSubnetId;
    return this;
  }

  /**
   * Update replication configuration Staging Area subnet request.
   * @return stagingAreaSubnetId
   */
  @javax.annotation.Nullable
  public String getStagingAreaSubnetId() {
    return stagingAreaSubnetId;
  }

  public void setStagingAreaSubnetId(String stagingAreaSubnetId) {
    this.stagingAreaSubnetId = stagingAreaSubnetId;
  }


  public UpdateReplicationConfigurationRequest stagingAreaTags(Map<String, String> stagingAreaTags) {
    this.stagingAreaTags = stagingAreaTags;
    return this;
  }

  public UpdateReplicationConfigurationRequest putStagingAreaTagsItem(String key, String stagingAreaTagsItem) {
    if (this.stagingAreaTags == null) {
      this.stagingAreaTags = new HashMap<>();
    }
    this.stagingAreaTags.put(key, stagingAreaTagsItem);
    return this;
  }

  /**
   * Update replication configuration Staging Area Tags request.
   * @return stagingAreaTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getStagingAreaTags() {
    return stagingAreaTags;
  }

  public void setStagingAreaTags(Map<String, String> stagingAreaTags) {
    this.stagingAreaTags = stagingAreaTags;
  }


  public UpdateReplicationConfigurationRequest useDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
    this.useDedicatedReplicationServer = useDedicatedReplicationServer;
    return this;
  }

  /**
   * Update replication configuration use dedicated Replication Server request.
   * @return useDedicatedReplicationServer
   */
  @javax.annotation.Nullable
  public Boolean getUseDedicatedReplicationServer() {
    return useDedicatedReplicationServer;
  }

  public void setUseDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
    this.useDedicatedReplicationServer = useDedicatedReplicationServer;
  }


  public UpdateReplicationConfigurationRequest useFipsEndpoint(Boolean useFipsEndpoint) {
    this.useFipsEndpoint = useFipsEndpoint;
    return this;
  }

  /**
   * Update replication configuration use Fips Endpoint.
   * @return useFipsEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getUseFipsEndpoint() {
    return useFipsEndpoint;
  }

  public void setUseFipsEndpoint(Boolean useFipsEndpoint) {
    this.useFipsEndpoint = useFipsEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateReplicationConfigurationRequest updateReplicationConfigurationRequest = (UpdateReplicationConfigurationRequest) o;
    return Objects.equals(this.accountID, updateReplicationConfigurationRequest.accountID) &&
        Objects.equals(this.associateDefaultSecurityGroup, updateReplicationConfigurationRequest.associateDefaultSecurityGroup) &&
        Objects.equals(this.bandwidthThrottling, updateReplicationConfigurationRequest.bandwidthThrottling) &&
        Objects.equals(this.createPublicIP, updateReplicationConfigurationRequest.createPublicIP) &&
        Objects.equals(this.dataPlaneRouting, updateReplicationConfigurationRequest.dataPlaneRouting) &&
        Objects.equals(this.defaultLargeStagingDiskType, updateReplicationConfigurationRequest.defaultLargeStagingDiskType) &&
        Objects.equals(this.ebsEncryption, updateReplicationConfigurationRequest.ebsEncryption) &&
        Objects.equals(this.ebsEncryptionKeyArn, updateReplicationConfigurationRequest.ebsEncryptionKeyArn) &&
        Objects.equals(this.name, updateReplicationConfigurationRequest.name) &&
        Objects.equals(this.replicatedDisks, updateReplicationConfigurationRequest.replicatedDisks) &&
        Objects.equals(this.replicationServerInstanceType, updateReplicationConfigurationRequest.replicationServerInstanceType) &&
        Objects.equals(this.replicationServersSecurityGroupsIDs, updateReplicationConfigurationRequest.replicationServersSecurityGroupsIDs) &&
        Objects.equals(this.sourceServerID, updateReplicationConfigurationRequest.sourceServerID) &&
        Objects.equals(this.stagingAreaSubnetId, updateReplicationConfigurationRequest.stagingAreaSubnetId) &&
        Objects.equals(this.stagingAreaTags, updateReplicationConfigurationRequest.stagingAreaTags) &&
        Objects.equals(this.useDedicatedReplicationServer, updateReplicationConfigurationRequest.useDedicatedReplicationServer) &&
        Objects.equals(this.useFipsEndpoint, updateReplicationConfigurationRequest.useFipsEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountID, associateDefaultSecurityGroup, bandwidthThrottling, createPublicIP, dataPlaneRouting, defaultLargeStagingDiskType, ebsEncryption, ebsEncryptionKeyArn, name, replicatedDisks, replicationServerInstanceType, replicationServersSecurityGroupsIDs, sourceServerID, stagingAreaSubnetId, stagingAreaTags, useDedicatedReplicationServer, useFipsEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateReplicationConfigurationRequest {\n");
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    associateDefaultSecurityGroup: ").append(toIndentedString(associateDefaultSecurityGroup)).append("\n");
    sb.append("    bandwidthThrottling: ").append(toIndentedString(bandwidthThrottling)).append("\n");
    sb.append("    createPublicIP: ").append(toIndentedString(createPublicIP)).append("\n");
    sb.append("    dataPlaneRouting: ").append(toIndentedString(dataPlaneRouting)).append("\n");
    sb.append("    defaultLargeStagingDiskType: ").append(toIndentedString(defaultLargeStagingDiskType)).append("\n");
    sb.append("    ebsEncryption: ").append(toIndentedString(ebsEncryption)).append("\n");
    sb.append("    ebsEncryptionKeyArn: ").append(toIndentedString(ebsEncryptionKeyArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    replicatedDisks: ").append(toIndentedString(replicatedDisks)).append("\n");
    sb.append("    replicationServerInstanceType: ").append(toIndentedString(replicationServerInstanceType)).append("\n");
    sb.append("    replicationServersSecurityGroupsIDs: ").append(toIndentedString(replicationServersSecurityGroupsIDs)).append("\n");
    sb.append("    sourceServerID: ").append(toIndentedString(sourceServerID)).append("\n");
    sb.append("    stagingAreaSubnetId: ").append(toIndentedString(stagingAreaSubnetId)).append("\n");
    sb.append("    stagingAreaTags: ").append(toIndentedString(stagingAreaTags)).append("\n");
    sb.append("    useDedicatedReplicationServer: ").append(toIndentedString(useDedicatedReplicationServer)).append("\n");
    sb.append("    useFipsEndpoint: ").append(toIndentedString(useFipsEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountID");
    openapiFields.add("associateDefaultSecurityGroup");
    openapiFields.add("bandwidthThrottling");
    openapiFields.add("createPublicIP");
    openapiFields.add("dataPlaneRouting");
    openapiFields.add("defaultLargeStagingDiskType");
    openapiFields.add("ebsEncryption");
    openapiFields.add("ebsEncryptionKeyArn");
    openapiFields.add("name");
    openapiFields.add("replicatedDisks");
    openapiFields.add("replicationServerInstanceType");
    openapiFields.add("replicationServersSecurityGroupsIDs");
    openapiFields.add("sourceServerID");
    openapiFields.add("stagingAreaSubnetId");
    openapiFields.add("stagingAreaTags");
    openapiFields.add("useDedicatedReplicationServer");
    openapiFields.add("useFipsEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceServerID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateReplicationConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateReplicationConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateReplicationConfigurationRequest is not found in the empty JSON string", UpdateReplicationConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateReplicationConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateReplicationConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateReplicationConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountID") != null && !jsonObj.get("accountID").isJsonNull()) && !jsonObj.get("accountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountID").toString()));
      }
      if ((jsonObj.get("dataPlaneRouting") != null && !jsonObj.get("dataPlaneRouting").isJsonNull()) && !jsonObj.get("dataPlaneRouting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPlaneRouting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPlaneRouting").toString()));
      }
      // validate the optional field `dataPlaneRouting`
      if (jsonObj.get("dataPlaneRouting") != null && !jsonObj.get("dataPlaneRouting").isJsonNull()) {
        DataPlaneRoutingEnum.validateJsonElement(jsonObj.get("dataPlaneRouting"));
      }
      if ((jsonObj.get("defaultLargeStagingDiskType") != null && !jsonObj.get("defaultLargeStagingDiskType").isJsonNull()) && !jsonObj.get("defaultLargeStagingDiskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLargeStagingDiskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLargeStagingDiskType").toString()));
      }
      // validate the optional field `defaultLargeStagingDiskType`
      if (jsonObj.get("defaultLargeStagingDiskType") != null && !jsonObj.get("defaultLargeStagingDiskType").isJsonNull()) {
        DefaultLargeStagingDiskTypeEnum.validateJsonElement(jsonObj.get("defaultLargeStagingDiskType"));
      }
      if ((jsonObj.get("ebsEncryption") != null && !jsonObj.get("ebsEncryption").isJsonNull()) && !jsonObj.get("ebsEncryption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ebsEncryption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ebsEncryption").toString()));
      }
      // validate the optional field `ebsEncryption`
      if (jsonObj.get("ebsEncryption") != null && !jsonObj.get("ebsEncryption").isJsonNull()) {
        EbsEncryptionEnum.validateJsonElement(jsonObj.get("ebsEncryption"));
      }
      if ((jsonObj.get("ebsEncryptionKeyArn") != null && !jsonObj.get("ebsEncryptionKeyArn").isJsonNull()) && !jsonObj.get("ebsEncryptionKeyArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ebsEncryptionKeyArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ebsEncryptionKeyArn").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("replicatedDisks") != null && !jsonObj.get("replicatedDisks").isJsonNull()) {
        JsonArray jsonArrayreplicatedDisks = jsonObj.getAsJsonArray("replicatedDisks");
        if (jsonArrayreplicatedDisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("replicatedDisks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `replicatedDisks` to be an array in the JSON string but got `%s`", jsonObj.get("replicatedDisks").toString()));
          }

          // validate the optional field `replicatedDisks` (array)
          for (int i = 0; i < jsonArrayreplicatedDisks.size(); i++) {
            ReplicationConfigurationReplicatedDisk.validateJsonElement(jsonArrayreplicatedDisks.get(i));
          };
        }
      }
      if ((jsonObj.get("replicationServerInstanceType") != null && !jsonObj.get("replicationServerInstanceType").isJsonNull()) && !jsonObj.get("replicationServerInstanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationServerInstanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationServerInstanceType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("replicationServersSecurityGroupsIDs") != null && !jsonObj.get("replicationServersSecurityGroupsIDs").isJsonNull() && !jsonObj.get("replicationServersSecurityGroupsIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationServersSecurityGroupsIDs` to be an array in the JSON string but got `%s`", jsonObj.get("replicationServersSecurityGroupsIDs").toString()));
      }
      if (!jsonObj.get("sourceServerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceServerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceServerID").toString()));
      }
      if ((jsonObj.get("stagingAreaSubnetId") != null && !jsonObj.get("stagingAreaSubnetId").isJsonNull()) && !jsonObj.get("stagingAreaSubnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stagingAreaSubnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stagingAreaSubnetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateReplicationConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateReplicationConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateReplicationConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateReplicationConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateReplicationConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateReplicationConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateReplicationConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateReplicationConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateReplicationConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateReplicationConfigurationRequest
   */
  public static UpdateReplicationConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateReplicationConfigurationRequest.class);
  }

  /**
   * Convert an instance of UpdateReplicationConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

