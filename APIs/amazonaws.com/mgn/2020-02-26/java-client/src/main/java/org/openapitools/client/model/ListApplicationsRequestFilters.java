/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListApplicationsRequestFilters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListApplicationsRequestFilters {
  public static final String SERIALIZED_NAME_APPLICATION_I_DS = "applicationIDs";
  @SerializedName(SERIALIZED_NAME_APPLICATION_I_DS)
  private List applicationIDs;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_WAVE_I_DS = "waveIDs";
  @SerializedName(SERIALIZED_NAME_WAVE_I_DS)
  private List waveIDs;

  public ListApplicationsRequestFilters() {
  }

  public ListApplicationsRequestFilters applicationIDs(List applicationIDs) {
    this.applicationIDs = applicationIDs;
    return this;
  }

  /**
   * Get applicationIDs
   * @return applicationIDs
   */
  @javax.annotation.Nullable
  public List getApplicationIDs() {
    return applicationIDs;
  }

  public void setApplicationIDs(List applicationIDs) {
    this.applicationIDs = applicationIDs;
  }


  public ListApplicationsRequestFilters isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Get isArchived
   * @return isArchived
   */
  @javax.annotation.Nullable
  public Boolean getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public ListApplicationsRequestFilters waveIDs(List waveIDs) {
    this.waveIDs = waveIDs;
    return this;
  }

  /**
   * Get waveIDs
   * @return waveIDs
   */
  @javax.annotation.Nullable
  public List getWaveIDs() {
    return waveIDs;
  }

  public void setWaveIDs(List waveIDs) {
    this.waveIDs = waveIDs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListApplicationsRequestFilters listApplicationsRequestFilters = (ListApplicationsRequestFilters) o;
    return Objects.equals(this.applicationIDs, listApplicationsRequestFilters.applicationIDs) &&
        Objects.equals(this.isArchived, listApplicationsRequestFilters.isArchived) &&
        Objects.equals(this.waveIDs, listApplicationsRequestFilters.waveIDs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationIDs, isArchived, waveIDs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListApplicationsRequestFilters {\n");
    sb.append("    applicationIDs: ").append(toIndentedString(applicationIDs)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    waveIDs: ").append(toIndentedString(waveIDs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationIDs");
    openapiFields.add("isArchived");
    openapiFields.add("waveIDs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListApplicationsRequestFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListApplicationsRequestFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListApplicationsRequestFilters is not found in the empty JSON string", ListApplicationsRequestFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListApplicationsRequestFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListApplicationsRequestFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicationIDs`
      if (jsonObj.get("applicationIDs") != null && !jsonObj.get("applicationIDs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("applicationIDs"));
      }
      // validate the optional field `isArchived`
      if (jsonObj.get("isArchived") != null && !jsonObj.get("isArchived").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isArchived"));
      }
      // validate the optional field `waveIDs`
      if (jsonObj.get("waveIDs") != null && !jsonObj.get("waveIDs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("waveIDs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListApplicationsRequestFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListApplicationsRequestFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListApplicationsRequestFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListApplicationsRequestFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<ListApplicationsRequestFilters>() {
           @Override
           public void write(JsonWriter out, ListApplicationsRequestFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListApplicationsRequestFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListApplicationsRequestFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListApplicationsRequestFilters
   * @throws IOException if the JSON string is invalid with respect to ListApplicationsRequestFilters
   */
  public static ListApplicationsRequestFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListApplicationsRequestFilters.class);
  }

  /**
   * Convert an instance of ListApplicationsRequestFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

