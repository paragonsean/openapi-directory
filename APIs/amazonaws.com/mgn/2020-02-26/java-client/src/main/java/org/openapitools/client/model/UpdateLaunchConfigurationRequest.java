/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateLaunchConfigurationTemplateRequestLicensing;
import org.openapitools.client.model.CreateLaunchConfigurationTemplateRequestPostLaunchActions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLaunchConfigurationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLaunchConfigurationRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_I_D = "accountID";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_I_D)
  private String accountID;

  /**
   * Update Launch configuration boot mode request.
   */
  @JsonAdapter(BootModeEnum.Adapter.class)
  public enum BootModeEnum {
    LEGACY_BIOS("LEGACY_BIOS"),
    
    UEFI("UEFI");

    private String value;

    BootModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BootModeEnum fromValue(String value) {
      for (BootModeEnum b : BootModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BootModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BootModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BootModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BootModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BootModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BOOT_MODE = "bootMode";
  @SerializedName(SERIALIZED_NAME_BOOT_MODE)
  private BootModeEnum bootMode;

  public static final String SERIALIZED_NAME_COPY_PRIVATE_IP = "copyPrivateIp";
  @SerializedName(SERIALIZED_NAME_COPY_PRIVATE_IP)
  private Boolean copyPrivateIp;

  public static final String SERIALIZED_NAME_COPY_TAGS = "copyTags";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS)
  private Boolean copyTags;

  public static final String SERIALIZED_NAME_ENABLE_MAP_AUTO_TAGGING = "enableMapAutoTagging";
  @SerializedName(SERIALIZED_NAME_ENABLE_MAP_AUTO_TAGGING)
  private Boolean enableMapAutoTagging;

  /**
   * Update Launch configuration launch disposition request.
   */
  @JsonAdapter(LaunchDispositionEnum.Adapter.class)
  public enum LaunchDispositionEnum {
    STOPPED("STOPPED"),
    
    STARTED("STARTED");

    private String value;

    LaunchDispositionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LaunchDispositionEnum fromValue(String value) {
      for (LaunchDispositionEnum b : LaunchDispositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LaunchDispositionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LaunchDispositionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LaunchDispositionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LaunchDispositionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LaunchDispositionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LAUNCH_DISPOSITION = "launchDisposition";
  @SerializedName(SERIALIZED_NAME_LAUNCH_DISPOSITION)
  private LaunchDispositionEnum launchDisposition;

  public static final String SERIALIZED_NAME_LICENSING = "licensing";
  @SerializedName(SERIALIZED_NAME_LICENSING)
  private CreateLaunchConfigurationTemplateRequestLicensing licensing;

  public static final String SERIALIZED_NAME_MAP_AUTO_TAGGING_MPE_I_D = "mapAutoTaggingMpeID";
  @SerializedName(SERIALIZED_NAME_MAP_AUTO_TAGGING_MPE_I_D)
  private String mapAutoTaggingMpeID;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POST_LAUNCH_ACTIONS = "postLaunchActions";
  @SerializedName(SERIALIZED_NAME_POST_LAUNCH_ACTIONS)
  private CreateLaunchConfigurationTemplateRequestPostLaunchActions postLaunchActions;

  public static final String SERIALIZED_NAME_SOURCE_SERVER_I_D = "sourceServerID";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVER_I_D)
  private String sourceServerID;

  /**
   * Update Launch configuration Target instance right sizing request.
   */
  @JsonAdapter(TargetInstanceTypeRightSizingMethodEnum.Adapter.class)
  public enum TargetInstanceTypeRightSizingMethodEnum {
    NONE("NONE"),
    
    BASIC("BASIC");

    private String value;

    TargetInstanceTypeRightSizingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetInstanceTypeRightSizingMethodEnum fromValue(String value) {
      for (TargetInstanceTypeRightSizingMethodEnum b : TargetInstanceTypeRightSizingMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetInstanceTypeRightSizingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetInstanceTypeRightSizingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetInstanceTypeRightSizingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetInstanceTypeRightSizingMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetInstanceTypeRightSizingMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_INSTANCE_TYPE_RIGHT_SIZING_METHOD = "targetInstanceTypeRightSizingMethod";
  @SerializedName(SERIALIZED_NAME_TARGET_INSTANCE_TYPE_RIGHT_SIZING_METHOD)
  private TargetInstanceTypeRightSizingMethodEnum targetInstanceTypeRightSizingMethod;

  public UpdateLaunchConfigurationRequest() {
  }

  public UpdateLaunchConfigurationRequest accountID(String accountID) {
    this.accountID = accountID;
    return this;
  }

  /**
   * Update Launch configuration Account ID.
   * @return accountID
   */
  @javax.annotation.Nullable
  public String getAccountID() {
    return accountID;
  }

  public void setAccountID(String accountID) {
    this.accountID = accountID;
  }


  public UpdateLaunchConfigurationRequest bootMode(BootModeEnum bootMode) {
    this.bootMode = bootMode;
    return this;
  }

  /**
   * Update Launch configuration boot mode request.
   * @return bootMode
   */
  @javax.annotation.Nullable
  public BootModeEnum getBootMode() {
    return bootMode;
  }

  public void setBootMode(BootModeEnum bootMode) {
    this.bootMode = bootMode;
  }


  public UpdateLaunchConfigurationRequest copyPrivateIp(Boolean copyPrivateIp) {
    this.copyPrivateIp = copyPrivateIp;
    return this;
  }

  /**
   * Update Launch configuration copy Private IP request.
   * @return copyPrivateIp
   */
  @javax.annotation.Nullable
  public Boolean getCopyPrivateIp() {
    return copyPrivateIp;
  }

  public void setCopyPrivateIp(Boolean copyPrivateIp) {
    this.copyPrivateIp = copyPrivateIp;
  }


  public UpdateLaunchConfigurationRequest copyTags(Boolean copyTags) {
    this.copyTags = copyTags;
    return this;
  }

  /**
   * Update Launch configuration copy Tags request.
   * @return copyTags
   */
  @javax.annotation.Nullable
  public Boolean getCopyTags() {
    return copyTags;
  }

  public void setCopyTags(Boolean copyTags) {
    this.copyTags = copyTags;
  }


  public UpdateLaunchConfigurationRequest enableMapAutoTagging(Boolean enableMapAutoTagging) {
    this.enableMapAutoTagging = enableMapAutoTagging;
    return this;
  }

  /**
   * Enable map auto tagging.
   * @return enableMapAutoTagging
   */
  @javax.annotation.Nullable
  public Boolean getEnableMapAutoTagging() {
    return enableMapAutoTagging;
  }

  public void setEnableMapAutoTagging(Boolean enableMapAutoTagging) {
    this.enableMapAutoTagging = enableMapAutoTagging;
  }


  public UpdateLaunchConfigurationRequest launchDisposition(LaunchDispositionEnum launchDisposition) {
    this.launchDisposition = launchDisposition;
    return this;
  }

  /**
   * Update Launch configuration launch disposition request.
   * @return launchDisposition
   */
  @javax.annotation.Nullable
  public LaunchDispositionEnum getLaunchDisposition() {
    return launchDisposition;
  }

  public void setLaunchDisposition(LaunchDispositionEnum launchDisposition) {
    this.launchDisposition = launchDisposition;
  }


  public UpdateLaunchConfigurationRequest licensing(CreateLaunchConfigurationTemplateRequestLicensing licensing) {
    this.licensing = licensing;
    return this;
  }

  /**
   * Get licensing
   * @return licensing
   */
  @javax.annotation.Nullable
  public CreateLaunchConfigurationTemplateRequestLicensing getLicensing() {
    return licensing;
  }

  public void setLicensing(CreateLaunchConfigurationTemplateRequestLicensing licensing) {
    this.licensing = licensing;
  }


  public UpdateLaunchConfigurationRequest mapAutoTaggingMpeID(String mapAutoTaggingMpeID) {
    this.mapAutoTaggingMpeID = mapAutoTaggingMpeID;
    return this;
  }

  /**
   * Launch configuration map auto tagging MPE ID.
   * @return mapAutoTaggingMpeID
   */
  @javax.annotation.Nullable
  public String getMapAutoTaggingMpeID() {
    return mapAutoTaggingMpeID;
  }

  public void setMapAutoTaggingMpeID(String mapAutoTaggingMpeID) {
    this.mapAutoTaggingMpeID = mapAutoTaggingMpeID;
  }


  public UpdateLaunchConfigurationRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Update Launch configuration name request.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateLaunchConfigurationRequest postLaunchActions(CreateLaunchConfigurationTemplateRequestPostLaunchActions postLaunchActions) {
    this.postLaunchActions = postLaunchActions;
    return this;
  }

  /**
   * Get postLaunchActions
   * @return postLaunchActions
   */
  @javax.annotation.Nullable
  public CreateLaunchConfigurationTemplateRequestPostLaunchActions getPostLaunchActions() {
    return postLaunchActions;
  }

  public void setPostLaunchActions(CreateLaunchConfigurationTemplateRequestPostLaunchActions postLaunchActions) {
    this.postLaunchActions = postLaunchActions;
  }


  public UpdateLaunchConfigurationRequest sourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
    return this;
  }

  /**
   * Update Launch configuration by Source Server ID request.
   * @return sourceServerID
   */
  @javax.annotation.Nonnull
  public String getSourceServerID() {
    return sourceServerID;
  }

  public void setSourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
  }


  public UpdateLaunchConfigurationRequest targetInstanceTypeRightSizingMethod(TargetInstanceTypeRightSizingMethodEnum targetInstanceTypeRightSizingMethod) {
    this.targetInstanceTypeRightSizingMethod = targetInstanceTypeRightSizingMethod;
    return this;
  }

  /**
   * Update Launch configuration Target instance right sizing request.
   * @return targetInstanceTypeRightSizingMethod
   */
  @javax.annotation.Nullable
  public TargetInstanceTypeRightSizingMethodEnum getTargetInstanceTypeRightSizingMethod() {
    return targetInstanceTypeRightSizingMethod;
  }

  public void setTargetInstanceTypeRightSizingMethod(TargetInstanceTypeRightSizingMethodEnum targetInstanceTypeRightSizingMethod) {
    this.targetInstanceTypeRightSizingMethod = targetInstanceTypeRightSizingMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLaunchConfigurationRequest updateLaunchConfigurationRequest = (UpdateLaunchConfigurationRequest) o;
    return Objects.equals(this.accountID, updateLaunchConfigurationRequest.accountID) &&
        Objects.equals(this.bootMode, updateLaunchConfigurationRequest.bootMode) &&
        Objects.equals(this.copyPrivateIp, updateLaunchConfigurationRequest.copyPrivateIp) &&
        Objects.equals(this.copyTags, updateLaunchConfigurationRequest.copyTags) &&
        Objects.equals(this.enableMapAutoTagging, updateLaunchConfigurationRequest.enableMapAutoTagging) &&
        Objects.equals(this.launchDisposition, updateLaunchConfigurationRequest.launchDisposition) &&
        Objects.equals(this.licensing, updateLaunchConfigurationRequest.licensing) &&
        Objects.equals(this.mapAutoTaggingMpeID, updateLaunchConfigurationRequest.mapAutoTaggingMpeID) &&
        Objects.equals(this.name, updateLaunchConfigurationRequest.name) &&
        Objects.equals(this.postLaunchActions, updateLaunchConfigurationRequest.postLaunchActions) &&
        Objects.equals(this.sourceServerID, updateLaunchConfigurationRequest.sourceServerID) &&
        Objects.equals(this.targetInstanceTypeRightSizingMethod, updateLaunchConfigurationRequest.targetInstanceTypeRightSizingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountID, bootMode, copyPrivateIp, copyTags, enableMapAutoTagging, launchDisposition, licensing, mapAutoTaggingMpeID, name, postLaunchActions, sourceServerID, targetInstanceTypeRightSizingMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLaunchConfigurationRequest {\n");
    sb.append("    accountID: ").append(toIndentedString(accountID)).append("\n");
    sb.append("    bootMode: ").append(toIndentedString(bootMode)).append("\n");
    sb.append("    copyPrivateIp: ").append(toIndentedString(copyPrivateIp)).append("\n");
    sb.append("    copyTags: ").append(toIndentedString(copyTags)).append("\n");
    sb.append("    enableMapAutoTagging: ").append(toIndentedString(enableMapAutoTagging)).append("\n");
    sb.append("    launchDisposition: ").append(toIndentedString(launchDisposition)).append("\n");
    sb.append("    licensing: ").append(toIndentedString(licensing)).append("\n");
    sb.append("    mapAutoTaggingMpeID: ").append(toIndentedString(mapAutoTaggingMpeID)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    postLaunchActions: ").append(toIndentedString(postLaunchActions)).append("\n");
    sb.append("    sourceServerID: ").append(toIndentedString(sourceServerID)).append("\n");
    sb.append("    targetInstanceTypeRightSizingMethod: ").append(toIndentedString(targetInstanceTypeRightSizingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountID");
    openapiFields.add("bootMode");
    openapiFields.add("copyPrivateIp");
    openapiFields.add("copyTags");
    openapiFields.add("enableMapAutoTagging");
    openapiFields.add("launchDisposition");
    openapiFields.add("licensing");
    openapiFields.add("mapAutoTaggingMpeID");
    openapiFields.add("name");
    openapiFields.add("postLaunchActions");
    openapiFields.add("sourceServerID");
    openapiFields.add("targetInstanceTypeRightSizingMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourceServerID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLaunchConfigurationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLaunchConfigurationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLaunchConfigurationRequest is not found in the empty JSON string", UpdateLaunchConfigurationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLaunchConfigurationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLaunchConfigurationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateLaunchConfigurationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountID") != null && !jsonObj.get("accountID").isJsonNull()) && !jsonObj.get("accountID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountID").toString()));
      }
      if ((jsonObj.get("bootMode") != null && !jsonObj.get("bootMode").isJsonNull()) && !jsonObj.get("bootMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bootMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bootMode").toString()));
      }
      // validate the optional field `bootMode`
      if (jsonObj.get("bootMode") != null && !jsonObj.get("bootMode").isJsonNull()) {
        BootModeEnum.validateJsonElement(jsonObj.get("bootMode"));
      }
      if ((jsonObj.get("launchDisposition") != null && !jsonObj.get("launchDisposition").isJsonNull()) && !jsonObj.get("launchDisposition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `launchDisposition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("launchDisposition").toString()));
      }
      // validate the optional field `launchDisposition`
      if (jsonObj.get("launchDisposition") != null && !jsonObj.get("launchDisposition").isJsonNull()) {
        LaunchDispositionEnum.validateJsonElement(jsonObj.get("launchDisposition"));
      }
      // validate the optional field `licensing`
      if (jsonObj.get("licensing") != null && !jsonObj.get("licensing").isJsonNull()) {
        CreateLaunchConfigurationTemplateRequestLicensing.validateJsonElement(jsonObj.get("licensing"));
      }
      if ((jsonObj.get("mapAutoTaggingMpeID") != null && !jsonObj.get("mapAutoTaggingMpeID").isJsonNull()) && !jsonObj.get("mapAutoTaggingMpeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapAutoTaggingMpeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapAutoTaggingMpeID").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `postLaunchActions`
      if (jsonObj.get("postLaunchActions") != null && !jsonObj.get("postLaunchActions").isJsonNull()) {
        CreateLaunchConfigurationTemplateRequestPostLaunchActions.validateJsonElement(jsonObj.get("postLaunchActions"));
      }
      if (!jsonObj.get("sourceServerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceServerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceServerID").toString()));
      }
      if ((jsonObj.get("targetInstanceTypeRightSizingMethod") != null && !jsonObj.get("targetInstanceTypeRightSizingMethod").isJsonNull()) && !jsonObj.get("targetInstanceTypeRightSizingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetInstanceTypeRightSizingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetInstanceTypeRightSizingMethod").toString()));
      }
      // validate the optional field `targetInstanceTypeRightSizingMethod`
      if (jsonObj.get("targetInstanceTypeRightSizingMethod") != null && !jsonObj.get("targetInstanceTypeRightSizingMethod").isJsonNull()) {
        TargetInstanceTypeRightSizingMethodEnum.validateJsonElement(jsonObj.get("targetInstanceTypeRightSizingMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLaunchConfigurationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLaunchConfigurationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLaunchConfigurationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLaunchConfigurationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLaunchConfigurationRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLaunchConfigurationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLaunchConfigurationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLaunchConfigurationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLaunchConfigurationRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateLaunchConfigurationRequest
   */
  public static UpdateLaunchConfigurationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLaunchConfigurationRequest.class);
  }

  /**
   * Convert an instance of UpdateLaunchConfigurationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

