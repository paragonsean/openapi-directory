/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExportStatus;
import org.openapitools.client.model.ExportTaskSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartExportResponseExportTask
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartExportResponseExportTask {
  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private String creationDateTime;

  public static final String SERIALIZED_NAME_END_DATE_TIME = "endDateTime";
  @SerializedName(SERIALIZED_NAME_END_DATE_TIME)
  private String endDateTime;

  public static final String SERIALIZED_NAME_EXPORT_I_D = "exportID";
  @SerializedName(SERIALIZED_NAME_EXPORT_I_D)
  private String exportID;

  public static final String SERIALIZED_NAME_PROGRESS_PERCENTAGE = "progressPercentage";
  @SerializedName(SERIALIZED_NAME_PROGRESS_PERCENTAGE)
  private Float progressPercentage;

  public static final String SERIALIZED_NAME_S3_BUCKET = "s3Bucket";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET)
  private String s3Bucket;

  public static final String SERIALIZED_NAME_S3_BUCKET_OWNER = "s3BucketOwner";
  @SerializedName(SERIALIZED_NAME_S3_BUCKET_OWNER)
  private String s3BucketOwner;

  public static final String SERIALIZED_NAME_S3_KEY = "s3Key";
  @SerializedName(SERIALIZED_NAME_S3_KEY)
  private String s3Key;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private ExportStatus status;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private ExportTaskSummary summary;

  public StartExportResponseExportTask() {
  }

  public StartExportResponseExportTask creationDateTime(String creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public String getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(String creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public StartExportResponseExportTask endDateTime(String endDateTime) {
    this.endDateTime = endDateTime;
    return this;
  }

  /**
   * Get endDateTime
   * @return endDateTime
   */
  @javax.annotation.Nullable
  public String getEndDateTime() {
    return endDateTime;
  }

  public void setEndDateTime(String endDateTime) {
    this.endDateTime = endDateTime;
  }


  public StartExportResponseExportTask exportID(String exportID) {
    this.exportID = exportID;
    return this;
  }

  /**
   * Get exportID
   * @return exportID
   */
  @javax.annotation.Nullable
  public String getExportID() {
    return exportID;
  }

  public void setExportID(String exportID) {
    this.exportID = exportID;
  }


  public StartExportResponseExportTask progressPercentage(Float progressPercentage) {
    this.progressPercentage = progressPercentage;
    return this;
  }

  /**
   * Get progressPercentage
   * @return progressPercentage
   */
  @javax.annotation.Nullable
  public Float getProgressPercentage() {
    return progressPercentage;
  }

  public void setProgressPercentage(Float progressPercentage) {
    this.progressPercentage = progressPercentage;
  }


  public StartExportResponseExportTask s3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
    return this;
  }

  /**
   * Get s3Bucket
   * @return s3Bucket
   */
  @javax.annotation.Nullable
  public String getS3Bucket() {
    return s3Bucket;
  }

  public void setS3Bucket(String s3Bucket) {
    this.s3Bucket = s3Bucket;
  }


  public StartExportResponseExportTask s3BucketOwner(String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
    return this;
  }

  /**
   * Get s3BucketOwner
   * @return s3BucketOwner
   */
  @javax.annotation.Nullable
  public String getS3BucketOwner() {
    return s3BucketOwner;
  }

  public void setS3BucketOwner(String s3BucketOwner) {
    this.s3BucketOwner = s3BucketOwner;
  }


  public StartExportResponseExportTask s3Key(String s3Key) {
    this.s3Key = s3Key;
    return this;
  }

  /**
   * Get s3Key
   * @return s3Key
   */
  @javax.annotation.Nullable
  public String getS3Key() {
    return s3Key;
  }

  public void setS3Key(String s3Key) {
    this.s3Key = s3Key;
  }


  public StartExportResponseExportTask status(ExportStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public ExportStatus getStatus() {
    return status;
  }

  public void setStatus(ExportStatus status) {
    this.status = status;
  }


  public StartExportResponseExportTask summary(ExportTaskSummary summary) {
    this.summary = summary;
    return this;
  }

  /**
   * Get summary
   * @return summary
   */
  @javax.annotation.Nullable
  public ExportTaskSummary getSummary() {
    return summary;
  }

  public void setSummary(ExportTaskSummary summary) {
    this.summary = summary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartExportResponseExportTask startExportResponseExportTask = (StartExportResponseExportTask) o;
    return Objects.equals(this.creationDateTime, startExportResponseExportTask.creationDateTime) &&
        Objects.equals(this.endDateTime, startExportResponseExportTask.endDateTime) &&
        Objects.equals(this.exportID, startExportResponseExportTask.exportID) &&
        Objects.equals(this.progressPercentage, startExportResponseExportTask.progressPercentage) &&
        Objects.equals(this.s3Bucket, startExportResponseExportTask.s3Bucket) &&
        Objects.equals(this.s3BucketOwner, startExportResponseExportTask.s3BucketOwner) &&
        Objects.equals(this.s3Key, startExportResponseExportTask.s3Key) &&
        Objects.equals(this.status, startExportResponseExportTask.status) &&
        Objects.equals(this.summary, startExportResponseExportTask.summary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDateTime, endDateTime, exportID, progressPercentage, s3Bucket, s3BucketOwner, s3Key, status, summary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartExportResponseExportTask {\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    endDateTime: ").append(toIndentedString(endDateTime)).append("\n");
    sb.append("    exportID: ").append(toIndentedString(exportID)).append("\n");
    sb.append("    progressPercentage: ").append(toIndentedString(progressPercentage)).append("\n");
    sb.append("    s3Bucket: ").append(toIndentedString(s3Bucket)).append("\n");
    sb.append("    s3BucketOwner: ").append(toIndentedString(s3BucketOwner)).append("\n");
    sb.append("    s3Key: ").append(toIndentedString(s3Key)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDateTime");
    openapiFields.add("endDateTime");
    openapiFields.add("exportID");
    openapiFields.add("progressPercentage");
    openapiFields.add("s3Bucket");
    openapiFields.add("s3BucketOwner");
    openapiFields.add("s3Key");
    openapiFields.add("status");
    openapiFields.add("summary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartExportResponseExportTask
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartExportResponseExportTask.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartExportResponseExportTask is not found in the empty JSON string", StartExportResponseExportTask.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartExportResponseExportTask.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartExportResponseExportTask` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `endDateTime`
      if (jsonObj.get("endDateTime") != null && !jsonObj.get("endDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("endDateTime"));
      }
      // validate the optional field `exportID`
      if (jsonObj.get("exportID") != null && !jsonObj.get("exportID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("exportID"));
      }
      // validate the optional field `progressPercentage`
      if (jsonObj.get("progressPercentage") != null && !jsonObj.get("progressPercentage").isJsonNull()) {
        Float.validateJsonElement(jsonObj.get("progressPercentage"));
      }
      // validate the optional field `s3Bucket`
      if (jsonObj.get("s3Bucket") != null && !jsonObj.get("s3Bucket").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3Bucket"));
      }
      // validate the optional field `s3BucketOwner`
      if (jsonObj.get("s3BucketOwner") != null && !jsonObj.get("s3BucketOwner").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3BucketOwner"));
      }
      // validate the optional field `s3Key`
      if (jsonObj.get("s3Key") != null && !jsonObj.get("s3Key").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("s3Key"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        ExportStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `summary`
      if (jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) {
        ExportTaskSummary.validateJsonElement(jsonObj.get("summary"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartExportResponseExportTask.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartExportResponseExportTask' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartExportResponseExportTask> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartExportResponseExportTask.class));

       return (TypeAdapter<T>) new TypeAdapter<StartExportResponseExportTask>() {
           @Override
           public void write(JsonWriter out, StartExportResponseExportTask value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartExportResponseExportTask read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartExportResponseExportTask given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartExportResponseExportTask
   * @throws IOException if the JSON string is invalid with respect to StartExportResponseExportTask
   */
  public static StartExportResponseExportTask fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartExportResponseExportTask.class);
  }

  /**
   * Convert an instance of StartExportResponseExportTask to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

