/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LifeCycleLastCutover;
import org.openapitools.client.model.LifeCycleLastTest;
import org.openapitools.client.model.LifeCycleState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lifecycle.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LifeCycle {
  public static final String SERIALIZED_NAME_ADDED_TO_SERVICE_DATE_TIME = "addedToServiceDateTime";
  @SerializedName(SERIALIZED_NAME_ADDED_TO_SERVICE_DATE_TIME)
  private String addedToServiceDateTime;

  public static final String SERIALIZED_NAME_ELAPSED_REPLICATION_DURATION = "elapsedReplicationDuration";
  @SerializedName(SERIALIZED_NAME_ELAPSED_REPLICATION_DURATION)
  private String elapsedReplicationDuration;

  public static final String SERIALIZED_NAME_FIRST_BYTE_DATE_TIME = "firstByteDateTime";
  @SerializedName(SERIALIZED_NAME_FIRST_BYTE_DATE_TIME)
  private String firstByteDateTime;

  public static final String SERIALIZED_NAME_LAST_CUTOVER = "lastCutover";
  @SerializedName(SERIALIZED_NAME_LAST_CUTOVER)
  private LifeCycleLastCutover lastCutover;

  public static final String SERIALIZED_NAME_LAST_SEEN_BY_SERVICE_DATE_TIME = "lastSeenByServiceDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_BY_SERVICE_DATE_TIME)
  private String lastSeenByServiceDateTime;

  public static final String SERIALIZED_NAME_LAST_TEST = "lastTest";
  @SerializedName(SERIALIZED_NAME_LAST_TEST)
  private LifeCycleLastTest lastTest;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private LifeCycleState state;

  public LifeCycle() {
  }

  public LifeCycle addedToServiceDateTime(String addedToServiceDateTime) {
    this.addedToServiceDateTime = addedToServiceDateTime;
    return this;
  }

  /**
   * Get addedToServiceDateTime
   * @return addedToServiceDateTime
   */
  @javax.annotation.Nullable
  public String getAddedToServiceDateTime() {
    return addedToServiceDateTime;
  }

  public void setAddedToServiceDateTime(String addedToServiceDateTime) {
    this.addedToServiceDateTime = addedToServiceDateTime;
  }


  public LifeCycle elapsedReplicationDuration(String elapsedReplicationDuration) {
    this.elapsedReplicationDuration = elapsedReplicationDuration;
    return this;
  }

  /**
   * Get elapsedReplicationDuration
   * @return elapsedReplicationDuration
   */
  @javax.annotation.Nullable
  public String getElapsedReplicationDuration() {
    return elapsedReplicationDuration;
  }

  public void setElapsedReplicationDuration(String elapsedReplicationDuration) {
    this.elapsedReplicationDuration = elapsedReplicationDuration;
  }


  public LifeCycle firstByteDateTime(String firstByteDateTime) {
    this.firstByteDateTime = firstByteDateTime;
    return this;
  }

  /**
   * Get firstByteDateTime
   * @return firstByteDateTime
   */
  @javax.annotation.Nullable
  public String getFirstByteDateTime() {
    return firstByteDateTime;
  }

  public void setFirstByteDateTime(String firstByteDateTime) {
    this.firstByteDateTime = firstByteDateTime;
  }


  public LifeCycle lastCutover(LifeCycleLastCutover lastCutover) {
    this.lastCutover = lastCutover;
    return this;
  }

  /**
   * Get lastCutover
   * @return lastCutover
   */
  @javax.annotation.Nullable
  public LifeCycleLastCutover getLastCutover() {
    return lastCutover;
  }

  public void setLastCutover(LifeCycleLastCutover lastCutover) {
    this.lastCutover = lastCutover;
  }


  public LifeCycle lastSeenByServiceDateTime(String lastSeenByServiceDateTime) {
    this.lastSeenByServiceDateTime = lastSeenByServiceDateTime;
    return this;
  }

  /**
   * Get lastSeenByServiceDateTime
   * @return lastSeenByServiceDateTime
   */
  @javax.annotation.Nullable
  public String getLastSeenByServiceDateTime() {
    return lastSeenByServiceDateTime;
  }

  public void setLastSeenByServiceDateTime(String lastSeenByServiceDateTime) {
    this.lastSeenByServiceDateTime = lastSeenByServiceDateTime;
  }


  public LifeCycle lastTest(LifeCycleLastTest lastTest) {
    this.lastTest = lastTest;
    return this;
  }

  /**
   * Get lastTest
   * @return lastTest
   */
  @javax.annotation.Nullable
  public LifeCycleLastTest getLastTest() {
    return lastTest;
  }

  public void setLastTest(LifeCycleLastTest lastTest) {
    this.lastTest = lastTest;
  }


  public LifeCycle state(LifeCycleState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public LifeCycleState getState() {
    return state;
  }

  public void setState(LifeCycleState state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LifeCycle lifeCycle = (LifeCycle) o;
    return Objects.equals(this.addedToServiceDateTime, lifeCycle.addedToServiceDateTime) &&
        Objects.equals(this.elapsedReplicationDuration, lifeCycle.elapsedReplicationDuration) &&
        Objects.equals(this.firstByteDateTime, lifeCycle.firstByteDateTime) &&
        Objects.equals(this.lastCutover, lifeCycle.lastCutover) &&
        Objects.equals(this.lastSeenByServiceDateTime, lifeCycle.lastSeenByServiceDateTime) &&
        Objects.equals(this.lastTest, lifeCycle.lastTest) &&
        Objects.equals(this.state, lifeCycle.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedToServiceDateTime, elapsedReplicationDuration, firstByteDateTime, lastCutover, lastSeenByServiceDateTime, lastTest, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LifeCycle {\n");
    sb.append("    addedToServiceDateTime: ").append(toIndentedString(addedToServiceDateTime)).append("\n");
    sb.append("    elapsedReplicationDuration: ").append(toIndentedString(elapsedReplicationDuration)).append("\n");
    sb.append("    firstByteDateTime: ").append(toIndentedString(firstByteDateTime)).append("\n");
    sb.append("    lastCutover: ").append(toIndentedString(lastCutover)).append("\n");
    sb.append("    lastSeenByServiceDateTime: ").append(toIndentedString(lastSeenByServiceDateTime)).append("\n");
    sb.append("    lastTest: ").append(toIndentedString(lastTest)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addedToServiceDateTime");
    openapiFields.add("elapsedReplicationDuration");
    openapiFields.add("firstByteDateTime");
    openapiFields.add("lastCutover");
    openapiFields.add("lastSeenByServiceDateTime");
    openapiFields.add("lastTest");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LifeCycle
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LifeCycle.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LifeCycle is not found in the empty JSON string", LifeCycle.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LifeCycle.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LifeCycle` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `addedToServiceDateTime`
      if (jsonObj.get("addedToServiceDateTime") != null && !jsonObj.get("addedToServiceDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("addedToServiceDateTime"));
      }
      // validate the optional field `elapsedReplicationDuration`
      if (jsonObj.get("elapsedReplicationDuration") != null && !jsonObj.get("elapsedReplicationDuration").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("elapsedReplicationDuration"));
      }
      // validate the optional field `firstByteDateTime`
      if (jsonObj.get("firstByteDateTime") != null && !jsonObj.get("firstByteDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("firstByteDateTime"));
      }
      // validate the optional field `lastCutover`
      if (jsonObj.get("lastCutover") != null && !jsonObj.get("lastCutover").isJsonNull()) {
        LifeCycleLastCutover.validateJsonElement(jsonObj.get("lastCutover"));
      }
      // validate the optional field `lastSeenByServiceDateTime`
      if (jsonObj.get("lastSeenByServiceDateTime") != null && !jsonObj.get("lastSeenByServiceDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastSeenByServiceDateTime"));
      }
      // validate the optional field `lastTest`
      if (jsonObj.get("lastTest") != null && !jsonObj.get("lastTest").isJsonNull()) {
        LifeCycleLastTest.validateJsonElement(jsonObj.get("lastTest"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        LifeCycleState.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LifeCycle.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LifeCycle' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LifeCycle> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LifeCycle.class));

       return (TypeAdapter<T>) new TypeAdapter<LifeCycle>() {
           @Override
           public void write(JsonWriter out, LifeCycle value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LifeCycle read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LifeCycle given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LifeCycle
   * @throws IOException if the JSON string is invalid with respect to LifeCycle
   */
  public static LifeCycle fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LifeCycle.class);
  }

  /**
   * Convert an instance of LifeCycle to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

