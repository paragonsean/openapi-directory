/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ReplicationType;
import org.openapitools.client.model.SourceServerDataReplicationInfo;
import org.openapitools.client.model.SourceServerLaunchedInstance;
import org.openapitools.client.model.SourceServerLifeCycle;
import org.openapitools.client.model.SourceServerSourceProperties;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SourceServer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SourceServer {
  public static final String SERIALIZED_NAME_APPLICATION_I_D = "applicationID";
  @SerializedName(SERIALIZED_NAME_APPLICATION_I_D)
  private String applicationID;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_DATA_REPLICATION_INFO = "dataReplicationInfo";
  @SerializedName(SERIALIZED_NAME_DATA_REPLICATION_INFO)
  private SourceServerDataReplicationInfo dataReplicationInfo;

  public static final String SERIALIZED_NAME_FQDN_FOR_ACTION_FRAMEWORK = "fqdnForActionFramework";
  @SerializedName(SERIALIZED_NAME_FQDN_FOR_ACTION_FRAMEWORK)
  private String fqdnForActionFramework;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_LAUNCHED_INSTANCE = "launchedInstance";
  @SerializedName(SERIALIZED_NAME_LAUNCHED_INSTANCE)
  private SourceServerLaunchedInstance launchedInstance;

  public static final String SERIALIZED_NAME_LIFE_CYCLE = "lifeCycle";
  @SerializedName(SERIALIZED_NAME_LIFE_CYCLE)
  private SourceServerLifeCycle lifeCycle;

  public static final String SERIALIZED_NAME_REPLICATION_TYPE = "replicationType";
  @SerializedName(SERIALIZED_NAME_REPLICATION_TYPE)
  private ReplicationType replicationType;

  public static final String SERIALIZED_NAME_SOURCE_PROPERTIES = "sourceProperties";
  @SerializedName(SERIALIZED_NAME_SOURCE_PROPERTIES)
  private SourceServerSourceProperties sourceProperties;

  public static final String SERIALIZED_NAME_SOURCE_SERVER_I_D = "sourceServerID";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVER_I_D)
  private String sourceServerID;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_USER_PROVIDED_I_D = "userProvidedID";
  @SerializedName(SERIALIZED_NAME_USER_PROVIDED_I_D)
  private String userProvidedID;

  public static final String SERIALIZED_NAME_VCENTER_CLIENT_I_D = "vcenterClientID";
  @SerializedName(SERIALIZED_NAME_VCENTER_CLIENT_I_D)
  private String vcenterClientID;

  public SourceServer() {
  }

  public SourceServer applicationID(String applicationID) {
    this.applicationID = applicationID;
    return this;
  }

  /**
   * Get applicationID
   * @return applicationID
   */
  @javax.annotation.Nullable
  public String getApplicationID() {
    return applicationID;
  }

  public void setApplicationID(String applicationID) {
    this.applicationID = applicationID;
  }


  public SourceServer arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public SourceServer dataReplicationInfo(SourceServerDataReplicationInfo dataReplicationInfo) {
    this.dataReplicationInfo = dataReplicationInfo;
    return this;
  }

  /**
   * Get dataReplicationInfo
   * @return dataReplicationInfo
   */
  @javax.annotation.Nullable
  public SourceServerDataReplicationInfo getDataReplicationInfo() {
    return dataReplicationInfo;
  }

  public void setDataReplicationInfo(SourceServerDataReplicationInfo dataReplicationInfo) {
    this.dataReplicationInfo = dataReplicationInfo;
  }


  public SourceServer fqdnForActionFramework(String fqdnForActionFramework) {
    this.fqdnForActionFramework = fqdnForActionFramework;
    return this;
  }

  /**
   * Get fqdnForActionFramework
   * @return fqdnForActionFramework
   */
  @javax.annotation.Nullable
  public String getFqdnForActionFramework() {
    return fqdnForActionFramework;
  }

  public void setFqdnForActionFramework(String fqdnForActionFramework) {
    this.fqdnForActionFramework = fqdnForActionFramework;
  }


  public SourceServer isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Get isArchived
   * @return isArchived
   */
  @javax.annotation.Nullable
  public Boolean getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public SourceServer launchedInstance(SourceServerLaunchedInstance launchedInstance) {
    this.launchedInstance = launchedInstance;
    return this;
  }

  /**
   * Get launchedInstance
   * @return launchedInstance
   */
  @javax.annotation.Nullable
  public SourceServerLaunchedInstance getLaunchedInstance() {
    return launchedInstance;
  }

  public void setLaunchedInstance(SourceServerLaunchedInstance launchedInstance) {
    this.launchedInstance = launchedInstance;
  }


  public SourceServer lifeCycle(SourceServerLifeCycle lifeCycle) {
    this.lifeCycle = lifeCycle;
    return this;
  }

  /**
   * Get lifeCycle
   * @return lifeCycle
   */
  @javax.annotation.Nullable
  public SourceServerLifeCycle getLifeCycle() {
    return lifeCycle;
  }

  public void setLifeCycle(SourceServerLifeCycle lifeCycle) {
    this.lifeCycle = lifeCycle;
  }


  public SourceServer replicationType(ReplicationType replicationType) {
    this.replicationType = replicationType;
    return this;
  }

  /**
   * Get replicationType
   * @return replicationType
   */
  @javax.annotation.Nullable
  public ReplicationType getReplicationType() {
    return replicationType;
  }

  public void setReplicationType(ReplicationType replicationType) {
    this.replicationType = replicationType;
  }


  public SourceServer sourceProperties(SourceServerSourceProperties sourceProperties) {
    this.sourceProperties = sourceProperties;
    return this;
  }

  /**
   * Get sourceProperties
   * @return sourceProperties
   */
  @javax.annotation.Nullable
  public SourceServerSourceProperties getSourceProperties() {
    return sourceProperties;
  }

  public void setSourceProperties(SourceServerSourceProperties sourceProperties) {
    this.sourceProperties = sourceProperties;
  }


  public SourceServer sourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
    return this;
  }

  /**
   * Get sourceServerID
   * @return sourceServerID
   */
  @javax.annotation.Nullable
  public String getSourceServerID() {
    return sourceServerID;
  }

  public void setSourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
  }


  public SourceServer tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public SourceServer userProvidedID(String userProvidedID) {
    this.userProvidedID = userProvidedID;
    return this;
  }

  /**
   * Get userProvidedID
   * @return userProvidedID
   */
  @javax.annotation.Nullable
  public String getUserProvidedID() {
    return userProvidedID;
  }

  public void setUserProvidedID(String userProvidedID) {
    this.userProvidedID = userProvidedID;
  }


  public SourceServer vcenterClientID(String vcenterClientID) {
    this.vcenterClientID = vcenterClientID;
    return this;
  }

  /**
   * Get vcenterClientID
   * @return vcenterClientID
   */
  @javax.annotation.Nullable
  public String getVcenterClientID() {
    return vcenterClientID;
  }

  public void setVcenterClientID(String vcenterClientID) {
    this.vcenterClientID = vcenterClientID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceServer sourceServer = (SourceServer) o;
    return Objects.equals(this.applicationID, sourceServer.applicationID) &&
        Objects.equals(this.arn, sourceServer.arn) &&
        Objects.equals(this.dataReplicationInfo, sourceServer.dataReplicationInfo) &&
        Objects.equals(this.fqdnForActionFramework, sourceServer.fqdnForActionFramework) &&
        Objects.equals(this.isArchived, sourceServer.isArchived) &&
        Objects.equals(this.launchedInstance, sourceServer.launchedInstance) &&
        Objects.equals(this.lifeCycle, sourceServer.lifeCycle) &&
        Objects.equals(this.replicationType, sourceServer.replicationType) &&
        Objects.equals(this.sourceProperties, sourceServer.sourceProperties) &&
        Objects.equals(this.sourceServerID, sourceServer.sourceServerID) &&
        Objects.equals(this.tags, sourceServer.tags) &&
        Objects.equals(this.userProvidedID, sourceServer.userProvidedID) &&
        Objects.equals(this.vcenterClientID, sourceServer.vcenterClientID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationID, arn, dataReplicationInfo, fqdnForActionFramework, isArchived, launchedInstance, lifeCycle, replicationType, sourceProperties, sourceServerID, tags, userProvidedID, vcenterClientID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceServer {\n");
    sb.append("    applicationID: ").append(toIndentedString(applicationID)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    dataReplicationInfo: ").append(toIndentedString(dataReplicationInfo)).append("\n");
    sb.append("    fqdnForActionFramework: ").append(toIndentedString(fqdnForActionFramework)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    launchedInstance: ").append(toIndentedString(launchedInstance)).append("\n");
    sb.append("    lifeCycle: ").append(toIndentedString(lifeCycle)).append("\n");
    sb.append("    replicationType: ").append(toIndentedString(replicationType)).append("\n");
    sb.append("    sourceProperties: ").append(toIndentedString(sourceProperties)).append("\n");
    sb.append("    sourceServerID: ").append(toIndentedString(sourceServerID)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    userProvidedID: ").append(toIndentedString(userProvidedID)).append("\n");
    sb.append("    vcenterClientID: ").append(toIndentedString(vcenterClientID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationID");
    openapiFields.add("arn");
    openapiFields.add("dataReplicationInfo");
    openapiFields.add("fqdnForActionFramework");
    openapiFields.add("isArchived");
    openapiFields.add("launchedInstance");
    openapiFields.add("lifeCycle");
    openapiFields.add("replicationType");
    openapiFields.add("sourceProperties");
    openapiFields.add("sourceServerID");
    openapiFields.add("tags");
    openapiFields.add("userProvidedID");
    openapiFields.add("vcenterClientID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SourceServer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SourceServer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceServer is not found in the empty JSON string", SourceServer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SourceServer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SourceServer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicationID`
      if (jsonObj.get("applicationID") != null && !jsonObj.get("applicationID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("applicationID"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `dataReplicationInfo`
      if (jsonObj.get("dataReplicationInfo") != null && !jsonObj.get("dataReplicationInfo").isJsonNull()) {
        SourceServerDataReplicationInfo.validateJsonElement(jsonObj.get("dataReplicationInfo"));
      }
      // validate the optional field `fqdnForActionFramework`
      if (jsonObj.get("fqdnForActionFramework") != null && !jsonObj.get("fqdnForActionFramework").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("fqdnForActionFramework"));
      }
      // validate the optional field `isArchived`
      if (jsonObj.get("isArchived") != null && !jsonObj.get("isArchived").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isArchived"));
      }
      // validate the optional field `launchedInstance`
      if (jsonObj.get("launchedInstance") != null && !jsonObj.get("launchedInstance").isJsonNull()) {
        SourceServerLaunchedInstance.validateJsonElement(jsonObj.get("launchedInstance"));
      }
      // validate the optional field `lifeCycle`
      if (jsonObj.get("lifeCycle") != null && !jsonObj.get("lifeCycle").isJsonNull()) {
        SourceServerLifeCycle.validateJsonElement(jsonObj.get("lifeCycle"));
      }
      // validate the optional field `replicationType`
      if (jsonObj.get("replicationType") != null && !jsonObj.get("replicationType").isJsonNull()) {
        ReplicationType.validateJsonElement(jsonObj.get("replicationType"));
      }
      // validate the optional field `sourceProperties`
      if (jsonObj.get("sourceProperties") != null && !jsonObj.get("sourceProperties").isJsonNull()) {
        SourceServerSourceProperties.validateJsonElement(jsonObj.get("sourceProperties"));
      }
      // validate the optional field `sourceServerID`
      if (jsonObj.get("sourceServerID") != null && !jsonObj.get("sourceServerID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceServerID"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `userProvidedID`
      if (jsonObj.get("userProvidedID") != null && !jsonObj.get("userProvidedID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("userProvidedID"));
      }
      // validate the optional field `vcenterClientID`
      if (jsonObj.get("vcenterClientID") != null && !jsonObj.get("vcenterClientID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vcenterClientID"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceServer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceServer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceServer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceServer.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceServer>() {
           @Override
           public void write(JsonWriter out, SourceServer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceServer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SourceServer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SourceServer
   * @throws IOException if the JSON string is invalid with respect to SourceServer
   */
  public static SourceServer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceServer.class);
  }

  /**
   * Convert an instance of SourceServer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

