/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AWS Systems Manager Document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SsmDocument {
  public static final String SERIALIZED_NAME_ACTION_NAME = "actionName";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private String actionName;

  public static final String SERIALIZED_NAME_EXTERNAL_PARAMETERS = "externalParameters";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_PARAMETERS)
  private Map externalParameters;

  public static final String SERIALIZED_NAME_MUST_SUCCEED_FOR_CUTOVER = "mustSucceedForCutover";
  @SerializedName(SERIALIZED_NAME_MUST_SUCCEED_FOR_CUTOVER)
  private Boolean mustSucceedForCutover;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map parameters;

  public static final String SERIALIZED_NAME_SSM_DOCUMENT_NAME = "ssmDocumentName";
  @SerializedName(SERIALIZED_NAME_SSM_DOCUMENT_NAME)
  private String ssmDocumentName;

  public static final String SERIALIZED_NAME_TIMEOUT_SECONDS = "timeoutSeconds";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_SECONDS)
  private Integer timeoutSeconds;

  public SsmDocument() {
  }

  public SsmDocument actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

  /**
   * Get actionName
   * @return actionName
   */
  @javax.annotation.Nonnull
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }


  public SsmDocument externalParameters(Map externalParameters) {
    this.externalParameters = externalParameters;
    return this;
  }

  /**
   * Get externalParameters
   * @return externalParameters
   */
  @javax.annotation.Nullable
  public Map getExternalParameters() {
    return externalParameters;
  }

  public void setExternalParameters(Map externalParameters) {
    this.externalParameters = externalParameters;
  }


  public SsmDocument mustSucceedForCutover(Boolean mustSucceedForCutover) {
    this.mustSucceedForCutover = mustSucceedForCutover;
    return this;
  }

  /**
   * Get mustSucceedForCutover
   * @return mustSucceedForCutover
   */
  @javax.annotation.Nullable
  public Boolean getMustSucceedForCutover() {
    return mustSucceedForCutover;
  }

  public void setMustSucceedForCutover(Boolean mustSucceedForCutover) {
    this.mustSucceedForCutover = mustSucceedForCutover;
  }


  public SsmDocument parameters(Map parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map getParameters() {
    return parameters;
  }

  public void setParameters(Map parameters) {
    this.parameters = parameters;
  }


  public SsmDocument ssmDocumentName(String ssmDocumentName) {
    this.ssmDocumentName = ssmDocumentName;
    return this;
  }

  /**
   * Get ssmDocumentName
   * @return ssmDocumentName
   */
  @javax.annotation.Nonnull
  public String getSsmDocumentName() {
    return ssmDocumentName;
  }

  public void setSsmDocumentName(String ssmDocumentName) {
    this.ssmDocumentName = ssmDocumentName;
  }


  public SsmDocument timeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
    return this;
  }

  /**
   * Get timeoutSeconds
   * @return timeoutSeconds
   */
  @javax.annotation.Nullable
  public Integer getTimeoutSeconds() {
    return timeoutSeconds;
  }

  public void setTimeoutSeconds(Integer timeoutSeconds) {
    this.timeoutSeconds = timeoutSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SsmDocument ssmDocument = (SsmDocument) o;
    return Objects.equals(this.actionName, ssmDocument.actionName) &&
        Objects.equals(this.externalParameters, ssmDocument.externalParameters) &&
        Objects.equals(this.mustSucceedForCutover, ssmDocument.mustSucceedForCutover) &&
        Objects.equals(this.parameters, ssmDocument.parameters) &&
        Objects.equals(this.ssmDocumentName, ssmDocument.ssmDocumentName) &&
        Objects.equals(this.timeoutSeconds, ssmDocument.timeoutSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, externalParameters, mustSucceedForCutover, parameters, ssmDocumentName, timeoutSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SsmDocument {\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    externalParameters: ").append(toIndentedString(externalParameters)).append("\n");
    sb.append("    mustSucceedForCutover: ").append(toIndentedString(mustSucceedForCutover)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    ssmDocumentName: ").append(toIndentedString(ssmDocumentName)).append("\n");
    sb.append("    timeoutSeconds: ").append(toIndentedString(timeoutSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionName");
    openapiFields.add("externalParameters");
    openapiFields.add("mustSucceedForCutover");
    openapiFields.add("parameters");
    openapiFields.add("ssmDocumentName");
    openapiFields.add("timeoutSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionName");
    openapiRequiredFields.add("ssmDocumentName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SsmDocument
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SsmDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SsmDocument is not found in the empty JSON string", SsmDocument.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SsmDocument.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SsmDocument` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SsmDocument.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `actionName`
      String.validateJsonElement(jsonObj.get("actionName"));
      // validate the optional field `externalParameters`
      if (jsonObj.get("externalParameters") != null && !jsonObj.get("externalParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("externalParameters"));
      }
      // validate the optional field `mustSucceedForCutover`
      if (jsonObj.get("mustSucceedForCutover") != null && !jsonObj.get("mustSucceedForCutover").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("mustSucceedForCutover"));
      }
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("parameters"));
      }
      // validate the required field `ssmDocumentName`
      String.validateJsonElement(jsonObj.get("ssmDocumentName"));
      // validate the optional field `timeoutSeconds`
      if (jsonObj.get("timeoutSeconds") != null && !jsonObj.get("timeoutSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("timeoutSeconds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SsmDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SsmDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SsmDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SsmDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<SsmDocument>() {
           @Override
           public void write(JsonWriter out, SsmDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SsmDocument read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SsmDocument given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SsmDocument
   * @throws IOException if the JSON string is invalid with respect to SsmDocument
   */
  public static SsmDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SsmDocument.class);
  }

  /**
   * Convert an instance of SsmDocument to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

