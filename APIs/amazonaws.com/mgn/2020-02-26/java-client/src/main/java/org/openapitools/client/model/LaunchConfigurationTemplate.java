/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.BootMode;
import org.openapitools.client.model.LaunchConfigurationTemplateLargeVolumeConf;
import org.openapitools.client.model.LaunchConfigurationTemplatePostLaunchActions;
import org.openapitools.client.model.LaunchConfigurationTemplateSmallVolumeConf;
import org.openapitools.client.model.LaunchDisposition;
import org.openapitools.client.model.Licensing;
import org.openapitools.client.model.TargetInstanceTypeRightSizingMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LaunchConfigurationTemplate
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LaunchConfigurationTemplate {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_ASSOCIATE_PUBLIC_IP_ADDRESS = "associatePublicIpAddress";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE_PUBLIC_IP_ADDRESS)
  private Boolean associatePublicIpAddress;

  public static final String SERIALIZED_NAME_BOOT_MODE = "bootMode";
  @SerializedName(SERIALIZED_NAME_BOOT_MODE)
  private BootMode bootMode;

  public static final String SERIALIZED_NAME_COPY_PRIVATE_IP = "copyPrivateIp";
  @SerializedName(SERIALIZED_NAME_COPY_PRIVATE_IP)
  private Boolean copyPrivateIp;

  public static final String SERIALIZED_NAME_COPY_TAGS = "copyTags";
  @SerializedName(SERIALIZED_NAME_COPY_TAGS)
  private Boolean copyTags;

  public static final String SERIALIZED_NAME_EC2_LAUNCH_TEMPLATE_I_D = "ec2LaunchTemplateID";
  @SerializedName(SERIALIZED_NAME_EC2_LAUNCH_TEMPLATE_I_D)
  private String ec2LaunchTemplateID;

  public static final String SERIALIZED_NAME_ENABLE_MAP_AUTO_TAGGING = "enableMapAutoTagging";
  @SerializedName(SERIALIZED_NAME_ENABLE_MAP_AUTO_TAGGING)
  private Boolean enableMapAutoTagging;

  public static final String SERIALIZED_NAME_LARGE_VOLUME_CONF = "largeVolumeConf";
  @SerializedName(SERIALIZED_NAME_LARGE_VOLUME_CONF)
  private LaunchConfigurationTemplateLargeVolumeConf largeVolumeConf;

  public static final String SERIALIZED_NAME_LAUNCH_CONFIGURATION_TEMPLATE_I_D = "launchConfigurationTemplateID";
  @SerializedName(SERIALIZED_NAME_LAUNCH_CONFIGURATION_TEMPLATE_I_D)
  private String launchConfigurationTemplateID;

  public static final String SERIALIZED_NAME_LAUNCH_DISPOSITION = "launchDisposition";
  @SerializedName(SERIALIZED_NAME_LAUNCH_DISPOSITION)
  private LaunchDisposition launchDisposition;

  public static final String SERIALIZED_NAME_LICENSING = "licensing";
  @SerializedName(SERIALIZED_NAME_LICENSING)
  private Licensing licensing;

  public static final String SERIALIZED_NAME_MAP_AUTO_TAGGING_MPE_I_D = "mapAutoTaggingMpeID";
  @SerializedName(SERIALIZED_NAME_MAP_AUTO_TAGGING_MPE_I_D)
  private String mapAutoTaggingMpeID;

  public static final String SERIALIZED_NAME_POST_LAUNCH_ACTIONS = "postLaunchActions";
  @SerializedName(SERIALIZED_NAME_POST_LAUNCH_ACTIONS)
  private LaunchConfigurationTemplatePostLaunchActions postLaunchActions;

  public static final String SERIALIZED_NAME_SMALL_VOLUME_CONF = "smallVolumeConf";
  @SerializedName(SERIALIZED_NAME_SMALL_VOLUME_CONF)
  private LaunchConfigurationTemplateSmallVolumeConf smallVolumeConf;

  public static final String SERIALIZED_NAME_SMALL_VOLUME_MAX_SIZE = "smallVolumeMaxSize";
  @SerializedName(SERIALIZED_NAME_SMALL_VOLUME_MAX_SIZE)
  private Integer smallVolumeMaxSize;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_TARGET_INSTANCE_TYPE_RIGHT_SIZING_METHOD = "targetInstanceTypeRightSizingMethod";
  @SerializedName(SERIALIZED_NAME_TARGET_INSTANCE_TYPE_RIGHT_SIZING_METHOD)
  private TargetInstanceTypeRightSizingMethod targetInstanceTypeRightSizingMethod;

  public LaunchConfigurationTemplate() {
  }

  public LaunchConfigurationTemplate arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public LaunchConfigurationTemplate associatePublicIpAddress(Boolean associatePublicIpAddress) {
    this.associatePublicIpAddress = associatePublicIpAddress;
    return this;
  }

  /**
   * Get associatePublicIpAddress
   * @return associatePublicIpAddress
   */
  @javax.annotation.Nullable
  public Boolean getAssociatePublicIpAddress() {
    return associatePublicIpAddress;
  }

  public void setAssociatePublicIpAddress(Boolean associatePublicIpAddress) {
    this.associatePublicIpAddress = associatePublicIpAddress;
  }


  public LaunchConfigurationTemplate bootMode(BootMode bootMode) {
    this.bootMode = bootMode;
    return this;
  }

  /**
   * Get bootMode
   * @return bootMode
   */
  @javax.annotation.Nullable
  public BootMode getBootMode() {
    return bootMode;
  }

  public void setBootMode(BootMode bootMode) {
    this.bootMode = bootMode;
  }


  public LaunchConfigurationTemplate copyPrivateIp(Boolean copyPrivateIp) {
    this.copyPrivateIp = copyPrivateIp;
    return this;
  }

  /**
   * Get copyPrivateIp
   * @return copyPrivateIp
   */
  @javax.annotation.Nullable
  public Boolean getCopyPrivateIp() {
    return copyPrivateIp;
  }

  public void setCopyPrivateIp(Boolean copyPrivateIp) {
    this.copyPrivateIp = copyPrivateIp;
  }


  public LaunchConfigurationTemplate copyTags(Boolean copyTags) {
    this.copyTags = copyTags;
    return this;
  }

  /**
   * Get copyTags
   * @return copyTags
   */
  @javax.annotation.Nullable
  public Boolean getCopyTags() {
    return copyTags;
  }

  public void setCopyTags(Boolean copyTags) {
    this.copyTags = copyTags;
  }


  public LaunchConfigurationTemplate ec2LaunchTemplateID(String ec2LaunchTemplateID) {
    this.ec2LaunchTemplateID = ec2LaunchTemplateID;
    return this;
  }

  /**
   * Get ec2LaunchTemplateID
   * @return ec2LaunchTemplateID
   */
  @javax.annotation.Nullable
  public String getEc2LaunchTemplateID() {
    return ec2LaunchTemplateID;
  }

  public void setEc2LaunchTemplateID(String ec2LaunchTemplateID) {
    this.ec2LaunchTemplateID = ec2LaunchTemplateID;
  }


  public LaunchConfigurationTemplate enableMapAutoTagging(Boolean enableMapAutoTagging) {
    this.enableMapAutoTagging = enableMapAutoTagging;
    return this;
  }

  /**
   * Get enableMapAutoTagging
   * @return enableMapAutoTagging
   */
  @javax.annotation.Nullable
  public Boolean getEnableMapAutoTagging() {
    return enableMapAutoTagging;
  }

  public void setEnableMapAutoTagging(Boolean enableMapAutoTagging) {
    this.enableMapAutoTagging = enableMapAutoTagging;
  }


  public LaunchConfigurationTemplate largeVolumeConf(LaunchConfigurationTemplateLargeVolumeConf largeVolumeConf) {
    this.largeVolumeConf = largeVolumeConf;
    return this;
  }

  /**
   * Get largeVolumeConf
   * @return largeVolumeConf
   */
  @javax.annotation.Nullable
  public LaunchConfigurationTemplateLargeVolumeConf getLargeVolumeConf() {
    return largeVolumeConf;
  }

  public void setLargeVolumeConf(LaunchConfigurationTemplateLargeVolumeConf largeVolumeConf) {
    this.largeVolumeConf = largeVolumeConf;
  }


  public LaunchConfigurationTemplate launchConfigurationTemplateID(String launchConfigurationTemplateID) {
    this.launchConfigurationTemplateID = launchConfigurationTemplateID;
    return this;
  }

  /**
   * Get launchConfigurationTemplateID
   * @return launchConfigurationTemplateID
   */
  @javax.annotation.Nonnull
  public String getLaunchConfigurationTemplateID() {
    return launchConfigurationTemplateID;
  }

  public void setLaunchConfigurationTemplateID(String launchConfigurationTemplateID) {
    this.launchConfigurationTemplateID = launchConfigurationTemplateID;
  }


  public LaunchConfigurationTemplate launchDisposition(LaunchDisposition launchDisposition) {
    this.launchDisposition = launchDisposition;
    return this;
  }

  /**
   * Get launchDisposition
   * @return launchDisposition
   */
  @javax.annotation.Nullable
  public LaunchDisposition getLaunchDisposition() {
    return launchDisposition;
  }

  public void setLaunchDisposition(LaunchDisposition launchDisposition) {
    this.launchDisposition = launchDisposition;
  }


  public LaunchConfigurationTemplate licensing(Licensing licensing) {
    this.licensing = licensing;
    return this;
  }

  /**
   * Get licensing
   * @return licensing
   */
  @javax.annotation.Nullable
  public Licensing getLicensing() {
    return licensing;
  }

  public void setLicensing(Licensing licensing) {
    this.licensing = licensing;
  }


  public LaunchConfigurationTemplate mapAutoTaggingMpeID(String mapAutoTaggingMpeID) {
    this.mapAutoTaggingMpeID = mapAutoTaggingMpeID;
    return this;
  }

  /**
   * Get mapAutoTaggingMpeID
   * @return mapAutoTaggingMpeID
   */
  @javax.annotation.Nullable
  public String getMapAutoTaggingMpeID() {
    return mapAutoTaggingMpeID;
  }

  public void setMapAutoTaggingMpeID(String mapAutoTaggingMpeID) {
    this.mapAutoTaggingMpeID = mapAutoTaggingMpeID;
  }


  public LaunchConfigurationTemplate postLaunchActions(LaunchConfigurationTemplatePostLaunchActions postLaunchActions) {
    this.postLaunchActions = postLaunchActions;
    return this;
  }

  /**
   * Get postLaunchActions
   * @return postLaunchActions
   */
  @javax.annotation.Nullable
  public LaunchConfigurationTemplatePostLaunchActions getPostLaunchActions() {
    return postLaunchActions;
  }

  public void setPostLaunchActions(LaunchConfigurationTemplatePostLaunchActions postLaunchActions) {
    this.postLaunchActions = postLaunchActions;
  }


  public LaunchConfigurationTemplate smallVolumeConf(LaunchConfigurationTemplateSmallVolumeConf smallVolumeConf) {
    this.smallVolumeConf = smallVolumeConf;
    return this;
  }

  /**
   * Get smallVolumeConf
   * @return smallVolumeConf
   */
  @javax.annotation.Nullable
  public LaunchConfigurationTemplateSmallVolumeConf getSmallVolumeConf() {
    return smallVolumeConf;
  }

  public void setSmallVolumeConf(LaunchConfigurationTemplateSmallVolumeConf smallVolumeConf) {
    this.smallVolumeConf = smallVolumeConf;
  }


  public LaunchConfigurationTemplate smallVolumeMaxSize(Integer smallVolumeMaxSize) {
    this.smallVolumeMaxSize = smallVolumeMaxSize;
    return this;
  }

  /**
   * Get smallVolumeMaxSize
   * @return smallVolumeMaxSize
   */
  @javax.annotation.Nullable
  public Integer getSmallVolumeMaxSize() {
    return smallVolumeMaxSize;
  }

  public void setSmallVolumeMaxSize(Integer smallVolumeMaxSize) {
    this.smallVolumeMaxSize = smallVolumeMaxSize;
  }


  public LaunchConfigurationTemplate tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public LaunchConfigurationTemplate targetInstanceTypeRightSizingMethod(TargetInstanceTypeRightSizingMethod targetInstanceTypeRightSizingMethod) {
    this.targetInstanceTypeRightSizingMethod = targetInstanceTypeRightSizingMethod;
    return this;
  }

  /**
   * Get targetInstanceTypeRightSizingMethod
   * @return targetInstanceTypeRightSizingMethod
   */
  @javax.annotation.Nullable
  public TargetInstanceTypeRightSizingMethod getTargetInstanceTypeRightSizingMethod() {
    return targetInstanceTypeRightSizingMethod;
  }

  public void setTargetInstanceTypeRightSizingMethod(TargetInstanceTypeRightSizingMethod targetInstanceTypeRightSizingMethod) {
    this.targetInstanceTypeRightSizingMethod = targetInstanceTypeRightSizingMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LaunchConfigurationTemplate launchConfigurationTemplate = (LaunchConfigurationTemplate) o;
    return Objects.equals(this.arn, launchConfigurationTemplate.arn) &&
        Objects.equals(this.associatePublicIpAddress, launchConfigurationTemplate.associatePublicIpAddress) &&
        Objects.equals(this.bootMode, launchConfigurationTemplate.bootMode) &&
        Objects.equals(this.copyPrivateIp, launchConfigurationTemplate.copyPrivateIp) &&
        Objects.equals(this.copyTags, launchConfigurationTemplate.copyTags) &&
        Objects.equals(this.ec2LaunchTemplateID, launchConfigurationTemplate.ec2LaunchTemplateID) &&
        Objects.equals(this.enableMapAutoTagging, launchConfigurationTemplate.enableMapAutoTagging) &&
        Objects.equals(this.largeVolumeConf, launchConfigurationTemplate.largeVolumeConf) &&
        Objects.equals(this.launchConfigurationTemplateID, launchConfigurationTemplate.launchConfigurationTemplateID) &&
        Objects.equals(this.launchDisposition, launchConfigurationTemplate.launchDisposition) &&
        Objects.equals(this.licensing, launchConfigurationTemplate.licensing) &&
        Objects.equals(this.mapAutoTaggingMpeID, launchConfigurationTemplate.mapAutoTaggingMpeID) &&
        Objects.equals(this.postLaunchActions, launchConfigurationTemplate.postLaunchActions) &&
        Objects.equals(this.smallVolumeConf, launchConfigurationTemplate.smallVolumeConf) &&
        Objects.equals(this.smallVolumeMaxSize, launchConfigurationTemplate.smallVolumeMaxSize) &&
        Objects.equals(this.tags, launchConfigurationTemplate.tags) &&
        Objects.equals(this.targetInstanceTypeRightSizingMethod, launchConfigurationTemplate.targetInstanceTypeRightSizingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, associatePublicIpAddress, bootMode, copyPrivateIp, copyTags, ec2LaunchTemplateID, enableMapAutoTagging, largeVolumeConf, launchConfigurationTemplateID, launchDisposition, licensing, mapAutoTaggingMpeID, postLaunchActions, smallVolumeConf, smallVolumeMaxSize, tags, targetInstanceTypeRightSizingMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LaunchConfigurationTemplate {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    associatePublicIpAddress: ").append(toIndentedString(associatePublicIpAddress)).append("\n");
    sb.append("    bootMode: ").append(toIndentedString(bootMode)).append("\n");
    sb.append("    copyPrivateIp: ").append(toIndentedString(copyPrivateIp)).append("\n");
    sb.append("    copyTags: ").append(toIndentedString(copyTags)).append("\n");
    sb.append("    ec2LaunchTemplateID: ").append(toIndentedString(ec2LaunchTemplateID)).append("\n");
    sb.append("    enableMapAutoTagging: ").append(toIndentedString(enableMapAutoTagging)).append("\n");
    sb.append("    largeVolumeConf: ").append(toIndentedString(largeVolumeConf)).append("\n");
    sb.append("    launchConfigurationTemplateID: ").append(toIndentedString(launchConfigurationTemplateID)).append("\n");
    sb.append("    launchDisposition: ").append(toIndentedString(launchDisposition)).append("\n");
    sb.append("    licensing: ").append(toIndentedString(licensing)).append("\n");
    sb.append("    mapAutoTaggingMpeID: ").append(toIndentedString(mapAutoTaggingMpeID)).append("\n");
    sb.append("    postLaunchActions: ").append(toIndentedString(postLaunchActions)).append("\n");
    sb.append("    smallVolumeConf: ").append(toIndentedString(smallVolumeConf)).append("\n");
    sb.append("    smallVolumeMaxSize: ").append(toIndentedString(smallVolumeMaxSize)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    targetInstanceTypeRightSizingMethod: ").append(toIndentedString(targetInstanceTypeRightSizingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("associatePublicIpAddress");
    openapiFields.add("bootMode");
    openapiFields.add("copyPrivateIp");
    openapiFields.add("copyTags");
    openapiFields.add("ec2LaunchTemplateID");
    openapiFields.add("enableMapAutoTagging");
    openapiFields.add("largeVolumeConf");
    openapiFields.add("launchConfigurationTemplateID");
    openapiFields.add("launchDisposition");
    openapiFields.add("licensing");
    openapiFields.add("mapAutoTaggingMpeID");
    openapiFields.add("postLaunchActions");
    openapiFields.add("smallVolumeConf");
    openapiFields.add("smallVolumeMaxSize");
    openapiFields.add("tags");
    openapiFields.add("targetInstanceTypeRightSizingMethod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("launchConfigurationTemplateID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LaunchConfigurationTemplate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LaunchConfigurationTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LaunchConfigurationTemplate is not found in the empty JSON string", LaunchConfigurationTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LaunchConfigurationTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LaunchConfigurationTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LaunchConfigurationTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `associatePublicIpAddress`
      if (jsonObj.get("associatePublicIpAddress") != null && !jsonObj.get("associatePublicIpAddress").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("associatePublicIpAddress"));
      }
      // validate the optional field `bootMode`
      if (jsonObj.get("bootMode") != null && !jsonObj.get("bootMode").isJsonNull()) {
        BootMode.validateJsonElement(jsonObj.get("bootMode"));
      }
      // validate the optional field `copyPrivateIp`
      if (jsonObj.get("copyPrivateIp") != null && !jsonObj.get("copyPrivateIp").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("copyPrivateIp"));
      }
      // validate the optional field `copyTags`
      if (jsonObj.get("copyTags") != null && !jsonObj.get("copyTags").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("copyTags"));
      }
      // validate the optional field `ec2LaunchTemplateID`
      if (jsonObj.get("ec2LaunchTemplateID") != null && !jsonObj.get("ec2LaunchTemplateID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ec2LaunchTemplateID"));
      }
      // validate the optional field `enableMapAutoTagging`
      if (jsonObj.get("enableMapAutoTagging") != null && !jsonObj.get("enableMapAutoTagging").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("enableMapAutoTagging"));
      }
      // validate the optional field `largeVolumeConf`
      if (jsonObj.get("largeVolumeConf") != null && !jsonObj.get("largeVolumeConf").isJsonNull()) {
        LaunchConfigurationTemplateLargeVolumeConf.validateJsonElement(jsonObj.get("largeVolumeConf"));
      }
      // validate the required field `launchConfigurationTemplateID`
      String.validateJsonElement(jsonObj.get("launchConfigurationTemplateID"));
      // validate the optional field `launchDisposition`
      if (jsonObj.get("launchDisposition") != null && !jsonObj.get("launchDisposition").isJsonNull()) {
        LaunchDisposition.validateJsonElement(jsonObj.get("launchDisposition"));
      }
      // validate the optional field `licensing`
      if (jsonObj.get("licensing") != null && !jsonObj.get("licensing").isJsonNull()) {
        Licensing.validateJsonElement(jsonObj.get("licensing"));
      }
      // validate the optional field `mapAutoTaggingMpeID`
      if (jsonObj.get("mapAutoTaggingMpeID") != null && !jsonObj.get("mapAutoTaggingMpeID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("mapAutoTaggingMpeID"));
      }
      // validate the optional field `postLaunchActions`
      if (jsonObj.get("postLaunchActions") != null && !jsonObj.get("postLaunchActions").isJsonNull()) {
        LaunchConfigurationTemplatePostLaunchActions.validateJsonElement(jsonObj.get("postLaunchActions"));
      }
      // validate the optional field `smallVolumeConf`
      if (jsonObj.get("smallVolumeConf") != null && !jsonObj.get("smallVolumeConf").isJsonNull()) {
        LaunchConfigurationTemplateSmallVolumeConf.validateJsonElement(jsonObj.get("smallVolumeConf"));
      }
      // validate the optional field `smallVolumeMaxSize`
      if (jsonObj.get("smallVolumeMaxSize") != null && !jsonObj.get("smallVolumeMaxSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("smallVolumeMaxSize"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `targetInstanceTypeRightSizingMethod`
      if (jsonObj.get("targetInstanceTypeRightSizingMethod") != null && !jsonObj.get("targetInstanceTypeRightSizingMethod").isJsonNull()) {
        TargetInstanceTypeRightSizingMethod.validateJsonElement(jsonObj.get("targetInstanceTypeRightSizingMethod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LaunchConfigurationTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LaunchConfigurationTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LaunchConfigurationTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LaunchConfigurationTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<LaunchConfigurationTemplate>() {
           @Override
           public void write(JsonWriter out, LaunchConfigurationTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LaunchConfigurationTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LaunchConfigurationTemplate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LaunchConfigurationTemplate
   * @throws IOException if the JSON string is invalid with respect to LaunchConfigurationTemplate
   */
  public static LaunchConfigurationTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LaunchConfigurationTemplate.class);
  }

  /**
   * Convert an instance of LaunchConfigurationTemplate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

