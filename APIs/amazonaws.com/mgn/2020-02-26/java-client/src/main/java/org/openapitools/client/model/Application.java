/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ApplicationApplicationAggregatedStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Application
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Application {
  public static final String SERIALIZED_NAME_APPLICATION_AGGREGATED_STATUS = "applicationAggregatedStatus";
  @SerializedName(SERIALIZED_NAME_APPLICATION_AGGREGATED_STATUS)
  private ApplicationApplicationAggregatedStatus applicationAggregatedStatus;

  public static final String SERIALIZED_NAME_APPLICATION_I_D = "applicationID";
  @SerializedName(SERIALIZED_NAME_APPLICATION_I_D)
  private String applicationID;

  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
  private String creationDateTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_ARCHIVED = "isArchived";
  @SerializedName(SERIALIZED_NAME_IS_ARCHIVED)
  private Boolean isArchived;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE_TIME)
  private String lastModifiedDateTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_WAVE_I_D = "waveID";
  @SerializedName(SERIALIZED_NAME_WAVE_I_D)
  private String waveID;

  public Application() {
  }

  public Application applicationAggregatedStatus(ApplicationApplicationAggregatedStatus applicationAggregatedStatus) {
    this.applicationAggregatedStatus = applicationAggregatedStatus;
    return this;
  }

  /**
   * Get applicationAggregatedStatus
   * @return applicationAggregatedStatus
   */
  @javax.annotation.Nullable
  public ApplicationApplicationAggregatedStatus getApplicationAggregatedStatus() {
    return applicationAggregatedStatus;
  }

  public void setApplicationAggregatedStatus(ApplicationApplicationAggregatedStatus applicationAggregatedStatus) {
    this.applicationAggregatedStatus = applicationAggregatedStatus;
  }


  public Application applicationID(String applicationID) {
    this.applicationID = applicationID;
    return this;
  }

  /**
   * Get applicationID
   * @return applicationID
   */
  @javax.annotation.Nullable
  public String getApplicationID() {
    return applicationID;
  }

  public void setApplicationID(String applicationID) {
    this.applicationID = applicationID;
  }


  public Application arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public Application creationDateTime(String creationDateTime) {
    this.creationDateTime = creationDateTime;
    return this;
  }

  /**
   * Get creationDateTime
   * @return creationDateTime
   */
  @javax.annotation.Nullable
  public String getCreationDateTime() {
    return creationDateTime;
  }

  public void setCreationDateTime(String creationDateTime) {
    this.creationDateTime = creationDateTime;
  }


  public Application description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Application isArchived(Boolean isArchived) {
    this.isArchived = isArchived;
    return this;
  }

  /**
   * Get isArchived
   * @return isArchived
   */
  @javax.annotation.Nullable
  public Boolean getIsArchived() {
    return isArchived;
  }

  public void setIsArchived(Boolean isArchived) {
    this.isArchived = isArchived;
  }


  public Application lastModifiedDateTime(String lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
    return this;
  }

  /**
   * Get lastModifiedDateTime
   * @return lastModifiedDateTime
   */
  @javax.annotation.Nullable
  public String getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }

  public void setLastModifiedDateTime(String lastModifiedDateTime) {
    this.lastModifiedDateTime = lastModifiedDateTime;
  }


  public Application name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Application tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public Application waveID(String waveID) {
    this.waveID = waveID;
    return this;
  }

  /**
   * Get waveID
   * @return waveID
   */
  @javax.annotation.Nullable
  public String getWaveID() {
    return waveID;
  }

  public void setWaveID(String waveID) {
    this.waveID = waveID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Application application = (Application) o;
    return Objects.equals(this.applicationAggregatedStatus, application.applicationAggregatedStatus) &&
        Objects.equals(this.applicationID, application.applicationID) &&
        Objects.equals(this.arn, application.arn) &&
        Objects.equals(this.creationDateTime, application.creationDateTime) &&
        Objects.equals(this.description, application.description) &&
        Objects.equals(this.isArchived, application.isArchived) &&
        Objects.equals(this.lastModifiedDateTime, application.lastModifiedDateTime) &&
        Objects.equals(this.name, application.name) &&
        Objects.equals(this.tags, application.tags) &&
        Objects.equals(this.waveID, application.waveID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationAggregatedStatus, applicationID, arn, creationDateTime, description, isArchived, lastModifiedDateTime, name, tags, waveID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Application {\n");
    sb.append("    applicationAggregatedStatus: ").append(toIndentedString(applicationAggregatedStatus)).append("\n");
    sb.append("    applicationID: ").append(toIndentedString(applicationID)).append("\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isArchived: ").append(toIndentedString(isArchived)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    waveID: ").append(toIndentedString(waveID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationAggregatedStatus");
    openapiFields.add("applicationID");
    openapiFields.add("arn");
    openapiFields.add("creationDateTime");
    openapiFields.add("description");
    openapiFields.add("isArchived");
    openapiFields.add("lastModifiedDateTime");
    openapiFields.add("name");
    openapiFields.add("tags");
    openapiFields.add("waveID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Application
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Application.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Application is not found in the empty JSON string", Application.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Application.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Application` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `applicationAggregatedStatus`
      if (jsonObj.get("applicationAggregatedStatus") != null && !jsonObj.get("applicationAggregatedStatus").isJsonNull()) {
        ApplicationApplicationAggregatedStatus.validateJsonElement(jsonObj.get("applicationAggregatedStatus"));
      }
      // validate the optional field `applicationID`
      if (jsonObj.get("applicationID") != null && !jsonObj.get("applicationID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("applicationID"));
      }
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `creationDateTime`
      if (jsonObj.get("creationDateTime") != null && !jsonObj.get("creationDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("creationDateTime"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `isArchived`
      if (jsonObj.get("isArchived") != null && !jsonObj.get("isArchived").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isArchived"));
      }
      // validate the optional field `lastModifiedDateTime`
      if (jsonObj.get("lastModifiedDateTime") != null && !jsonObj.get("lastModifiedDateTime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastModifiedDateTime"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `waveID`
      if (jsonObj.get("waveID") != null && !jsonObj.get("waveID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("waveID"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Application.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Application' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Application> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Application.class));

       return (TypeAdapter<T>) new TypeAdapter<Application>() {
           @Override
           public void write(JsonWriter out, Application value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Application read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Application given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Application
   * @throws IOException if the JSON string is invalid with respect to Application
   */
  public static Application fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Application.class);
  }

  /**
   * Convert an instance of Application to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

