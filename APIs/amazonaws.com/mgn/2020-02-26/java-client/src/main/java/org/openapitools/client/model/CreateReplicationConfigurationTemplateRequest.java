/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateReplicationConfigurationTemplateRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateReplicationConfigurationTemplateRequest {
  public static final String SERIALIZED_NAME_ASSOCIATE_DEFAULT_SECURITY_GROUP = "associateDefaultSecurityGroup";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE_DEFAULT_SECURITY_GROUP)
  private Boolean associateDefaultSecurityGroup;

  public static final String SERIALIZED_NAME_BANDWIDTH_THROTTLING = "bandwidthThrottling";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_THROTTLING)
  private Integer bandwidthThrottling;

  public static final String SERIALIZED_NAME_CREATE_PUBLIC_I_P = "createPublicIP";
  @SerializedName(SERIALIZED_NAME_CREATE_PUBLIC_I_P)
  private Boolean createPublicIP;

  /**
   * Request to configure data plane routing during Replication Settings template creation.
   */
  @JsonAdapter(DataPlaneRoutingEnum.Adapter.class)
  public enum DataPlaneRoutingEnum {
    PRIVATE_IP("PRIVATE_IP"),
    
    PUBLIC_IP("PUBLIC_IP");

    private String value;

    DataPlaneRoutingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataPlaneRoutingEnum fromValue(String value) {
      for (DataPlaneRoutingEnum b : DataPlaneRoutingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataPlaneRoutingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataPlaneRoutingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataPlaneRoutingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataPlaneRoutingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataPlaneRoutingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_PLANE_ROUTING = "dataPlaneRouting";
  @SerializedName(SERIALIZED_NAME_DATA_PLANE_ROUTING)
  private DataPlaneRoutingEnum dataPlaneRouting;

  /**
   * Request to configure the default large staging disk EBS volume type during Replication Settings template creation.
   */
  @JsonAdapter(DefaultLargeStagingDiskTypeEnum.Adapter.class)
  public enum DefaultLargeStagingDiskTypeEnum {
    GP2("GP2"),
    
    ST1("ST1"),
    
    GP3("GP3");

    private String value;

    DefaultLargeStagingDiskTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DefaultLargeStagingDiskTypeEnum fromValue(String value) {
      for (DefaultLargeStagingDiskTypeEnum b : DefaultLargeStagingDiskTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DefaultLargeStagingDiskTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DefaultLargeStagingDiskTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DefaultLargeStagingDiskTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DefaultLargeStagingDiskTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DefaultLargeStagingDiskTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEFAULT_LARGE_STAGING_DISK_TYPE = "defaultLargeStagingDiskType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LARGE_STAGING_DISK_TYPE)
  private DefaultLargeStagingDiskTypeEnum defaultLargeStagingDiskType;

  /**
   * Request to configure EBS encryption during Replication Settings template creation.
   */
  @JsonAdapter(EbsEncryptionEnum.Adapter.class)
  public enum EbsEncryptionEnum {
    DEFAULT("DEFAULT"),
    
    CUSTOM("CUSTOM");

    private String value;

    EbsEncryptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EbsEncryptionEnum fromValue(String value) {
      for (EbsEncryptionEnum b : EbsEncryptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EbsEncryptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EbsEncryptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EbsEncryptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EbsEncryptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EbsEncryptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EBS_ENCRYPTION = "ebsEncryption";
  @SerializedName(SERIALIZED_NAME_EBS_ENCRYPTION)
  private EbsEncryptionEnum ebsEncryption;

  public static final String SERIALIZED_NAME_EBS_ENCRYPTION_KEY_ARN = "ebsEncryptionKeyArn";
  @SerializedName(SERIALIZED_NAME_EBS_ENCRYPTION_KEY_ARN)
  private String ebsEncryptionKeyArn;

  public static final String SERIALIZED_NAME_REPLICATION_SERVER_INSTANCE_TYPE = "replicationServerInstanceType";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVER_INSTANCE_TYPE)
  private String replicationServerInstanceType;

  public static final String SERIALIZED_NAME_REPLICATION_SERVERS_SECURITY_GROUPS_I_DS = "replicationServersSecurityGroupsIDs";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVERS_SECURITY_GROUPS_I_DS)
  private List<String> replicationServersSecurityGroupsIDs = new ArrayList<>();

  public static final String SERIALIZED_NAME_STAGING_AREA_SUBNET_ID = "stagingAreaSubnetId";
  @SerializedName(SERIALIZED_NAME_STAGING_AREA_SUBNET_ID)
  private String stagingAreaSubnetId;

  public static final String SERIALIZED_NAME_STAGING_AREA_TAGS = "stagingAreaTags";
  @SerializedName(SERIALIZED_NAME_STAGING_AREA_TAGS)
  private Map<String, String> stagingAreaTags = new HashMap<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_USE_DEDICATED_REPLICATION_SERVER = "useDedicatedReplicationServer";
  @SerializedName(SERIALIZED_NAME_USE_DEDICATED_REPLICATION_SERVER)
  private Boolean useDedicatedReplicationServer;

  public static final String SERIALIZED_NAME_USE_FIPS_ENDPOINT = "useFipsEndpoint";
  @SerializedName(SERIALIZED_NAME_USE_FIPS_ENDPOINT)
  private Boolean useFipsEndpoint;

  public CreateReplicationConfigurationTemplateRequest() {
  }

  public CreateReplicationConfigurationTemplateRequest associateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
    this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
    return this;
  }

  /**
   * Request to associate the default Application Migration Service Security group with the Replication Settings template.
   * @return associateDefaultSecurityGroup
   */
  @javax.annotation.Nonnull
  public Boolean getAssociateDefaultSecurityGroup() {
    return associateDefaultSecurityGroup;
  }

  public void setAssociateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
    this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
  }


  public CreateReplicationConfigurationTemplateRequest bandwidthThrottling(Integer bandwidthThrottling) {
    this.bandwidthThrottling = bandwidthThrottling;
    return this;
  }

  /**
   * Request to configure bandwidth throttling during Replication Settings template creation.
   * minimum: 0
   * maximum: 10000
   * @return bandwidthThrottling
   */
  @javax.annotation.Nonnull
  public Integer getBandwidthThrottling() {
    return bandwidthThrottling;
  }

  public void setBandwidthThrottling(Integer bandwidthThrottling) {
    this.bandwidthThrottling = bandwidthThrottling;
  }


  public CreateReplicationConfigurationTemplateRequest createPublicIP(Boolean createPublicIP) {
    this.createPublicIP = createPublicIP;
    return this;
  }

  /**
   * Request to create Public IP during Replication Settings template creation.
   * @return createPublicIP
   */
  @javax.annotation.Nonnull
  public Boolean getCreatePublicIP() {
    return createPublicIP;
  }

  public void setCreatePublicIP(Boolean createPublicIP) {
    this.createPublicIP = createPublicIP;
  }


  public CreateReplicationConfigurationTemplateRequest dataPlaneRouting(DataPlaneRoutingEnum dataPlaneRouting) {
    this.dataPlaneRouting = dataPlaneRouting;
    return this;
  }

  /**
   * Request to configure data plane routing during Replication Settings template creation.
   * @return dataPlaneRouting
   */
  @javax.annotation.Nonnull
  public DataPlaneRoutingEnum getDataPlaneRouting() {
    return dataPlaneRouting;
  }

  public void setDataPlaneRouting(DataPlaneRoutingEnum dataPlaneRouting) {
    this.dataPlaneRouting = dataPlaneRouting;
  }


  public CreateReplicationConfigurationTemplateRequest defaultLargeStagingDiskType(DefaultLargeStagingDiskTypeEnum defaultLargeStagingDiskType) {
    this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
    return this;
  }

  /**
   * Request to configure the default large staging disk EBS volume type during Replication Settings template creation.
   * @return defaultLargeStagingDiskType
   */
  @javax.annotation.Nonnull
  public DefaultLargeStagingDiskTypeEnum getDefaultLargeStagingDiskType() {
    return defaultLargeStagingDiskType;
  }

  public void setDefaultLargeStagingDiskType(DefaultLargeStagingDiskTypeEnum defaultLargeStagingDiskType) {
    this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
  }


  public CreateReplicationConfigurationTemplateRequest ebsEncryption(EbsEncryptionEnum ebsEncryption) {
    this.ebsEncryption = ebsEncryption;
    return this;
  }

  /**
   * Request to configure EBS encryption during Replication Settings template creation.
   * @return ebsEncryption
   */
  @javax.annotation.Nonnull
  public EbsEncryptionEnum getEbsEncryption() {
    return ebsEncryption;
  }

  public void setEbsEncryption(EbsEncryptionEnum ebsEncryption) {
    this.ebsEncryption = ebsEncryption;
  }


  public CreateReplicationConfigurationTemplateRequest ebsEncryptionKeyArn(String ebsEncryptionKeyArn) {
    this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
    return this;
  }

  /**
   * Request to configure an EBS encryption key during Replication Settings template creation.
   * @return ebsEncryptionKeyArn
   */
  @javax.annotation.Nullable
  public String getEbsEncryptionKeyArn() {
    return ebsEncryptionKeyArn;
  }

  public void setEbsEncryptionKeyArn(String ebsEncryptionKeyArn) {
    this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
  }


  public CreateReplicationConfigurationTemplateRequest replicationServerInstanceType(String replicationServerInstanceType) {
    this.replicationServerInstanceType = replicationServerInstanceType;
    return this;
  }

  /**
   * Request to configure the Replication Server instance type during Replication Settings template creation.
   * @return replicationServerInstanceType
   */
  @javax.annotation.Nonnull
  public String getReplicationServerInstanceType() {
    return replicationServerInstanceType;
  }

  public void setReplicationServerInstanceType(String replicationServerInstanceType) {
    this.replicationServerInstanceType = replicationServerInstanceType;
  }


  public CreateReplicationConfigurationTemplateRequest replicationServersSecurityGroupsIDs(List<String> replicationServersSecurityGroupsIDs) {
    this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
    return this;
  }

  public CreateReplicationConfigurationTemplateRequest addReplicationServersSecurityGroupsIDsItem(String replicationServersSecurityGroupsIDsItem) {
    if (this.replicationServersSecurityGroupsIDs == null) {
      this.replicationServersSecurityGroupsIDs = new ArrayList<>();
    }
    this.replicationServersSecurityGroupsIDs.add(replicationServersSecurityGroupsIDsItem);
    return this;
  }

  /**
   * Request to configure the Replication Server Security group ID during Replication Settings template creation.
   * @return replicationServersSecurityGroupsIDs
   */
  @javax.annotation.Nonnull
  public List<String> getReplicationServersSecurityGroupsIDs() {
    return replicationServersSecurityGroupsIDs;
  }

  public void setReplicationServersSecurityGroupsIDs(List<String> replicationServersSecurityGroupsIDs) {
    this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
  }


  public CreateReplicationConfigurationTemplateRequest stagingAreaSubnetId(String stagingAreaSubnetId) {
    this.stagingAreaSubnetId = stagingAreaSubnetId;
    return this;
  }

  /**
   * Request to configure the Staging Area subnet ID during Replication Settings template creation.
   * @return stagingAreaSubnetId
   */
  @javax.annotation.Nonnull
  public String getStagingAreaSubnetId() {
    return stagingAreaSubnetId;
  }

  public void setStagingAreaSubnetId(String stagingAreaSubnetId) {
    this.stagingAreaSubnetId = stagingAreaSubnetId;
  }


  public CreateReplicationConfigurationTemplateRequest stagingAreaTags(Map<String, String> stagingAreaTags) {
    this.stagingAreaTags = stagingAreaTags;
    return this;
  }

  public CreateReplicationConfigurationTemplateRequest putStagingAreaTagsItem(String key, String stagingAreaTagsItem) {
    if (this.stagingAreaTags == null) {
      this.stagingAreaTags = new HashMap<>();
    }
    this.stagingAreaTags.put(key, stagingAreaTagsItem);
    return this;
  }

  /**
   * Request to configure Staging Area tags during Replication Settings template creation.
   * @return stagingAreaTags
   */
  @javax.annotation.Nonnull
  public Map<String, String> getStagingAreaTags() {
    return stagingAreaTags;
  }

  public void setStagingAreaTags(Map<String, String> stagingAreaTags) {
    this.stagingAreaTags = stagingAreaTags;
  }


  public CreateReplicationConfigurationTemplateRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateReplicationConfigurationTemplateRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Request to configure tags during Replication Settings template creation.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateReplicationConfigurationTemplateRequest useDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
    this.useDedicatedReplicationServer = useDedicatedReplicationServer;
    return this;
  }

  /**
   * Request to use Dedicated Replication Servers during Replication Settings template creation.
   * @return useDedicatedReplicationServer
   */
  @javax.annotation.Nonnull
  public Boolean getUseDedicatedReplicationServer() {
    return useDedicatedReplicationServer;
  }

  public void setUseDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
    this.useDedicatedReplicationServer = useDedicatedReplicationServer;
  }


  public CreateReplicationConfigurationTemplateRequest useFipsEndpoint(Boolean useFipsEndpoint) {
    this.useFipsEndpoint = useFipsEndpoint;
    return this;
  }

  /**
   * Request to use Fips Endpoint during Replication Settings template creation.
   * @return useFipsEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getUseFipsEndpoint() {
    return useFipsEndpoint;
  }

  public void setUseFipsEndpoint(Boolean useFipsEndpoint) {
    this.useFipsEndpoint = useFipsEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateReplicationConfigurationTemplateRequest createReplicationConfigurationTemplateRequest = (CreateReplicationConfigurationTemplateRequest) o;
    return Objects.equals(this.associateDefaultSecurityGroup, createReplicationConfigurationTemplateRequest.associateDefaultSecurityGroup) &&
        Objects.equals(this.bandwidthThrottling, createReplicationConfigurationTemplateRequest.bandwidthThrottling) &&
        Objects.equals(this.createPublicIP, createReplicationConfigurationTemplateRequest.createPublicIP) &&
        Objects.equals(this.dataPlaneRouting, createReplicationConfigurationTemplateRequest.dataPlaneRouting) &&
        Objects.equals(this.defaultLargeStagingDiskType, createReplicationConfigurationTemplateRequest.defaultLargeStagingDiskType) &&
        Objects.equals(this.ebsEncryption, createReplicationConfigurationTemplateRequest.ebsEncryption) &&
        Objects.equals(this.ebsEncryptionKeyArn, createReplicationConfigurationTemplateRequest.ebsEncryptionKeyArn) &&
        Objects.equals(this.replicationServerInstanceType, createReplicationConfigurationTemplateRequest.replicationServerInstanceType) &&
        Objects.equals(this.replicationServersSecurityGroupsIDs, createReplicationConfigurationTemplateRequest.replicationServersSecurityGroupsIDs) &&
        Objects.equals(this.stagingAreaSubnetId, createReplicationConfigurationTemplateRequest.stagingAreaSubnetId) &&
        Objects.equals(this.stagingAreaTags, createReplicationConfigurationTemplateRequest.stagingAreaTags) &&
        Objects.equals(this.tags, createReplicationConfigurationTemplateRequest.tags) &&
        Objects.equals(this.useDedicatedReplicationServer, createReplicationConfigurationTemplateRequest.useDedicatedReplicationServer) &&
        Objects.equals(this.useFipsEndpoint, createReplicationConfigurationTemplateRequest.useFipsEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associateDefaultSecurityGroup, bandwidthThrottling, createPublicIP, dataPlaneRouting, defaultLargeStagingDiskType, ebsEncryption, ebsEncryptionKeyArn, replicationServerInstanceType, replicationServersSecurityGroupsIDs, stagingAreaSubnetId, stagingAreaTags, tags, useDedicatedReplicationServer, useFipsEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateReplicationConfigurationTemplateRequest {\n");
    sb.append("    associateDefaultSecurityGroup: ").append(toIndentedString(associateDefaultSecurityGroup)).append("\n");
    sb.append("    bandwidthThrottling: ").append(toIndentedString(bandwidthThrottling)).append("\n");
    sb.append("    createPublicIP: ").append(toIndentedString(createPublicIP)).append("\n");
    sb.append("    dataPlaneRouting: ").append(toIndentedString(dataPlaneRouting)).append("\n");
    sb.append("    defaultLargeStagingDiskType: ").append(toIndentedString(defaultLargeStagingDiskType)).append("\n");
    sb.append("    ebsEncryption: ").append(toIndentedString(ebsEncryption)).append("\n");
    sb.append("    ebsEncryptionKeyArn: ").append(toIndentedString(ebsEncryptionKeyArn)).append("\n");
    sb.append("    replicationServerInstanceType: ").append(toIndentedString(replicationServerInstanceType)).append("\n");
    sb.append("    replicationServersSecurityGroupsIDs: ").append(toIndentedString(replicationServersSecurityGroupsIDs)).append("\n");
    sb.append("    stagingAreaSubnetId: ").append(toIndentedString(stagingAreaSubnetId)).append("\n");
    sb.append("    stagingAreaTags: ").append(toIndentedString(stagingAreaTags)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    useDedicatedReplicationServer: ").append(toIndentedString(useDedicatedReplicationServer)).append("\n");
    sb.append("    useFipsEndpoint: ").append(toIndentedString(useFipsEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associateDefaultSecurityGroup");
    openapiFields.add("bandwidthThrottling");
    openapiFields.add("createPublicIP");
    openapiFields.add("dataPlaneRouting");
    openapiFields.add("defaultLargeStagingDiskType");
    openapiFields.add("ebsEncryption");
    openapiFields.add("ebsEncryptionKeyArn");
    openapiFields.add("replicationServerInstanceType");
    openapiFields.add("replicationServersSecurityGroupsIDs");
    openapiFields.add("stagingAreaSubnetId");
    openapiFields.add("stagingAreaTags");
    openapiFields.add("tags");
    openapiFields.add("useDedicatedReplicationServer");
    openapiFields.add("useFipsEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("associateDefaultSecurityGroup");
    openapiRequiredFields.add("bandwidthThrottling");
    openapiRequiredFields.add("createPublicIP");
    openapiRequiredFields.add("dataPlaneRouting");
    openapiRequiredFields.add("defaultLargeStagingDiskType");
    openapiRequiredFields.add("ebsEncryption");
    openapiRequiredFields.add("replicationServerInstanceType");
    openapiRequiredFields.add("replicationServersSecurityGroupsIDs");
    openapiRequiredFields.add("stagingAreaSubnetId");
    openapiRequiredFields.add("stagingAreaTags");
    openapiRequiredFields.add("useDedicatedReplicationServer");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateReplicationConfigurationTemplateRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateReplicationConfigurationTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateReplicationConfigurationTemplateRequest is not found in the empty JSON string", CreateReplicationConfigurationTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateReplicationConfigurationTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateReplicationConfigurationTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateReplicationConfigurationTemplateRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataPlaneRouting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataPlaneRouting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataPlaneRouting").toString()));
      }
      // validate the required field `dataPlaneRouting`
      DataPlaneRoutingEnum.validateJsonElement(jsonObj.get("dataPlaneRouting"));
      if (!jsonObj.get("defaultLargeStagingDiskType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultLargeStagingDiskType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultLargeStagingDiskType").toString()));
      }
      // validate the required field `defaultLargeStagingDiskType`
      DefaultLargeStagingDiskTypeEnum.validateJsonElement(jsonObj.get("defaultLargeStagingDiskType"));
      if (!jsonObj.get("ebsEncryption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ebsEncryption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ebsEncryption").toString()));
      }
      // validate the required field `ebsEncryption`
      EbsEncryptionEnum.validateJsonElement(jsonObj.get("ebsEncryption"));
      if ((jsonObj.get("ebsEncryptionKeyArn") != null && !jsonObj.get("ebsEncryptionKeyArn").isJsonNull()) && !jsonObj.get("ebsEncryptionKeyArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ebsEncryptionKeyArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ebsEncryptionKeyArn").toString()));
      }
      if (!jsonObj.get("replicationServerInstanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationServerInstanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicationServerInstanceType").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("replicationServersSecurityGroupsIDs") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("replicationServersSecurityGroupsIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicationServersSecurityGroupsIDs` to be an array in the JSON string but got `%s`", jsonObj.get("replicationServersSecurityGroupsIDs").toString()));
      }
      if (!jsonObj.get("stagingAreaSubnetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stagingAreaSubnetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stagingAreaSubnetId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateReplicationConfigurationTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateReplicationConfigurationTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateReplicationConfigurationTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateReplicationConfigurationTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateReplicationConfigurationTemplateRequest>() {
           @Override
           public void write(JsonWriter out, CreateReplicationConfigurationTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateReplicationConfigurationTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateReplicationConfigurationTemplateRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateReplicationConfigurationTemplateRequest
   * @throws IOException if the JSON string is invalid with respect to CreateReplicationConfigurationTemplateRequest
   */
  public static CreateReplicationConfigurationTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateReplicationConfigurationTemplateRequest.class);
  }

  /**
   * Convert an instance of CreateReplicationConfigurationTemplateRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

