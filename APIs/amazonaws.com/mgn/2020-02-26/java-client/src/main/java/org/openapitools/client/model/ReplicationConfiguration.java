/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ReplicationConfigurationDataPlaneRouting;
import org.openapitools.client.model.ReplicationConfigurationDefaultLargeStagingDiskType;
import org.openapitools.client.model.ReplicationConfigurationEbsEncryption;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReplicationConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationConfiguration {
  public static final String SERIALIZED_NAME_ASSOCIATE_DEFAULT_SECURITY_GROUP = "associateDefaultSecurityGroup";
  @SerializedName(SERIALIZED_NAME_ASSOCIATE_DEFAULT_SECURITY_GROUP)
  private Boolean associateDefaultSecurityGroup;

  public static final String SERIALIZED_NAME_BANDWIDTH_THROTTLING = "bandwidthThrottling";
  @SerializedName(SERIALIZED_NAME_BANDWIDTH_THROTTLING)
  private Integer bandwidthThrottling;

  public static final String SERIALIZED_NAME_CREATE_PUBLIC_I_P = "createPublicIP";
  @SerializedName(SERIALIZED_NAME_CREATE_PUBLIC_I_P)
  private Boolean createPublicIP;

  public static final String SERIALIZED_NAME_DATA_PLANE_ROUTING = "dataPlaneRouting";
  @SerializedName(SERIALIZED_NAME_DATA_PLANE_ROUTING)
  private ReplicationConfigurationDataPlaneRouting dataPlaneRouting;

  public static final String SERIALIZED_NAME_DEFAULT_LARGE_STAGING_DISK_TYPE = "defaultLargeStagingDiskType";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LARGE_STAGING_DISK_TYPE)
  private ReplicationConfigurationDefaultLargeStagingDiskType defaultLargeStagingDiskType;

  public static final String SERIALIZED_NAME_EBS_ENCRYPTION = "ebsEncryption";
  @SerializedName(SERIALIZED_NAME_EBS_ENCRYPTION)
  private ReplicationConfigurationEbsEncryption ebsEncryption;

  public static final String SERIALIZED_NAME_EBS_ENCRYPTION_KEY_ARN = "ebsEncryptionKeyArn";
  @SerializedName(SERIALIZED_NAME_EBS_ENCRYPTION_KEY_ARN)
  private String ebsEncryptionKeyArn;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REPLICATED_DISKS = "replicatedDisks";
  @SerializedName(SERIALIZED_NAME_REPLICATED_DISKS)
  private List replicatedDisks;

  public static final String SERIALIZED_NAME_REPLICATION_SERVER_INSTANCE_TYPE = "replicationServerInstanceType";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVER_INSTANCE_TYPE)
  private String replicationServerInstanceType;

  public static final String SERIALIZED_NAME_REPLICATION_SERVERS_SECURITY_GROUPS_I_DS = "replicationServersSecurityGroupsIDs";
  @SerializedName(SERIALIZED_NAME_REPLICATION_SERVERS_SECURITY_GROUPS_I_DS)
  private List replicationServersSecurityGroupsIDs;

  public static final String SERIALIZED_NAME_SOURCE_SERVER_I_D = "sourceServerID";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVER_I_D)
  private String sourceServerID;

  public static final String SERIALIZED_NAME_STAGING_AREA_SUBNET_ID = "stagingAreaSubnetId";
  @SerializedName(SERIALIZED_NAME_STAGING_AREA_SUBNET_ID)
  private String stagingAreaSubnetId;

  public static final String SERIALIZED_NAME_STAGING_AREA_TAGS = "stagingAreaTags";
  @SerializedName(SERIALIZED_NAME_STAGING_AREA_TAGS)
  private Map stagingAreaTags;

  public static final String SERIALIZED_NAME_USE_DEDICATED_REPLICATION_SERVER = "useDedicatedReplicationServer";
  @SerializedName(SERIALIZED_NAME_USE_DEDICATED_REPLICATION_SERVER)
  private Boolean useDedicatedReplicationServer;

  public static final String SERIALIZED_NAME_USE_FIPS_ENDPOINT = "useFipsEndpoint";
  @SerializedName(SERIALIZED_NAME_USE_FIPS_ENDPOINT)
  private Boolean useFipsEndpoint;

  public ReplicationConfiguration() {
  }

  public ReplicationConfiguration associateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
    this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
    return this;
  }

  /**
   * Get associateDefaultSecurityGroup
   * @return associateDefaultSecurityGroup
   */
  @javax.annotation.Nullable
  public Boolean getAssociateDefaultSecurityGroup() {
    return associateDefaultSecurityGroup;
  }

  public void setAssociateDefaultSecurityGroup(Boolean associateDefaultSecurityGroup) {
    this.associateDefaultSecurityGroup = associateDefaultSecurityGroup;
  }


  public ReplicationConfiguration bandwidthThrottling(Integer bandwidthThrottling) {
    this.bandwidthThrottling = bandwidthThrottling;
    return this;
  }

  /**
   * Get bandwidthThrottling
   * @return bandwidthThrottling
   */
  @javax.annotation.Nullable
  public Integer getBandwidthThrottling() {
    return bandwidthThrottling;
  }

  public void setBandwidthThrottling(Integer bandwidthThrottling) {
    this.bandwidthThrottling = bandwidthThrottling;
  }


  public ReplicationConfiguration createPublicIP(Boolean createPublicIP) {
    this.createPublicIP = createPublicIP;
    return this;
  }

  /**
   * Get createPublicIP
   * @return createPublicIP
   */
  @javax.annotation.Nullable
  public Boolean getCreatePublicIP() {
    return createPublicIP;
  }

  public void setCreatePublicIP(Boolean createPublicIP) {
    this.createPublicIP = createPublicIP;
  }


  public ReplicationConfiguration dataPlaneRouting(ReplicationConfigurationDataPlaneRouting dataPlaneRouting) {
    this.dataPlaneRouting = dataPlaneRouting;
    return this;
  }

  /**
   * Get dataPlaneRouting
   * @return dataPlaneRouting
   */
  @javax.annotation.Nullable
  public ReplicationConfigurationDataPlaneRouting getDataPlaneRouting() {
    return dataPlaneRouting;
  }

  public void setDataPlaneRouting(ReplicationConfigurationDataPlaneRouting dataPlaneRouting) {
    this.dataPlaneRouting = dataPlaneRouting;
  }


  public ReplicationConfiguration defaultLargeStagingDiskType(ReplicationConfigurationDefaultLargeStagingDiskType defaultLargeStagingDiskType) {
    this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
    return this;
  }

  /**
   * Get defaultLargeStagingDiskType
   * @return defaultLargeStagingDiskType
   */
  @javax.annotation.Nullable
  public ReplicationConfigurationDefaultLargeStagingDiskType getDefaultLargeStagingDiskType() {
    return defaultLargeStagingDiskType;
  }

  public void setDefaultLargeStagingDiskType(ReplicationConfigurationDefaultLargeStagingDiskType defaultLargeStagingDiskType) {
    this.defaultLargeStagingDiskType = defaultLargeStagingDiskType;
  }


  public ReplicationConfiguration ebsEncryption(ReplicationConfigurationEbsEncryption ebsEncryption) {
    this.ebsEncryption = ebsEncryption;
    return this;
  }

  /**
   * Get ebsEncryption
   * @return ebsEncryption
   */
  @javax.annotation.Nullable
  public ReplicationConfigurationEbsEncryption getEbsEncryption() {
    return ebsEncryption;
  }

  public void setEbsEncryption(ReplicationConfigurationEbsEncryption ebsEncryption) {
    this.ebsEncryption = ebsEncryption;
  }


  public ReplicationConfiguration ebsEncryptionKeyArn(String ebsEncryptionKeyArn) {
    this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
    return this;
  }

  /**
   * Get ebsEncryptionKeyArn
   * @return ebsEncryptionKeyArn
   */
  @javax.annotation.Nullable
  public String getEbsEncryptionKeyArn() {
    return ebsEncryptionKeyArn;
  }

  public void setEbsEncryptionKeyArn(String ebsEncryptionKeyArn) {
    this.ebsEncryptionKeyArn = ebsEncryptionKeyArn;
  }


  public ReplicationConfiguration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReplicationConfiguration replicatedDisks(List replicatedDisks) {
    this.replicatedDisks = replicatedDisks;
    return this;
  }

  /**
   * Get replicatedDisks
   * @return replicatedDisks
   */
  @javax.annotation.Nullable
  public List getReplicatedDisks() {
    return replicatedDisks;
  }

  public void setReplicatedDisks(List replicatedDisks) {
    this.replicatedDisks = replicatedDisks;
  }


  public ReplicationConfiguration replicationServerInstanceType(String replicationServerInstanceType) {
    this.replicationServerInstanceType = replicationServerInstanceType;
    return this;
  }

  /**
   * Get replicationServerInstanceType
   * @return replicationServerInstanceType
   */
  @javax.annotation.Nullable
  public String getReplicationServerInstanceType() {
    return replicationServerInstanceType;
  }

  public void setReplicationServerInstanceType(String replicationServerInstanceType) {
    this.replicationServerInstanceType = replicationServerInstanceType;
  }


  public ReplicationConfiguration replicationServersSecurityGroupsIDs(List replicationServersSecurityGroupsIDs) {
    this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
    return this;
  }

  /**
   * Get replicationServersSecurityGroupsIDs
   * @return replicationServersSecurityGroupsIDs
   */
  @javax.annotation.Nullable
  public List getReplicationServersSecurityGroupsIDs() {
    return replicationServersSecurityGroupsIDs;
  }

  public void setReplicationServersSecurityGroupsIDs(List replicationServersSecurityGroupsIDs) {
    this.replicationServersSecurityGroupsIDs = replicationServersSecurityGroupsIDs;
  }


  public ReplicationConfiguration sourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
    return this;
  }

  /**
   * Get sourceServerID
   * @return sourceServerID
   */
  @javax.annotation.Nullable
  public String getSourceServerID() {
    return sourceServerID;
  }

  public void setSourceServerID(String sourceServerID) {
    this.sourceServerID = sourceServerID;
  }


  public ReplicationConfiguration stagingAreaSubnetId(String stagingAreaSubnetId) {
    this.stagingAreaSubnetId = stagingAreaSubnetId;
    return this;
  }

  /**
   * Get stagingAreaSubnetId
   * @return stagingAreaSubnetId
   */
  @javax.annotation.Nullable
  public String getStagingAreaSubnetId() {
    return stagingAreaSubnetId;
  }

  public void setStagingAreaSubnetId(String stagingAreaSubnetId) {
    this.stagingAreaSubnetId = stagingAreaSubnetId;
  }


  public ReplicationConfiguration stagingAreaTags(Map stagingAreaTags) {
    this.stagingAreaTags = stagingAreaTags;
    return this;
  }

  /**
   * Get stagingAreaTags
   * @return stagingAreaTags
   */
  @javax.annotation.Nullable
  public Map getStagingAreaTags() {
    return stagingAreaTags;
  }

  public void setStagingAreaTags(Map stagingAreaTags) {
    this.stagingAreaTags = stagingAreaTags;
  }


  public ReplicationConfiguration useDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
    this.useDedicatedReplicationServer = useDedicatedReplicationServer;
    return this;
  }

  /**
   * Get useDedicatedReplicationServer
   * @return useDedicatedReplicationServer
   */
  @javax.annotation.Nullable
  public Boolean getUseDedicatedReplicationServer() {
    return useDedicatedReplicationServer;
  }

  public void setUseDedicatedReplicationServer(Boolean useDedicatedReplicationServer) {
    this.useDedicatedReplicationServer = useDedicatedReplicationServer;
  }


  public ReplicationConfiguration useFipsEndpoint(Boolean useFipsEndpoint) {
    this.useFipsEndpoint = useFipsEndpoint;
    return this;
  }

  /**
   * Get useFipsEndpoint
   * @return useFipsEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getUseFipsEndpoint() {
    return useFipsEndpoint;
  }

  public void setUseFipsEndpoint(Boolean useFipsEndpoint) {
    this.useFipsEndpoint = useFipsEndpoint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationConfiguration replicationConfiguration = (ReplicationConfiguration) o;
    return Objects.equals(this.associateDefaultSecurityGroup, replicationConfiguration.associateDefaultSecurityGroup) &&
        Objects.equals(this.bandwidthThrottling, replicationConfiguration.bandwidthThrottling) &&
        Objects.equals(this.createPublicIP, replicationConfiguration.createPublicIP) &&
        Objects.equals(this.dataPlaneRouting, replicationConfiguration.dataPlaneRouting) &&
        Objects.equals(this.defaultLargeStagingDiskType, replicationConfiguration.defaultLargeStagingDiskType) &&
        Objects.equals(this.ebsEncryption, replicationConfiguration.ebsEncryption) &&
        Objects.equals(this.ebsEncryptionKeyArn, replicationConfiguration.ebsEncryptionKeyArn) &&
        Objects.equals(this.name, replicationConfiguration.name) &&
        Objects.equals(this.replicatedDisks, replicationConfiguration.replicatedDisks) &&
        Objects.equals(this.replicationServerInstanceType, replicationConfiguration.replicationServerInstanceType) &&
        Objects.equals(this.replicationServersSecurityGroupsIDs, replicationConfiguration.replicationServersSecurityGroupsIDs) &&
        Objects.equals(this.sourceServerID, replicationConfiguration.sourceServerID) &&
        Objects.equals(this.stagingAreaSubnetId, replicationConfiguration.stagingAreaSubnetId) &&
        Objects.equals(this.stagingAreaTags, replicationConfiguration.stagingAreaTags) &&
        Objects.equals(this.useDedicatedReplicationServer, replicationConfiguration.useDedicatedReplicationServer) &&
        Objects.equals(this.useFipsEndpoint, replicationConfiguration.useFipsEndpoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associateDefaultSecurityGroup, bandwidthThrottling, createPublicIP, dataPlaneRouting, defaultLargeStagingDiskType, ebsEncryption, ebsEncryptionKeyArn, name, replicatedDisks, replicationServerInstanceType, replicationServersSecurityGroupsIDs, sourceServerID, stagingAreaSubnetId, stagingAreaTags, useDedicatedReplicationServer, useFipsEndpoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationConfiguration {\n");
    sb.append("    associateDefaultSecurityGroup: ").append(toIndentedString(associateDefaultSecurityGroup)).append("\n");
    sb.append("    bandwidthThrottling: ").append(toIndentedString(bandwidthThrottling)).append("\n");
    sb.append("    createPublicIP: ").append(toIndentedString(createPublicIP)).append("\n");
    sb.append("    dataPlaneRouting: ").append(toIndentedString(dataPlaneRouting)).append("\n");
    sb.append("    defaultLargeStagingDiskType: ").append(toIndentedString(defaultLargeStagingDiskType)).append("\n");
    sb.append("    ebsEncryption: ").append(toIndentedString(ebsEncryption)).append("\n");
    sb.append("    ebsEncryptionKeyArn: ").append(toIndentedString(ebsEncryptionKeyArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    replicatedDisks: ").append(toIndentedString(replicatedDisks)).append("\n");
    sb.append("    replicationServerInstanceType: ").append(toIndentedString(replicationServerInstanceType)).append("\n");
    sb.append("    replicationServersSecurityGroupsIDs: ").append(toIndentedString(replicationServersSecurityGroupsIDs)).append("\n");
    sb.append("    sourceServerID: ").append(toIndentedString(sourceServerID)).append("\n");
    sb.append("    stagingAreaSubnetId: ").append(toIndentedString(stagingAreaSubnetId)).append("\n");
    sb.append("    stagingAreaTags: ").append(toIndentedString(stagingAreaTags)).append("\n");
    sb.append("    useDedicatedReplicationServer: ").append(toIndentedString(useDedicatedReplicationServer)).append("\n");
    sb.append("    useFipsEndpoint: ").append(toIndentedString(useFipsEndpoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associateDefaultSecurityGroup");
    openapiFields.add("bandwidthThrottling");
    openapiFields.add("createPublicIP");
    openapiFields.add("dataPlaneRouting");
    openapiFields.add("defaultLargeStagingDiskType");
    openapiFields.add("ebsEncryption");
    openapiFields.add("ebsEncryptionKeyArn");
    openapiFields.add("name");
    openapiFields.add("replicatedDisks");
    openapiFields.add("replicationServerInstanceType");
    openapiFields.add("replicationServersSecurityGroupsIDs");
    openapiFields.add("sourceServerID");
    openapiFields.add("stagingAreaSubnetId");
    openapiFields.add("stagingAreaTags");
    openapiFields.add("useDedicatedReplicationServer");
    openapiFields.add("useFipsEndpoint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationConfiguration is not found in the empty JSON string", ReplicationConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `associateDefaultSecurityGroup`
      if (jsonObj.get("associateDefaultSecurityGroup") != null && !jsonObj.get("associateDefaultSecurityGroup").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("associateDefaultSecurityGroup"));
      }
      // validate the optional field `bandwidthThrottling`
      if (jsonObj.get("bandwidthThrottling") != null && !jsonObj.get("bandwidthThrottling").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("bandwidthThrottling"));
      }
      // validate the optional field `createPublicIP`
      if (jsonObj.get("createPublicIP") != null && !jsonObj.get("createPublicIP").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("createPublicIP"));
      }
      // validate the optional field `dataPlaneRouting`
      if (jsonObj.get("dataPlaneRouting") != null && !jsonObj.get("dataPlaneRouting").isJsonNull()) {
        ReplicationConfigurationDataPlaneRouting.validateJsonElement(jsonObj.get("dataPlaneRouting"));
      }
      // validate the optional field `defaultLargeStagingDiskType`
      if (jsonObj.get("defaultLargeStagingDiskType") != null && !jsonObj.get("defaultLargeStagingDiskType").isJsonNull()) {
        ReplicationConfigurationDefaultLargeStagingDiskType.validateJsonElement(jsonObj.get("defaultLargeStagingDiskType"));
      }
      // validate the optional field `ebsEncryption`
      if (jsonObj.get("ebsEncryption") != null && !jsonObj.get("ebsEncryption").isJsonNull()) {
        ReplicationConfigurationEbsEncryption.validateJsonElement(jsonObj.get("ebsEncryption"));
      }
      // validate the optional field `ebsEncryptionKeyArn`
      if (jsonObj.get("ebsEncryptionKeyArn") != null && !jsonObj.get("ebsEncryptionKeyArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ebsEncryptionKeyArn"));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `replicatedDisks`
      if (jsonObj.get("replicatedDisks") != null && !jsonObj.get("replicatedDisks").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("replicatedDisks"));
      }
      // validate the optional field `replicationServerInstanceType`
      if (jsonObj.get("replicationServerInstanceType") != null && !jsonObj.get("replicationServerInstanceType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("replicationServerInstanceType"));
      }
      // validate the optional field `replicationServersSecurityGroupsIDs`
      if (jsonObj.get("replicationServersSecurityGroupsIDs") != null && !jsonObj.get("replicationServersSecurityGroupsIDs").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("replicationServersSecurityGroupsIDs"));
      }
      // validate the optional field `sourceServerID`
      if (jsonObj.get("sourceServerID") != null && !jsonObj.get("sourceServerID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("sourceServerID"));
      }
      // validate the optional field `stagingAreaSubnetId`
      if (jsonObj.get("stagingAreaSubnetId") != null && !jsonObj.get("stagingAreaSubnetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("stagingAreaSubnetId"));
      }
      // validate the optional field `stagingAreaTags`
      if (jsonObj.get("stagingAreaTags") != null && !jsonObj.get("stagingAreaTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("stagingAreaTags"));
      }
      // validate the optional field `useDedicatedReplicationServer`
      if (jsonObj.get("useDedicatedReplicationServer") != null && !jsonObj.get("useDedicatedReplicationServer").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useDedicatedReplicationServer"));
      }
      // validate the optional field `useFipsEndpoint`
      if (jsonObj.get("useFipsEndpoint") != null && !jsonObj.get("useFipsEndpoint").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("useFipsEndpoint"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationConfiguration>() {
           @Override
           public void write(JsonWriter out, ReplicationConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationConfiguration
   * @throws IOException if the JSON string is invalid with respect to ReplicationConfiguration
   */
  public static ReplicationConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationConfiguration.class);
  }

  /**
   * Convert an instance of ReplicationConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

