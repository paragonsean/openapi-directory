/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReplicationConfigurationReplicatedDiskStagingDiskType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Replication Configuration replicated disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicationConfigurationReplicatedDisk {
  public static final String SERIALIZED_NAME_DEVICE_NAME = "deviceName";
  @SerializedName(SERIALIZED_NAME_DEVICE_NAME)
  private String deviceName;

  public static final String SERIALIZED_NAME_IOPS = "iops";
  @SerializedName(SERIALIZED_NAME_IOPS)
  private Integer iops;

  public static final String SERIALIZED_NAME_IS_BOOT_DISK = "isBootDisk";
  @SerializedName(SERIALIZED_NAME_IS_BOOT_DISK)
  private Boolean isBootDisk;

  public static final String SERIALIZED_NAME_STAGING_DISK_TYPE = "stagingDiskType";
  @SerializedName(SERIALIZED_NAME_STAGING_DISK_TYPE)
  private ReplicationConfigurationReplicatedDiskStagingDiskType stagingDiskType;

  public static final String SERIALIZED_NAME_THROUGHPUT = "throughput";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT)
  private Integer throughput;

  public ReplicationConfigurationReplicatedDisk() {
  }

  public ReplicationConfigurationReplicatedDisk deviceName(String deviceName) {
    this.deviceName = deviceName;
    return this;
  }

  /**
   * Get deviceName
   * @return deviceName
   */
  @javax.annotation.Nullable
  public String getDeviceName() {
    return deviceName;
  }

  public void setDeviceName(String deviceName) {
    this.deviceName = deviceName;
  }


  public ReplicationConfigurationReplicatedDisk iops(Integer iops) {
    this.iops = iops;
    return this;
  }

  /**
   * Get iops
   * @return iops
   */
  @javax.annotation.Nullable
  public Integer getIops() {
    return iops;
  }

  public void setIops(Integer iops) {
    this.iops = iops;
  }


  public ReplicationConfigurationReplicatedDisk isBootDisk(Boolean isBootDisk) {
    this.isBootDisk = isBootDisk;
    return this;
  }

  /**
   * Get isBootDisk
   * @return isBootDisk
   */
  @javax.annotation.Nullable
  public Boolean getIsBootDisk() {
    return isBootDisk;
  }

  public void setIsBootDisk(Boolean isBootDisk) {
    this.isBootDisk = isBootDisk;
  }


  public ReplicationConfigurationReplicatedDisk stagingDiskType(ReplicationConfigurationReplicatedDiskStagingDiskType stagingDiskType) {
    this.stagingDiskType = stagingDiskType;
    return this;
  }

  /**
   * Get stagingDiskType
   * @return stagingDiskType
   */
  @javax.annotation.Nullable
  public ReplicationConfigurationReplicatedDiskStagingDiskType getStagingDiskType() {
    return stagingDiskType;
  }

  public void setStagingDiskType(ReplicationConfigurationReplicatedDiskStagingDiskType stagingDiskType) {
    this.stagingDiskType = stagingDiskType;
  }


  public ReplicationConfigurationReplicatedDisk throughput(Integer throughput) {
    this.throughput = throughput;
    return this;
  }

  /**
   * Get throughput
   * @return throughput
   */
  @javax.annotation.Nullable
  public Integer getThroughput() {
    return throughput;
  }

  public void setThroughput(Integer throughput) {
    this.throughput = throughput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicationConfigurationReplicatedDisk replicationConfigurationReplicatedDisk = (ReplicationConfigurationReplicatedDisk) o;
    return Objects.equals(this.deviceName, replicationConfigurationReplicatedDisk.deviceName) &&
        Objects.equals(this.iops, replicationConfigurationReplicatedDisk.iops) &&
        Objects.equals(this.isBootDisk, replicationConfigurationReplicatedDisk.isBootDisk) &&
        Objects.equals(this.stagingDiskType, replicationConfigurationReplicatedDisk.stagingDiskType) &&
        Objects.equals(this.throughput, replicationConfigurationReplicatedDisk.throughput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceName, iops, isBootDisk, stagingDiskType, throughput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicationConfigurationReplicatedDisk {\n");
    sb.append("    deviceName: ").append(toIndentedString(deviceName)).append("\n");
    sb.append("    iops: ").append(toIndentedString(iops)).append("\n");
    sb.append("    isBootDisk: ").append(toIndentedString(isBootDisk)).append("\n");
    sb.append("    stagingDiskType: ").append(toIndentedString(stagingDiskType)).append("\n");
    sb.append("    throughput: ").append(toIndentedString(throughput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deviceName");
    openapiFields.add("iops");
    openapiFields.add("isBootDisk");
    openapiFields.add("stagingDiskType");
    openapiFields.add("throughput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicationConfigurationReplicatedDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicationConfigurationReplicatedDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicationConfigurationReplicatedDisk is not found in the empty JSON string", ReplicationConfigurationReplicatedDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicationConfigurationReplicatedDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicationConfigurationReplicatedDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deviceName`
      if (jsonObj.get("deviceName") != null && !jsonObj.get("deviceName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("deviceName"));
      }
      // validate the optional field `iops`
      if (jsonObj.get("iops") != null && !jsonObj.get("iops").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("iops"));
      }
      // validate the optional field `isBootDisk`
      if (jsonObj.get("isBootDisk") != null && !jsonObj.get("isBootDisk").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("isBootDisk"));
      }
      // validate the optional field `stagingDiskType`
      if (jsonObj.get("stagingDiskType") != null && !jsonObj.get("stagingDiskType").isJsonNull()) {
        ReplicationConfigurationReplicatedDiskStagingDiskType.validateJsonElement(jsonObj.get("stagingDiskType"));
      }
      // validate the optional field `throughput`
      if (jsonObj.get("throughput") != null && !jsonObj.get("throughput").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("throughput"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicationConfigurationReplicatedDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicationConfigurationReplicatedDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicationConfigurationReplicatedDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicationConfigurationReplicatedDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicationConfigurationReplicatedDisk>() {
           @Override
           public void write(JsonWriter out, ReplicationConfigurationReplicatedDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicationConfigurationReplicatedDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicationConfigurationReplicatedDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicationConfigurationReplicatedDisk
   * @throws IOException if the JSON string is invalid with respect to ReplicationConfigurationReplicatedDisk
   */
  public static ReplicationConfigurationReplicatedDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicationConfigurationReplicatedDisk.class);
  }

  /**
   * Convert an instance of ReplicationConfigurationReplicatedDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

