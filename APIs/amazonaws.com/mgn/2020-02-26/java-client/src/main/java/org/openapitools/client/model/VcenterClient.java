/*
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * vCenter client.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:02:53.074954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VcenterClient {
  public static final String SERIALIZED_NAME_ARN = "arn";
  @SerializedName(SERIALIZED_NAME_ARN)
  private String arn;

  public static final String SERIALIZED_NAME_DATACENTER_NAME = "datacenterName";
  @SerializedName(SERIALIZED_NAME_DATACENTER_NAME)
  private String datacenterName;

  public static final String SERIALIZED_NAME_HOSTNAME = "hostname";
  @SerializedName(SERIALIZED_NAME_HOSTNAME)
  private String hostname;

  public static final String SERIALIZED_NAME_LAST_SEEN_DATETIME = "lastSeenDatetime";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN_DATETIME)
  private String lastSeenDatetime;

  public static final String SERIALIZED_NAME_SOURCE_SERVER_TAGS = "sourceServerTags";
  @SerializedName(SERIALIZED_NAME_SOURCE_SERVER_TAGS)
  private Map sourceServerTags;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_VCENTER_CLIENT_I_D = "vcenterClientID";
  @SerializedName(SERIALIZED_NAME_VCENTER_CLIENT_I_D)
  private String vcenterClientID;

  public static final String SERIALIZED_NAME_VCENTER_U_U_I_D = "vcenterUUID";
  @SerializedName(SERIALIZED_NAME_VCENTER_U_U_I_D)
  private String vcenterUUID;

  public VcenterClient() {
  }

  public VcenterClient arn(String arn) {
    this.arn = arn;
    return this;
  }

  /**
   * Get arn
   * @return arn
   */
  @javax.annotation.Nullable
  public String getArn() {
    return arn;
  }

  public void setArn(String arn) {
    this.arn = arn;
  }


  public VcenterClient datacenterName(String datacenterName) {
    this.datacenterName = datacenterName;
    return this;
  }

  /**
   * Get datacenterName
   * @return datacenterName
   */
  @javax.annotation.Nullable
  public String getDatacenterName() {
    return datacenterName;
  }

  public void setDatacenterName(String datacenterName) {
    this.datacenterName = datacenterName;
  }


  public VcenterClient hostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  /**
   * Get hostname
   * @return hostname
   */
  @javax.annotation.Nullable
  public String getHostname() {
    return hostname;
  }

  public void setHostname(String hostname) {
    this.hostname = hostname;
  }


  public VcenterClient lastSeenDatetime(String lastSeenDatetime) {
    this.lastSeenDatetime = lastSeenDatetime;
    return this;
  }

  /**
   * Get lastSeenDatetime
   * @return lastSeenDatetime
   */
  @javax.annotation.Nullable
  public String getLastSeenDatetime() {
    return lastSeenDatetime;
  }

  public void setLastSeenDatetime(String lastSeenDatetime) {
    this.lastSeenDatetime = lastSeenDatetime;
  }


  public VcenterClient sourceServerTags(Map sourceServerTags) {
    this.sourceServerTags = sourceServerTags;
    return this;
  }

  /**
   * Get sourceServerTags
   * @return sourceServerTags
   */
  @javax.annotation.Nullable
  public Map getSourceServerTags() {
    return sourceServerTags;
  }

  public void setSourceServerTags(Map sourceServerTags) {
    this.sourceServerTags = sourceServerTags;
  }


  public VcenterClient tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public VcenterClient vcenterClientID(String vcenterClientID) {
    this.vcenterClientID = vcenterClientID;
    return this;
  }

  /**
   * Get vcenterClientID
   * @return vcenterClientID
   */
  @javax.annotation.Nullable
  public String getVcenterClientID() {
    return vcenterClientID;
  }

  public void setVcenterClientID(String vcenterClientID) {
    this.vcenterClientID = vcenterClientID;
  }


  public VcenterClient vcenterUUID(String vcenterUUID) {
    this.vcenterUUID = vcenterUUID;
    return this;
  }

  /**
   * Get vcenterUUID
   * @return vcenterUUID
   */
  @javax.annotation.Nullable
  public String getVcenterUUID() {
    return vcenterUUID;
  }

  public void setVcenterUUID(String vcenterUUID) {
    this.vcenterUUID = vcenterUUID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VcenterClient vcenterClient = (VcenterClient) o;
    return Objects.equals(this.arn, vcenterClient.arn) &&
        Objects.equals(this.datacenterName, vcenterClient.datacenterName) &&
        Objects.equals(this.hostname, vcenterClient.hostname) &&
        Objects.equals(this.lastSeenDatetime, vcenterClient.lastSeenDatetime) &&
        Objects.equals(this.sourceServerTags, vcenterClient.sourceServerTags) &&
        Objects.equals(this.tags, vcenterClient.tags) &&
        Objects.equals(this.vcenterClientID, vcenterClient.vcenterClientID) &&
        Objects.equals(this.vcenterUUID, vcenterClient.vcenterUUID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arn, datacenterName, hostname, lastSeenDatetime, sourceServerTags, tags, vcenterClientID, vcenterUUID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VcenterClient {\n");
    sb.append("    arn: ").append(toIndentedString(arn)).append("\n");
    sb.append("    datacenterName: ").append(toIndentedString(datacenterName)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    lastSeenDatetime: ").append(toIndentedString(lastSeenDatetime)).append("\n");
    sb.append("    sourceServerTags: ").append(toIndentedString(sourceServerTags)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    vcenterClientID: ").append(toIndentedString(vcenterClientID)).append("\n");
    sb.append("    vcenterUUID: ").append(toIndentedString(vcenterUUID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arn");
    openapiFields.add("datacenterName");
    openapiFields.add("hostname");
    openapiFields.add("lastSeenDatetime");
    openapiFields.add("sourceServerTags");
    openapiFields.add("tags");
    openapiFields.add("vcenterClientID");
    openapiFields.add("vcenterUUID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VcenterClient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VcenterClient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VcenterClient is not found in the empty JSON string", VcenterClient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VcenterClient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VcenterClient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arn`
      if (jsonObj.get("arn") != null && !jsonObj.get("arn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("arn"));
      }
      // validate the optional field `datacenterName`
      if (jsonObj.get("datacenterName") != null && !jsonObj.get("datacenterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("datacenterName"));
      }
      // validate the optional field `hostname`
      if (jsonObj.get("hostname") != null && !jsonObj.get("hostname").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("hostname"));
      }
      // validate the optional field `lastSeenDatetime`
      if (jsonObj.get("lastSeenDatetime") != null && !jsonObj.get("lastSeenDatetime").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("lastSeenDatetime"));
      }
      // validate the optional field `sourceServerTags`
      if (jsonObj.get("sourceServerTags") != null && !jsonObj.get("sourceServerTags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("sourceServerTags"));
      }
      // validate the optional field `tags`
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("tags"));
      }
      // validate the optional field `vcenterClientID`
      if (jsonObj.get("vcenterClientID") != null && !jsonObj.get("vcenterClientID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vcenterClientID"));
      }
      // validate the optional field `vcenterUUID`
      if (jsonObj.get("vcenterUUID") != null && !jsonObj.get("vcenterUUID").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("vcenterUUID"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VcenterClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VcenterClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VcenterClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VcenterClient.class));

       return (TypeAdapter<T>) new TypeAdapter<VcenterClient>() {
           @Override
           public void write(JsonWriter out, VcenterClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VcenterClient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VcenterClient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VcenterClient
   * @throws IOException if the JSON string is invalid with respect to VcenterClient
   */
  public static VcenterClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VcenterClient.class);
  }

  /**
   * Convert an instance of VcenterClient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

