# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.list_applications_request_filters import ListApplicationsRequestFilters
import re
from openapi_server import util


class ListApplicationsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, filters: ListApplicationsRequestFilters=None, max_results: int=None, next_token: str=None):
        """ListApplicationsRequest - a model defined in OpenAPI

        :param account_id: The account_id of this ListApplicationsRequest.
        :param filters: The filters of this ListApplicationsRequest.
        :param max_results: The max_results of this ListApplicationsRequest.
        :param next_token: The next_token of this ListApplicationsRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'filters': ListApplicationsRequestFilters,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._account_id = account_id
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListApplicationsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListApplications_request of this ListApplicationsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this ListApplicationsRequest.

        Applications list Account ID.

        :return: The account_id of this ListApplicationsRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this ListApplicationsRequest.

        Applications list Account ID.

        :param account_id: The account_id of this ListApplicationsRequest.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'[0-9]{12,}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/[0-9]{12,}/`")

        self._account_id = account_id

    @property
    def filters(self):
        """Gets the filters of this ListApplicationsRequest.


        :return: The filters of this ListApplicationsRequest.
        :rtype: ListApplicationsRequestFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ListApplicationsRequest.


        :param filters: The filters of this ListApplicationsRequest.
        :type filters: ListApplicationsRequestFilters
        """

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this ListApplicationsRequest.

        Maximum results to return when listing applications.

        :return: The max_results of this ListApplicationsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListApplicationsRequest.

        Maximum results to return when listing applications.

        :param max_results: The max_results of this ListApplicationsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListApplicationsRequest.

        Request next token.

        :return: The next_token of this ListApplicationsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListApplicationsRequest.

        Request next token.

        :param next_token: The next_token of this ListApplicationsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")

        self._next_token = next_token
