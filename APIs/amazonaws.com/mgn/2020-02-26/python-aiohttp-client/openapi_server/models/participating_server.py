# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.launch_status import LaunchStatus
from openapi_server.models.participating_server_post_launch_actions_status import ParticipatingServerPostLaunchActionsStatus
from openapi_server import util


class ParticipatingServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, launch_status: LaunchStatus=None, launched_ec2_instance_id: str=None, post_launch_actions_status: ParticipatingServerPostLaunchActionsStatus=None, source_server_id: str=None):
        """ParticipatingServer - a model defined in OpenAPI

        :param launch_status: The launch_status of this ParticipatingServer.
        :param launched_ec2_instance_id: The launched_ec2_instance_id of this ParticipatingServer.
        :param post_launch_actions_status: The post_launch_actions_status of this ParticipatingServer.
        :param source_server_id: The source_server_id of this ParticipatingServer.
        """
        self.openapi_types = {
            'launch_status': LaunchStatus,
            'launched_ec2_instance_id': str,
            'post_launch_actions_status': ParticipatingServerPostLaunchActionsStatus,
            'source_server_id': str
        }

        self.attribute_map = {
            'launch_status': 'launchStatus',
            'launched_ec2_instance_id': 'launchedEc2InstanceID',
            'post_launch_actions_status': 'postLaunchActionsStatus',
            'source_server_id': 'sourceServerID'
        }

        self._launch_status = launch_status
        self._launched_ec2_instance_id = launched_ec2_instance_id
        self._post_launch_actions_status = post_launch_actions_status
        self._source_server_id = source_server_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParticipatingServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParticipatingServer of this ParticipatingServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def launch_status(self):
        """Gets the launch_status of this ParticipatingServer.


        :return: The launch_status of this ParticipatingServer.
        :rtype: LaunchStatus
        """
        return self._launch_status

    @launch_status.setter
    def launch_status(self, launch_status):
        """Sets the launch_status of this ParticipatingServer.


        :param launch_status: The launch_status of this ParticipatingServer.
        :type launch_status: LaunchStatus
        """

        self._launch_status = launch_status

    @property
    def launched_ec2_instance_id(self):
        """Gets the launched_ec2_instance_id of this ParticipatingServer.


        :return: The launched_ec2_instance_id of this ParticipatingServer.
        :rtype: str
        """
        return self._launched_ec2_instance_id

    @launched_ec2_instance_id.setter
    def launched_ec2_instance_id(self, launched_ec2_instance_id):
        """Sets the launched_ec2_instance_id of this ParticipatingServer.


        :param launched_ec2_instance_id: The launched_ec2_instance_id of this ParticipatingServer.
        :type launched_ec2_instance_id: str
        """

        self._launched_ec2_instance_id = launched_ec2_instance_id

    @property
    def post_launch_actions_status(self):
        """Gets the post_launch_actions_status of this ParticipatingServer.


        :return: The post_launch_actions_status of this ParticipatingServer.
        :rtype: ParticipatingServerPostLaunchActionsStatus
        """
        return self._post_launch_actions_status

    @post_launch_actions_status.setter
    def post_launch_actions_status(self, post_launch_actions_status):
        """Sets the post_launch_actions_status of this ParticipatingServer.


        :param post_launch_actions_status: The post_launch_actions_status of this ParticipatingServer.
        :type post_launch_actions_status: ParticipatingServerPostLaunchActionsStatus
        """

        self._post_launch_actions_status = post_launch_actions_status

    @property
    def source_server_id(self):
        """Gets the source_server_id of this ParticipatingServer.


        :return: The source_server_id of this ParticipatingServer.
        :rtype: str
        """
        return self._source_server_id

    @source_server_id.setter
    def source_server_id(self, source_server_id):
        """Sets the source_server_id of this ParticipatingServer.


        :param source_server_id: The source_server_id of this ParticipatingServer.
        :type source_server_id: str
        """
        if source_server_id is None:
            raise ValueError("Invalid value for `source_server_id`, must not be `None`")

        self._source_server_id = source_server_id
