# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TerminateTargetInstancesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, source_server_ids: List[str]=None, tags: Dict[str, str]=None):
        """TerminateTargetInstancesRequest - a model defined in OpenAPI

        :param account_id: The account_id of this TerminateTargetInstancesRequest.
        :param source_server_ids: The source_server_ids of this TerminateTargetInstancesRequest.
        :param tags: The tags of this TerminateTargetInstancesRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'source_server_ids': List[str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'source_server_ids': 'sourceServerIDs',
            'tags': 'tags'
        }

        self._account_id = account_id
        self._source_server_ids = source_server_ids
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerminateTargetInstancesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerminateTargetInstances_request of this TerminateTargetInstancesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this TerminateTargetInstancesRequest.

        Terminate Target instance by Account ID

        :return: The account_id of this TerminateTargetInstancesRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this TerminateTargetInstancesRequest.

        Terminate Target instance by Account ID

        :param account_id: The account_id of this TerminateTargetInstancesRequest.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'[0-9]{12,}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/[0-9]{12,}/`")

        self._account_id = account_id

    @property
    def source_server_ids(self):
        """Gets the source_server_ids of this TerminateTargetInstancesRequest.

        Terminate Target instance by Source Server IDs.

        :return: The source_server_ids of this TerminateTargetInstancesRequest.
        :rtype: List[str]
        """
        return self._source_server_ids

    @source_server_ids.setter
    def source_server_ids(self, source_server_ids):
        """Sets the source_server_ids of this TerminateTargetInstancesRequest.

        Terminate Target instance by Source Server IDs.

        :param source_server_ids: The source_server_ids of this TerminateTargetInstancesRequest.
        :type source_server_ids: List[str]
        """
        if source_server_ids is None:
            raise ValueError("Invalid value for `source_server_ids`, must not be `None`")
        if source_server_ids is not None and len(source_server_ids) > 200:
            raise ValueError("Invalid value for `source_server_ids`, number of items must be less than or equal to `200`")
        if source_server_ids is not None and len(source_server_ids) < 1:
            raise ValueError("Invalid value for `source_server_ids`, number of items must be greater than or equal to `1`")

        self._source_server_ids = source_server_ids

    @property
    def tags(self):
        """Gets the tags of this TerminateTargetInstancesRequest.

        Terminate Target instance by Tags.

        :return: The tags of this TerminateTargetInstancesRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TerminateTargetInstancesRequest.

        Terminate Target instance by Tags.

        :param tags: The tags of this TerminateTargetInstancesRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
