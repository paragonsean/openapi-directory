# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_category import ActionCategory
from openapi_server import util


class SourceServerActionDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: str=None, action_name: str=None, active: bool=None, category: ActionCategory=None, description: str=None, document_identifier: str=None, document_version: str=None, external_parameters: Dict=None, must_succeed_for_cutover: bool=None, order: int=None, parameters: Dict=None, timeout_seconds: int=None):
        """SourceServerActionDocument - a model defined in OpenAPI

        :param action_id: The action_id of this SourceServerActionDocument.
        :param action_name: The action_name of this SourceServerActionDocument.
        :param active: The active of this SourceServerActionDocument.
        :param category: The category of this SourceServerActionDocument.
        :param description: The description of this SourceServerActionDocument.
        :param document_identifier: The document_identifier of this SourceServerActionDocument.
        :param document_version: The document_version of this SourceServerActionDocument.
        :param external_parameters: The external_parameters of this SourceServerActionDocument.
        :param must_succeed_for_cutover: The must_succeed_for_cutover of this SourceServerActionDocument.
        :param order: The order of this SourceServerActionDocument.
        :param parameters: The parameters of this SourceServerActionDocument.
        :param timeout_seconds: The timeout_seconds of this SourceServerActionDocument.
        """
        self.openapi_types = {
            'action_id': str,
            'action_name': str,
            'active': bool,
            'category': ActionCategory,
            'description': str,
            'document_identifier': str,
            'document_version': str,
            'external_parameters': Dict,
            'must_succeed_for_cutover': bool,
            'order': int,
            'parameters': Dict,
            'timeout_seconds': int
        }

        self.attribute_map = {
            'action_id': 'actionID',
            'action_name': 'actionName',
            'active': 'active',
            'category': 'category',
            'description': 'description',
            'document_identifier': 'documentIdentifier',
            'document_version': 'documentVersion',
            'external_parameters': 'externalParameters',
            'must_succeed_for_cutover': 'mustSucceedForCutover',
            'order': 'order',
            'parameters': 'parameters',
            'timeout_seconds': 'timeoutSeconds'
        }

        self._action_id = action_id
        self._action_name = action_name
        self._active = active
        self._category = category
        self._description = description
        self._document_identifier = document_identifier
        self._document_version = document_version
        self._external_parameters = external_parameters
        self._must_succeed_for_cutover = must_succeed_for_cutover
        self._order = order
        self._parameters = parameters
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SourceServerActionDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SourceServerActionDocument of this SourceServerActionDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this SourceServerActionDocument.


        :return: The action_id of this SourceServerActionDocument.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this SourceServerActionDocument.


        :param action_id: The action_id of this SourceServerActionDocument.
        :type action_id: str
        """

        self._action_id = action_id

    @property
    def action_name(self):
        """Gets the action_name of this SourceServerActionDocument.


        :return: The action_name of this SourceServerActionDocument.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this SourceServerActionDocument.


        :param action_name: The action_name of this SourceServerActionDocument.
        :type action_name: str
        """

        self._action_name = action_name

    @property
    def active(self):
        """Gets the active of this SourceServerActionDocument.


        :return: The active of this SourceServerActionDocument.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SourceServerActionDocument.


        :param active: The active of this SourceServerActionDocument.
        :type active: bool
        """

        self._active = active

    @property
    def category(self):
        """Gets the category of this SourceServerActionDocument.


        :return: The category of this SourceServerActionDocument.
        :rtype: ActionCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SourceServerActionDocument.


        :param category: The category of this SourceServerActionDocument.
        :type category: ActionCategory
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this SourceServerActionDocument.


        :return: The description of this SourceServerActionDocument.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SourceServerActionDocument.


        :param description: The description of this SourceServerActionDocument.
        :type description: str
        """

        self._description = description

    @property
    def document_identifier(self):
        """Gets the document_identifier of this SourceServerActionDocument.


        :return: The document_identifier of this SourceServerActionDocument.
        :rtype: str
        """
        return self._document_identifier

    @document_identifier.setter
    def document_identifier(self, document_identifier):
        """Sets the document_identifier of this SourceServerActionDocument.


        :param document_identifier: The document_identifier of this SourceServerActionDocument.
        :type document_identifier: str
        """

        self._document_identifier = document_identifier

    @property
    def document_version(self):
        """Gets the document_version of this SourceServerActionDocument.


        :return: The document_version of this SourceServerActionDocument.
        :rtype: str
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this SourceServerActionDocument.


        :param document_version: The document_version of this SourceServerActionDocument.
        :type document_version: str
        """

        self._document_version = document_version

    @property
    def external_parameters(self):
        """Gets the external_parameters of this SourceServerActionDocument.


        :return: The external_parameters of this SourceServerActionDocument.
        :rtype: Dict
        """
        return self._external_parameters

    @external_parameters.setter
    def external_parameters(self, external_parameters):
        """Sets the external_parameters of this SourceServerActionDocument.


        :param external_parameters: The external_parameters of this SourceServerActionDocument.
        :type external_parameters: Dict
        """

        self._external_parameters = external_parameters

    @property
    def must_succeed_for_cutover(self):
        """Gets the must_succeed_for_cutover of this SourceServerActionDocument.


        :return: The must_succeed_for_cutover of this SourceServerActionDocument.
        :rtype: bool
        """
        return self._must_succeed_for_cutover

    @must_succeed_for_cutover.setter
    def must_succeed_for_cutover(self, must_succeed_for_cutover):
        """Sets the must_succeed_for_cutover of this SourceServerActionDocument.


        :param must_succeed_for_cutover: The must_succeed_for_cutover of this SourceServerActionDocument.
        :type must_succeed_for_cutover: bool
        """

        self._must_succeed_for_cutover = must_succeed_for_cutover

    @property
    def order(self):
        """Gets the order of this SourceServerActionDocument.


        :return: The order of this SourceServerActionDocument.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this SourceServerActionDocument.


        :param order: The order of this SourceServerActionDocument.
        :type order: int
        """

        self._order = order

    @property
    def parameters(self):
        """Gets the parameters of this SourceServerActionDocument.


        :return: The parameters of this SourceServerActionDocument.
        :rtype: Dict
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this SourceServerActionDocument.


        :param parameters: The parameters of this SourceServerActionDocument.
        :type parameters: Dict
        """

        self._parameters = parameters

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this SourceServerActionDocument.


        :return: The timeout_seconds of this SourceServerActionDocument.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this SourceServerActionDocument.


        :param timeout_seconds: The timeout_seconds of this SourceServerActionDocument.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds
