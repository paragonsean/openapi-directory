# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.start_import_request_s3_bucket_source import StartImportRequestS3BucketSource
from openapi_server import util


class StartImportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token: str=None, s3_bucket_source: StartImportRequestS3BucketSource=None):
        """StartImportRequest - a model defined in OpenAPI

        :param client_token: The client_token of this StartImportRequest.
        :param s3_bucket_source: The s3_bucket_source of this StartImportRequest.
        """
        self.openapi_types = {
            'client_token': str,
            's3_bucket_source': StartImportRequestS3BucketSource
        }

        self.attribute_map = {
            'client_token': 'clientToken',
            's3_bucket_source': 's3BucketSource'
        }

        self._client_token = client_token
        self._s3_bucket_source = s3_bucket_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartImportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartImport_request of this StartImportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token(self):
        """Gets the client_token of this StartImportRequest.

        Start import request client token.

        :return: The client_token of this StartImportRequest.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this StartImportRequest.

        Start import request client token.

        :param client_token: The client_token of this StartImportRequest.
        :type client_token: str
        """
        if client_token is not None and len(client_token) > 64:
            raise ValueError("Invalid value for `client_token`, length must be less than or equal to `64`")
        if client_token is not None and len(client_token) < 0:
            raise ValueError("Invalid value for `client_token`, length must be greater than or equal to `0`")

        self._client_token = client_token

    @property
    def s3_bucket_source(self):
        """Gets the s3_bucket_source of this StartImportRequest.


        :return: The s3_bucket_source of this StartImportRequest.
        :rtype: StartImportRequestS3BucketSource
        """
        return self._s3_bucket_source

    @s3_bucket_source.setter
    def s3_bucket_source(self, s3_bucket_source):
        """Sets the s3_bucket_source of this StartImportRequest.


        :param s3_bucket_source: The s3_bucket_source of this StartImportRequest.
        :type s3_bucket_source: StartImportRequestS3BucketSource
        """
        if s3_bucket_source is None:
            raise ValueError("Invalid value for `s3_bucket_source`, must not be `None`")

        self._s3_bucket_source = s3_bucket_source
