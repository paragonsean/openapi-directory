# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DeleteVcenterClientRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vcenter_client_id: str=None):
        """DeleteVcenterClientRequest - a model defined in OpenAPI

        :param vcenter_client_id: The vcenter_client_id of this DeleteVcenterClientRequest.
        """
        self.openapi_types = {
            'vcenter_client_id': str
        }

        self.attribute_map = {
            'vcenter_client_id': 'vcenterClientID'
        }

        self._vcenter_client_id = vcenter_client_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteVcenterClientRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteVcenterClient_request of this DeleteVcenterClientRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vcenter_client_id(self):
        """Gets the vcenter_client_id of this DeleteVcenterClientRequest.

        ID of resource to be deleted.

        :return: The vcenter_client_id of this DeleteVcenterClientRequest.
        :rtype: str
        """
        return self._vcenter_client_id

    @vcenter_client_id.setter
    def vcenter_client_id(self, vcenter_client_id):
        """Sets the vcenter_client_id of this DeleteVcenterClientRequest.

        ID of resource to be deleted.

        :param vcenter_client_id: The vcenter_client_id of this DeleteVcenterClientRequest.
        :type vcenter_client_id: str
        """
        if vcenter_client_id is None:
            raise ValueError("Invalid value for `vcenter_client_id`, must not be `None`")
        if vcenter_client_id is not None and len(vcenter_client_id) > 21:
            raise ValueError("Invalid value for `vcenter_client_id`, length must be less than or equal to `21`")
        if vcenter_client_id is not None and len(vcenter_client_id) < 21:
            raise ValueError("Invalid value for `vcenter_client_id`, length must be greater than or equal to `21`")
        if vcenter_client_id is not None and not re.search(r'^vcc-[0-9a-zA-Z]{17}$', vcenter_client_id):
            raise ValueError("Invalid value for `vcenter_client_id`, must be a follow pattern or equal to `/^vcc-[0-9a-zA-Z]{17}$/`")

        self._vcenter_client_id = vcenter_client_id
