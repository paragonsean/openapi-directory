# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExportTaskSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applications_count: int=None, servers_count: int=None, waves_count: int=None):
        """ExportTaskSummary - a model defined in OpenAPI

        :param applications_count: The applications_count of this ExportTaskSummary.
        :param servers_count: The servers_count of this ExportTaskSummary.
        :param waves_count: The waves_count of this ExportTaskSummary.
        """
        self.openapi_types = {
            'applications_count': int,
            'servers_count': int,
            'waves_count': int
        }

        self.attribute_map = {
            'applications_count': 'applicationsCount',
            'servers_count': 'serversCount',
            'waves_count': 'wavesCount'
        }

        self._applications_count = applications_count
        self._servers_count = servers_count
        self._waves_count = waves_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportTaskSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportTask_summary of this ExportTaskSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applications_count(self):
        """Gets the applications_count of this ExportTaskSummary.


        :return: The applications_count of this ExportTaskSummary.
        :rtype: int
        """
        return self._applications_count

    @applications_count.setter
    def applications_count(self, applications_count):
        """Sets the applications_count of this ExportTaskSummary.


        :param applications_count: The applications_count of this ExportTaskSummary.
        :type applications_count: int
        """

        self._applications_count = applications_count

    @property
    def servers_count(self):
        """Gets the servers_count of this ExportTaskSummary.


        :return: The servers_count of this ExportTaskSummary.
        :rtype: int
        """
        return self._servers_count

    @servers_count.setter
    def servers_count(self, servers_count):
        """Sets the servers_count of this ExportTaskSummary.


        :param servers_count: The servers_count of this ExportTaskSummary.
        :type servers_count: int
        """

        self._servers_count = servers_count

    @property
    def waves_count(self):
        """Gets the waves_count of this ExportTaskSummary.


        :return: The waves_count of this ExportTaskSummary.
        :rtype: int
        """
        return self._waves_count

    @waves_count.setter
    def waves_count(self, waves_count):
        """Sets the waves_count of this ExportTaskSummary.


        :param waves_count: The waves_count of this ExportTaskSummary.
        :type waves_count: int
        """

        self._waves_count = waves_count
