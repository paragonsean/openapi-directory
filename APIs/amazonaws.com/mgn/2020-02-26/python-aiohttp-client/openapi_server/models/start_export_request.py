# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class StartExportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, s3_bucket: str=None, s3_bucket_owner: str=None, s3_key: str=None):
        """StartExportRequest - a model defined in OpenAPI

        :param s3_bucket: The s3_bucket of this StartExportRequest.
        :param s3_bucket_owner: The s3_bucket_owner of this StartExportRequest.
        :param s3_key: The s3_key of this StartExportRequest.
        """
        self.openapi_types = {
            's3_bucket': str,
            's3_bucket_owner': str,
            's3_key': str
        }

        self.attribute_map = {
            's3_bucket': 's3Bucket',
            's3_bucket_owner': 's3BucketOwner',
            's3_key': 's3Key'
        }

        self._s3_bucket = s3_bucket
        self._s3_bucket_owner = s3_bucket_owner
        self._s3_key = s3_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartExportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartExport_request of this StartExportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def s3_bucket(self):
        """Gets the s3_bucket of this StartExportRequest.

        Start export request s3 bucket.

        :return: The s3_bucket of this StartExportRequest.
        :rtype: str
        """
        return self._s3_bucket

    @s3_bucket.setter
    def s3_bucket(self, s3_bucket):
        """Sets the s3_bucket of this StartExportRequest.

        Start export request s3 bucket.

        :param s3_bucket: The s3_bucket of this StartExportRequest.
        :type s3_bucket: str
        """
        if s3_bucket is None:
            raise ValueError("Invalid value for `s3_bucket`, must not be `None`")
        if s3_bucket is not None and not re.search(r'^[a-zA-Z0-9.\-_]{1,255}$', s3_bucket):
            raise ValueError("Invalid value for `s3_bucket`, must be a follow pattern or equal to `/^[a-zA-Z0-9.\-_]{1,255}$/`")

        self._s3_bucket = s3_bucket

    @property
    def s3_bucket_owner(self):
        """Gets the s3_bucket_owner of this StartExportRequest.

        Start export request s3 bucket owner.

        :return: The s3_bucket_owner of this StartExportRequest.
        :rtype: str
        """
        return self._s3_bucket_owner

    @s3_bucket_owner.setter
    def s3_bucket_owner(self, s3_bucket_owner):
        """Sets the s3_bucket_owner of this StartExportRequest.

        Start export request s3 bucket owner.

        :param s3_bucket_owner: The s3_bucket_owner of this StartExportRequest.
        :type s3_bucket_owner: str
        """
        if s3_bucket_owner is not None and len(s3_bucket_owner) > 12:
            raise ValueError("Invalid value for `s3_bucket_owner`, length must be less than or equal to `12`")
        if s3_bucket_owner is not None and len(s3_bucket_owner) < 12:
            raise ValueError("Invalid value for `s3_bucket_owner`, length must be greater than or equal to `12`")
        if s3_bucket_owner is not None and not re.search(r'[0-9]{12,}', s3_bucket_owner):
            raise ValueError("Invalid value for `s3_bucket_owner`, must be a follow pattern or equal to `/[0-9]{12,}/`")

        self._s3_bucket_owner = s3_bucket_owner

    @property
    def s3_key(self):
        """Gets the s3_key of this StartExportRequest.

        Start export request s3key.

        :return: The s3_key of this StartExportRequest.
        :rtype: str
        """
        return self._s3_key

    @s3_key.setter
    def s3_key(self, s3_key):
        """Sets the s3_key of this StartExportRequest.

        Start export request s3key.

        :param s3_key: The s3_key of this StartExportRequest.
        :type s3_key: str
        """
        if s3_key is None:
            raise ValueError("Invalid value for `s3_key`, must not be `None`")
        if s3_key is not None and not re.search(r'^[^\x00]{1,1020}\.csv$', s3_key):
            raise ValueError("Invalid value for `s3_key`, must be a follow pattern or equal to `/^[^\x00]{1,1020}\.csv$/`")

        self._s3_key = s3_key
