# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ListExportErrorsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, export_id: str=None, max_results: int=None, next_token: str=None):
        """ListExportErrorsRequest - a model defined in OpenAPI

        :param export_id: The export_id of this ListExportErrorsRequest.
        :param max_results: The max_results of this ListExportErrorsRequest.
        :param next_token: The next_token of this ListExportErrorsRequest.
        """
        self.openapi_types = {
            'export_id': str,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'export_id': 'exportID',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._export_id = export_id
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListExportErrorsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListExportErrors_request of this ListExportErrorsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def export_id(self):
        """Gets the export_id of this ListExportErrorsRequest.

        List export errors request export id.

        :return: The export_id of this ListExportErrorsRequest.
        :rtype: str
        """
        return self._export_id

    @export_id.setter
    def export_id(self, export_id):
        """Sets the export_id of this ListExportErrorsRequest.

        List export errors request export id.

        :param export_id: The export_id of this ListExportErrorsRequest.
        :type export_id: str
        """
        if export_id is None:
            raise ValueError("Invalid value for `export_id`, must not be `None`")
        if export_id is not None and len(export_id) > 24:
            raise ValueError("Invalid value for `export_id`, length must be less than or equal to `24`")
        if export_id is not None and len(export_id) < 24:
            raise ValueError("Invalid value for `export_id`, length must be greater than or equal to `24`")
        if export_id is not None and not re.search(r'^export-[0-9a-zA-Z]{17}$', export_id):
            raise ValueError("Invalid value for `export_id`, must be a follow pattern or equal to `/^export-[0-9a-zA-Z]{17}$/`")

        self._export_id = export_id

    @property
    def max_results(self):
        """Gets the max_results of this ListExportErrorsRequest.

        List export errors request max results.

        :return: The max_results of this ListExportErrorsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListExportErrorsRequest.

        List export errors request max results.

        :param max_results: The max_results of this ListExportErrorsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 1000:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `1000`")
        if max_results is not None and max_results < 1:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `1`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListExportErrorsRequest.

        List export errors request next token.

        :return: The next_token of this ListExportErrorsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListExportErrorsRequest.

        List export errors request next token.

        :param next_token: The next_token of this ListExportErrorsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 0:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `0`")

        self._next_token = next_token
