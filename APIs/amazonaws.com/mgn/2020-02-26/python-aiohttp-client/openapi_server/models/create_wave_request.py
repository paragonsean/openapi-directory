# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateWaveRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, description: str=None, name: str=None, tags: Dict[str, str]=None):
        """CreateWaveRequest - a model defined in OpenAPI

        :param account_id: The account_id of this CreateWaveRequest.
        :param description: The description of this CreateWaveRequest.
        :param name: The name of this CreateWaveRequest.
        :param tags: The tags of this CreateWaveRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'description': str,
            'name': str,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'description': 'description',
            'name': 'name',
            'tags': 'tags'
        }

        self._account_id = account_id
        self._description = description
        self._name = name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateWaveRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateWave_request of this CreateWaveRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this CreateWaveRequest.

        Account ID.

        :return: The account_id of this CreateWaveRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateWaveRequest.

        Account ID.

        :param account_id: The account_id of this CreateWaveRequest.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'[0-9]{12,}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/[0-9]{12,}/`")

        self._account_id = account_id

    @property
    def description(self):
        """Gets the description of this CreateWaveRequest.

        Wave description.

        :return: The description of this CreateWaveRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateWaveRequest.

        Wave description.

        :param description: The description of this CreateWaveRequest.
        :type description: str
        """
        if description is not None and len(description) > 600:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `600`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^[^\x00]*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[^\x00]*$/`")

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateWaveRequest.

        Wave name.

        :return: The name of this CreateWaveRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWaveRequest.

        Wave name.

        :param name: The name of this CreateWaveRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'^[^\s\x00]( *[^\s\x00])*$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^[^\s\x00]( *[^\s\x00])*$/`")

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this CreateWaveRequest.

        Wave tags.

        :return: The tags of this CreateWaveRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateWaveRequest.

        Wave tags.

        :param tags: The tags of this CreateWaveRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags
