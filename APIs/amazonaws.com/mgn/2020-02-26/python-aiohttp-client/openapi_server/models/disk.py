# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Disk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes: int=None, device_name: str=None):
        """Disk - a model defined in OpenAPI

        :param bytes: The bytes of this Disk.
        :param device_name: The device_name of this Disk.
        """
        self.openapi_types = {
            'bytes': int,
            'device_name': str
        }

        self.attribute_map = {
            'bytes': 'bytes',
            'device_name': 'deviceName'
        }

        self._bytes = bytes
        self._device_name = device_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Disk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Disk of this Disk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes(self):
        """Gets the bytes of this Disk.


        :return: The bytes of this Disk.
        :rtype: int
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this Disk.


        :param bytes: The bytes of this Disk.
        :type bytes: int
        """

        self._bytes = bytes

    @property
    def device_name(self):
        """Gets the device_name of this Disk.


        :return: The device_name of this Disk.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Disk.


        :param device_name: The device_name of this Disk.
        :type device_name: str
        """

        self._device_name = device_name
