# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.replication_configuration_replicated_disk import ReplicationConfigurationReplicatedDisk
import re
from openapi_server import util


class UpdateReplicationConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, associate_default_security_group: bool=None, bandwidth_throttling: int=None, create_public_ip: bool=None, data_plane_routing: str=None, default_large_staging_disk_type: str=None, ebs_encryption: str=None, ebs_encryption_key_arn: str=None, name: str=None, replicated_disks: List[ReplicationConfigurationReplicatedDisk]=None, replication_server_instance_type: str=None, replication_servers_security_groups_ids: List[str]=None, source_server_id: str=None, staging_area_subnet_id: str=None, staging_area_tags: Dict[str, str]=None, use_dedicated_replication_server: bool=None, use_fips_endpoint: bool=None):
        """UpdateReplicationConfigurationRequest - a model defined in OpenAPI

        :param account_id: The account_id of this UpdateReplicationConfigurationRequest.
        :param associate_default_security_group: The associate_default_security_group of this UpdateReplicationConfigurationRequest.
        :param bandwidth_throttling: The bandwidth_throttling of this UpdateReplicationConfigurationRequest.
        :param create_public_ip: The create_public_ip of this UpdateReplicationConfigurationRequest.
        :param data_plane_routing: The data_plane_routing of this UpdateReplicationConfigurationRequest.
        :param default_large_staging_disk_type: The default_large_staging_disk_type of this UpdateReplicationConfigurationRequest.
        :param ebs_encryption: The ebs_encryption of this UpdateReplicationConfigurationRequest.
        :param ebs_encryption_key_arn: The ebs_encryption_key_arn of this UpdateReplicationConfigurationRequest.
        :param name: The name of this UpdateReplicationConfigurationRequest.
        :param replicated_disks: The replicated_disks of this UpdateReplicationConfigurationRequest.
        :param replication_server_instance_type: The replication_server_instance_type of this UpdateReplicationConfigurationRequest.
        :param replication_servers_security_groups_ids: The replication_servers_security_groups_ids of this UpdateReplicationConfigurationRequest.
        :param source_server_id: The source_server_id of this UpdateReplicationConfigurationRequest.
        :param staging_area_subnet_id: The staging_area_subnet_id of this UpdateReplicationConfigurationRequest.
        :param staging_area_tags: The staging_area_tags of this UpdateReplicationConfigurationRequest.
        :param use_dedicated_replication_server: The use_dedicated_replication_server of this UpdateReplicationConfigurationRequest.
        :param use_fips_endpoint: The use_fips_endpoint of this UpdateReplicationConfigurationRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'associate_default_security_group': bool,
            'bandwidth_throttling': int,
            'create_public_ip': bool,
            'data_plane_routing': str,
            'default_large_staging_disk_type': str,
            'ebs_encryption': str,
            'ebs_encryption_key_arn': str,
            'name': str,
            'replicated_disks': List[ReplicationConfigurationReplicatedDisk],
            'replication_server_instance_type': str,
            'replication_servers_security_groups_ids': List[str],
            'source_server_id': str,
            'staging_area_subnet_id': str,
            'staging_area_tags': Dict[str, str],
            'use_dedicated_replication_server': bool,
            'use_fips_endpoint': bool
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'associate_default_security_group': 'associateDefaultSecurityGroup',
            'bandwidth_throttling': 'bandwidthThrottling',
            'create_public_ip': 'createPublicIP',
            'data_plane_routing': 'dataPlaneRouting',
            'default_large_staging_disk_type': 'defaultLargeStagingDiskType',
            'ebs_encryption': 'ebsEncryption',
            'ebs_encryption_key_arn': 'ebsEncryptionKeyArn',
            'name': 'name',
            'replicated_disks': 'replicatedDisks',
            'replication_server_instance_type': 'replicationServerInstanceType',
            'replication_servers_security_groups_ids': 'replicationServersSecurityGroupsIDs',
            'source_server_id': 'sourceServerID',
            'staging_area_subnet_id': 'stagingAreaSubnetId',
            'staging_area_tags': 'stagingAreaTags',
            'use_dedicated_replication_server': 'useDedicatedReplicationServer',
            'use_fips_endpoint': 'useFipsEndpoint'
        }

        self._account_id = account_id
        self._associate_default_security_group = associate_default_security_group
        self._bandwidth_throttling = bandwidth_throttling
        self._create_public_ip = create_public_ip
        self._data_plane_routing = data_plane_routing
        self._default_large_staging_disk_type = default_large_staging_disk_type
        self._ebs_encryption = ebs_encryption
        self._ebs_encryption_key_arn = ebs_encryption_key_arn
        self._name = name
        self._replicated_disks = replicated_disks
        self._replication_server_instance_type = replication_server_instance_type
        self._replication_servers_security_groups_ids = replication_servers_security_groups_ids
        self._source_server_id = source_server_id
        self._staging_area_subnet_id = staging_area_subnet_id
        self._staging_area_tags = staging_area_tags
        self._use_dedicated_replication_server = use_dedicated_replication_server
        self._use_fips_endpoint = use_fips_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateReplicationConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateReplicationConfiguration_request of this UpdateReplicationConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UpdateReplicationConfigurationRequest.

        Update replication configuration Account ID request.

        :return: The account_id of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UpdateReplicationConfigurationRequest.

        Update replication configuration Account ID request.

        :param account_id: The account_id of this UpdateReplicationConfigurationRequest.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'[0-9]{12,}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/[0-9]{12,}/`")

        self._account_id = account_id

    @property
    def associate_default_security_group(self):
        """Gets the associate_default_security_group of this UpdateReplicationConfigurationRequest.

        Update replication configuration associate default Application Migration Service Security group request.

        :return: The associate_default_security_group of this UpdateReplicationConfigurationRequest.
        :rtype: bool
        """
        return self._associate_default_security_group

    @associate_default_security_group.setter
    def associate_default_security_group(self, associate_default_security_group):
        """Sets the associate_default_security_group of this UpdateReplicationConfigurationRequest.

        Update replication configuration associate default Application Migration Service Security group request.

        :param associate_default_security_group: The associate_default_security_group of this UpdateReplicationConfigurationRequest.
        :type associate_default_security_group: bool
        """

        self._associate_default_security_group = associate_default_security_group

    @property
    def bandwidth_throttling(self):
        """Gets the bandwidth_throttling of this UpdateReplicationConfigurationRequest.

        Update replication configuration bandwidth throttling request.

        :return: The bandwidth_throttling of this UpdateReplicationConfigurationRequest.
        :rtype: int
        """
        return self._bandwidth_throttling

    @bandwidth_throttling.setter
    def bandwidth_throttling(self, bandwidth_throttling):
        """Sets the bandwidth_throttling of this UpdateReplicationConfigurationRequest.

        Update replication configuration bandwidth throttling request.

        :param bandwidth_throttling: The bandwidth_throttling of this UpdateReplicationConfigurationRequest.
        :type bandwidth_throttling: int
        """
        if bandwidth_throttling is not None and bandwidth_throttling > 10000:
            raise ValueError("Invalid value for `bandwidth_throttling`, must be a value less than or equal to `10000`")
        if bandwidth_throttling is not None and bandwidth_throttling < 0:
            raise ValueError("Invalid value for `bandwidth_throttling`, must be a value greater than or equal to `0`")

        self._bandwidth_throttling = bandwidth_throttling

    @property
    def create_public_ip(self):
        """Gets the create_public_ip of this UpdateReplicationConfigurationRequest.

        Update replication configuration create Public IP request.

        :return: The create_public_ip of this UpdateReplicationConfigurationRequest.
        :rtype: bool
        """
        return self._create_public_ip

    @create_public_ip.setter
    def create_public_ip(self, create_public_ip):
        """Sets the create_public_ip of this UpdateReplicationConfigurationRequest.

        Update replication configuration create Public IP request.

        :param create_public_ip: The create_public_ip of this UpdateReplicationConfigurationRequest.
        :type create_public_ip: bool
        """

        self._create_public_ip = create_public_ip

    @property
    def data_plane_routing(self):
        """Gets the data_plane_routing of this UpdateReplicationConfigurationRequest.

        Update replication configuration data plane routing request.

        :return: The data_plane_routing of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._data_plane_routing

    @data_plane_routing.setter
    def data_plane_routing(self, data_plane_routing):
        """Sets the data_plane_routing of this UpdateReplicationConfigurationRequest.

        Update replication configuration data plane routing request.

        :param data_plane_routing: The data_plane_routing of this UpdateReplicationConfigurationRequest.
        :type data_plane_routing: str
        """
        allowed_values = ["PRIVATE_IP", "PUBLIC_IP"]  # noqa: E501
        if data_plane_routing not in allowed_values:
            raise ValueError(
                "Invalid value for `data_plane_routing` ({0}), must be one of {1}"
                .format(data_plane_routing, allowed_values)
            )

        self._data_plane_routing = data_plane_routing

    @property
    def default_large_staging_disk_type(self):
        """Gets the default_large_staging_disk_type of this UpdateReplicationConfigurationRequest.

        Update replication configuration use default large Staging Disk type request.

        :return: The default_large_staging_disk_type of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._default_large_staging_disk_type

    @default_large_staging_disk_type.setter
    def default_large_staging_disk_type(self, default_large_staging_disk_type):
        """Sets the default_large_staging_disk_type of this UpdateReplicationConfigurationRequest.

        Update replication configuration use default large Staging Disk type request.

        :param default_large_staging_disk_type: The default_large_staging_disk_type of this UpdateReplicationConfigurationRequest.
        :type default_large_staging_disk_type: str
        """
        allowed_values = ["GP2", "ST1", "GP3"]  # noqa: E501
        if default_large_staging_disk_type not in allowed_values:
            raise ValueError(
                "Invalid value for `default_large_staging_disk_type` ({0}), must be one of {1}"
                .format(default_large_staging_disk_type, allowed_values)
            )

        self._default_large_staging_disk_type = default_large_staging_disk_type

    @property
    def ebs_encryption(self):
        """Gets the ebs_encryption of this UpdateReplicationConfigurationRequest.

        Update replication configuration EBS encryption request.

        :return: The ebs_encryption of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._ebs_encryption

    @ebs_encryption.setter
    def ebs_encryption(self, ebs_encryption):
        """Sets the ebs_encryption of this UpdateReplicationConfigurationRequest.

        Update replication configuration EBS encryption request.

        :param ebs_encryption: The ebs_encryption of this UpdateReplicationConfigurationRequest.
        :type ebs_encryption: str
        """
        allowed_values = ["DEFAULT", "CUSTOM"]  # noqa: E501
        if ebs_encryption not in allowed_values:
            raise ValueError(
                "Invalid value for `ebs_encryption` ({0}), must be one of {1}"
                .format(ebs_encryption, allowed_values)
            )

        self._ebs_encryption = ebs_encryption

    @property
    def ebs_encryption_key_arn(self):
        """Gets the ebs_encryption_key_arn of this UpdateReplicationConfigurationRequest.

        Update replication configuration EBS encryption key ARN request.

        :return: The ebs_encryption_key_arn of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._ebs_encryption_key_arn

    @ebs_encryption_key_arn.setter
    def ebs_encryption_key_arn(self, ebs_encryption_key_arn):
        """Sets the ebs_encryption_key_arn of this UpdateReplicationConfigurationRequest.

        Update replication configuration EBS encryption key ARN request.

        :param ebs_encryption_key_arn: The ebs_encryption_key_arn of this UpdateReplicationConfigurationRequest.
        :type ebs_encryption_key_arn: str
        """
        if ebs_encryption_key_arn is not None and len(ebs_encryption_key_arn) > 2048:
            raise ValueError("Invalid value for `ebs_encryption_key_arn`, length must be less than or equal to `2048`")
        if ebs_encryption_key_arn is not None and len(ebs_encryption_key_arn) < 20:
            raise ValueError("Invalid value for `ebs_encryption_key_arn`, length must be greater than or equal to `20`")

        self._ebs_encryption_key_arn = ebs_encryption_key_arn

    @property
    def name(self):
        """Gets the name of this UpdateReplicationConfigurationRequest.

        Update replication configuration name request.

        :return: The name of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateReplicationConfigurationRequest.

        Update replication configuration name request.

        :param name: The name of this UpdateReplicationConfigurationRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def replicated_disks(self):
        """Gets the replicated_disks of this UpdateReplicationConfigurationRequest.

        Update replication configuration replicated disks request.

        :return: The replicated_disks of this UpdateReplicationConfigurationRequest.
        :rtype: List[ReplicationConfigurationReplicatedDisk]
        """
        return self._replicated_disks

    @replicated_disks.setter
    def replicated_disks(self, replicated_disks):
        """Sets the replicated_disks of this UpdateReplicationConfigurationRequest.

        Update replication configuration replicated disks request.

        :param replicated_disks: The replicated_disks of this UpdateReplicationConfigurationRequest.
        :type replicated_disks: List[ReplicationConfigurationReplicatedDisk]
        """
        if replicated_disks is not None and len(replicated_disks) > 60:
            raise ValueError("Invalid value for `replicated_disks`, number of items must be less than or equal to `60`")
        if replicated_disks is not None and len(replicated_disks) < 0:
            raise ValueError("Invalid value for `replicated_disks`, number of items must be greater than or equal to `0`")

        self._replicated_disks = replicated_disks

    @property
    def replication_server_instance_type(self):
        """Gets the replication_server_instance_type of this UpdateReplicationConfigurationRequest.

        Update replication configuration Replication Server instance type request.

        :return: The replication_server_instance_type of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._replication_server_instance_type

    @replication_server_instance_type.setter
    def replication_server_instance_type(self, replication_server_instance_type):
        """Sets the replication_server_instance_type of this UpdateReplicationConfigurationRequest.

        Update replication configuration Replication Server instance type request.

        :param replication_server_instance_type: The replication_server_instance_type of this UpdateReplicationConfigurationRequest.
        :type replication_server_instance_type: str
        """
        if replication_server_instance_type is not None and len(replication_server_instance_type) > 255:
            raise ValueError("Invalid value for `replication_server_instance_type`, length must be less than or equal to `255`")
        if replication_server_instance_type is not None and len(replication_server_instance_type) < 0:
            raise ValueError("Invalid value for `replication_server_instance_type`, length must be greater than or equal to `0`")

        self._replication_server_instance_type = replication_server_instance_type

    @property
    def replication_servers_security_groups_ids(self):
        """Gets the replication_servers_security_groups_ids of this UpdateReplicationConfigurationRequest.

        Update replication configuration Replication Server Security Groups IDs request.

        :return: The replication_servers_security_groups_ids of this UpdateReplicationConfigurationRequest.
        :rtype: List[str]
        """
        return self._replication_servers_security_groups_ids

    @replication_servers_security_groups_ids.setter
    def replication_servers_security_groups_ids(self, replication_servers_security_groups_ids):
        """Sets the replication_servers_security_groups_ids of this UpdateReplicationConfigurationRequest.

        Update replication configuration Replication Server Security Groups IDs request.

        :param replication_servers_security_groups_ids: The replication_servers_security_groups_ids of this UpdateReplicationConfigurationRequest.
        :type replication_servers_security_groups_ids: List[str]
        """
        if replication_servers_security_groups_ids is not None and len(replication_servers_security_groups_ids) > 32:
            raise ValueError("Invalid value for `replication_servers_security_groups_ids`, number of items must be less than or equal to `32`")
        if replication_servers_security_groups_ids is not None and len(replication_servers_security_groups_ids) < 0:
            raise ValueError("Invalid value for `replication_servers_security_groups_ids`, number of items must be greater than or equal to `0`")

        self._replication_servers_security_groups_ids = replication_servers_security_groups_ids

    @property
    def source_server_id(self):
        """Gets the source_server_id of this UpdateReplicationConfigurationRequest.

        Update replication configuration Source Server ID request.

        :return: The source_server_id of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._source_server_id

    @source_server_id.setter
    def source_server_id(self, source_server_id):
        """Sets the source_server_id of this UpdateReplicationConfigurationRequest.

        Update replication configuration Source Server ID request.

        :param source_server_id: The source_server_id of this UpdateReplicationConfigurationRequest.
        :type source_server_id: str
        """
        if source_server_id is None:
            raise ValueError("Invalid value for `source_server_id`, must not be `None`")
        if source_server_id is not None and len(source_server_id) > 19:
            raise ValueError("Invalid value for `source_server_id`, length must be less than or equal to `19`")
        if source_server_id is not None and len(source_server_id) < 19:
            raise ValueError("Invalid value for `source_server_id`, length must be greater than or equal to `19`")
        if source_server_id is not None and not re.search(r'^s-[0-9a-zA-Z]{17}$', source_server_id):
            raise ValueError("Invalid value for `source_server_id`, must be a follow pattern or equal to `/^s-[0-9a-zA-Z]{17}$/`")

        self._source_server_id = source_server_id

    @property
    def staging_area_subnet_id(self):
        """Gets the staging_area_subnet_id of this UpdateReplicationConfigurationRequest.

        Update replication configuration Staging Area subnet request.

        :return: The staging_area_subnet_id of this UpdateReplicationConfigurationRequest.
        :rtype: str
        """
        return self._staging_area_subnet_id

    @staging_area_subnet_id.setter
    def staging_area_subnet_id(self, staging_area_subnet_id):
        """Sets the staging_area_subnet_id of this UpdateReplicationConfigurationRequest.

        Update replication configuration Staging Area subnet request.

        :param staging_area_subnet_id: The staging_area_subnet_id of this UpdateReplicationConfigurationRequest.
        :type staging_area_subnet_id: str
        """
        if staging_area_subnet_id is not None and len(staging_area_subnet_id) > 255:
            raise ValueError("Invalid value for `staging_area_subnet_id`, length must be less than or equal to `255`")
        if staging_area_subnet_id is not None and len(staging_area_subnet_id) < 0:
            raise ValueError("Invalid value for `staging_area_subnet_id`, length must be greater than or equal to `0`")
        if staging_area_subnet_id is not None and not re.search(r'^subnet-[0-9a-fA-F]{8,}$', staging_area_subnet_id):
            raise ValueError("Invalid value for `staging_area_subnet_id`, must be a follow pattern or equal to `/^subnet-[0-9a-fA-F]{8,}$/`")

        self._staging_area_subnet_id = staging_area_subnet_id

    @property
    def staging_area_tags(self):
        """Gets the staging_area_tags of this UpdateReplicationConfigurationRequest.

        Update replication configuration Staging Area Tags request.

        :return: The staging_area_tags of this UpdateReplicationConfigurationRequest.
        :rtype: Dict[str, str]
        """
        return self._staging_area_tags

    @staging_area_tags.setter
    def staging_area_tags(self, staging_area_tags):
        """Sets the staging_area_tags of this UpdateReplicationConfigurationRequest.

        Update replication configuration Staging Area Tags request.

        :param staging_area_tags: The staging_area_tags of this UpdateReplicationConfigurationRequest.
        :type staging_area_tags: Dict[str, str]
        """
        if staging_area_tags is not None and len(staging_area_tags) > 50:
            raise ValueError("Invalid value for `staging_area_tags`, number of items must be less than or equal to `50`")
        if staging_area_tags is not None and len(staging_area_tags) < 0:
            raise ValueError("Invalid value for `staging_area_tags`, number of items must be greater than or equal to `0`")

        self._staging_area_tags = staging_area_tags

    @property
    def use_dedicated_replication_server(self):
        """Gets the use_dedicated_replication_server of this UpdateReplicationConfigurationRequest.

        Update replication configuration use dedicated Replication Server request.

        :return: The use_dedicated_replication_server of this UpdateReplicationConfigurationRequest.
        :rtype: bool
        """
        return self._use_dedicated_replication_server

    @use_dedicated_replication_server.setter
    def use_dedicated_replication_server(self, use_dedicated_replication_server):
        """Sets the use_dedicated_replication_server of this UpdateReplicationConfigurationRequest.

        Update replication configuration use dedicated Replication Server request.

        :param use_dedicated_replication_server: The use_dedicated_replication_server of this UpdateReplicationConfigurationRequest.
        :type use_dedicated_replication_server: bool
        """

        self._use_dedicated_replication_server = use_dedicated_replication_server

    @property
    def use_fips_endpoint(self):
        """Gets the use_fips_endpoint of this UpdateReplicationConfigurationRequest.

        Update replication configuration use Fips Endpoint.

        :return: The use_fips_endpoint of this UpdateReplicationConfigurationRequest.
        :rtype: bool
        """
        return self._use_fips_endpoint

    @use_fips_endpoint.setter
    def use_fips_endpoint(self, use_fips_endpoint):
        """Sets the use_fips_endpoint of this UpdateReplicationConfigurationRequest.

        Update replication configuration use Fips Endpoint.

        :param use_fips_endpoint: The use_fips_endpoint of this UpdateReplicationConfigurationRequest.
        :type use_fips_endpoint: bool
        """

        self._use_fips_endpoint = use_fips_endpoint
