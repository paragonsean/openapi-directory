# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LifeCycleState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    STOPPED = 'STOPPED'
    NOT_READY = 'NOT_READY'
    READY_FOR_TEST = 'READY_FOR_TEST'
    TESTING = 'TESTING'
    READY_FOR_CUTOVER = 'READY_FOR_CUTOVER'
    CUTTING_OVER = 'CUTTING_OVER'
    CUTOVER = 'CUTOVER'
    DISCONNECTED = 'DISCONNECTED'
    DISCOVERED = 'DISCOVERED'
    PENDING_INSTALLATION = 'PENDING_INSTALLATION'

    def __init__(self):
        """LifeCycleState - a model defined in OpenAPI

        """
        self.openapi_types = {
        }

        self.attribute_map = {
        }

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LifeCycleState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LifeCycleState of this LifeCycleState.
        """
        return util.deserialize_model(dikt, cls)
