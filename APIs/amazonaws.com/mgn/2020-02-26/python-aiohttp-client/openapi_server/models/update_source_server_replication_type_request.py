# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateSourceServerReplicationTypeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, replication_type: str=None, source_server_id: str=None):
        """UpdateSourceServerReplicationTypeRequest - a model defined in OpenAPI

        :param account_id: The account_id of this UpdateSourceServerReplicationTypeRequest.
        :param replication_type: The replication_type of this UpdateSourceServerReplicationTypeRequest.
        :param source_server_id: The source_server_id of this UpdateSourceServerReplicationTypeRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'replication_type': str,
            'source_server_id': str
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'replication_type': 'replicationType',
            'source_server_id': 'sourceServerID'
        }

        self._account_id = account_id
        self._replication_type = replication_type
        self._source_server_id = source_server_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSourceServerReplicationTypeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSourceServerReplicationType_request of this UpdateSourceServerReplicationTypeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UpdateSourceServerReplicationTypeRequest.

        Account ID on which to update replication type.

        :return: The account_id of this UpdateSourceServerReplicationTypeRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UpdateSourceServerReplicationTypeRequest.

        Account ID on which to update replication type.

        :param account_id: The account_id of this UpdateSourceServerReplicationTypeRequest.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'[0-9]{12,}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/[0-9]{12,}/`")

        self._account_id = account_id

    @property
    def replication_type(self):
        """Gets the replication_type of this UpdateSourceServerReplicationTypeRequest.

        Replication type to which to update source server.

        :return: The replication_type of this UpdateSourceServerReplicationTypeRequest.
        :rtype: str
        """
        return self._replication_type

    @replication_type.setter
    def replication_type(self, replication_type):
        """Sets the replication_type of this UpdateSourceServerReplicationTypeRequest.

        Replication type to which to update source server.

        :param replication_type: The replication_type of this UpdateSourceServerReplicationTypeRequest.
        :type replication_type: str
        """
        allowed_values = ["AGENT_BASED", "SNAPSHOT_SHIPPING"]  # noqa: E501
        if replication_type not in allowed_values:
            raise ValueError(
                "Invalid value for `replication_type` ({0}), must be one of {1}"
                .format(replication_type, allowed_values)
            )

        self._replication_type = replication_type

    @property
    def source_server_id(self):
        """Gets the source_server_id of this UpdateSourceServerReplicationTypeRequest.

        ID of source server on which to update replication type.

        :return: The source_server_id of this UpdateSourceServerReplicationTypeRequest.
        :rtype: str
        """
        return self._source_server_id

    @source_server_id.setter
    def source_server_id(self, source_server_id):
        """Sets the source_server_id of this UpdateSourceServerReplicationTypeRequest.

        ID of source server on which to update replication type.

        :param source_server_id: The source_server_id of this UpdateSourceServerReplicationTypeRequest.
        :type source_server_id: str
        """
        if source_server_id is None:
            raise ValueError("Invalid value for `source_server_id`, must not be `None`")
        if source_server_id is not None and len(source_server_id) > 19:
            raise ValueError("Invalid value for `source_server_id`, length must be less than or equal to `19`")
        if source_server_id is not None and len(source_server_id) < 19:
            raise ValueError("Invalid value for `source_server_id`, length must be greater than or equal to `19`")
        if source_server_id is not None and not re.search(r'^s-[0-9a-zA-Z]{17}$', source_server_id):
            raise ValueError("Invalid value for `source_server_id`, must be a follow pattern or equal to `/^s-[0-9a-zA-Z]{17}$/`")

        self._source_server_id = source_server_id
