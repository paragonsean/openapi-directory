# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ssm_parameter_store_parameter_type import SsmParameterStoreParameterType
from openapi_server import util


class SsmParameterStoreParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parameter_name: str=None, parameter_type: SsmParameterStoreParameterType=None):
        """SsmParameterStoreParameter - a model defined in OpenAPI

        :param parameter_name: The parameter_name of this SsmParameterStoreParameter.
        :param parameter_type: The parameter_type of this SsmParameterStoreParameter.
        """
        self.openapi_types = {
            'parameter_name': str,
            'parameter_type': SsmParameterStoreParameterType
        }

        self.attribute_map = {
            'parameter_name': 'parameterName',
            'parameter_type': 'parameterType'
        }

        self._parameter_name = parameter_name
        self._parameter_type = parameter_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SsmParameterStoreParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SsmParameterStoreParameter of this SsmParameterStoreParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parameter_name(self):
        """Gets the parameter_name of this SsmParameterStoreParameter.


        :return: The parameter_name of this SsmParameterStoreParameter.
        :rtype: str
        """
        return self._parameter_name

    @parameter_name.setter
    def parameter_name(self, parameter_name):
        """Sets the parameter_name of this SsmParameterStoreParameter.


        :param parameter_name: The parameter_name of this SsmParameterStoreParameter.
        :type parameter_name: str
        """
        if parameter_name is None:
            raise ValueError("Invalid value for `parameter_name`, must not be `None`")

        self._parameter_name = parameter_name

    @property
    def parameter_type(self):
        """Gets the parameter_type of this SsmParameterStoreParameter.


        :return: The parameter_type of this SsmParameterStoreParameter.
        :rtype: SsmParameterStoreParameterType
        """
        return self._parameter_type

    @parameter_type.setter
    def parameter_type(self, parameter_type):
        """Sets the parameter_type of this SsmParameterStoreParameter.


        :param parameter_type: The parameter_type of this SsmParameterStoreParameter.
        :type parameter_type: SsmParameterStoreParameterType
        """
        if parameter_type is None:
            raise ValueError("Invalid value for `parameter_type`, must not be `None`")

        self._parameter_type = parameter_type
