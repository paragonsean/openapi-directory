# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class RemoveTemplateActionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_id: str=None, launch_configuration_template_id: str=None):
        """RemoveTemplateActionRequest - a model defined in OpenAPI

        :param action_id: The action_id of this RemoveTemplateActionRequest.
        :param launch_configuration_template_id: The launch_configuration_template_id of this RemoveTemplateActionRequest.
        """
        self.openapi_types = {
            'action_id': str,
            'launch_configuration_template_id': str
        }

        self.attribute_map = {
            'action_id': 'actionID',
            'launch_configuration_template_id': 'launchConfigurationTemplateID'
        }

        self._action_id = action_id
        self._launch_configuration_template_id = launch_configuration_template_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RemoveTemplateActionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RemoveTemplateAction_request of this RemoveTemplateActionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_id(self):
        """Gets the action_id of this RemoveTemplateActionRequest.

        Template post migration custom action ID to remove.

        :return: The action_id of this RemoveTemplateActionRequest.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this RemoveTemplateActionRequest.

        Template post migration custom action ID to remove.

        :param action_id: The action_id of this RemoveTemplateActionRequest.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")
        if action_id is not None and len(action_id) > 64:
            raise ValueError("Invalid value for `action_id`, length must be less than or equal to `64`")
        if action_id is not None and len(action_id) < 1:
            raise ValueError("Invalid value for `action_id`, length must be greater than or equal to `1`")
        if action_id is not None and not re.search(r'[0-9a-zA-Z]$', action_id):
            raise ValueError("Invalid value for `action_id`, must be a follow pattern or equal to `/[0-9a-zA-Z]$/`")

        self._action_id = action_id

    @property
    def launch_configuration_template_id(self):
        """Gets the launch_configuration_template_id of this RemoveTemplateActionRequest.

        Launch configuration template ID of the post migration custom action to remove.

        :return: The launch_configuration_template_id of this RemoveTemplateActionRequest.
        :rtype: str
        """
        return self._launch_configuration_template_id

    @launch_configuration_template_id.setter
    def launch_configuration_template_id(self, launch_configuration_template_id):
        """Sets the launch_configuration_template_id of this RemoveTemplateActionRequest.

        Launch configuration template ID of the post migration custom action to remove.

        :param launch_configuration_template_id: The launch_configuration_template_id of this RemoveTemplateActionRequest.
        :type launch_configuration_template_id: str
        """
        if launch_configuration_template_id is None:
            raise ValueError("Invalid value for `launch_configuration_template_id`, must not be `None`")
        if launch_configuration_template_id is not None and len(launch_configuration_template_id) > 21:
            raise ValueError("Invalid value for `launch_configuration_template_id`, length must be less than or equal to `21`")
        if launch_configuration_template_id is not None and len(launch_configuration_template_id) < 21:
            raise ValueError("Invalid value for `launch_configuration_template_id`, length must be greater than or equal to `21`")
        if launch_configuration_template_id is not None and not re.search(r'^lct-[0-9a-zA-Z]{17}$', launch_configuration_template_id):
            raise ValueError("Invalid value for `launch_configuration_template_id`, must be a follow pattern or equal to `/^lct-[0-9a-zA-Z]{17}$/`")

        self._launch_configuration_template_id = launch_configuration_template_id
