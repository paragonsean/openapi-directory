# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_launch_configuration_template_request_licensing import CreateLaunchConfigurationTemplateRequestLicensing
from openapi_server.models.create_launch_configuration_template_request_post_launch_actions import CreateLaunchConfigurationTemplateRequestPostLaunchActions
import re
from openapi_server import util


class UpdateLaunchConfigurationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, boot_mode: str=None, copy_private_ip: bool=None, copy_tags: bool=None, enable_map_auto_tagging: bool=None, launch_disposition: str=None, licensing: CreateLaunchConfigurationTemplateRequestLicensing=None, map_auto_tagging_mpe_id: str=None, name: str=None, post_launch_actions: CreateLaunchConfigurationTemplateRequestPostLaunchActions=None, source_server_id: str=None, target_instance_type_right_sizing_method: str=None):
        """UpdateLaunchConfigurationRequest - a model defined in OpenAPI

        :param account_id: The account_id of this UpdateLaunchConfigurationRequest.
        :param boot_mode: The boot_mode of this UpdateLaunchConfigurationRequest.
        :param copy_private_ip: The copy_private_ip of this UpdateLaunchConfigurationRequest.
        :param copy_tags: The copy_tags of this UpdateLaunchConfigurationRequest.
        :param enable_map_auto_tagging: The enable_map_auto_tagging of this UpdateLaunchConfigurationRequest.
        :param launch_disposition: The launch_disposition of this UpdateLaunchConfigurationRequest.
        :param licensing: The licensing of this UpdateLaunchConfigurationRequest.
        :param map_auto_tagging_mpe_id: The map_auto_tagging_mpe_id of this UpdateLaunchConfigurationRequest.
        :param name: The name of this UpdateLaunchConfigurationRequest.
        :param post_launch_actions: The post_launch_actions of this UpdateLaunchConfigurationRequest.
        :param source_server_id: The source_server_id of this UpdateLaunchConfigurationRequest.
        :param target_instance_type_right_sizing_method: The target_instance_type_right_sizing_method of this UpdateLaunchConfigurationRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'boot_mode': str,
            'copy_private_ip': bool,
            'copy_tags': bool,
            'enable_map_auto_tagging': bool,
            'launch_disposition': str,
            'licensing': CreateLaunchConfigurationTemplateRequestLicensing,
            'map_auto_tagging_mpe_id': str,
            'name': str,
            'post_launch_actions': CreateLaunchConfigurationTemplateRequestPostLaunchActions,
            'source_server_id': str,
            'target_instance_type_right_sizing_method': str
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'boot_mode': 'bootMode',
            'copy_private_ip': 'copyPrivateIp',
            'copy_tags': 'copyTags',
            'enable_map_auto_tagging': 'enableMapAutoTagging',
            'launch_disposition': 'launchDisposition',
            'licensing': 'licensing',
            'map_auto_tagging_mpe_id': 'mapAutoTaggingMpeID',
            'name': 'name',
            'post_launch_actions': 'postLaunchActions',
            'source_server_id': 'sourceServerID',
            'target_instance_type_right_sizing_method': 'targetInstanceTypeRightSizingMethod'
        }

        self._account_id = account_id
        self._boot_mode = boot_mode
        self._copy_private_ip = copy_private_ip
        self._copy_tags = copy_tags
        self._enable_map_auto_tagging = enable_map_auto_tagging
        self._launch_disposition = launch_disposition
        self._licensing = licensing
        self._map_auto_tagging_mpe_id = map_auto_tagging_mpe_id
        self._name = name
        self._post_launch_actions = post_launch_actions
        self._source_server_id = source_server_id
        self._target_instance_type_right_sizing_method = target_instance_type_right_sizing_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateLaunchConfigurationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateLaunchConfiguration_request of this UpdateLaunchConfigurationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this UpdateLaunchConfigurationRequest.

        Update Launch configuration Account ID.

        :return: The account_id of this UpdateLaunchConfigurationRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UpdateLaunchConfigurationRequest.

        Update Launch configuration Account ID.

        :param account_id: The account_id of this UpdateLaunchConfigurationRequest.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'[0-9]{12,}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/[0-9]{12,}/`")

        self._account_id = account_id

    @property
    def boot_mode(self):
        """Gets the boot_mode of this UpdateLaunchConfigurationRequest.

        Update Launch configuration boot mode request.

        :return: The boot_mode of this UpdateLaunchConfigurationRequest.
        :rtype: str
        """
        return self._boot_mode

    @boot_mode.setter
    def boot_mode(self, boot_mode):
        """Sets the boot_mode of this UpdateLaunchConfigurationRequest.

        Update Launch configuration boot mode request.

        :param boot_mode: The boot_mode of this UpdateLaunchConfigurationRequest.
        :type boot_mode: str
        """
        allowed_values = ["LEGACY_BIOS", "UEFI"]  # noqa: E501
        if boot_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_mode` ({0}), must be one of {1}"
                .format(boot_mode, allowed_values)
            )

        self._boot_mode = boot_mode

    @property
    def copy_private_ip(self):
        """Gets the copy_private_ip of this UpdateLaunchConfigurationRequest.

        Update Launch configuration copy Private IP request.

        :return: The copy_private_ip of this UpdateLaunchConfigurationRequest.
        :rtype: bool
        """
        return self._copy_private_ip

    @copy_private_ip.setter
    def copy_private_ip(self, copy_private_ip):
        """Sets the copy_private_ip of this UpdateLaunchConfigurationRequest.

        Update Launch configuration copy Private IP request.

        :param copy_private_ip: The copy_private_ip of this UpdateLaunchConfigurationRequest.
        :type copy_private_ip: bool
        """

        self._copy_private_ip = copy_private_ip

    @property
    def copy_tags(self):
        """Gets the copy_tags of this UpdateLaunchConfigurationRequest.

        Update Launch configuration copy Tags request.

        :return: The copy_tags of this UpdateLaunchConfigurationRequest.
        :rtype: bool
        """
        return self._copy_tags

    @copy_tags.setter
    def copy_tags(self, copy_tags):
        """Sets the copy_tags of this UpdateLaunchConfigurationRequest.

        Update Launch configuration copy Tags request.

        :param copy_tags: The copy_tags of this UpdateLaunchConfigurationRequest.
        :type copy_tags: bool
        """

        self._copy_tags = copy_tags

    @property
    def enable_map_auto_tagging(self):
        """Gets the enable_map_auto_tagging of this UpdateLaunchConfigurationRequest.

        Enable map auto tagging.

        :return: The enable_map_auto_tagging of this UpdateLaunchConfigurationRequest.
        :rtype: bool
        """
        return self._enable_map_auto_tagging

    @enable_map_auto_tagging.setter
    def enable_map_auto_tagging(self, enable_map_auto_tagging):
        """Sets the enable_map_auto_tagging of this UpdateLaunchConfigurationRequest.

        Enable map auto tagging.

        :param enable_map_auto_tagging: The enable_map_auto_tagging of this UpdateLaunchConfigurationRequest.
        :type enable_map_auto_tagging: bool
        """

        self._enable_map_auto_tagging = enable_map_auto_tagging

    @property
    def launch_disposition(self):
        """Gets the launch_disposition of this UpdateLaunchConfigurationRequest.

        Update Launch configuration launch disposition request.

        :return: The launch_disposition of this UpdateLaunchConfigurationRequest.
        :rtype: str
        """
        return self._launch_disposition

    @launch_disposition.setter
    def launch_disposition(self, launch_disposition):
        """Sets the launch_disposition of this UpdateLaunchConfigurationRequest.

        Update Launch configuration launch disposition request.

        :param launch_disposition: The launch_disposition of this UpdateLaunchConfigurationRequest.
        :type launch_disposition: str
        """
        allowed_values = ["STOPPED", "STARTED"]  # noqa: E501
        if launch_disposition not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_disposition` ({0}), must be one of {1}"
                .format(launch_disposition, allowed_values)
            )

        self._launch_disposition = launch_disposition

    @property
    def licensing(self):
        """Gets the licensing of this UpdateLaunchConfigurationRequest.


        :return: The licensing of this UpdateLaunchConfigurationRequest.
        :rtype: CreateLaunchConfigurationTemplateRequestLicensing
        """
        return self._licensing

    @licensing.setter
    def licensing(self, licensing):
        """Sets the licensing of this UpdateLaunchConfigurationRequest.


        :param licensing: The licensing of this UpdateLaunchConfigurationRequest.
        :type licensing: CreateLaunchConfigurationTemplateRequestLicensing
        """

        self._licensing = licensing

    @property
    def map_auto_tagging_mpe_id(self):
        """Gets the map_auto_tagging_mpe_id of this UpdateLaunchConfigurationRequest.

        Launch configuration map auto tagging MPE ID.

        :return: The map_auto_tagging_mpe_id of this UpdateLaunchConfigurationRequest.
        :rtype: str
        """
        return self._map_auto_tagging_mpe_id

    @map_auto_tagging_mpe_id.setter
    def map_auto_tagging_mpe_id(self, map_auto_tagging_mpe_id):
        """Sets the map_auto_tagging_mpe_id of this UpdateLaunchConfigurationRequest.

        Launch configuration map auto tagging MPE ID.

        :param map_auto_tagging_mpe_id: The map_auto_tagging_mpe_id of this UpdateLaunchConfigurationRequest.
        :type map_auto_tagging_mpe_id: str
        """
        if map_auto_tagging_mpe_id is not None and len(map_auto_tagging_mpe_id) > 256:
            raise ValueError("Invalid value for `map_auto_tagging_mpe_id`, length must be less than or equal to `256`")
        if map_auto_tagging_mpe_id is not None and len(map_auto_tagging_mpe_id) < 0:
            raise ValueError("Invalid value for `map_auto_tagging_mpe_id`, length must be greater than or equal to `0`")

        self._map_auto_tagging_mpe_id = map_auto_tagging_mpe_id

    @property
    def name(self):
        """Gets the name of this UpdateLaunchConfigurationRequest.

        Update Launch configuration name request.

        :return: The name of this UpdateLaunchConfigurationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateLaunchConfigurationRequest.

        Update Launch configuration name request.

        :param name: The name of this UpdateLaunchConfigurationRequest.
        :type name: str
        """
        if name is not None and len(name) > 128:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `128`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")

        self._name = name

    @property
    def post_launch_actions(self):
        """Gets the post_launch_actions of this UpdateLaunchConfigurationRequest.


        :return: The post_launch_actions of this UpdateLaunchConfigurationRequest.
        :rtype: CreateLaunchConfigurationTemplateRequestPostLaunchActions
        """
        return self._post_launch_actions

    @post_launch_actions.setter
    def post_launch_actions(self, post_launch_actions):
        """Sets the post_launch_actions of this UpdateLaunchConfigurationRequest.


        :param post_launch_actions: The post_launch_actions of this UpdateLaunchConfigurationRequest.
        :type post_launch_actions: CreateLaunchConfigurationTemplateRequestPostLaunchActions
        """

        self._post_launch_actions = post_launch_actions

    @property
    def source_server_id(self):
        """Gets the source_server_id of this UpdateLaunchConfigurationRequest.

        Update Launch configuration by Source Server ID request.

        :return: The source_server_id of this UpdateLaunchConfigurationRequest.
        :rtype: str
        """
        return self._source_server_id

    @source_server_id.setter
    def source_server_id(self, source_server_id):
        """Sets the source_server_id of this UpdateLaunchConfigurationRequest.

        Update Launch configuration by Source Server ID request.

        :param source_server_id: The source_server_id of this UpdateLaunchConfigurationRequest.
        :type source_server_id: str
        """
        if source_server_id is None:
            raise ValueError("Invalid value for `source_server_id`, must not be `None`")
        if source_server_id is not None and len(source_server_id) > 19:
            raise ValueError("Invalid value for `source_server_id`, length must be less than or equal to `19`")
        if source_server_id is not None and len(source_server_id) < 19:
            raise ValueError("Invalid value for `source_server_id`, length must be greater than or equal to `19`")
        if source_server_id is not None and not re.search(r'^s-[0-9a-zA-Z]{17}$', source_server_id):
            raise ValueError("Invalid value for `source_server_id`, must be a follow pattern or equal to `/^s-[0-9a-zA-Z]{17}$/`")

        self._source_server_id = source_server_id

    @property
    def target_instance_type_right_sizing_method(self):
        """Gets the target_instance_type_right_sizing_method of this UpdateLaunchConfigurationRequest.

        Update Launch configuration Target instance right sizing request.

        :return: The target_instance_type_right_sizing_method of this UpdateLaunchConfigurationRequest.
        :rtype: str
        """
        return self._target_instance_type_right_sizing_method

    @target_instance_type_right_sizing_method.setter
    def target_instance_type_right_sizing_method(self, target_instance_type_right_sizing_method):
        """Sets the target_instance_type_right_sizing_method of this UpdateLaunchConfigurationRequest.

        Update Launch configuration Target instance right sizing request.

        :param target_instance_type_right_sizing_method: The target_instance_type_right_sizing_method of this UpdateLaunchConfigurationRequest.
        :type target_instance_type_right_sizing_method: str
        """
        allowed_values = ["NONE", "BASIC"]  # noqa: E501
        if target_instance_type_right_sizing_method not in allowed_values:
            raise ValueError(
                "Invalid value for `target_instance_type_right_sizing_method` ({0}), must be one of {1}"
                .format(target_instance_type_right_sizing_method, allowed_values)
            )

        self._target_instance_type_right_sizing_method = target_instance_type_right_sizing_method
