# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetworkInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ips: List=None, is_primary: bool=None, mac_address: str=None):
        """NetworkInterface - a model defined in OpenAPI

        :param ips: The ips of this NetworkInterface.
        :param is_primary: The is_primary of this NetworkInterface.
        :param mac_address: The mac_address of this NetworkInterface.
        """
        self.openapi_types = {
            'ips': List,
            'is_primary': bool,
            'mac_address': str
        }

        self.attribute_map = {
            'ips': 'ips',
            'is_primary': 'isPrimary',
            'mac_address': 'macAddress'
        }

        self._ips = ips
        self._is_primary = is_primary
        self._mac_address = mac_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkInterface of this NetworkInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ips(self):
        """Gets the ips of this NetworkInterface.


        :return: The ips of this NetworkInterface.
        :rtype: List
        """
        return self._ips

    @ips.setter
    def ips(self, ips):
        """Sets the ips of this NetworkInterface.


        :param ips: The ips of this NetworkInterface.
        :type ips: List
        """

        self._ips = ips

    @property
    def is_primary(self):
        """Gets the is_primary of this NetworkInterface.


        :return: The is_primary of this NetworkInterface.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this NetworkInterface.


        :param is_primary: The is_primary of this NetworkInterface.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def mac_address(self):
        """Gets the mac_address of this NetworkInterface.


        :return: The mac_address of this NetworkInterface.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this NetworkInterface.


        :param mac_address: The mac_address of this NetworkInterface.
        :type mac_address: str
        """

        self._mac_address = mac_address
