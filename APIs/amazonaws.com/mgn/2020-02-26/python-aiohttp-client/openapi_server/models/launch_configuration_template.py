# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.boot_mode import BootMode
from openapi_server.models.launch_configuration_template_large_volume_conf import LaunchConfigurationTemplateLargeVolumeConf
from openapi_server.models.launch_configuration_template_post_launch_actions import LaunchConfigurationTemplatePostLaunchActions
from openapi_server.models.launch_configuration_template_small_volume_conf import LaunchConfigurationTemplateSmallVolumeConf
from openapi_server.models.launch_disposition import LaunchDisposition
from openapi_server.models.licensing import Licensing
from openapi_server.models.target_instance_type_right_sizing_method import TargetInstanceTypeRightSizingMethod
from openapi_server import util


class LaunchConfigurationTemplate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, associate_public_ip_address: bool=None, boot_mode: BootMode=None, copy_private_ip: bool=None, copy_tags: bool=None, ec2_launch_template_id: str=None, enable_map_auto_tagging: bool=None, large_volume_conf: LaunchConfigurationTemplateLargeVolumeConf=None, launch_configuration_template_id: str=None, launch_disposition: LaunchDisposition=None, licensing: Licensing=None, map_auto_tagging_mpe_id: str=None, post_launch_actions: LaunchConfigurationTemplatePostLaunchActions=None, small_volume_conf: LaunchConfigurationTemplateSmallVolumeConf=None, small_volume_max_size: int=None, tags: Dict=None, target_instance_type_right_sizing_method: TargetInstanceTypeRightSizingMethod=None):
        """LaunchConfigurationTemplate - a model defined in OpenAPI

        :param arn: The arn of this LaunchConfigurationTemplate.
        :param associate_public_ip_address: The associate_public_ip_address of this LaunchConfigurationTemplate.
        :param boot_mode: The boot_mode of this LaunchConfigurationTemplate.
        :param copy_private_ip: The copy_private_ip of this LaunchConfigurationTemplate.
        :param copy_tags: The copy_tags of this LaunchConfigurationTemplate.
        :param ec2_launch_template_id: The ec2_launch_template_id of this LaunchConfigurationTemplate.
        :param enable_map_auto_tagging: The enable_map_auto_tagging of this LaunchConfigurationTemplate.
        :param large_volume_conf: The large_volume_conf of this LaunchConfigurationTemplate.
        :param launch_configuration_template_id: The launch_configuration_template_id of this LaunchConfigurationTemplate.
        :param launch_disposition: The launch_disposition of this LaunchConfigurationTemplate.
        :param licensing: The licensing of this LaunchConfigurationTemplate.
        :param map_auto_tagging_mpe_id: The map_auto_tagging_mpe_id of this LaunchConfigurationTemplate.
        :param post_launch_actions: The post_launch_actions of this LaunchConfigurationTemplate.
        :param small_volume_conf: The small_volume_conf of this LaunchConfigurationTemplate.
        :param small_volume_max_size: The small_volume_max_size of this LaunchConfigurationTemplate.
        :param tags: The tags of this LaunchConfigurationTemplate.
        :param target_instance_type_right_sizing_method: The target_instance_type_right_sizing_method of this LaunchConfigurationTemplate.
        """
        self.openapi_types = {
            'arn': str,
            'associate_public_ip_address': bool,
            'boot_mode': BootMode,
            'copy_private_ip': bool,
            'copy_tags': bool,
            'ec2_launch_template_id': str,
            'enable_map_auto_tagging': bool,
            'large_volume_conf': LaunchConfigurationTemplateLargeVolumeConf,
            'launch_configuration_template_id': str,
            'launch_disposition': LaunchDisposition,
            'licensing': Licensing,
            'map_auto_tagging_mpe_id': str,
            'post_launch_actions': LaunchConfigurationTemplatePostLaunchActions,
            'small_volume_conf': LaunchConfigurationTemplateSmallVolumeConf,
            'small_volume_max_size': int,
            'tags': Dict,
            'target_instance_type_right_sizing_method': TargetInstanceTypeRightSizingMethod
        }

        self.attribute_map = {
            'arn': 'arn',
            'associate_public_ip_address': 'associatePublicIpAddress',
            'boot_mode': 'bootMode',
            'copy_private_ip': 'copyPrivateIp',
            'copy_tags': 'copyTags',
            'ec2_launch_template_id': 'ec2LaunchTemplateID',
            'enable_map_auto_tagging': 'enableMapAutoTagging',
            'large_volume_conf': 'largeVolumeConf',
            'launch_configuration_template_id': 'launchConfigurationTemplateID',
            'launch_disposition': 'launchDisposition',
            'licensing': 'licensing',
            'map_auto_tagging_mpe_id': 'mapAutoTaggingMpeID',
            'post_launch_actions': 'postLaunchActions',
            'small_volume_conf': 'smallVolumeConf',
            'small_volume_max_size': 'smallVolumeMaxSize',
            'tags': 'tags',
            'target_instance_type_right_sizing_method': 'targetInstanceTypeRightSizingMethod'
        }

        self._arn = arn
        self._associate_public_ip_address = associate_public_ip_address
        self._boot_mode = boot_mode
        self._copy_private_ip = copy_private_ip
        self._copy_tags = copy_tags
        self._ec2_launch_template_id = ec2_launch_template_id
        self._enable_map_auto_tagging = enable_map_auto_tagging
        self._large_volume_conf = large_volume_conf
        self._launch_configuration_template_id = launch_configuration_template_id
        self._launch_disposition = launch_disposition
        self._licensing = licensing
        self._map_auto_tagging_mpe_id = map_auto_tagging_mpe_id
        self._post_launch_actions = post_launch_actions
        self._small_volume_conf = small_volume_conf
        self._small_volume_max_size = small_volume_max_size
        self._tags = tags
        self._target_instance_type_right_sizing_method = target_instance_type_right_sizing_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LaunchConfigurationTemplate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LaunchConfigurationTemplate of this LaunchConfigurationTemplate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this LaunchConfigurationTemplate.


        :return: The arn of this LaunchConfigurationTemplate.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this LaunchConfigurationTemplate.


        :param arn: The arn of this LaunchConfigurationTemplate.
        :type arn: str
        """

        self._arn = arn

    @property
    def associate_public_ip_address(self):
        """Gets the associate_public_ip_address of this LaunchConfigurationTemplate.


        :return: The associate_public_ip_address of this LaunchConfigurationTemplate.
        :rtype: bool
        """
        return self._associate_public_ip_address

    @associate_public_ip_address.setter
    def associate_public_ip_address(self, associate_public_ip_address):
        """Sets the associate_public_ip_address of this LaunchConfigurationTemplate.


        :param associate_public_ip_address: The associate_public_ip_address of this LaunchConfigurationTemplate.
        :type associate_public_ip_address: bool
        """

        self._associate_public_ip_address = associate_public_ip_address

    @property
    def boot_mode(self):
        """Gets the boot_mode of this LaunchConfigurationTemplate.


        :return: The boot_mode of this LaunchConfigurationTemplate.
        :rtype: BootMode
        """
        return self._boot_mode

    @boot_mode.setter
    def boot_mode(self, boot_mode):
        """Sets the boot_mode of this LaunchConfigurationTemplate.


        :param boot_mode: The boot_mode of this LaunchConfigurationTemplate.
        :type boot_mode: BootMode
        """

        self._boot_mode = boot_mode

    @property
    def copy_private_ip(self):
        """Gets the copy_private_ip of this LaunchConfigurationTemplate.


        :return: The copy_private_ip of this LaunchConfigurationTemplate.
        :rtype: bool
        """
        return self._copy_private_ip

    @copy_private_ip.setter
    def copy_private_ip(self, copy_private_ip):
        """Sets the copy_private_ip of this LaunchConfigurationTemplate.


        :param copy_private_ip: The copy_private_ip of this LaunchConfigurationTemplate.
        :type copy_private_ip: bool
        """

        self._copy_private_ip = copy_private_ip

    @property
    def copy_tags(self):
        """Gets the copy_tags of this LaunchConfigurationTemplate.


        :return: The copy_tags of this LaunchConfigurationTemplate.
        :rtype: bool
        """
        return self._copy_tags

    @copy_tags.setter
    def copy_tags(self, copy_tags):
        """Sets the copy_tags of this LaunchConfigurationTemplate.


        :param copy_tags: The copy_tags of this LaunchConfigurationTemplate.
        :type copy_tags: bool
        """

        self._copy_tags = copy_tags

    @property
    def ec2_launch_template_id(self):
        """Gets the ec2_launch_template_id of this LaunchConfigurationTemplate.


        :return: The ec2_launch_template_id of this LaunchConfigurationTemplate.
        :rtype: str
        """
        return self._ec2_launch_template_id

    @ec2_launch_template_id.setter
    def ec2_launch_template_id(self, ec2_launch_template_id):
        """Sets the ec2_launch_template_id of this LaunchConfigurationTemplate.


        :param ec2_launch_template_id: The ec2_launch_template_id of this LaunchConfigurationTemplate.
        :type ec2_launch_template_id: str
        """

        self._ec2_launch_template_id = ec2_launch_template_id

    @property
    def enable_map_auto_tagging(self):
        """Gets the enable_map_auto_tagging of this LaunchConfigurationTemplate.


        :return: The enable_map_auto_tagging of this LaunchConfigurationTemplate.
        :rtype: bool
        """
        return self._enable_map_auto_tagging

    @enable_map_auto_tagging.setter
    def enable_map_auto_tagging(self, enable_map_auto_tagging):
        """Sets the enable_map_auto_tagging of this LaunchConfigurationTemplate.


        :param enable_map_auto_tagging: The enable_map_auto_tagging of this LaunchConfigurationTemplate.
        :type enable_map_auto_tagging: bool
        """

        self._enable_map_auto_tagging = enable_map_auto_tagging

    @property
    def large_volume_conf(self):
        """Gets the large_volume_conf of this LaunchConfigurationTemplate.


        :return: The large_volume_conf of this LaunchConfigurationTemplate.
        :rtype: LaunchConfigurationTemplateLargeVolumeConf
        """
        return self._large_volume_conf

    @large_volume_conf.setter
    def large_volume_conf(self, large_volume_conf):
        """Sets the large_volume_conf of this LaunchConfigurationTemplate.


        :param large_volume_conf: The large_volume_conf of this LaunchConfigurationTemplate.
        :type large_volume_conf: LaunchConfigurationTemplateLargeVolumeConf
        """

        self._large_volume_conf = large_volume_conf

    @property
    def launch_configuration_template_id(self):
        """Gets the launch_configuration_template_id of this LaunchConfigurationTemplate.


        :return: The launch_configuration_template_id of this LaunchConfigurationTemplate.
        :rtype: str
        """
        return self._launch_configuration_template_id

    @launch_configuration_template_id.setter
    def launch_configuration_template_id(self, launch_configuration_template_id):
        """Sets the launch_configuration_template_id of this LaunchConfigurationTemplate.


        :param launch_configuration_template_id: The launch_configuration_template_id of this LaunchConfigurationTemplate.
        :type launch_configuration_template_id: str
        """
        if launch_configuration_template_id is None:
            raise ValueError("Invalid value for `launch_configuration_template_id`, must not be `None`")

        self._launch_configuration_template_id = launch_configuration_template_id

    @property
    def launch_disposition(self):
        """Gets the launch_disposition of this LaunchConfigurationTemplate.


        :return: The launch_disposition of this LaunchConfigurationTemplate.
        :rtype: LaunchDisposition
        """
        return self._launch_disposition

    @launch_disposition.setter
    def launch_disposition(self, launch_disposition):
        """Sets the launch_disposition of this LaunchConfigurationTemplate.


        :param launch_disposition: The launch_disposition of this LaunchConfigurationTemplate.
        :type launch_disposition: LaunchDisposition
        """

        self._launch_disposition = launch_disposition

    @property
    def licensing(self):
        """Gets the licensing of this LaunchConfigurationTemplate.


        :return: The licensing of this LaunchConfigurationTemplate.
        :rtype: Licensing
        """
        return self._licensing

    @licensing.setter
    def licensing(self, licensing):
        """Sets the licensing of this LaunchConfigurationTemplate.


        :param licensing: The licensing of this LaunchConfigurationTemplate.
        :type licensing: Licensing
        """

        self._licensing = licensing

    @property
    def map_auto_tagging_mpe_id(self):
        """Gets the map_auto_tagging_mpe_id of this LaunchConfigurationTemplate.


        :return: The map_auto_tagging_mpe_id of this LaunchConfigurationTemplate.
        :rtype: str
        """
        return self._map_auto_tagging_mpe_id

    @map_auto_tagging_mpe_id.setter
    def map_auto_tagging_mpe_id(self, map_auto_tagging_mpe_id):
        """Sets the map_auto_tagging_mpe_id of this LaunchConfigurationTemplate.


        :param map_auto_tagging_mpe_id: The map_auto_tagging_mpe_id of this LaunchConfigurationTemplate.
        :type map_auto_tagging_mpe_id: str
        """

        self._map_auto_tagging_mpe_id = map_auto_tagging_mpe_id

    @property
    def post_launch_actions(self):
        """Gets the post_launch_actions of this LaunchConfigurationTemplate.


        :return: The post_launch_actions of this LaunchConfigurationTemplate.
        :rtype: LaunchConfigurationTemplatePostLaunchActions
        """
        return self._post_launch_actions

    @post_launch_actions.setter
    def post_launch_actions(self, post_launch_actions):
        """Sets the post_launch_actions of this LaunchConfigurationTemplate.


        :param post_launch_actions: The post_launch_actions of this LaunchConfigurationTemplate.
        :type post_launch_actions: LaunchConfigurationTemplatePostLaunchActions
        """

        self._post_launch_actions = post_launch_actions

    @property
    def small_volume_conf(self):
        """Gets the small_volume_conf of this LaunchConfigurationTemplate.


        :return: The small_volume_conf of this LaunchConfigurationTemplate.
        :rtype: LaunchConfigurationTemplateSmallVolumeConf
        """
        return self._small_volume_conf

    @small_volume_conf.setter
    def small_volume_conf(self, small_volume_conf):
        """Sets the small_volume_conf of this LaunchConfigurationTemplate.


        :param small_volume_conf: The small_volume_conf of this LaunchConfigurationTemplate.
        :type small_volume_conf: LaunchConfigurationTemplateSmallVolumeConf
        """

        self._small_volume_conf = small_volume_conf

    @property
    def small_volume_max_size(self):
        """Gets the small_volume_max_size of this LaunchConfigurationTemplate.


        :return: The small_volume_max_size of this LaunchConfigurationTemplate.
        :rtype: int
        """
        return self._small_volume_max_size

    @small_volume_max_size.setter
    def small_volume_max_size(self, small_volume_max_size):
        """Sets the small_volume_max_size of this LaunchConfigurationTemplate.


        :param small_volume_max_size: The small_volume_max_size of this LaunchConfigurationTemplate.
        :type small_volume_max_size: int
        """

        self._small_volume_max_size = small_volume_max_size

    @property
    def tags(self):
        """Gets the tags of this LaunchConfigurationTemplate.


        :return: The tags of this LaunchConfigurationTemplate.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LaunchConfigurationTemplate.


        :param tags: The tags of this LaunchConfigurationTemplate.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def target_instance_type_right_sizing_method(self):
        """Gets the target_instance_type_right_sizing_method of this LaunchConfigurationTemplate.


        :return: The target_instance_type_right_sizing_method of this LaunchConfigurationTemplate.
        :rtype: TargetInstanceTypeRightSizingMethod
        """
        return self._target_instance_type_right_sizing_method

    @target_instance_type_right_sizing_method.setter
    def target_instance_type_right_sizing_method(self, target_instance_type_right_sizing_method):
        """Sets the target_instance_type_right_sizing_method of this LaunchConfigurationTemplate.


        :param target_instance_type_right_sizing_method: The target_instance_type_right_sizing_method of this LaunchConfigurationTemplate.
        :type target_instance_type_right_sizing_method: TargetInstanceTypeRightSizingMethod
        """

        self._target_instance_type_right_sizing_method = target_instance_type_right_sizing_method
