# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.initiated_by import InitiatedBy
from openapi_server.models.job_status import JobStatus
from openapi_server.models.job_type import JobType
from openapi_server import util


class StartCutoverResponseJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn: str=None, creation_date_time: str=None, end_date_time: str=None, initiated_by: InitiatedBy=None, job_id: str=None, participating_servers: List=None, status: JobStatus=None, tags: Dict=None, type: JobType=None):
        """StartCutoverResponseJob - a model defined in OpenAPI

        :param arn: The arn of this StartCutoverResponseJob.
        :param creation_date_time: The creation_date_time of this StartCutoverResponseJob.
        :param end_date_time: The end_date_time of this StartCutoverResponseJob.
        :param initiated_by: The initiated_by of this StartCutoverResponseJob.
        :param job_id: The job_id of this StartCutoverResponseJob.
        :param participating_servers: The participating_servers of this StartCutoverResponseJob.
        :param status: The status of this StartCutoverResponseJob.
        :param tags: The tags of this StartCutoverResponseJob.
        :param type: The type of this StartCutoverResponseJob.
        """
        self.openapi_types = {
            'arn': str,
            'creation_date_time': str,
            'end_date_time': str,
            'initiated_by': InitiatedBy,
            'job_id': str,
            'participating_servers': List,
            'status': JobStatus,
            'tags': Dict,
            'type': JobType
        }

        self.attribute_map = {
            'arn': 'arn',
            'creation_date_time': 'creationDateTime',
            'end_date_time': 'endDateTime',
            'initiated_by': 'initiatedBy',
            'job_id': 'jobID',
            'participating_servers': 'participatingServers',
            'status': 'status',
            'tags': 'tags',
            'type': 'type'
        }

        self._arn = arn
        self._creation_date_time = creation_date_time
        self._end_date_time = end_date_time
        self._initiated_by = initiated_by
        self._job_id = job_id
        self._participating_servers = participating_servers
        self._status = status
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StartCutoverResponseJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StartCutoverResponse_job of this StartCutoverResponseJob.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self):
        """Gets the arn of this StartCutoverResponseJob.


        :return: The arn of this StartCutoverResponseJob.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this StartCutoverResponseJob.


        :param arn: The arn of this StartCutoverResponseJob.
        :type arn: str
        """

        self._arn = arn

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this StartCutoverResponseJob.


        :return: The creation_date_time of this StartCutoverResponseJob.
        :rtype: str
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this StartCutoverResponseJob.


        :param creation_date_time: The creation_date_time of this StartCutoverResponseJob.
        :type creation_date_time: str
        """

        self._creation_date_time = creation_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this StartCutoverResponseJob.


        :return: The end_date_time of this StartCutoverResponseJob.
        :rtype: str
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this StartCutoverResponseJob.


        :param end_date_time: The end_date_time of this StartCutoverResponseJob.
        :type end_date_time: str
        """

        self._end_date_time = end_date_time

    @property
    def initiated_by(self):
        """Gets the initiated_by of this StartCutoverResponseJob.


        :return: The initiated_by of this StartCutoverResponseJob.
        :rtype: InitiatedBy
        """
        return self._initiated_by

    @initiated_by.setter
    def initiated_by(self, initiated_by):
        """Sets the initiated_by of this StartCutoverResponseJob.


        :param initiated_by: The initiated_by of this StartCutoverResponseJob.
        :type initiated_by: InitiatedBy
        """

        self._initiated_by = initiated_by

    @property
    def job_id(self):
        """Gets the job_id of this StartCutoverResponseJob.


        :return: The job_id of this StartCutoverResponseJob.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this StartCutoverResponseJob.


        :param job_id: The job_id of this StartCutoverResponseJob.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")

        self._job_id = job_id

    @property
    def participating_servers(self):
        """Gets the participating_servers of this StartCutoverResponseJob.


        :return: The participating_servers of this StartCutoverResponseJob.
        :rtype: List
        """
        return self._participating_servers

    @participating_servers.setter
    def participating_servers(self, participating_servers):
        """Sets the participating_servers of this StartCutoverResponseJob.


        :param participating_servers: The participating_servers of this StartCutoverResponseJob.
        :type participating_servers: List
        """

        self._participating_servers = participating_servers

    @property
    def status(self):
        """Gets the status of this StartCutoverResponseJob.


        :return: The status of this StartCutoverResponseJob.
        :rtype: JobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StartCutoverResponseJob.


        :param status: The status of this StartCutoverResponseJob.
        :type status: JobStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this StartCutoverResponseJob.


        :return: The tags of this StartCutoverResponseJob.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this StartCutoverResponseJob.


        :param tags: The tags of this StartCutoverResponseJob.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this StartCutoverResponseJob.


        :return: The type of this StartCutoverResponseJob.
        :rtype: JobType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StartCutoverResponseJob.


        :param type: The type of this StartCutoverResponseJob.
        :type type: JobType
        """

        self._type = type
