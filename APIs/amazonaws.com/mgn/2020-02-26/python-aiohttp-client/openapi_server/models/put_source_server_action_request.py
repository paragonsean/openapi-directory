# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ssm_external_parameter import SsmExternalParameter
from openapi_server.models.ssm_parameter_store_parameter import SsmParameterStoreParameter
import re
from openapi_server import util


class PutSourceServerActionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, action_id: str=None, action_name: str=None, active: bool=None, category: str=None, description: str=None, document_identifier: str=None, document_version: str=None, external_parameters: Dict[str, SsmExternalParameter]=None, must_succeed_for_cutover: bool=None, order: int=None, parameters: Dict[str, List[SsmParameterStoreParameter]]=None, source_server_id: str=None, timeout_seconds: int=None):
        """PutSourceServerActionRequest - a model defined in OpenAPI

        :param account_id: The account_id of this PutSourceServerActionRequest.
        :param action_id: The action_id of this PutSourceServerActionRequest.
        :param action_name: The action_name of this PutSourceServerActionRequest.
        :param active: The active of this PutSourceServerActionRequest.
        :param category: The category of this PutSourceServerActionRequest.
        :param description: The description of this PutSourceServerActionRequest.
        :param document_identifier: The document_identifier of this PutSourceServerActionRequest.
        :param document_version: The document_version of this PutSourceServerActionRequest.
        :param external_parameters: The external_parameters of this PutSourceServerActionRequest.
        :param must_succeed_for_cutover: The must_succeed_for_cutover of this PutSourceServerActionRequest.
        :param order: The order of this PutSourceServerActionRequest.
        :param parameters: The parameters of this PutSourceServerActionRequest.
        :param source_server_id: The source_server_id of this PutSourceServerActionRequest.
        :param timeout_seconds: The timeout_seconds of this PutSourceServerActionRequest.
        """
        self.openapi_types = {
            'account_id': str,
            'action_id': str,
            'action_name': str,
            'active': bool,
            'category': str,
            'description': str,
            'document_identifier': str,
            'document_version': str,
            'external_parameters': Dict[str, SsmExternalParameter],
            'must_succeed_for_cutover': bool,
            'order': int,
            'parameters': Dict[str, List[SsmParameterStoreParameter]],
            'source_server_id': str,
            'timeout_seconds': int
        }

        self.attribute_map = {
            'account_id': 'accountID',
            'action_id': 'actionID',
            'action_name': 'actionName',
            'active': 'active',
            'category': 'category',
            'description': 'description',
            'document_identifier': 'documentIdentifier',
            'document_version': 'documentVersion',
            'external_parameters': 'externalParameters',
            'must_succeed_for_cutover': 'mustSucceedForCutover',
            'order': 'order',
            'parameters': 'parameters',
            'source_server_id': 'sourceServerID',
            'timeout_seconds': 'timeoutSeconds'
        }

        self._account_id = account_id
        self._action_id = action_id
        self._action_name = action_name
        self._active = active
        self._category = category
        self._description = description
        self._document_identifier = document_identifier
        self._document_version = document_version
        self._external_parameters = external_parameters
        self._must_succeed_for_cutover = must_succeed_for_cutover
        self._order = order
        self._parameters = parameters
        self._source_server_id = source_server_id
        self._timeout_seconds = timeout_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutSourceServerActionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutSourceServerAction_request of this PutSourceServerActionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this PutSourceServerActionRequest.

        Source server post migration custom account ID.

        :return: The account_id of this PutSourceServerActionRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PutSourceServerActionRequest.

        Source server post migration custom account ID.

        :param account_id: The account_id of this PutSourceServerActionRequest.
        :type account_id: str
        """
        if account_id is not None and len(account_id) > 12:
            raise ValueError("Invalid value for `account_id`, length must be less than or equal to `12`")
        if account_id is not None and len(account_id) < 12:
            raise ValueError("Invalid value for `account_id`, length must be greater than or equal to `12`")
        if account_id is not None and not re.search(r'[0-9]{12,}', account_id):
            raise ValueError("Invalid value for `account_id`, must be a follow pattern or equal to `/[0-9]{12,}/`")

        self._account_id = account_id

    @property
    def action_id(self):
        """Gets the action_id of this PutSourceServerActionRequest.

        Source server post migration custom action ID.

        :return: The action_id of this PutSourceServerActionRequest.
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this PutSourceServerActionRequest.

        Source server post migration custom action ID.

        :param action_id: The action_id of this PutSourceServerActionRequest.
        :type action_id: str
        """
        if action_id is None:
            raise ValueError("Invalid value for `action_id`, must not be `None`")
        if action_id is not None and len(action_id) > 64:
            raise ValueError("Invalid value for `action_id`, length must be less than or equal to `64`")
        if action_id is not None and len(action_id) < 1:
            raise ValueError("Invalid value for `action_id`, length must be greater than or equal to `1`")
        if action_id is not None and not re.search(r'[0-9a-zA-Z]$', action_id):
            raise ValueError("Invalid value for `action_id`, must be a follow pattern or equal to `/[0-9a-zA-Z]$/`")

        self._action_id = action_id

    @property
    def action_name(self):
        """Gets the action_name of this PutSourceServerActionRequest.

        Source server post migration custom action name.

        :return: The action_name of this PutSourceServerActionRequest.
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this PutSourceServerActionRequest.

        Source server post migration custom action name.

        :param action_name: The action_name of this PutSourceServerActionRequest.
        :type action_name: str
        """
        if action_name is None:
            raise ValueError("Invalid value for `action_name`, must not be `None`")
        if action_name is not None and len(action_name) > 256:
            raise ValueError("Invalid value for `action_name`, length must be less than or equal to `256`")
        if action_name is not None and len(action_name) < 1:
            raise ValueError("Invalid value for `action_name`, length must be greater than or equal to `1`")
        if action_name is not None and not re.search(r'^[^\s\x00]( *[^\s\x00])*$', action_name):
            raise ValueError("Invalid value for `action_name`, must be a follow pattern or equal to `/^[^\s\x00]( *[^\s\x00])*$/`")

        self._action_name = action_name

    @property
    def active(self):
        """Gets the active of this PutSourceServerActionRequest.

        Source server post migration custom action active status.

        :return: The active of this PutSourceServerActionRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PutSourceServerActionRequest.

        Source server post migration custom action active status.

        :param active: The active of this PutSourceServerActionRequest.
        :type active: bool
        """

        self._active = active

    @property
    def category(self):
        """Gets the category of this PutSourceServerActionRequest.

        Source server post migration custom action category.

        :return: The category of this PutSourceServerActionRequest.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PutSourceServerActionRequest.

        Source server post migration custom action category.

        :param category: The category of this PutSourceServerActionRequest.
        :type category: str
        """
        allowed_values = ["DISASTER_RECOVERY", "OPERATING_SYSTEM", "LICENSE_AND_SUBSCRIPTION", "VALIDATION", "OBSERVABILITY", "SECURITY", "NETWORKING", "CONFIGURATION", "BACKUP", "OTHER"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def description(self):
        """Gets the description of this PutSourceServerActionRequest.

        Source server post migration custom action description.

        :return: The description of this PutSourceServerActionRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutSourceServerActionRequest.

        Source server post migration custom action description.

        :param description: The description of this PutSourceServerActionRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")
        if description is not None and not re.search(r'^[0-9a-zA-Z ():\/.,\'-_#*; ]*$', description):
            raise ValueError("Invalid value for `description`, must be a follow pattern or equal to `/^[0-9a-zA-Z ():\/.,'-_#*; ]*$/`")

        self._description = description

    @property
    def document_identifier(self):
        """Gets the document_identifier of this PutSourceServerActionRequest.

        Source server post migration custom action document identifier.

        :return: The document_identifier of this PutSourceServerActionRequest.
        :rtype: str
        """
        return self._document_identifier

    @document_identifier.setter
    def document_identifier(self, document_identifier):
        """Sets the document_identifier of this PutSourceServerActionRequest.

        Source server post migration custom action document identifier.

        :param document_identifier: The document_identifier of this PutSourceServerActionRequest.
        :type document_identifier: str
        """
        if document_identifier is None:
            raise ValueError("Invalid value for `document_identifier`, must not be `None`")
        if document_identifier is not None and len(document_identifier) > 256:
            raise ValueError("Invalid value for `document_identifier`, length must be less than or equal to `256`")
        if document_identifier is not None and len(document_identifier) < 0:
            raise ValueError("Invalid value for `document_identifier`, length must be greater than or equal to `0`")

        self._document_identifier = document_identifier

    @property
    def document_version(self):
        """Gets the document_version of this PutSourceServerActionRequest.

        Source server post migration custom action document version.

        :return: The document_version of this PutSourceServerActionRequest.
        :rtype: str
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this PutSourceServerActionRequest.

        Source server post migration custom action document version.

        :param document_version: The document_version of this PutSourceServerActionRequest.
        :type document_version: str
        """
        if document_version is not None and not re.search(r'^(\$DEFAULT|\$LATEST|[0-9]+)$', document_version):
            raise ValueError("Invalid value for `document_version`, must be a follow pattern or equal to `/^(\$DEFAULT|\$LATEST|[0-9]+)$/`")

        self._document_version = document_version

    @property
    def external_parameters(self):
        """Gets the external_parameters of this PutSourceServerActionRequest.

        Source server post migration custom action external parameters.

        :return: The external_parameters of this PutSourceServerActionRequest.
        :rtype: Dict[str, SsmExternalParameter]
        """
        return self._external_parameters

    @external_parameters.setter
    def external_parameters(self, external_parameters):
        """Sets the external_parameters of this PutSourceServerActionRequest.

        Source server post migration custom action external parameters.

        :param external_parameters: The external_parameters of this PutSourceServerActionRequest.
        :type external_parameters: Dict[str, SsmExternalParameter]
        """
        if external_parameters is not None and len(external_parameters) > 20:
            raise ValueError("Invalid value for `external_parameters`, number of items must be less than or equal to `20`")
        if external_parameters is not None and len(external_parameters) < 0:
            raise ValueError("Invalid value for `external_parameters`, number of items must be greater than or equal to `0`")

        self._external_parameters = external_parameters

    @property
    def must_succeed_for_cutover(self):
        """Gets the must_succeed_for_cutover of this PutSourceServerActionRequest.

        Source server post migration custom action must succeed for cutover.

        :return: The must_succeed_for_cutover of this PutSourceServerActionRequest.
        :rtype: bool
        """
        return self._must_succeed_for_cutover

    @must_succeed_for_cutover.setter
    def must_succeed_for_cutover(self, must_succeed_for_cutover):
        """Sets the must_succeed_for_cutover of this PutSourceServerActionRequest.

        Source server post migration custom action must succeed for cutover.

        :param must_succeed_for_cutover: The must_succeed_for_cutover of this PutSourceServerActionRequest.
        :type must_succeed_for_cutover: bool
        """

        self._must_succeed_for_cutover = must_succeed_for_cutover

    @property
    def order(self):
        """Gets the order of this PutSourceServerActionRequest.

        Source server post migration custom action order.

        :return: The order of this PutSourceServerActionRequest.
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PutSourceServerActionRequest.

        Source server post migration custom action order.

        :param order: The order of this PutSourceServerActionRequest.
        :type order: int
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")
        if order is not None and order > 10000:
            raise ValueError("Invalid value for `order`, must be a value less than or equal to `10000`")
        if order is not None and order < 1001:
            raise ValueError("Invalid value for `order`, must be a value greater than or equal to `1001`")

        self._order = order

    @property
    def parameters(self):
        """Gets the parameters of this PutSourceServerActionRequest.

        Source server post migration custom action parameters.

        :return: The parameters of this PutSourceServerActionRequest.
        :rtype: Dict[str, List[SsmParameterStoreParameter]]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PutSourceServerActionRequest.

        Source server post migration custom action parameters.

        :param parameters: The parameters of this PutSourceServerActionRequest.
        :type parameters: Dict[str, List[SsmParameterStoreParameter]]
        """
        if parameters is not None and len(parameters) > 20:
            raise ValueError("Invalid value for `parameters`, number of items must be less than or equal to `20`")
        if parameters is not None and len(parameters) < 0:
            raise ValueError("Invalid value for `parameters`, number of items must be greater than or equal to `0`")

        self._parameters = parameters

    @property
    def source_server_id(self):
        """Gets the source_server_id of this PutSourceServerActionRequest.

        Source server ID.

        :return: The source_server_id of this PutSourceServerActionRequest.
        :rtype: str
        """
        return self._source_server_id

    @source_server_id.setter
    def source_server_id(self, source_server_id):
        """Sets the source_server_id of this PutSourceServerActionRequest.

        Source server ID.

        :param source_server_id: The source_server_id of this PutSourceServerActionRequest.
        :type source_server_id: str
        """
        if source_server_id is None:
            raise ValueError("Invalid value for `source_server_id`, must not be `None`")
        if source_server_id is not None and len(source_server_id) > 19:
            raise ValueError("Invalid value for `source_server_id`, length must be less than or equal to `19`")
        if source_server_id is not None and len(source_server_id) < 19:
            raise ValueError("Invalid value for `source_server_id`, length must be greater than or equal to `19`")
        if source_server_id is not None and not re.search(r'^s-[0-9a-zA-Z]{17}$', source_server_id):
            raise ValueError("Invalid value for `source_server_id`, must be a follow pattern or equal to `/^s-[0-9a-zA-Z]{17}$/`")

        self._source_server_id = source_server_id

    @property
    def timeout_seconds(self):
        """Gets the timeout_seconds of this PutSourceServerActionRequest.

        Source server post migration custom action timeout in seconds.

        :return: The timeout_seconds of this PutSourceServerActionRequest.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds):
        """Sets the timeout_seconds of this PutSourceServerActionRequest.

        Source server post migration custom action timeout in seconds.

        :param timeout_seconds: The timeout_seconds of this PutSourceServerActionRequest.
        :type timeout_seconds: int
        """
        if timeout_seconds is not None and timeout_seconds < 1:
            raise ValueError("Invalid value for `timeout_seconds`, must be a value greater than or equal to `1`")

        self._timeout_seconds = timeout_seconds
