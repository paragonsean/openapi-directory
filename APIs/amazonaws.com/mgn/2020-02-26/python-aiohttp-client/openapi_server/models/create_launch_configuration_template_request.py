# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_launch_configuration_template_request_large_volume_conf import CreateLaunchConfigurationTemplateRequestLargeVolumeConf
from openapi_server.models.create_launch_configuration_template_request_licensing import CreateLaunchConfigurationTemplateRequestLicensing
from openapi_server.models.create_launch_configuration_template_request_post_launch_actions import CreateLaunchConfigurationTemplateRequestPostLaunchActions
from openapi_server import util


class CreateLaunchConfigurationTemplateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, associate_public_ip_address: bool=None, boot_mode: str=None, copy_private_ip: bool=None, copy_tags: bool=None, enable_map_auto_tagging: bool=None, large_volume_conf: CreateLaunchConfigurationTemplateRequestLargeVolumeConf=None, launch_disposition: str=None, licensing: CreateLaunchConfigurationTemplateRequestLicensing=None, map_auto_tagging_mpe_id: str=None, post_launch_actions: CreateLaunchConfigurationTemplateRequestPostLaunchActions=None, small_volume_conf: CreateLaunchConfigurationTemplateRequestLargeVolumeConf=None, small_volume_max_size: int=None, tags: Dict[str, str]=None, target_instance_type_right_sizing_method: str=None):
        """CreateLaunchConfigurationTemplateRequest - a model defined in OpenAPI

        :param associate_public_ip_address: The associate_public_ip_address of this CreateLaunchConfigurationTemplateRequest.
        :param boot_mode: The boot_mode of this CreateLaunchConfigurationTemplateRequest.
        :param copy_private_ip: The copy_private_ip of this CreateLaunchConfigurationTemplateRequest.
        :param copy_tags: The copy_tags of this CreateLaunchConfigurationTemplateRequest.
        :param enable_map_auto_tagging: The enable_map_auto_tagging of this CreateLaunchConfigurationTemplateRequest.
        :param large_volume_conf: The large_volume_conf of this CreateLaunchConfigurationTemplateRequest.
        :param launch_disposition: The launch_disposition of this CreateLaunchConfigurationTemplateRequest.
        :param licensing: The licensing of this CreateLaunchConfigurationTemplateRequest.
        :param map_auto_tagging_mpe_id: The map_auto_tagging_mpe_id of this CreateLaunchConfigurationTemplateRequest.
        :param post_launch_actions: The post_launch_actions of this CreateLaunchConfigurationTemplateRequest.
        :param small_volume_conf: The small_volume_conf of this CreateLaunchConfigurationTemplateRequest.
        :param small_volume_max_size: The small_volume_max_size of this CreateLaunchConfigurationTemplateRequest.
        :param tags: The tags of this CreateLaunchConfigurationTemplateRequest.
        :param target_instance_type_right_sizing_method: The target_instance_type_right_sizing_method of this CreateLaunchConfigurationTemplateRequest.
        """
        self.openapi_types = {
            'associate_public_ip_address': bool,
            'boot_mode': str,
            'copy_private_ip': bool,
            'copy_tags': bool,
            'enable_map_auto_tagging': bool,
            'large_volume_conf': CreateLaunchConfigurationTemplateRequestLargeVolumeConf,
            'launch_disposition': str,
            'licensing': CreateLaunchConfigurationTemplateRequestLicensing,
            'map_auto_tagging_mpe_id': str,
            'post_launch_actions': CreateLaunchConfigurationTemplateRequestPostLaunchActions,
            'small_volume_conf': CreateLaunchConfigurationTemplateRequestLargeVolumeConf,
            'small_volume_max_size': int,
            'tags': Dict[str, str],
            'target_instance_type_right_sizing_method': str
        }

        self.attribute_map = {
            'associate_public_ip_address': 'associatePublicIpAddress',
            'boot_mode': 'bootMode',
            'copy_private_ip': 'copyPrivateIp',
            'copy_tags': 'copyTags',
            'enable_map_auto_tagging': 'enableMapAutoTagging',
            'large_volume_conf': 'largeVolumeConf',
            'launch_disposition': 'launchDisposition',
            'licensing': 'licensing',
            'map_auto_tagging_mpe_id': 'mapAutoTaggingMpeID',
            'post_launch_actions': 'postLaunchActions',
            'small_volume_conf': 'smallVolumeConf',
            'small_volume_max_size': 'smallVolumeMaxSize',
            'tags': 'tags',
            'target_instance_type_right_sizing_method': 'targetInstanceTypeRightSizingMethod'
        }

        self._associate_public_ip_address = associate_public_ip_address
        self._boot_mode = boot_mode
        self._copy_private_ip = copy_private_ip
        self._copy_tags = copy_tags
        self._enable_map_auto_tagging = enable_map_auto_tagging
        self._large_volume_conf = large_volume_conf
        self._launch_disposition = launch_disposition
        self._licensing = licensing
        self._map_auto_tagging_mpe_id = map_auto_tagging_mpe_id
        self._post_launch_actions = post_launch_actions
        self._small_volume_conf = small_volume_conf
        self._small_volume_max_size = small_volume_max_size
        self._tags = tags
        self._target_instance_type_right_sizing_method = target_instance_type_right_sizing_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLaunchConfigurationTemplateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLaunchConfigurationTemplate_request of this CreateLaunchConfigurationTemplateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def associate_public_ip_address(self):
        """Gets the associate_public_ip_address of this CreateLaunchConfigurationTemplateRequest.

        Associate public Ip address.

        :return: The associate_public_ip_address of this CreateLaunchConfigurationTemplateRequest.
        :rtype: bool
        """
        return self._associate_public_ip_address

    @associate_public_ip_address.setter
    def associate_public_ip_address(self, associate_public_ip_address):
        """Sets the associate_public_ip_address of this CreateLaunchConfigurationTemplateRequest.

        Associate public Ip address.

        :param associate_public_ip_address: The associate_public_ip_address of this CreateLaunchConfigurationTemplateRequest.
        :type associate_public_ip_address: bool
        """

        self._associate_public_ip_address = associate_public_ip_address

    @property
    def boot_mode(self):
        """Gets the boot_mode of this CreateLaunchConfigurationTemplateRequest.

        Launch configuration template boot mode.

        :return: The boot_mode of this CreateLaunchConfigurationTemplateRequest.
        :rtype: str
        """
        return self._boot_mode

    @boot_mode.setter
    def boot_mode(self, boot_mode):
        """Sets the boot_mode of this CreateLaunchConfigurationTemplateRequest.

        Launch configuration template boot mode.

        :param boot_mode: The boot_mode of this CreateLaunchConfigurationTemplateRequest.
        :type boot_mode: str
        """
        allowed_values = ["LEGACY_BIOS", "UEFI"]  # noqa: E501
        if boot_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `boot_mode` ({0}), must be one of {1}"
                .format(boot_mode, allowed_values)
            )

        self._boot_mode = boot_mode

    @property
    def copy_private_ip(self):
        """Gets the copy_private_ip of this CreateLaunchConfigurationTemplateRequest.

        Copy private Ip.

        :return: The copy_private_ip of this CreateLaunchConfigurationTemplateRequest.
        :rtype: bool
        """
        return self._copy_private_ip

    @copy_private_ip.setter
    def copy_private_ip(self, copy_private_ip):
        """Sets the copy_private_ip of this CreateLaunchConfigurationTemplateRequest.

        Copy private Ip.

        :param copy_private_ip: The copy_private_ip of this CreateLaunchConfigurationTemplateRequest.
        :type copy_private_ip: bool
        """

        self._copy_private_ip = copy_private_ip

    @property
    def copy_tags(self):
        """Gets the copy_tags of this CreateLaunchConfigurationTemplateRequest.

        Copy tags.

        :return: The copy_tags of this CreateLaunchConfigurationTemplateRequest.
        :rtype: bool
        """
        return self._copy_tags

    @copy_tags.setter
    def copy_tags(self, copy_tags):
        """Sets the copy_tags of this CreateLaunchConfigurationTemplateRequest.

        Copy tags.

        :param copy_tags: The copy_tags of this CreateLaunchConfigurationTemplateRequest.
        :type copy_tags: bool
        """

        self._copy_tags = copy_tags

    @property
    def enable_map_auto_tagging(self):
        """Gets the enable_map_auto_tagging of this CreateLaunchConfigurationTemplateRequest.

        Enable map auto tagging.

        :return: The enable_map_auto_tagging of this CreateLaunchConfigurationTemplateRequest.
        :rtype: bool
        """
        return self._enable_map_auto_tagging

    @enable_map_auto_tagging.setter
    def enable_map_auto_tagging(self, enable_map_auto_tagging):
        """Sets the enable_map_auto_tagging of this CreateLaunchConfigurationTemplateRequest.

        Enable map auto tagging.

        :param enable_map_auto_tagging: The enable_map_auto_tagging of this CreateLaunchConfigurationTemplateRequest.
        :type enable_map_auto_tagging: bool
        """

        self._enable_map_auto_tagging = enable_map_auto_tagging

    @property
    def large_volume_conf(self):
        """Gets the large_volume_conf of this CreateLaunchConfigurationTemplateRequest.


        :return: The large_volume_conf of this CreateLaunchConfigurationTemplateRequest.
        :rtype: CreateLaunchConfigurationTemplateRequestLargeVolumeConf
        """
        return self._large_volume_conf

    @large_volume_conf.setter
    def large_volume_conf(self, large_volume_conf):
        """Sets the large_volume_conf of this CreateLaunchConfigurationTemplateRequest.


        :param large_volume_conf: The large_volume_conf of this CreateLaunchConfigurationTemplateRequest.
        :type large_volume_conf: CreateLaunchConfigurationTemplateRequestLargeVolumeConf
        """

        self._large_volume_conf = large_volume_conf

    @property
    def launch_disposition(self):
        """Gets the launch_disposition of this CreateLaunchConfigurationTemplateRequest.

        Launch disposition.

        :return: The launch_disposition of this CreateLaunchConfigurationTemplateRequest.
        :rtype: str
        """
        return self._launch_disposition

    @launch_disposition.setter
    def launch_disposition(self, launch_disposition):
        """Sets the launch_disposition of this CreateLaunchConfigurationTemplateRequest.

        Launch disposition.

        :param launch_disposition: The launch_disposition of this CreateLaunchConfigurationTemplateRequest.
        :type launch_disposition: str
        """
        allowed_values = ["STOPPED", "STARTED"]  # noqa: E501
        if launch_disposition not in allowed_values:
            raise ValueError(
                "Invalid value for `launch_disposition` ({0}), must be one of {1}"
                .format(launch_disposition, allowed_values)
            )

        self._launch_disposition = launch_disposition

    @property
    def licensing(self):
        """Gets the licensing of this CreateLaunchConfigurationTemplateRequest.


        :return: The licensing of this CreateLaunchConfigurationTemplateRequest.
        :rtype: CreateLaunchConfigurationTemplateRequestLicensing
        """
        return self._licensing

    @licensing.setter
    def licensing(self, licensing):
        """Sets the licensing of this CreateLaunchConfigurationTemplateRequest.


        :param licensing: The licensing of this CreateLaunchConfigurationTemplateRequest.
        :type licensing: CreateLaunchConfigurationTemplateRequestLicensing
        """

        self._licensing = licensing

    @property
    def map_auto_tagging_mpe_id(self):
        """Gets the map_auto_tagging_mpe_id of this CreateLaunchConfigurationTemplateRequest.

        Launch configuration template map auto tagging MPE ID.

        :return: The map_auto_tagging_mpe_id of this CreateLaunchConfigurationTemplateRequest.
        :rtype: str
        """
        return self._map_auto_tagging_mpe_id

    @map_auto_tagging_mpe_id.setter
    def map_auto_tagging_mpe_id(self, map_auto_tagging_mpe_id):
        """Sets the map_auto_tagging_mpe_id of this CreateLaunchConfigurationTemplateRequest.

        Launch configuration template map auto tagging MPE ID.

        :param map_auto_tagging_mpe_id: The map_auto_tagging_mpe_id of this CreateLaunchConfigurationTemplateRequest.
        :type map_auto_tagging_mpe_id: str
        """
        if map_auto_tagging_mpe_id is not None and len(map_auto_tagging_mpe_id) > 256:
            raise ValueError("Invalid value for `map_auto_tagging_mpe_id`, length must be less than or equal to `256`")
        if map_auto_tagging_mpe_id is not None and len(map_auto_tagging_mpe_id) < 0:
            raise ValueError("Invalid value for `map_auto_tagging_mpe_id`, length must be greater than or equal to `0`")

        self._map_auto_tagging_mpe_id = map_auto_tagging_mpe_id

    @property
    def post_launch_actions(self):
        """Gets the post_launch_actions of this CreateLaunchConfigurationTemplateRequest.


        :return: The post_launch_actions of this CreateLaunchConfigurationTemplateRequest.
        :rtype: CreateLaunchConfigurationTemplateRequestPostLaunchActions
        """
        return self._post_launch_actions

    @post_launch_actions.setter
    def post_launch_actions(self, post_launch_actions):
        """Sets the post_launch_actions of this CreateLaunchConfigurationTemplateRequest.


        :param post_launch_actions: The post_launch_actions of this CreateLaunchConfigurationTemplateRequest.
        :type post_launch_actions: CreateLaunchConfigurationTemplateRequestPostLaunchActions
        """

        self._post_launch_actions = post_launch_actions

    @property
    def small_volume_conf(self):
        """Gets the small_volume_conf of this CreateLaunchConfigurationTemplateRequest.


        :return: The small_volume_conf of this CreateLaunchConfigurationTemplateRequest.
        :rtype: CreateLaunchConfigurationTemplateRequestLargeVolumeConf
        """
        return self._small_volume_conf

    @small_volume_conf.setter
    def small_volume_conf(self, small_volume_conf):
        """Sets the small_volume_conf of this CreateLaunchConfigurationTemplateRequest.


        :param small_volume_conf: The small_volume_conf of this CreateLaunchConfigurationTemplateRequest.
        :type small_volume_conf: CreateLaunchConfigurationTemplateRequestLargeVolumeConf
        """

        self._small_volume_conf = small_volume_conf

    @property
    def small_volume_max_size(self):
        """Gets the small_volume_max_size of this CreateLaunchConfigurationTemplateRequest.

        Small volume maximum size.

        :return: The small_volume_max_size of this CreateLaunchConfigurationTemplateRequest.
        :rtype: int
        """
        return self._small_volume_max_size

    @small_volume_max_size.setter
    def small_volume_max_size(self, small_volume_max_size):
        """Sets the small_volume_max_size of this CreateLaunchConfigurationTemplateRequest.

        Small volume maximum size.

        :param small_volume_max_size: The small_volume_max_size of this CreateLaunchConfigurationTemplateRequest.
        :type small_volume_max_size: int
        """
        if small_volume_max_size is not None and small_volume_max_size < 0:
            raise ValueError("Invalid value for `small_volume_max_size`, must be a value greater than or equal to `0`")

        self._small_volume_max_size = small_volume_max_size

    @property
    def tags(self):
        """Gets the tags of this CreateLaunchConfigurationTemplateRequest.

        Request to associate tags during creation of a Launch Configuration Template.

        :return: The tags of this CreateLaunchConfigurationTemplateRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateLaunchConfigurationTemplateRequest.

        Request to associate tags during creation of a Launch Configuration Template.

        :param tags: The tags of this CreateLaunchConfigurationTemplateRequest.
        :type tags: Dict[str, str]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 0:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `0`")

        self._tags = tags

    @property
    def target_instance_type_right_sizing_method(self):
        """Gets the target_instance_type_right_sizing_method of this CreateLaunchConfigurationTemplateRequest.

        Target instance type right-sizing method.

        :return: The target_instance_type_right_sizing_method of this CreateLaunchConfigurationTemplateRequest.
        :rtype: str
        """
        return self._target_instance_type_right_sizing_method

    @target_instance_type_right_sizing_method.setter
    def target_instance_type_right_sizing_method(self, target_instance_type_right_sizing_method):
        """Sets the target_instance_type_right_sizing_method of this CreateLaunchConfigurationTemplateRequest.

        Target instance type right-sizing method.

        :param target_instance_type_right_sizing_method: The target_instance_type_right_sizing_method of this CreateLaunchConfigurationTemplateRequest.
        :type target_instance_type_right_sizing_method: str
        """
        allowed_values = ["NONE", "BASIC"]  # noqa: E501
        if target_instance_type_right_sizing_method not in allowed_values:
            raise ValueError(
                "Invalid value for `target_instance_type_right_sizing_method` ({0}), must be one of {1}"
                .format(target_instance_type_right_sizing_method, allowed_values)
            )

        self._target_instance_type_right_sizing_method = target_instance_type_right_sizing_method
