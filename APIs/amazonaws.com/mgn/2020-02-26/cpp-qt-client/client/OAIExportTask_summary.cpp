/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportTask_summary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportTask_summary::OAIExportTask_summary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportTask_summary::OAIExportTask_summary() {
    this->initializeModel();
}

OAIExportTask_summary::~OAIExportTask_summary() {}

void OAIExportTask_summary::initializeModel() {

    m_applications_count_isSet = false;
    m_applications_count_isValid = false;

    m_servers_count_isSet = false;
    m_servers_count_isValid = false;

    m_waves_count_isSet = false;
    m_waves_count_isValid = false;
}

void OAIExportTask_summary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportTask_summary::fromJsonObject(QJsonObject json) {

    m_applications_count_isValid = ::OpenAPI::fromJsonValue(m_applications_count, json[QString("applicationsCount")]);
    m_applications_count_isSet = !json[QString("applicationsCount")].isNull() && m_applications_count_isValid;

    m_servers_count_isValid = ::OpenAPI::fromJsonValue(m_servers_count, json[QString("serversCount")]);
    m_servers_count_isSet = !json[QString("serversCount")].isNull() && m_servers_count_isValid;

    m_waves_count_isValid = ::OpenAPI::fromJsonValue(m_waves_count, json[QString("wavesCount")]);
    m_waves_count_isSet = !json[QString("wavesCount")].isNull() && m_waves_count_isValid;
}

QString OAIExportTask_summary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportTask_summary::asJsonObject() const {
    QJsonObject obj;
    if (m_applications_count_isSet) {
        obj.insert(QString("applicationsCount"), ::OpenAPI::toJsonValue(m_applications_count));
    }
    if (m_servers_count_isSet) {
        obj.insert(QString("serversCount"), ::OpenAPI::toJsonValue(m_servers_count));
    }
    if (m_waves_count_isSet) {
        obj.insert(QString("wavesCount"), ::OpenAPI::toJsonValue(m_waves_count));
    }
    return obj;
}

qint32 OAIExportTask_summary::getApplicationsCount() const {
    return m_applications_count;
}
void OAIExportTask_summary::setApplicationsCount(const qint32 &applications_count) {
    m_applications_count = applications_count;
    m_applications_count_isSet = true;
}

bool OAIExportTask_summary::is_applications_count_Set() const{
    return m_applications_count_isSet;
}

bool OAIExportTask_summary::is_applications_count_Valid() const{
    return m_applications_count_isValid;
}

qint32 OAIExportTask_summary::getServersCount() const {
    return m_servers_count;
}
void OAIExportTask_summary::setServersCount(const qint32 &servers_count) {
    m_servers_count = servers_count;
    m_servers_count_isSet = true;
}

bool OAIExportTask_summary::is_servers_count_Set() const{
    return m_servers_count_isSet;
}

bool OAIExportTask_summary::is_servers_count_Valid() const{
    return m_servers_count_isValid;
}

qint32 OAIExportTask_summary::getWavesCount() const {
    return m_waves_count;
}
void OAIExportTask_summary::setWavesCount(const qint32 &waves_count) {
    m_waves_count = waves_count;
    m_waves_count_isSet = true;
}

bool OAIExportTask_summary::is_waves_count_Set() const{
    return m_waves_count_isSet;
}

bool OAIExportTask_summary::is_waves_count_Valid() const{
    return m_waves_count_isValid;
}

bool OAIExportTask_summary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applications_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servers_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_waves_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportTask_summary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
