/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationConfigurationReplicatedDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationConfigurationReplicatedDisk::OAIReplicationConfigurationReplicatedDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationConfigurationReplicatedDisk::OAIReplicationConfigurationReplicatedDisk() {
    this->initializeModel();
}

OAIReplicationConfigurationReplicatedDisk::~OAIReplicationConfigurationReplicatedDisk() {}

void OAIReplicationConfigurationReplicatedDisk::initializeModel() {

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_is_boot_disk_isSet = false;
    m_is_boot_disk_isValid = false;

    m_staging_disk_type_isSet = false;
    m_staging_disk_type_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;
}

void OAIReplicationConfigurationReplicatedDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationConfigurationReplicatedDisk::fromJsonObject(QJsonObject json) {

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("iops")]);
    m_iops_isSet = !json[QString("iops")].isNull() && m_iops_isValid;

    m_is_boot_disk_isValid = ::OpenAPI::fromJsonValue(m_is_boot_disk, json[QString("isBootDisk")]);
    m_is_boot_disk_isSet = !json[QString("isBootDisk")].isNull() && m_is_boot_disk_isValid;

    m_staging_disk_type_isValid = ::OpenAPI::fromJsonValue(m_staging_disk_type, json[QString("stagingDiskType")]);
    m_staging_disk_type_isSet = !json[QString("stagingDiskType")].isNull() && m_staging_disk_type_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("throughput")]);
    m_throughput_isSet = !json[QString("throughput")].isNull() && m_throughput_isValid;
}

QString OAIReplicationConfigurationReplicatedDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationConfigurationReplicatedDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_iops_isSet) {
        obj.insert(QString("iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_is_boot_disk_isSet) {
        obj.insert(QString("isBootDisk"), ::OpenAPI::toJsonValue(m_is_boot_disk));
    }
    if (m_staging_disk_type.isSet()) {
        obj.insert(QString("stagingDiskType"), ::OpenAPI::toJsonValue(m_staging_disk_type));
    }
    if (m_throughput_isSet) {
        obj.insert(QString("throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    return obj;
}

QString OAIReplicationConfigurationReplicatedDisk::getDeviceName() const {
    return m_device_name;
}
void OAIReplicationConfigurationReplicatedDisk::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIReplicationConfigurationReplicatedDisk::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIReplicationConfigurationReplicatedDisk::is_device_name_Valid() const{
    return m_device_name_isValid;
}

qint32 OAIReplicationConfigurationReplicatedDisk::getIops() const {
    return m_iops;
}
void OAIReplicationConfigurationReplicatedDisk::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAIReplicationConfigurationReplicatedDisk::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAIReplicationConfigurationReplicatedDisk::is_iops_Valid() const{
    return m_iops_isValid;
}

bool OAIReplicationConfigurationReplicatedDisk::getIsBootDisk() const {
    return m_is_boot_disk;
}
void OAIReplicationConfigurationReplicatedDisk::setIsBootDisk(const bool &is_boot_disk) {
    m_is_boot_disk = is_boot_disk;
    m_is_boot_disk_isSet = true;
}

bool OAIReplicationConfigurationReplicatedDisk::is_is_boot_disk_Set() const{
    return m_is_boot_disk_isSet;
}

bool OAIReplicationConfigurationReplicatedDisk::is_is_boot_disk_Valid() const{
    return m_is_boot_disk_isValid;
}

OAIReplicationConfigurationReplicatedDiskStagingDiskType OAIReplicationConfigurationReplicatedDisk::getStagingDiskType() const {
    return m_staging_disk_type;
}
void OAIReplicationConfigurationReplicatedDisk::setStagingDiskType(const OAIReplicationConfigurationReplicatedDiskStagingDiskType &staging_disk_type) {
    m_staging_disk_type = staging_disk_type;
    m_staging_disk_type_isSet = true;
}

bool OAIReplicationConfigurationReplicatedDisk::is_staging_disk_type_Set() const{
    return m_staging_disk_type_isSet;
}

bool OAIReplicationConfigurationReplicatedDisk::is_staging_disk_type_Valid() const{
    return m_staging_disk_type_isValid;
}

qint32 OAIReplicationConfigurationReplicatedDisk::getThroughput() const {
    return m_throughput;
}
void OAIReplicationConfigurationReplicatedDisk::setThroughput(const qint32 &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAIReplicationConfigurationReplicatedDisk::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAIReplicationConfigurationReplicatedDisk::is_throughput_Valid() const{
    return m_throughput_isValid;
}

bool OAIReplicationConfigurationReplicatedDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_boot_disk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging_disk_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationConfigurationReplicatedDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
