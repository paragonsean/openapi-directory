/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILaunchConfigurationTemplate.h
 *
 * 
 */

#ifndef OAILaunchConfigurationTemplate_H
#define OAILaunchConfigurationTemplate_H

#include <QJsonObject>

#include "OAIBootMode.h"
#include "OAILaunchConfigurationTemplate_largeVolumeConf.h"
#include "OAILaunchConfigurationTemplate_postLaunchActions.h"
#include "OAILaunchConfigurationTemplate_smallVolumeConf.h"
#include "OAILaunchDisposition.h"
#include "OAILicensing.h"
#include "OAITargetInstanceTypeRightSizingMethod.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILaunchConfigurationTemplate_largeVolumeConf;
class OAILicensing;
class OAILaunchConfigurationTemplate_postLaunchActions;
class OAILaunchConfigurationTemplate_smallVolumeConf;

class OAILaunchConfigurationTemplate : public OAIObject {
public:
    OAILaunchConfigurationTemplate();
    OAILaunchConfigurationTemplate(QString json);
    ~OAILaunchConfigurationTemplate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    bool getAssociatePublicIpAddress() const;
    void setAssociatePublicIpAddress(const bool &associate_public_ip_address);
    bool is_associate_public_ip_address_Set() const;
    bool is_associate_public_ip_address_Valid() const;

    OAIBootMode getBootMode() const;
    void setBootMode(const OAIBootMode &boot_mode);
    bool is_boot_mode_Set() const;
    bool is_boot_mode_Valid() const;

    bool getCopyPrivateIp() const;
    void setCopyPrivateIp(const bool &copy_private_ip);
    bool is_copy_private_ip_Set() const;
    bool is_copy_private_ip_Valid() const;

    bool getCopyTags() const;
    void setCopyTags(const bool &copy_tags);
    bool is_copy_tags_Set() const;
    bool is_copy_tags_Valid() const;

    QString getEc2LaunchTemplateId() const;
    void setEc2LaunchTemplateId(const QString &ec2_launch_template_id);
    bool is_ec2_launch_template_id_Set() const;
    bool is_ec2_launch_template_id_Valid() const;

    bool getEnableMapAutoTagging() const;
    void setEnableMapAutoTagging(const bool &enable_map_auto_tagging);
    bool is_enable_map_auto_tagging_Set() const;
    bool is_enable_map_auto_tagging_Valid() const;

    OAILaunchConfigurationTemplate_largeVolumeConf getLargeVolumeConf() const;
    void setLargeVolumeConf(const OAILaunchConfigurationTemplate_largeVolumeConf &large_volume_conf);
    bool is_large_volume_conf_Set() const;
    bool is_large_volume_conf_Valid() const;

    QString getLaunchConfigurationTemplateId() const;
    void setLaunchConfigurationTemplateId(const QString &launch_configuration_template_id);
    bool is_launch_configuration_template_id_Set() const;
    bool is_launch_configuration_template_id_Valid() const;

    OAILaunchDisposition getLaunchDisposition() const;
    void setLaunchDisposition(const OAILaunchDisposition &launch_disposition);
    bool is_launch_disposition_Set() const;
    bool is_launch_disposition_Valid() const;

    OAILicensing getLicensing() const;
    void setLicensing(const OAILicensing &licensing);
    bool is_licensing_Set() const;
    bool is_licensing_Valid() const;

    QString getMapAutoTaggingMpeId() const;
    void setMapAutoTaggingMpeId(const QString &map_auto_tagging_mpe_id);
    bool is_map_auto_tagging_mpe_id_Set() const;
    bool is_map_auto_tagging_mpe_id_Valid() const;

    OAILaunchConfigurationTemplate_postLaunchActions getPostLaunchActions() const;
    void setPostLaunchActions(const OAILaunchConfigurationTemplate_postLaunchActions &post_launch_actions);
    bool is_post_launch_actions_Set() const;
    bool is_post_launch_actions_Valid() const;

    OAILaunchConfigurationTemplate_smallVolumeConf getSmallVolumeConf() const;
    void setSmallVolumeConf(const OAILaunchConfigurationTemplate_smallVolumeConf &small_volume_conf);
    bool is_small_volume_conf_Set() const;
    bool is_small_volume_conf_Valid() const;

    qint32 getSmallVolumeMaxSize() const;
    void setSmallVolumeMaxSize(const qint32 &small_volume_max_size);
    bool is_small_volume_max_size_Set() const;
    bool is_small_volume_max_size_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    OAITargetInstanceTypeRightSizingMethod getTargetInstanceTypeRightSizingMethod() const;
    void setTargetInstanceTypeRightSizingMethod(const OAITargetInstanceTypeRightSizingMethod &target_instance_type_right_sizing_method);
    bool is_target_instance_type_right_sizing_method_Set() const;
    bool is_target_instance_type_right_sizing_method_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    bool m_associate_public_ip_address;
    bool m_associate_public_ip_address_isSet;
    bool m_associate_public_ip_address_isValid;

    OAIBootMode m_boot_mode;
    bool m_boot_mode_isSet;
    bool m_boot_mode_isValid;

    bool m_copy_private_ip;
    bool m_copy_private_ip_isSet;
    bool m_copy_private_ip_isValid;

    bool m_copy_tags;
    bool m_copy_tags_isSet;
    bool m_copy_tags_isValid;

    QString m_ec2_launch_template_id;
    bool m_ec2_launch_template_id_isSet;
    bool m_ec2_launch_template_id_isValid;

    bool m_enable_map_auto_tagging;
    bool m_enable_map_auto_tagging_isSet;
    bool m_enable_map_auto_tagging_isValid;

    OAILaunchConfigurationTemplate_largeVolumeConf m_large_volume_conf;
    bool m_large_volume_conf_isSet;
    bool m_large_volume_conf_isValid;

    QString m_launch_configuration_template_id;
    bool m_launch_configuration_template_id_isSet;
    bool m_launch_configuration_template_id_isValid;

    OAILaunchDisposition m_launch_disposition;
    bool m_launch_disposition_isSet;
    bool m_launch_disposition_isValid;

    OAILicensing m_licensing;
    bool m_licensing_isSet;
    bool m_licensing_isValid;

    QString m_map_auto_tagging_mpe_id;
    bool m_map_auto_tagging_mpe_id_isSet;
    bool m_map_auto_tagging_mpe_id_isValid;

    OAILaunchConfigurationTemplate_postLaunchActions m_post_launch_actions;
    bool m_post_launch_actions_isSet;
    bool m_post_launch_actions_isValid;

    OAILaunchConfigurationTemplate_smallVolumeConf m_small_volume_conf;
    bool m_small_volume_conf_isSet;
    bool m_small_volume_conf_isValid;

    qint32 m_small_volume_max_size;
    bool m_small_volume_max_size_isSet;
    bool m_small_volume_max_size_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    OAITargetInstanceTypeRightSizingMethod m_target_instance_type_right_sizing_method;
    bool m_target_instance_type_right_sizing_method_isSet;
    bool m_target_instance_type_right_sizing_method_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILaunchConfigurationTemplate)

#endif // OAILaunchConfigurationTemplate_H
