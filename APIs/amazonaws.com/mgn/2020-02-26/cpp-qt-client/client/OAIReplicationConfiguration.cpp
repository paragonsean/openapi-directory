/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationConfiguration::OAIReplicationConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationConfiguration::OAIReplicationConfiguration() {
    this->initializeModel();
}

OAIReplicationConfiguration::~OAIReplicationConfiguration() {}

void OAIReplicationConfiguration::initializeModel() {

    m_associate_default_security_group_isSet = false;
    m_associate_default_security_group_isValid = false;

    m_bandwidth_throttling_isSet = false;
    m_bandwidth_throttling_isValid = false;

    m_create_public_ip_isSet = false;
    m_create_public_ip_isValid = false;

    m_data_plane_routing_isSet = false;
    m_data_plane_routing_isValid = false;

    m_default_large_staging_disk_type_isSet = false;
    m_default_large_staging_disk_type_isValid = false;

    m_ebs_encryption_isSet = false;
    m_ebs_encryption_isValid = false;

    m_ebs_encryption_key_arn_isSet = false;
    m_ebs_encryption_key_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_replicated_disks_isSet = false;
    m_replicated_disks_isValid = false;

    m_replication_server_instance_type_isSet = false;
    m_replication_server_instance_type_isValid = false;

    m_replication_servers_security_groups_ids_isSet = false;
    m_replication_servers_security_groups_ids_isValid = false;

    m_source_server_id_isSet = false;
    m_source_server_id_isValid = false;

    m_staging_area_subnet_id_isSet = false;
    m_staging_area_subnet_id_isValid = false;

    m_staging_area_tags_isSet = false;
    m_staging_area_tags_isValid = false;

    m_use_dedicated_replication_server_isSet = false;
    m_use_dedicated_replication_server_isValid = false;

    m_use_fips_endpoint_isSet = false;
    m_use_fips_endpoint_isValid = false;
}

void OAIReplicationConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicationConfiguration::fromJsonObject(QJsonObject json) {

    m_associate_default_security_group_isValid = ::OpenAPI::fromJsonValue(m_associate_default_security_group, json[QString("associateDefaultSecurityGroup")]);
    m_associate_default_security_group_isSet = !json[QString("associateDefaultSecurityGroup")].isNull() && m_associate_default_security_group_isValid;

    m_bandwidth_throttling_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_throttling, json[QString("bandwidthThrottling")]);
    m_bandwidth_throttling_isSet = !json[QString("bandwidthThrottling")].isNull() && m_bandwidth_throttling_isValid;

    m_create_public_ip_isValid = ::OpenAPI::fromJsonValue(m_create_public_ip, json[QString("createPublicIP")]);
    m_create_public_ip_isSet = !json[QString("createPublicIP")].isNull() && m_create_public_ip_isValid;

    m_data_plane_routing_isValid = ::OpenAPI::fromJsonValue(m_data_plane_routing, json[QString("dataPlaneRouting")]);
    m_data_plane_routing_isSet = !json[QString("dataPlaneRouting")].isNull() && m_data_plane_routing_isValid;

    m_default_large_staging_disk_type_isValid = ::OpenAPI::fromJsonValue(m_default_large_staging_disk_type, json[QString("defaultLargeStagingDiskType")]);
    m_default_large_staging_disk_type_isSet = !json[QString("defaultLargeStagingDiskType")].isNull() && m_default_large_staging_disk_type_isValid;

    m_ebs_encryption_isValid = ::OpenAPI::fromJsonValue(m_ebs_encryption, json[QString("ebsEncryption")]);
    m_ebs_encryption_isSet = !json[QString("ebsEncryption")].isNull() && m_ebs_encryption_isValid;

    m_ebs_encryption_key_arn_isValid = ::OpenAPI::fromJsonValue(m_ebs_encryption_key_arn, json[QString("ebsEncryptionKeyArn")]);
    m_ebs_encryption_key_arn_isSet = !json[QString("ebsEncryptionKeyArn")].isNull() && m_ebs_encryption_key_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_replicated_disks_isValid = ::OpenAPI::fromJsonValue(m_replicated_disks, json[QString("replicatedDisks")]);
    m_replicated_disks_isSet = !json[QString("replicatedDisks")].isNull() && m_replicated_disks_isValid;

    m_replication_server_instance_type_isValid = ::OpenAPI::fromJsonValue(m_replication_server_instance_type, json[QString("replicationServerInstanceType")]);
    m_replication_server_instance_type_isSet = !json[QString("replicationServerInstanceType")].isNull() && m_replication_server_instance_type_isValid;

    m_replication_servers_security_groups_ids_isValid = ::OpenAPI::fromJsonValue(m_replication_servers_security_groups_ids, json[QString("replicationServersSecurityGroupsIDs")]);
    m_replication_servers_security_groups_ids_isSet = !json[QString("replicationServersSecurityGroupsIDs")].isNull() && m_replication_servers_security_groups_ids_isValid;

    m_source_server_id_isValid = ::OpenAPI::fromJsonValue(m_source_server_id, json[QString("sourceServerID")]);
    m_source_server_id_isSet = !json[QString("sourceServerID")].isNull() && m_source_server_id_isValid;

    m_staging_area_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_staging_area_subnet_id, json[QString("stagingAreaSubnetId")]);
    m_staging_area_subnet_id_isSet = !json[QString("stagingAreaSubnetId")].isNull() && m_staging_area_subnet_id_isValid;

    m_staging_area_tags_isValid = ::OpenAPI::fromJsonValue(m_staging_area_tags, json[QString("stagingAreaTags")]);
    m_staging_area_tags_isSet = !json[QString("stagingAreaTags")].isNull() && m_staging_area_tags_isValid;

    m_use_dedicated_replication_server_isValid = ::OpenAPI::fromJsonValue(m_use_dedicated_replication_server, json[QString("useDedicatedReplicationServer")]);
    m_use_dedicated_replication_server_isSet = !json[QString("useDedicatedReplicationServer")].isNull() && m_use_dedicated_replication_server_isValid;

    m_use_fips_endpoint_isValid = ::OpenAPI::fromJsonValue(m_use_fips_endpoint, json[QString("useFipsEndpoint")]);
    m_use_fips_endpoint_isSet = !json[QString("useFipsEndpoint")].isNull() && m_use_fips_endpoint_isValid;
}

QString OAIReplicationConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicationConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_associate_default_security_group_isSet) {
        obj.insert(QString("associateDefaultSecurityGroup"), ::OpenAPI::toJsonValue(m_associate_default_security_group));
    }
    if (m_bandwidth_throttling_isSet) {
        obj.insert(QString("bandwidthThrottling"), ::OpenAPI::toJsonValue(m_bandwidth_throttling));
    }
    if (m_create_public_ip_isSet) {
        obj.insert(QString("createPublicIP"), ::OpenAPI::toJsonValue(m_create_public_ip));
    }
    if (m_data_plane_routing.isSet()) {
        obj.insert(QString("dataPlaneRouting"), ::OpenAPI::toJsonValue(m_data_plane_routing));
    }
    if (m_default_large_staging_disk_type.isSet()) {
        obj.insert(QString("defaultLargeStagingDiskType"), ::OpenAPI::toJsonValue(m_default_large_staging_disk_type));
    }
    if (m_ebs_encryption.isSet()) {
        obj.insert(QString("ebsEncryption"), ::OpenAPI::toJsonValue(m_ebs_encryption));
    }
    if (m_ebs_encryption_key_arn_isSet) {
        obj.insert(QString("ebsEncryptionKeyArn"), ::OpenAPI::toJsonValue(m_ebs_encryption_key_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_replicated_disks.isSet()) {
        obj.insert(QString("replicatedDisks"), ::OpenAPI::toJsonValue(m_replicated_disks));
    }
    if (m_replication_server_instance_type_isSet) {
        obj.insert(QString("replicationServerInstanceType"), ::OpenAPI::toJsonValue(m_replication_server_instance_type));
    }
    if (m_replication_servers_security_groups_ids.isSet()) {
        obj.insert(QString("replicationServersSecurityGroupsIDs"), ::OpenAPI::toJsonValue(m_replication_servers_security_groups_ids));
    }
    if (m_source_server_id_isSet) {
        obj.insert(QString("sourceServerID"), ::OpenAPI::toJsonValue(m_source_server_id));
    }
    if (m_staging_area_subnet_id_isSet) {
        obj.insert(QString("stagingAreaSubnetId"), ::OpenAPI::toJsonValue(m_staging_area_subnet_id));
    }
    if (m_staging_area_tags.isSet()) {
        obj.insert(QString("stagingAreaTags"), ::OpenAPI::toJsonValue(m_staging_area_tags));
    }
    if (m_use_dedicated_replication_server_isSet) {
        obj.insert(QString("useDedicatedReplicationServer"), ::OpenAPI::toJsonValue(m_use_dedicated_replication_server));
    }
    if (m_use_fips_endpoint_isSet) {
        obj.insert(QString("useFipsEndpoint"), ::OpenAPI::toJsonValue(m_use_fips_endpoint));
    }
    return obj;
}

bool OAIReplicationConfiguration::getAssociateDefaultSecurityGroup() const {
    return m_associate_default_security_group;
}
void OAIReplicationConfiguration::setAssociateDefaultSecurityGroup(const bool &associate_default_security_group) {
    m_associate_default_security_group = associate_default_security_group;
    m_associate_default_security_group_isSet = true;
}

bool OAIReplicationConfiguration::is_associate_default_security_group_Set() const{
    return m_associate_default_security_group_isSet;
}

bool OAIReplicationConfiguration::is_associate_default_security_group_Valid() const{
    return m_associate_default_security_group_isValid;
}

qint32 OAIReplicationConfiguration::getBandwidthThrottling() const {
    return m_bandwidth_throttling;
}
void OAIReplicationConfiguration::setBandwidthThrottling(const qint32 &bandwidth_throttling) {
    m_bandwidth_throttling = bandwidth_throttling;
    m_bandwidth_throttling_isSet = true;
}

bool OAIReplicationConfiguration::is_bandwidth_throttling_Set() const{
    return m_bandwidth_throttling_isSet;
}

bool OAIReplicationConfiguration::is_bandwidth_throttling_Valid() const{
    return m_bandwidth_throttling_isValid;
}

bool OAIReplicationConfiguration::getCreatePublicIp() const {
    return m_create_public_ip;
}
void OAIReplicationConfiguration::setCreatePublicIp(const bool &create_public_ip) {
    m_create_public_ip = create_public_ip;
    m_create_public_ip_isSet = true;
}

bool OAIReplicationConfiguration::is_create_public_ip_Set() const{
    return m_create_public_ip_isSet;
}

bool OAIReplicationConfiguration::is_create_public_ip_Valid() const{
    return m_create_public_ip_isValid;
}

OAIReplicationConfigurationDataPlaneRouting OAIReplicationConfiguration::getDataPlaneRouting() const {
    return m_data_plane_routing;
}
void OAIReplicationConfiguration::setDataPlaneRouting(const OAIReplicationConfigurationDataPlaneRouting &data_plane_routing) {
    m_data_plane_routing = data_plane_routing;
    m_data_plane_routing_isSet = true;
}

bool OAIReplicationConfiguration::is_data_plane_routing_Set() const{
    return m_data_plane_routing_isSet;
}

bool OAIReplicationConfiguration::is_data_plane_routing_Valid() const{
    return m_data_plane_routing_isValid;
}

OAIReplicationConfigurationDefaultLargeStagingDiskType OAIReplicationConfiguration::getDefaultLargeStagingDiskType() const {
    return m_default_large_staging_disk_type;
}
void OAIReplicationConfiguration::setDefaultLargeStagingDiskType(const OAIReplicationConfigurationDefaultLargeStagingDiskType &default_large_staging_disk_type) {
    m_default_large_staging_disk_type = default_large_staging_disk_type;
    m_default_large_staging_disk_type_isSet = true;
}

bool OAIReplicationConfiguration::is_default_large_staging_disk_type_Set() const{
    return m_default_large_staging_disk_type_isSet;
}

bool OAIReplicationConfiguration::is_default_large_staging_disk_type_Valid() const{
    return m_default_large_staging_disk_type_isValid;
}

OAIReplicationConfigurationEbsEncryption OAIReplicationConfiguration::getEbsEncryption() const {
    return m_ebs_encryption;
}
void OAIReplicationConfiguration::setEbsEncryption(const OAIReplicationConfigurationEbsEncryption &ebs_encryption) {
    m_ebs_encryption = ebs_encryption;
    m_ebs_encryption_isSet = true;
}

bool OAIReplicationConfiguration::is_ebs_encryption_Set() const{
    return m_ebs_encryption_isSet;
}

bool OAIReplicationConfiguration::is_ebs_encryption_Valid() const{
    return m_ebs_encryption_isValid;
}

QString OAIReplicationConfiguration::getEbsEncryptionKeyArn() const {
    return m_ebs_encryption_key_arn;
}
void OAIReplicationConfiguration::setEbsEncryptionKeyArn(const QString &ebs_encryption_key_arn) {
    m_ebs_encryption_key_arn = ebs_encryption_key_arn;
    m_ebs_encryption_key_arn_isSet = true;
}

bool OAIReplicationConfiguration::is_ebs_encryption_key_arn_Set() const{
    return m_ebs_encryption_key_arn_isSet;
}

bool OAIReplicationConfiguration::is_ebs_encryption_key_arn_Valid() const{
    return m_ebs_encryption_key_arn_isValid;
}

QString OAIReplicationConfiguration::getName() const {
    return m_name;
}
void OAIReplicationConfiguration::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReplicationConfiguration::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReplicationConfiguration::is_name_Valid() const{
    return m_name_isValid;
}

QList OAIReplicationConfiguration::getReplicatedDisks() const {
    return m_replicated_disks;
}
void OAIReplicationConfiguration::setReplicatedDisks(const QList &replicated_disks) {
    m_replicated_disks = replicated_disks;
    m_replicated_disks_isSet = true;
}

bool OAIReplicationConfiguration::is_replicated_disks_Set() const{
    return m_replicated_disks_isSet;
}

bool OAIReplicationConfiguration::is_replicated_disks_Valid() const{
    return m_replicated_disks_isValid;
}

QString OAIReplicationConfiguration::getReplicationServerInstanceType() const {
    return m_replication_server_instance_type;
}
void OAIReplicationConfiguration::setReplicationServerInstanceType(const QString &replication_server_instance_type) {
    m_replication_server_instance_type = replication_server_instance_type;
    m_replication_server_instance_type_isSet = true;
}

bool OAIReplicationConfiguration::is_replication_server_instance_type_Set() const{
    return m_replication_server_instance_type_isSet;
}

bool OAIReplicationConfiguration::is_replication_server_instance_type_Valid() const{
    return m_replication_server_instance_type_isValid;
}

QList OAIReplicationConfiguration::getReplicationServersSecurityGroupsIds() const {
    return m_replication_servers_security_groups_ids;
}
void OAIReplicationConfiguration::setReplicationServersSecurityGroupsIds(const QList &replication_servers_security_groups_ids) {
    m_replication_servers_security_groups_ids = replication_servers_security_groups_ids;
    m_replication_servers_security_groups_ids_isSet = true;
}

bool OAIReplicationConfiguration::is_replication_servers_security_groups_ids_Set() const{
    return m_replication_servers_security_groups_ids_isSet;
}

bool OAIReplicationConfiguration::is_replication_servers_security_groups_ids_Valid() const{
    return m_replication_servers_security_groups_ids_isValid;
}

QString OAIReplicationConfiguration::getSourceServerId() const {
    return m_source_server_id;
}
void OAIReplicationConfiguration::setSourceServerId(const QString &source_server_id) {
    m_source_server_id = source_server_id;
    m_source_server_id_isSet = true;
}

bool OAIReplicationConfiguration::is_source_server_id_Set() const{
    return m_source_server_id_isSet;
}

bool OAIReplicationConfiguration::is_source_server_id_Valid() const{
    return m_source_server_id_isValid;
}

QString OAIReplicationConfiguration::getStagingAreaSubnetId() const {
    return m_staging_area_subnet_id;
}
void OAIReplicationConfiguration::setStagingAreaSubnetId(const QString &staging_area_subnet_id) {
    m_staging_area_subnet_id = staging_area_subnet_id;
    m_staging_area_subnet_id_isSet = true;
}

bool OAIReplicationConfiguration::is_staging_area_subnet_id_Set() const{
    return m_staging_area_subnet_id_isSet;
}

bool OAIReplicationConfiguration::is_staging_area_subnet_id_Valid() const{
    return m_staging_area_subnet_id_isValid;
}

QMap OAIReplicationConfiguration::getStagingAreaTags() const {
    return m_staging_area_tags;
}
void OAIReplicationConfiguration::setStagingAreaTags(const QMap &staging_area_tags) {
    m_staging_area_tags = staging_area_tags;
    m_staging_area_tags_isSet = true;
}

bool OAIReplicationConfiguration::is_staging_area_tags_Set() const{
    return m_staging_area_tags_isSet;
}

bool OAIReplicationConfiguration::is_staging_area_tags_Valid() const{
    return m_staging_area_tags_isValid;
}

bool OAIReplicationConfiguration::getUseDedicatedReplicationServer() const {
    return m_use_dedicated_replication_server;
}
void OAIReplicationConfiguration::setUseDedicatedReplicationServer(const bool &use_dedicated_replication_server) {
    m_use_dedicated_replication_server = use_dedicated_replication_server;
    m_use_dedicated_replication_server_isSet = true;
}

bool OAIReplicationConfiguration::is_use_dedicated_replication_server_Set() const{
    return m_use_dedicated_replication_server_isSet;
}

bool OAIReplicationConfiguration::is_use_dedicated_replication_server_Valid() const{
    return m_use_dedicated_replication_server_isValid;
}

bool OAIReplicationConfiguration::getUseFipsEndpoint() const {
    return m_use_fips_endpoint;
}
void OAIReplicationConfiguration::setUseFipsEndpoint(const bool &use_fips_endpoint) {
    m_use_fips_endpoint = use_fips_endpoint;
    m_use_fips_endpoint_isSet = true;
}

bool OAIReplicationConfiguration::is_use_fips_endpoint_Set() const{
    return m_use_fips_endpoint_isSet;
}

bool OAIReplicationConfiguration::is_use_fips_endpoint_Valid() const{
    return m_use_fips_endpoint_isValid;
}

bool OAIReplicationConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associate_default_security_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_throttling_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_plane_routing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_large_staging_disk_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_encryption.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ebs_encryption_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicated_disks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_server_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_servers_security_groups_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging_area_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_staging_area_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_dedicated_replication_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_fips_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicationConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
