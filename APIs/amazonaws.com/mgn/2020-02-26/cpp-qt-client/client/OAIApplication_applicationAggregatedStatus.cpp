/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication_applicationAggregatedStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication_applicationAggregatedStatus::OAIApplication_applicationAggregatedStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication_applicationAggregatedStatus::OAIApplication_applicationAggregatedStatus() {
    this->initializeModel();
}

OAIApplication_applicationAggregatedStatus::~OAIApplication_applicationAggregatedStatus() {}

void OAIApplication_applicationAggregatedStatus::initializeModel() {

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_last_update_date_time_isSet = false;
    m_last_update_date_time_isValid = false;

    m_progress_status_isSet = false;
    m_progress_status_isValid = false;

    m_total_source_servers_isSet = false;
    m_total_source_servers_isValid = false;
}

void OAIApplication_applicationAggregatedStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication_applicationAggregatedStatus::fromJsonObject(QJsonObject json) {

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_last_update_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_date_time, json[QString("lastUpdateDateTime")]);
    m_last_update_date_time_isSet = !json[QString("lastUpdateDateTime")].isNull() && m_last_update_date_time_isValid;

    m_progress_status_isValid = ::OpenAPI::fromJsonValue(m_progress_status, json[QString("progressStatus")]);
    m_progress_status_isSet = !json[QString("progressStatus")].isNull() && m_progress_status_isValid;

    m_total_source_servers_isValid = ::OpenAPI::fromJsonValue(m_total_source_servers, json[QString("totalSourceServers")]);
    m_total_source_servers_isSet = !json[QString("totalSourceServers")].isNull() && m_total_source_servers_isValid;
}

QString OAIApplication_applicationAggregatedStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication_applicationAggregatedStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_health_status.isSet()) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_last_update_date_time_isSet) {
        obj.insert(QString("lastUpdateDateTime"), ::OpenAPI::toJsonValue(m_last_update_date_time));
    }
    if (m_progress_status.isSet()) {
        obj.insert(QString("progressStatus"), ::OpenAPI::toJsonValue(m_progress_status));
    }
    if (m_total_source_servers_isSet) {
        obj.insert(QString("totalSourceServers"), ::OpenAPI::toJsonValue(m_total_source_servers));
    }
    return obj;
}

OAIApplicationHealthStatus OAIApplication_applicationAggregatedStatus::getHealthStatus() const {
    return m_health_status;
}
void OAIApplication_applicationAggregatedStatus::setHealthStatus(const OAIApplicationHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIApplication_applicationAggregatedStatus::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIApplication_applicationAggregatedStatus::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIApplication_applicationAggregatedStatus::getLastUpdateDateTime() const {
    return m_last_update_date_time;
}
void OAIApplication_applicationAggregatedStatus::setLastUpdateDateTime(const QString &last_update_date_time) {
    m_last_update_date_time = last_update_date_time;
    m_last_update_date_time_isSet = true;
}

bool OAIApplication_applicationAggregatedStatus::is_last_update_date_time_Set() const{
    return m_last_update_date_time_isSet;
}

bool OAIApplication_applicationAggregatedStatus::is_last_update_date_time_Valid() const{
    return m_last_update_date_time_isValid;
}

OAIApplicationProgressStatus OAIApplication_applicationAggregatedStatus::getProgressStatus() const {
    return m_progress_status;
}
void OAIApplication_applicationAggregatedStatus::setProgressStatus(const OAIApplicationProgressStatus &progress_status) {
    m_progress_status = progress_status;
    m_progress_status_isSet = true;
}

bool OAIApplication_applicationAggregatedStatus::is_progress_status_Set() const{
    return m_progress_status_isSet;
}

bool OAIApplication_applicationAggregatedStatus::is_progress_status_Valid() const{
    return m_progress_status_isValid;
}

qint32 OAIApplication_applicationAggregatedStatus::getTotalSourceServers() const {
    return m_total_source_servers;
}
void OAIApplication_applicationAggregatedStatus::setTotalSourceServers(const qint32 &total_source_servers) {
    m_total_source_servers = total_source_servers;
    m_total_source_servers_isSet = true;
}

bool OAIApplication_applicationAggregatedStatus::is_total_source_servers_Set() const{
    return m_total_source_servers_isSet;
}

bool OAIApplication_applicationAggregatedStatus::is_total_source_servers_Valid() const{
    return m_total_source_servers_isValid;
}

bool OAIApplication_applicationAggregatedStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_source_servers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication_applicationAggregatedStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
