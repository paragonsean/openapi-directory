/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentificationHints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentificationHints::OAIIdentificationHints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentificationHints::OAIIdentificationHints() {
    this->initializeModel();
}

OAIIdentificationHints::~OAIIdentificationHints() {}

void OAIIdentificationHints::initializeModel() {

    m_aws_instance_id_isSet = false;
    m_aws_instance_id_isValid = false;

    m_fqdn_isSet = false;
    m_fqdn_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_vm_path_isSet = false;
    m_vm_path_isValid = false;

    m_vm_ware_uuid_isSet = false;
    m_vm_ware_uuid_isValid = false;
}

void OAIIdentificationHints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentificationHints::fromJsonObject(QJsonObject json) {

    m_aws_instance_id_isValid = ::OpenAPI::fromJsonValue(m_aws_instance_id, json[QString("awsInstanceID")]);
    m_aws_instance_id_isSet = !json[QString("awsInstanceID")].isNull() && m_aws_instance_id_isValid;

    m_fqdn_isValid = ::OpenAPI::fromJsonValue(m_fqdn, json[QString("fqdn")]);
    m_fqdn_isSet = !json[QString("fqdn")].isNull() && m_fqdn_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_vm_path_isValid = ::OpenAPI::fromJsonValue(m_vm_path, json[QString("vmPath")]);
    m_vm_path_isSet = !json[QString("vmPath")].isNull() && m_vm_path_isValid;

    m_vm_ware_uuid_isValid = ::OpenAPI::fromJsonValue(m_vm_ware_uuid, json[QString("vmWareUuid")]);
    m_vm_ware_uuid_isSet = !json[QString("vmWareUuid")].isNull() && m_vm_ware_uuid_isValid;
}

QString OAIIdentificationHints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentificationHints::asJsonObject() const {
    QJsonObject obj;
    if (m_aws_instance_id_isSet) {
        obj.insert(QString("awsInstanceID"), ::OpenAPI::toJsonValue(m_aws_instance_id));
    }
    if (m_fqdn_isSet) {
        obj.insert(QString("fqdn"), ::OpenAPI::toJsonValue(m_fqdn));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_vm_path_isSet) {
        obj.insert(QString("vmPath"), ::OpenAPI::toJsonValue(m_vm_path));
    }
    if (m_vm_ware_uuid_isSet) {
        obj.insert(QString("vmWareUuid"), ::OpenAPI::toJsonValue(m_vm_ware_uuid));
    }
    return obj;
}

QString OAIIdentificationHints::getAwsInstanceId() const {
    return m_aws_instance_id;
}
void OAIIdentificationHints::setAwsInstanceId(const QString &aws_instance_id) {
    m_aws_instance_id = aws_instance_id;
    m_aws_instance_id_isSet = true;
}

bool OAIIdentificationHints::is_aws_instance_id_Set() const{
    return m_aws_instance_id_isSet;
}

bool OAIIdentificationHints::is_aws_instance_id_Valid() const{
    return m_aws_instance_id_isValid;
}

QString OAIIdentificationHints::getFqdn() const {
    return m_fqdn;
}
void OAIIdentificationHints::setFqdn(const QString &fqdn) {
    m_fqdn = fqdn;
    m_fqdn_isSet = true;
}

bool OAIIdentificationHints::is_fqdn_Set() const{
    return m_fqdn_isSet;
}

bool OAIIdentificationHints::is_fqdn_Valid() const{
    return m_fqdn_isValid;
}

QString OAIIdentificationHints::getHostname() const {
    return m_hostname;
}
void OAIIdentificationHints::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIIdentificationHints::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIIdentificationHints::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIIdentificationHints::getVmPath() const {
    return m_vm_path;
}
void OAIIdentificationHints::setVmPath(const QString &vm_path) {
    m_vm_path = vm_path;
    m_vm_path_isSet = true;
}

bool OAIIdentificationHints::is_vm_path_Set() const{
    return m_vm_path_isSet;
}

bool OAIIdentificationHints::is_vm_path_Valid() const{
    return m_vm_path_isValid;
}

QString OAIIdentificationHints::getVmWareUuid() const {
    return m_vm_ware_uuid;
}
void OAIIdentificationHints::setVmWareUuid(const QString &vm_ware_uuid) {
    m_vm_ware_uuid = vm_ware_uuid;
    m_vm_ware_uuid_isSet = true;
}

bool OAIIdentificationHints::is_vm_ware_uuid_Set() const{
    return m_vm_ware_uuid_isSet;
}

bool OAIIdentificationHints::is_vm_ware_uuid_Valid() const{
    return m_vm_ware_uuid_isValid;
}

bool OAIIdentificationHints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aws_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_ware_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentificationHints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
