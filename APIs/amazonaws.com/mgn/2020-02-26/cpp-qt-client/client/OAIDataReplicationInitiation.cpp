/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataReplicationInitiation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataReplicationInitiation::OAIDataReplicationInitiation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataReplicationInitiation::OAIDataReplicationInitiation() {
    this->initializeModel();
}

OAIDataReplicationInitiation::~OAIDataReplicationInitiation() {}

void OAIDataReplicationInitiation::initializeModel() {

    m_next_attempt_date_time_isSet = false;
    m_next_attempt_date_time_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_steps_isSet = false;
    m_steps_isValid = false;
}

void OAIDataReplicationInitiation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataReplicationInitiation::fromJsonObject(QJsonObject json) {

    m_next_attempt_date_time_isValid = ::OpenAPI::fromJsonValue(m_next_attempt_date_time, json[QString("nextAttemptDateTime")]);
    m_next_attempt_date_time_isSet = !json[QString("nextAttemptDateTime")].isNull() && m_next_attempt_date_time_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_steps_isValid = ::OpenAPI::fromJsonValue(m_steps, json[QString("steps")]);
    m_steps_isSet = !json[QString("steps")].isNull() && m_steps_isValid;
}

QString OAIDataReplicationInitiation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataReplicationInitiation::asJsonObject() const {
    QJsonObject obj;
    if (m_next_attempt_date_time_isSet) {
        obj.insert(QString("nextAttemptDateTime"), ::OpenAPI::toJsonValue(m_next_attempt_date_time));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_steps.isSet()) {
        obj.insert(QString("steps"), ::OpenAPI::toJsonValue(m_steps));
    }
    return obj;
}

QString OAIDataReplicationInitiation::getNextAttemptDateTime() const {
    return m_next_attempt_date_time;
}
void OAIDataReplicationInitiation::setNextAttemptDateTime(const QString &next_attempt_date_time) {
    m_next_attempt_date_time = next_attempt_date_time;
    m_next_attempt_date_time_isSet = true;
}

bool OAIDataReplicationInitiation::is_next_attempt_date_time_Set() const{
    return m_next_attempt_date_time_isSet;
}

bool OAIDataReplicationInitiation::is_next_attempt_date_time_Valid() const{
    return m_next_attempt_date_time_isValid;
}

QString OAIDataReplicationInitiation::getStartDateTime() const {
    return m_start_date_time;
}
void OAIDataReplicationInitiation::setStartDateTime(const QString &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIDataReplicationInitiation::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIDataReplicationInitiation::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QList OAIDataReplicationInitiation::getSteps() const {
    return m_steps;
}
void OAIDataReplicationInitiation::setSteps(const QList &steps) {
    m_steps = steps;
    m_steps_isSet = true;
}

bool OAIDataReplicationInitiation::is_steps_Set() const{
    return m_steps_isSet;
}

bool OAIDataReplicationInitiation::is_steps_Valid() const{
    return m_steps_isValid;
}

bool OAIDataReplicationInitiation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_attempt_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_steps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataReplicationInitiation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
