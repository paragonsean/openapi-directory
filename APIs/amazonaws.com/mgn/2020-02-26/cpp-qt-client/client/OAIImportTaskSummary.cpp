/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportTaskSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportTaskSummary::OAIImportTaskSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportTaskSummary::OAIImportTaskSummary() {
    this->initializeModel();
}

OAIImportTaskSummary::~OAIImportTaskSummary() {}

void OAIImportTaskSummary::initializeModel() {

    m_applications_isSet = false;
    m_applications_isValid = false;

    m_servers_isSet = false;
    m_servers_isValid = false;

    m_waves_isSet = false;
    m_waves_isValid = false;
}

void OAIImportTaskSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportTaskSummary::fromJsonObject(QJsonObject json) {

    m_applications_isValid = ::OpenAPI::fromJsonValue(m_applications, json[QString("applications")]);
    m_applications_isSet = !json[QString("applications")].isNull() && m_applications_isValid;

    m_servers_isValid = ::OpenAPI::fromJsonValue(m_servers, json[QString("servers")]);
    m_servers_isSet = !json[QString("servers")].isNull() && m_servers_isValid;

    m_waves_isValid = ::OpenAPI::fromJsonValue(m_waves, json[QString("waves")]);
    m_waves_isSet = !json[QString("waves")].isNull() && m_waves_isValid;
}

QString OAIImportTaskSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportTaskSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_applications.isSet()) {
        obj.insert(QString("applications"), ::OpenAPI::toJsonValue(m_applications));
    }
    if (m_servers.isSet()) {
        obj.insert(QString("servers"), ::OpenAPI::toJsonValue(m_servers));
    }
    if (m_waves.isSet()) {
        obj.insert(QString("waves"), ::OpenAPI::toJsonValue(m_waves));
    }
    return obj;
}

OAIImportTaskSummary_applications OAIImportTaskSummary::getApplications() const {
    return m_applications;
}
void OAIImportTaskSummary::setApplications(const OAIImportTaskSummary_applications &applications) {
    m_applications = applications;
    m_applications_isSet = true;
}

bool OAIImportTaskSummary::is_applications_Set() const{
    return m_applications_isSet;
}

bool OAIImportTaskSummary::is_applications_Valid() const{
    return m_applications_isValid;
}

OAIImportTaskSummary_servers OAIImportTaskSummary::getServers() const {
    return m_servers;
}
void OAIImportTaskSummary::setServers(const OAIImportTaskSummary_servers &servers) {
    m_servers = servers;
    m_servers_isSet = true;
}

bool OAIImportTaskSummary::is_servers_Set() const{
    return m_servers_isSet;
}

bool OAIImportTaskSummary::is_servers_Valid() const{
    return m_servers_isValid;
}

OAIImportTaskSummary_waves OAIImportTaskSummary::getWaves() const {
    return m_waves;
}
void OAIImportTaskSummary::setWaves(const OAIImportTaskSummary_waves &waves) {
    m_waves = waves;
    m_waves_isSet = true;
}

bool OAIImportTaskSummary::is_waves_Set() const{
    return m_waves_isSet;
}

bool OAIImportTaskSummary::is_waves_Valid() const{
    return m_waves_isValid;
}

bool OAIImportTaskSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applications.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_servers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_waves.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportTaskSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
