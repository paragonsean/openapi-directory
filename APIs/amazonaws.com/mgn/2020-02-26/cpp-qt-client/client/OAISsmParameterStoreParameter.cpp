/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISsmParameterStoreParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISsmParameterStoreParameter::OAISsmParameterStoreParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISsmParameterStoreParameter::OAISsmParameterStoreParameter() {
    this->initializeModel();
}

OAISsmParameterStoreParameter::~OAISsmParameterStoreParameter() {}

void OAISsmParameterStoreParameter::initializeModel() {

    m_parameter_name_isSet = false;
    m_parameter_name_isValid = false;

    m_parameter_type_isSet = false;
    m_parameter_type_isValid = false;
}

void OAISsmParameterStoreParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISsmParameterStoreParameter::fromJsonObject(QJsonObject json) {

    m_parameter_name_isValid = ::OpenAPI::fromJsonValue(m_parameter_name, json[QString("parameterName")]);
    m_parameter_name_isSet = !json[QString("parameterName")].isNull() && m_parameter_name_isValid;

    m_parameter_type_isValid = ::OpenAPI::fromJsonValue(m_parameter_type, json[QString("parameterType")]);
    m_parameter_type_isSet = !json[QString("parameterType")].isNull() && m_parameter_type_isValid;
}

QString OAISsmParameterStoreParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISsmParameterStoreParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_name_isSet) {
        obj.insert(QString("parameterName"), ::OpenAPI::toJsonValue(m_parameter_name));
    }
    if (m_parameter_type.isSet()) {
        obj.insert(QString("parameterType"), ::OpenAPI::toJsonValue(m_parameter_type));
    }
    return obj;
}

QString OAISsmParameterStoreParameter::getParameterName() const {
    return m_parameter_name;
}
void OAISsmParameterStoreParameter::setParameterName(const QString &parameter_name) {
    m_parameter_name = parameter_name;
    m_parameter_name_isSet = true;
}

bool OAISsmParameterStoreParameter::is_parameter_name_Set() const{
    return m_parameter_name_isSet;
}

bool OAISsmParameterStoreParameter::is_parameter_name_Valid() const{
    return m_parameter_name_isValid;
}

OAISsmParameterStoreParameterType OAISsmParameterStoreParameter::getParameterType() const {
    return m_parameter_type;
}
void OAISsmParameterStoreParameter::setParameterType(const OAISsmParameterStoreParameterType &parameter_type) {
    m_parameter_type = parameter_type;
    m_parameter_type_isSet = true;
}

bool OAISsmParameterStoreParameter::is_parameter_type_Set() const{
    return m_parameter_type_isSet;
}

bool OAISsmParameterStoreParameter::is_parameter_type_Valid() const{
    return m_parameter_type_isValid;
}

bool OAISsmParameterStoreParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISsmParameterStoreParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_parameter_name_isValid && m_parameter_type_isValid && true;
}

} // namespace OpenAPI
