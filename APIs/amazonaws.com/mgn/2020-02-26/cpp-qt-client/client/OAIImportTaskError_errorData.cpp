/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportTaskError_errorData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportTaskError_errorData::OAIImportTaskError_errorData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportTaskError_errorData::OAIImportTaskError_errorData() {
    this->initializeModel();
}

OAIImportTaskError_errorData::~OAIImportTaskError_errorData() {}

void OAIImportTaskError_errorData::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_ec2_launch_template_id_isSet = false;
    m_ec2_launch_template_id_isValid = false;

    m_raw_error_isSet = false;
    m_raw_error_isValid = false;

    m_row_number_isSet = false;
    m_row_number_isValid = false;

    m_source_server_id_isSet = false;
    m_source_server_id_isValid = false;

    m_wave_id_isSet = false;
    m_wave_id_isValid = false;
}

void OAIImportTaskError_errorData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportTaskError_errorData::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountID")]);
    m_account_id_isSet = !json[QString("accountID")].isNull() && m_account_id_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationID")]);
    m_application_id_isSet = !json[QString("applicationID")].isNull() && m_application_id_isValid;

    m_ec2_launch_template_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_launch_template_id, json[QString("ec2LaunchTemplateID")]);
    m_ec2_launch_template_id_isSet = !json[QString("ec2LaunchTemplateID")].isNull() && m_ec2_launch_template_id_isValid;

    m_raw_error_isValid = ::OpenAPI::fromJsonValue(m_raw_error, json[QString("rawError")]);
    m_raw_error_isSet = !json[QString("rawError")].isNull() && m_raw_error_isValid;

    m_row_number_isValid = ::OpenAPI::fromJsonValue(m_row_number, json[QString("rowNumber")]);
    m_row_number_isSet = !json[QString("rowNumber")].isNull() && m_row_number_isValid;

    m_source_server_id_isValid = ::OpenAPI::fromJsonValue(m_source_server_id, json[QString("sourceServerID")]);
    m_source_server_id_isSet = !json[QString("sourceServerID")].isNull() && m_source_server_id_isValid;

    m_wave_id_isValid = ::OpenAPI::fromJsonValue(m_wave_id, json[QString("waveID")]);
    m_wave_id_isSet = !json[QString("waveID")].isNull() && m_wave_id_isValid;
}

QString OAIImportTaskError_errorData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportTaskError_errorData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationID"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_ec2_launch_template_id_isSet) {
        obj.insert(QString("ec2LaunchTemplateID"), ::OpenAPI::toJsonValue(m_ec2_launch_template_id));
    }
    if (m_raw_error_isSet) {
        obj.insert(QString("rawError"), ::OpenAPI::toJsonValue(m_raw_error));
    }
    if (m_row_number_isSet) {
        obj.insert(QString("rowNumber"), ::OpenAPI::toJsonValue(m_row_number));
    }
    if (m_source_server_id_isSet) {
        obj.insert(QString("sourceServerID"), ::OpenAPI::toJsonValue(m_source_server_id));
    }
    if (m_wave_id_isSet) {
        obj.insert(QString("waveID"), ::OpenAPI::toJsonValue(m_wave_id));
    }
    return obj;
}

QString OAIImportTaskError_errorData::getAccountId() const {
    return m_account_id;
}
void OAIImportTaskError_errorData::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIImportTaskError_errorData::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIImportTaskError_errorData::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIImportTaskError_errorData::getApplicationId() const {
    return m_application_id;
}
void OAIImportTaskError_errorData::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIImportTaskError_errorData::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIImportTaskError_errorData::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIImportTaskError_errorData::getEc2LaunchTemplateId() const {
    return m_ec2_launch_template_id;
}
void OAIImportTaskError_errorData::setEc2LaunchTemplateId(const QString &ec2_launch_template_id) {
    m_ec2_launch_template_id = ec2_launch_template_id;
    m_ec2_launch_template_id_isSet = true;
}

bool OAIImportTaskError_errorData::is_ec2_launch_template_id_Set() const{
    return m_ec2_launch_template_id_isSet;
}

bool OAIImportTaskError_errorData::is_ec2_launch_template_id_Valid() const{
    return m_ec2_launch_template_id_isValid;
}

QString OAIImportTaskError_errorData::getRawError() const {
    return m_raw_error;
}
void OAIImportTaskError_errorData::setRawError(const QString &raw_error) {
    m_raw_error = raw_error;
    m_raw_error_isSet = true;
}

bool OAIImportTaskError_errorData::is_raw_error_Set() const{
    return m_raw_error_isSet;
}

bool OAIImportTaskError_errorData::is_raw_error_Valid() const{
    return m_raw_error_isValid;
}

qint32 OAIImportTaskError_errorData::getRowNumber() const {
    return m_row_number;
}
void OAIImportTaskError_errorData::setRowNumber(const qint32 &row_number) {
    m_row_number = row_number;
    m_row_number_isSet = true;
}

bool OAIImportTaskError_errorData::is_row_number_Set() const{
    return m_row_number_isSet;
}

bool OAIImportTaskError_errorData::is_row_number_Valid() const{
    return m_row_number_isValid;
}

QString OAIImportTaskError_errorData::getSourceServerId() const {
    return m_source_server_id;
}
void OAIImportTaskError_errorData::setSourceServerId(const QString &source_server_id) {
    m_source_server_id = source_server_id;
    m_source_server_id_isSet = true;
}

bool OAIImportTaskError_errorData::is_source_server_id_Set() const{
    return m_source_server_id_isSet;
}

bool OAIImportTaskError_errorData::is_source_server_id_Valid() const{
    return m_source_server_id_isValid;
}

QString OAIImportTaskError_errorData::getWaveId() const {
    return m_wave_id;
}
void OAIImportTaskError_errorData::setWaveId(const QString &wave_id) {
    m_wave_id = wave_id;
    m_wave_id_isSet = true;
}

bool OAIImportTaskError_errorData::is_wave_id_Set() const{
    return m_wave_id_isSet;
}

bool OAIImportTaskError_errorData::is_wave_id_Valid() const{
    return m_wave_id_isValid;
}

bool OAIImportTaskError_errorData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_launch_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_raw_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wave_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportTaskError_errorData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
