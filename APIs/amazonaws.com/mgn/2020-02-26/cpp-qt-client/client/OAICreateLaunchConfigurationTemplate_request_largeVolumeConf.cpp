/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLaunchConfigurationTemplate_request_largeVolumeConf.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::OAICreateLaunchConfigurationTemplate_request_largeVolumeConf(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::OAICreateLaunchConfigurationTemplate_request_largeVolumeConf() {
    this->initializeModel();
}

OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::~OAICreateLaunchConfigurationTemplate_request_largeVolumeConf() {}

void OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::initializeModel() {

    m_iops_isSet = false;
    m_iops_isValid = false;

    m_throughput_isSet = false;
    m_throughput_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;
}

void OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::fromJsonObject(QJsonObject json) {

    m_iops_isValid = ::OpenAPI::fromJsonValue(m_iops, json[QString("iops")]);
    m_iops_isSet = !json[QString("iops")].isNull() && m_iops_isValid;

    m_throughput_isValid = ::OpenAPI::fromJsonValue(m_throughput, json[QString("throughput")]);
    m_throughput_isSet = !json[QString("throughput")].isNull() && m_throughput_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("volumeType")]);
    m_volume_type_isSet = !json[QString("volumeType")].isNull() && m_volume_type_isValid;
}

QString OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::asJsonObject() const {
    QJsonObject obj;
    if (m_iops_isSet) {
        obj.insert(QString("iops"), ::OpenAPI::toJsonValue(m_iops));
    }
    if (m_throughput_isSet) {
        obj.insert(QString("throughput"), ::OpenAPI::toJsonValue(m_throughput));
    }
    if (m_volume_type.isSet()) {
        obj.insert(QString("volumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    return obj;
}

qint32 OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::getIops() const {
    return m_iops;
}
void OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::setIops(const qint32 &iops) {
    m_iops = iops;
    m_iops_isSet = true;
}

bool OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::is_iops_Set() const{
    return m_iops_isSet;
}

bool OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::is_iops_Valid() const{
    return m_iops_isValid;
}

qint32 OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::getThroughput() const {
    return m_throughput;
}
void OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::setThroughput(const qint32 &throughput) {
    m_throughput = throughput;
    m_throughput_isSet = true;
}

bool OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::is_throughput_Set() const{
    return m_throughput_isSet;
}

bool OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::is_throughput_Valid() const{
    return m_throughput_isValid;
}

OAIVolumeType OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::getVolumeType() const {
    return m_volume_type;
}
void OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::setVolumeType(const OAIVolumeType &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

bool OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_iops_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLaunchConfigurationTemplate_request_largeVolumeConf::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
