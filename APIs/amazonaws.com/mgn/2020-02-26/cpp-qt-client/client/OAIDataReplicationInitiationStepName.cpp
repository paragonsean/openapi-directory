/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataReplicationInitiationStepName.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataReplicationInitiationStepName::OAIDataReplicationInitiationStepName(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataReplicationInitiationStepName::OAIDataReplicationInitiationStepName() {
    this->initializeModel();
}

OAIDataReplicationInitiationStepName::~OAIDataReplicationInitiationStepName() {}

void OAIDataReplicationInitiationStepName::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataReplicationInitiationStepName::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataReplicationInitiationStepName::fromJson(QString jsonString) {
    
    if ( jsonString.compare("WAIT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::WAIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_SECURITY_GROUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::CREATE_SECURITY_GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_REPLICATION_SERVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::LAUNCH_REPLICATION_SERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BOOT_REPLICATION_SERVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::BOOT_REPLICATION_SERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AUTHENTICATE_WITH_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::AUTHENTICATE_WITH_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DOWNLOAD_REPLICATION_SOFTWARE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::DOWNLOAD_REPLICATION_SOFTWARE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATE_STAGING_DISKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::CREATE_STAGING_DISKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ATTACH_STAGING_DISKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::ATTACH_STAGING_DISKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAIR_REPLICATION_SERVER_WITH_AGENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::PAIR_REPLICATION_SERVER_WITH_AGENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONNECT_AGENT_TO_REPLICATION_SERVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::CONNECT_AGENT_TO_REPLICATION_SERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("START_DATA_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationInitiationStepName::START_DATA_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataReplicationInitiationStepName::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataReplicationInitiationStepName::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataReplicationInitiationStepName::WAIT:
            val = "WAIT";
            break;
        case eOAIDataReplicationInitiationStepName::CREATE_SECURITY_GROUP:
            val = "CREATE_SECURITY_GROUP";
            break;
        case eOAIDataReplicationInitiationStepName::LAUNCH_REPLICATION_SERVER:
            val = "LAUNCH_REPLICATION_SERVER";
            break;
        case eOAIDataReplicationInitiationStepName::BOOT_REPLICATION_SERVER:
            val = "BOOT_REPLICATION_SERVER";
            break;
        case eOAIDataReplicationInitiationStepName::AUTHENTICATE_WITH_SERVICE:
            val = "AUTHENTICATE_WITH_SERVICE";
            break;
        case eOAIDataReplicationInitiationStepName::DOWNLOAD_REPLICATION_SOFTWARE:
            val = "DOWNLOAD_REPLICATION_SOFTWARE";
            break;
        case eOAIDataReplicationInitiationStepName::CREATE_STAGING_DISKS:
            val = "CREATE_STAGING_DISKS";
            break;
        case eOAIDataReplicationInitiationStepName::ATTACH_STAGING_DISKS:
            val = "ATTACH_STAGING_DISKS";
            break;
        case eOAIDataReplicationInitiationStepName::PAIR_REPLICATION_SERVER_WITH_AGENT:
            val = "PAIR_REPLICATION_SERVER_WITH_AGENT";
            break;
        case eOAIDataReplicationInitiationStepName::CONNECT_AGENT_TO_REPLICATION_SERVER:
            val = "CONNECT_AGENT_TO_REPLICATION_SERVER";
            break;
        case eOAIDataReplicationInitiationStepName::START_DATA_TRANSFER:
            val = "START_DATA_TRANSFER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataReplicationInitiationStepName::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataReplicationInitiationStepName::eOAIDataReplicationInitiationStepName OAIDataReplicationInitiationStepName::getValue() const {
    return m_value;
}

void OAIDataReplicationInitiationStepName::setValue(const OAIDataReplicationInitiationStepName::eOAIDataReplicationInitiationStepName& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataReplicationInitiationStepName::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataReplicationInitiationStepName::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
