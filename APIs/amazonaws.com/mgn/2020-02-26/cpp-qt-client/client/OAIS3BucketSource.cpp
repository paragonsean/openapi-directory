/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3BucketSource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3BucketSource::OAIS3BucketSource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3BucketSource::OAIS3BucketSource() {
    this->initializeModel();
}

OAIS3BucketSource::~OAIS3BucketSource() {}

void OAIS3BucketSource::initializeModel() {

    m_s3_bucket_isSet = false;
    m_s3_bucket_isValid = false;

    m_s3_bucket_owner_isSet = false;
    m_s3_bucket_owner_isValid = false;

    m_s3_key_isSet = false;
    m_s3_key_isValid = false;
}

void OAIS3BucketSource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3BucketSource::fromJsonObject(QJsonObject json) {

    m_s3_bucket_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket, json[QString("s3Bucket")]);
    m_s3_bucket_isSet = !json[QString("s3Bucket")].isNull() && m_s3_bucket_isValid;

    m_s3_bucket_owner_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_owner, json[QString("s3BucketOwner")]);
    m_s3_bucket_owner_isSet = !json[QString("s3BucketOwner")].isNull() && m_s3_bucket_owner_isValid;

    m_s3_key_isValid = ::OpenAPI::fromJsonValue(m_s3_key, json[QString("s3Key")]);
    m_s3_key_isSet = !json[QString("s3Key")].isNull() && m_s3_key_isValid;
}

QString OAIS3BucketSource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3BucketSource::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_bucket_isSet) {
        obj.insert(QString("s3Bucket"), ::OpenAPI::toJsonValue(m_s3_bucket));
    }
    if (m_s3_bucket_owner_isSet) {
        obj.insert(QString("s3BucketOwner"), ::OpenAPI::toJsonValue(m_s3_bucket_owner));
    }
    if (m_s3_key_isSet) {
        obj.insert(QString("s3Key"), ::OpenAPI::toJsonValue(m_s3_key));
    }
    return obj;
}

QString OAIS3BucketSource::getS3Bucket() const {
    return m_s3_bucket;
}
void OAIS3BucketSource::setS3Bucket(const QString &s3_bucket) {
    m_s3_bucket = s3_bucket;
    m_s3_bucket_isSet = true;
}

bool OAIS3BucketSource::is_s3_bucket_Set() const{
    return m_s3_bucket_isSet;
}

bool OAIS3BucketSource::is_s3_bucket_Valid() const{
    return m_s3_bucket_isValid;
}

QString OAIS3BucketSource::getS3BucketOwner() const {
    return m_s3_bucket_owner;
}
void OAIS3BucketSource::setS3BucketOwner(const QString &s3_bucket_owner) {
    m_s3_bucket_owner = s3_bucket_owner;
    m_s3_bucket_owner_isSet = true;
}

bool OAIS3BucketSource::is_s3_bucket_owner_Set() const{
    return m_s3_bucket_owner_isSet;
}

bool OAIS3BucketSource::is_s3_bucket_owner_Valid() const{
    return m_s3_bucket_owner_isValid;
}

QString OAIS3BucketSource::getS3Key() const {
    return m_s3_key;
}
void OAIS3BucketSource::setS3Key(const QString &s3_key) {
    m_s3_key = s3_key;
    m_s3_key_isSet = true;
}

bool OAIS3BucketSource::is_s3_key_Set() const{
    return m_s3_key_isSet;
}

bool OAIS3BucketSource::is_s3_key_Valid() const{
    return m_s3_key_isValid;
}

bool OAIS3BucketSource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_bucket_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3BucketSource::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_isValid && m_s3_key_isValid && true;
}

} // namespace OpenAPI
