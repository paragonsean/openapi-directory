/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeSourceServersRequestFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeSourceServersRequestFilters::OAIDescribeSourceServersRequestFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeSourceServersRequestFilters::OAIDescribeSourceServersRequestFilters() {
    this->initializeModel();
}

OAIDescribeSourceServersRequestFilters::~OAIDescribeSourceServersRequestFilters() {}

void OAIDescribeSourceServersRequestFilters::initializeModel() {

    m_application_ids_isSet = false;
    m_application_ids_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_life_cycle_states_isSet = false;
    m_life_cycle_states_isValid = false;

    m_replication_types_isSet = false;
    m_replication_types_isValid = false;

    m_source_server_ids_isSet = false;
    m_source_server_ids_isValid = false;
}

void OAIDescribeSourceServersRequestFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeSourceServersRequestFilters::fromJsonObject(QJsonObject json) {

    m_application_ids_isValid = ::OpenAPI::fromJsonValue(m_application_ids, json[QString("applicationIDs")]);
    m_application_ids_isSet = !json[QString("applicationIDs")].isNull() && m_application_ids_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("isArchived")]);
    m_is_archived_isSet = !json[QString("isArchived")].isNull() && m_is_archived_isValid;

    m_life_cycle_states_isValid = ::OpenAPI::fromJsonValue(m_life_cycle_states, json[QString("lifeCycleStates")]);
    m_life_cycle_states_isSet = !json[QString("lifeCycleStates")].isNull() && m_life_cycle_states_isValid;

    m_replication_types_isValid = ::OpenAPI::fromJsonValue(m_replication_types, json[QString("replicationTypes")]);
    m_replication_types_isSet = !json[QString("replicationTypes")].isNull() && m_replication_types_isValid;

    m_source_server_ids_isValid = ::OpenAPI::fromJsonValue(m_source_server_ids, json[QString("sourceServerIDs")]);
    m_source_server_ids_isSet = !json[QString("sourceServerIDs")].isNull() && m_source_server_ids_isValid;
}

QString OAIDescribeSourceServersRequestFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeSourceServersRequestFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_application_ids.isSet()) {
        obj.insert(QString("applicationIDs"), ::OpenAPI::toJsonValue(m_application_ids));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("isArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_life_cycle_states.isSet()) {
        obj.insert(QString("lifeCycleStates"), ::OpenAPI::toJsonValue(m_life_cycle_states));
    }
    if (m_replication_types.isSet()) {
        obj.insert(QString("replicationTypes"), ::OpenAPI::toJsonValue(m_replication_types));
    }
    if (m_source_server_ids.isSet()) {
        obj.insert(QString("sourceServerIDs"), ::OpenAPI::toJsonValue(m_source_server_ids));
    }
    return obj;
}

QList OAIDescribeSourceServersRequestFilters::getApplicationIds() const {
    return m_application_ids;
}
void OAIDescribeSourceServersRequestFilters::setApplicationIds(const QList &application_ids) {
    m_application_ids = application_ids;
    m_application_ids_isSet = true;
}

bool OAIDescribeSourceServersRequestFilters::is_application_ids_Set() const{
    return m_application_ids_isSet;
}

bool OAIDescribeSourceServersRequestFilters::is_application_ids_Valid() const{
    return m_application_ids_isValid;
}

bool OAIDescribeSourceServersRequestFilters::getIsArchived() const {
    return m_is_archived;
}
void OAIDescribeSourceServersRequestFilters::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIDescribeSourceServersRequestFilters::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIDescribeSourceServersRequestFilters::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

QList OAIDescribeSourceServersRequestFilters::getLifeCycleStates() const {
    return m_life_cycle_states;
}
void OAIDescribeSourceServersRequestFilters::setLifeCycleStates(const QList &life_cycle_states) {
    m_life_cycle_states = life_cycle_states;
    m_life_cycle_states_isSet = true;
}

bool OAIDescribeSourceServersRequestFilters::is_life_cycle_states_Set() const{
    return m_life_cycle_states_isSet;
}

bool OAIDescribeSourceServersRequestFilters::is_life_cycle_states_Valid() const{
    return m_life_cycle_states_isValid;
}

QList OAIDescribeSourceServersRequestFilters::getReplicationTypes() const {
    return m_replication_types;
}
void OAIDescribeSourceServersRequestFilters::setReplicationTypes(const QList &replication_types) {
    m_replication_types = replication_types;
    m_replication_types_isSet = true;
}

bool OAIDescribeSourceServersRequestFilters::is_replication_types_Set() const{
    return m_replication_types_isSet;
}

bool OAIDescribeSourceServersRequestFilters::is_replication_types_Valid() const{
    return m_replication_types_isValid;
}

QList OAIDescribeSourceServersRequestFilters::getSourceServerIds() const {
    return m_source_server_ids;
}
void OAIDescribeSourceServersRequestFilters::setSourceServerIds(const QList &source_server_ids) {
    m_source_server_ids = source_server_ids;
    m_source_server_ids_isSet = true;
}

bool OAIDescribeSourceServersRequestFilters::is_source_server_ids_Set() const{
    return m_source_server_ids_isSet;
}

bool OAIDescribeSourceServersRequestFilters::is_source_server_ids_Valid() const{
    return m_source_server_ids_isValid;
}

bool OAIDescribeSourceServersRequestFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_cycle_states.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeSourceServersRequestFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
