/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLaunchConfigurationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLaunchConfigurationRequest::OAIUpdateLaunchConfigurationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLaunchConfigurationRequest::OAIUpdateLaunchConfigurationRequest() {
    this->initializeModel();
}

OAIUpdateLaunchConfigurationRequest::~OAIUpdateLaunchConfigurationRequest() {}

void OAIUpdateLaunchConfigurationRequest::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_boot_mode_isSet = false;
    m_boot_mode_isValid = false;

    m_copy_private_ip_isSet = false;
    m_copy_private_ip_isValid = false;

    m_copy_tags_isSet = false;
    m_copy_tags_isValid = false;

    m_enable_map_auto_tagging_isSet = false;
    m_enable_map_auto_tagging_isValid = false;

    m_launch_disposition_isSet = false;
    m_launch_disposition_isValid = false;

    m_licensing_isSet = false;
    m_licensing_isValid = false;

    m_map_auto_tagging_mpe_id_isSet = false;
    m_map_auto_tagging_mpe_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_post_launch_actions_isSet = false;
    m_post_launch_actions_isValid = false;

    m_source_server_id_isSet = false;
    m_source_server_id_isValid = false;

    m_target_instance_type_right_sizing_method_isSet = false;
    m_target_instance_type_right_sizing_method_isValid = false;
}

void OAIUpdateLaunchConfigurationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLaunchConfigurationRequest::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountID")]);
    m_account_id_isSet = !json[QString("accountID")].isNull() && m_account_id_isValid;

    m_boot_mode_isValid = ::OpenAPI::fromJsonValue(m_boot_mode, json[QString("bootMode")]);
    m_boot_mode_isSet = !json[QString("bootMode")].isNull() && m_boot_mode_isValid;

    m_copy_private_ip_isValid = ::OpenAPI::fromJsonValue(m_copy_private_ip, json[QString("copyPrivateIp")]);
    m_copy_private_ip_isSet = !json[QString("copyPrivateIp")].isNull() && m_copy_private_ip_isValid;

    m_copy_tags_isValid = ::OpenAPI::fromJsonValue(m_copy_tags, json[QString("copyTags")]);
    m_copy_tags_isSet = !json[QString("copyTags")].isNull() && m_copy_tags_isValid;

    m_enable_map_auto_tagging_isValid = ::OpenAPI::fromJsonValue(m_enable_map_auto_tagging, json[QString("enableMapAutoTagging")]);
    m_enable_map_auto_tagging_isSet = !json[QString("enableMapAutoTagging")].isNull() && m_enable_map_auto_tagging_isValid;

    m_launch_disposition_isValid = ::OpenAPI::fromJsonValue(m_launch_disposition, json[QString("launchDisposition")]);
    m_launch_disposition_isSet = !json[QString("launchDisposition")].isNull() && m_launch_disposition_isValid;

    m_licensing_isValid = ::OpenAPI::fromJsonValue(m_licensing, json[QString("licensing")]);
    m_licensing_isSet = !json[QString("licensing")].isNull() && m_licensing_isValid;

    m_map_auto_tagging_mpe_id_isValid = ::OpenAPI::fromJsonValue(m_map_auto_tagging_mpe_id, json[QString("mapAutoTaggingMpeID")]);
    m_map_auto_tagging_mpe_id_isSet = !json[QString("mapAutoTaggingMpeID")].isNull() && m_map_auto_tagging_mpe_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_post_launch_actions_isValid = ::OpenAPI::fromJsonValue(m_post_launch_actions, json[QString("postLaunchActions")]);
    m_post_launch_actions_isSet = !json[QString("postLaunchActions")].isNull() && m_post_launch_actions_isValid;

    m_source_server_id_isValid = ::OpenAPI::fromJsonValue(m_source_server_id, json[QString("sourceServerID")]);
    m_source_server_id_isSet = !json[QString("sourceServerID")].isNull() && m_source_server_id_isValid;

    m_target_instance_type_right_sizing_method_isValid = ::OpenAPI::fromJsonValue(m_target_instance_type_right_sizing_method, json[QString("targetInstanceTypeRightSizingMethod")]);
    m_target_instance_type_right_sizing_method_isSet = !json[QString("targetInstanceTypeRightSizingMethod")].isNull() && m_target_instance_type_right_sizing_method_isValid;
}

QString OAIUpdateLaunchConfigurationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLaunchConfigurationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_boot_mode.isSet()) {
        obj.insert(QString("bootMode"), ::OpenAPI::toJsonValue(m_boot_mode));
    }
    if (m_copy_private_ip_isSet) {
        obj.insert(QString("copyPrivateIp"), ::OpenAPI::toJsonValue(m_copy_private_ip));
    }
    if (m_copy_tags_isSet) {
        obj.insert(QString("copyTags"), ::OpenAPI::toJsonValue(m_copy_tags));
    }
    if (m_enable_map_auto_tagging_isSet) {
        obj.insert(QString("enableMapAutoTagging"), ::OpenAPI::toJsonValue(m_enable_map_auto_tagging));
    }
    if (m_launch_disposition.isSet()) {
        obj.insert(QString("launchDisposition"), ::OpenAPI::toJsonValue(m_launch_disposition));
    }
    if (m_licensing.isSet()) {
        obj.insert(QString("licensing"), ::OpenAPI::toJsonValue(m_licensing));
    }
    if (m_map_auto_tagging_mpe_id_isSet) {
        obj.insert(QString("mapAutoTaggingMpeID"), ::OpenAPI::toJsonValue(m_map_auto_tagging_mpe_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_post_launch_actions.isSet()) {
        obj.insert(QString("postLaunchActions"), ::OpenAPI::toJsonValue(m_post_launch_actions));
    }
    if (m_source_server_id_isSet) {
        obj.insert(QString("sourceServerID"), ::OpenAPI::toJsonValue(m_source_server_id));
    }
    if (m_target_instance_type_right_sizing_method.isSet()) {
        obj.insert(QString("targetInstanceTypeRightSizingMethod"), ::OpenAPI::toJsonValue(m_target_instance_type_right_sizing_method));
    }
    return obj;
}

QString OAIUpdateLaunchConfigurationRequest::getAccountId() const {
    return m_account_id;
}
void OAIUpdateLaunchConfigurationRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

OAIBootMode OAIUpdateLaunchConfigurationRequest::getBootMode() const {
    return m_boot_mode;
}
void OAIUpdateLaunchConfigurationRequest::setBootMode(const OAIBootMode &boot_mode) {
    m_boot_mode = boot_mode;
    m_boot_mode_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_boot_mode_Set() const{
    return m_boot_mode_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_boot_mode_Valid() const{
    return m_boot_mode_isValid;
}

bool OAIUpdateLaunchConfigurationRequest::getCopyPrivateIp() const {
    return m_copy_private_ip;
}
void OAIUpdateLaunchConfigurationRequest::setCopyPrivateIp(const bool &copy_private_ip) {
    m_copy_private_ip = copy_private_ip;
    m_copy_private_ip_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_copy_private_ip_Set() const{
    return m_copy_private_ip_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_copy_private_ip_Valid() const{
    return m_copy_private_ip_isValid;
}

bool OAIUpdateLaunchConfigurationRequest::getCopyTags() const {
    return m_copy_tags;
}
void OAIUpdateLaunchConfigurationRequest::setCopyTags(const bool &copy_tags) {
    m_copy_tags = copy_tags;
    m_copy_tags_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_copy_tags_Set() const{
    return m_copy_tags_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_copy_tags_Valid() const{
    return m_copy_tags_isValid;
}

bool OAIUpdateLaunchConfigurationRequest::getEnableMapAutoTagging() const {
    return m_enable_map_auto_tagging;
}
void OAIUpdateLaunchConfigurationRequest::setEnableMapAutoTagging(const bool &enable_map_auto_tagging) {
    m_enable_map_auto_tagging = enable_map_auto_tagging;
    m_enable_map_auto_tagging_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_enable_map_auto_tagging_Set() const{
    return m_enable_map_auto_tagging_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_enable_map_auto_tagging_Valid() const{
    return m_enable_map_auto_tagging_isValid;
}

OAILaunchDisposition OAIUpdateLaunchConfigurationRequest::getLaunchDisposition() const {
    return m_launch_disposition;
}
void OAIUpdateLaunchConfigurationRequest::setLaunchDisposition(const OAILaunchDisposition &launch_disposition) {
    m_launch_disposition = launch_disposition;
    m_launch_disposition_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_launch_disposition_Set() const{
    return m_launch_disposition_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_launch_disposition_Valid() const{
    return m_launch_disposition_isValid;
}

OAIUpdateLaunchConfigurationRequest_licensing OAIUpdateLaunchConfigurationRequest::getLicensing() const {
    return m_licensing;
}
void OAIUpdateLaunchConfigurationRequest::setLicensing(const OAIUpdateLaunchConfigurationRequest_licensing &licensing) {
    m_licensing = licensing;
    m_licensing_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_licensing_Set() const{
    return m_licensing_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_licensing_Valid() const{
    return m_licensing_isValid;
}

QString OAIUpdateLaunchConfigurationRequest::getMapAutoTaggingMpeId() const {
    return m_map_auto_tagging_mpe_id;
}
void OAIUpdateLaunchConfigurationRequest::setMapAutoTaggingMpeId(const QString &map_auto_tagging_mpe_id) {
    m_map_auto_tagging_mpe_id = map_auto_tagging_mpe_id;
    m_map_auto_tagging_mpe_id_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_map_auto_tagging_mpe_id_Set() const{
    return m_map_auto_tagging_mpe_id_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_map_auto_tagging_mpe_id_Valid() const{
    return m_map_auto_tagging_mpe_id_isValid;
}

QString OAIUpdateLaunchConfigurationRequest::getName() const {
    return m_name;
}
void OAIUpdateLaunchConfigurationRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIPostLaunchActions OAIUpdateLaunchConfigurationRequest::getPostLaunchActions() const {
    return m_post_launch_actions;
}
void OAIUpdateLaunchConfigurationRequest::setPostLaunchActions(const OAIPostLaunchActions &post_launch_actions) {
    m_post_launch_actions = post_launch_actions;
    m_post_launch_actions_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_post_launch_actions_Set() const{
    return m_post_launch_actions_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_post_launch_actions_Valid() const{
    return m_post_launch_actions_isValid;
}

QString OAIUpdateLaunchConfigurationRequest::getSourceServerId() const {
    return m_source_server_id;
}
void OAIUpdateLaunchConfigurationRequest::setSourceServerId(const QString &source_server_id) {
    m_source_server_id = source_server_id;
    m_source_server_id_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_source_server_id_Set() const{
    return m_source_server_id_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_source_server_id_Valid() const{
    return m_source_server_id_isValid;
}

OAITargetInstanceTypeRightSizingMethod OAIUpdateLaunchConfigurationRequest::getTargetInstanceTypeRightSizingMethod() const {
    return m_target_instance_type_right_sizing_method;
}
void OAIUpdateLaunchConfigurationRequest::setTargetInstanceTypeRightSizingMethod(const OAITargetInstanceTypeRightSizingMethod &target_instance_type_right_sizing_method) {
    m_target_instance_type_right_sizing_method = target_instance_type_right_sizing_method;
    m_target_instance_type_right_sizing_method_isSet = true;
}

bool OAIUpdateLaunchConfigurationRequest::is_target_instance_type_right_sizing_method_Set() const{
    return m_target_instance_type_right_sizing_method_isSet;
}

bool OAIUpdateLaunchConfigurationRequest::is_target_instance_type_right_sizing_method_Valid() const{
    return m_target_instance_type_right_sizing_method_isValid;
}

bool OAIUpdateLaunchConfigurationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_private_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_map_auto_tagging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_disposition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_licensing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_auto_tagging_mpe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_launch_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_instance_type_right_sizing_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLaunchConfigurationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_server_id_isValid && true;
}

} // namespace OpenAPI
