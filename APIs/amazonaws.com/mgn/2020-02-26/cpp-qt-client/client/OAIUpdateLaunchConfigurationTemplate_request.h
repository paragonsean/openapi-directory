/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateLaunchConfigurationTemplate_request.h
 *
 * 
 */

#ifndef OAIUpdateLaunchConfigurationTemplate_request_H
#define OAIUpdateLaunchConfigurationTemplate_request_H

#include <QJsonObject>

#include "OAICreateLaunchConfigurationTemplate_request_largeVolumeConf.h"
#include "OAICreateLaunchConfigurationTemplate_request_licensing.h"
#include "OAICreateLaunchConfigurationTemplate_request_postLaunchActions.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateLaunchConfigurationTemplate_request_largeVolumeConf;
class OAICreateLaunchConfigurationTemplate_request_licensing;
class OAICreateLaunchConfigurationTemplate_request_postLaunchActions;

class OAIUpdateLaunchConfigurationTemplate_request : public OAIObject {
public:
    OAIUpdateLaunchConfigurationTemplate_request();
    OAIUpdateLaunchConfigurationTemplate_request(QString json);
    ~OAIUpdateLaunchConfigurationTemplate_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAssociatePublicIpAddress() const;
    void setAssociatePublicIpAddress(const bool &associate_public_ip_address);
    bool is_associate_public_ip_address_Set() const;
    bool is_associate_public_ip_address_Valid() const;

    QString getBootMode() const;
    void setBootMode(const QString &boot_mode);
    bool is_boot_mode_Set() const;
    bool is_boot_mode_Valid() const;

    bool isCopyPrivateIp() const;
    void setCopyPrivateIp(const bool &copy_private_ip);
    bool is_copy_private_ip_Set() const;
    bool is_copy_private_ip_Valid() const;

    bool isCopyTags() const;
    void setCopyTags(const bool &copy_tags);
    bool is_copy_tags_Set() const;
    bool is_copy_tags_Valid() const;

    bool isEnableMapAutoTagging() const;
    void setEnableMapAutoTagging(const bool &enable_map_auto_tagging);
    bool is_enable_map_auto_tagging_Set() const;
    bool is_enable_map_auto_tagging_Valid() const;

    OAICreateLaunchConfigurationTemplate_request_largeVolumeConf getLargeVolumeConf() const;
    void setLargeVolumeConf(const OAICreateLaunchConfigurationTemplate_request_largeVolumeConf &large_volume_conf);
    bool is_large_volume_conf_Set() const;
    bool is_large_volume_conf_Valid() const;

    QString getLaunchConfigurationTemplateId() const;
    void setLaunchConfigurationTemplateId(const QString &launch_configuration_template_id);
    bool is_launch_configuration_template_id_Set() const;
    bool is_launch_configuration_template_id_Valid() const;

    QString getLaunchDisposition() const;
    void setLaunchDisposition(const QString &launch_disposition);
    bool is_launch_disposition_Set() const;
    bool is_launch_disposition_Valid() const;

    OAICreateLaunchConfigurationTemplate_request_licensing getLicensing() const;
    void setLicensing(const OAICreateLaunchConfigurationTemplate_request_licensing &licensing);
    bool is_licensing_Set() const;
    bool is_licensing_Valid() const;

    QString getMapAutoTaggingMpeId() const;
    void setMapAutoTaggingMpeId(const QString &map_auto_tagging_mpe_id);
    bool is_map_auto_tagging_mpe_id_Set() const;
    bool is_map_auto_tagging_mpe_id_Valid() const;

    OAICreateLaunchConfigurationTemplate_request_postLaunchActions getPostLaunchActions() const;
    void setPostLaunchActions(const OAICreateLaunchConfigurationTemplate_request_postLaunchActions &post_launch_actions);
    bool is_post_launch_actions_Set() const;
    bool is_post_launch_actions_Valid() const;

    OAICreateLaunchConfigurationTemplate_request_largeVolumeConf getSmallVolumeConf() const;
    void setSmallVolumeConf(const OAICreateLaunchConfigurationTemplate_request_largeVolumeConf &small_volume_conf);
    bool is_small_volume_conf_Set() const;
    bool is_small_volume_conf_Valid() const;

    qint32 getSmallVolumeMaxSize() const;
    void setSmallVolumeMaxSize(const qint32 &small_volume_max_size);
    bool is_small_volume_max_size_Set() const;
    bool is_small_volume_max_size_Valid() const;

    QString getTargetInstanceTypeRightSizingMethod() const;
    void setTargetInstanceTypeRightSizingMethod(const QString &target_instance_type_right_sizing_method);
    bool is_target_instance_type_right_sizing_method_Set() const;
    bool is_target_instance_type_right_sizing_method_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_associate_public_ip_address;
    bool m_associate_public_ip_address_isSet;
    bool m_associate_public_ip_address_isValid;

    QString m_boot_mode;
    bool m_boot_mode_isSet;
    bool m_boot_mode_isValid;

    bool m_copy_private_ip;
    bool m_copy_private_ip_isSet;
    bool m_copy_private_ip_isValid;

    bool m_copy_tags;
    bool m_copy_tags_isSet;
    bool m_copy_tags_isValid;

    bool m_enable_map_auto_tagging;
    bool m_enable_map_auto_tagging_isSet;
    bool m_enable_map_auto_tagging_isValid;

    OAICreateLaunchConfigurationTemplate_request_largeVolumeConf m_large_volume_conf;
    bool m_large_volume_conf_isSet;
    bool m_large_volume_conf_isValid;

    QString m_launch_configuration_template_id;
    bool m_launch_configuration_template_id_isSet;
    bool m_launch_configuration_template_id_isValid;

    QString m_launch_disposition;
    bool m_launch_disposition_isSet;
    bool m_launch_disposition_isValid;

    OAICreateLaunchConfigurationTemplate_request_licensing m_licensing;
    bool m_licensing_isSet;
    bool m_licensing_isValid;

    QString m_map_auto_tagging_mpe_id;
    bool m_map_auto_tagging_mpe_id_isSet;
    bool m_map_auto_tagging_mpe_id_isValid;

    OAICreateLaunchConfigurationTemplate_request_postLaunchActions m_post_launch_actions;
    bool m_post_launch_actions_isSet;
    bool m_post_launch_actions_isValid;

    OAICreateLaunchConfigurationTemplate_request_largeVolumeConf m_small_volume_conf;
    bool m_small_volume_conf_isSet;
    bool m_small_volume_conf_isValid;

    qint32 m_small_volume_max_size;
    bool m_small_volume_max_size_isSet;
    bool m_small_volume_max_size_isValid;

    QString m_target_instance_type_right_sizing_method;
    bool m_target_instance_type_right_sizing_method_isSet;
    bool m_target_instance_type_right_sizing_method_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateLaunchConfigurationTemplate_request)

#endif // OAIUpdateLaunchConfigurationTemplate_request_H
