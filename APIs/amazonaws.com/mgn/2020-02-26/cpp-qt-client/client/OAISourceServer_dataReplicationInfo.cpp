/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceServer_dataReplicationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceServer_dataReplicationInfo::OAISourceServer_dataReplicationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceServer_dataReplicationInfo::OAISourceServer_dataReplicationInfo() {
    this->initializeModel();
}

OAISourceServer_dataReplicationInfo::~OAISourceServer_dataReplicationInfo() {}

void OAISourceServer_dataReplicationInfo::initializeModel() {

    m_data_replication_error_isSet = false;
    m_data_replication_error_isValid = false;

    m_data_replication_initiation_isSet = false;
    m_data_replication_initiation_isValid = false;

    m_data_replication_state_isSet = false;
    m_data_replication_state_isValid = false;

    m_eta_date_time_isSet = false;
    m_eta_date_time_isValid = false;

    m_lag_duration_isSet = false;
    m_lag_duration_isValid = false;

    m_last_snapshot_date_time_isSet = false;
    m_last_snapshot_date_time_isValid = false;

    m_replicated_disks_isSet = false;
    m_replicated_disks_isValid = false;
}

void OAISourceServer_dataReplicationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceServer_dataReplicationInfo::fromJsonObject(QJsonObject json) {

    m_data_replication_error_isValid = ::OpenAPI::fromJsonValue(m_data_replication_error, json[QString("dataReplicationError")]);
    m_data_replication_error_isSet = !json[QString("dataReplicationError")].isNull() && m_data_replication_error_isValid;

    m_data_replication_initiation_isValid = ::OpenAPI::fromJsonValue(m_data_replication_initiation, json[QString("dataReplicationInitiation")]);
    m_data_replication_initiation_isSet = !json[QString("dataReplicationInitiation")].isNull() && m_data_replication_initiation_isValid;

    m_data_replication_state_isValid = ::OpenAPI::fromJsonValue(m_data_replication_state, json[QString("dataReplicationState")]);
    m_data_replication_state_isSet = !json[QString("dataReplicationState")].isNull() && m_data_replication_state_isValid;

    m_eta_date_time_isValid = ::OpenAPI::fromJsonValue(m_eta_date_time, json[QString("etaDateTime")]);
    m_eta_date_time_isSet = !json[QString("etaDateTime")].isNull() && m_eta_date_time_isValid;

    m_lag_duration_isValid = ::OpenAPI::fromJsonValue(m_lag_duration, json[QString("lagDuration")]);
    m_lag_duration_isSet = !json[QString("lagDuration")].isNull() && m_lag_duration_isValid;

    m_last_snapshot_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_snapshot_date_time, json[QString("lastSnapshotDateTime")]);
    m_last_snapshot_date_time_isSet = !json[QString("lastSnapshotDateTime")].isNull() && m_last_snapshot_date_time_isValid;

    m_replicated_disks_isValid = ::OpenAPI::fromJsonValue(m_replicated_disks, json[QString("replicatedDisks")]);
    m_replicated_disks_isSet = !json[QString("replicatedDisks")].isNull() && m_replicated_disks_isValid;
}

QString OAISourceServer_dataReplicationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceServer_dataReplicationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_data_replication_error.isSet()) {
        obj.insert(QString("dataReplicationError"), ::OpenAPI::toJsonValue(m_data_replication_error));
    }
    if (m_data_replication_initiation.isSet()) {
        obj.insert(QString("dataReplicationInitiation"), ::OpenAPI::toJsonValue(m_data_replication_initiation));
    }
    if (m_data_replication_state.isSet()) {
        obj.insert(QString("dataReplicationState"), ::OpenAPI::toJsonValue(m_data_replication_state));
    }
    if (m_eta_date_time_isSet) {
        obj.insert(QString("etaDateTime"), ::OpenAPI::toJsonValue(m_eta_date_time));
    }
    if (m_lag_duration_isSet) {
        obj.insert(QString("lagDuration"), ::OpenAPI::toJsonValue(m_lag_duration));
    }
    if (m_last_snapshot_date_time_isSet) {
        obj.insert(QString("lastSnapshotDateTime"), ::OpenAPI::toJsonValue(m_last_snapshot_date_time));
    }
    if (m_replicated_disks.isSet()) {
        obj.insert(QString("replicatedDisks"), ::OpenAPI::toJsonValue(m_replicated_disks));
    }
    return obj;
}

OAIDataReplicationInfo_dataReplicationError OAISourceServer_dataReplicationInfo::getDataReplicationError() const {
    return m_data_replication_error;
}
void OAISourceServer_dataReplicationInfo::setDataReplicationError(const OAIDataReplicationInfo_dataReplicationError &data_replication_error) {
    m_data_replication_error = data_replication_error;
    m_data_replication_error_isSet = true;
}

bool OAISourceServer_dataReplicationInfo::is_data_replication_error_Set() const{
    return m_data_replication_error_isSet;
}

bool OAISourceServer_dataReplicationInfo::is_data_replication_error_Valid() const{
    return m_data_replication_error_isValid;
}

OAIDataReplicationInfo_dataReplicationInitiation OAISourceServer_dataReplicationInfo::getDataReplicationInitiation() const {
    return m_data_replication_initiation;
}
void OAISourceServer_dataReplicationInfo::setDataReplicationInitiation(const OAIDataReplicationInfo_dataReplicationInitiation &data_replication_initiation) {
    m_data_replication_initiation = data_replication_initiation;
    m_data_replication_initiation_isSet = true;
}

bool OAISourceServer_dataReplicationInfo::is_data_replication_initiation_Set() const{
    return m_data_replication_initiation_isSet;
}

bool OAISourceServer_dataReplicationInfo::is_data_replication_initiation_Valid() const{
    return m_data_replication_initiation_isValid;
}

OAIDataReplicationState OAISourceServer_dataReplicationInfo::getDataReplicationState() const {
    return m_data_replication_state;
}
void OAISourceServer_dataReplicationInfo::setDataReplicationState(const OAIDataReplicationState &data_replication_state) {
    m_data_replication_state = data_replication_state;
    m_data_replication_state_isSet = true;
}

bool OAISourceServer_dataReplicationInfo::is_data_replication_state_Set() const{
    return m_data_replication_state_isSet;
}

bool OAISourceServer_dataReplicationInfo::is_data_replication_state_Valid() const{
    return m_data_replication_state_isValid;
}

QString OAISourceServer_dataReplicationInfo::getEtaDateTime() const {
    return m_eta_date_time;
}
void OAISourceServer_dataReplicationInfo::setEtaDateTime(const QString &eta_date_time) {
    m_eta_date_time = eta_date_time;
    m_eta_date_time_isSet = true;
}

bool OAISourceServer_dataReplicationInfo::is_eta_date_time_Set() const{
    return m_eta_date_time_isSet;
}

bool OAISourceServer_dataReplicationInfo::is_eta_date_time_Valid() const{
    return m_eta_date_time_isValid;
}

QString OAISourceServer_dataReplicationInfo::getLagDuration() const {
    return m_lag_duration;
}
void OAISourceServer_dataReplicationInfo::setLagDuration(const QString &lag_duration) {
    m_lag_duration = lag_duration;
    m_lag_duration_isSet = true;
}

bool OAISourceServer_dataReplicationInfo::is_lag_duration_Set() const{
    return m_lag_duration_isSet;
}

bool OAISourceServer_dataReplicationInfo::is_lag_duration_Valid() const{
    return m_lag_duration_isValid;
}

QString OAISourceServer_dataReplicationInfo::getLastSnapshotDateTime() const {
    return m_last_snapshot_date_time;
}
void OAISourceServer_dataReplicationInfo::setLastSnapshotDateTime(const QString &last_snapshot_date_time) {
    m_last_snapshot_date_time = last_snapshot_date_time;
    m_last_snapshot_date_time_isSet = true;
}

bool OAISourceServer_dataReplicationInfo::is_last_snapshot_date_time_Set() const{
    return m_last_snapshot_date_time_isSet;
}

bool OAISourceServer_dataReplicationInfo::is_last_snapshot_date_time_Valid() const{
    return m_last_snapshot_date_time_isValid;
}

QList OAISourceServer_dataReplicationInfo::getReplicatedDisks() const {
    return m_replicated_disks;
}
void OAISourceServer_dataReplicationInfo::setReplicatedDisks(const QList &replicated_disks) {
    m_replicated_disks = replicated_disks;
    m_replicated_disks_isSet = true;
}

bool OAISourceServer_dataReplicationInfo::is_replicated_disks_Set() const{
    return m_replicated_disks_isSet;
}

bool OAISourceServer_dataReplicationInfo::is_replicated_disks_Valid() const{
    return m_replicated_disks_isValid;
}

bool OAISourceServer_dataReplicationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_replication_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_replication_initiation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_replication_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eta_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lag_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_snapshot_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicated_disks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceServer_dataReplicationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
