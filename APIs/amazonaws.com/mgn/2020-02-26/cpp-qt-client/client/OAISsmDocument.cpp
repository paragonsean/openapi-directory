/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISsmDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISsmDocument::OAISsmDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISsmDocument::OAISsmDocument() {
    this->initializeModel();
}

OAISsmDocument::~OAISsmDocument() {}

void OAISsmDocument::initializeModel() {

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_external_parameters_isSet = false;
    m_external_parameters_isValid = false;

    m_must_succeed_for_cutover_isSet = false;
    m_must_succeed_for_cutover_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_ssm_document_name_isSet = false;
    m_ssm_document_name_isValid = false;

    m_timeout_seconds_isSet = false;
    m_timeout_seconds_isValid = false;
}

void OAISsmDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISsmDocument::fromJsonObject(QJsonObject json) {

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("actionName")]);
    m_action_name_isSet = !json[QString("actionName")].isNull() && m_action_name_isValid;

    m_external_parameters_isValid = ::OpenAPI::fromJsonValue(m_external_parameters, json[QString("externalParameters")]);
    m_external_parameters_isSet = !json[QString("externalParameters")].isNull() && m_external_parameters_isValid;

    m_must_succeed_for_cutover_isValid = ::OpenAPI::fromJsonValue(m_must_succeed_for_cutover, json[QString("mustSucceedForCutover")]);
    m_must_succeed_for_cutover_isSet = !json[QString("mustSucceedForCutover")].isNull() && m_must_succeed_for_cutover_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_ssm_document_name_isValid = ::OpenAPI::fromJsonValue(m_ssm_document_name, json[QString("ssmDocumentName")]);
    m_ssm_document_name_isSet = !json[QString("ssmDocumentName")].isNull() && m_ssm_document_name_isValid;

    m_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_seconds, json[QString("timeoutSeconds")]);
    m_timeout_seconds_isSet = !json[QString("timeoutSeconds")].isNull() && m_timeout_seconds_isValid;
}

QString OAISsmDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISsmDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_action_name_isSet) {
        obj.insert(QString("actionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_external_parameters.isSet()) {
        obj.insert(QString("externalParameters"), ::OpenAPI::toJsonValue(m_external_parameters));
    }
    if (m_must_succeed_for_cutover_isSet) {
        obj.insert(QString("mustSucceedForCutover"), ::OpenAPI::toJsonValue(m_must_succeed_for_cutover));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_ssm_document_name_isSet) {
        obj.insert(QString("ssmDocumentName"), ::OpenAPI::toJsonValue(m_ssm_document_name));
    }
    if (m_timeout_seconds_isSet) {
        obj.insert(QString("timeoutSeconds"), ::OpenAPI::toJsonValue(m_timeout_seconds));
    }
    return obj;
}

QString OAISsmDocument::getActionName() const {
    return m_action_name;
}
void OAISsmDocument::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAISsmDocument::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAISsmDocument::is_action_name_Valid() const{
    return m_action_name_isValid;
}

QMap OAISsmDocument::getExternalParameters() const {
    return m_external_parameters;
}
void OAISsmDocument::setExternalParameters(const QMap &external_parameters) {
    m_external_parameters = external_parameters;
    m_external_parameters_isSet = true;
}

bool OAISsmDocument::is_external_parameters_Set() const{
    return m_external_parameters_isSet;
}

bool OAISsmDocument::is_external_parameters_Valid() const{
    return m_external_parameters_isValid;
}

bool OAISsmDocument::getMustSucceedForCutover() const {
    return m_must_succeed_for_cutover;
}
void OAISsmDocument::setMustSucceedForCutover(const bool &must_succeed_for_cutover) {
    m_must_succeed_for_cutover = must_succeed_for_cutover;
    m_must_succeed_for_cutover_isSet = true;
}

bool OAISsmDocument::is_must_succeed_for_cutover_Set() const{
    return m_must_succeed_for_cutover_isSet;
}

bool OAISsmDocument::is_must_succeed_for_cutover_Valid() const{
    return m_must_succeed_for_cutover_isValid;
}

QMap OAISsmDocument::getParameters() const {
    return m_parameters;
}
void OAISsmDocument::setParameters(const QMap &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAISsmDocument::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAISsmDocument::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAISsmDocument::getSsmDocumentName() const {
    return m_ssm_document_name;
}
void OAISsmDocument::setSsmDocumentName(const QString &ssm_document_name) {
    m_ssm_document_name = ssm_document_name;
    m_ssm_document_name_isSet = true;
}

bool OAISsmDocument::is_ssm_document_name_Set() const{
    return m_ssm_document_name_isSet;
}

bool OAISsmDocument::is_ssm_document_name_Valid() const{
    return m_ssm_document_name_isValid;
}

qint32 OAISsmDocument::getTimeoutSeconds() const {
    return m_timeout_seconds;
}
void OAISsmDocument::setTimeoutSeconds(const qint32 &timeout_seconds) {
    m_timeout_seconds = timeout_seconds;
    m_timeout_seconds_isSet = true;
}

bool OAISsmDocument::is_timeout_seconds_Set() const{
    return m_timeout_seconds_isSet;
}

bool OAISsmDocument::is_timeout_seconds_Valid() const{
    return m_timeout_seconds_isValid;
}

bool OAISsmDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_succeed_for_cutover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssm_document_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISsmDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_name_isValid && m_ssm_document_name_isValid && true;
}

} // namespace OpenAPI
