/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartImportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartImportRequest::OAIStartImportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartImportRequest::OAIStartImportRequest() {
    this->initializeModel();
}

OAIStartImportRequest::~OAIStartImportRequest() {}

void OAIStartImportRequest::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_s3_bucket_source_isSet = false;
    m_s3_bucket_source_isValid = false;
}

void OAIStartImportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartImportRequest::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("clientToken")]);
    m_client_token_isSet = !json[QString("clientToken")].isNull() && m_client_token_isValid;

    m_s3_bucket_source_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_source, json[QString("s3BucketSource")]);
    m_s3_bucket_source_isSet = !json[QString("s3BucketSource")].isNull() && m_s3_bucket_source_isValid;
}

QString OAIStartImportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartImportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("clientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_s3_bucket_source.isSet()) {
        obj.insert(QString("s3BucketSource"), ::OpenAPI::toJsonValue(m_s3_bucket_source));
    }
    return obj;
}

QString OAIStartImportRequest::getClientToken() const {
    return m_client_token;
}
void OAIStartImportRequest::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAIStartImportRequest::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAIStartImportRequest::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAIStartImportRequest_s3BucketSource OAIStartImportRequest::getS3BucketSource() const {
    return m_s3_bucket_source;
}
void OAIStartImportRequest::setS3BucketSource(const OAIStartImportRequest_s3BucketSource &s3_bucket_source) {
    m_s3_bucket_source = s3_bucket_source;
    m_s3_bucket_source_isSet = true;
}

bool OAIStartImportRequest::is_s3_bucket_source_Set() const{
    return m_s3_bucket_source_isSet;
}

bool OAIStartImportRequest::is_s3_bucket_source_Valid() const{
    return m_s3_bucket_source_isValid;
}

bool OAIStartImportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartImportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_s3_bucket_source_isValid && true;
}

} // namespace OpenAPI
