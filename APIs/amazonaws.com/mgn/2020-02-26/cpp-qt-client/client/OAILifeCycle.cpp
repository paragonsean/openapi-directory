/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifeCycle.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifeCycle::OAILifeCycle(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifeCycle::OAILifeCycle() {
    this->initializeModel();
}

OAILifeCycle::~OAILifeCycle() {}

void OAILifeCycle::initializeModel() {

    m_added_to_service_date_time_isSet = false;
    m_added_to_service_date_time_isValid = false;

    m_elapsed_replication_duration_isSet = false;
    m_elapsed_replication_duration_isValid = false;

    m_first_byte_date_time_isSet = false;
    m_first_byte_date_time_isValid = false;

    m_last_cutover_isSet = false;
    m_last_cutover_isValid = false;

    m_last_seen_by_service_date_time_isSet = false;
    m_last_seen_by_service_date_time_isValid = false;

    m_last_test_isSet = false;
    m_last_test_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAILifeCycle::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILifeCycle::fromJsonObject(QJsonObject json) {

    m_added_to_service_date_time_isValid = ::OpenAPI::fromJsonValue(m_added_to_service_date_time, json[QString("addedToServiceDateTime")]);
    m_added_to_service_date_time_isSet = !json[QString("addedToServiceDateTime")].isNull() && m_added_to_service_date_time_isValid;

    m_elapsed_replication_duration_isValid = ::OpenAPI::fromJsonValue(m_elapsed_replication_duration, json[QString("elapsedReplicationDuration")]);
    m_elapsed_replication_duration_isSet = !json[QString("elapsedReplicationDuration")].isNull() && m_elapsed_replication_duration_isValid;

    m_first_byte_date_time_isValid = ::OpenAPI::fromJsonValue(m_first_byte_date_time, json[QString("firstByteDateTime")]);
    m_first_byte_date_time_isSet = !json[QString("firstByteDateTime")].isNull() && m_first_byte_date_time_isValid;

    m_last_cutover_isValid = ::OpenAPI::fromJsonValue(m_last_cutover, json[QString("lastCutover")]);
    m_last_cutover_isSet = !json[QString("lastCutover")].isNull() && m_last_cutover_isValid;

    m_last_seen_by_service_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_seen_by_service_date_time, json[QString("lastSeenByServiceDateTime")]);
    m_last_seen_by_service_date_time_isSet = !json[QString("lastSeenByServiceDateTime")].isNull() && m_last_seen_by_service_date_time_isValid;

    m_last_test_isValid = ::OpenAPI::fromJsonValue(m_last_test, json[QString("lastTest")]);
    m_last_test_isSet = !json[QString("lastTest")].isNull() && m_last_test_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAILifeCycle::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILifeCycle::asJsonObject() const {
    QJsonObject obj;
    if (m_added_to_service_date_time_isSet) {
        obj.insert(QString("addedToServiceDateTime"), ::OpenAPI::toJsonValue(m_added_to_service_date_time));
    }
    if (m_elapsed_replication_duration_isSet) {
        obj.insert(QString("elapsedReplicationDuration"), ::OpenAPI::toJsonValue(m_elapsed_replication_duration));
    }
    if (m_first_byte_date_time_isSet) {
        obj.insert(QString("firstByteDateTime"), ::OpenAPI::toJsonValue(m_first_byte_date_time));
    }
    if (m_last_cutover.isSet()) {
        obj.insert(QString("lastCutover"), ::OpenAPI::toJsonValue(m_last_cutover));
    }
    if (m_last_seen_by_service_date_time_isSet) {
        obj.insert(QString("lastSeenByServiceDateTime"), ::OpenAPI::toJsonValue(m_last_seen_by_service_date_time));
    }
    if (m_last_test.isSet()) {
        obj.insert(QString("lastTest"), ::OpenAPI::toJsonValue(m_last_test));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAILifeCycle::getAddedToServiceDateTime() const {
    return m_added_to_service_date_time;
}
void OAILifeCycle::setAddedToServiceDateTime(const QString &added_to_service_date_time) {
    m_added_to_service_date_time = added_to_service_date_time;
    m_added_to_service_date_time_isSet = true;
}

bool OAILifeCycle::is_added_to_service_date_time_Set() const{
    return m_added_to_service_date_time_isSet;
}

bool OAILifeCycle::is_added_to_service_date_time_Valid() const{
    return m_added_to_service_date_time_isValid;
}

QString OAILifeCycle::getElapsedReplicationDuration() const {
    return m_elapsed_replication_duration;
}
void OAILifeCycle::setElapsedReplicationDuration(const QString &elapsed_replication_duration) {
    m_elapsed_replication_duration = elapsed_replication_duration;
    m_elapsed_replication_duration_isSet = true;
}

bool OAILifeCycle::is_elapsed_replication_duration_Set() const{
    return m_elapsed_replication_duration_isSet;
}

bool OAILifeCycle::is_elapsed_replication_duration_Valid() const{
    return m_elapsed_replication_duration_isValid;
}

QString OAILifeCycle::getFirstByteDateTime() const {
    return m_first_byte_date_time;
}
void OAILifeCycle::setFirstByteDateTime(const QString &first_byte_date_time) {
    m_first_byte_date_time = first_byte_date_time;
    m_first_byte_date_time_isSet = true;
}

bool OAILifeCycle::is_first_byte_date_time_Set() const{
    return m_first_byte_date_time_isSet;
}

bool OAILifeCycle::is_first_byte_date_time_Valid() const{
    return m_first_byte_date_time_isValid;
}

OAILifeCycle_lastCutover OAILifeCycle::getLastCutover() const {
    return m_last_cutover;
}
void OAILifeCycle::setLastCutover(const OAILifeCycle_lastCutover &last_cutover) {
    m_last_cutover = last_cutover;
    m_last_cutover_isSet = true;
}

bool OAILifeCycle::is_last_cutover_Set() const{
    return m_last_cutover_isSet;
}

bool OAILifeCycle::is_last_cutover_Valid() const{
    return m_last_cutover_isValid;
}

QString OAILifeCycle::getLastSeenByServiceDateTime() const {
    return m_last_seen_by_service_date_time;
}
void OAILifeCycle::setLastSeenByServiceDateTime(const QString &last_seen_by_service_date_time) {
    m_last_seen_by_service_date_time = last_seen_by_service_date_time;
    m_last_seen_by_service_date_time_isSet = true;
}

bool OAILifeCycle::is_last_seen_by_service_date_time_Set() const{
    return m_last_seen_by_service_date_time_isSet;
}

bool OAILifeCycle::is_last_seen_by_service_date_time_Valid() const{
    return m_last_seen_by_service_date_time_isValid;
}

OAILifeCycle_lastTest OAILifeCycle::getLastTest() const {
    return m_last_test;
}
void OAILifeCycle::setLastTest(const OAILifeCycle_lastTest &last_test) {
    m_last_test = last_test;
    m_last_test_isSet = true;
}

bool OAILifeCycle::is_last_test_Set() const{
    return m_last_test_isSet;
}

bool OAILifeCycle::is_last_test_Valid() const{
    return m_last_test_isValid;
}

OAILifeCycleState OAILifeCycle::getState() const {
    return m_state;
}
void OAILifeCycle::setState(const OAILifeCycleState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAILifeCycle::is_state_Set() const{
    return m_state_isSet;
}

bool OAILifeCycle::is_state_Valid() const{
    return m_state_isValid;
}

bool OAILifeCycle::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_to_service_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_elapsed_replication_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_byte_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_cutover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_by_service_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_test.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILifeCycle::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
