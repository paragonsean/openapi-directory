/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataReplicationState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataReplicationState::OAIDataReplicationState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataReplicationState::OAIDataReplicationState() {
    this->initializeModel();
}

OAIDataReplicationState::~OAIDataReplicationState() {}

void OAIDataReplicationState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataReplicationState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataReplicationState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INITIATING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::INITIATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("INITIAL_SYNC", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::INITIAL_SYNC;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKLOG", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::BACKLOG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CREATING_SNAPSHOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::CREATING_SNAPSHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONTINUOUS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::CONTINUOUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAUSED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RESCAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::RESCAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STALLED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::STALLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISCONNECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::DISCONNECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_SNAPSHOT_SHIPPING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::PENDING_SNAPSHOT_SHIPPING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SHIPPING_SNAPSHOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationState::SHIPPING_SNAPSHOT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataReplicationState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataReplicationState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataReplicationState::STOPPED:
            val = "STOPPED";
            break;
        case eOAIDataReplicationState::INITIATING:
            val = "INITIATING";
            break;
        case eOAIDataReplicationState::INITIAL_SYNC:
            val = "INITIAL_SYNC";
            break;
        case eOAIDataReplicationState::BACKLOG:
            val = "BACKLOG";
            break;
        case eOAIDataReplicationState::CREATING_SNAPSHOT:
            val = "CREATING_SNAPSHOT";
            break;
        case eOAIDataReplicationState::CONTINUOUS:
            val = "CONTINUOUS";
            break;
        case eOAIDataReplicationState::PAUSED:
            val = "PAUSED";
            break;
        case eOAIDataReplicationState::RESCAN:
            val = "RESCAN";
            break;
        case eOAIDataReplicationState::STALLED:
            val = "STALLED";
            break;
        case eOAIDataReplicationState::DISCONNECTED:
            val = "DISCONNECTED";
            break;
        case eOAIDataReplicationState::PENDING_SNAPSHOT_SHIPPING:
            val = "PENDING_SNAPSHOT_SHIPPING";
            break;
        case eOAIDataReplicationState::SHIPPING_SNAPSHOT:
            val = "SHIPPING_SNAPSHOT";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataReplicationState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataReplicationState::eOAIDataReplicationState OAIDataReplicationState::getValue() const {
    return m_value;
}

void OAIDataReplicationState::setValue(const OAIDataReplicationState::eOAIDataReplicationState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataReplicationState::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataReplicationState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
