/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReplicationConfigurationTemplate.h
 *
 * 
 */

#ifndef OAIReplicationConfigurationTemplate_H
#define OAIReplicationConfigurationTemplate_H

#include <QJsonObject>

#include "OAIReplicationConfigurationDataPlaneRouting.h"
#include "OAIReplicationConfigurationDefaultLargeStagingDiskType.h"
#include "OAIReplicationConfigurationEbsEncryption.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReplicationConfigurationTemplate : public OAIObject {
public:
    OAIReplicationConfigurationTemplate();
    OAIReplicationConfigurationTemplate(QString json);
    ~OAIReplicationConfigurationTemplate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getArn() const;
    void setArn(const QString &arn);
    bool is_arn_Set() const;
    bool is_arn_Valid() const;

    bool getAssociateDefaultSecurityGroup() const;
    void setAssociateDefaultSecurityGroup(const bool &associate_default_security_group);
    bool is_associate_default_security_group_Set() const;
    bool is_associate_default_security_group_Valid() const;

    qint32 getBandwidthThrottling() const;
    void setBandwidthThrottling(const qint32 &bandwidth_throttling);
    bool is_bandwidth_throttling_Set() const;
    bool is_bandwidth_throttling_Valid() const;

    bool getCreatePublicIp() const;
    void setCreatePublicIp(const bool &create_public_ip);
    bool is_create_public_ip_Set() const;
    bool is_create_public_ip_Valid() const;

    OAIReplicationConfigurationDataPlaneRouting getDataPlaneRouting() const;
    void setDataPlaneRouting(const OAIReplicationConfigurationDataPlaneRouting &data_plane_routing);
    bool is_data_plane_routing_Set() const;
    bool is_data_plane_routing_Valid() const;

    OAIReplicationConfigurationDefaultLargeStagingDiskType getDefaultLargeStagingDiskType() const;
    void setDefaultLargeStagingDiskType(const OAIReplicationConfigurationDefaultLargeStagingDiskType &default_large_staging_disk_type);
    bool is_default_large_staging_disk_type_Set() const;
    bool is_default_large_staging_disk_type_Valid() const;

    OAIReplicationConfigurationEbsEncryption getEbsEncryption() const;
    void setEbsEncryption(const OAIReplicationConfigurationEbsEncryption &ebs_encryption);
    bool is_ebs_encryption_Set() const;
    bool is_ebs_encryption_Valid() const;

    QString getEbsEncryptionKeyArn() const;
    void setEbsEncryptionKeyArn(const QString &ebs_encryption_key_arn);
    bool is_ebs_encryption_key_arn_Set() const;
    bool is_ebs_encryption_key_arn_Valid() const;

    QString getReplicationConfigurationTemplateId() const;
    void setReplicationConfigurationTemplateId(const QString &replication_configuration_template_id);
    bool is_replication_configuration_template_id_Set() const;
    bool is_replication_configuration_template_id_Valid() const;

    QString getReplicationServerInstanceType() const;
    void setReplicationServerInstanceType(const QString &replication_server_instance_type);
    bool is_replication_server_instance_type_Set() const;
    bool is_replication_server_instance_type_Valid() const;

    QList getReplicationServersSecurityGroupsIds() const;
    void setReplicationServersSecurityGroupsIds(const QList &replication_servers_security_groups_ids);
    bool is_replication_servers_security_groups_ids_Set() const;
    bool is_replication_servers_security_groups_ids_Valid() const;

    QString getStagingAreaSubnetId() const;
    void setStagingAreaSubnetId(const QString &staging_area_subnet_id);
    bool is_staging_area_subnet_id_Set() const;
    bool is_staging_area_subnet_id_Valid() const;

    QMap getStagingAreaTags() const;
    void setStagingAreaTags(const QMap &staging_area_tags);
    bool is_staging_area_tags_Set() const;
    bool is_staging_area_tags_Valid() const;

    QMap getTags() const;
    void setTags(const QMap &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    bool getUseDedicatedReplicationServer() const;
    void setUseDedicatedReplicationServer(const bool &use_dedicated_replication_server);
    bool is_use_dedicated_replication_server_Set() const;
    bool is_use_dedicated_replication_server_Valid() const;

    bool getUseFipsEndpoint() const;
    void setUseFipsEndpoint(const bool &use_fips_endpoint);
    bool is_use_fips_endpoint_Set() const;
    bool is_use_fips_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_arn;
    bool m_arn_isSet;
    bool m_arn_isValid;

    bool m_associate_default_security_group;
    bool m_associate_default_security_group_isSet;
    bool m_associate_default_security_group_isValid;

    qint32 m_bandwidth_throttling;
    bool m_bandwidth_throttling_isSet;
    bool m_bandwidth_throttling_isValid;

    bool m_create_public_ip;
    bool m_create_public_ip_isSet;
    bool m_create_public_ip_isValid;

    OAIReplicationConfigurationDataPlaneRouting m_data_plane_routing;
    bool m_data_plane_routing_isSet;
    bool m_data_plane_routing_isValid;

    OAIReplicationConfigurationDefaultLargeStagingDiskType m_default_large_staging_disk_type;
    bool m_default_large_staging_disk_type_isSet;
    bool m_default_large_staging_disk_type_isValid;

    OAIReplicationConfigurationEbsEncryption m_ebs_encryption;
    bool m_ebs_encryption_isSet;
    bool m_ebs_encryption_isValid;

    QString m_ebs_encryption_key_arn;
    bool m_ebs_encryption_key_arn_isSet;
    bool m_ebs_encryption_key_arn_isValid;

    QString m_replication_configuration_template_id;
    bool m_replication_configuration_template_id_isSet;
    bool m_replication_configuration_template_id_isValid;

    QString m_replication_server_instance_type;
    bool m_replication_server_instance_type_isSet;
    bool m_replication_server_instance_type_isValid;

    QList m_replication_servers_security_groups_ids;
    bool m_replication_servers_security_groups_ids_isSet;
    bool m_replication_servers_security_groups_ids_isValid;

    QString m_staging_area_subnet_id;
    bool m_staging_area_subnet_id_isSet;
    bool m_staging_area_subnet_id_isValid;

    QMap m_staging_area_tags;
    bool m_staging_area_tags_isSet;
    bool m_staging_area_tags_isValid;

    QMap m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;

    bool m_use_dedicated_replication_server;
    bool m_use_dedicated_replication_server_isSet;
    bool m_use_dedicated_replication_server_isValid;

    bool m_use_fips_endpoint;
    bool m_use_fips_endpoint_isSet;
    bool m_use_fips_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReplicationConfigurationTemplate)

#endif // OAIReplicationConfigurationTemplate_H
