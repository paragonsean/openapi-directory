/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceServer_sourceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceServer_sourceProperties::OAISourceServer_sourceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceServer_sourceProperties::OAISourceServer_sourceProperties() {
    this->initializeModel();
}

OAISourceServer_sourceProperties::~OAISourceServer_sourceProperties() {}

void OAISourceServer_sourceProperties::initializeModel() {

    m_cpus_isSet = false;
    m_cpus_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_identification_hints_isSet = false;
    m_identification_hints_isValid = false;

    m_last_updated_date_time_isSet = false;
    m_last_updated_date_time_isValid = false;

    m_network_interfaces_isSet = false;
    m_network_interfaces_isValid = false;

    m_os_isSet = false;
    m_os_isValid = false;

    m_ram_bytes_isSet = false;
    m_ram_bytes_isValid = false;

    m_recommended_instance_type_isSet = false;
    m_recommended_instance_type_isValid = false;
}

void OAISourceServer_sourceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceServer_sourceProperties::fromJsonObject(QJsonObject json) {

    m_cpus_isValid = ::OpenAPI::fromJsonValue(m_cpus, json[QString("cpus")]);
    m_cpus_isSet = !json[QString("cpus")].isNull() && m_cpus_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_identification_hints_isValid = ::OpenAPI::fromJsonValue(m_identification_hints, json[QString("identificationHints")]);
    m_identification_hints_isSet = !json[QString("identificationHints")].isNull() && m_identification_hints_isValid;

    m_last_updated_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_updated_date_time, json[QString("lastUpdatedDateTime")]);
    m_last_updated_date_time_isSet = !json[QString("lastUpdatedDateTime")].isNull() && m_last_updated_date_time_isValid;

    m_network_interfaces_isValid = ::OpenAPI::fromJsonValue(m_network_interfaces, json[QString("networkInterfaces")]);
    m_network_interfaces_isSet = !json[QString("networkInterfaces")].isNull() && m_network_interfaces_isValid;

    m_os_isValid = ::OpenAPI::fromJsonValue(m_os, json[QString("os")]);
    m_os_isSet = !json[QString("os")].isNull() && m_os_isValid;

    m_ram_bytes_isValid = ::OpenAPI::fromJsonValue(m_ram_bytes, json[QString("ramBytes")]);
    m_ram_bytes_isSet = !json[QString("ramBytes")].isNull() && m_ram_bytes_isValid;

    m_recommended_instance_type_isValid = ::OpenAPI::fromJsonValue(m_recommended_instance_type, json[QString("recommendedInstanceType")]);
    m_recommended_instance_type_isSet = !json[QString("recommendedInstanceType")].isNull() && m_recommended_instance_type_isValid;
}

QString OAISourceServer_sourceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceServer_sourceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_cpus.isSet()) {
        obj.insert(QString("cpus"), ::OpenAPI::toJsonValue(m_cpus));
    }
    if (m_disks.isSet()) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_identification_hints.isSet()) {
        obj.insert(QString("identificationHints"), ::OpenAPI::toJsonValue(m_identification_hints));
    }
    if (m_last_updated_date_time_isSet) {
        obj.insert(QString("lastUpdatedDateTime"), ::OpenAPI::toJsonValue(m_last_updated_date_time));
    }
    if (m_network_interfaces.isSet()) {
        obj.insert(QString("networkInterfaces"), ::OpenAPI::toJsonValue(m_network_interfaces));
    }
    if (m_os.isSet()) {
        obj.insert(QString("os"), ::OpenAPI::toJsonValue(m_os));
    }
    if (m_ram_bytes_isSet) {
        obj.insert(QString("ramBytes"), ::OpenAPI::toJsonValue(m_ram_bytes));
    }
    if (m_recommended_instance_type_isSet) {
        obj.insert(QString("recommendedInstanceType"), ::OpenAPI::toJsonValue(m_recommended_instance_type));
    }
    return obj;
}

QList OAISourceServer_sourceProperties::getCpus() const {
    return m_cpus;
}
void OAISourceServer_sourceProperties::setCpus(const QList &cpus) {
    m_cpus = cpus;
    m_cpus_isSet = true;
}

bool OAISourceServer_sourceProperties::is_cpus_Set() const{
    return m_cpus_isSet;
}

bool OAISourceServer_sourceProperties::is_cpus_Valid() const{
    return m_cpus_isValid;
}

QList OAISourceServer_sourceProperties::getDisks() const {
    return m_disks;
}
void OAISourceServer_sourceProperties::setDisks(const QList &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAISourceServer_sourceProperties::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAISourceServer_sourceProperties::is_disks_Valid() const{
    return m_disks_isValid;
}

OAISourceProperties_identificationHints OAISourceServer_sourceProperties::getIdentificationHints() const {
    return m_identification_hints;
}
void OAISourceServer_sourceProperties::setIdentificationHints(const OAISourceProperties_identificationHints &identification_hints) {
    m_identification_hints = identification_hints;
    m_identification_hints_isSet = true;
}

bool OAISourceServer_sourceProperties::is_identification_hints_Set() const{
    return m_identification_hints_isSet;
}

bool OAISourceServer_sourceProperties::is_identification_hints_Valid() const{
    return m_identification_hints_isValid;
}

QString OAISourceServer_sourceProperties::getLastUpdatedDateTime() const {
    return m_last_updated_date_time;
}
void OAISourceServer_sourceProperties::setLastUpdatedDateTime(const QString &last_updated_date_time) {
    m_last_updated_date_time = last_updated_date_time;
    m_last_updated_date_time_isSet = true;
}

bool OAISourceServer_sourceProperties::is_last_updated_date_time_Set() const{
    return m_last_updated_date_time_isSet;
}

bool OAISourceServer_sourceProperties::is_last_updated_date_time_Valid() const{
    return m_last_updated_date_time_isValid;
}

QList OAISourceServer_sourceProperties::getNetworkInterfaces() const {
    return m_network_interfaces;
}
void OAISourceServer_sourceProperties::setNetworkInterfaces(const QList &network_interfaces) {
    m_network_interfaces = network_interfaces;
    m_network_interfaces_isSet = true;
}

bool OAISourceServer_sourceProperties::is_network_interfaces_Set() const{
    return m_network_interfaces_isSet;
}

bool OAISourceServer_sourceProperties::is_network_interfaces_Valid() const{
    return m_network_interfaces_isValid;
}

OAISourceProperties_os OAISourceServer_sourceProperties::getOs() const {
    return m_os;
}
void OAISourceServer_sourceProperties::setOs(const OAISourceProperties_os &os) {
    m_os = os;
    m_os_isSet = true;
}

bool OAISourceServer_sourceProperties::is_os_Set() const{
    return m_os_isSet;
}

bool OAISourceServer_sourceProperties::is_os_Valid() const{
    return m_os_isValid;
}

qint32 OAISourceServer_sourceProperties::getRamBytes() const {
    return m_ram_bytes;
}
void OAISourceServer_sourceProperties::setRamBytes(const qint32 &ram_bytes) {
    m_ram_bytes = ram_bytes;
    m_ram_bytes_isSet = true;
}

bool OAISourceServer_sourceProperties::is_ram_bytes_Set() const{
    return m_ram_bytes_isSet;
}

bool OAISourceServer_sourceProperties::is_ram_bytes_Valid() const{
    return m_ram_bytes_isValid;
}

QString OAISourceServer_sourceProperties::getRecommendedInstanceType() const {
    return m_recommended_instance_type;
}
void OAISourceServer_sourceProperties::setRecommendedInstanceType(const QString &recommended_instance_type) {
    m_recommended_instance_type = recommended_instance_type;
    m_recommended_instance_type_isSet = true;
}

bool OAISourceServer_sourceProperties::is_recommended_instance_type_Set() const{
    return m_recommended_instance_type_isSet;
}

bool OAISourceServer_sourceProperties::is_recommended_instance_type_Valid() const{
    return m_recommended_instance_type_isValid;
}

bool OAISourceServer_sourceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpus.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_hints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_interfaces.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ram_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recommended_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceServer_sourceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
