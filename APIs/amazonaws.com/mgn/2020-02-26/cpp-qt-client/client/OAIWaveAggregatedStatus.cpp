/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWaveAggregatedStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWaveAggregatedStatus::OAIWaveAggregatedStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWaveAggregatedStatus::OAIWaveAggregatedStatus() {
    this->initializeModel();
}

OAIWaveAggregatedStatus::~OAIWaveAggregatedStatus() {}

void OAIWaveAggregatedStatus::initializeModel() {

    m_health_status_isSet = false;
    m_health_status_isValid = false;

    m_last_update_date_time_isSet = false;
    m_last_update_date_time_isValid = false;

    m_progress_status_isSet = false;
    m_progress_status_isValid = false;

    m_replication_started_date_time_isSet = false;
    m_replication_started_date_time_isValid = false;

    m_total_applications_isSet = false;
    m_total_applications_isValid = false;
}

void OAIWaveAggregatedStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWaveAggregatedStatus::fromJsonObject(QJsonObject json) {

    m_health_status_isValid = ::OpenAPI::fromJsonValue(m_health_status, json[QString("healthStatus")]);
    m_health_status_isSet = !json[QString("healthStatus")].isNull() && m_health_status_isValid;

    m_last_update_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_update_date_time, json[QString("lastUpdateDateTime")]);
    m_last_update_date_time_isSet = !json[QString("lastUpdateDateTime")].isNull() && m_last_update_date_time_isValid;

    m_progress_status_isValid = ::OpenAPI::fromJsonValue(m_progress_status, json[QString("progressStatus")]);
    m_progress_status_isSet = !json[QString("progressStatus")].isNull() && m_progress_status_isValid;

    m_replication_started_date_time_isValid = ::OpenAPI::fromJsonValue(m_replication_started_date_time, json[QString("replicationStartedDateTime")]);
    m_replication_started_date_time_isSet = !json[QString("replicationStartedDateTime")].isNull() && m_replication_started_date_time_isValid;

    m_total_applications_isValid = ::OpenAPI::fromJsonValue(m_total_applications, json[QString("totalApplications")]);
    m_total_applications_isSet = !json[QString("totalApplications")].isNull() && m_total_applications_isValid;
}

QString OAIWaveAggregatedStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWaveAggregatedStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_health_status.isSet()) {
        obj.insert(QString("healthStatus"), ::OpenAPI::toJsonValue(m_health_status));
    }
    if (m_last_update_date_time_isSet) {
        obj.insert(QString("lastUpdateDateTime"), ::OpenAPI::toJsonValue(m_last_update_date_time));
    }
    if (m_progress_status.isSet()) {
        obj.insert(QString("progressStatus"), ::OpenAPI::toJsonValue(m_progress_status));
    }
    if (m_replication_started_date_time_isSet) {
        obj.insert(QString("replicationStartedDateTime"), ::OpenAPI::toJsonValue(m_replication_started_date_time));
    }
    if (m_total_applications_isSet) {
        obj.insert(QString("totalApplications"), ::OpenAPI::toJsonValue(m_total_applications));
    }
    return obj;
}

OAIWaveHealthStatus OAIWaveAggregatedStatus::getHealthStatus() const {
    return m_health_status;
}
void OAIWaveAggregatedStatus::setHealthStatus(const OAIWaveHealthStatus &health_status) {
    m_health_status = health_status;
    m_health_status_isSet = true;
}

bool OAIWaveAggregatedStatus::is_health_status_Set() const{
    return m_health_status_isSet;
}

bool OAIWaveAggregatedStatus::is_health_status_Valid() const{
    return m_health_status_isValid;
}

QString OAIWaveAggregatedStatus::getLastUpdateDateTime() const {
    return m_last_update_date_time;
}
void OAIWaveAggregatedStatus::setLastUpdateDateTime(const QString &last_update_date_time) {
    m_last_update_date_time = last_update_date_time;
    m_last_update_date_time_isSet = true;
}

bool OAIWaveAggregatedStatus::is_last_update_date_time_Set() const{
    return m_last_update_date_time_isSet;
}

bool OAIWaveAggregatedStatus::is_last_update_date_time_Valid() const{
    return m_last_update_date_time_isValid;
}

OAIWaveProgressStatus OAIWaveAggregatedStatus::getProgressStatus() const {
    return m_progress_status;
}
void OAIWaveAggregatedStatus::setProgressStatus(const OAIWaveProgressStatus &progress_status) {
    m_progress_status = progress_status;
    m_progress_status_isSet = true;
}

bool OAIWaveAggregatedStatus::is_progress_status_Set() const{
    return m_progress_status_isSet;
}

bool OAIWaveAggregatedStatus::is_progress_status_Valid() const{
    return m_progress_status_isValid;
}

QString OAIWaveAggregatedStatus::getReplicationStartedDateTime() const {
    return m_replication_started_date_time;
}
void OAIWaveAggregatedStatus::setReplicationStartedDateTime(const QString &replication_started_date_time) {
    m_replication_started_date_time = replication_started_date_time;
    m_replication_started_date_time_isSet = true;
}

bool OAIWaveAggregatedStatus::is_replication_started_date_time_Set() const{
    return m_replication_started_date_time_isSet;
}

bool OAIWaveAggregatedStatus::is_replication_started_date_time_Valid() const{
    return m_replication_started_date_time_isValid;
}

qint32 OAIWaveAggregatedStatus::getTotalApplications() const {
    return m_total_applications;
}
void OAIWaveAggregatedStatus::setTotalApplications(const qint32 &total_applications) {
    m_total_applications = total_applications;
    m_total_applications_isSet = true;
}

bool OAIWaveAggregatedStatus::is_total_applications_Set() const{
    return m_total_applications_isSet;
}

bool OAIWaveAggregatedStatus::is_total_applications_Valid() const{
    return m_total_applications_isValid;
}

bool OAIWaveAggregatedStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_health_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_update_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_started_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_applications_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWaveAggregatedStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
