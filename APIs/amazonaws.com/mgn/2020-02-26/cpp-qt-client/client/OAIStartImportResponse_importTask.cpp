/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartImportResponse_importTask.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartImportResponse_importTask::OAIStartImportResponse_importTask(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartImportResponse_importTask::OAIStartImportResponse_importTask() {
    this->initializeModel();
}

OAIStartImportResponse_importTask::~OAIStartImportResponse_importTask() {}

void OAIStartImportResponse_importTask::initializeModel() {

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_import_id_isSet = false;
    m_import_id_isValid = false;

    m_progress_percentage_isSet = false;
    m_progress_percentage_isValid = false;

    m_s3_bucket_source_isSet = false;
    m_s3_bucket_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIStartImportResponse_importTask::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartImportResponse_importTask::fromJsonObject(QJsonObject json) {

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_import_id_isValid = ::OpenAPI::fromJsonValue(m_import_id, json[QString("importID")]);
    m_import_id_isSet = !json[QString("importID")].isNull() && m_import_id_isValid;

    m_progress_percentage_isValid = ::OpenAPI::fromJsonValue(m_progress_percentage, json[QString("progressPercentage")]);
    m_progress_percentage_isSet = !json[QString("progressPercentage")].isNull() && m_progress_percentage_isValid;

    m_s3_bucket_source_isValid = ::OpenAPI::fromJsonValue(m_s3_bucket_source, json[QString("s3BucketSource")]);
    m_s3_bucket_source_isSet = !json[QString("s3BucketSource")].isNull() && m_s3_bucket_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIStartImportResponse_importTask::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartImportResponse_importTask::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_import_id_isSet) {
        obj.insert(QString("importID"), ::OpenAPI::toJsonValue(m_import_id));
    }
    if (m_progress_percentage_isSet) {
        obj.insert(QString("progressPercentage"), ::OpenAPI::toJsonValue(m_progress_percentage));
    }
    if (m_s3_bucket_source.isSet()) {
        obj.insert(QString("s3BucketSource"), ::OpenAPI::toJsonValue(m_s3_bucket_source));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_summary.isSet()) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAIStartImportResponse_importTask::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIStartImportResponse_importTask::setCreationDateTime(const QString &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIStartImportResponse_importTask::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIStartImportResponse_importTask::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QString OAIStartImportResponse_importTask::getEndDateTime() const {
    return m_end_date_time;
}
void OAIStartImportResponse_importTask::setEndDateTime(const QString &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIStartImportResponse_importTask::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIStartImportResponse_importTask::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

QString OAIStartImportResponse_importTask::getImportId() const {
    return m_import_id;
}
void OAIStartImportResponse_importTask::setImportId(const QString &import_id) {
    m_import_id = import_id;
    m_import_id_isSet = true;
}

bool OAIStartImportResponse_importTask::is_import_id_Set() const{
    return m_import_id_isSet;
}

bool OAIStartImportResponse_importTask::is_import_id_Valid() const{
    return m_import_id_isValid;
}

float OAIStartImportResponse_importTask::getProgressPercentage() const {
    return m_progress_percentage;
}
void OAIStartImportResponse_importTask::setProgressPercentage(const float &progress_percentage) {
    m_progress_percentage = progress_percentage;
    m_progress_percentage_isSet = true;
}

bool OAIStartImportResponse_importTask::is_progress_percentage_Set() const{
    return m_progress_percentage_isSet;
}

bool OAIStartImportResponse_importTask::is_progress_percentage_Valid() const{
    return m_progress_percentage_isValid;
}

OAIImportTask_s3BucketSource OAIStartImportResponse_importTask::getS3BucketSource() const {
    return m_s3_bucket_source;
}
void OAIStartImportResponse_importTask::setS3BucketSource(const OAIImportTask_s3BucketSource &s3_bucket_source) {
    m_s3_bucket_source = s3_bucket_source;
    m_s3_bucket_source_isSet = true;
}

bool OAIStartImportResponse_importTask::is_s3_bucket_source_Set() const{
    return m_s3_bucket_source_isSet;
}

bool OAIStartImportResponse_importTask::is_s3_bucket_source_Valid() const{
    return m_s3_bucket_source_isValid;
}

OAIImportStatus OAIStartImportResponse_importTask::getStatus() const {
    return m_status;
}
void OAIStartImportResponse_importTask::setStatus(const OAIImportStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartImportResponse_importTask::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartImportResponse_importTask::is_status_Valid() const{
    return m_status_isValid;
}

OAIImportTask_summary OAIStartImportResponse_importTask::getSummary() const {
    return m_summary;
}
void OAIStartImportResponse_importTask::setSummary(const OAIImportTask_summary &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIStartImportResponse_importTask::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIStartImportResponse_importTask::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIStartImportResponse_importTask::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_bucket_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartImportResponse_importTask::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
