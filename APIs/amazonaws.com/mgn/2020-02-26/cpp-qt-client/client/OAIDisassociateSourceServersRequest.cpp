/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisassociateSourceServersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisassociateSourceServersRequest::OAIDisassociateSourceServersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisassociateSourceServersRequest::OAIDisassociateSourceServersRequest() {
    this->initializeModel();
}

OAIDisassociateSourceServersRequest::~OAIDisassociateSourceServersRequest() {}

void OAIDisassociateSourceServersRequest::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_source_server_ids_isSet = false;
    m_source_server_ids_isValid = false;
}

void OAIDisassociateSourceServersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisassociateSourceServersRequest::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountID")]);
    m_account_id_isSet = !json[QString("accountID")].isNull() && m_account_id_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationID")]);
    m_application_id_isSet = !json[QString("applicationID")].isNull() && m_application_id_isValid;

    m_source_server_ids_isValid = ::OpenAPI::fromJsonValue(m_source_server_ids, json[QString("sourceServerIDs")]);
    m_source_server_ids_isSet = !json[QString("sourceServerIDs")].isNull() && m_source_server_ids_isValid;
}

QString OAIDisassociateSourceServersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisassociateSourceServersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationID"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_source_server_ids.isSet()) {
        obj.insert(QString("sourceServerIDs"), ::OpenAPI::toJsonValue(m_source_server_ids));
    }
    return obj;
}

QString OAIDisassociateSourceServersRequest::getAccountId() const {
    return m_account_id;
}
void OAIDisassociateSourceServersRequest::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIDisassociateSourceServersRequest::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIDisassociateSourceServersRequest::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIDisassociateSourceServersRequest::getApplicationId() const {
    return m_application_id;
}
void OAIDisassociateSourceServersRequest::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIDisassociateSourceServersRequest::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIDisassociateSourceServersRequest::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QList OAIDisassociateSourceServersRequest::getSourceServerIds() const {
    return m_source_server_ids;
}
void OAIDisassociateSourceServersRequest::setSourceServerIds(const QList &source_server_ids) {
    m_source_server_ids = source_server_ids;
    m_source_server_ids_isSet = true;
}

bool OAIDisassociateSourceServersRequest::is_source_server_ids_Set() const{
    return m_source_server_ids_isSet;
}

bool OAIDisassociateSourceServersRequest::is_source_server_ids_Valid() const{
    return m_source_server_ids_isValid;
}

bool OAIDisassociateSourceServersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisassociateSourceServersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_id_isValid && m_source_server_ids_isValid && true;
}

} // namespace OpenAPI
