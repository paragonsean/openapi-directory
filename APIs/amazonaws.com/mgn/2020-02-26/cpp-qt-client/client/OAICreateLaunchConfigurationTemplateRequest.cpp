/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLaunchConfigurationTemplateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLaunchConfigurationTemplateRequest::OAICreateLaunchConfigurationTemplateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLaunchConfigurationTemplateRequest::OAICreateLaunchConfigurationTemplateRequest() {
    this->initializeModel();
}

OAICreateLaunchConfigurationTemplateRequest::~OAICreateLaunchConfigurationTemplateRequest() {}

void OAICreateLaunchConfigurationTemplateRequest::initializeModel() {

    m_associate_public_ip_address_isSet = false;
    m_associate_public_ip_address_isValid = false;

    m_boot_mode_isSet = false;
    m_boot_mode_isValid = false;

    m_copy_private_ip_isSet = false;
    m_copy_private_ip_isValid = false;

    m_copy_tags_isSet = false;
    m_copy_tags_isValid = false;

    m_enable_map_auto_tagging_isSet = false;
    m_enable_map_auto_tagging_isValid = false;

    m_large_volume_conf_isSet = false;
    m_large_volume_conf_isValid = false;

    m_launch_disposition_isSet = false;
    m_launch_disposition_isValid = false;

    m_licensing_isSet = false;
    m_licensing_isValid = false;

    m_map_auto_tagging_mpe_id_isSet = false;
    m_map_auto_tagging_mpe_id_isValid = false;

    m_post_launch_actions_isSet = false;
    m_post_launch_actions_isValid = false;

    m_small_volume_conf_isSet = false;
    m_small_volume_conf_isValid = false;

    m_small_volume_max_size_isSet = false;
    m_small_volume_max_size_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_target_instance_type_right_sizing_method_isSet = false;
    m_target_instance_type_right_sizing_method_isValid = false;
}

void OAICreateLaunchConfigurationTemplateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLaunchConfigurationTemplateRequest::fromJsonObject(QJsonObject json) {

    m_associate_public_ip_address_isValid = ::OpenAPI::fromJsonValue(m_associate_public_ip_address, json[QString("associatePublicIpAddress")]);
    m_associate_public_ip_address_isSet = !json[QString("associatePublicIpAddress")].isNull() && m_associate_public_ip_address_isValid;

    m_boot_mode_isValid = ::OpenAPI::fromJsonValue(m_boot_mode, json[QString("bootMode")]);
    m_boot_mode_isSet = !json[QString("bootMode")].isNull() && m_boot_mode_isValid;

    m_copy_private_ip_isValid = ::OpenAPI::fromJsonValue(m_copy_private_ip, json[QString("copyPrivateIp")]);
    m_copy_private_ip_isSet = !json[QString("copyPrivateIp")].isNull() && m_copy_private_ip_isValid;

    m_copy_tags_isValid = ::OpenAPI::fromJsonValue(m_copy_tags, json[QString("copyTags")]);
    m_copy_tags_isSet = !json[QString("copyTags")].isNull() && m_copy_tags_isValid;

    m_enable_map_auto_tagging_isValid = ::OpenAPI::fromJsonValue(m_enable_map_auto_tagging, json[QString("enableMapAutoTagging")]);
    m_enable_map_auto_tagging_isSet = !json[QString("enableMapAutoTagging")].isNull() && m_enable_map_auto_tagging_isValid;

    m_large_volume_conf_isValid = ::OpenAPI::fromJsonValue(m_large_volume_conf, json[QString("largeVolumeConf")]);
    m_large_volume_conf_isSet = !json[QString("largeVolumeConf")].isNull() && m_large_volume_conf_isValid;

    m_launch_disposition_isValid = ::OpenAPI::fromJsonValue(m_launch_disposition, json[QString("launchDisposition")]);
    m_launch_disposition_isSet = !json[QString("launchDisposition")].isNull() && m_launch_disposition_isValid;

    m_licensing_isValid = ::OpenAPI::fromJsonValue(m_licensing, json[QString("licensing")]);
    m_licensing_isSet = !json[QString("licensing")].isNull() && m_licensing_isValid;

    m_map_auto_tagging_mpe_id_isValid = ::OpenAPI::fromJsonValue(m_map_auto_tagging_mpe_id, json[QString("mapAutoTaggingMpeID")]);
    m_map_auto_tagging_mpe_id_isSet = !json[QString("mapAutoTaggingMpeID")].isNull() && m_map_auto_tagging_mpe_id_isValid;

    m_post_launch_actions_isValid = ::OpenAPI::fromJsonValue(m_post_launch_actions, json[QString("postLaunchActions")]);
    m_post_launch_actions_isSet = !json[QString("postLaunchActions")].isNull() && m_post_launch_actions_isValid;

    m_small_volume_conf_isValid = ::OpenAPI::fromJsonValue(m_small_volume_conf, json[QString("smallVolumeConf")]);
    m_small_volume_conf_isSet = !json[QString("smallVolumeConf")].isNull() && m_small_volume_conf_isValid;

    m_small_volume_max_size_isValid = ::OpenAPI::fromJsonValue(m_small_volume_max_size, json[QString("smallVolumeMaxSize")]);
    m_small_volume_max_size_isSet = !json[QString("smallVolumeMaxSize")].isNull() && m_small_volume_max_size_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_target_instance_type_right_sizing_method_isValid = ::OpenAPI::fromJsonValue(m_target_instance_type_right_sizing_method, json[QString("targetInstanceTypeRightSizingMethod")]);
    m_target_instance_type_right_sizing_method_isSet = !json[QString("targetInstanceTypeRightSizingMethod")].isNull() && m_target_instance_type_right_sizing_method_isValid;
}

QString OAICreateLaunchConfigurationTemplateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLaunchConfigurationTemplateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_associate_public_ip_address_isSet) {
        obj.insert(QString("associatePublicIpAddress"), ::OpenAPI::toJsonValue(m_associate_public_ip_address));
    }
    if (m_boot_mode.isSet()) {
        obj.insert(QString("bootMode"), ::OpenAPI::toJsonValue(m_boot_mode));
    }
    if (m_copy_private_ip_isSet) {
        obj.insert(QString("copyPrivateIp"), ::OpenAPI::toJsonValue(m_copy_private_ip));
    }
    if (m_copy_tags_isSet) {
        obj.insert(QString("copyTags"), ::OpenAPI::toJsonValue(m_copy_tags));
    }
    if (m_enable_map_auto_tagging_isSet) {
        obj.insert(QString("enableMapAutoTagging"), ::OpenAPI::toJsonValue(m_enable_map_auto_tagging));
    }
    if (m_large_volume_conf.isSet()) {
        obj.insert(QString("largeVolumeConf"), ::OpenAPI::toJsonValue(m_large_volume_conf));
    }
    if (m_launch_disposition.isSet()) {
        obj.insert(QString("launchDisposition"), ::OpenAPI::toJsonValue(m_launch_disposition));
    }
    if (m_licensing.isSet()) {
        obj.insert(QString("licensing"), ::OpenAPI::toJsonValue(m_licensing));
    }
    if (m_map_auto_tagging_mpe_id_isSet) {
        obj.insert(QString("mapAutoTaggingMpeID"), ::OpenAPI::toJsonValue(m_map_auto_tagging_mpe_id));
    }
    if (m_post_launch_actions.isSet()) {
        obj.insert(QString("postLaunchActions"), ::OpenAPI::toJsonValue(m_post_launch_actions));
    }
    if (m_small_volume_conf.isSet()) {
        obj.insert(QString("smallVolumeConf"), ::OpenAPI::toJsonValue(m_small_volume_conf));
    }
    if (m_small_volume_max_size_isSet) {
        obj.insert(QString("smallVolumeMaxSize"), ::OpenAPI::toJsonValue(m_small_volume_max_size));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_target_instance_type_right_sizing_method.isSet()) {
        obj.insert(QString("targetInstanceTypeRightSizingMethod"), ::OpenAPI::toJsonValue(m_target_instance_type_right_sizing_method));
    }
    return obj;
}

bool OAICreateLaunchConfigurationTemplateRequest::getAssociatePublicIpAddress() const {
    return m_associate_public_ip_address;
}
void OAICreateLaunchConfigurationTemplateRequest::setAssociatePublicIpAddress(const bool &associate_public_ip_address) {
    m_associate_public_ip_address = associate_public_ip_address;
    m_associate_public_ip_address_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_associate_public_ip_address_Set() const{
    return m_associate_public_ip_address_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_associate_public_ip_address_Valid() const{
    return m_associate_public_ip_address_isValid;
}

OAIBootMode OAICreateLaunchConfigurationTemplateRequest::getBootMode() const {
    return m_boot_mode;
}
void OAICreateLaunchConfigurationTemplateRequest::setBootMode(const OAIBootMode &boot_mode) {
    m_boot_mode = boot_mode;
    m_boot_mode_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_boot_mode_Set() const{
    return m_boot_mode_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_boot_mode_Valid() const{
    return m_boot_mode_isValid;
}

bool OAICreateLaunchConfigurationTemplateRequest::getCopyPrivateIp() const {
    return m_copy_private_ip;
}
void OAICreateLaunchConfigurationTemplateRequest::setCopyPrivateIp(const bool &copy_private_ip) {
    m_copy_private_ip = copy_private_ip;
    m_copy_private_ip_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_copy_private_ip_Set() const{
    return m_copy_private_ip_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_copy_private_ip_Valid() const{
    return m_copy_private_ip_isValid;
}

bool OAICreateLaunchConfigurationTemplateRequest::getCopyTags() const {
    return m_copy_tags;
}
void OAICreateLaunchConfigurationTemplateRequest::setCopyTags(const bool &copy_tags) {
    m_copy_tags = copy_tags;
    m_copy_tags_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_copy_tags_Set() const{
    return m_copy_tags_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_copy_tags_Valid() const{
    return m_copy_tags_isValid;
}

bool OAICreateLaunchConfigurationTemplateRequest::getEnableMapAutoTagging() const {
    return m_enable_map_auto_tagging;
}
void OAICreateLaunchConfigurationTemplateRequest::setEnableMapAutoTagging(const bool &enable_map_auto_tagging) {
    m_enable_map_auto_tagging = enable_map_auto_tagging;
    m_enable_map_auto_tagging_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_enable_map_auto_tagging_Set() const{
    return m_enable_map_auto_tagging_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_enable_map_auto_tagging_Valid() const{
    return m_enable_map_auto_tagging_isValid;
}

OAILaunchConfigurationTemplate_largeVolumeConf OAICreateLaunchConfigurationTemplateRequest::getLargeVolumeConf() const {
    return m_large_volume_conf;
}
void OAICreateLaunchConfigurationTemplateRequest::setLargeVolumeConf(const OAILaunchConfigurationTemplate_largeVolumeConf &large_volume_conf) {
    m_large_volume_conf = large_volume_conf;
    m_large_volume_conf_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_large_volume_conf_Set() const{
    return m_large_volume_conf_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_large_volume_conf_Valid() const{
    return m_large_volume_conf_isValid;
}

OAILaunchDisposition OAICreateLaunchConfigurationTemplateRequest::getLaunchDisposition() const {
    return m_launch_disposition;
}
void OAICreateLaunchConfigurationTemplateRequest::setLaunchDisposition(const OAILaunchDisposition &launch_disposition) {
    m_launch_disposition = launch_disposition;
    m_launch_disposition_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_launch_disposition_Set() const{
    return m_launch_disposition_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_launch_disposition_Valid() const{
    return m_launch_disposition_isValid;
}

OAILicensing OAICreateLaunchConfigurationTemplateRequest::getLicensing() const {
    return m_licensing;
}
void OAICreateLaunchConfigurationTemplateRequest::setLicensing(const OAILicensing &licensing) {
    m_licensing = licensing;
    m_licensing_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_licensing_Set() const{
    return m_licensing_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_licensing_Valid() const{
    return m_licensing_isValid;
}

QString OAICreateLaunchConfigurationTemplateRequest::getMapAutoTaggingMpeId() const {
    return m_map_auto_tagging_mpe_id;
}
void OAICreateLaunchConfigurationTemplateRequest::setMapAutoTaggingMpeId(const QString &map_auto_tagging_mpe_id) {
    m_map_auto_tagging_mpe_id = map_auto_tagging_mpe_id;
    m_map_auto_tagging_mpe_id_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_map_auto_tagging_mpe_id_Set() const{
    return m_map_auto_tagging_mpe_id_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_map_auto_tagging_mpe_id_Valid() const{
    return m_map_auto_tagging_mpe_id_isValid;
}

OAICreateLaunchConfigurationTemplateRequest_postLaunchActions OAICreateLaunchConfigurationTemplateRequest::getPostLaunchActions() const {
    return m_post_launch_actions;
}
void OAICreateLaunchConfigurationTemplateRequest::setPostLaunchActions(const OAICreateLaunchConfigurationTemplateRequest_postLaunchActions &post_launch_actions) {
    m_post_launch_actions = post_launch_actions;
    m_post_launch_actions_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_post_launch_actions_Set() const{
    return m_post_launch_actions_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_post_launch_actions_Valid() const{
    return m_post_launch_actions_isValid;
}

OAILaunchConfigurationTemplate_smallVolumeConf OAICreateLaunchConfigurationTemplateRequest::getSmallVolumeConf() const {
    return m_small_volume_conf;
}
void OAICreateLaunchConfigurationTemplateRequest::setSmallVolumeConf(const OAILaunchConfigurationTemplate_smallVolumeConf &small_volume_conf) {
    m_small_volume_conf = small_volume_conf;
    m_small_volume_conf_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_small_volume_conf_Set() const{
    return m_small_volume_conf_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_small_volume_conf_Valid() const{
    return m_small_volume_conf_isValid;
}

qint32 OAICreateLaunchConfigurationTemplateRequest::getSmallVolumeMaxSize() const {
    return m_small_volume_max_size;
}
void OAICreateLaunchConfigurationTemplateRequest::setSmallVolumeMaxSize(const qint32 &small_volume_max_size) {
    m_small_volume_max_size = small_volume_max_size;
    m_small_volume_max_size_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_small_volume_max_size_Set() const{
    return m_small_volume_max_size_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_small_volume_max_size_Valid() const{
    return m_small_volume_max_size_isValid;
}

QMap OAICreateLaunchConfigurationTemplateRequest::getTags() const {
    return m_tags;
}
void OAICreateLaunchConfigurationTemplateRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAITargetInstanceTypeRightSizingMethod OAICreateLaunchConfigurationTemplateRequest::getTargetInstanceTypeRightSizingMethod() const {
    return m_target_instance_type_right_sizing_method;
}
void OAICreateLaunchConfigurationTemplateRequest::setTargetInstanceTypeRightSizingMethod(const OAITargetInstanceTypeRightSizingMethod &target_instance_type_right_sizing_method) {
    m_target_instance_type_right_sizing_method = target_instance_type_right_sizing_method;
    m_target_instance_type_right_sizing_method_isSet = true;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_target_instance_type_right_sizing_method_Set() const{
    return m_target_instance_type_right_sizing_method_isSet;
}

bool OAICreateLaunchConfigurationTemplateRequest::is_target_instance_type_right_sizing_method_Valid() const{
    return m_target_instance_type_right_sizing_method_isValid;
}

bool OAICreateLaunchConfigurationTemplateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_associate_public_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_boot_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_private_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_map_auto_tagging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_volume_conf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_disposition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_licensing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_auto_tagging_mpe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_launch_actions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_volume_conf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_volume_max_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_instance_type_right_sizing_method.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLaunchConfigurationTemplateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
