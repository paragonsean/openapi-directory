/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStartCutoverResponse_job.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStartCutoverResponse_job::OAIStartCutoverResponse_job(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStartCutoverResponse_job::OAIStartCutoverResponse_job() {
    this->initializeModel();
}

OAIStartCutoverResponse_job::~OAIStartCutoverResponse_job() {}

void OAIStartCutoverResponse_job::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_end_date_time_isSet = false;
    m_end_date_time_isValid = false;

    m_initiated_by_isSet = false;
    m_initiated_by_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_participating_servers_isSet = false;
    m_participating_servers_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStartCutoverResponse_job::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStartCutoverResponse_job::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_end_date_time_isValid = ::OpenAPI::fromJsonValue(m_end_date_time, json[QString("endDateTime")]);
    m_end_date_time_isSet = !json[QString("endDateTime")].isNull() && m_end_date_time_isValid;

    m_initiated_by_isValid = ::OpenAPI::fromJsonValue(m_initiated_by, json[QString("initiatedBy")]);
    m_initiated_by_isSet = !json[QString("initiatedBy")].isNull() && m_initiated_by_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobID")]);
    m_job_id_isSet = !json[QString("jobID")].isNull() && m_job_id_isValid;

    m_participating_servers_isValid = ::OpenAPI::fromJsonValue(m_participating_servers, json[QString("participatingServers")]);
    m_participating_servers_isSet = !json[QString("participatingServers")].isNull() && m_participating_servers_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStartCutoverResponse_job::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStartCutoverResponse_job::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_end_date_time_isSet) {
        obj.insert(QString("endDateTime"), ::OpenAPI::toJsonValue(m_end_date_time));
    }
    if (m_initiated_by.isSet()) {
        obj.insert(QString("initiatedBy"), ::OpenAPI::toJsonValue(m_initiated_by));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobID"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_participating_servers.isSet()) {
        obj.insert(QString("participatingServers"), ::OpenAPI::toJsonValue(m_participating_servers));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIStartCutoverResponse_job::getArn() const {
    return m_arn;
}
void OAIStartCutoverResponse_job::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIStartCutoverResponse_job::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIStartCutoverResponse_job::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIStartCutoverResponse_job::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIStartCutoverResponse_job::setCreationDateTime(const QString &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIStartCutoverResponse_job::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIStartCutoverResponse_job::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QString OAIStartCutoverResponse_job::getEndDateTime() const {
    return m_end_date_time;
}
void OAIStartCutoverResponse_job::setEndDateTime(const QString &end_date_time) {
    m_end_date_time = end_date_time;
    m_end_date_time_isSet = true;
}

bool OAIStartCutoverResponse_job::is_end_date_time_Set() const{
    return m_end_date_time_isSet;
}

bool OAIStartCutoverResponse_job::is_end_date_time_Valid() const{
    return m_end_date_time_isValid;
}

OAIInitiatedBy OAIStartCutoverResponse_job::getInitiatedBy() const {
    return m_initiated_by;
}
void OAIStartCutoverResponse_job::setInitiatedBy(const OAIInitiatedBy &initiated_by) {
    m_initiated_by = initiated_by;
    m_initiated_by_isSet = true;
}

bool OAIStartCutoverResponse_job::is_initiated_by_Set() const{
    return m_initiated_by_isSet;
}

bool OAIStartCutoverResponse_job::is_initiated_by_Valid() const{
    return m_initiated_by_isValid;
}

QString OAIStartCutoverResponse_job::getJobId() const {
    return m_job_id;
}
void OAIStartCutoverResponse_job::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIStartCutoverResponse_job::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIStartCutoverResponse_job::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QList OAIStartCutoverResponse_job::getParticipatingServers() const {
    return m_participating_servers;
}
void OAIStartCutoverResponse_job::setParticipatingServers(const QList &participating_servers) {
    m_participating_servers = participating_servers;
    m_participating_servers_isSet = true;
}

bool OAIStartCutoverResponse_job::is_participating_servers_Set() const{
    return m_participating_servers_isSet;
}

bool OAIStartCutoverResponse_job::is_participating_servers_Valid() const{
    return m_participating_servers_isValid;
}

OAIJobStatus OAIStartCutoverResponse_job::getStatus() const {
    return m_status;
}
void OAIStartCutoverResponse_job::setStatus(const OAIJobStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStartCutoverResponse_job::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStartCutoverResponse_job::is_status_Valid() const{
    return m_status_isValid;
}

QMap OAIStartCutoverResponse_job::getTags() const {
    return m_tags;
}
void OAIStartCutoverResponse_job::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIStartCutoverResponse_job::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIStartCutoverResponse_job::is_tags_Valid() const{
    return m_tags_isValid;
}

OAIJobType OAIStartCutoverResponse_job::getType() const {
    return m_type;
}
void OAIStartCutoverResponse_job::setType(const OAIJobType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStartCutoverResponse_job::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStartCutoverResponse_job::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStartCutoverResponse_job::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initiated_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participating_servers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStartCutoverResponse_job::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_id_isValid && true;
}

} // namespace OpenAPI
