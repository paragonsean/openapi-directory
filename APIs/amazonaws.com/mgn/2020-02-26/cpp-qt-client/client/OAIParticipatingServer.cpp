/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipatingServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipatingServer::OAIParticipatingServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipatingServer::OAIParticipatingServer() {
    this->initializeModel();
}

OAIParticipatingServer::~OAIParticipatingServer() {}

void OAIParticipatingServer::initializeModel() {

    m_launch_status_isSet = false;
    m_launch_status_isValid = false;

    m_launched_ec2_instance_id_isSet = false;
    m_launched_ec2_instance_id_isValid = false;

    m_post_launch_actions_status_isSet = false;
    m_post_launch_actions_status_isValid = false;

    m_source_server_id_isSet = false;
    m_source_server_id_isValid = false;
}

void OAIParticipatingServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipatingServer::fromJsonObject(QJsonObject json) {

    m_launch_status_isValid = ::OpenAPI::fromJsonValue(m_launch_status, json[QString("launchStatus")]);
    m_launch_status_isSet = !json[QString("launchStatus")].isNull() && m_launch_status_isValid;

    m_launched_ec2_instance_id_isValid = ::OpenAPI::fromJsonValue(m_launched_ec2_instance_id, json[QString("launchedEc2InstanceID")]);
    m_launched_ec2_instance_id_isSet = !json[QString("launchedEc2InstanceID")].isNull() && m_launched_ec2_instance_id_isValid;

    m_post_launch_actions_status_isValid = ::OpenAPI::fromJsonValue(m_post_launch_actions_status, json[QString("postLaunchActionsStatus")]);
    m_post_launch_actions_status_isSet = !json[QString("postLaunchActionsStatus")].isNull() && m_post_launch_actions_status_isValid;

    m_source_server_id_isValid = ::OpenAPI::fromJsonValue(m_source_server_id, json[QString("sourceServerID")]);
    m_source_server_id_isSet = !json[QString("sourceServerID")].isNull() && m_source_server_id_isValid;
}

QString OAIParticipatingServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipatingServer::asJsonObject() const {
    QJsonObject obj;
    if (m_launch_status.isSet()) {
        obj.insert(QString("launchStatus"), ::OpenAPI::toJsonValue(m_launch_status));
    }
    if (m_launched_ec2_instance_id_isSet) {
        obj.insert(QString("launchedEc2InstanceID"), ::OpenAPI::toJsonValue(m_launched_ec2_instance_id));
    }
    if (m_post_launch_actions_status.isSet()) {
        obj.insert(QString("postLaunchActionsStatus"), ::OpenAPI::toJsonValue(m_post_launch_actions_status));
    }
    if (m_source_server_id_isSet) {
        obj.insert(QString("sourceServerID"), ::OpenAPI::toJsonValue(m_source_server_id));
    }
    return obj;
}

OAILaunchStatus OAIParticipatingServer::getLaunchStatus() const {
    return m_launch_status;
}
void OAIParticipatingServer::setLaunchStatus(const OAILaunchStatus &launch_status) {
    m_launch_status = launch_status;
    m_launch_status_isSet = true;
}

bool OAIParticipatingServer::is_launch_status_Set() const{
    return m_launch_status_isSet;
}

bool OAIParticipatingServer::is_launch_status_Valid() const{
    return m_launch_status_isValid;
}

QString OAIParticipatingServer::getLaunchedEc2InstanceId() const {
    return m_launched_ec2_instance_id;
}
void OAIParticipatingServer::setLaunchedEc2InstanceId(const QString &launched_ec2_instance_id) {
    m_launched_ec2_instance_id = launched_ec2_instance_id;
    m_launched_ec2_instance_id_isSet = true;
}

bool OAIParticipatingServer::is_launched_ec2_instance_id_Set() const{
    return m_launched_ec2_instance_id_isSet;
}

bool OAIParticipatingServer::is_launched_ec2_instance_id_Valid() const{
    return m_launched_ec2_instance_id_isValid;
}

OAIParticipatingServer_postLaunchActionsStatus OAIParticipatingServer::getPostLaunchActionsStatus() const {
    return m_post_launch_actions_status;
}
void OAIParticipatingServer::setPostLaunchActionsStatus(const OAIParticipatingServer_postLaunchActionsStatus &post_launch_actions_status) {
    m_post_launch_actions_status = post_launch_actions_status;
    m_post_launch_actions_status_isSet = true;
}

bool OAIParticipatingServer::is_post_launch_actions_status_Set() const{
    return m_post_launch_actions_status_isSet;
}

bool OAIParticipatingServer::is_post_launch_actions_status_Valid() const{
    return m_post_launch_actions_status_isValid;
}

QString OAIParticipatingServer::getSourceServerId() const {
    return m_source_server_id;
}
void OAIParticipatingServer::setSourceServerId(const QString &source_server_id) {
    m_source_server_id = source_server_id;
    m_source_server_id_isSet = true;
}

bool OAIParticipatingServer::is_source_server_id_Set() const{
    return m_source_server_id_isSet;
}

bool OAIParticipatingServer::is_source_server_id_Valid() const{
    return m_source_server_id_isValid;
}

bool OAIParticipatingServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_launch_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_launched_ec2_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_launch_actions_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipatingServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_server_id_isValid && true;
}

} // namespace OpenAPI
