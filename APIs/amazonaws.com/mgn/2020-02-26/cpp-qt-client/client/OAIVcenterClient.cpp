/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVcenterClient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVcenterClient::OAIVcenterClient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVcenterClient::OAIVcenterClient() {
    this->initializeModel();
}

OAIVcenterClient::~OAIVcenterClient() {}

void OAIVcenterClient::initializeModel() {

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_datacenter_name_isSet = false;
    m_datacenter_name_isValid = false;

    m_hostname_isSet = false;
    m_hostname_isValid = false;

    m_last_seen_datetime_isSet = false;
    m_last_seen_datetime_isValid = false;

    m_source_server_tags_isSet = false;
    m_source_server_tags_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_vcenter_client_id_isSet = false;
    m_vcenter_client_id_isValid = false;

    m_vcenter_uuid_isSet = false;
    m_vcenter_uuid_isValid = false;
}

void OAIVcenterClient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVcenterClient::fromJsonObject(QJsonObject json) {

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_datacenter_name_isValid = ::OpenAPI::fromJsonValue(m_datacenter_name, json[QString("datacenterName")]);
    m_datacenter_name_isSet = !json[QString("datacenterName")].isNull() && m_datacenter_name_isValid;

    m_hostname_isValid = ::OpenAPI::fromJsonValue(m_hostname, json[QString("hostname")]);
    m_hostname_isSet = !json[QString("hostname")].isNull() && m_hostname_isValid;

    m_last_seen_datetime_isValid = ::OpenAPI::fromJsonValue(m_last_seen_datetime, json[QString("lastSeenDatetime")]);
    m_last_seen_datetime_isSet = !json[QString("lastSeenDatetime")].isNull() && m_last_seen_datetime_isValid;

    m_source_server_tags_isValid = ::OpenAPI::fromJsonValue(m_source_server_tags, json[QString("sourceServerTags")]);
    m_source_server_tags_isSet = !json[QString("sourceServerTags")].isNull() && m_source_server_tags_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_vcenter_client_id_isValid = ::OpenAPI::fromJsonValue(m_vcenter_client_id, json[QString("vcenterClientID")]);
    m_vcenter_client_id_isSet = !json[QString("vcenterClientID")].isNull() && m_vcenter_client_id_isValid;

    m_vcenter_uuid_isValid = ::OpenAPI::fromJsonValue(m_vcenter_uuid, json[QString("vcenterUUID")]);
    m_vcenter_uuid_isSet = !json[QString("vcenterUUID")].isNull() && m_vcenter_uuid_isValid;
}

QString OAIVcenterClient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVcenterClient::asJsonObject() const {
    QJsonObject obj;
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_datacenter_name_isSet) {
        obj.insert(QString("datacenterName"), ::OpenAPI::toJsonValue(m_datacenter_name));
    }
    if (m_hostname_isSet) {
        obj.insert(QString("hostname"), ::OpenAPI::toJsonValue(m_hostname));
    }
    if (m_last_seen_datetime_isSet) {
        obj.insert(QString("lastSeenDatetime"), ::OpenAPI::toJsonValue(m_last_seen_datetime));
    }
    if (m_source_server_tags.isSet()) {
        obj.insert(QString("sourceServerTags"), ::OpenAPI::toJsonValue(m_source_server_tags));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_vcenter_client_id_isSet) {
        obj.insert(QString("vcenterClientID"), ::OpenAPI::toJsonValue(m_vcenter_client_id));
    }
    if (m_vcenter_uuid_isSet) {
        obj.insert(QString("vcenterUUID"), ::OpenAPI::toJsonValue(m_vcenter_uuid));
    }
    return obj;
}

QString OAIVcenterClient::getArn() const {
    return m_arn;
}
void OAIVcenterClient::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIVcenterClient::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIVcenterClient::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIVcenterClient::getDatacenterName() const {
    return m_datacenter_name;
}
void OAIVcenterClient::setDatacenterName(const QString &datacenter_name) {
    m_datacenter_name = datacenter_name;
    m_datacenter_name_isSet = true;
}

bool OAIVcenterClient::is_datacenter_name_Set() const{
    return m_datacenter_name_isSet;
}

bool OAIVcenterClient::is_datacenter_name_Valid() const{
    return m_datacenter_name_isValid;
}

QString OAIVcenterClient::getHostname() const {
    return m_hostname;
}
void OAIVcenterClient::setHostname(const QString &hostname) {
    m_hostname = hostname;
    m_hostname_isSet = true;
}

bool OAIVcenterClient::is_hostname_Set() const{
    return m_hostname_isSet;
}

bool OAIVcenterClient::is_hostname_Valid() const{
    return m_hostname_isValid;
}

QString OAIVcenterClient::getLastSeenDatetime() const {
    return m_last_seen_datetime;
}
void OAIVcenterClient::setLastSeenDatetime(const QString &last_seen_datetime) {
    m_last_seen_datetime = last_seen_datetime;
    m_last_seen_datetime_isSet = true;
}

bool OAIVcenterClient::is_last_seen_datetime_Set() const{
    return m_last_seen_datetime_isSet;
}

bool OAIVcenterClient::is_last_seen_datetime_Valid() const{
    return m_last_seen_datetime_isValid;
}

QMap OAIVcenterClient::getSourceServerTags() const {
    return m_source_server_tags;
}
void OAIVcenterClient::setSourceServerTags(const QMap &source_server_tags) {
    m_source_server_tags = source_server_tags;
    m_source_server_tags_isSet = true;
}

bool OAIVcenterClient::is_source_server_tags_Set() const{
    return m_source_server_tags_isSet;
}

bool OAIVcenterClient::is_source_server_tags_Valid() const{
    return m_source_server_tags_isValid;
}

QMap OAIVcenterClient::getTags() const {
    return m_tags;
}
void OAIVcenterClient::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIVcenterClient::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIVcenterClient::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIVcenterClient::getVcenterClientId() const {
    return m_vcenter_client_id;
}
void OAIVcenterClient::setVcenterClientId(const QString &vcenter_client_id) {
    m_vcenter_client_id = vcenter_client_id;
    m_vcenter_client_id_isSet = true;
}

bool OAIVcenterClient::is_vcenter_client_id_Set() const{
    return m_vcenter_client_id_isSet;
}

bool OAIVcenterClient::is_vcenter_client_id_Valid() const{
    return m_vcenter_client_id_isValid;
}

QString OAIVcenterClient::getVcenterUuid() const {
    return m_vcenter_uuid;
}
void OAIVcenterClient::setVcenterUuid(const QString &vcenter_uuid) {
    m_vcenter_uuid = vcenter_uuid;
    m_vcenter_uuid_isSet = true;
}

bool OAIVcenterClient::is_vcenter_uuid_Set() const{
    return m_vcenter_uuid_isSet;
}

bool OAIVcenterClient::is_vcenter_uuid_Valid() const{
    return m_vcenter_uuid_isValid;
}

bool OAIVcenterClient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_datacenter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_seen_datetime_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVcenterClient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
