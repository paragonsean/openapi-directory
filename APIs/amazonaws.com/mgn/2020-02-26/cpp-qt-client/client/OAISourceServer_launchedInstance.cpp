/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceServer_launchedInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceServer_launchedInstance::OAISourceServer_launchedInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceServer_launchedInstance::OAISourceServer_launchedInstance() {
    this->initializeModel();
}

OAISourceServer_launchedInstance::~OAISourceServer_launchedInstance() {}

void OAISourceServer_launchedInstance::initializeModel() {

    m_ec2_instance_id_isSet = false;
    m_ec2_instance_id_isValid = false;

    m_first_boot_isSet = false;
    m_first_boot_isValid = false;

    m_job_id_isSet = false;
    m_job_id_isValid = false;
}

void OAISourceServer_launchedInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceServer_launchedInstance::fromJsonObject(QJsonObject json) {

    m_ec2_instance_id_isValid = ::OpenAPI::fromJsonValue(m_ec2_instance_id, json[QString("ec2InstanceID")]);
    m_ec2_instance_id_isSet = !json[QString("ec2InstanceID")].isNull() && m_ec2_instance_id_isValid;

    m_first_boot_isValid = ::OpenAPI::fromJsonValue(m_first_boot, json[QString("firstBoot")]);
    m_first_boot_isSet = !json[QString("firstBoot")].isNull() && m_first_boot_isValid;

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobID")]);
    m_job_id_isSet = !json[QString("jobID")].isNull() && m_job_id_isValid;
}

QString OAISourceServer_launchedInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceServer_launchedInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_ec2_instance_id_isSet) {
        obj.insert(QString("ec2InstanceID"), ::OpenAPI::toJsonValue(m_ec2_instance_id));
    }
    if (m_first_boot.isSet()) {
        obj.insert(QString("firstBoot"), ::OpenAPI::toJsonValue(m_first_boot));
    }
    if (m_job_id_isSet) {
        obj.insert(QString("jobID"), ::OpenAPI::toJsonValue(m_job_id));
    }
    return obj;
}

QString OAISourceServer_launchedInstance::getEc2InstanceId() const {
    return m_ec2_instance_id;
}
void OAISourceServer_launchedInstance::setEc2InstanceId(const QString &ec2_instance_id) {
    m_ec2_instance_id = ec2_instance_id;
    m_ec2_instance_id_isSet = true;
}

bool OAISourceServer_launchedInstance::is_ec2_instance_id_Set() const{
    return m_ec2_instance_id_isSet;
}

bool OAISourceServer_launchedInstance::is_ec2_instance_id_Valid() const{
    return m_ec2_instance_id_isValid;
}

OAIFirstBoot OAISourceServer_launchedInstance::getFirstBoot() const {
    return m_first_boot;
}
void OAISourceServer_launchedInstance::setFirstBoot(const OAIFirstBoot &first_boot) {
    m_first_boot = first_boot;
    m_first_boot_isSet = true;
}

bool OAISourceServer_launchedInstance::is_first_boot_Set() const{
    return m_first_boot_isSet;
}

bool OAISourceServer_launchedInstance::is_first_boot_Valid() const{
    return m_first_boot_isValid;
}

QString OAISourceServer_launchedInstance::getJobId() const {
    return m_job_id;
}
void OAISourceServer_launchedInstance::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAISourceServer_launchedInstance::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAISourceServer_launchedInstance::is_job_id_Valid() const{
    return m_job_id_isValid;
}

bool OAISourceServer_launchedInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ec2_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_boot.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceServer_launchedInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
