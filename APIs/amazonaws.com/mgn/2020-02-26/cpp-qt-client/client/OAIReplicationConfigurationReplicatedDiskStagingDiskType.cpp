/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicationConfigurationReplicatedDiskStagingDiskType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicationConfigurationReplicatedDiskStagingDiskType::OAIReplicationConfigurationReplicatedDiskStagingDiskType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicationConfigurationReplicatedDiskStagingDiskType::OAIReplicationConfigurationReplicatedDiskStagingDiskType() {
    this->initializeModel();
}

OAIReplicationConfigurationReplicatedDiskStagingDiskType::~OAIReplicationConfigurationReplicatedDiskStagingDiskType() {}

void OAIReplicationConfigurationReplicatedDiskStagingDiskType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIReplicationConfigurationReplicatedDiskStagingDiskType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AUTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GP2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::GP2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IO1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::IO1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SC1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::SC1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ST1", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::ST1;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("STANDARD", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::STANDARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GP3", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::GP3;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IO2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIReplicationConfigurationReplicatedDiskStagingDiskType::IO2;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIReplicationConfigurationReplicatedDiskStagingDiskType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIReplicationConfigurationReplicatedDiskStagingDiskType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIReplicationConfigurationReplicatedDiskStagingDiskType::AUTO:
            val = "AUTO";
            break;
        case eOAIReplicationConfigurationReplicatedDiskStagingDiskType::GP2:
            val = "GP2";
            break;
        case eOAIReplicationConfigurationReplicatedDiskStagingDiskType::IO1:
            val = "IO1";
            break;
        case eOAIReplicationConfigurationReplicatedDiskStagingDiskType::SC1:
            val = "SC1";
            break;
        case eOAIReplicationConfigurationReplicatedDiskStagingDiskType::ST1:
            val = "ST1";
            break;
        case eOAIReplicationConfigurationReplicatedDiskStagingDiskType::STANDARD:
            val = "STANDARD";
            break;
        case eOAIReplicationConfigurationReplicatedDiskStagingDiskType::GP3:
            val = "GP3";
            break;
        case eOAIReplicationConfigurationReplicatedDiskStagingDiskType::IO2:
            val = "IO2";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIReplicationConfigurationReplicatedDiskStagingDiskType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIReplicationConfigurationReplicatedDiskStagingDiskType::eOAIReplicationConfigurationReplicatedDiskStagingDiskType OAIReplicationConfigurationReplicatedDiskStagingDiskType::getValue() const {
    return m_value;
}

void OAIReplicationConfigurationReplicatedDiskStagingDiskType::setValue(const OAIReplicationConfigurationReplicatedDiskStagingDiskType::eOAIReplicationConfigurationReplicatedDiskStagingDiskType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIReplicationConfigurationReplicatedDiskStagingDiskType::isSet() const {
    
    return m_value_isSet;
}

bool OAIReplicationConfigurationReplicatedDiskStagingDiskType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
