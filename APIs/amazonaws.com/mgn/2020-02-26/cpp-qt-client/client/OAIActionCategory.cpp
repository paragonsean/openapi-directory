/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActionCategory::OAIActionCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActionCategory::OAIActionCategory() {
    this->initializeModel();
}

OAIActionCategory::~OAIActionCategory() {}

void OAIActionCategory::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIActionCategory::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIActionCategory::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DISASTER_RECOVERY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::DISASTER_RECOVERY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OPERATING_SYSTEM", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::OPERATING_SYSTEM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LICENSE_AND_SUBSCRIPTION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::LICENSE_AND_SUBSCRIPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("VALIDATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::VALIDATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OBSERVABILITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::OBSERVABILITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SECURITY", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::SECURITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NETWORKING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::NETWORKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONFIGURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::CONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BACKUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::BACKUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OTHER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIActionCategory::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIActionCategory::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIActionCategory::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIActionCategory::DISASTER_RECOVERY:
            val = "DISASTER_RECOVERY";
            break;
        case eOAIActionCategory::OPERATING_SYSTEM:
            val = "OPERATING_SYSTEM";
            break;
        case eOAIActionCategory::LICENSE_AND_SUBSCRIPTION:
            val = "LICENSE_AND_SUBSCRIPTION";
            break;
        case eOAIActionCategory::VALIDATION:
            val = "VALIDATION";
            break;
        case eOAIActionCategory::OBSERVABILITY:
            val = "OBSERVABILITY";
            break;
        case eOAIActionCategory::SECURITY:
            val = "SECURITY";
            break;
        case eOAIActionCategory::NETWORKING:
            val = "NETWORKING";
            break;
        case eOAIActionCategory::CONFIGURATION:
            val = "CONFIGURATION";
            break;
        case eOAIActionCategory::BACKUP:
            val = "BACKUP";
            break;
        case eOAIActionCategory::OTHER:
            val = "OTHER";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIActionCategory::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIActionCategory::eOAIActionCategory OAIActionCategory::getValue() const {
    return m_value;
}

void OAIActionCategory::setValue(const OAIActionCategory::eOAIActionCategory& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIActionCategory::isSet() const {
    
    return m_value_isSet;
}

bool OAIActionCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
