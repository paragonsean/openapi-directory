/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataReplicationErrorString.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataReplicationErrorString::OAIDataReplicationErrorString(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataReplicationErrorString::OAIDataReplicationErrorString() {
    this->initializeModel();
}

OAIDataReplicationErrorString::~OAIDataReplicationErrorString() {}

void OAIDataReplicationErrorString::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDataReplicationErrorString::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDataReplicationErrorString::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AGENT_NOT_SEEN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::AGENT_NOT_SEEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SNAPSHOTS_FAILURE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::SNAPSHOTS_FAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_CONVERGING", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::NOT_CONVERGING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSTABLE_NETWORK", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::UNSTABLE_NETWORK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_CREATE_SECURITY_GROUP", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_CREATE_SECURITY_GROUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_LAUNCH_REPLICATION_SERVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_LAUNCH_REPLICATION_SERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_BOOT_REPLICATION_SERVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_BOOT_REPLICATION_SERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_AUTHENTICATE_WITH_SERVICE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_AUTHENTICATE_WITH_SERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_CREATE_STAGING_DISKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_CREATE_STAGING_DISKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_ATTACH_STAGING_DISKS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_ATTACH_STAGING_DISKS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FAILED_TO_START_DATA_TRANSFER", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::FAILED_TO_START_DATA_TRANSFER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UNSUPPORTED_VM_CONFIGURATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::UNSUPPORTED_VM_CONFIGURATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAST_SNAPSHOT_JOB_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDataReplicationErrorString::LAST_SNAPSHOT_JOB_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDataReplicationErrorString::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDataReplicationErrorString::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDataReplicationErrorString::AGENT_NOT_SEEN:
            val = "AGENT_NOT_SEEN";
            break;
        case eOAIDataReplicationErrorString::SNAPSHOTS_FAILURE:
            val = "SNAPSHOTS_FAILURE";
            break;
        case eOAIDataReplicationErrorString::NOT_CONVERGING:
            val = "NOT_CONVERGING";
            break;
        case eOAIDataReplicationErrorString::UNSTABLE_NETWORK:
            val = "UNSTABLE_NETWORK";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_CREATE_SECURITY_GROUP:
            val = "FAILED_TO_CREATE_SECURITY_GROUP";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_LAUNCH_REPLICATION_SERVER:
            val = "FAILED_TO_LAUNCH_REPLICATION_SERVER";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_BOOT_REPLICATION_SERVER:
            val = "FAILED_TO_BOOT_REPLICATION_SERVER";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_AUTHENTICATE_WITH_SERVICE:
            val = "FAILED_TO_AUTHENTICATE_WITH_SERVICE";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE:
            val = "FAILED_TO_DOWNLOAD_REPLICATION_SOFTWARE";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_CREATE_STAGING_DISKS:
            val = "FAILED_TO_CREATE_STAGING_DISKS";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_ATTACH_STAGING_DISKS:
            val = "FAILED_TO_ATTACH_STAGING_DISKS";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT:
            val = "FAILED_TO_PAIR_REPLICATION_SERVER_WITH_AGENT";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER:
            val = "FAILED_TO_CONNECT_AGENT_TO_REPLICATION_SERVER";
            break;
        case eOAIDataReplicationErrorString::FAILED_TO_START_DATA_TRANSFER:
            val = "FAILED_TO_START_DATA_TRANSFER";
            break;
        case eOAIDataReplicationErrorString::UNSUPPORTED_VM_CONFIGURATION:
            val = "UNSUPPORTED_VM_CONFIGURATION";
            break;
        case eOAIDataReplicationErrorString::LAST_SNAPSHOT_JOB_FAILED:
            val = "LAST_SNAPSHOT_JOB_FAILED";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDataReplicationErrorString::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDataReplicationErrorString::eOAIDataReplicationErrorString OAIDataReplicationErrorString::getValue() const {
    return m_value;
}

void OAIDataReplicationErrorString::setValue(const OAIDataReplicationErrorString::eOAIDataReplicationErrorString& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDataReplicationErrorString::isSet() const {
    
    return m_value_isSet;
}

bool OAIDataReplicationErrorString::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
