/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplication.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplication::OAIApplication(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplication::OAIApplication() {
    this->initializeModel();
}

OAIApplication::~OAIApplication() {}

void OAIApplication::initializeModel() {

    m_application_aggregated_status_isSet = false;
    m_application_aggregated_status_isValid = false;

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_creation_date_time_isSet = false;
    m_creation_date_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_wave_id_isSet = false;
    m_wave_id_isValid = false;
}

void OAIApplication::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplication::fromJsonObject(QJsonObject json) {

    m_application_aggregated_status_isValid = ::OpenAPI::fromJsonValue(m_application_aggregated_status, json[QString("applicationAggregatedStatus")]);
    m_application_aggregated_status_isSet = !json[QString("applicationAggregatedStatus")].isNull() && m_application_aggregated_status_isValid;

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationID")]);
    m_application_id_isSet = !json[QString("applicationID")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_creation_date_time_isValid = ::OpenAPI::fromJsonValue(m_creation_date_time, json[QString("creationDateTime")]);
    m_creation_date_time_isSet = !json[QString("creationDateTime")].isNull() && m_creation_date_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("isArchived")]);
    m_is_archived_isSet = !json[QString("isArchived")].isNull() && m_is_archived_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_wave_id_isValid = ::OpenAPI::fromJsonValue(m_wave_id, json[QString("waveID")]);
    m_wave_id_isSet = !json[QString("waveID")].isNull() && m_wave_id_isValid;
}

QString OAIApplication::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplication::asJsonObject() const {
    QJsonObject obj;
    if (m_application_aggregated_status.isSet()) {
        obj.insert(QString("applicationAggregatedStatus"), ::OpenAPI::toJsonValue(m_application_aggregated_status));
    }
    if (m_application_id_isSet) {
        obj.insert(QString("applicationID"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_creation_date_time_isSet) {
        obj.insert(QString("creationDateTime"), ::OpenAPI::toJsonValue(m_creation_date_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("isArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_wave_id_isSet) {
        obj.insert(QString("waveID"), ::OpenAPI::toJsonValue(m_wave_id));
    }
    return obj;
}

OAIApplication_applicationAggregatedStatus OAIApplication::getApplicationAggregatedStatus() const {
    return m_application_aggregated_status;
}
void OAIApplication::setApplicationAggregatedStatus(const OAIApplication_applicationAggregatedStatus &application_aggregated_status) {
    m_application_aggregated_status = application_aggregated_status;
    m_application_aggregated_status_isSet = true;
}

bool OAIApplication::is_application_aggregated_status_Set() const{
    return m_application_aggregated_status_isSet;
}

bool OAIApplication::is_application_aggregated_status_Valid() const{
    return m_application_aggregated_status_isValid;
}

QString OAIApplication::getApplicationId() const {
    return m_application_id;
}
void OAIApplication::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAIApplication::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAIApplication::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAIApplication::getArn() const {
    return m_arn;
}
void OAIApplication::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAIApplication::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAIApplication::is_arn_Valid() const{
    return m_arn_isValid;
}

QString OAIApplication::getCreationDateTime() const {
    return m_creation_date_time;
}
void OAIApplication::setCreationDateTime(const QString &creation_date_time) {
    m_creation_date_time = creation_date_time;
    m_creation_date_time_isSet = true;
}

bool OAIApplication::is_creation_date_time_Set() const{
    return m_creation_date_time_isSet;
}

bool OAIApplication::is_creation_date_time_Valid() const{
    return m_creation_date_time_isValid;
}

QString OAIApplication::getDescription() const {
    return m_description;
}
void OAIApplication::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApplication::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApplication::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIApplication::getIsArchived() const {
    return m_is_archived;
}
void OAIApplication::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAIApplication::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAIApplication::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

QString OAIApplication::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIApplication::setLastModifiedDateTime(const QString &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIApplication::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIApplication::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIApplication::getName() const {
    return m_name;
}
void OAIApplication::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIApplication::is_name_Set() const{
    return m_name_isSet;
}

bool OAIApplication::is_name_Valid() const{
    return m_name_isValid;
}

QMap OAIApplication::getTags() const {
    return m_tags;
}
void OAIApplication::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIApplication::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIApplication::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIApplication::getWaveId() const {
    return m_wave_id;
}
void OAIApplication::setWaveId(const QString &wave_id) {
    m_wave_id = wave_id;
    m_wave_id_isSet = true;
}

bool OAIApplication::is_wave_id_Set() const{
    return m_wave_id_isSet;
}

bool OAIApplication::is_wave_id_Valid() const{
    return m_wave_id_isValid;
}

bool OAIApplication::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_aggregated_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wave_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplication::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
