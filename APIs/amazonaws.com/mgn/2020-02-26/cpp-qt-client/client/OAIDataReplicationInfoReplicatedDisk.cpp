/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataReplicationInfoReplicatedDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataReplicationInfoReplicatedDisk::OAIDataReplicationInfoReplicatedDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataReplicationInfoReplicatedDisk::OAIDataReplicationInfoReplicatedDisk() {
    this->initializeModel();
}

OAIDataReplicationInfoReplicatedDisk::~OAIDataReplicationInfoReplicatedDisk() {}

void OAIDataReplicationInfoReplicatedDisk::initializeModel() {

    m_backlogged_storage_bytes_isSet = false;
    m_backlogged_storage_bytes_isValid = false;

    m_device_name_isSet = false;
    m_device_name_isValid = false;

    m_replicated_storage_bytes_isSet = false;
    m_replicated_storage_bytes_isValid = false;

    m_rescanned_storage_bytes_isSet = false;
    m_rescanned_storage_bytes_isValid = false;

    m_total_storage_bytes_isSet = false;
    m_total_storage_bytes_isValid = false;
}

void OAIDataReplicationInfoReplicatedDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataReplicationInfoReplicatedDisk::fromJsonObject(QJsonObject json) {

    m_backlogged_storage_bytes_isValid = ::OpenAPI::fromJsonValue(m_backlogged_storage_bytes, json[QString("backloggedStorageBytes")]);
    m_backlogged_storage_bytes_isSet = !json[QString("backloggedStorageBytes")].isNull() && m_backlogged_storage_bytes_isValid;

    m_device_name_isValid = ::OpenAPI::fromJsonValue(m_device_name, json[QString("deviceName")]);
    m_device_name_isSet = !json[QString("deviceName")].isNull() && m_device_name_isValid;

    m_replicated_storage_bytes_isValid = ::OpenAPI::fromJsonValue(m_replicated_storage_bytes, json[QString("replicatedStorageBytes")]);
    m_replicated_storage_bytes_isSet = !json[QString("replicatedStorageBytes")].isNull() && m_replicated_storage_bytes_isValid;

    m_rescanned_storage_bytes_isValid = ::OpenAPI::fromJsonValue(m_rescanned_storage_bytes, json[QString("rescannedStorageBytes")]);
    m_rescanned_storage_bytes_isSet = !json[QString("rescannedStorageBytes")].isNull() && m_rescanned_storage_bytes_isValid;

    m_total_storage_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_storage_bytes, json[QString("totalStorageBytes")]);
    m_total_storage_bytes_isSet = !json[QString("totalStorageBytes")].isNull() && m_total_storage_bytes_isValid;
}

QString OAIDataReplicationInfoReplicatedDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataReplicationInfoReplicatedDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_backlogged_storage_bytes_isSet) {
        obj.insert(QString("backloggedStorageBytes"), ::OpenAPI::toJsonValue(m_backlogged_storage_bytes));
    }
    if (m_device_name_isSet) {
        obj.insert(QString("deviceName"), ::OpenAPI::toJsonValue(m_device_name));
    }
    if (m_replicated_storage_bytes_isSet) {
        obj.insert(QString("replicatedStorageBytes"), ::OpenAPI::toJsonValue(m_replicated_storage_bytes));
    }
    if (m_rescanned_storage_bytes_isSet) {
        obj.insert(QString("rescannedStorageBytes"), ::OpenAPI::toJsonValue(m_rescanned_storage_bytes));
    }
    if (m_total_storage_bytes_isSet) {
        obj.insert(QString("totalStorageBytes"), ::OpenAPI::toJsonValue(m_total_storage_bytes));
    }
    return obj;
}

qint32 OAIDataReplicationInfoReplicatedDisk::getBackloggedStorageBytes() const {
    return m_backlogged_storage_bytes;
}
void OAIDataReplicationInfoReplicatedDisk::setBackloggedStorageBytes(const qint32 &backlogged_storage_bytes) {
    m_backlogged_storage_bytes = backlogged_storage_bytes;
    m_backlogged_storage_bytes_isSet = true;
}

bool OAIDataReplicationInfoReplicatedDisk::is_backlogged_storage_bytes_Set() const{
    return m_backlogged_storage_bytes_isSet;
}

bool OAIDataReplicationInfoReplicatedDisk::is_backlogged_storage_bytes_Valid() const{
    return m_backlogged_storage_bytes_isValid;
}

QString OAIDataReplicationInfoReplicatedDisk::getDeviceName() const {
    return m_device_name;
}
void OAIDataReplicationInfoReplicatedDisk::setDeviceName(const QString &device_name) {
    m_device_name = device_name;
    m_device_name_isSet = true;
}

bool OAIDataReplicationInfoReplicatedDisk::is_device_name_Set() const{
    return m_device_name_isSet;
}

bool OAIDataReplicationInfoReplicatedDisk::is_device_name_Valid() const{
    return m_device_name_isValid;
}

qint32 OAIDataReplicationInfoReplicatedDisk::getReplicatedStorageBytes() const {
    return m_replicated_storage_bytes;
}
void OAIDataReplicationInfoReplicatedDisk::setReplicatedStorageBytes(const qint32 &replicated_storage_bytes) {
    m_replicated_storage_bytes = replicated_storage_bytes;
    m_replicated_storage_bytes_isSet = true;
}

bool OAIDataReplicationInfoReplicatedDisk::is_replicated_storage_bytes_Set() const{
    return m_replicated_storage_bytes_isSet;
}

bool OAIDataReplicationInfoReplicatedDisk::is_replicated_storage_bytes_Valid() const{
    return m_replicated_storage_bytes_isValid;
}

qint32 OAIDataReplicationInfoReplicatedDisk::getRescannedStorageBytes() const {
    return m_rescanned_storage_bytes;
}
void OAIDataReplicationInfoReplicatedDisk::setRescannedStorageBytes(const qint32 &rescanned_storage_bytes) {
    m_rescanned_storage_bytes = rescanned_storage_bytes;
    m_rescanned_storage_bytes_isSet = true;
}

bool OAIDataReplicationInfoReplicatedDisk::is_rescanned_storage_bytes_Set() const{
    return m_rescanned_storage_bytes_isSet;
}

bool OAIDataReplicationInfoReplicatedDisk::is_rescanned_storage_bytes_Valid() const{
    return m_rescanned_storage_bytes_isValid;
}

qint32 OAIDataReplicationInfoReplicatedDisk::getTotalStorageBytes() const {
    return m_total_storage_bytes;
}
void OAIDataReplicationInfoReplicatedDisk::setTotalStorageBytes(const qint32 &total_storage_bytes) {
    m_total_storage_bytes = total_storage_bytes;
    m_total_storage_bytes_isSet = true;
}

bool OAIDataReplicationInfoReplicatedDisk::is_total_storage_bytes_Set() const{
    return m_total_storage_bytes_isSet;
}

bool OAIDataReplicationInfoReplicatedDisk::is_total_storage_bytes_Valid() const{
    return m_total_storage_bytes_isValid;
}

bool OAIDataReplicationInfoReplicatedDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backlogged_storage_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replicated_storage_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rescanned_storage_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_storage_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataReplicationInfoReplicatedDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
