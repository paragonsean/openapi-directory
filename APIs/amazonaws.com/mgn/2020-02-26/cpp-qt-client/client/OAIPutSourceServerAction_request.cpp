/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPutSourceServerAction_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPutSourceServerAction_request::OAIPutSourceServerAction_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPutSourceServerAction_request::OAIPutSourceServerAction_request() {
    this->initializeModel();
}

OAIPutSourceServerAction_request::~OAIPutSourceServerAction_request() {}

void OAIPutSourceServerAction_request::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_action_id_isSet = false;
    m_action_id_isValid = false;

    m_action_name_isSet = false;
    m_action_name_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_identifier_isSet = false;
    m_document_identifier_isValid = false;

    m_document_version_isSet = false;
    m_document_version_isValid = false;

    m_external_parameters_isSet = false;
    m_external_parameters_isValid = false;

    m_must_succeed_for_cutover_isSet = false;
    m_must_succeed_for_cutover_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_source_server_id_isSet = false;
    m_source_server_id_isValid = false;

    m_timeout_seconds_isSet = false;
    m_timeout_seconds_isValid = false;
}

void OAIPutSourceServerAction_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPutSourceServerAction_request::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountID")]);
    m_account_id_isSet = !json[QString("accountID")].isNull() && m_account_id_isValid;

    m_action_id_isValid = ::OpenAPI::fromJsonValue(m_action_id, json[QString("actionID")]);
    m_action_id_isSet = !json[QString("actionID")].isNull() && m_action_id_isValid;

    m_action_name_isValid = ::OpenAPI::fromJsonValue(m_action_name, json[QString("actionName")]);
    m_action_name_isSet = !json[QString("actionName")].isNull() && m_action_name_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_identifier_isValid = ::OpenAPI::fromJsonValue(m_document_identifier, json[QString("documentIdentifier")]);
    m_document_identifier_isSet = !json[QString("documentIdentifier")].isNull() && m_document_identifier_isValid;

    m_document_version_isValid = ::OpenAPI::fromJsonValue(m_document_version, json[QString("documentVersion")]);
    m_document_version_isSet = !json[QString("documentVersion")].isNull() && m_document_version_isValid;

    m_external_parameters_isValid = ::OpenAPI::fromJsonValue(m_external_parameters, json[QString("externalParameters")]);
    m_external_parameters_isSet = !json[QString("externalParameters")].isNull() && m_external_parameters_isValid;

    m_must_succeed_for_cutover_isValid = ::OpenAPI::fromJsonValue(m_must_succeed_for_cutover, json[QString("mustSucceedForCutover")]);
    m_must_succeed_for_cutover_isSet = !json[QString("mustSucceedForCutover")].isNull() && m_must_succeed_for_cutover_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    if(json["parameters"].isObject()){
        auto varmap = json["parameters"].toObject().toVariantMap();
        m_parameters_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<OAISsmParameterStoreParameter> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_parameters_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_parameters_isSet &= !jval.isNull() && m_parameters_isValid;
                m_parameters.insert(m_parameters.end(), val, item);
            }
        }
    }

    m_source_server_id_isValid = ::OpenAPI::fromJsonValue(m_source_server_id, json[QString("sourceServerID")]);
    m_source_server_id_isSet = !json[QString("sourceServerID")].isNull() && m_source_server_id_isValid;

    m_timeout_seconds_isValid = ::OpenAPI::fromJsonValue(m_timeout_seconds, json[QString("timeoutSeconds")]);
    m_timeout_seconds_isSet = !json[QString("timeoutSeconds")].isNull() && m_timeout_seconds_isValid;
}

QString OAIPutSourceServerAction_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPutSourceServerAction_request::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountID"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_action_id_isSet) {
        obj.insert(QString("actionID"), ::OpenAPI::toJsonValue(m_action_id));
    }
    if (m_action_name_isSet) {
        obj.insert(QString("actionName"), ::OpenAPI::toJsonValue(m_action_name));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_identifier_isSet) {
        obj.insert(QString("documentIdentifier"), ::OpenAPI::toJsonValue(m_document_identifier));
    }
    if (m_document_version_isSet) {
        obj.insert(QString("documentVersion"), ::OpenAPI::toJsonValue(m_document_version));
    }
    if (m_external_parameters.size() > 0) {
        obj.insert(QString("externalParameters"), ::OpenAPI::toJsonValue(m_external_parameters));
    }
    if (m_must_succeed_for_cutover_isSet) {
        obj.insert(QString("mustSucceedForCutover"), ::OpenAPI::toJsonValue(m_must_succeed_for_cutover));
    }
    if (m_order_isSet) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_parameters.size() > 0) {
        
        obj.insert(QString("parameters"), toJsonValue(m_parameters));
    }
    if (m_source_server_id_isSet) {
        obj.insert(QString("sourceServerID"), ::OpenAPI::toJsonValue(m_source_server_id));
    }
    if (m_timeout_seconds_isSet) {
        obj.insert(QString("timeoutSeconds"), ::OpenAPI::toJsonValue(m_timeout_seconds));
    }
    return obj;
}

QString OAIPutSourceServerAction_request::getAccountId() const {
    return m_account_id;
}
void OAIPutSourceServerAction_request::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIPutSourceServerAction_request::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIPutSourceServerAction_request::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIPutSourceServerAction_request::getActionId() const {
    return m_action_id;
}
void OAIPutSourceServerAction_request::setActionId(const QString &action_id) {
    m_action_id = action_id;
    m_action_id_isSet = true;
}

bool OAIPutSourceServerAction_request::is_action_id_Set() const{
    return m_action_id_isSet;
}

bool OAIPutSourceServerAction_request::is_action_id_Valid() const{
    return m_action_id_isValid;
}

QString OAIPutSourceServerAction_request::getActionName() const {
    return m_action_name;
}
void OAIPutSourceServerAction_request::setActionName(const QString &action_name) {
    m_action_name = action_name;
    m_action_name_isSet = true;
}

bool OAIPutSourceServerAction_request::is_action_name_Set() const{
    return m_action_name_isSet;
}

bool OAIPutSourceServerAction_request::is_action_name_Valid() const{
    return m_action_name_isValid;
}

bool OAIPutSourceServerAction_request::isActive() const {
    return m_active;
}
void OAIPutSourceServerAction_request::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIPutSourceServerAction_request::is_active_Set() const{
    return m_active_isSet;
}

bool OAIPutSourceServerAction_request::is_active_Valid() const{
    return m_active_isValid;
}

QString OAIPutSourceServerAction_request::getCategory() const {
    return m_category;
}
void OAIPutSourceServerAction_request::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPutSourceServerAction_request::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPutSourceServerAction_request::is_category_Valid() const{
    return m_category_isValid;
}

QString OAIPutSourceServerAction_request::getDescription() const {
    return m_description;
}
void OAIPutSourceServerAction_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPutSourceServerAction_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPutSourceServerAction_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPutSourceServerAction_request::getDocumentIdentifier() const {
    return m_document_identifier;
}
void OAIPutSourceServerAction_request::setDocumentIdentifier(const QString &document_identifier) {
    m_document_identifier = document_identifier;
    m_document_identifier_isSet = true;
}

bool OAIPutSourceServerAction_request::is_document_identifier_Set() const{
    return m_document_identifier_isSet;
}

bool OAIPutSourceServerAction_request::is_document_identifier_Valid() const{
    return m_document_identifier_isValid;
}

QString OAIPutSourceServerAction_request::getDocumentVersion() const {
    return m_document_version;
}
void OAIPutSourceServerAction_request::setDocumentVersion(const QString &document_version) {
    m_document_version = document_version;
    m_document_version_isSet = true;
}

bool OAIPutSourceServerAction_request::is_document_version_Set() const{
    return m_document_version_isSet;
}

bool OAIPutSourceServerAction_request::is_document_version_Valid() const{
    return m_document_version_isValid;
}

QMap<QString, OAISsmExternalParameter> OAIPutSourceServerAction_request::getExternalParameters() const {
    return m_external_parameters;
}
void OAIPutSourceServerAction_request::setExternalParameters(const QMap<QString, OAISsmExternalParameter> &external_parameters) {
    m_external_parameters = external_parameters;
    m_external_parameters_isSet = true;
}

bool OAIPutSourceServerAction_request::is_external_parameters_Set() const{
    return m_external_parameters_isSet;
}

bool OAIPutSourceServerAction_request::is_external_parameters_Valid() const{
    return m_external_parameters_isValid;
}

bool OAIPutSourceServerAction_request::isMustSucceedForCutover() const {
    return m_must_succeed_for_cutover;
}
void OAIPutSourceServerAction_request::setMustSucceedForCutover(const bool &must_succeed_for_cutover) {
    m_must_succeed_for_cutover = must_succeed_for_cutover;
    m_must_succeed_for_cutover_isSet = true;
}

bool OAIPutSourceServerAction_request::is_must_succeed_for_cutover_Set() const{
    return m_must_succeed_for_cutover_isSet;
}

bool OAIPutSourceServerAction_request::is_must_succeed_for_cutover_Valid() const{
    return m_must_succeed_for_cutover_isValid;
}

qint32 OAIPutSourceServerAction_request::getOrder() const {
    return m_order;
}
void OAIPutSourceServerAction_request::setOrder(const qint32 &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIPutSourceServerAction_request::is_order_Set() const{
    return m_order_isSet;
}

bool OAIPutSourceServerAction_request::is_order_Valid() const{
    return m_order_isValid;
}

QMap<QString, QList> OAIPutSourceServerAction_request::getParameters() const {
    return m_parameters;
}
void OAIPutSourceServerAction_request::setParameters(const QMap<QString, QList> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIPutSourceServerAction_request::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIPutSourceServerAction_request::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIPutSourceServerAction_request::getSourceServerId() const {
    return m_source_server_id;
}
void OAIPutSourceServerAction_request::setSourceServerId(const QString &source_server_id) {
    m_source_server_id = source_server_id;
    m_source_server_id_isSet = true;
}

bool OAIPutSourceServerAction_request::is_source_server_id_Set() const{
    return m_source_server_id_isSet;
}

bool OAIPutSourceServerAction_request::is_source_server_id_Valid() const{
    return m_source_server_id_isValid;
}

qint32 OAIPutSourceServerAction_request::getTimeoutSeconds() const {
    return m_timeout_seconds;
}
void OAIPutSourceServerAction_request::setTimeoutSeconds(const qint32 &timeout_seconds) {
    m_timeout_seconds = timeout_seconds;
    m_timeout_seconds_isSet = true;
}

bool OAIPutSourceServerAction_request::is_timeout_seconds_Set() const{
    return m_timeout_seconds_isSet;
}

bool OAIPutSourceServerAction_request::is_timeout_seconds_Valid() const{
    return m_timeout_seconds_isValid;
}

bool OAIPutSourceServerAction_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_action_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_must_succeed_for_cutover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPutSourceServerAction_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_id_isValid && m_action_name_isValid && m_document_identifier_isValid && m_order_isValid && m_source_server_id_isValid && true;
}

} // namespace OpenAPI
