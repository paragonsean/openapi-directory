/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceServer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceServer::OAISourceServer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceServer::OAISourceServer() {
    this->initializeModel();
}

OAISourceServer::~OAISourceServer() {}

void OAISourceServer::initializeModel() {

    m_application_id_isSet = false;
    m_application_id_isValid = false;

    m_arn_isSet = false;
    m_arn_isValid = false;

    m_data_replication_info_isSet = false;
    m_data_replication_info_isValid = false;

    m_fqdn_for_action_framework_isSet = false;
    m_fqdn_for_action_framework_isValid = false;

    m_is_archived_isSet = false;
    m_is_archived_isValid = false;

    m_launched_instance_isSet = false;
    m_launched_instance_isValid = false;

    m_life_cycle_isSet = false;
    m_life_cycle_isValid = false;

    m_replication_type_isSet = false;
    m_replication_type_isValid = false;

    m_source_properties_isSet = false;
    m_source_properties_isValid = false;

    m_source_server_id_isSet = false;
    m_source_server_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_user_provided_id_isSet = false;
    m_user_provided_id_isValid = false;

    m_vcenter_client_id_isSet = false;
    m_vcenter_client_id_isValid = false;
}

void OAISourceServer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceServer::fromJsonObject(QJsonObject json) {

    m_application_id_isValid = ::OpenAPI::fromJsonValue(m_application_id, json[QString("applicationID")]);
    m_application_id_isSet = !json[QString("applicationID")].isNull() && m_application_id_isValid;

    m_arn_isValid = ::OpenAPI::fromJsonValue(m_arn, json[QString("arn")]);
    m_arn_isSet = !json[QString("arn")].isNull() && m_arn_isValid;

    m_data_replication_info_isValid = ::OpenAPI::fromJsonValue(m_data_replication_info, json[QString("dataReplicationInfo")]);
    m_data_replication_info_isSet = !json[QString("dataReplicationInfo")].isNull() && m_data_replication_info_isValid;

    m_fqdn_for_action_framework_isValid = ::OpenAPI::fromJsonValue(m_fqdn_for_action_framework, json[QString("fqdnForActionFramework")]);
    m_fqdn_for_action_framework_isSet = !json[QString("fqdnForActionFramework")].isNull() && m_fqdn_for_action_framework_isValid;

    m_is_archived_isValid = ::OpenAPI::fromJsonValue(m_is_archived, json[QString("isArchived")]);
    m_is_archived_isSet = !json[QString("isArchived")].isNull() && m_is_archived_isValid;

    m_launched_instance_isValid = ::OpenAPI::fromJsonValue(m_launched_instance, json[QString("launchedInstance")]);
    m_launched_instance_isSet = !json[QString("launchedInstance")].isNull() && m_launched_instance_isValid;

    m_life_cycle_isValid = ::OpenAPI::fromJsonValue(m_life_cycle, json[QString("lifeCycle")]);
    m_life_cycle_isSet = !json[QString("lifeCycle")].isNull() && m_life_cycle_isValid;

    m_replication_type_isValid = ::OpenAPI::fromJsonValue(m_replication_type, json[QString("replicationType")]);
    m_replication_type_isSet = !json[QString("replicationType")].isNull() && m_replication_type_isValid;

    m_source_properties_isValid = ::OpenAPI::fromJsonValue(m_source_properties, json[QString("sourceProperties")]);
    m_source_properties_isSet = !json[QString("sourceProperties")].isNull() && m_source_properties_isValid;

    m_source_server_id_isValid = ::OpenAPI::fromJsonValue(m_source_server_id, json[QString("sourceServerID")]);
    m_source_server_id_isSet = !json[QString("sourceServerID")].isNull() && m_source_server_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_user_provided_id_isValid = ::OpenAPI::fromJsonValue(m_user_provided_id, json[QString("userProvidedID")]);
    m_user_provided_id_isSet = !json[QString("userProvidedID")].isNull() && m_user_provided_id_isValid;

    m_vcenter_client_id_isValid = ::OpenAPI::fromJsonValue(m_vcenter_client_id, json[QString("vcenterClientID")]);
    m_vcenter_client_id_isSet = !json[QString("vcenterClientID")].isNull() && m_vcenter_client_id_isValid;
}

QString OAISourceServer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceServer::asJsonObject() const {
    QJsonObject obj;
    if (m_application_id_isSet) {
        obj.insert(QString("applicationID"), ::OpenAPI::toJsonValue(m_application_id));
    }
    if (m_arn_isSet) {
        obj.insert(QString("arn"), ::OpenAPI::toJsonValue(m_arn));
    }
    if (m_data_replication_info.isSet()) {
        obj.insert(QString("dataReplicationInfo"), ::OpenAPI::toJsonValue(m_data_replication_info));
    }
    if (m_fqdn_for_action_framework_isSet) {
        obj.insert(QString("fqdnForActionFramework"), ::OpenAPI::toJsonValue(m_fqdn_for_action_framework));
    }
    if (m_is_archived_isSet) {
        obj.insert(QString("isArchived"), ::OpenAPI::toJsonValue(m_is_archived));
    }
    if (m_launched_instance.isSet()) {
        obj.insert(QString("launchedInstance"), ::OpenAPI::toJsonValue(m_launched_instance));
    }
    if (m_life_cycle.isSet()) {
        obj.insert(QString("lifeCycle"), ::OpenAPI::toJsonValue(m_life_cycle));
    }
    if (m_replication_type.isSet()) {
        obj.insert(QString("replicationType"), ::OpenAPI::toJsonValue(m_replication_type));
    }
    if (m_source_properties.isSet()) {
        obj.insert(QString("sourceProperties"), ::OpenAPI::toJsonValue(m_source_properties));
    }
    if (m_source_server_id_isSet) {
        obj.insert(QString("sourceServerID"), ::OpenAPI::toJsonValue(m_source_server_id));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_user_provided_id_isSet) {
        obj.insert(QString("userProvidedID"), ::OpenAPI::toJsonValue(m_user_provided_id));
    }
    if (m_vcenter_client_id_isSet) {
        obj.insert(QString("vcenterClientID"), ::OpenAPI::toJsonValue(m_vcenter_client_id));
    }
    return obj;
}

QString OAISourceServer::getApplicationId() const {
    return m_application_id;
}
void OAISourceServer::setApplicationId(const QString &application_id) {
    m_application_id = application_id;
    m_application_id_isSet = true;
}

bool OAISourceServer::is_application_id_Set() const{
    return m_application_id_isSet;
}

bool OAISourceServer::is_application_id_Valid() const{
    return m_application_id_isValid;
}

QString OAISourceServer::getArn() const {
    return m_arn;
}
void OAISourceServer::setArn(const QString &arn) {
    m_arn = arn;
    m_arn_isSet = true;
}

bool OAISourceServer::is_arn_Set() const{
    return m_arn_isSet;
}

bool OAISourceServer::is_arn_Valid() const{
    return m_arn_isValid;
}

OAISourceServer_dataReplicationInfo OAISourceServer::getDataReplicationInfo() const {
    return m_data_replication_info;
}
void OAISourceServer::setDataReplicationInfo(const OAISourceServer_dataReplicationInfo &data_replication_info) {
    m_data_replication_info = data_replication_info;
    m_data_replication_info_isSet = true;
}

bool OAISourceServer::is_data_replication_info_Set() const{
    return m_data_replication_info_isSet;
}

bool OAISourceServer::is_data_replication_info_Valid() const{
    return m_data_replication_info_isValid;
}

QString OAISourceServer::getFqdnForActionFramework() const {
    return m_fqdn_for_action_framework;
}
void OAISourceServer::setFqdnForActionFramework(const QString &fqdn_for_action_framework) {
    m_fqdn_for_action_framework = fqdn_for_action_framework;
    m_fqdn_for_action_framework_isSet = true;
}

bool OAISourceServer::is_fqdn_for_action_framework_Set() const{
    return m_fqdn_for_action_framework_isSet;
}

bool OAISourceServer::is_fqdn_for_action_framework_Valid() const{
    return m_fqdn_for_action_framework_isValid;
}

bool OAISourceServer::getIsArchived() const {
    return m_is_archived;
}
void OAISourceServer::setIsArchived(const bool &is_archived) {
    m_is_archived = is_archived;
    m_is_archived_isSet = true;
}

bool OAISourceServer::is_is_archived_Set() const{
    return m_is_archived_isSet;
}

bool OAISourceServer::is_is_archived_Valid() const{
    return m_is_archived_isValid;
}

OAISourceServer_launchedInstance OAISourceServer::getLaunchedInstance() const {
    return m_launched_instance;
}
void OAISourceServer::setLaunchedInstance(const OAISourceServer_launchedInstance &launched_instance) {
    m_launched_instance = launched_instance;
    m_launched_instance_isSet = true;
}

bool OAISourceServer::is_launched_instance_Set() const{
    return m_launched_instance_isSet;
}

bool OAISourceServer::is_launched_instance_Valid() const{
    return m_launched_instance_isValid;
}

OAISourceServer_lifeCycle OAISourceServer::getLifeCycle() const {
    return m_life_cycle;
}
void OAISourceServer::setLifeCycle(const OAISourceServer_lifeCycle &life_cycle) {
    m_life_cycle = life_cycle;
    m_life_cycle_isSet = true;
}

bool OAISourceServer::is_life_cycle_Set() const{
    return m_life_cycle_isSet;
}

bool OAISourceServer::is_life_cycle_Valid() const{
    return m_life_cycle_isValid;
}

OAIReplicationType OAISourceServer::getReplicationType() const {
    return m_replication_type;
}
void OAISourceServer::setReplicationType(const OAIReplicationType &replication_type) {
    m_replication_type = replication_type;
    m_replication_type_isSet = true;
}

bool OAISourceServer::is_replication_type_Set() const{
    return m_replication_type_isSet;
}

bool OAISourceServer::is_replication_type_Valid() const{
    return m_replication_type_isValid;
}

OAISourceServer_sourceProperties OAISourceServer::getSourceProperties() const {
    return m_source_properties;
}
void OAISourceServer::setSourceProperties(const OAISourceServer_sourceProperties &source_properties) {
    m_source_properties = source_properties;
    m_source_properties_isSet = true;
}

bool OAISourceServer::is_source_properties_Set() const{
    return m_source_properties_isSet;
}

bool OAISourceServer::is_source_properties_Valid() const{
    return m_source_properties_isValid;
}

QString OAISourceServer::getSourceServerId() const {
    return m_source_server_id;
}
void OAISourceServer::setSourceServerId(const QString &source_server_id) {
    m_source_server_id = source_server_id;
    m_source_server_id_isSet = true;
}

bool OAISourceServer::is_source_server_id_Set() const{
    return m_source_server_id_isSet;
}

bool OAISourceServer::is_source_server_id_Valid() const{
    return m_source_server_id_isValid;
}

QMap OAISourceServer::getTags() const {
    return m_tags;
}
void OAISourceServer::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISourceServer::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISourceServer::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAISourceServer::getUserProvidedId() const {
    return m_user_provided_id;
}
void OAISourceServer::setUserProvidedId(const QString &user_provided_id) {
    m_user_provided_id = user_provided_id;
    m_user_provided_id_isSet = true;
}

bool OAISourceServer::is_user_provided_id_Set() const{
    return m_user_provided_id_isSet;
}

bool OAISourceServer::is_user_provided_id_Valid() const{
    return m_user_provided_id_isValid;
}

QString OAISourceServer::getVcenterClientId() const {
    return m_vcenter_client_id;
}
void OAISourceServer::setVcenterClientId(const QString &vcenter_client_id) {
    m_vcenter_client_id = vcenter_client_id;
    m_vcenter_client_id_isSet = true;
}

bool OAISourceServer::is_vcenter_client_id_Set() const{
    return m_vcenter_client_id_isSet;
}

bool OAISourceServer::is_vcenter_client_id_Valid() const{
    return m_vcenter_client_id_isValid;
}

bool OAISourceServer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_replication_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fqdn_for_action_framework_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launched_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_life_cycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_provided_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceServer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
