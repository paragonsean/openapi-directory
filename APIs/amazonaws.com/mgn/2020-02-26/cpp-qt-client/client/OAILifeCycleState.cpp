/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILifeCycleState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILifeCycleState::OAILifeCycleState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILifeCycleState::OAILifeCycleState() {
    this->initializeModel();
}

OAILifeCycleState::~OAILifeCycleState() {}

void OAILifeCycleState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILifeCycleState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILifeCycleState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("STOPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::STOPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NOT_READY", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::NOT_READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_TEST", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::READY_FOR_TEST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TESTING", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::TESTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("READY_FOR_CUTOVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::READY_FOR_CUTOVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUTTING_OVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::CUTTING_OVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CUTOVER", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::CUTOVER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISCONNECTED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::DISCONNECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DISCOVERED", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::DISCOVERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PENDING_INSTALLATION", Qt::CaseInsensitive) == 0) {
        m_value = eOAILifeCycleState::PENDING_INSTALLATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILifeCycleState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILifeCycleState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILifeCycleState::STOPPED:
            val = "STOPPED";
            break;
        case eOAILifeCycleState::NOT_READY:
            val = "NOT_READY";
            break;
        case eOAILifeCycleState::READY_FOR_TEST:
            val = "READY_FOR_TEST";
            break;
        case eOAILifeCycleState::TESTING:
            val = "TESTING";
            break;
        case eOAILifeCycleState::READY_FOR_CUTOVER:
            val = "READY_FOR_CUTOVER";
            break;
        case eOAILifeCycleState::CUTTING_OVER:
            val = "CUTTING_OVER";
            break;
        case eOAILifeCycleState::CUTOVER:
            val = "CUTOVER";
            break;
        case eOAILifeCycleState::DISCONNECTED:
            val = "DISCONNECTED";
            break;
        case eOAILifeCycleState::DISCOVERED:
            val = "DISCOVERED";
            break;
        case eOAILifeCycleState::PENDING_INSTALLATION:
            val = "PENDING_INSTALLATION";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILifeCycleState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILifeCycleState::eOAILifeCycleState OAILifeCycleState::getValue() const {
    return m_value;
}

void OAILifeCycleState::setValue(const OAILifeCycleState::eOAILifeCycleState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILifeCycleState::isSet() const {
    
    return m_value_isSet;
}

bool OAILifeCycleState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
