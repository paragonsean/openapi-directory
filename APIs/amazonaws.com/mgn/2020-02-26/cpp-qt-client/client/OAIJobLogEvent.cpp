/**
 * Application Migration Service
 * The Application Migration Service service.
 *
 * The version of the OpenAPI document: 2020-02-26
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobLogEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobLogEvent::OAIJobLogEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobLogEvent::OAIJobLogEvent() {
    this->initializeModel();
}

OAIJobLogEvent::~OAIJobLogEvent() {}

void OAIJobLogEvent::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJobLogEvent::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJobLogEvent::fromJson(QString jsonString) {
    
    if ( jsonString.compare("JOB_START", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::JOB_START;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SERVER_SKIPPED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::SERVER_SKIPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLEANUP_START", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::CLEANUP_START;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLEANUP_END", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::CLEANUP_END;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CLEANUP_FAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::CLEANUP_FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SNAPSHOT_START", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::SNAPSHOT_START;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SNAPSHOT_END", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::SNAPSHOT_END;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SNAPSHOT_FAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::SNAPSHOT_FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USING_PREVIOUS_SNAPSHOT", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::USING_PREVIOUS_SNAPSHOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONVERSION_START", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::CONVERSION_START;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONVERSION_END", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::CONVERSION_END;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CONVERSION_FAIL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::CONVERSION_FAIL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_START", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::LAUNCH_START;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LAUNCH_FAILED", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::LAUNCH_FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JOB_CANCEL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::JOB_CANCEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("JOB_END", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobLogEvent::JOB_END;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJobLogEvent::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJobLogEvent::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJobLogEvent::JOB_START:
            val = "JOB_START";
            break;
        case eOAIJobLogEvent::SERVER_SKIPPED:
            val = "SERVER_SKIPPED";
            break;
        case eOAIJobLogEvent::CLEANUP_START:
            val = "CLEANUP_START";
            break;
        case eOAIJobLogEvent::CLEANUP_END:
            val = "CLEANUP_END";
            break;
        case eOAIJobLogEvent::CLEANUP_FAIL:
            val = "CLEANUP_FAIL";
            break;
        case eOAIJobLogEvent::SNAPSHOT_START:
            val = "SNAPSHOT_START";
            break;
        case eOAIJobLogEvent::SNAPSHOT_END:
            val = "SNAPSHOT_END";
            break;
        case eOAIJobLogEvent::SNAPSHOT_FAIL:
            val = "SNAPSHOT_FAIL";
            break;
        case eOAIJobLogEvent::USING_PREVIOUS_SNAPSHOT:
            val = "USING_PREVIOUS_SNAPSHOT";
            break;
        case eOAIJobLogEvent::CONVERSION_START:
            val = "CONVERSION_START";
            break;
        case eOAIJobLogEvent::CONVERSION_END:
            val = "CONVERSION_END";
            break;
        case eOAIJobLogEvent::CONVERSION_FAIL:
            val = "CONVERSION_FAIL";
            break;
        case eOAIJobLogEvent::LAUNCH_START:
            val = "LAUNCH_START";
            break;
        case eOAIJobLogEvent::LAUNCH_FAILED:
            val = "LAUNCH_FAILED";
            break;
        case eOAIJobLogEvent::JOB_CANCEL:
            val = "JOB_CANCEL";
            break;
        case eOAIJobLogEvent::JOB_END:
            val = "JOB_END";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJobLogEvent::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJobLogEvent::eOAIJobLogEvent OAIJobLogEvent::getValue() const {
    return m_value;
}

void OAIJobLogEvent::setValue(const OAIJobLogEvent::eOAIJobLogEvent& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJobLogEvent::isSet() const {
    
    return m_value_isSet;
}

bool OAIJobLogEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
