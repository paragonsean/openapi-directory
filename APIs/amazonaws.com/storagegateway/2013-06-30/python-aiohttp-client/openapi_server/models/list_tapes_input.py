# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListTapesInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tape_arns: List[str]=None, marker: str=None, limit: int=None):
        """ListTapesInput - a model defined in OpenAPI

        :param tape_arns: The tape_arns of this ListTapesInput.
        :param marker: The marker of this ListTapesInput.
        :param limit: The limit of this ListTapesInput.
        """
        self.openapi_types = {
            'tape_arns': List[str],
            'marker': str,
            'limit': int
        }

        self.attribute_map = {
            'tape_arns': 'TapeARNs',
            'marker': 'Marker',
            'limit': 'Limit'
        }

        self._tape_arns = tape_arns
        self._marker = marker
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTapesInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListTapesInput of this ListTapesInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tape_arns(self):
        """Gets the tape_arns of this ListTapesInput.

        The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.

        :return: The tape_arns of this ListTapesInput.
        :rtype: List[str]
        """
        return self._tape_arns

    @tape_arns.setter
    def tape_arns(self, tape_arns):
        """Sets the tape_arns of this ListTapesInput.

        The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.

        :param tape_arns: The tape_arns of this ListTapesInput.
        :type tape_arns: List[str]
        """

        self._tape_arns = tape_arns

    @property
    def marker(self):
        """Gets the marker of this ListTapesInput.


        :return: The marker of this ListTapesInput.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker):
        """Sets the marker of this ListTapesInput.


        :param marker: The marker of this ListTapesInput.
        :type marker: str
        """

        self._marker = marker

    @property
    def limit(self):
        """Gets the limit of this ListTapesInput.


        :return: The limit of this ListTapesInput.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListTapesInput.


        :param limit: The limit of this ListTapesInput.
        :type limit: int
        """

        self._limit = limit
