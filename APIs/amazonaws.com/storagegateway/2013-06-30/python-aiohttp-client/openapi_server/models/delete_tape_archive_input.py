# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteTapeArchiveInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tape_arn: str=None, bypass_governance_retention: bool=None):
        """DeleteTapeArchiveInput - a model defined in OpenAPI

        :param tape_arn: The tape_arn of this DeleteTapeArchiveInput.
        :param bypass_governance_retention: The bypass_governance_retention of this DeleteTapeArchiveInput.
        """
        self.openapi_types = {
            'tape_arn': str,
            'bypass_governance_retention': bool
        }

        self.attribute_map = {
            'tape_arn': 'TapeARN',
            'bypass_governance_retention': 'BypassGovernanceRetention'
        }

        self._tape_arn = tape_arn
        self._bypass_governance_retention = bypass_governance_retention

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteTapeArchiveInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteTapeArchiveInput of this DeleteTapeArchiveInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tape_arn(self):
        """Gets the tape_arn of this DeleteTapeArchiveInput.


        :return: The tape_arn of this DeleteTapeArchiveInput.
        :rtype: str
        """
        return self._tape_arn

    @tape_arn.setter
    def tape_arn(self, tape_arn):
        """Sets the tape_arn of this DeleteTapeArchiveInput.


        :param tape_arn: The tape_arn of this DeleteTapeArchiveInput.
        :type tape_arn: str
        """
        if tape_arn is None:
            raise ValueError("Invalid value for `tape_arn`, must not be `None`")

        self._tape_arn = tape_arn

    @property
    def bypass_governance_retention(self):
        """Gets the bypass_governance_retention of this DeleteTapeArchiveInput.


        :return: The bypass_governance_retention of this DeleteTapeArchiveInput.
        :rtype: bool
        """
        return self._bypass_governance_retention

    @bypass_governance_retention.setter
    def bypass_governance_retention(self, bypass_governance_retention):
        """Sets the bypass_governance_retention of this DeleteTapeArchiveInput.


        :param bypass_governance_retention: The bypass_governance_retention of this DeleteTapeArchiveInput.
        :type bypass_governance_retention: bool
        """

        self._bypass_governance_retention = bypass_governance_retention
