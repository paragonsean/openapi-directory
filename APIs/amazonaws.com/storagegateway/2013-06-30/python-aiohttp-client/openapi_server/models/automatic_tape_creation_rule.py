# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AutomaticTapeCreationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tape_barcode_prefix: str=None, pool_id: str=None, tape_size_in_bytes: int=None, minimum_num_tapes: int=None, worm: bool=None):
        """AutomaticTapeCreationRule - a model defined in OpenAPI

        :param tape_barcode_prefix: The tape_barcode_prefix of this AutomaticTapeCreationRule.
        :param pool_id: The pool_id of this AutomaticTapeCreationRule.
        :param tape_size_in_bytes: The tape_size_in_bytes of this AutomaticTapeCreationRule.
        :param minimum_num_tapes: The minimum_num_tapes of this AutomaticTapeCreationRule.
        :param worm: The worm of this AutomaticTapeCreationRule.
        """
        self.openapi_types = {
            'tape_barcode_prefix': str,
            'pool_id': str,
            'tape_size_in_bytes': int,
            'minimum_num_tapes': int,
            'worm': bool
        }

        self.attribute_map = {
            'tape_barcode_prefix': 'TapeBarcodePrefix',
            'pool_id': 'PoolId',
            'tape_size_in_bytes': 'TapeSizeInBytes',
            'minimum_num_tapes': 'MinimumNumTapes',
            'worm': 'Worm'
        }

        self._tape_barcode_prefix = tape_barcode_prefix
        self._pool_id = pool_id
        self._tape_size_in_bytes = tape_size_in_bytes
        self._minimum_num_tapes = minimum_num_tapes
        self._worm = worm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AutomaticTapeCreationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AutomaticTapeCreationRule of this AutomaticTapeCreationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tape_barcode_prefix(self):
        """Gets the tape_barcode_prefix of this AutomaticTapeCreationRule.


        :return: The tape_barcode_prefix of this AutomaticTapeCreationRule.
        :rtype: str
        """
        return self._tape_barcode_prefix

    @tape_barcode_prefix.setter
    def tape_barcode_prefix(self, tape_barcode_prefix):
        """Sets the tape_barcode_prefix of this AutomaticTapeCreationRule.


        :param tape_barcode_prefix: The tape_barcode_prefix of this AutomaticTapeCreationRule.
        :type tape_barcode_prefix: str
        """
        if tape_barcode_prefix is None:
            raise ValueError("Invalid value for `tape_barcode_prefix`, must not be `None`")

        self._tape_barcode_prefix = tape_barcode_prefix

    @property
    def pool_id(self):
        """Gets the pool_id of this AutomaticTapeCreationRule.


        :return: The pool_id of this AutomaticTapeCreationRule.
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this AutomaticTapeCreationRule.


        :param pool_id: The pool_id of this AutomaticTapeCreationRule.
        :type pool_id: str
        """
        if pool_id is None:
            raise ValueError("Invalid value for `pool_id`, must not be `None`")

        self._pool_id = pool_id

    @property
    def tape_size_in_bytes(self):
        """Gets the tape_size_in_bytes of this AutomaticTapeCreationRule.


        :return: The tape_size_in_bytes of this AutomaticTapeCreationRule.
        :rtype: int
        """
        return self._tape_size_in_bytes

    @tape_size_in_bytes.setter
    def tape_size_in_bytes(self, tape_size_in_bytes):
        """Sets the tape_size_in_bytes of this AutomaticTapeCreationRule.


        :param tape_size_in_bytes: The tape_size_in_bytes of this AutomaticTapeCreationRule.
        :type tape_size_in_bytes: int
        """
        if tape_size_in_bytes is None:
            raise ValueError("Invalid value for `tape_size_in_bytes`, must not be `None`")

        self._tape_size_in_bytes = tape_size_in_bytes

    @property
    def minimum_num_tapes(self):
        """Gets the minimum_num_tapes of this AutomaticTapeCreationRule.


        :return: The minimum_num_tapes of this AutomaticTapeCreationRule.
        :rtype: int
        """
        return self._minimum_num_tapes

    @minimum_num_tapes.setter
    def minimum_num_tapes(self, minimum_num_tapes):
        """Sets the minimum_num_tapes of this AutomaticTapeCreationRule.


        :param minimum_num_tapes: The minimum_num_tapes of this AutomaticTapeCreationRule.
        :type minimum_num_tapes: int
        """
        if minimum_num_tapes is None:
            raise ValueError("Invalid value for `minimum_num_tapes`, must not be `None`")

        self._minimum_num_tapes = minimum_num_tapes

    @property
    def worm(self):
        """Gets the worm of this AutomaticTapeCreationRule.


        :return: The worm of this AutomaticTapeCreationRule.
        :rtype: bool
        """
        return self._worm

    @worm.setter
    def worm(self, worm):
        """Sets the worm of this AutomaticTapeCreationRule.


        :param worm: The worm of this AutomaticTapeCreationRule.
        :type worm: bool
        """

        self._worm = worm
