# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_environment import HostEnvironment
from openapi_server import util


class GatewayInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_id: str=None, gateway_arn: str=None, gateway_type: str=None, gateway_operational_state: str=None, gateway_name: str=None, ec2_instance_id: str=None, ec2_instance_region: str=None, host_environment: HostEnvironment=None, host_environment_id: str=None):
        """GatewayInfo - a model defined in OpenAPI

        :param gateway_id: The gateway_id of this GatewayInfo.
        :param gateway_arn: The gateway_arn of this GatewayInfo.
        :param gateway_type: The gateway_type of this GatewayInfo.
        :param gateway_operational_state: The gateway_operational_state of this GatewayInfo.
        :param gateway_name: The gateway_name of this GatewayInfo.
        :param ec2_instance_id: The ec2_instance_id of this GatewayInfo.
        :param ec2_instance_region: The ec2_instance_region of this GatewayInfo.
        :param host_environment: The host_environment of this GatewayInfo.
        :param host_environment_id: The host_environment_id of this GatewayInfo.
        """
        self.openapi_types = {
            'gateway_id': str,
            'gateway_arn': str,
            'gateway_type': str,
            'gateway_operational_state': str,
            'gateway_name': str,
            'ec2_instance_id': str,
            'ec2_instance_region': str,
            'host_environment': HostEnvironment,
            'host_environment_id': str
        }

        self.attribute_map = {
            'gateway_id': 'GatewayId',
            'gateway_arn': 'GatewayARN',
            'gateway_type': 'GatewayType',
            'gateway_operational_state': 'GatewayOperationalState',
            'gateway_name': 'GatewayName',
            'ec2_instance_id': 'Ec2InstanceId',
            'ec2_instance_region': 'Ec2InstanceRegion',
            'host_environment': 'HostEnvironment',
            'host_environment_id': 'HostEnvironmentId'
        }

        self._gateway_id = gateway_id
        self._gateway_arn = gateway_arn
        self._gateway_type = gateway_type
        self._gateway_operational_state = gateway_operational_state
        self._gateway_name = gateway_name
        self._ec2_instance_id = ec2_instance_id
        self._ec2_instance_region = ec2_instance_region
        self._host_environment = host_environment
        self._host_environment_id = host_environment_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayInfo of this GatewayInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_id(self):
        """Gets the gateway_id of this GatewayInfo.


        :return: The gateway_id of this GatewayInfo.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this GatewayInfo.


        :param gateway_id: The gateway_id of this GatewayInfo.
        :type gateway_id: str
        """

        self._gateway_id = gateway_id

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this GatewayInfo.


        :return: The gateway_arn of this GatewayInfo.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this GatewayInfo.


        :param gateway_arn: The gateway_arn of this GatewayInfo.
        :type gateway_arn: str
        """

        self._gateway_arn = gateway_arn

    @property
    def gateway_type(self):
        """Gets the gateway_type of this GatewayInfo.


        :return: The gateway_type of this GatewayInfo.
        :rtype: str
        """
        return self._gateway_type

    @gateway_type.setter
    def gateway_type(self, gateway_type):
        """Sets the gateway_type of this GatewayInfo.


        :param gateway_type: The gateway_type of this GatewayInfo.
        :type gateway_type: str
        """

        self._gateway_type = gateway_type

    @property
    def gateway_operational_state(self):
        """Gets the gateway_operational_state of this GatewayInfo.


        :return: The gateway_operational_state of this GatewayInfo.
        :rtype: str
        """
        return self._gateway_operational_state

    @gateway_operational_state.setter
    def gateway_operational_state(self, gateway_operational_state):
        """Sets the gateway_operational_state of this GatewayInfo.


        :param gateway_operational_state: The gateway_operational_state of this GatewayInfo.
        :type gateway_operational_state: str
        """

        self._gateway_operational_state = gateway_operational_state

    @property
    def gateway_name(self):
        """Gets the gateway_name of this GatewayInfo.


        :return: The gateway_name of this GatewayInfo.
        :rtype: str
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this GatewayInfo.


        :param gateway_name: The gateway_name of this GatewayInfo.
        :type gateway_name: str
        """

        self._gateway_name = gateway_name

    @property
    def ec2_instance_id(self):
        """Gets the ec2_instance_id of this GatewayInfo.


        :return: The ec2_instance_id of this GatewayInfo.
        :rtype: str
        """
        return self._ec2_instance_id

    @ec2_instance_id.setter
    def ec2_instance_id(self, ec2_instance_id):
        """Sets the ec2_instance_id of this GatewayInfo.


        :param ec2_instance_id: The ec2_instance_id of this GatewayInfo.
        :type ec2_instance_id: str
        """

        self._ec2_instance_id = ec2_instance_id

    @property
    def ec2_instance_region(self):
        """Gets the ec2_instance_region of this GatewayInfo.


        :return: The ec2_instance_region of this GatewayInfo.
        :rtype: str
        """
        return self._ec2_instance_region

    @ec2_instance_region.setter
    def ec2_instance_region(self, ec2_instance_region):
        """Sets the ec2_instance_region of this GatewayInfo.


        :param ec2_instance_region: The ec2_instance_region of this GatewayInfo.
        :type ec2_instance_region: str
        """

        self._ec2_instance_region = ec2_instance_region

    @property
    def host_environment(self):
        """Gets the host_environment of this GatewayInfo.


        :return: The host_environment of this GatewayInfo.
        :rtype: HostEnvironment
        """
        return self._host_environment

    @host_environment.setter
    def host_environment(self, host_environment):
        """Sets the host_environment of this GatewayInfo.


        :param host_environment: The host_environment of this GatewayInfo.
        :type host_environment: HostEnvironment
        """

        self._host_environment = host_environment

    @property
    def host_environment_id(self):
        """Gets the host_environment_id of this GatewayInfo.


        :return: The host_environment_id of this GatewayInfo.
        :rtype: str
        """
        return self._host_environment_id

    @host_environment_id.setter
    def host_environment_id(self, host_environment_id):
        """Sets the host_environment_id of this GatewayInfo.


        :param host_environment_id: The host_environment_id of this GatewayInfo.
        :type host_environment_id: str
        """

        self._host_environment_id = host_environment_id
