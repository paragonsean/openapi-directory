# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JoinDomainInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_arn: str=None, domain_name: str=None, organizational_unit: str=None, domain_controllers: List=None, timeout_in_seconds: int=None, user_name: str=None, password: str=None):
        """JoinDomainInput - a model defined in OpenAPI

        :param gateway_arn: The gateway_arn of this JoinDomainInput.
        :param domain_name: The domain_name of this JoinDomainInput.
        :param organizational_unit: The organizational_unit of this JoinDomainInput.
        :param domain_controllers: The domain_controllers of this JoinDomainInput.
        :param timeout_in_seconds: The timeout_in_seconds of this JoinDomainInput.
        :param user_name: The user_name of this JoinDomainInput.
        :param password: The password of this JoinDomainInput.
        """
        self.openapi_types = {
            'gateway_arn': str,
            'domain_name': str,
            'organizational_unit': str,
            'domain_controllers': List,
            'timeout_in_seconds': int,
            'user_name': str,
            'password': str
        }

        self.attribute_map = {
            'gateway_arn': 'GatewayARN',
            'domain_name': 'DomainName',
            'organizational_unit': 'OrganizationalUnit',
            'domain_controllers': 'DomainControllers',
            'timeout_in_seconds': 'TimeoutInSeconds',
            'user_name': 'UserName',
            'password': 'Password'
        }

        self._gateway_arn = gateway_arn
        self._domain_name = domain_name
        self._organizational_unit = organizational_unit
        self._domain_controllers = domain_controllers
        self._timeout_in_seconds = timeout_in_seconds
        self._user_name = user_name
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JoinDomainInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JoinDomainInput of this JoinDomainInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this JoinDomainInput.


        :return: The gateway_arn of this JoinDomainInput.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this JoinDomainInput.


        :param gateway_arn: The gateway_arn of this JoinDomainInput.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")

        self._gateway_arn = gateway_arn

    @property
    def domain_name(self):
        """Gets the domain_name of this JoinDomainInput.


        :return: The domain_name of this JoinDomainInput.
        :rtype: str
        """
        return self._domain_name

    @domain_name.setter
    def domain_name(self, domain_name):
        """Sets the domain_name of this JoinDomainInput.


        :param domain_name: The domain_name of this JoinDomainInput.
        :type domain_name: str
        """
        if domain_name is None:
            raise ValueError("Invalid value for `domain_name`, must not be `None`")

        self._domain_name = domain_name

    @property
    def organizational_unit(self):
        """Gets the organizational_unit of this JoinDomainInput.


        :return: The organizational_unit of this JoinDomainInput.
        :rtype: str
        """
        return self._organizational_unit

    @organizational_unit.setter
    def organizational_unit(self, organizational_unit):
        """Sets the organizational_unit of this JoinDomainInput.


        :param organizational_unit: The organizational_unit of this JoinDomainInput.
        :type organizational_unit: str
        """

        self._organizational_unit = organizational_unit

    @property
    def domain_controllers(self):
        """Gets the domain_controllers of this JoinDomainInput.


        :return: The domain_controllers of this JoinDomainInput.
        :rtype: List
        """
        return self._domain_controllers

    @domain_controllers.setter
    def domain_controllers(self, domain_controllers):
        """Sets the domain_controllers of this JoinDomainInput.


        :param domain_controllers: The domain_controllers of this JoinDomainInput.
        :type domain_controllers: List
        """

        self._domain_controllers = domain_controllers

    @property
    def timeout_in_seconds(self):
        """Gets the timeout_in_seconds of this JoinDomainInput.


        :return: The timeout_in_seconds of this JoinDomainInput.
        :rtype: int
        """
        return self._timeout_in_seconds

    @timeout_in_seconds.setter
    def timeout_in_seconds(self, timeout_in_seconds):
        """Sets the timeout_in_seconds of this JoinDomainInput.


        :param timeout_in_seconds: The timeout_in_seconds of this JoinDomainInput.
        :type timeout_in_seconds: int
        """

        self._timeout_in_seconds = timeout_in_seconds

    @property
    def user_name(self):
        """Gets the user_name of this JoinDomainInput.


        :return: The user_name of this JoinDomainInput.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this JoinDomainInput.


        :param user_name: The user_name of this JoinDomainInput.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")

        self._user_name = user_name

    @property
    def password(self):
        """Gets the password of this JoinDomainInput.


        :return: The password of this JoinDomainInput.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this JoinDomainInput.


        :param password: The password of this JoinDomainInput.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
