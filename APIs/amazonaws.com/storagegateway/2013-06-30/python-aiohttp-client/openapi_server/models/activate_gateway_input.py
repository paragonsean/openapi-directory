# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ActivateGatewayInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_key: str=None, gateway_name: str=None, gateway_timezone: str=None, gateway_region: str=None, gateway_type: str=None, tape_drive_type: str=None, medium_changer_type: str=None, tags: List=None):
        """ActivateGatewayInput - a model defined in OpenAPI

        :param activation_key: The activation_key of this ActivateGatewayInput.
        :param gateway_name: The gateway_name of this ActivateGatewayInput.
        :param gateway_timezone: The gateway_timezone of this ActivateGatewayInput.
        :param gateway_region: The gateway_region of this ActivateGatewayInput.
        :param gateway_type: The gateway_type of this ActivateGatewayInput.
        :param tape_drive_type: The tape_drive_type of this ActivateGatewayInput.
        :param medium_changer_type: The medium_changer_type of this ActivateGatewayInput.
        :param tags: The tags of this ActivateGatewayInput.
        """
        self.openapi_types = {
            'activation_key': str,
            'gateway_name': str,
            'gateway_timezone': str,
            'gateway_region': str,
            'gateway_type': str,
            'tape_drive_type': str,
            'medium_changer_type': str,
            'tags': List
        }

        self.attribute_map = {
            'activation_key': 'ActivationKey',
            'gateway_name': 'GatewayName',
            'gateway_timezone': 'GatewayTimezone',
            'gateway_region': 'GatewayRegion',
            'gateway_type': 'GatewayType',
            'tape_drive_type': 'TapeDriveType',
            'medium_changer_type': 'MediumChangerType',
            'tags': 'Tags'
        }

        self._activation_key = activation_key
        self._gateway_name = gateway_name
        self._gateway_timezone = gateway_timezone
        self._gateway_region = gateway_region
        self._gateway_type = gateway_type
        self._tape_drive_type = tape_drive_type
        self._medium_changer_type = medium_changer_type
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActivateGatewayInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActivateGatewayInput of this ActivateGatewayInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_key(self):
        """Gets the activation_key of this ActivateGatewayInput.


        :return: The activation_key of this ActivateGatewayInput.
        :rtype: str
        """
        return self._activation_key

    @activation_key.setter
    def activation_key(self, activation_key):
        """Sets the activation_key of this ActivateGatewayInput.


        :param activation_key: The activation_key of this ActivateGatewayInput.
        :type activation_key: str
        """
        if activation_key is None:
            raise ValueError("Invalid value for `activation_key`, must not be `None`")

        self._activation_key = activation_key

    @property
    def gateway_name(self):
        """Gets the gateway_name of this ActivateGatewayInput.


        :return: The gateway_name of this ActivateGatewayInput.
        :rtype: str
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this ActivateGatewayInput.


        :param gateway_name: The gateway_name of this ActivateGatewayInput.
        :type gateway_name: str
        """
        if gateway_name is None:
            raise ValueError("Invalid value for `gateway_name`, must not be `None`")

        self._gateway_name = gateway_name

    @property
    def gateway_timezone(self):
        """Gets the gateway_timezone of this ActivateGatewayInput.


        :return: The gateway_timezone of this ActivateGatewayInput.
        :rtype: str
        """
        return self._gateway_timezone

    @gateway_timezone.setter
    def gateway_timezone(self, gateway_timezone):
        """Sets the gateway_timezone of this ActivateGatewayInput.


        :param gateway_timezone: The gateway_timezone of this ActivateGatewayInput.
        :type gateway_timezone: str
        """
        if gateway_timezone is None:
            raise ValueError("Invalid value for `gateway_timezone`, must not be `None`")

        self._gateway_timezone = gateway_timezone

    @property
    def gateway_region(self):
        """Gets the gateway_region of this ActivateGatewayInput.


        :return: The gateway_region of this ActivateGatewayInput.
        :rtype: str
        """
        return self._gateway_region

    @gateway_region.setter
    def gateway_region(self, gateway_region):
        """Sets the gateway_region of this ActivateGatewayInput.


        :param gateway_region: The gateway_region of this ActivateGatewayInput.
        :type gateway_region: str
        """
        if gateway_region is None:
            raise ValueError("Invalid value for `gateway_region`, must not be `None`")

        self._gateway_region = gateway_region

    @property
    def gateway_type(self):
        """Gets the gateway_type of this ActivateGatewayInput.


        :return: The gateway_type of this ActivateGatewayInput.
        :rtype: str
        """
        return self._gateway_type

    @gateway_type.setter
    def gateway_type(self, gateway_type):
        """Sets the gateway_type of this ActivateGatewayInput.


        :param gateway_type: The gateway_type of this ActivateGatewayInput.
        :type gateway_type: str
        """

        self._gateway_type = gateway_type

    @property
    def tape_drive_type(self):
        """Gets the tape_drive_type of this ActivateGatewayInput.


        :return: The tape_drive_type of this ActivateGatewayInput.
        :rtype: str
        """
        return self._tape_drive_type

    @tape_drive_type.setter
    def tape_drive_type(self, tape_drive_type):
        """Sets the tape_drive_type of this ActivateGatewayInput.


        :param tape_drive_type: The tape_drive_type of this ActivateGatewayInput.
        :type tape_drive_type: str
        """

        self._tape_drive_type = tape_drive_type

    @property
    def medium_changer_type(self):
        """Gets the medium_changer_type of this ActivateGatewayInput.


        :return: The medium_changer_type of this ActivateGatewayInput.
        :rtype: str
        """
        return self._medium_changer_type

    @medium_changer_type.setter
    def medium_changer_type(self, medium_changer_type):
        """Sets the medium_changer_type of this ActivateGatewayInput.


        :param medium_changer_type: The medium_changer_type of this ActivateGatewayInput.
        :type medium_changer_type: str
        """

        self._medium_changer_type = medium_changer_type

    @property
    def tags(self):
        """Gets the tags of this ActivateGatewayInput.


        :return: The tags of this ActivateGatewayInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ActivateGatewayInput.


        :param tags: The tags of this ActivateGatewayInput.
        :type tags: List
        """

        self._tags = tags
