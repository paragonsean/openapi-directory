# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateTapeWithBarcodeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_arn: str=None, tape_size_in_bytes: int=None, tape_barcode: str=None, kms_encrypted: bool=None, kms_key: str=None, pool_id: str=None, worm: bool=None, tags: List=None):
        """CreateTapeWithBarcodeInput - a model defined in OpenAPI

        :param gateway_arn: The gateway_arn of this CreateTapeWithBarcodeInput.
        :param tape_size_in_bytes: The tape_size_in_bytes of this CreateTapeWithBarcodeInput.
        :param tape_barcode: The tape_barcode of this CreateTapeWithBarcodeInput.
        :param kms_encrypted: The kms_encrypted of this CreateTapeWithBarcodeInput.
        :param kms_key: The kms_key of this CreateTapeWithBarcodeInput.
        :param pool_id: The pool_id of this CreateTapeWithBarcodeInput.
        :param worm: The worm of this CreateTapeWithBarcodeInput.
        :param tags: The tags of this CreateTapeWithBarcodeInput.
        """
        self.openapi_types = {
            'gateway_arn': str,
            'tape_size_in_bytes': int,
            'tape_barcode': str,
            'kms_encrypted': bool,
            'kms_key': str,
            'pool_id': str,
            'worm': bool,
            'tags': List
        }

        self.attribute_map = {
            'gateway_arn': 'GatewayARN',
            'tape_size_in_bytes': 'TapeSizeInBytes',
            'tape_barcode': 'TapeBarcode',
            'kms_encrypted': 'KMSEncrypted',
            'kms_key': 'KMSKey',
            'pool_id': 'PoolId',
            'worm': 'Worm',
            'tags': 'Tags'
        }

        self._gateway_arn = gateway_arn
        self._tape_size_in_bytes = tape_size_in_bytes
        self._tape_barcode = tape_barcode
        self._kms_encrypted = kms_encrypted
        self._kms_key = kms_key
        self._pool_id = pool_id
        self._worm = worm
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTapeWithBarcodeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTapeWithBarcodeInput of this CreateTapeWithBarcodeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this CreateTapeWithBarcodeInput.


        :return: The gateway_arn of this CreateTapeWithBarcodeInput.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this CreateTapeWithBarcodeInput.


        :param gateway_arn: The gateway_arn of this CreateTapeWithBarcodeInput.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")

        self._gateway_arn = gateway_arn

    @property
    def tape_size_in_bytes(self):
        """Gets the tape_size_in_bytes of this CreateTapeWithBarcodeInput.


        :return: The tape_size_in_bytes of this CreateTapeWithBarcodeInput.
        :rtype: int
        """
        return self._tape_size_in_bytes

    @tape_size_in_bytes.setter
    def tape_size_in_bytes(self, tape_size_in_bytes):
        """Sets the tape_size_in_bytes of this CreateTapeWithBarcodeInput.


        :param tape_size_in_bytes: The tape_size_in_bytes of this CreateTapeWithBarcodeInput.
        :type tape_size_in_bytes: int
        """
        if tape_size_in_bytes is None:
            raise ValueError("Invalid value for `tape_size_in_bytes`, must not be `None`")

        self._tape_size_in_bytes = tape_size_in_bytes

    @property
    def tape_barcode(self):
        """Gets the tape_barcode of this CreateTapeWithBarcodeInput.


        :return: The tape_barcode of this CreateTapeWithBarcodeInput.
        :rtype: str
        """
        return self._tape_barcode

    @tape_barcode.setter
    def tape_barcode(self, tape_barcode):
        """Sets the tape_barcode of this CreateTapeWithBarcodeInput.


        :param tape_barcode: The tape_barcode of this CreateTapeWithBarcodeInput.
        :type tape_barcode: str
        """
        if tape_barcode is None:
            raise ValueError("Invalid value for `tape_barcode`, must not be `None`")

        self._tape_barcode = tape_barcode

    @property
    def kms_encrypted(self):
        """Gets the kms_encrypted of this CreateTapeWithBarcodeInput.


        :return: The kms_encrypted of this CreateTapeWithBarcodeInput.
        :rtype: bool
        """
        return self._kms_encrypted

    @kms_encrypted.setter
    def kms_encrypted(self, kms_encrypted):
        """Sets the kms_encrypted of this CreateTapeWithBarcodeInput.


        :param kms_encrypted: The kms_encrypted of this CreateTapeWithBarcodeInput.
        :type kms_encrypted: bool
        """

        self._kms_encrypted = kms_encrypted

    @property
    def kms_key(self):
        """Gets the kms_key of this CreateTapeWithBarcodeInput.


        :return: The kms_key of this CreateTapeWithBarcodeInput.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this CreateTapeWithBarcodeInput.


        :param kms_key: The kms_key of this CreateTapeWithBarcodeInput.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def pool_id(self):
        """Gets the pool_id of this CreateTapeWithBarcodeInput.


        :return: The pool_id of this CreateTapeWithBarcodeInput.
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this CreateTapeWithBarcodeInput.


        :param pool_id: The pool_id of this CreateTapeWithBarcodeInput.
        :type pool_id: str
        """

        self._pool_id = pool_id

    @property
    def worm(self):
        """Gets the worm of this CreateTapeWithBarcodeInput.


        :return: The worm of this CreateTapeWithBarcodeInput.
        :rtype: bool
        """
        return self._worm

    @worm.setter
    def worm(self, worm):
        """Sets the worm of this CreateTapeWithBarcodeInput.


        :param worm: The worm of this CreateTapeWithBarcodeInput.
        :type worm: bool
        """

        self._worm = worm

    @property
    def tags(self):
        """Gets the tags of this CreateTapeWithBarcodeInput.


        :return: The tags of this CreateTapeWithBarcodeInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateTapeWithBarcodeInput.


        :param tags: The tags of this CreateTapeWithBarcodeInput.
        :type tags: List
        """

        self._tags = tags
