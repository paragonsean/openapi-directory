# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AttachVolumeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_arn: str=None, target_name: str=None, volume_arn: str=None, network_interface_id: str=None, disk_id: str=None):
        """AttachVolumeInput - a model defined in OpenAPI

        :param gateway_arn: The gateway_arn of this AttachVolumeInput.
        :param target_name: The target_name of this AttachVolumeInput.
        :param volume_arn: The volume_arn of this AttachVolumeInput.
        :param network_interface_id: The network_interface_id of this AttachVolumeInput.
        :param disk_id: The disk_id of this AttachVolumeInput.
        """
        self.openapi_types = {
            'gateway_arn': str,
            'target_name': str,
            'volume_arn': str,
            'network_interface_id': str,
            'disk_id': str
        }

        self.attribute_map = {
            'gateway_arn': 'GatewayARN',
            'target_name': 'TargetName',
            'volume_arn': 'VolumeARN',
            'network_interface_id': 'NetworkInterfaceId',
            'disk_id': 'DiskId'
        }

        self._gateway_arn = gateway_arn
        self._target_name = target_name
        self._volume_arn = volume_arn
        self._network_interface_id = network_interface_id
        self._disk_id = disk_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttachVolumeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttachVolumeInput of this AttachVolumeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this AttachVolumeInput.


        :return: The gateway_arn of this AttachVolumeInput.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this AttachVolumeInput.


        :param gateway_arn: The gateway_arn of this AttachVolumeInput.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")

        self._gateway_arn = gateway_arn

    @property
    def target_name(self):
        """Gets the target_name of this AttachVolumeInput.


        :return: The target_name of this AttachVolumeInput.
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this AttachVolumeInput.


        :param target_name: The target_name of this AttachVolumeInput.
        :type target_name: str
        """

        self._target_name = target_name

    @property
    def volume_arn(self):
        """Gets the volume_arn of this AttachVolumeInput.


        :return: The volume_arn of this AttachVolumeInput.
        :rtype: str
        """
        return self._volume_arn

    @volume_arn.setter
    def volume_arn(self, volume_arn):
        """Sets the volume_arn of this AttachVolumeInput.


        :param volume_arn: The volume_arn of this AttachVolumeInput.
        :type volume_arn: str
        """
        if volume_arn is None:
            raise ValueError("Invalid value for `volume_arn`, must not be `None`")

        self._volume_arn = volume_arn

    @property
    def network_interface_id(self):
        """Gets the network_interface_id of this AttachVolumeInput.


        :return: The network_interface_id of this AttachVolumeInput.
        :rtype: str
        """
        return self._network_interface_id

    @network_interface_id.setter
    def network_interface_id(self, network_interface_id):
        """Sets the network_interface_id of this AttachVolumeInput.


        :param network_interface_id: The network_interface_id of this AttachVolumeInput.
        :type network_interface_id: str
        """
        if network_interface_id is None:
            raise ValueError("Invalid value for `network_interface_id`, must not be `None`")

        self._network_interface_id = network_interface_id

    @property
    def disk_id(self):
        """Gets the disk_id of this AttachVolumeInput.


        :return: The disk_id of this AttachVolumeInput.
        :rtype: str
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """Sets the disk_id of this AttachVolumeInput.


        :param disk_id: The disk_id of this AttachVolumeInput.
        :type disk_id: str
        """

        self._disk_id = disk_id
