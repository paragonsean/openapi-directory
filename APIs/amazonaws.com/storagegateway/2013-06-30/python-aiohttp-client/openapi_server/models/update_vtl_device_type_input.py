# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateVTLDeviceTypeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, vtl_device_arn: str=None, device_type: str=None):
        """UpdateVTLDeviceTypeInput - a model defined in OpenAPI

        :param vtl_device_arn: The vtl_device_arn of this UpdateVTLDeviceTypeInput.
        :param device_type: The device_type of this UpdateVTLDeviceTypeInput.
        """
        self.openapi_types = {
            'vtl_device_arn': str,
            'device_type': str
        }

        self.attribute_map = {
            'vtl_device_arn': 'VTLDeviceARN',
            'device_type': 'DeviceType'
        }

        self._vtl_device_arn = vtl_device_arn
        self._device_type = device_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateVTLDeviceTypeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateVTLDeviceTypeInput of this UpdateVTLDeviceTypeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def vtl_device_arn(self):
        """Gets the vtl_device_arn of this UpdateVTLDeviceTypeInput.


        :return: The vtl_device_arn of this UpdateVTLDeviceTypeInput.
        :rtype: str
        """
        return self._vtl_device_arn

    @vtl_device_arn.setter
    def vtl_device_arn(self, vtl_device_arn):
        """Sets the vtl_device_arn of this UpdateVTLDeviceTypeInput.


        :param vtl_device_arn: The vtl_device_arn of this UpdateVTLDeviceTypeInput.
        :type vtl_device_arn: str
        """
        if vtl_device_arn is None:
            raise ValueError("Invalid value for `vtl_device_arn`, must not be `None`")

        self._vtl_device_arn = vtl_device_arn

    @property
    def device_type(self):
        """Gets the device_type of this UpdateVTLDeviceTypeInput.


        :return: The device_type of this UpdateVTLDeviceTypeInput.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this UpdateVTLDeviceTypeInput.


        :param device_type: The device_type of this UpdateVTLDeviceTypeInput.
        :type device_type: str
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")

        self._device_type = device_type
