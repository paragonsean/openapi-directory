# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateAutomaticTapeCreationPolicyInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_tape_creation_rules: List=None, gateway_arn: str=None):
        """UpdateAutomaticTapeCreationPolicyInput - a model defined in OpenAPI

        :param automatic_tape_creation_rules: The automatic_tape_creation_rules of this UpdateAutomaticTapeCreationPolicyInput.
        :param gateway_arn: The gateway_arn of this UpdateAutomaticTapeCreationPolicyInput.
        """
        self.openapi_types = {
            'automatic_tape_creation_rules': List,
            'gateway_arn': str
        }

        self.attribute_map = {
            'automatic_tape_creation_rules': 'AutomaticTapeCreationRules',
            'gateway_arn': 'GatewayARN'
        }

        self._automatic_tape_creation_rules = automatic_tape_creation_rules
        self._gateway_arn = gateway_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAutomaticTapeCreationPolicyInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAutomaticTapeCreationPolicyInput of this UpdateAutomaticTapeCreationPolicyInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_tape_creation_rules(self):
        """Gets the automatic_tape_creation_rules of this UpdateAutomaticTapeCreationPolicyInput.


        :return: The automatic_tape_creation_rules of this UpdateAutomaticTapeCreationPolicyInput.
        :rtype: List
        """
        return self._automatic_tape_creation_rules

    @automatic_tape_creation_rules.setter
    def automatic_tape_creation_rules(self, automatic_tape_creation_rules):
        """Sets the automatic_tape_creation_rules of this UpdateAutomaticTapeCreationPolicyInput.


        :param automatic_tape_creation_rules: The automatic_tape_creation_rules of this UpdateAutomaticTapeCreationPolicyInput.
        :type automatic_tape_creation_rules: List
        """
        if automatic_tape_creation_rules is None:
            raise ValueError("Invalid value for `automatic_tape_creation_rules`, must not be `None`")

        self._automatic_tape_creation_rules = automatic_tape_creation_rules

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this UpdateAutomaticTapeCreationPolicyInput.

        The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.

        :return: The gateway_arn of this UpdateAutomaticTapeCreationPolicyInput.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this UpdateAutomaticTapeCreationPolicyInput.

        The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.

        :param gateway_arn: The gateway_arn of this UpdateAutomaticTapeCreationPolicyInput.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")
        if gateway_arn is not None and len(gateway_arn) > 500:
            raise ValueError("Invalid value for `gateway_arn`, length must be less than or equal to `500`")
        if gateway_arn is not None and len(gateway_arn) < 50:
            raise ValueError("Invalid value for `gateway_arn`, length must be greater than or equal to `50`")

        self._gateway_arn = gateway_arn
