# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetSMBGuestPasswordInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_arn: str=None, password: str=None):
        """SetSMBGuestPasswordInput - a model defined in OpenAPI

        :param gateway_arn: The gateway_arn of this SetSMBGuestPasswordInput.
        :param password: The password of this SetSMBGuestPasswordInput.
        """
        self.openapi_types = {
            'gateway_arn': str,
            'password': str
        }

        self.attribute_map = {
            'gateway_arn': 'GatewayARN',
            'password': 'Password'
        }

        self._gateway_arn = gateway_arn
        self._password = password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetSMBGuestPasswordInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetSMBGuestPasswordInput of this SetSMBGuestPasswordInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this SetSMBGuestPasswordInput.


        :return: The gateway_arn of this SetSMBGuestPasswordInput.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this SetSMBGuestPasswordInput.


        :param gateway_arn: The gateway_arn of this SetSMBGuestPasswordInput.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")

        self._gateway_arn = gateway_arn

    @property
    def password(self):
        """Gets the password of this SetSMBGuestPasswordInput.


        :return: The password of this SetSMBGuestPasswordInput.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this SetSMBGuestPasswordInput.


        :param password: The password of this SetSMBGuestPasswordInput.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password
