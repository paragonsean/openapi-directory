# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BandwidthRateLimitInterval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_hour_of_day: int=None, start_minute_of_hour: int=None, end_hour_of_day: int=None, end_minute_of_hour: int=None, days_of_week: List=None, average_upload_rate_limit_in_bits_per_sec: int=None, average_download_rate_limit_in_bits_per_sec: int=None):
        """BandwidthRateLimitInterval - a model defined in OpenAPI

        :param start_hour_of_day: The start_hour_of_day of this BandwidthRateLimitInterval.
        :param start_minute_of_hour: The start_minute_of_hour of this BandwidthRateLimitInterval.
        :param end_hour_of_day: The end_hour_of_day of this BandwidthRateLimitInterval.
        :param end_minute_of_hour: The end_minute_of_hour of this BandwidthRateLimitInterval.
        :param days_of_week: The days_of_week of this BandwidthRateLimitInterval.
        :param average_upload_rate_limit_in_bits_per_sec: The average_upload_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.
        :param average_download_rate_limit_in_bits_per_sec: The average_download_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.
        """
        self.openapi_types = {
            'start_hour_of_day': int,
            'start_minute_of_hour': int,
            'end_hour_of_day': int,
            'end_minute_of_hour': int,
            'days_of_week': List,
            'average_upload_rate_limit_in_bits_per_sec': int,
            'average_download_rate_limit_in_bits_per_sec': int
        }

        self.attribute_map = {
            'start_hour_of_day': 'StartHourOfDay',
            'start_minute_of_hour': 'StartMinuteOfHour',
            'end_hour_of_day': 'EndHourOfDay',
            'end_minute_of_hour': 'EndMinuteOfHour',
            'days_of_week': 'DaysOfWeek',
            'average_upload_rate_limit_in_bits_per_sec': 'AverageUploadRateLimitInBitsPerSec',
            'average_download_rate_limit_in_bits_per_sec': 'AverageDownloadRateLimitInBitsPerSec'
        }

        self._start_hour_of_day = start_hour_of_day
        self._start_minute_of_hour = start_minute_of_hour
        self._end_hour_of_day = end_hour_of_day
        self._end_minute_of_hour = end_minute_of_hour
        self._days_of_week = days_of_week
        self._average_upload_rate_limit_in_bits_per_sec = average_upload_rate_limit_in_bits_per_sec
        self._average_download_rate_limit_in_bits_per_sec = average_download_rate_limit_in_bits_per_sec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BandwidthRateLimitInterval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BandwidthRateLimitInterval of this BandwidthRateLimitInterval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_hour_of_day(self):
        """Gets the start_hour_of_day of this BandwidthRateLimitInterval.


        :return: The start_hour_of_day of this BandwidthRateLimitInterval.
        :rtype: int
        """
        return self._start_hour_of_day

    @start_hour_of_day.setter
    def start_hour_of_day(self, start_hour_of_day):
        """Sets the start_hour_of_day of this BandwidthRateLimitInterval.


        :param start_hour_of_day: The start_hour_of_day of this BandwidthRateLimitInterval.
        :type start_hour_of_day: int
        """
        if start_hour_of_day is None:
            raise ValueError("Invalid value for `start_hour_of_day`, must not be `None`")

        self._start_hour_of_day = start_hour_of_day

    @property
    def start_minute_of_hour(self):
        """Gets the start_minute_of_hour of this BandwidthRateLimitInterval.


        :return: The start_minute_of_hour of this BandwidthRateLimitInterval.
        :rtype: int
        """
        return self._start_minute_of_hour

    @start_minute_of_hour.setter
    def start_minute_of_hour(self, start_minute_of_hour):
        """Sets the start_minute_of_hour of this BandwidthRateLimitInterval.


        :param start_minute_of_hour: The start_minute_of_hour of this BandwidthRateLimitInterval.
        :type start_minute_of_hour: int
        """
        if start_minute_of_hour is None:
            raise ValueError("Invalid value for `start_minute_of_hour`, must not be `None`")

        self._start_minute_of_hour = start_minute_of_hour

    @property
    def end_hour_of_day(self):
        """Gets the end_hour_of_day of this BandwidthRateLimitInterval.


        :return: The end_hour_of_day of this BandwidthRateLimitInterval.
        :rtype: int
        """
        return self._end_hour_of_day

    @end_hour_of_day.setter
    def end_hour_of_day(self, end_hour_of_day):
        """Sets the end_hour_of_day of this BandwidthRateLimitInterval.


        :param end_hour_of_day: The end_hour_of_day of this BandwidthRateLimitInterval.
        :type end_hour_of_day: int
        """
        if end_hour_of_day is None:
            raise ValueError("Invalid value for `end_hour_of_day`, must not be `None`")

        self._end_hour_of_day = end_hour_of_day

    @property
    def end_minute_of_hour(self):
        """Gets the end_minute_of_hour of this BandwidthRateLimitInterval.


        :return: The end_minute_of_hour of this BandwidthRateLimitInterval.
        :rtype: int
        """
        return self._end_minute_of_hour

    @end_minute_of_hour.setter
    def end_minute_of_hour(self, end_minute_of_hour):
        """Sets the end_minute_of_hour of this BandwidthRateLimitInterval.


        :param end_minute_of_hour: The end_minute_of_hour of this BandwidthRateLimitInterval.
        :type end_minute_of_hour: int
        """
        if end_minute_of_hour is None:
            raise ValueError("Invalid value for `end_minute_of_hour`, must not be `None`")

        self._end_minute_of_hour = end_minute_of_hour

    @property
    def days_of_week(self):
        """Gets the days_of_week of this BandwidthRateLimitInterval.


        :return: The days_of_week of this BandwidthRateLimitInterval.
        :rtype: List
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this BandwidthRateLimitInterval.


        :param days_of_week: The days_of_week of this BandwidthRateLimitInterval.
        :type days_of_week: List
        """
        if days_of_week is None:
            raise ValueError("Invalid value for `days_of_week`, must not be `None`")

        self._days_of_week = days_of_week

    @property
    def average_upload_rate_limit_in_bits_per_sec(self):
        """Gets the average_upload_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.


        :return: The average_upload_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.
        :rtype: int
        """
        return self._average_upload_rate_limit_in_bits_per_sec

    @average_upload_rate_limit_in_bits_per_sec.setter
    def average_upload_rate_limit_in_bits_per_sec(self, average_upload_rate_limit_in_bits_per_sec):
        """Sets the average_upload_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.


        :param average_upload_rate_limit_in_bits_per_sec: The average_upload_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.
        :type average_upload_rate_limit_in_bits_per_sec: int
        """

        self._average_upload_rate_limit_in_bits_per_sec = average_upload_rate_limit_in_bits_per_sec

    @property
    def average_download_rate_limit_in_bits_per_sec(self):
        """Gets the average_download_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.


        :return: The average_download_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.
        :rtype: int
        """
        return self._average_download_rate_limit_in_bits_per_sec

    @average_download_rate_limit_in_bits_per_sec.setter
    def average_download_rate_limit_in_bits_per_sec(self, average_download_rate_limit_in_bits_per_sec):
        """Sets the average_download_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.


        :param average_download_rate_limit_in_bits_per_sec: The average_download_rate_limit_in_bits_per_sec of this BandwidthRateLimitInterval.
        :type average_download_rate_limit_in_bits_per_sec: int
        """

        self._average_download_rate_limit_in_bits_per_sec = average_download_rate_limit_in_bits_per_sec
