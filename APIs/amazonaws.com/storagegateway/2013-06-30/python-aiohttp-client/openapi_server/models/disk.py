# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Disk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_id: str=None, disk_path: str=None, disk_node: str=None, disk_status: str=None, disk_size_in_bytes: int=None, disk_allocation_type: str=None, disk_allocation_resource: str=None, disk_attribute_list: List[str]=None):
        """Disk - a model defined in OpenAPI

        :param disk_id: The disk_id of this Disk.
        :param disk_path: The disk_path of this Disk.
        :param disk_node: The disk_node of this Disk.
        :param disk_status: The disk_status of this Disk.
        :param disk_size_in_bytes: The disk_size_in_bytes of this Disk.
        :param disk_allocation_type: The disk_allocation_type of this Disk.
        :param disk_allocation_resource: The disk_allocation_resource of this Disk.
        :param disk_attribute_list: The disk_attribute_list of this Disk.
        """
        self.openapi_types = {
            'disk_id': str,
            'disk_path': str,
            'disk_node': str,
            'disk_status': str,
            'disk_size_in_bytes': int,
            'disk_allocation_type': str,
            'disk_allocation_resource': str,
            'disk_attribute_list': List[str]
        }

        self.attribute_map = {
            'disk_id': 'DiskId',
            'disk_path': 'DiskPath',
            'disk_node': 'DiskNode',
            'disk_status': 'DiskStatus',
            'disk_size_in_bytes': 'DiskSizeInBytes',
            'disk_allocation_type': 'DiskAllocationType',
            'disk_allocation_resource': 'DiskAllocationResource',
            'disk_attribute_list': 'DiskAttributeList'
        }

        self._disk_id = disk_id
        self._disk_path = disk_path
        self._disk_node = disk_node
        self._disk_status = disk_status
        self._disk_size_in_bytes = disk_size_in_bytes
        self._disk_allocation_type = disk_allocation_type
        self._disk_allocation_resource = disk_allocation_resource
        self._disk_attribute_list = disk_attribute_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Disk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Disk of this Disk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_id(self):
        """Gets the disk_id of this Disk.


        :return: The disk_id of this Disk.
        :rtype: str
        """
        return self._disk_id

    @disk_id.setter
    def disk_id(self, disk_id):
        """Sets the disk_id of this Disk.


        :param disk_id: The disk_id of this Disk.
        :type disk_id: str
        """

        self._disk_id = disk_id

    @property
    def disk_path(self):
        """Gets the disk_path of this Disk.


        :return: The disk_path of this Disk.
        :rtype: str
        """
        return self._disk_path

    @disk_path.setter
    def disk_path(self, disk_path):
        """Sets the disk_path of this Disk.


        :param disk_path: The disk_path of this Disk.
        :type disk_path: str
        """

        self._disk_path = disk_path

    @property
    def disk_node(self):
        """Gets the disk_node of this Disk.


        :return: The disk_node of this Disk.
        :rtype: str
        """
        return self._disk_node

    @disk_node.setter
    def disk_node(self, disk_node):
        """Sets the disk_node of this Disk.


        :param disk_node: The disk_node of this Disk.
        :type disk_node: str
        """

        self._disk_node = disk_node

    @property
    def disk_status(self):
        """Gets the disk_status of this Disk.


        :return: The disk_status of this Disk.
        :rtype: str
        """
        return self._disk_status

    @disk_status.setter
    def disk_status(self, disk_status):
        """Sets the disk_status of this Disk.


        :param disk_status: The disk_status of this Disk.
        :type disk_status: str
        """

        self._disk_status = disk_status

    @property
    def disk_size_in_bytes(self):
        """Gets the disk_size_in_bytes of this Disk.


        :return: The disk_size_in_bytes of this Disk.
        :rtype: int
        """
        return self._disk_size_in_bytes

    @disk_size_in_bytes.setter
    def disk_size_in_bytes(self, disk_size_in_bytes):
        """Sets the disk_size_in_bytes of this Disk.


        :param disk_size_in_bytes: The disk_size_in_bytes of this Disk.
        :type disk_size_in_bytes: int
        """

        self._disk_size_in_bytes = disk_size_in_bytes

    @property
    def disk_allocation_type(self):
        """Gets the disk_allocation_type of this Disk.

        <p>One of the <code>DiskAllocationType</code> enumeration values that identifies how a local disk is used.</p> <p>Valid Values: <code>UPLOAD_BUFFER</code> | <code>CACHE_STORAGE</code> </p>

        :return: The disk_allocation_type of this Disk.
        :rtype: str
        """
        return self._disk_allocation_type

    @disk_allocation_type.setter
    def disk_allocation_type(self, disk_allocation_type):
        """Sets the disk_allocation_type of this Disk.

        <p>One of the <code>DiskAllocationType</code> enumeration values that identifies how a local disk is used.</p> <p>Valid Values: <code>UPLOAD_BUFFER</code> | <code>CACHE_STORAGE</code> </p>

        :param disk_allocation_type: The disk_allocation_type of this Disk.
        :type disk_allocation_type: str
        """
        if disk_allocation_type is not None and len(disk_allocation_type) > 100:
            raise ValueError("Invalid value for `disk_allocation_type`, length must be less than or equal to `100`")
        if disk_allocation_type is not None and len(disk_allocation_type) < 3:
            raise ValueError("Invalid value for `disk_allocation_type`, length must be greater than or equal to `3`")

        self._disk_allocation_type = disk_allocation_type

    @property
    def disk_allocation_resource(self):
        """Gets the disk_allocation_resource of this Disk.


        :return: The disk_allocation_resource of this Disk.
        :rtype: str
        """
        return self._disk_allocation_resource

    @disk_allocation_resource.setter
    def disk_allocation_resource(self, disk_allocation_resource):
        """Sets the disk_allocation_resource of this Disk.


        :param disk_allocation_resource: The disk_allocation_resource of this Disk.
        :type disk_allocation_resource: str
        """

        self._disk_allocation_resource = disk_allocation_resource

    @property
    def disk_attribute_list(self):
        """Gets the disk_attribute_list of this Disk.

        A list of values that represents attributes of a local disk.

        :return: The disk_attribute_list of this Disk.
        :rtype: List[str]
        """
        return self._disk_attribute_list

    @disk_attribute_list.setter
    def disk_attribute_list(self, disk_attribute_list):
        """Sets the disk_attribute_list of this Disk.

        A list of values that represents attributes of a local disk.

        :param disk_attribute_list: The disk_attribute_list of this Disk.
        :type disk_attribute_list: List[str]
        """
        if disk_attribute_list is not None and len(disk_attribute_list) > 10:
            raise ValueError("Invalid value for `disk_attribute_list`, number of items must be less than or equal to `10`")
        if disk_attribute_list is not None and len(disk_attribute_list) < 0:
            raise ValueError("Invalid value for `disk_attribute_list`, number of items must be greater than or equal to `0`")

        self._disk_attribute_list = disk_attribute_list
