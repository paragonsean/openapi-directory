# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, volume_arn: str=None, volume_id: str=None, gateway_arn: str=None, gateway_id: str=None, volume_type: str=None, volume_size_in_bytes: int=None, volume_attachment_status: str=None):
        """VolumeInfo - a model defined in OpenAPI

        :param volume_arn: The volume_arn of this VolumeInfo.
        :param volume_id: The volume_id of this VolumeInfo.
        :param gateway_arn: The gateway_arn of this VolumeInfo.
        :param gateway_id: The gateway_id of this VolumeInfo.
        :param volume_type: The volume_type of this VolumeInfo.
        :param volume_size_in_bytes: The volume_size_in_bytes of this VolumeInfo.
        :param volume_attachment_status: The volume_attachment_status of this VolumeInfo.
        """
        self.openapi_types = {
            'volume_arn': str,
            'volume_id': str,
            'gateway_arn': str,
            'gateway_id': str,
            'volume_type': str,
            'volume_size_in_bytes': int,
            'volume_attachment_status': str
        }

        self.attribute_map = {
            'volume_arn': 'VolumeARN',
            'volume_id': 'VolumeId',
            'gateway_arn': 'GatewayARN',
            'gateway_id': 'GatewayId',
            'volume_type': 'VolumeType',
            'volume_size_in_bytes': 'VolumeSizeInBytes',
            'volume_attachment_status': 'VolumeAttachmentStatus'
        }

        self._volume_arn = volume_arn
        self._volume_id = volume_id
        self._gateway_arn = gateway_arn
        self._gateway_id = gateway_id
        self._volume_type = volume_type
        self._volume_size_in_bytes = volume_size_in_bytes
        self._volume_attachment_status = volume_attachment_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VolumeInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VolumeInfo of this VolumeInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volume_arn(self):
        """Gets the volume_arn of this VolumeInfo.


        :return: The volume_arn of this VolumeInfo.
        :rtype: str
        """
        return self._volume_arn

    @volume_arn.setter
    def volume_arn(self, volume_arn):
        """Sets the volume_arn of this VolumeInfo.


        :param volume_arn: The volume_arn of this VolumeInfo.
        :type volume_arn: str
        """

        self._volume_arn = volume_arn

    @property
    def volume_id(self):
        """Gets the volume_id of this VolumeInfo.


        :return: The volume_id of this VolumeInfo.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this VolumeInfo.


        :param volume_id: The volume_id of this VolumeInfo.
        :type volume_id: str
        """

        self._volume_id = volume_id

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this VolumeInfo.

        The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.

        :return: The gateway_arn of this VolumeInfo.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this VolumeInfo.

        The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.

        :param gateway_arn: The gateway_arn of this VolumeInfo.
        :type gateway_arn: str
        """
        if gateway_arn is not None and len(gateway_arn) > 500:
            raise ValueError("Invalid value for `gateway_arn`, length must be less than or equal to `500`")
        if gateway_arn is not None and len(gateway_arn) < 50:
            raise ValueError("Invalid value for `gateway_arn`, length must be greater than or equal to `50`")

        self._gateway_arn = gateway_arn

    @property
    def gateway_id(self):
        """Gets the gateway_id of this VolumeInfo.


        :return: The gateway_id of this VolumeInfo.
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this VolumeInfo.


        :param gateway_id: The gateway_id of this VolumeInfo.
        :type gateway_id: str
        """

        self._gateway_id = gateway_id

    @property
    def volume_type(self):
        """Gets the volume_type of this VolumeInfo.


        :return: The volume_type of this VolumeInfo.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this VolumeInfo.


        :param volume_type: The volume_type of this VolumeInfo.
        :type volume_type: str
        """

        self._volume_type = volume_type

    @property
    def volume_size_in_bytes(self):
        """Gets the volume_size_in_bytes of this VolumeInfo.


        :return: The volume_size_in_bytes of this VolumeInfo.
        :rtype: int
        """
        return self._volume_size_in_bytes

    @volume_size_in_bytes.setter
    def volume_size_in_bytes(self, volume_size_in_bytes):
        """Sets the volume_size_in_bytes of this VolumeInfo.


        :param volume_size_in_bytes: The volume_size_in_bytes of this VolumeInfo.
        :type volume_size_in_bytes: int
        """

        self._volume_size_in_bytes = volume_size_in_bytes

    @property
    def volume_attachment_status(self):
        """Gets the volume_attachment_status of this VolumeInfo.


        :return: The volume_attachment_status of this VolumeInfo.
        :rtype: str
        """
        return self._volume_attachment_status

    @volume_attachment_status.setter
    def volume_attachment_status(self, volume_attachment_status):
        """Sets the volume_attachment_status of this VolumeInfo.


        :param volume_attachment_status: The volume_attachment_status of this VolumeInfo.
        :type volume_attachment_status: str
        """

        self._volume_attachment_status = volume_attachment_status
