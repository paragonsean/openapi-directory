# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class Tape(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tape_arn: str=None, tape_barcode: str=None, tape_created_date: datetime=None, tape_size_in_bytes: int=None, tape_status: str=None, vtl_device: str=None, progress: float=None, tape_used_in_bytes: int=None, kms_key: str=None, pool_id: str=None, worm: bool=None, retention_start_date: datetime=None, pool_entry_date: datetime=None):
        """Tape - a model defined in OpenAPI

        :param tape_arn: The tape_arn of this Tape.
        :param tape_barcode: The tape_barcode of this Tape.
        :param tape_created_date: The tape_created_date of this Tape.
        :param tape_size_in_bytes: The tape_size_in_bytes of this Tape.
        :param tape_status: The tape_status of this Tape.
        :param vtl_device: The vtl_device of this Tape.
        :param progress: The progress of this Tape.
        :param tape_used_in_bytes: The tape_used_in_bytes of this Tape.
        :param kms_key: The kms_key of this Tape.
        :param pool_id: The pool_id of this Tape.
        :param worm: The worm of this Tape.
        :param retention_start_date: The retention_start_date of this Tape.
        :param pool_entry_date: The pool_entry_date of this Tape.
        """
        self.openapi_types = {
            'tape_arn': str,
            'tape_barcode': str,
            'tape_created_date': datetime,
            'tape_size_in_bytes': int,
            'tape_status': str,
            'vtl_device': str,
            'progress': float,
            'tape_used_in_bytes': int,
            'kms_key': str,
            'pool_id': str,
            'worm': bool,
            'retention_start_date': datetime,
            'pool_entry_date': datetime
        }

        self.attribute_map = {
            'tape_arn': 'TapeARN',
            'tape_barcode': 'TapeBarcode',
            'tape_created_date': 'TapeCreatedDate',
            'tape_size_in_bytes': 'TapeSizeInBytes',
            'tape_status': 'TapeStatus',
            'vtl_device': 'VTLDevice',
            'progress': 'Progress',
            'tape_used_in_bytes': 'TapeUsedInBytes',
            'kms_key': 'KMSKey',
            'pool_id': 'PoolId',
            'worm': 'Worm',
            'retention_start_date': 'RetentionStartDate',
            'pool_entry_date': 'PoolEntryDate'
        }

        self._tape_arn = tape_arn
        self._tape_barcode = tape_barcode
        self._tape_created_date = tape_created_date
        self._tape_size_in_bytes = tape_size_in_bytes
        self._tape_status = tape_status
        self._vtl_device = vtl_device
        self._progress = progress
        self._tape_used_in_bytes = tape_used_in_bytes
        self._kms_key = kms_key
        self._pool_id = pool_id
        self._worm = worm
        self._retention_start_date = retention_start_date
        self._pool_entry_date = pool_entry_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tape':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tape of this Tape.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tape_arn(self):
        """Gets the tape_arn of this Tape.


        :return: The tape_arn of this Tape.
        :rtype: str
        """
        return self._tape_arn

    @tape_arn.setter
    def tape_arn(self, tape_arn):
        """Sets the tape_arn of this Tape.


        :param tape_arn: The tape_arn of this Tape.
        :type tape_arn: str
        """

        self._tape_arn = tape_arn

    @property
    def tape_barcode(self):
        """Gets the tape_barcode of this Tape.


        :return: The tape_barcode of this Tape.
        :rtype: str
        """
        return self._tape_barcode

    @tape_barcode.setter
    def tape_barcode(self, tape_barcode):
        """Sets the tape_barcode of this Tape.


        :param tape_barcode: The tape_barcode of this Tape.
        :type tape_barcode: str
        """

        self._tape_barcode = tape_barcode

    @property
    def tape_created_date(self):
        """Gets the tape_created_date of this Tape.


        :return: The tape_created_date of this Tape.
        :rtype: datetime
        """
        return self._tape_created_date

    @tape_created_date.setter
    def tape_created_date(self, tape_created_date):
        """Sets the tape_created_date of this Tape.


        :param tape_created_date: The tape_created_date of this Tape.
        :type tape_created_date: datetime
        """

        self._tape_created_date = tape_created_date

    @property
    def tape_size_in_bytes(self):
        """Gets the tape_size_in_bytes of this Tape.


        :return: The tape_size_in_bytes of this Tape.
        :rtype: int
        """
        return self._tape_size_in_bytes

    @tape_size_in_bytes.setter
    def tape_size_in_bytes(self, tape_size_in_bytes):
        """Sets the tape_size_in_bytes of this Tape.


        :param tape_size_in_bytes: The tape_size_in_bytes of this Tape.
        :type tape_size_in_bytes: int
        """

        self._tape_size_in_bytes = tape_size_in_bytes

    @property
    def tape_status(self):
        """Gets the tape_status of this Tape.


        :return: The tape_status of this Tape.
        :rtype: str
        """
        return self._tape_status

    @tape_status.setter
    def tape_status(self, tape_status):
        """Sets the tape_status of this Tape.


        :param tape_status: The tape_status of this Tape.
        :type tape_status: str
        """

        self._tape_status = tape_status

    @property
    def vtl_device(self):
        """Gets the vtl_device of this Tape.


        :return: The vtl_device of this Tape.
        :rtype: str
        """
        return self._vtl_device

    @vtl_device.setter
    def vtl_device(self, vtl_device):
        """Sets the vtl_device of this Tape.


        :param vtl_device: The vtl_device of this Tape.
        :type vtl_device: str
        """

        self._vtl_device = vtl_device

    @property
    def progress(self):
        """Gets the progress of this Tape.


        :return: The progress of this Tape.
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this Tape.


        :param progress: The progress of this Tape.
        :type progress: float
        """

        self._progress = progress

    @property
    def tape_used_in_bytes(self):
        """Gets the tape_used_in_bytes of this Tape.


        :return: The tape_used_in_bytes of this Tape.
        :rtype: int
        """
        return self._tape_used_in_bytes

    @tape_used_in_bytes.setter
    def tape_used_in_bytes(self, tape_used_in_bytes):
        """Sets the tape_used_in_bytes of this Tape.


        :param tape_used_in_bytes: The tape_used_in_bytes of this Tape.
        :type tape_used_in_bytes: int
        """

        self._tape_used_in_bytes = tape_used_in_bytes

    @property
    def kms_key(self):
        """Gets the kms_key of this Tape.

        The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.

        :return: The kms_key of this Tape.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this Tape.

        The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.

        :param kms_key: The kms_key of this Tape.
        :type kms_key: str
        """
        if kms_key is not None and len(kms_key) > 2048:
            raise ValueError("Invalid value for `kms_key`, length must be less than or equal to `2048`")
        if kms_key is not None and len(kms_key) < 7:
            raise ValueError("Invalid value for `kms_key`, length must be greater than or equal to `7`")
        if kms_key is not None and not re.search(r'(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)\/(\S+)$)|(^alias\/(\S+)$)', kms_key):
            raise ValueError("Invalid value for `kms_key`, must be a follow pattern or equal to `/(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)\/(\S+)$)|(^alias\/(\S+)$)/`")

        self._kms_key = kms_key

    @property
    def pool_id(self):
        """Gets the pool_id of this Tape.


        :return: The pool_id of this Tape.
        :rtype: str
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this Tape.


        :param pool_id: The pool_id of this Tape.
        :type pool_id: str
        """

        self._pool_id = pool_id

    @property
    def worm(self):
        """Gets the worm of this Tape.


        :return: The worm of this Tape.
        :rtype: bool
        """
        return self._worm

    @worm.setter
    def worm(self, worm):
        """Sets the worm of this Tape.


        :param worm: The worm of this Tape.
        :type worm: bool
        """

        self._worm = worm

    @property
    def retention_start_date(self):
        """Gets the retention_start_date of this Tape.


        :return: The retention_start_date of this Tape.
        :rtype: datetime
        """
        return self._retention_start_date

    @retention_start_date.setter
    def retention_start_date(self, retention_start_date):
        """Sets the retention_start_date of this Tape.


        :param retention_start_date: The retention_start_date of this Tape.
        :type retention_start_date: datetime
        """

        self._retention_start_date = retention_start_date

    @property
    def pool_entry_date(self):
        """Gets the pool_entry_date of this Tape.


        :return: The pool_entry_date of this Tape.
        :rtype: datetime
        """
        return self._pool_entry_date

    @pool_entry_date.setter
    def pool_entry_date(self, pool_entry_date):
        """Sets the pool_entry_date of this Tape.


        :param pool_entry_date: The pool_entry_date of this Tape.
        :type pool_entry_date: datetime
        """

        self._pool_entry_date = pool_entry_date
