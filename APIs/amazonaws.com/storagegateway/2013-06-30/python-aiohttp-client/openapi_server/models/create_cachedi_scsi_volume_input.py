# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCachediSCSIVolumeInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_arn: str=None, volume_size_in_bytes: int=None, snapshot_id: str=None, target_name: str=None, source_volume_arn: str=None, network_interface_id: str=None, client_token: str=None, kms_encrypted: bool=None, kms_key: str=None, tags: List=None):
        """CreateCachediSCSIVolumeInput - a model defined in OpenAPI

        :param gateway_arn: The gateway_arn of this CreateCachediSCSIVolumeInput.
        :param volume_size_in_bytes: The volume_size_in_bytes of this CreateCachediSCSIVolumeInput.
        :param snapshot_id: The snapshot_id of this CreateCachediSCSIVolumeInput.
        :param target_name: The target_name of this CreateCachediSCSIVolumeInput.
        :param source_volume_arn: The source_volume_arn of this CreateCachediSCSIVolumeInput.
        :param network_interface_id: The network_interface_id of this CreateCachediSCSIVolumeInput.
        :param client_token: The client_token of this CreateCachediSCSIVolumeInput.
        :param kms_encrypted: The kms_encrypted of this CreateCachediSCSIVolumeInput.
        :param kms_key: The kms_key of this CreateCachediSCSIVolumeInput.
        :param tags: The tags of this CreateCachediSCSIVolumeInput.
        """
        self.openapi_types = {
            'gateway_arn': str,
            'volume_size_in_bytes': int,
            'snapshot_id': str,
            'target_name': str,
            'source_volume_arn': str,
            'network_interface_id': str,
            'client_token': str,
            'kms_encrypted': bool,
            'kms_key': str,
            'tags': List
        }

        self.attribute_map = {
            'gateway_arn': 'GatewayARN',
            'volume_size_in_bytes': 'VolumeSizeInBytes',
            'snapshot_id': 'SnapshotId',
            'target_name': 'TargetName',
            'source_volume_arn': 'SourceVolumeARN',
            'network_interface_id': 'NetworkInterfaceId',
            'client_token': 'ClientToken',
            'kms_encrypted': 'KMSEncrypted',
            'kms_key': 'KMSKey',
            'tags': 'Tags'
        }

        self._gateway_arn = gateway_arn
        self._volume_size_in_bytes = volume_size_in_bytes
        self._snapshot_id = snapshot_id
        self._target_name = target_name
        self._source_volume_arn = source_volume_arn
        self._network_interface_id = network_interface_id
        self._client_token = client_token
        self._kms_encrypted = kms_encrypted
        self._kms_key = kms_key
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCachediSCSIVolumeInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCachediSCSIVolumeInput of this CreateCachediSCSIVolumeInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_arn(self):
        """Gets the gateway_arn of this CreateCachediSCSIVolumeInput.

        The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.

        :return: The gateway_arn of this CreateCachediSCSIVolumeInput.
        :rtype: str
        """
        return self._gateway_arn

    @gateway_arn.setter
    def gateway_arn(self, gateway_arn):
        """Sets the gateway_arn of this CreateCachediSCSIVolumeInput.

        The Amazon Resource Name (ARN) of the gateway. Use the <a>ListGateways</a> operation to return a list of gateways for your account and Amazon Web Services Region.

        :param gateway_arn: The gateway_arn of this CreateCachediSCSIVolumeInput.
        :type gateway_arn: str
        """
        if gateway_arn is None:
            raise ValueError("Invalid value for `gateway_arn`, must not be `None`")
        if gateway_arn is not None and len(gateway_arn) > 500:
            raise ValueError("Invalid value for `gateway_arn`, length must be less than or equal to `500`")
        if gateway_arn is not None and len(gateway_arn) < 50:
            raise ValueError("Invalid value for `gateway_arn`, length must be greater than or equal to `50`")

        self._gateway_arn = gateway_arn

    @property
    def volume_size_in_bytes(self):
        """Gets the volume_size_in_bytes of this CreateCachediSCSIVolumeInput.


        :return: The volume_size_in_bytes of this CreateCachediSCSIVolumeInput.
        :rtype: int
        """
        return self._volume_size_in_bytes

    @volume_size_in_bytes.setter
    def volume_size_in_bytes(self, volume_size_in_bytes):
        """Sets the volume_size_in_bytes of this CreateCachediSCSIVolumeInput.


        :param volume_size_in_bytes: The volume_size_in_bytes of this CreateCachediSCSIVolumeInput.
        :type volume_size_in_bytes: int
        """
        if volume_size_in_bytes is None:
            raise ValueError("Invalid value for `volume_size_in_bytes`, must not be `None`")

        self._volume_size_in_bytes = volume_size_in_bytes

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this CreateCachediSCSIVolumeInput.


        :return: The snapshot_id of this CreateCachediSCSIVolumeInput.
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this CreateCachediSCSIVolumeInput.


        :param snapshot_id: The snapshot_id of this CreateCachediSCSIVolumeInput.
        :type snapshot_id: str
        """

        self._snapshot_id = snapshot_id

    @property
    def target_name(self):
        """Gets the target_name of this CreateCachediSCSIVolumeInput.


        :return: The target_name of this CreateCachediSCSIVolumeInput.
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this CreateCachediSCSIVolumeInput.


        :param target_name: The target_name of this CreateCachediSCSIVolumeInput.
        :type target_name: str
        """
        if target_name is None:
            raise ValueError("Invalid value for `target_name`, must not be `None`")

        self._target_name = target_name

    @property
    def source_volume_arn(self):
        """Gets the source_volume_arn of this CreateCachediSCSIVolumeInput.


        :return: The source_volume_arn of this CreateCachediSCSIVolumeInput.
        :rtype: str
        """
        return self._source_volume_arn

    @source_volume_arn.setter
    def source_volume_arn(self, source_volume_arn):
        """Sets the source_volume_arn of this CreateCachediSCSIVolumeInput.


        :param source_volume_arn: The source_volume_arn of this CreateCachediSCSIVolumeInput.
        :type source_volume_arn: str
        """

        self._source_volume_arn = source_volume_arn

    @property
    def network_interface_id(self):
        """Gets the network_interface_id of this CreateCachediSCSIVolumeInput.


        :return: The network_interface_id of this CreateCachediSCSIVolumeInput.
        :rtype: str
        """
        return self._network_interface_id

    @network_interface_id.setter
    def network_interface_id(self, network_interface_id):
        """Sets the network_interface_id of this CreateCachediSCSIVolumeInput.


        :param network_interface_id: The network_interface_id of this CreateCachediSCSIVolumeInput.
        :type network_interface_id: str
        """
        if network_interface_id is None:
            raise ValueError("Invalid value for `network_interface_id`, must not be `None`")

        self._network_interface_id = network_interface_id

    @property
    def client_token(self):
        """Gets the client_token of this CreateCachediSCSIVolumeInput.


        :return: The client_token of this CreateCachediSCSIVolumeInput.
        :rtype: str
        """
        return self._client_token

    @client_token.setter
    def client_token(self, client_token):
        """Sets the client_token of this CreateCachediSCSIVolumeInput.


        :param client_token: The client_token of this CreateCachediSCSIVolumeInput.
        :type client_token: str
        """
        if client_token is None:
            raise ValueError("Invalid value for `client_token`, must not be `None`")

        self._client_token = client_token

    @property
    def kms_encrypted(self):
        """Gets the kms_encrypted of this CreateCachediSCSIVolumeInput.


        :return: The kms_encrypted of this CreateCachediSCSIVolumeInput.
        :rtype: bool
        """
        return self._kms_encrypted

    @kms_encrypted.setter
    def kms_encrypted(self, kms_encrypted):
        """Sets the kms_encrypted of this CreateCachediSCSIVolumeInput.


        :param kms_encrypted: The kms_encrypted of this CreateCachediSCSIVolumeInput.
        :type kms_encrypted: bool
        """

        self._kms_encrypted = kms_encrypted

    @property
    def kms_key(self):
        """Gets the kms_key of this CreateCachediSCSIVolumeInput.


        :return: The kms_key of this CreateCachediSCSIVolumeInput.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this CreateCachediSCSIVolumeInput.


        :param kms_key: The kms_key of this CreateCachediSCSIVolumeInput.
        :type kms_key: str
        """

        self._kms_key = kms_key

    @property
    def tags(self):
        """Gets the tags of this CreateCachediSCSIVolumeInput.


        :return: The tags of this CreateCachediSCSIVolumeInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCachediSCSIVolumeInput.


        :param tags: The tags of this CreateCachediSCSIVolumeInput.
        :type tags: List
        """

        self._tags = tags
