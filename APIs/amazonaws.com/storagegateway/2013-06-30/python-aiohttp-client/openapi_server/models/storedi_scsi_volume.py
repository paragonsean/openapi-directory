# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cachedi_scsi_volume_volumei_scsi_attributes import CachediSCSIVolumeVolumeiSCSIAttributes
import re
from openapi_server import util


class StorediSCSIVolume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, volume_arn: str=None, volume_id: str=None, volume_type: str=None, volume_status: str=None, volume_attachment_status: str=None, volume_size_in_bytes: int=None, volume_progress: float=None, volume_disk_id: str=None, source_snapshot_id: str=None, preserved_existing_data: bool=None, volumei_scsi_attributes: CachediSCSIVolumeVolumeiSCSIAttributes=None, created_date: datetime=None, volume_used_in_bytes: int=None, kms_key: str=None, target_name: str=None):
        """StorediSCSIVolume - a model defined in OpenAPI

        :param volume_arn: The volume_arn of this StorediSCSIVolume.
        :param volume_id: The volume_id of this StorediSCSIVolume.
        :param volume_type: The volume_type of this StorediSCSIVolume.
        :param volume_status: The volume_status of this StorediSCSIVolume.
        :param volume_attachment_status: The volume_attachment_status of this StorediSCSIVolume.
        :param volume_size_in_bytes: The volume_size_in_bytes of this StorediSCSIVolume.
        :param volume_progress: The volume_progress of this StorediSCSIVolume.
        :param volume_disk_id: The volume_disk_id of this StorediSCSIVolume.
        :param source_snapshot_id: The source_snapshot_id of this StorediSCSIVolume.
        :param preserved_existing_data: The preserved_existing_data of this StorediSCSIVolume.
        :param volumei_scsi_attributes: The volumei_scsi_attributes of this StorediSCSIVolume.
        :param created_date: The created_date of this StorediSCSIVolume.
        :param volume_used_in_bytes: The volume_used_in_bytes of this StorediSCSIVolume.
        :param kms_key: The kms_key of this StorediSCSIVolume.
        :param target_name: The target_name of this StorediSCSIVolume.
        """
        self.openapi_types = {
            'volume_arn': str,
            'volume_id': str,
            'volume_type': str,
            'volume_status': str,
            'volume_attachment_status': str,
            'volume_size_in_bytes': int,
            'volume_progress': float,
            'volume_disk_id': str,
            'source_snapshot_id': str,
            'preserved_existing_data': bool,
            'volumei_scsi_attributes': CachediSCSIVolumeVolumeiSCSIAttributes,
            'created_date': datetime,
            'volume_used_in_bytes': int,
            'kms_key': str,
            'target_name': str
        }

        self.attribute_map = {
            'volume_arn': 'VolumeARN',
            'volume_id': 'VolumeId',
            'volume_type': 'VolumeType',
            'volume_status': 'VolumeStatus',
            'volume_attachment_status': 'VolumeAttachmentStatus',
            'volume_size_in_bytes': 'VolumeSizeInBytes',
            'volume_progress': 'VolumeProgress',
            'volume_disk_id': 'VolumeDiskId',
            'source_snapshot_id': 'SourceSnapshotId',
            'preserved_existing_data': 'PreservedExistingData',
            'volumei_scsi_attributes': 'VolumeiSCSIAttributes',
            'created_date': 'CreatedDate',
            'volume_used_in_bytes': 'VolumeUsedInBytes',
            'kms_key': 'KMSKey',
            'target_name': 'TargetName'
        }

        self._volume_arn = volume_arn
        self._volume_id = volume_id
        self._volume_type = volume_type
        self._volume_status = volume_status
        self._volume_attachment_status = volume_attachment_status
        self._volume_size_in_bytes = volume_size_in_bytes
        self._volume_progress = volume_progress
        self._volume_disk_id = volume_disk_id
        self._source_snapshot_id = source_snapshot_id
        self._preserved_existing_data = preserved_existing_data
        self._volumei_scsi_attributes = volumei_scsi_attributes
        self._created_date = created_date
        self._volume_used_in_bytes = volume_used_in_bytes
        self._kms_key = kms_key
        self._target_name = target_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StorediSCSIVolume':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StorediSCSIVolume of this StorediSCSIVolume.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volume_arn(self):
        """Gets the volume_arn of this StorediSCSIVolume.


        :return: The volume_arn of this StorediSCSIVolume.
        :rtype: str
        """
        return self._volume_arn

    @volume_arn.setter
    def volume_arn(self, volume_arn):
        """Sets the volume_arn of this StorediSCSIVolume.


        :param volume_arn: The volume_arn of this StorediSCSIVolume.
        :type volume_arn: str
        """

        self._volume_arn = volume_arn

    @property
    def volume_id(self):
        """Gets the volume_id of this StorediSCSIVolume.


        :return: The volume_id of this StorediSCSIVolume.
        :rtype: str
        """
        return self._volume_id

    @volume_id.setter
    def volume_id(self, volume_id):
        """Sets the volume_id of this StorediSCSIVolume.


        :param volume_id: The volume_id of this StorediSCSIVolume.
        :type volume_id: str
        """

        self._volume_id = volume_id

    @property
    def volume_type(self):
        """Gets the volume_type of this StorediSCSIVolume.


        :return: The volume_type of this StorediSCSIVolume.
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this StorediSCSIVolume.


        :param volume_type: The volume_type of this StorediSCSIVolume.
        :type volume_type: str
        """

        self._volume_type = volume_type

    @property
    def volume_status(self):
        """Gets the volume_status of this StorediSCSIVolume.


        :return: The volume_status of this StorediSCSIVolume.
        :rtype: str
        """
        return self._volume_status

    @volume_status.setter
    def volume_status(self, volume_status):
        """Sets the volume_status of this StorediSCSIVolume.


        :param volume_status: The volume_status of this StorediSCSIVolume.
        :type volume_status: str
        """

        self._volume_status = volume_status

    @property
    def volume_attachment_status(self):
        """Gets the volume_attachment_status of this StorediSCSIVolume.


        :return: The volume_attachment_status of this StorediSCSIVolume.
        :rtype: str
        """
        return self._volume_attachment_status

    @volume_attachment_status.setter
    def volume_attachment_status(self, volume_attachment_status):
        """Sets the volume_attachment_status of this StorediSCSIVolume.


        :param volume_attachment_status: The volume_attachment_status of this StorediSCSIVolume.
        :type volume_attachment_status: str
        """

        self._volume_attachment_status = volume_attachment_status

    @property
    def volume_size_in_bytes(self):
        """Gets the volume_size_in_bytes of this StorediSCSIVolume.


        :return: The volume_size_in_bytes of this StorediSCSIVolume.
        :rtype: int
        """
        return self._volume_size_in_bytes

    @volume_size_in_bytes.setter
    def volume_size_in_bytes(self, volume_size_in_bytes):
        """Sets the volume_size_in_bytes of this StorediSCSIVolume.


        :param volume_size_in_bytes: The volume_size_in_bytes of this StorediSCSIVolume.
        :type volume_size_in_bytes: int
        """

        self._volume_size_in_bytes = volume_size_in_bytes

    @property
    def volume_progress(self):
        """Gets the volume_progress of this StorediSCSIVolume.


        :return: The volume_progress of this StorediSCSIVolume.
        :rtype: float
        """
        return self._volume_progress

    @volume_progress.setter
    def volume_progress(self, volume_progress):
        """Sets the volume_progress of this StorediSCSIVolume.


        :param volume_progress: The volume_progress of this StorediSCSIVolume.
        :type volume_progress: float
        """

        self._volume_progress = volume_progress

    @property
    def volume_disk_id(self):
        """Gets the volume_disk_id of this StorediSCSIVolume.


        :return: The volume_disk_id of this StorediSCSIVolume.
        :rtype: str
        """
        return self._volume_disk_id

    @volume_disk_id.setter
    def volume_disk_id(self, volume_disk_id):
        """Sets the volume_disk_id of this StorediSCSIVolume.


        :param volume_disk_id: The volume_disk_id of this StorediSCSIVolume.
        :type volume_disk_id: str
        """

        self._volume_disk_id = volume_disk_id

    @property
    def source_snapshot_id(self):
        """Gets the source_snapshot_id of this StorediSCSIVolume.


        :return: The source_snapshot_id of this StorediSCSIVolume.
        :rtype: str
        """
        return self._source_snapshot_id

    @source_snapshot_id.setter
    def source_snapshot_id(self, source_snapshot_id):
        """Sets the source_snapshot_id of this StorediSCSIVolume.


        :param source_snapshot_id: The source_snapshot_id of this StorediSCSIVolume.
        :type source_snapshot_id: str
        """

        self._source_snapshot_id = source_snapshot_id

    @property
    def preserved_existing_data(self):
        """Gets the preserved_existing_data of this StorediSCSIVolume.


        :return: The preserved_existing_data of this StorediSCSIVolume.
        :rtype: bool
        """
        return self._preserved_existing_data

    @preserved_existing_data.setter
    def preserved_existing_data(self, preserved_existing_data):
        """Sets the preserved_existing_data of this StorediSCSIVolume.


        :param preserved_existing_data: The preserved_existing_data of this StorediSCSIVolume.
        :type preserved_existing_data: bool
        """

        self._preserved_existing_data = preserved_existing_data

    @property
    def volumei_scsi_attributes(self):
        """Gets the volumei_scsi_attributes of this StorediSCSIVolume.


        :return: The volumei_scsi_attributes of this StorediSCSIVolume.
        :rtype: CachediSCSIVolumeVolumeiSCSIAttributes
        """
        return self._volumei_scsi_attributes

    @volumei_scsi_attributes.setter
    def volumei_scsi_attributes(self, volumei_scsi_attributes):
        """Sets the volumei_scsi_attributes of this StorediSCSIVolume.


        :param volumei_scsi_attributes: The volumei_scsi_attributes of this StorediSCSIVolume.
        :type volumei_scsi_attributes: CachediSCSIVolumeVolumeiSCSIAttributes
        """

        self._volumei_scsi_attributes = volumei_scsi_attributes

    @property
    def created_date(self):
        """Gets the created_date of this StorediSCSIVolume.


        :return: The created_date of this StorediSCSIVolume.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this StorediSCSIVolume.


        :param created_date: The created_date of this StorediSCSIVolume.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def volume_used_in_bytes(self):
        """Gets the volume_used_in_bytes of this StorediSCSIVolume.


        :return: The volume_used_in_bytes of this StorediSCSIVolume.
        :rtype: int
        """
        return self._volume_used_in_bytes

    @volume_used_in_bytes.setter
    def volume_used_in_bytes(self, volume_used_in_bytes):
        """Sets the volume_used_in_bytes of this StorediSCSIVolume.


        :param volume_used_in_bytes: The volume_used_in_bytes of this StorediSCSIVolume.
        :type volume_used_in_bytes: int
        """

        self._volume_used_in_bytes = volume_used_in_bytes

    @property
    def kms_key(self):
        """Gets the kms_key of this StorediSCSIVolume.

        The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.

        :return: The kms_key of this StorediSCSIVolume.
        :rtype: str
        """
        return self._kms_key

    @kms_key.setter
    def kms_key(self, kms_key):
        """Sets the kms_key of this StorediSCSIVolume.

        The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.

        :param kms_key: The kms_key of this StorediSCSIVolume.
        :type kms_key: str
        """
        if kms_key is not None and len(kms_key) > 2048:
            raise ValueError("Invalid value for `kms_key`, length must be less than or equal to `2048`")
        if kms_key is not None and len(kms_key) < 7:
            raise ValueError("Invalid value for `kms_key`, length must be greater than or equal to `7`")
        if kms_key is not None and not re.search(r'(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)\/(\S+)$)|(^alias\/(\S+)$)', kms_key):
            raise ValueError("Invalid value for `kms_key`, must be a follow pattern or equal to `/(^arn:(aws|aws-cn|aws-us-gov):kms:([a-zA-Z0-9-]+):([0-9]+):(key|alias)\/(\S+)$)|(^alias\/(\S+)$)/`")

        self._kms_key = kms_key

    @property
    def target_name(self):
        """Gets the target_name of this StorediSCSIVolume.


        :return: The target_name of this StorediSCSIVolume.
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this StorediSCSIVolume.


        :param target_name: The target_name of this StorediSCSIVolume.
        :type target_name: str
        """

        self._target_name = target_name
