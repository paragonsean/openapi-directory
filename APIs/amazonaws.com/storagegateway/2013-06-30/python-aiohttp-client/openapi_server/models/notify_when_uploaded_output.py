# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NotifyWhenUploadedOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, file_share_arn: str=None, notification_id: str=None):
        """NotifyWhenUploadedOutput - a model defined in OpenAPI

        :param file_share_arn: The file_share_arn of this NotifyWhenUploadedOutput.
        :param notification_id: The notification_id of this NotifyWhenUploadedOutput.
        """
        self.openapi_types = {
            'file_share_arn': str,
            'notification_id': str
        }

        self.attribute_map = {
            'file_share_arn': 'FileShareARN',
            'notification_id': 'NotificationId'
        }

        self._file_share_arn = file_share_arn
        self._notification_id = notification_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotifyWhenUploadedOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotifyWhenUploadedOutput of this NotifyWhenUploadedOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def file_share_arn(self):
        """Gets the file_share_arn of this NotifyWhenUploadedOutput.

        The Amazon Resource Name (ARN) of the file share.

        :return: The file_share_arn of this NotifyWhenUploadedOutput.
        :rtype: str
        """
        return self._file_share_arn

    @file_share_arn.setter
    def file_share_arn(self, file_share_arn):
        """Sets the file_share_arn of this NotifyWhenUploadedOutput.

        The Amazon Resource Name (ARN) of the file share.

        :param file_share_arn: The file_share_arn of this NotifyWhenUploadedOutput.
        :type file_share_arn: str
        """
        if file_share_arn is not None and len(file_share_arn) > 500:
            raise ValueError("Invalid value for `file_share_arn`, length must be less than or equal to `500`")
        if file_share_arn is not None and len(file_share_arn) < 50:
            raise ValueError("Invalid value for `file_share_arn`, length must be greater than or equal to `50`")

        self._file_share_arn = file_share_arn

    @property
    def notification_id(self):
        """Gets the notification_id of this NotifyWhenUploadedOutput.

        The randomly generated ID of the notification that was sent. This ID is in UUID format.

        :return: The notification_id of this NotifyWhenUploadedOutput.
        :rtype: str
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this NotifyWhenUploadedOutput.

        The randomly generated ID of the notification that was sent. This ID is in UUID format.

        :param notification_id: The notification_id of this NotifyWhenUploadedOutput.
        :type notification_id: str
        """
        if notification_id is not None and len(notification_id) > 2048:
            raise ValueError("Invalid value for `notification_id`, length must be less than or equal to `2048`")
        if notification_id is not None and len(notification_id) < 1:
            raise ValueError("Invalid value for `notification_id`, length must be greater than or equal to `1`")

        self._notification_id = notification_id
