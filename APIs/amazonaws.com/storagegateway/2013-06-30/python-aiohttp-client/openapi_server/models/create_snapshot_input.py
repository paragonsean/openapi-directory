# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSnapshotInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, volume_arn: str=None, snapshot_description: str=None, tags: List=None):
        """CreateSnapshotInput - a model defined in OpenAPI

        :param volume_arn: The volume_arn of this CreateSnapshotInput.
        :param snapshot_description: The snapshot_description of this CreateSnapshotInput.
        :param tags: The tags of this CreateSnapshotInput.
        """
        self.openapi_types = {
            'volume_arn': str,
            'snapshot_description': str,
            'tags': List
        }

        self.attribute_map = {
            'volume_arn': 'VolumeARN',
            'snapshot_description': 'SnapshotDescription',
            'tags': 'Tags'
        }

        self._volume_arn = volume_arn
        self._snapshot_description = snapshot_description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSnapshotInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSnapshotInput of this CreateSnapshotInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volume_arn(self):
        """Gets the volume_arn of this CreateSnapshotInput.


        :return: The volume_arn of this CreateSnapshotInput.
        :rtype: str
        """
        return self._volume_arn

    @volume_arn.setter
    def volume_arn(self, volume_arn):
        """Sets the volume_arn of this CreateSnapshotInput.


        :param volume_arn: The volume_arn of this CreateSnapshotInput.
        :type volume_arn: str
        """
        if volume_arn is None:
            raise ValueError("Invalid value for `volume_arn`, must not be `None`")

        self._volume_arn = volume_arn

    @property
    def snapshot_description(self):
        """Gets the snapshot_description of this CreateSnapshotInput.


        :return: The snapshot_description of this CreateSnapshotInput.
        :rtype: str
        """
        return self._snapshot_description

    @snapshot_description.setter
    def snapshot_description(self, snapshot_description):
        """Sets the snapshot_description of this CreateSnapshotInput.


        :param snapshot_description: The snapshot_description of this CreateSnapshotInput.
        :type snapshot_description: str
        """
        if snapshot_description is None:
            raise ValueError("Invalid value for `snapshot_description`, must not be `None`")

        self._snapshot_description = snapshot_description

    @property
    def tags(self):
        """Gets the tags of this CreateSnapshotInput.


        :return: The tags of this CreateSnapshotInput.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSnapshotInput.


        :param tags: The tags of this CreateSnapshotInput.
        :type tags: List
        """

        self._tags = tags
