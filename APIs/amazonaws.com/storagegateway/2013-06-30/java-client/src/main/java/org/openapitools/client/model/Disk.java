/*
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a gateway&#39;s local disk.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:02.944831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Disk {
  public static final String SERIALIZED_NAME_DISK_ID = "DiskId";
  @SerializedName(SERIALIZED_NAME_DISK_ID)
  private String diskId;

  public static final String SERIALIZED_NAME_DISK_PATH = "DiskPath";
  @SerializedName(SERIALIZED_NAME_DISK_PATH)
  private String diskPath;

  public static final String SERIALIZED_NAME_DISK_NODE = "DiskNode";
  @SerializedName(SERIALIZED_NAME_DISK_NODE)
  private String diskNode;

  public static final String SERIALIZED_NAME_DISK_STATUS = "DiskStatus";
  @SerializedName(SERIALIZED_NAME_DISK_STATUS)
  private String diskStatus;

  public static final String SERIALIZED_NAME_DISK_SIZE_IN_BYTES = "DiskSizeInBytes";
  @SerializedName(SERIALIZED_NAME_DISK_SIZE_IN_BYTES)
  private Integer diskSizeInBytes;

  public static final String SERIALIZED_NAME_DISK_ALLOCATION_TYPE = "DiskAllocationType";
  @SerializedName(SERIALIZED_NAME_DISK_ALLOCATION_TYPE)
  private String diskAllocationType;

  public static final String SERIALIZED_NAME_DISK_ALLOCATION_RESOURCE = "DiskAllocationResource";
  @SerializedName(SERIALIZED_NAME_DISK_ALLOCATION_RESOURCE)
  private String diskAllocationResource;

  public static final String SERIALIZED_NAME_DISK_ATTRIBUTE_LIST = "DiskAttributeList";
  @SerializedName(SERIALIZED_NAME_DISK_ATTRIBUTE_LIST)
  private List<String> diskAttributeList = new ArrayList<>();

  public Disk() {
  }

  public Disk diskId(String diskId) {
    this.diskId = diskId;
    return this;
  }

  /**
   * Get diskId
   * @return diskId
   */
  @javax.annotation.Nullable
  public String getDiskId() {
    return diskId;
  }

  public void setDiskId(String diskId) {
    this.diskId = diskId;
  }


  public Disk diskPath(String diskPath) {
    this.diskPath = diskPath;
    return this;
  }

  /**
   * Get diskPath
   * @return diskPath
   */
  @javax.annotation.Nullable
  public String getDiskPath() {
    return diskPath;
  }

  public void setDiskPath(String diskPath) {
    this.diskPath = diskPath;
  }


  public Disk diskNode(String diskNode) {
    this.diskNode = diskNode;
    return this;
  }

  /**
   * Get diskNode
   * @return diskNode
   */
  @javax.annotation.Nullable
  public String getDiskNode() {
    return diskNode;
  }

  public void setDiskNode(String diskNode) {
    this.diskNode = diskNode;
  }


  public Disk diskStatus(String diskStatus) {
    this.diskStatus = diskStatus;
    return this;
  }

  /**
   * Get diskStatus
   * @return diskStatus
   */
  @javax.annotation.Nullable
  public String getDiskStatus() {
    return diskStatus;
  }

  public void setDiskStatus(String diskStatus) {
    this.diskStatus = diskStatus;
  }


  public Disk diskSizeInBytes(Integer diskSizeInBytes) {
    this.diskSizeInBytes = diskSizeInBytes;
    return this;
  }

  /**
   * Get diskSizeInBytes
   * @return diskSizeInBytes
   */
  @javax.annotation.Nullable
  public Integer getDiskSizeInBytes() {
    return diskSizeInBytes;
  }

  public void setDiskSizeInBytes(Integer diskSizeInBytes) {
    this.diskSizeInBytes = diskSizeInBytes;
  }


  public Disk diskAllocationType(String diskAllocationType) {
    this.diskAllocationType = diskAllocationType;
    return this;
  }

  /**
   * &lt;p&gt;One of the &lt;code&gt;DiskAllocationType&lt;/code&gt; enumeration values that identifies how a local disk is used.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;UPLOAD_BUFFER&lt;/code&gt; | &lt;code&gt;CACHE_STORAGE&lt;/code&gt; &lt;/p&gt;
   * @return diskAllocationType
   */
  @javax.annotation.Nullable
  public String getDiskAllocationType() {
    return diskAllocationType;
  }

  public void setDiskAllocationType(String diskAllocationType) {
    this.diskAllocationType = diskAllocationType;
  }


  public Disk diskAllocationResource(String diskAllocationResource) {
    this.diskAllocationResource = diskAllocationResource;
    return this;
  }

  /**
   * Get diskAllocationResource
   * @return diskAllocationResource
   */
  @javax.annotation.Nullable
  public String getDiskAllocationResource() {
    return diskAllocationResource;
  }

  public void setDiskAllocationResource(String diskAllocationResource) {
    this.diskAllocationResource = diskAllocationResource;
  }


  public Disk diskAttributeList(List<String> diskAttributeList) {
    this.diskAttributeList = diskAttributeList;
    return this;
  }

  public Disk addDiskAttributeListItem(String diskAttributeListItem) {
    if (this.diskAttributeList == null) {
      this.diskAttributeList = new ArrayList<>();
    }
    this.diskAttributeList.add(diskAttributeListItem);
    return this;
  }

  /**
   * A list of values that represents attributes of a local disk.
   * @return diskAttributeList
   */
  @javax.annotation.Nullable
  public List<String> getDiskAttributeList() {
    return diskAttributeList;
  }

  public void setDiskAttributeList(List<String> diskAttributeList) {
    this.diskAttributeList = diskAttributeList;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Disk disk = (Disk) o;
    return Objects.equals(this.diskId, disk.diskId) &&
        Objects.equals(this.diskPath, disk.diskPath) &&
        Objects.equals(this.diskNode, disk.diskNode) &&
        Objects.equals(this.diskStatus, disk.diskStatus) &&
        Objects.equals(this.diskSizeInBytes, disk.diskSizeInBytes) &&
        Objects.equals(this.diskAllocationType, disk.diskAllocationType) &&
        Objects.equals(this.diskAllocationResource, disk.diskAllocationResource) &&
        Objects.equals(this.diskAttributeList, disk.diskAttributeList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskId, diskPath, diskNode, diskStatus, diskSizeInBytes, diskAllocationType, diskAllocationResource, diskAttributeList);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Disk {\n");
    sb.append("    diskId: ").append(toIndentedString(diskId)).append("\n");
    sb.append("    diskPath: ").append(toIndentedString(diskPath)).append("\n");
    sb.append("    diskNode: ").append(toIndentedString(diskNode)).append("\n");
    sb.append("    diskStatus: ").append(toIndentedString(diskStatus)).append("\n");
    sb.append("    diskSizeInBytes: ").append(toIndentedString(diskSizeInBytes)).append("\n");
    sb.append("    diskAllocationType: ").append(toIndentedString(diskAllocationType)).append("\n");
    sb.append("    diskAllocationResource: ").append(toIndentedString(diskAllocationResource)).append("\n");
    sb.append("    diskAttributeList: ").append(toIndentedString(diskAttributeList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DiskId");
    openapiFields.add("DiskPath");
    openapiFields.add("DiskNode");
    openapiFields.add("DiskStatus");
    openapiFields.add("DiskSizeInBytes");
    openapiFields.add("DiskAllocationType");
    openapiFields.add("DiskAllocationResource");
    openapiFields.add("DiskAttributeList");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Disk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Disk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Disk is not found in the empty JSON string", Disk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Disk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Disk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DiskId`
      if (jsonObj.get("DiskId") != null && !jsonObj.get("DiskId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskId"));
      }
      // validate the optional field `DiskPath`
      if (jsonObj.get("DiskPath") != null && !jsonObj.get("DiskPath").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskPath"));
      }
      // validate the optional field `DiskNode`
      if (jsonObj.get("DiskNode") != null && !jsonObj.get("DiskNode").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskNode"));
      }
      // validate the optional field `DiskStatus`
      if (jsonObj.get("DiskStatus") != null && !jsonObj.get("DiskStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskStatus"));
      }
      // validate the optional field `DiskSizeInBytes`
      if (jsonObj.get("DiskSizeInBytes") != null && !jsonObj.get("DiskSizeInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DiskSizeInBytes"));
      }
      if ((jsonObj.get("DiskAllocationType") != null && !jsonObj.get("DiskAllocationType").isJsonNull()) && !jsonObj.get("DiskAllocationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DiskAllocationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DiskAllocationType").toString()));
      }
      // validate the optional field `DiskAllocationResource`
      if (jsonObj.get("DiskAllocationResource") != null && !jsonObj.get("DiskAllocationResource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DiskAllocationResource"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("DiskAttributeList") != null && !jsonObj.get("DiskAttributeList").isJsonNull() && !jsonObj.get("DiskAttributeList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DiskAttributeList` to be an array in the JSON string but got `%s`", jsonObj.get("DiskAttributeList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Disk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Disk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Disk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Disk.class));

       return (TypeAdapter<T>) new TypeAdapter<Disk>() {
           @Override
           public void write(JsonWriter out, Disk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Disk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Disk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Disk
   * @throws IOException if the JSON string is invalid with respect to Disk
   */
  public static Disk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Disk.class);
  }

  /**
   * Convert an instance of Disk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

