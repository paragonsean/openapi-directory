/*
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateNFSFileShareInputCacheAttributes;
import org.openapitools.client.model.CreateNFSFileShareInputNFSFileShareDefaults;
import org.openapitools.client.model.ObjectACL;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateNFSFileShareInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:02.944831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateNFSFileShareInput {
  public static final String SERIALIZED_NAME_CLIENT_TOKEN = "ClientToken";
  @SerializedName(SERIALIZED_NAME_CLIENT_TOKEN)
  private String clientToken;

  public static final String SERIALIZED_NAME_NF_S_FILE_SHARE_DEFAULTS = "NFSFileShareDefaults";
  @SerializedName(SERIALIZED_NAME_NF_S_FILE_SHARE_DEFAULTS)
  private CreateNFSFileShareInputNFSFileShareDefaults nfSFileShareDefaults;

  public static final String SERIALIZED_NAME_GATEWAY_A_R_N = "GatewayARN";
  @SerializedName(SERIALIZED_NAME_GATEWAY_A_R_N)
  private String gatewayARN;

  public static final String SERIALIZED_NAME_KM_S_ENCRYPTED = "KMSEncrypted";
  @SerializedName(SERIALIZED_NAME_KM_S_ENCRYPTED)
  private Boolean kmSEncrypted;

  public static final String SERIALIZED_NAME_KM_S_KEY = "KMSKey";
  @SerializedName(SERIALIZED_NAME_KM_S_KEY)
  private String kmSKey;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_LOCATION_A_R_N = "LocationARN";
  @SerializedName(SERIALIZED_NAME_LOCATION_A_R_N)
  private String locationARN;

  public static final String SERIALIZED_NAME_DEFAULT_STORAGE_CLASS = "DefaultStorageClass";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STORAGE_CLASS)
  private String defaultStorageClass;

  public static final String SERIALIZED_NAME_OBJECT_A_C_L = "ObjectACL";
  @SerializedName(SERIALIZED_NAME_OBJECT_A_C_L)
  private ObjectACL objectACL;

  public static final String SERIALIZED_NAME_CLIENT_LIST = "ClientList";
  @SerializedName(SERIALIZED_NAME_CLIENT_LIST)
  private List clientList;

  public static final String SERIALIZED_NAME_SQUASH = "Squash";
  @SerializedName(SERIALIZED_NAME_SQUASH)
  private String squash;

  public static final String SERIALIZED_NAME_READ_ONLY = "ReadOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_GUESS_M_I_M_E_TYPE_ENABLED = "GuessMIMETypeEnabled";
  @SerializedName(SERIALIZED_NAME_GUESS_M_I_M_E_TYPE_ENABLED)
  private Boolean guessMIMETypeEnabled;

  public static final String SERIALIZED_NAME_REQUESTER_PAYS = "RequesterPays";
  @SerializedName(SERIALIZED_NAME_REQUESTER_PAYS)
  private Boolean requesterPays;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_FILE_SHARE_NAME = "FileShareName";
  @SerializedName(SERIALIZED_NAME_FILE_SHARE_NAME)
  private String fileShareName;

  public static final String SERIALIZED_NAME_CACHE_ATTRIBUTES = "CacheAttributes";
  @SerializedName(SERIALIZED_NAME_CACHE_ATTRIBUTES)
  private CreateNFSFileShareInputCacheAttributes cacheAttributes;

  public static final String SERIALIZED_NAME_NOTIFICATION_POLICY = "NotificationPolicy";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_POLICY)
  private String notificationPolicy;

  public static final String SERIALIZED_NAME_VP_C_ENDPOINT_D_N_S_NAME = "VPCEndpointDNSName";
  @SerializedName(SERIALIZED_NAME_VP_C_ENDPOINT_D_N_S_NAME)
  private String vpCEndpointDNSName;

  public static final String SERIALIZED_NAME_BUCKET_REGION = "BucketRegion";
  @SerializedName(SERIALIZED_NAME_BUCKET_REGION)
  private String bucketRegion;

  public static final String SERIALIZED_NAME_AUDIT_DESTINATION_A_R_N = "AuditDestinationARN";
  @SerializedName(SERIALIZED_NAME_AUDIT_DESTINATION_A_R_N)
  private String auditDestinationARN;

  public CreateNFSFileShareInput() {
  }

  public CreateNFSFileShareInput clientToken(String clientToken) {
    this.clientToken = clientToken;
    return this;
  }

  /**
   * Get clientToken
   * @return clientToken
   */
  @javax.annotation.Nonnull
  public String getClientToken() {
    return clientToken;
  }

  public void setClientToken(String clientToken) {
    this.clientToken = clientToken;
  }


  public CreateNFSFileShareInput nfSFileShareDefaults(CreateNFSFileShareInputNFSFileShareDefaults nfSFileShareDefaults) {
    this.nfSFileShareDefaults = nfSFileShareDefaults;
    return this;
  }

  /**
   * Get nfSFileShareDefaults
   * @return nfSFileShareDefaults
   */
  @javax.annotation.Nullable
  public CreateNFSFileShareInputNFSFileShareDefaults getNfSFileShareDefaults() {
    return nfSFileShareDefaults;
  }

  public void setNfSFileShareDefaults(CreateNFSFileShareInputNFSFileShareDefaults nfSFileShareDefaults) {
    this.nfSFileShareDefaults = nfSFileShareDefaults;
  }


  public CreateNFSFileShareInput gatewayARN(String gatewayARN) {
    this.gatewayARN = gatewayARN;
    return this;
  }

  /**
   * Get gatewayARN
   * @return gatewayARN
   */
  @javax.annotation.Nonnull
  public String getGatewayARN() {
    return gatewayARN;
  }

  public void setGatewayARN(String gatewayARN) {
    this.gatewayARN = gatewayARN;
  }


  public CreateNFSFileShareInput kmSEncrypted(Boolean kmSEncrypted) {
    this.kmSEncrypted = kmSEncrypted;
    return this;
  }

  /**
   * Get kmSEncrypted
   * @return kmSEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getKmSEncrypted() {
    return kmSEncrypted;
  }

  public void setKmSEncrypted(Boolean kmSEncrypted) {
    this.kmSEncrypted = kmSEncrypted;
  }


  public CreateNFSFileShareInput kmSKey(String kmSKey) {
    this.kmSKey = kmSKey;
    return this;
  }

  /**
   * Get kmSKey
   * @return kmSKey
   */
  @javax.annotation.Nullable
  public String getKmSKey() {
    return kmSKey;
  }

  public void setKmSKey(String kmSKey) {
    this.kmSKey = kmSKey;
  }


  public CreateNFSFileShareInput role(String role) {
    this.role = role;
    return this;
  }

  /**
   * Get role
   * @return role
   */
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public CreateNFSFileShareInput locationARN(String locationARN) {
    this.locationARN = locationARN;
    return this;
  }

  /**
   * Get locationARN
   * @return locationARN
   */
  @javax.annotation.Nonnull
  public String getLocationARN() {
    return locationARN;
  }

  public void setLocationARN(String locationARN) {
    this.locationARN = locationARN;
  }


  public CreateNFSFileShareInput defaultStorageClass(String defaultStorageClass) {
    this.defaultStorageClass = defaultStorageClass;
    return this;
  }

  /**
   * Get defaultStorageClass
   * @return defaultStorageClass
   */
  @javax.annotation.Nullable
  public String getDefaultStorageClass() {
    return defaultStorageClass;
  }

  public void setDefaultStorageClass(String defaultStorageClass) {
    this.defaultStorageClass = defaultStorageClass;
  }


  public CreateNFSFileShareInput objectACL(ObjectACL objectACL) {
    this.objectACL = objectACL;
    return this;
  }

  /**
   * Get objectACL
   * @return objectACL
   */
  @javax.annotation.Nullable
  public ObjectACL getObjectACL() {
    return objectACL;
  }

  public void setObjectACL(ObjectACL objectACL) {
    this.objectACL = objectACL;
  }


  public CreateNFSFileShareInput clientList(List clientList) {
    this.clientList = clientList;
    return this;
  }

  /**
   * Get clientList
   * @return clientList
   */
  @javax.annotation.Nullable
  public List getClientList() {
    return clientList;
  }

  public void setClientList(List clientList) {
    this.clientList = clientList;
  }


  public CreateNFSFileShareInput squash(String squash) {
    this.squash = squash;
    return this;
  }

  /**
   * Get squash
   * @return squash
   */
  @javax.annotation.Nullable
  public String getSquash() {
    return squash;
  }

  public void setSquash(String squash) {
    this.squash = squash;
  }


  public CreateNFSFileShareInput readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public CreateNFSFileShareInput guessMIMETypeEnabled(Boolean guessMIMETypeEnabled) {
    this.guessMIMETypeEnabled = guessMIMETypeEnabled;
    return this;
  }

  /**
   * Get guessMIMETypeEnabled
   * @return guessMIMETypeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGuessMIMETypeEnabled() {
    return guessMIMETypeEnabled;
  }

  public void setGuessMIMETypeEnabled(Boolean guessMIMETypeEnabled) {
    this.guessMIMETypeEnabled = guessMIMETypeEnabled;
  }


  public CreateNFSFileShareInput requesterPays(Boolean requesterPays) {
    this.requesterPays = requesterPays;
    return this;
  }

  /**
   * Get requesterPays
   * @return requesterPays
   */
  @javax.annotation.Nullable
  public Boolean getRequesterPays() {
    return requesterPays;
  }

  public void setRequesterPays(Boolean requesterPays) {
    this.requesterPays = requesterPays;
  }


  public CreateNFSFileShareInput tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public CreateNFSFileShareInput fileShareName(String fileShareName) {
    this.fileShareName = fileShareName;
    return this;
  }

  /**
   * Get fileShareName
   * @return fileShareName
   */
  @javax.annotation.Nullable
  public String getFileShareName() {
    return fileShareName;
  }

  public void setFileShareName(String fileShareName) {
    this.fileShareName = fileShareName;
  }


  public CreateNFSFileShareInput cacheAttributes(CreateNFSFileShareInputCacheAttributes cacheAttributes) {
    this.cacheAttributes = cacheAttributes;
    return this;
  }

  /**
   * Get cacheAttributes
   * @return cacheAttributes
   */
  @javax.annotation.Nullable
  public CreateNFSFileShareInputCacheAttributes getCacheAttributes() {
    return cacheAttributes;
  }

  public void setCacheAttributes(CreateNFSFileShareInputCacheAttributes cacheAttributes) {
    this.cacheAttributes = cacheAttributes;
  }


  public CreateNFSFileShareInput notificationPolicy(String notificationPolicy) {
    this.notificationPolicy = notificationPolicy;
    return this;
  }

  /**
   * Get notificationPolicy
   * @return notificationPolicy
   */
  @javax.annotation.Nullable
  public String getNotificationPolicy() {
    return notificationPolicy;
  }

  public void setNotificationPolicy(String notificationPolicy) {
    this.notificationPolicy = notificationPolicy;
  }


  public CreateNFSFileShareInput vpCEndpointDNSName(String vpCEndpointDNSName) {
    this.vpCEndpointDNSName = vpCEndpointDNSName;
    return this;
  }

  /**
   * Get vpCEndpointDNSName
   * @return vpCEndpointDNSName
   */
  @javax.annotation.Nullable
  public String getVpCEndpointDNSName() {
    return vpCEndpointDNSName;
  }

  public void setVpCEndpointDNSName(String vpCEndpointDNSName) {
    this.vpCEndpointDNSName = vpCEndpointDNSName;
  }


  public CreateNFSFileShareInput bucketRegion(String bucketRegion) {
    this.bucketRegion = bucketRegion;
    return this;
  }

  /**
   * Get bucketRegion
   * @return bucketRegion
   */
  @javax.annotation.Nullable
  public String getBucketRegion() {
    return bucketRegion;
  }

  public void setBucketRegion(String bucketRegion) {
    this.bucketRegion = bucketRegion;
  }


  public CreateNFSFileShareInput auditDestinationARN(String auditDestinationARN) {
    this.auditDestinationARN = auditDestinationARN;
    return this;
  }

  /**
   * Get auditDestinationARN
   * @return auditDestinationARN
   */
  @javax.annotation.Nullable
  public String getAuditDestinationARN() {
    return auditDestinationARN;
  }

  public void setAuditDestinationARN(String auditDestinationARN) {
    this.auditDestinationARN = auditDestinationARN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateNFSFileShareInput createNFSFileShareInput = (CreateNFSFileShareInput) o;
    return Objects.equals(this.clientToken, createNFSFileShareInput.clientToken) &&
        Objects.equals(this.nfSFileShareDefaults, createNFSFileShareInput.nfSFileShareDefaults) &&
        Objects.equals(this.gatewayARN, createNFSFileShareInput.gatewayARN) &&
        Objects.equals(this.kmSEncrypted, createNFSFileShareInput.kmSEncrypted) &&
        Objects.equals(this.kmSKey, createNFSFileShareInput.kmSKey) &&
        Objects.equals(this.role, createNFSFileShareInput.role) &&
        Objects.equals(this.locationARN, createNFSFileShareInput.locationARN) &&
        Objects.equals(this.defaultStorageClass, createNFSFileShareInput.defaultStorageClass) &&
        Objects.equals(this.objectACL, createNFSFileShareInput.objectACL) &&
        Objects.equals(this.clientList, createNFSFileShareInput.clientList) &&
        Objects.equals(this.squash, createNFSFileShareInput.squash) &&
        Objects.equals(this.readOnly, createNFSFileShareInput.readOnly) &&
        Objects.equals(this.guessMIMETypeEnabled, createNFSFileShareInput.guessMIMETypeEnabled) &&
        Objects.equals(this.requesterPays, createNFSFileShareInput.requesterPays) &&
        Objects.equals(this.tags, createNFSFileShareInput.tags) &&
        Objects.equals(this.fileShareName, createNFSFileShareInput.fileShareName) &&
        Objects.equals(this.cacheAttributes, createNFSFileShareInput.cacheAttributes) &&
        Objects.equals(this.notificationPolicy, createNFSFileShareInput.notificationPolicy) &&
        Objects.equals(this.vpCEndpointDNSName, createNFSFileShareInput.vpCEndpointDNSName) &&
        Objects.equals(this.bucketRegion, createNFSFileShareInput.bucketRegion) &&
        Objects.equals(this.auditDestinationARN, createNFSFileShareInput.auditDestinationARN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientToken, nfSFileShareDefaults, gatewayARN, kmSEncrypted, kmSKey, role, locationARN, defaultStorageClass, objectACL, clientList, squash, readOnly, guessMIMETypeEnabled, requesterPays, tags, fileShareName, cacheAttributes, notificationPolicy, vpCEndpointDNSName, bucketRegion, auditDestinationARN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateNFSFileShareInput {\n");
    sb.append("    clientToken: ").append(toIndentedString(clientToken)).append("\n");
    sb.append("    nfSFileShareDefaults: ").append(toIndentedString(nfSFileShareDefaults)).append("\n");
    sb.append("    gatewayARN: ").append(toIndentedString(gatewayARN)).append("\n");
    sb.append("    kmSEncrypted: ").append(toIndentedString(kmSEncrypted)).append("\n");
    sb.append("    kmSKey: ").append(toIndentedString(kmSKey)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    locationARN: ").append(toIndentedString(locationARN)).append("\n");
    sb.append("    defaultStorageClass: ").append(toIndentedString(defaultStorageClass)).append("\n");
    sb.append("    objectACL: ").append(toIndentedString(objectACL)).append("\n");
    sb.append("    clientList: ").append(toIndentedString(clientList)).append("\n");
    sb.append("    squash: ").append(toIndentedString(squash)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    guessMIMETypeEnabled: ").append(toIndentedString(guessMIMETypeEnabled)).append("\n");
    sb.append("    requesterPays: ").append(toIndentedString(requesterPays)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    fileShareName: ").append(toIndentedString(fileShareName)).append("\n");
    sb.append("    cacheAttributes: ").append(toIndentedString(cacheAttributes)).append("\n");
    sb.append("    notificationPolicy: ").append(toIndentedString(notificationPolicy)).append("\n");
    sb.append("    vpCEndpointDNSName: ").append(toIndentedString(vpCEndpointDNSName)).append("\n");
    sb.append("    bucketRegion: ").append(toIndentedString(bucketRegion)).append("\n");
    sb.append("    auditDestinationARN: ").append(toIndentedString(auditDestinationARN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClientToken");
    openapiFields.add("NFSFileShareDefaults");
    openapiFields.add("GatewayARN");
    openapiFields.add("KMSEncrypted");
    openapiFields.add("KMSKey");
    openapiFields.add("Role");
    openapiFields.add("LocationARN");
    openapiFields.add("DefaultStorageClass");
    openapiFields.add("ObjectACL");
    openapiFields.add("ClientList");
    openapiFields.add("Squash");
    openapiFields.add("ReadOnly");
    openapiFields.add("GuessMIMETypeEnabled");
    openapiFields.add("RequesterPays");
    openapiFields.add("Tags");
    openapiFields.add("FileShareName");
    openapiFields.add("CacheAttributes");
    openapiFields.add("NotificationPolicy");
    openapiFields.add("VPCEndpointDNSName");
    openapiFields.add("BucketRegion");
    openapiFields.add("AuditDestinationARN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClientToken");
    openapiRequiredFields.add("GatewayARN");
    openapiRequiredFields.add("Role");
    openapiRequiredFields.add("LocationARN");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateNFSFileShareInput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateNFSFileShareInput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateNFSFileShareInput is not found in the empty JSON string", CreateNFSFileShareInput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateNFSFileShareInput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateNFSFileShareInput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateNFSFileShareInput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ClientToken`
      String.validateJsonElement(jsonObj.get("ClientToken"));
      // validate the optional field `NFSFileShareDefaults`
      if (jsonObj.get("NFSFileShareDefaults") != null && !jsonObj.get("NFSFileShareDefaults").isJsonNull()) {
        CreateNFSFileShareInputNFSFileShareDefaults.validateJsonElement(jsonObj.get("NFSFileShareDefaults"));
      }
      // validate the required field `GatewayARN`
      String.validateJsonElement(jsonObj.get("GatewayARN"));
      // validate the optional field `KMSEncrypted`
      if (jsonObj.get("KMSEncrypted") != null && !jsonObj.get("KMSEncrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("KMSEncrypted"));
      }
      // validate the optional field `KMSKey`
      if (jsonObj.get("KMSKey") != null && !jsonObj.get("KMSKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("KMSKey"));
      }
      // validate the required field `Role`
      String.validateJsonElement(jsonObj.get("Role"));
      // validate the required field `LocationARN`
      String.validateJsonElement(jsonObj.get("LocationARN"));
      // validate the optional field `DefaultStorageClass`
      if (jsonObj.get("DefaultStorageClass") != null && !jsonObj.get("DefaultStorageClass").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultStorageClass"));
      }
      // validate the optional field `ObjectACL`
      if (jsonObj.get("ObjectACL") != null && !jsonObj.get("ObjectACL").isJsonNull()) {
        ObjectACL.validateJsonElement(jsonObj.get("ObjectACL"));
      }
      // validate the optional field `ClientList`
      if (jsonObj.get("ClientList") != null && !jsonObj.get("ClientList").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ClientList"));
      }
      // validate the optional field `Squash`
      if (jsonObj.get("Squash") != null && !jsonObj.get("Squash").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Squash"));
      }
      // validate the optional field `ReadOnly`
      if (jsonObj.get("ReadOnly") != null && !jsonObj.get("ReadOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ReadOnly"));
      }
      // validate the optional field `GuessMIMETypeEnabled`
      if (jsonObj.get("GuessMIMETypeEnabled") != null && !jsonObj.get("GuessMIMETypeEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("GuessMIMETypeEnabled"));
      }
      // validate the optional field `RequesterPays`
      if (jsonObj.get("RequesterPays") != null && !jsonObj.get("RequesterPays").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RequesterPays"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `FileShareName`
      if (jsonObj.get("FileShareName") != null && !jsonObj.get("FileShareName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileShareName"));
      }
      // validate the optional field `CacheAttributes`
      if (jsonObj.get("CacheAttributes") != null && !jsonObj.get("CacheAttributes").isJsonNull()) {
        CreateNFSFileShareInputCacheAttributes.validateJsonElement(jsonObj.get("CacheAttributes"));
      }
      // validate the optional field `NotificationPolicy`
      if (jsonObj.get("NotificationPolicy") != null && !jsonObj.get("NotificationPolicy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NotificationPolicy"));
      }
      // validate the optional field `VPCEndpointDNSName`
      if (jsonObj.get("VPCEndpointDNSName") != null && !jsonObj.get("VPCEndpointDNSName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VPCEndpointDNSName"));
      }
      // validate the optional field `BucketRegion`
      if (jsonObj.get("BucketRegion") != null && !jsonObj.get("BucketRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketRegion"));
      }
      // validate the optional field `AuditDestinationARN`
      if (jsonObj.get("AuditDestinationARN") != null && !jsonObj.get("AuditDestinationARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuditDestinationARN"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateNFSFileShareInput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateNFSFileShareInput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateNFSFileShareInput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateNFSFileShareInput.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateNFSFileShareInput>() {
           @Override
           public void write(JsonWriter out, CreateNFSFileShareInput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateNFSFileShareInput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateNFSFileShareInput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateNFSFileShareInput
   * @throws IOException if the JSON string is invalid with respect to CreateNFSFileShareInput
   */
  public static CreateNFSFileShareInput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateNFSFileShareInput.class);
  }

  /**
   * Convert an instance of CreateNFSFileShareInput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

