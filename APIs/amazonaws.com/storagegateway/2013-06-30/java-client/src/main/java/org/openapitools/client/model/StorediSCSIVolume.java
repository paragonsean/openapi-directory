/*
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.CachediSCSIVolumeVolumeiSCSIAttributes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes an iSCSI stored volume.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:02.944831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StorediSCSIVolume {
  public static final String SERIALIZED_NAME_VOLUME_A_R_N = "VolumeARN";
  @SerializedName(SERIALIZED_NAME_VOLUME_A_R_N)
  private String volumeARN;

  public static final String SERIALIZED_NAME_VOLUME_ID = "VolumeId";
  @SerializedName(SERIALIZED_NAME_VOLUME_ID)
  private String volumeId;

  public static final String SERIALIZED_NAME_VOLUME_TYPE = "VolumeType";
  @SerializedName(SERIALIZED_NAME_VOLUME_TYPE)
  private String volumeType;

  public static final String SERIALIZED_NAME_VOLUME_STATUS = "VolumeStatus";
  @SerializedName(SERIALIZED_NAME_VOLUME_STATUS)
  private String volumeStatus;

  public static final String SERIALIZED_NAME_VOLUME_ATTACHMENT_STATUS = "VolumeAttachmentStatus";
  @SerializedName(SERIALIZED_NAME_VOLUME_ATTACHMENT_STATUS)
  private String volumeAttachmentStatus;

  public static final String SERIALIZED_NAME_VOLUME_SIZE_IN_BYTES = "VolumeSizeInBytes";
  @SerializedName(SERIALIZED_NAME_VOLUME_SIZE_IN_BYTES)
  private Integer volumeSizeInBytes;

  public static final String SERIALIZED_NAME_VOLUME_PROGRESS = "VolumeProgress";
  @SerializedName(SERIALIZED_NAME_VOLUME_PROGRESS)
  private Double volumeProgress;

  public static final String SERIALIZED_NAME_VOLUME_DISK_ID = "VolumeDiskId";
  @SerializedName(SERIALIZED_NAME_VOLUME_DISK_ID)
  private String volumeDiskId;

  public static final String SERIALIZED_NAME_SOURCE_SNAPSHOT_ID = "SourceSnapshotId";
  @SerializedName(SERIALIZED_NAME_SOURCE_SNAPSHOT_ID)
  private String sourceSnapshotId;

  public static final String SERIALIZED_NAME_PRESERVED_EXISTING_DATA = "PreservedExistingData";
  @SerializedName(SERIALIZED_NAME_PRESERVED_EXISTING_DATA)
  private Boolean preservedExistingData;

  public static final String SERIALIZED_NAME_VOLUMEI_S_C_S_I_ATTRIBUTES = "VolumeiSCSIAttributes";
  @SerializedName(SERIALIZED_NAME_VOLUMEI_S_C_S_I_ATTRIBUTES)
  private CachediSCSIVolumeVolumeiSCSIAttributes volumeiSCSIAttributes;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_VOLUME_USED_IN_BYTES = "VolumeUsedInBytes";
  @SerializedName(SERIALIZED_NAME_VOLUME_USED_IN_BYTES)
  private Integer volumeUsedInBytes;

  public static final String SERIALIZED_NAME_KM_S_KEY = "KMSKey";
  @SerializedName(SERIALIZED_NAME_KM_S_KEY)
  private String kmSKey;

  public static final String SERIALIZED_NAME_TARGET_NAME = "TargetName";
  @SerializedName(SERIALIZED_NAME_TARGET_NAME)
  private String targetName;

  public StorediSCSIVolume() {
  }

  public StorediSCSIVolume volumeARN(String volumeARN) {
    this.volumeARN = volumeARN;
    return this;
  }

  /**
   * Get volumeARN
   * @return volumeARN
   */
  @javax.annotation.Nullable
  public String getVolumeARN() {
    return volumeARN;
  }

  public void setVolumeARN(String volumeARN) {
    this.volumeARN = volumeARN;
  }


  public StorediSCSIVolume volumeId(String volumeId) {
    this.volumeId = volumeId;
    return this;
  }

  /**
   * Get volumeId
   * @return volumeId
   */
  @javax.annotation.Nullable
  public String getVolumeId() {
    return volumeId;
  }

  public void setVolumeId(String volumeId) {
    this.volumeId = volumeId;
  }


  public StorediSCSIVolume volumeType(String volumeType) {
    this.volumeType = volumeType;
    return this;
  }

  /**
   * Get volumeType
   * @return volumeType
   */
  @javax.annotation.Nullable
  public String getVolumeType() {
    return volumeType;
  }

  public void setVolumeType(String volumeType) {
    this.volumeType = volumeType;
  }


  public StorediSCSIVolume volumeStatus(String volumeStatus) {
    this.volumeStatus = volumeStatus;
    return this;
  }

  /**
   * Get volumeStatus
   * @return volumeStatus
   */
  @javax.annotation.Nullable
  public String getVolumeStatus() {
    return volumeStatus;
  }

  public void setVolumeStatus(String volumeStatus) {
    this.volumeStatus = volumeStatus;
  }


  public StorediSCSIVolume volumeAttachmentStatus(String volumeAttachmentStatus) {
    this.volumeAttachmentStatus = volumeAttachmentStatus;
    return this;
  }

  /**
   * Get volumeAttachmentStatus
   * @return volumeAttachmentStatus
   */
  @javax.annotation.Nullable
  public String getVolumeAttachmentStatus() {
    return volumeAttachmentStatus;
  }

  public void setVolumeAttachmentStatus(String volumeAttachmentStatus) {
    this.volumeAttachmentStatus = volumeAttachmentStatus;
  }


  public StorediSCSIVolume volumeSizeInBytes(Integer volumeSizeInBytes) {
    this.volumeSizeInBytes = volumeSizeInBytes;
    return this;
  }

  /**
   * Get volumeSizeInBytes
   * @return volumeSizeInBytes
   */
  @javax.annotation.Nullable
  public Integer getVolumeSizeInBytes() {
    return volumeSizeInBytes;
  }

  public void setVolumeSizeInBytes(Integer volumeSizeInBytes) {
    this.volumeSizeInBytes = volumeSizeInBytes;
  }


  public StorediSCSIVolume volumeProgress(Double volumeProgress) {
    this.volumeProgress = volumeProgress;
    return this;
  }

  /**
   * Get volumeProgress
   * @return volumeProgress
   */
  @javax.annotation.Nullable
  public Double getVolumeProgress() {
    return volumeProgress;
  }

  public void setVolumeProgress(Double volumeProgress) {
    this.volumeProgress = volumeProgress;
  }


  public StorediSCSIVolume volumeDiskId(String volumeDiskId) {
    this.volumeDiskId = volumeDiskId;
    return this;
  }

  /**
   * Get volumeDiskId
   * @return volumeDiskId
   */
  @javax.annotation.Nullable
  public String getVolumeDiskId() {
    return volumeDiskId;
  }

  public void setVolumeDiskId(String volumeDiskId) {
    this.volumeDiskId = volumeDiskId;
  }


  public StorediSCSIVolume sourceSnapshotId(String sourceSnapshotId) {
    this.sourceSnapshotId = sourceSnapshotId;
    return this;
  }

  /**
   * Get sourceSnapshotId
   * @return sourceSnapshotId
   */
  @javax.annotation.Nullable
  public String getSourceSnapshotId() {
    return sourceSnapshotId;
  }

  public void setSourceSnapshotId(String sourceSnapshotId) {
    this.sourceSnapshotId = sourceSnapshotId;
  }


  public StorediSCSIVolume preservedExistingData(Boolean preservedExistingData) {
    this.preservedExistingData = preservedExistingData;
    return this;
  }

  /**
   * Get preservedExistingData
   * @return preservedExistingData
   */
  @javax.annotation.Nullable
  public Boolean getPreservedExistingData() {
    return preservedExistingData;
  }

  public void setPreservedExistingData(Boolean preservedExistingData) {
    this.preservedExistingData = preservedExistingData;
  }


  public StorediSCSIVolume volumeiSCSIAttributes(CachediSCSIVolumeVolumeiSCSIAttributes volumeiSCSIAttributes) {
    this.volumeiSCSIAttributes = volumeiSCSIAttributes;
    return this;
  }

  /**
   * Get volumeiSCSIAttributes
   * @return volumeiSCSIAttributes
   */
  @javax.annotation.Nullable
  public CachediSCSIVolumeVolumeiSCSIAttributes getVolumeiSCSIAttributes() {
    return volumeiSCSIAttributes;
  }

  public void setVolumeiSCSIAttributes(CachediSCSIVolumeVolumeiSCSIAttributes volumeiSCSIAttributes) {
    this.volumeiSCSIAttributes = volumeiSCSIAttributes;
  }


  public StorediSCSIVolume createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public StorediSCSIVolume volumeUsedInBytes(Integer volumeUsedInBytes) {
    this.volumeUsedInBytes = volumeUsedInBytes;
    return this;
  }

  /**
   * Get volumeUsedInBytes
   * @return volumeUsedInBytes
   */
  @javax.annotation.Nullable
  public Integer getVolumeUsedInBytes() {
    return volumeUsedInBytes;
  }

  public void setVolumeUsedInBytes(Integer volumeUsedInBytes) {
    this.volumeUsedInBytes = volumeUsedInBytes;
  }


  public StorediSCSIVolume kmSKey(String kmSKey) {
    this.kmSKey = kmSKey;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when &lt;code&gt;KMSEncrypted&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Optional.
   * @return kmSKey
   */
  @javax.annotation.Nullable
  public String getKmSKey() {
    return kmSKey;
  }

  public void setKmSKey(String kmSKey) {
    this.kmSKey = kmSKey;
  }


  public StorediSCSIVolume targetName(String targetName) {
    this.targetName = targetName;
    return this;
  }

  /**
   * Get targetName
   * @return targetName
   */
  @javax.annotation.Nullable
  public String getTargetName() {
    return targetName;
  }

  public void setTargetName(String targetName) {
    this.targetName = targetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorediSCSIVolume storediSCSIVolume = (StorediSCSIVolume) o;
    return Objects.equals(this.volumeARN, storediSCSIVolume.volumeARN) &&
        Objects.equals(this.volumeId, storediSCSIVolume.volumeId) &&
        Objects.equals(this.volumeType, storediSCSIVolume.volumeType) &&
        Objects.equals(this.volumeStatus, storediSCSIVolume.volumeStatus) &&
        Objects.equals(this.volumeAttachmentStatus, storediSCSIVolume.volumeAttachmentStatus) &&
        Objects.equals(this.volumeSizeInBytes, storediSCSIVolume.volumeSizeInBytes) &&
        Objects.equals(this.volumeProgress, storediSCSIVolume.volumeProgress) &&
        Objects.equals(this.volumeDiskId, storediSCSIVolume.volumeDiskId) &&
        Objects.equals(this.sourceSnapshotId, storediSCSIVolume.sourceSnapshotId) &&
        Objects.equals(this.preservedExistingData, storediSCSIVolume.preservedExistingData) &&
        Objects.equals(this.volumeiSCSIAttributes, storediSCSIVolume.volumeiSCSIAttributes) &&
        Objects.equals(this.createdDate, storediSCSIVolume.createdDate) &&
        Objects.equals(this.volumeUsedInBytes, storediSCSIVolume.volumeUsedInBytes) &&
        Objects.equals(this.kmSKey, storediSCSIVolume.kmSKey) &&
        Objects.equals(this.targetName, storediSCSIVolume.targetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(volumeARN, volumeId, volumeType, volumeStatus, volumeAttachmentStatus, volumeSizeInBytes, volumeProgress, volumeDiskId, sourceSnapshotId, preservedExistingData, volumeiSCSIAttributes, createdDate, volumeUsedInBytes, kmSKey, targetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorediSCSIVolume {\n");
    sb.append("    volumeARN: ").append(toIndentedString(volumeARN)).append("\n");
    sb.append("    volumeId: ").append(toIndentedString(volumeId)).append("\n");
    sb.append("    volumeType: ").append(toIndentedString(volumeType)).append("\n");
    sb.append("    volumeStatus: ").append(toIndentedString(volumeStatus)).append("\n");
    sb.append("    volumeAttachmentStatus: ").append(toIndentedString(volumeAttachmentStatus)).append("\n");
    sb.append("    volumeSizeInBytes: ").append(toIndentedString(volumeSizeInBytes)).append("\n");
    sb.append("    volumeProgress: ").append(toIndentedString(volumeProgress)).append("\n");
    sb.append("    volumeDiskId: ").append(toIndentedString(volumeDiskId)).append("\n");
    sb.append("    sourceSnapshotId: ").append(toIndentedString(sourceSnapshotId)).append("\n");
    sb.append("    preservedExistingData: ").append(toIndentedString(preservedExistingData)).append("\n");
    sb.append("    volumeiSCSIAttributes: ").append(toIndentedString(volumeiSCSIAttributes)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    volumeUsedInBytes: ").append(toIndentedString(volumeUsedInBytes)).append("\n");
    sb.append("    kmSKey: ").append(toIndentedString(kmSKey)).append("\n");
    sb.append("    targetName: ").append(toIndentedString(targetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("VolumeARN");
    openapiFields.add("VolumeId");
    openapiFields.add("VolumeType");
    openapiFields.add("VolumeStatus");
    openapiFields.add("VolumeAttachmentStatus");
    openapiFields.add("VolumeSizeInBytes");
    openapiFields.add("VolumeProgress");
    openapiFields.add("VolumeDiskId");
    openapiFields.add("SourceSnapshotId");
    openapiFields.add("PreservedExistingData");
    openapiFields.add("VolumeiSCSIAttributes");
    openapiFields.add("CreatedDate");
    openapiFields.add("VolumeUsedInBytes");
    openapiFields.add("KMSKey");
    openapiFields.add("TargetName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StorediSCSIVolume
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StorediSCSIVolume.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StorediSCSIVolume is not found in the empty JSON string", StorediSCSIVolume.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StorediSCSIVolume.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StorediSCSIVolume` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `VolumeARN`
      if (jsonObj.get("VolumeARN") != null && !jsonObj.get("VolumeARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeARN"));
      }
      // validate the optional field `VolumeId`
      if (jsonObj.get("VolumeId") != null && !jsonObj.get("VolumeId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeId"));
      }
      // validate the optional field `VolumeType`
      if (jsonObj.get("VolumeType") != null && !jsonObj.get("VolumeType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeType"));
      }
      // validate the optional field `VolumeStatus`
      if (jsonObj.get("VolumeStatus") != null && !jsonObj.get("VolumeStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeStatus"));
      }
      // validate the optional field `VolumeAttachmentStatus`
      if (jsonObj.get("VolumeAttachmentStatus") != null && !jsonObj.get("VolumeAttachmentStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeAttachmentStatus"));
      }
      // validate the optional field `VolumeSizeInBytes`
      if (jsonObj.get("VolumeSizeInBytes") != null && !jsonObj.get("VolumeSizeInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VolumeSizeInBytes"));
      }
      // validate the optional field `VolumeProgress`
      if (jsonObj.get("VolumeProgress") != null && !jsonObj.get("VolumeProgress").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("VolumeProgress"));
      }
      // validate the optional field `VolumeDiskId`
      if (jsonObj.get("VolumeDiskId") != null && !jsonObj.get("VolumeDiskId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VolumeDiskId"));
      }
      // validate the optional field `SourceSnapshotId`
      if (jsonObj.get("SourceSnapshotId") != null && !jsonObj.get("SourceSnapshotId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceSnapshotId"));
      }
      // validate the optional field `PreservedExistingData`
      if (jsonObj.get("PreservedExistingData") != null && !jsonObj.get("PreservedExistingData").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("PreservedExistingData"));
      }
      // validate the optional field `VolumeiSCSIAttributes`
      if (jsonObj.get("VolumeiSCSIAttributes") != null && !jsonObj.get("VolumeiSCSIAttributes").isJsonNull()) {
        CachediSCSIVolumeVolumeiSCSIAttributes.validateJsonElement(jsonObj.get("VolumeiSCSIAttributes"));
      }
      // validate the optional field `CreatedDate`
      if (jsonObj.get("CreatedDate") != null && !jsonObj.get("CreatedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedDate"));
      }
      // validate the optional field `VolumeUsedInBytes`
      if (jsonObj.get("VolumeUsedInBytes") != null && !jsonObj.get("VolumeUsedInBytes").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("VolumeUsedInBytes"));
      }
      if ((jsonObj.get("KMSKey") != null && !jsonObj.get("KMSKey").isJsonNull()) && !jsonObj.get("KMSKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KMSKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KMSKey").toString()));
      }
      // validate the optional field `TargetName`
      if (jsonObj.get("TargetName") != null && !jsonObj.get("TargetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TargetName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StorediSCSIVolume.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StorediSCSIVolume' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StorediSCSIVolume> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StorediSCSIVolume.class));

       return (TypeAdapter<T>) new TypeAdapter<StorediSCSIVolume>() {
           @Override
           public void write(JsonWriter out, StorediSCSIVolume value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StorediSCSIVolume read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StorediSCSIVolume given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StorediSCSIVolume
   * @throws IOException if the JSON string is invalid with respect to StorediSCSIVolume
   */
  public static StorediSCSIVolume fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StorediSCSIVolume.class);
  }

  /**
   * Convert an instance of StorediSCSIVolume to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

