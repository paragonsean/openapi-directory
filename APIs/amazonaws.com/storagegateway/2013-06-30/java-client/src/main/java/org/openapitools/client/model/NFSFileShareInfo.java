/*
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.NFSFileShareDefaults;
import org.openapitools.client.model.NFSFileShareInfoCacheAttributes;
import org.openapitools.client.model.ObjectACL;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Unix file permissions and ownership information assigned, by default, to native S3 objects when an S3 File Gateway discovers them in S3 buckets. This operation is only supported in S3 File Gateways.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:10:02.944831-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NFSFileShareInfo {
  public static final String SERIALIZED_NAME_NF_S_FILE_SHARE_DEFAULTS = "NFSFileShareDefaults";
  @SerializedName(SERIALIZED_NAME_NF_S_FILE_SHARE_DEFAULTS)
  private NFSFileShareDefaults nfSFileShareDefaults;

  public static final String SERIALIZED_NAME_FILE_SHARE_A_R_N = "FileShareARN";
  @SerializedName(SERIALIZED_NAME_FILE_SHARE_A_R_N)
  private String fileShareARN;

  public static final String SERIALIZED_NAME_FILE_SHARE_ID = "FileShareId";
  @SerializedName(SERIALIZED_NAME_FILE_SHARE_ID)
  private String fileShareId;

  public static final String SERIALIZED_NAME_FILE_SHARE_STATUS = "FileShareStatus";
  @SerializedName(SERIALIZED_NAME_FILE_SHARE_STATUS)
  private String fileShareStatus;

  public static final String SERIALIZED_NAME_GATEWAY_A_R_N = "GatewayARN";
  @SerializedName(SERIALIZED_NAME_GATEWAY_A_R_N)
  private String gatewayARN;

  public static final String SERIALIZED_NAME_KM_S_ENCRYPTED = "KMSEncrypted";
  @SerializedName(SERIALIZED_NAME_KM_S_ENCRYPTED)
  private Boolean kmSEncrypted;

  public static final String SERIALIZED_NAME_KM_S_KEY = "KMSKey";
  @SerializedName(SERIALIZED_NAME_KM_S_KEY)
  private String kmSKey;

  public static final String SERIALIZED_NAME_PATH = "Path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_ROLE = "Role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_LOCATION_A_R_N = "LocationARN";
  @SerializedName(SERIALIZED_NAME_LOCATION_A_R_N)
  private String locationARN;

  public static final String SERIALIZED_NAME_DEFAULT_STORAGE_CLASS = "DefaultStorageClass";
  @SerializedName(SERIALIZED_NAME_DEFAULT_STORAGE_CLASS)
  private String defaultStorageClass;

  public static final String SERIALIZED_NAME_OBJECT_A_C_L = "ObjectACL";
  @SerializedName(SERIALIZED_NAME_OBJECT_A_C_L)
  private ObjectACL objectACL;

  public static final String SERIALIZED_NAME_CLIENT_LIST = "ClientList";
  @SerializedName(SERIALIZED_NAME_CLIENT_LIST)
  private List<String> clientList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SQUASH = "Squash";
  @SerializedName(SERIALIZED_NAME_SQUASH)
  private String squash;

  public static final String SERIALIZED_NAME_READ_ONLY = "ReadOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_GUESS_M_I_M_E_TYPE_ENABLED = "GuessMIMETypeEnabled";
  @SerializedName(SERIALIZED_NAME_GUESS_M_I_M_E_TYPE_ENABLED)
  private Boolean guessMIMETypeEnabled;

  public static final String SERIALIZED_NAME_REQUESTER_PAYS = "RequesterPays";
  @SerializedName(SERIALIZED_NAME_REQUESTER_PAYS)
  private Boolean requesterPays;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_FILE_SHARE_NAME = "FileShareName";
  @SerializedName(SERIALIZED_NAME_FILE_SHARE_NAME)
  private String fileShareName;

  public static final String SERIALIZED_NAME_CACHE_ATTRIBUTES = "CacheAttributes";
  @SerializedName(SERIALIZED_NAME_CACHE_ATTRIBUTES)
  private NFSFileShareInfoCacheAttributes cacheAttributes;

  public static final String SERIALIZED_NAME_NOTIFICATION_POLICY = "NotificationPolicy";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_POLICY)
  private String notificationPolicy;

  public static final String SERIALIZED_NAME_VP_C_ENDPOINT_D_N_S_NAME = "VPCEndpointDNSName";
  @SerializedName(SERIALIZED_NAME_VP_C_ENDPOINT_D_N_S_NAME)
  private String vpCEndpointDNSName;

  public static final String SERIALIZED_NAME_BUCKET_REGION = "BucketRegion";
  @SerializedName(SERIALIZED_NAME_BUCKET_REGION)
  private String bucketRegion;

  public static final String SERIALIZED_NAME_AUDIT_DESTINATION_A_R_N = "AuditDestinationARN";
  @SerializedName(SERIALIZED_NAME_AUDIT_DESTINATION_A_R_N)
  private String auditDestinationARN;

  public NFSFileShareInfo() {
  }

  public NFSFileShareInfo nfSFileShareDefaults(NFSFileShareDefaults nfSFileShareDefaults) {
    this.nfSFileShareDefaults = nfSFileShareDefaults;
    return this;
  }

  /**
   * Get nfSFileShareDefaults
   * @return nfSFileShareDefaults
   */
  @javax.annotation.Nullable
  public NFSFileShareDefaults getNfSFileShareDefaults() {
    return nfSFileShareDefaults;
  }

  public void setNfSFileShareDefaults(NFSFileShareDefaults nfSFileShareDefaults) {
    this.nfSFileShareDefaults = nfSFileShareDefaults;
  }


  public NFSFileShareInfo fileShareARN(String fileShareARN) {
    this.fileShareARN = fileShareARN;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the file share.
   * @return fileShareARN
   */
  @javax.annotation.Nullable
  public String getFileShareARN() {
    return fileShareARN;
  }

  public void setFileShareARN(String fileShareARN) {
    this.fileShareARN = fileShareARN;
  }


  public NFSFileShareInfo fileShareId(String fileShareId) {
    this.fileShareId = fileShareId;
    return this;
  }

  /**
   * The ID of the file share.
   * @return fileShareId
   */
  @javax.annotation.Nullable
  public String getFileShareId() {
    return fileShareId;
  }

  public void setFileShareId(String fileShareId) {
    this.fileShareId = fileShareId;
  }


  public NFSFileShareInfo fileShareStatus(String fileShareStatus) {
    this.fileShareStatus = fileShareStatus;
    return this;
  }

  /**
   * &lt;p&gt;The status of the file share.&lt;/p&gt; &lt;p&gt;Valid Values: &lt;code&gt;CREATING&lt;/code&gt; | &lt;code&gt;UPDATING&lt;/code&gt; | &lt;code&gt;AVAILABLE&lt;/code&gt; | &lt;code&gt;DELETING&lt;/code&gt; &lt;/p&gt;
   * @return fileShareStatus
   */
  @javax.annotation.Nullable
  public String getFileShareStatus() {
    return fileShareStatus;
  }

  public void setFileShareStatus(String fileShareStatus) {
    this.fileShareStatus = fileShareStatus;
  }


  public NFSFileShareInfo gatewayARN(String gatewayARN) {
    this.gatewayARN = gatewayARN;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the gateway. Use the &lt;a&gt;ListGateways&lt;/a&gt; operation to return a list of gateways for your account and Amazon Web Services Region.
   * @return gatewayARN
   */
  @javax.annotation.Nullable
  public String getGatewayARN() {
    return gatewayARN;
  }

  public void setGatewayARN(String gatewayARN) {
    this.gatewayARN = gatewayARN;
  }


  public NFSFileShareInfo kmSEncrypted(Boolean kmSEncrypted) {
    this.kmSEncrypted = kmSEncrypted;
    return this;
  }

  /**
   * Get kmSEncrypted
   * @return kmSEncrypted
   */
  @javax.annotation.Nullable
  public Boolean getKmSEncrypted() {
    return kmSEncrypted;
  }

  public void setKmSEncrypted(Boolean kmSEncrypted) {
    this.kmSEncrypted = kmSEncrypted;
  }


  public NFSFileShareInfo kmSKey(String kmSKey) {
    this.kmSKey = kmSKey;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when &lt;code&gt;KMSEncrypted&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. Optional.
   * @return kmSKey
   */
  @javax.annotation.Nullable
  public String getKmSKey() {
    return kmSKey;
  }

  public void setKmSKey(String kmSKey) {
    this.kmSKey = kmSKey;
  }


  public NFSFileShareInfo path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The file share path used by the NFS client to identify the mount point.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public NFSFileShareInfo role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The ARN of the IAM role that an S3 File Gateway assumes when it accesses the underlying storage.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public NFSFileShareInfo locationARN(String locationARN) {
    this.locationARN = locationARN;
    return this;
  }

  /**
   * &lt;p&gt;A custom ARN for the backend storage used for storing data for file shares. It includes a resource ARN with an optional prefix concatenation. The prefix must end with a forward slash (/).&lt;/p&gt; &lt;note&gt; &lt;p&gt;You can specify LocationARN as a bucket ARN, access point ARN or access point alias, as shown in the following examples.&lt;/p&gt; &lt;p&gt;Bucket ARN:&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:aws:s3:::my-bucket/prefix/&lt;/code&gt; &lt;/p&gt; &lt;p&gt;Access point ARN:&lt;/p&gt; &lt;p&gt; &lt;code&gt;arn:aws:s3:region:account-id:accesspoint/access-point-name/prefix/&lt;/code&gt; &lt;/p&gt; &lt;p&gt;If you specify an access point, the bucket policy must be configured to delegate access control to the access point. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/access-points-policies.html#access-points-delegating-control\&quot;&gt;Delegating access control to access points&lt;/a&gt; in the &lt;i&gt;Amazon S3 User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Access point alias:&lt;/p&gt; &lt;p&gt; &lt;code&gt;test-ap-ab123cdef4gehijklmn5opqrstuvuse1a-s3alias&lt;/code&gt; &lt;/p&gt; &lt;/note&gt;
   * @return locationARN
   */
  @javax.annotation.Nullable
  public String getLocationARN() {
    return locationARN;
  }

  public void setLocationARN(String locationARN) {
    this.locationARN = locationARN;
  }


  public NFSFileShareInfo defaultStorageClass(String defaultStorageClass) {
    this.defaultStorageClass = defaultStorageClass;
    return this;
  }

  /**
   * Get defaultStorageClass
   * @return defaultStorageClass
   */
  @javax.annotation.Nullable
  public String getDefaultStorageClass() {
    return defaultStorageClass;
  }

  public void setDefaultStorageClass(String defaultStorageClass) {
    this.defaultStorageClass = defaultStorageClass;
  }


  public NFSFileShareInfo objectACL(ObjectACL objectACL) {
    this.objectACL = objectACL;
    return this;
  }

  /**
   * Get objectACL
   * @return objectACL
   */
  @javax.annotation.Nullable
  public ObjectACL getObjectACL() {
    return objectACL;
  }

  public void setObjectACL(ObjectACL objectACL) {
    this.objectACL = objectACL;
  }


  public NFSFileShareInfo clientList(List<String> clientList) {
    this.clientList = clientList;
    return this;
  }

  public NFSFileShareInfo addClientListItem(String clientListItem) {
    if (this.clientList == null) {
      this.clientList = new ArrayList<>();
    }
    this.clientList.add(clientListItem);
    return this;
  }

  /**
   * The list of clients that are allowed to access the S3 File Gateway. The list must contain either valid IP addresses or valid CIDR blocks.
   * @return clientList
   */
  @javax.annotation.Nullable
  public List<String> getClientList() {
    return clientList;
  }

  public void setClientList(List<String> clientList) {
    this.clientList = clientList;
  }


  public NFSFileShareInfo squash(String squash) {
    this.squash = squash;
    return this;
  }

  /**
   * &lt;p&gt;The user mapped to anonymous user. Valid options are the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;RootSquash&lt;/code&gt;: Only root is mapped to anonymous user.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;NoSquash&lt;/code&gt;: No one is mapped to anonymous user.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;AllSquash&lt;/code&gt;: Everyone is mapped to anonymous user.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;
   * @return squash
   */
  @javax.annotation.Nullable
  public String getSquash() {
    return squash;
  }

  public void setSquash(String squash) {
    this.squash = squash;
  }


  public NFSFileShareInfo readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Get readOnly
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public NFSFileShareInfo guessMIMETypeEnabled(Boolean guessMIMETypeEnabled) {
    this.guessMIMETypeEnabled = guessMIMETypeEnabled;
    return this;
  }

  /**
   * Get guessMIMETypeEnabled
   * @return guessMIMETypeEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGuessMIMETypeEnabled() {
    return guessMIMETypeEnabled;
  }

  public void setGuessMIMETypeEnabled(Boolean guessMIMETypeEnabled) {
    this.guessMIMETypeEnabled = guessMIMETypeEnabled;
  }


  public NFSFileShareInfo requesterPays(Boolean requesterPays) {
    this.requesterPays = requesterPays;
    return this;
  }

  /**
   * Get requesterPays
   * @return requesterPays
   */
  @javax.annotation.Nullable
  public Boolean getRequesterPays() {
    return requesterPays;
  }

  public void setRequesterPays(Boolean requesterPays) {
    this.requesterPays = requesterPays;
  }


  public NFSFileShareInfo tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public NFSFileShareInfo fileShareName(String fileShareName) {
    this.fileShareName = fileShareName;
    return this;
  }

  /**
   * Get fileShareName
   * @return fileShareName
   */
  @javax.annotation.Nullable
  public String getFileShareName() {
    return fileShareName;
  }

  public void setFileShareName(String fileShareName) {
    this.fileShareName = fileShareName;
  }


  public NFSFileShareInfo cacheAttributes(NFSFileShareInfoCacheAttributes cacheAttributes) {
    this.cacheAttributes = cacheAttributes;
    return this;
  }

  /**
   * Get cacheAttributes
   * @return cacheAttributes
   */
  @javax.annotation.Nullable
  public NFSFileShareInfoCacheAttributes getCacheAttributes() {
    return cacheAttributes;
  }

  public void setCacheAttributes(NFSFileShareInfoCacheAttributes cacheAttributes) {
    this.cacheAttributes = cacheAttributes;
  }


  public NFSFileShareInfo notificationPolicy(String notificationPolicy) {
    this.notificationPolicy = notificationPolicy;
    return this;
  }

  /**
   * Get notificationPolicy
   * @return notificationPolicy
   */
  @javax.annotation.Nullable
  public String getNotificationPolicy() {
    return notificationPolicy;
  }

  public void setNotificationPolicy(String notificationPolicy) {
    this.notificationPolicy = notificationPolicy;
  }


  public NFSFileShareInfo vpCEndpointDNSName(String vpCEndpointDNSName) {
    this.vpCEndpointDNSName = vpCEndpointDNSName;
    return this;
  }

  /**
   * Get vpCEndpointDNSName
   * @return vpCEndpointDNSName
   */
  @javax.annotation.Nullable
  public String getVpCEndpointDNSName() {
    return vpCEndpointDNSName;
  }

  public void setVpCEndpointDNSName(String vpCEndpointDNSName) {
    this.vpCEndpointDNSName = vpCEndpointDNSName;
  }


  public NFSFileShareInfo bucketRegion(String bucketRegion) {
    this.bucketRegion = bucketRegion;
    return this;
  }

  /**
   * Get bucketRegion
   * @return bucketRegion
   */
  @javax.annotation.Nullable
  public String getBucketRegion() {
    return bucketRegion;
  }

  public void setBucketRegion(String bucketRegion) {
    this.bucketRegion = bucketRegion;
  }


  public NFSFileShareInfo auditDestinationARN(String auditDestinationARN) {
    this.auditDestinationARN = auditDestinationARN;
    return this;
  }

  /**
   * Get auditDestinationARN
   * @return auditDestinationARN
   */
  @javax.annotation.Nullable
  public String getAuditDestinationARN() {
    return auditDestinationARN;
  }

  public void setAuditDestinationARN(String auditDestinationARN) {
    this.auditDestinationARN = auditDestinationARN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NFSFileShareInfo nfSFileShareInfo = (NFSFileShareInfo) o;
    return Objects.equals(this.nfSFileShareDefaults, nfSFileShareInfo.nfSFileShareDefaults) &&
        Objects.equals(this.fileShareARN, nfSFileShareInfo.fileShareARN) &&
        Objects.equals(this.fileShareId, nfSFileShareInfo.fileShareId) &&
        Objects.equals(this.fileShareStatus, nfSFileShareInfo.fileShareStatus) &&
        Objects.equals(this.gatewayARN, nfSFileShareInfo.gatewayARN) &&
        Objects.equals(this.kmSEncrypted, nfSFileShareInfo.kmSEncrypted) &&
        Objects.equals(this.kmSKey, nfSFileShareInfo.kmSKey) &&
        Objects.equals(this.path, nfSFileShareInfo.path) &&
        Objects.equals(this.role, nfSFileShareInfo.role) &&
        Objects.equals(this.locationARN, nfSFileShareInfo.locationARN) &&
        Objects.equals(this.defaultStorageClass, nfSFileShareInfo.defaultStorageClass) &&
        Objects.equals(this.objectACL, nfSFileShareInfo.objectACL) &&
        Objects.equals(this.clientList, nfSFileShareInfo.clientList) &&
        Objects.equals(this.squash, nfSFileShareInfo.squash) &&
        Objects.equals(this.readOnly, nfSFileShareInfo.readOnly) &&
        Objects.equals(this.guessMIMETypeEnabled, nfSFileShareInfo.guessMIMETypeEnabled) &&
        Objects.equals(this.requesterPays, nfSFileShareInfo.requesterPays) &&
        Objects.equals(this.tags, nfSFileShareInfo.tags) &&
        Objects.equals(this.fileShareName, nfSFileShareInfo.fileShareName) &&
        Objects.equals(this.cacheAttributes, nfSFileShareInfo.cacheAttributes) &&
        Objects.equals(this.notificationPolicy, nfSFileShareInfo.notificationPolicy) &&
        Objects.equals(this.vpCEndpointDNSName, nfSFileShareInfo.vpCEndpointDNSName) &&
        Objects.equals(this.bucketRegion, nfSFileShareInfo.bucketRegion) &&
        Objects.equals(this.auditDestinationARN, nfSFileShareInfo.auditDestinationARN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nfSFileShareDefaults, fileShareARN, fileShareId, fileShareStatus, gatewayARN, kmSEncrypted, kmSKey, path, role, locationARN, defaultStorageClass, objectACL, clientList, squash, readOnly, guessMIMETypeEnabled, requesterPays, tags, fileShareName, cacheAttributes, notificationPolicy, vpCEndpointDNSName, bucketRegion, auditDestinationARN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NFSFileShareInfo {\n");
    sb.append("    nfSFileShareDefaults: ").append(toIndentedString(nfSFileShareDefaults)).append("\n");
    sb.append("    fileShareARN: ").append(toIndentedString(fileShareARN)).append("\n");
    sb.append("    fileShareId: ").append(toIndentedString(fileShareId)).append("\n");
    sb.append("    fileShareStatus: ").append(toIndentedString(fileShareStatus)).append("\n");
    sb.append("    gatewayARN: ").append(toIndentedString(gatewayARN)).append("\n");
    sb.append("    kmSEncrypted: ").append(toIndentedString(kmSEncrypted)).append("\n");
    sb.append("    kmSKey: ").append(toIndentedString(kmSKey)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    locationARN: ").append(toIndentedString(locationARN)).append("\n");
    sb.append("    defaultStorageClass: ").append(toIndentedString(defaultStorageClass)).append("\n");
    sb.append("    objectACL: ").append(toIndentedString(objectACL)).append("\n");
    sb.append("    clientList: ").append(toIndentedString(clientList)).append("\n");
    sb.append("    squash: ").append(toIndentedString(squash)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    guessMIMETypeEnabled: ").append(toIndentedString(guessMIMETypeEnabled)).append("\n");
    sb.append("    requesterPays: ").append(toIndentedString(requesterPays)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    fileShareName: ").append(toIndentedString(fileShareName)).append("\n");
    sb.append("    cacheAttributes: ").append(toIndentedString(cacheAttributes)).append("\n");
    sb.append("    notificationPolicy: ").append(toIndentedString(notificationPolicy)).append("\n");
    sb.append("    vpCEndpointDNSName: ").append(toIndentedString(vpCEndpointDNSName)).append("\n");
    sb.append("    bucketRegion: ").append(toIndentedString(bucketRegion)).append("\n");
    sb.append("    auditDestinationARN: ").append(toIndentedString(auditDestinationARN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NFSFileShareDefaults");
    openapiFields.add("FileShareARN");
    openapiFields.add("FileShareId");
    openapiFields.add("FileShareStatus");
    openapiFields.add("GatewayARN");
    openapiFields.add("KMSEncrypted");
    openapiFields.add("KMSKey");
    openapiFields.add("Path");
    openapiFields.add("Role");
    openapiFields.add("LocationARN");
    openapiFields.add("DefaultStorageClass");
    openapiFields.add("ObjectACL");
    openapiFields.add("ClientList");
    openapiFields.add("Squash");
    openapiFields.add("ReadOnly");
    openapiFields.add("GuessMIMETypeEnabled");
    openapiFields.add("RequesterPays");
    openapiFields.add("Tags");
    openapiFields.add("FileShareName");
    openapiFields.add("CacheAttributes");
    openapiFields.add("NotificationPolicy");
    openapiFields.add("VPCEndpointDNSName");
    openapiFields.add("BucketRegion");
    openapiFields.add("AuditDestinationARN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NFSFileShareInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NFSFileShareInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NFSFileShareInfo is not found in the empty JSON string", NFSFileShareInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NFSFileShareInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NFSFileShareInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NFSFileShareDefaults`
      if (jsonObj.get("NFSFileShareDefaults") != null && !jsonObj.get("NFSFileShareDefaults").isJsonNull()) {
        NFSFileShareDefaults.validateJsonElement(jsonObj.get("NFSFileShareDefaults"));
      }
      if ((jsonObj.get("FileShareARN") != null && !jsonObj.get("FileShareARN").isJsonNull()) && !jsonObj.get("FileShareARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileShareARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileShareARN").toString()));
      }
      if ((jsonObj.get("FileShareId") != null && !jsonObj.get("FileShareId").isJsonNull()) && !jsonObj.get("FileShareId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileShareId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileShareId").toString()));
      }
      if ((jsonObj.get("FileShareStatus") != null && !jsonObj.get("FileShareStatus").isJsonNull()) && !jsonObj.get("FileShareStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FileShareStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FileShareStatus").toString()));
      }
      if ((jsonObj.get("GatewayARN") != null && !jsonObj.get("GatewayARN").isJsonNull()) && !jsonObj.get("GatewayARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GatewayARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GatewayARN").toString()));
      }
      // validate the optional field `KMSEncrypted`
      if (jsonObj.get("KMSEncrypted") != null && !jsonObj.get("KMSEncrypted").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("KMSEncrypted"));
      }
      if ((jsonObj.get("KMSKey") != null && !jsonObj.get("KMSKey").isJsonNull()) && !jsonObj.get("KMSKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `KMSKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("KMSKey").toString()));
      }
      if ((jsonObj.get("Path") != null && !jsonObj.get("Path").isJsonNull()) && !jsonObj.get("Path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Path").toString()));
      }
      if ((jsonObj.get("Role") != null && !jsonObj.get("Role").isJsonNull()) && !jsonObj.get("Role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Role").toString()));
      }
      if ((jsonObj.get("LocationARN") != null && !jsonObj.get("LocationARN").isJsonNull()) && !jsonObj.get("LocationARN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LocationARN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LocationARN").toString()));
      }
      // validate the optional field `DefaultStorageClass`
      if (jsonObj.get("DefaultStorageClass") != null && !jsonObj.get("DefaultStorageClass").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DefaultStorageClass"));
      }
      // validate the optional field `ObjectACL`
      if (jsonObj.get("ObjectACL") != null && !jsonObj.get("ObjectACL").isJsonNull()) {
        ObjectACL.validateJsonElement(jsonObj.get("ObjectACL"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ClientList") != null && !jsonObj.get("ClientList").isJsonNull() && !jsonObj.get("ClientList").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ClientList` to be an array in the JSON string but got `%s`", jsonObj.get("ClientList").toString()));
      }
      if ((jsonObj.get("Squash") != null && !jsonObj.get("Squash").isJsonNull()) && !jsonObj.get("Squash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Squash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Squash").toString()));
      }
      // validate the optional field `ReadOnly`
      if (jsonObj.get("ReadOnly") != null && !jsonObj.get("ReadOnly").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ReadOnly"));
      }
      // validate the optional field `GuessMIMETypeEnabled`
      if (jsonObj.get("GuessMIMETypeEnabled") != null && !jsonObj.get("GuessMIMETypeEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("GuessMIMETypeEnabled"));
      }
      // validate the optional field `RequesterPays`
      if (jsonObj.get("RequesterPays") != null && !jsonObj.get("RequesterPays").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("RequesterPays"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `FileShareName`
      if (jsonObj.get("FileShareName") != null && !jsonObj.get("FileShareName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FileShareName"));
      }
      // validate the optional field `CacheAttributes`
      if (jsonObj.get("CacheAttributes") != null && !jsonObj.get("CacheAttributes").isJsonNull()) {
        NFSFileShareInfoCacheAttributes.validateJsonElement(jsonObj.get("CacheAttributes"));
      }
      // validate the optional field `NotificationPolicy`
      if (jsonObj.get("NotificationPolicy") != null && !jsonObj.get("NotificationPolicy").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NotificationPolicy"));
      }
      // validate the optional field `VPCEndpointDNSName`
      if (jsonObj.get("VPCEndpointDNSName") != null && !jsonObj.get("VPCEndpointDNSName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VPCEndpointDNSName"));
      }
      // validate the optional field `BucketRegion`
      if (jsonObj.get("BucketRegion") != null && !jsonObj.get("BucketRegion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BucketRegion"));
      }
      // validate the optional field `AuditDestinationARN`
      if (jsonObj.get("AuditDestinationARN") != null && !jsonObj.get("AuditDestinationARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuditDestinationARN"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NFSFileShareInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NFSFileShareInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NFSFileShareInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NFSFileShareInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<NFSFileShareInfo>() {
           @Override
           public void write(JsonWriter out, NFSFileShareInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NFSFileShareInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NFSFileShareInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NFSFileShareInfo
   * @throws IOException if the JSON string is invalid with respect to NFSFileShareInfo
   */
  public static NFSFileShareInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NFSFileShareInfo.class);
  }

  /**
   * Convert an instance of NFSFileShareInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

