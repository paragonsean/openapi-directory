/**
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsStorageGateway);
  }
}(this, function(expect, AwsStorageGateway) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsStorageGateway.NFSFileShareInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NFSFileShareInfo', function() {
    it('should create an instance of NFSFileShareInfo', function() {
      // uncomment below and update the code to test NFSFileShareInfo
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be.a(AwsStorageGateway.NFSFileShareInfo);
    });

    it('should have the property nFSFileShareDefaults (base name: "NFSFileShareDefaults")', function() {
      // uncomment below and update the code to test the property nFSFileShareDefaults
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property fileShareARN (base name: "FileShareARN")', function() {
      // uncomment below and update the code to test the property fileShareARN
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property fileShareId (base name: "FileShareId")', function() {
      // uncomment below and update the code to test the property fileShareId
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property fileShareStatus (base name: "FileShareStatus")', function() {
      // uncomment below and update the code to test the property fileShareStatus
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property gatewayARN (base name: "GatewayARN")', function() {
      // uncomment below and update the code to test the property gatewayARN
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property kMSEncrypted (base name: "KMSEncrypted")', function() {
      // uncomment below and update the code to test the property kMSEncrypted
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property kMSKey (base name: "KMSKey")', function() {
      // uncomment below and update the code to test the property kMSKey
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property path (base name: "Path")', function() {
      // uncomment below and update the code to test the property path
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property role (base name: "Role")', function() {
      // uncomment below and update the code to test the property role
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property locationARN (base name: "LocationARN")', function() {
      // uncomment below and update the code to test the property locationARN
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property defaultStorageClass (base name: "DefaultStorageClass")', function() {
      // uncomment below and update the code to test the property defaultStorageClass
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property objectACL (base name: "ObjectACL")', function() {
      // uncomment below and update the code to test the property objectACL
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property clientList (base name: "ClientList")', function() {
      // uncomment below and update the code to test the property clientList
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property squash (base name: "Squash")', function() {
      // uncomment below and update the code to test the property squash
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property readOnly (base name: "ReadOnly")', function() {
      // uncomment below and update the code to test the property readOnly
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property guessMIMETypeEnabled (base name: "GuessMIMETypeEnabled")', function() {
      // uncomment below and update the code to test the property guessMIMETypeEnabled
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property requesterPays (base name: "RequesterPays")', function() {
      // uncomment below and update the code to test the property requesterPays
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property fileShareName (base name: "FileShareName")', function() {
      // uncomment below and update the code to test the property fileShareName
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property cacheAttributes (base name: "CacheAttributes")', function() {
      // uncomment below and update the code to test the property cacheAttributes
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property notificationPolicy (base name: "NotificationPolicy")', function() {
      // uncomment below and update the code to test the property notificationPolicy
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property vPCEndpointDNSName (base name: "VPCEndpointDNSName")', function() {
      // uncomment below and update the code to test the property vPCEndpointDNSName
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property bucketRegion (base name: "BucketRegion")', function() {
      // uncomment below and update the code to test the property bucketRegion
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

    it('should have the property auditDestinationARN (base name: "AuditDestinationARN")', function() {
      // uncomment below and update the code to test the property auditDestinationARN
      //var instance = new AwsStorageGateway.NFSFileShareInfo();
      //expect(instance).to.be();
    });

  });

}));
