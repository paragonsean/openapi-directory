/**
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsStorageGateway);
  }
}(this, function(expect, AwsStorageGateway) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsStorageGateway.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('activateGateway', function() {
      it('should call activateGateway successfully', function(done) {
        //uncomment below and update the code to test activateGateway
        //instance.activateGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addCache', function() {
      it('should call addCache successfully', function(done) {
        //uncomment below and update the code to test addCache
        //instance.addCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addTagsToResource', function() {
      it('should call addTagsToResource successfully', function(done) {
        //uncomment below and update the code to test addTagsToResource
        //instance.addTagsToResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addUploadBuffer', function() {
      it('should call addUploadBuffer successfully', function(done) {
        //uncomment below and update the code to test addUploadBuffer
        //instance.addUploadBuffer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addWorkingStorage', function() {
      it('should call addWorkingStorage successfully', function(done) {
        //uncomment below and update the code to test addWorkingStorage
        //instance.addWorkingStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('assignTapePool', function() {
      it('should call assignTapePool successfully', function(done) {
        //uncomment below and update the code to test assignTapePool
        //instance.assignTapePool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateFileSystem', function() {
      it('should call associateFileSystem successfully', function(done) {
        //uncomment below and update the code to test associateFileSystem
        //instance.associateFileSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('attachVolume', function() {
      it('should call attachVolume successfully', function(done) {
        //uncomment below and update the code to test attachVolume
        //instance.attachVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelArchival', function() {
      it('should call cancelArchival successfully', function(done) {
        //uncomment below and update the code to test cancelArchival
        //instance.cancelArchival(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('cancelRetrieval', function() {
      it('should call cancelRetrieval successfully', function(done) {
        //uncomment below and update the code to test cancelRetrieval
        //instance.cancelRetrieval(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createCachediSCSIVolume', function() {
      it('should call createCachediSCSIVolume successfully', function(done) {
        //uncomment below and update the code to test createCachediSCSIVolume
        //instance.createCachediSCSIVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createNFSFileShare', function() {
      it('should call createNFSFileShare successfully', function(done) {
        //uncomment below and update the code to test createNFSFileShare
        //instance.createNFSFileShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSMBFileShare', function() {
      it('should call createSMBFileShare successfully', function(done) {
        //uncomment below and update the code to test createSMBFileShare
        //instance.createSMBFileShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSnapshot', function() {
      it('should call createSnapshot successfully', function(done) {
        //uncomment below and update the code to test createSnapshot
        //instance.createSnapshot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSnapshotFromVolumeRecoveryPoint', function() {
      it('should call createSnapshotFromVolumeRecoveryPoint successfully', function(done) {
        //uncomment below and update the code to test createSnapshotFromVolumeRecoveryPoint
        //instance.createSnapshotFromVolumeRecoveryPoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStorediSCSIVolume', function() {
      it('should call createStorediSCSIVolume successfully', function(done) {
        //uncomment below and update the code to test createStorediSCSIVolume
        //instance.createStorediSCSIVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTapePool', function() {
      it('should call createTapePool successfully', function(done) {
        //uncomment below and update the code to test createTapePool
        //instance.createTapePool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTapeWithBarcode', function() {
      it('should call createTapeWithBarcode successfully', function(done) {
        //uncomment below and update the code to test createTapeWithBarcode
        //instance.createTapeWithBarcode(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createTapes', function() {
      it('should call createTapes successfully', function(done) {
        //uncomment below and update the code to test createTapes
        //instance.createTapes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAutomaticTapeCreationPolicy', function() {
      it('should call deleteAutomaticTapeCreationPolicy successfully', function(done) {
        //uncomment below and update the code to test deleteAutomaticTapeCreationPolicy
        //instance.deleteAutomaticTapeCreationPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteBandwidthRateLimit', function() {
      it('should call deleteBandwidthRateLimit successfully', function(done) {
        //uncomment below and update the code to test deleteBandwidthRateLimit
        //instance.deleteBandwidthRateLimit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChapCredentials', function() {
      it('should call deleteChapCredentials successfully', function(done) {
        //uncomment below and update the code to test deleteChapCredentials
        //instance.deleteChapCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFileShare', function() {
      it('should call deleteFileShare successfully', function(done) {
        //uncomment below and update the code to test deleteFileShare
        //instance.deleteFileShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteGateway', function() {
      it('should call deleteGateway successfully', function(done) {
        //uncomment below and update the code to test deleteGateway
        //instance.deleteGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSnapshotSchedule', function() {
      it('should call deleteSnapshotSchedule successfully', function(done) {
        //uncomment below and update the code to test deleteSnapshotSchedule
        //instance.deleteSnapshotSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTape', function() {
      it('should call deleteTape successfully', function(done) {
        //uncomment below and update the code to test deleteTape
        //instance.deleteTape(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTapeArchive', function() {
      it('should call deleteTapeArchive successfully', function(done) {
        //uncomment below and update the code to test deleteTapeArchive
        //instance.deleteTapeArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteTapePool', function() {
      it('should call deleteTapePool successfully', function(done) {
        //uncomment below and update the code to test deleteTapePool
        //instance.deleteTapePool(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVolume', function() {
      it('should call deleteVolume successfully', function(done) {
        //uncomment below and update the code to test deleteVolume
        //instance.deleteVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAvailabilityMonitorTest', function() {
      it('should call describeAvailabilityMonitorTest successfully', function(done) {
        //uncomment below and update the code to test describeAvailabilityMonitorTest
        //instance.describeAvailabilityMonitorTest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBandwidthRateLimit', function() {
      it('should call describeBandwidthRateLimit successfully', function(done) {
        //uncomment below and update the code to test describeBandwidthRateLimit
        //instance.describeBandwidthRateLimit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeBandwidthRateLimitSchedule', function() {
      it('should call describeBandwidthRateLimitSchedule successfully', function(done) {
        //uncomment below and update the code to test describeBandwidthRateLimitSchedule
        //instance.describeBandwidthRateLimitSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCache', function() {
      it('should call describeCache successfully', function(done) {
        //uncomment below and update the code to test describeCache
        //instance.describeCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCachediSCSIVolumes', function() {
      it('should call describeCachediSCSIVolumes successfully', function(done) {
        //uncomment below and update the code to test describeCachediSCSIVolumes
        //instance.describeCachediSCSIVolumes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChapCredentials', function() {
      it('should call describeChapCredentials successfully', function(done) {
        //uncomment below and update the code to test describeChapCredentials
        //instance.describeChapCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeFileSystemAssociations', function() {
      it('should call describeFileSystemAssociations successfully', function(done) {
        //uncomment below and update the code to test describeFileSystemAssociations
        //instance.describeFileSystemAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeGatewayInformation', function() {
      it('should call describeGatewayInformation successfully', function(done) {
        //uncomment below and update the code to test describeGatewayInformation
        //instance.describeGatewayInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeMaintenanceStartTime', function() {
      it('should call describeMaintenanceStartTime successfully', function(done) {
        //uncomment below and update the code to test describeMaintenanceStartTime
        //instance.describeMaintenanceStartTime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeNFSFileShares', function() {
      it('should call describeNFSFileShares successfully', function(done) {
        //uncomment below and update the code to test describeNFSFileShares
        //instance.describeNFSFileShares(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSMBFileShares', function() {
      it('should call describeSMBFileShares successfully', function(done) {
        //uncomment below and update the code to test describeSMBFileShares
        //instance.describeSMBFileShares(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSMBSettings', function() {
      it('should call describeSMBSettings successfully', function(done) {
        //uncomment below and update the code to test describeSMBSettings
        //instance.describeSMBSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSnapshotSchedule', function() {
      it('should call describeSnapshotSchedule successfully', function(done) {
        //uncomment below and update the code to test describeSnapshotSchedule
        //instance.describeSnapshotSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeStorediSCSIVolumes', function() {
      it('should call describeStorediSCSIVolumes successfully', function(done) {
        //uncomment below and update the code to test describeStorediSCSIVolumes
        //instance.describeStorediSCSIVolumes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTapeArchives', function() {
      it('should call describeTapeArchives successfully', function(done) {
        //uncomment below and update the code to test describeTapeArchives
        //instance.describeTapeArchives(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTapeRecoveryPoints', function() {
      it('should call describeTapeRecoveryPoints successfully', function(done) {
        //uncomment below and update the code to test describeTapeRecoveryPoints
        //instance.describeTapeRecoveryPoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeTapes', function() {
      it('should call describeTapes successfully', function(done) {
        //uncomment below and update the code to test describeTapes
        //instance.describeTapes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeUploadBuffer', function() {
      it('should call describeUploadBuffer successfully', function(done) {
        //uncomment below and update the code to test describeUploadBuffer
        //instance.describeUploadBuffer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeVTLDevices', function() {
      it('should call describeVTLDevices successfully', function(done) {
        //uncomment below and update the code to test describeVTLDevices
        //instance.describeVTLDevices(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeWorkingStorage', function() {
      it('should call describeWorkingStorage successfully', function(done) {
        //uncomment below and update the code to test describeWorkingStorage
        //instance.describeWorkingStorage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('detachVolume', function() {
      it('should call detachVolume successfully', function(done) {
        //uncomment below and update the code to test detachVolume
        //instance.detachVolume(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableGateway', function() {
      it('should call disableGateway successfully', function(done) {
        //uncomment below and update the code to test disableGateway
        //instance.disableGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateFileSystem', function() {
      it('should call disassociateFileSystem successfully', function(done) {
        //uncomment below and update the code to test disassociateFileSystem
        //instance.disassociateFileSystem(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('joinDomain', function() {
      it('should call joinDomain successfully', function(done) {
        //uncomment below and update the code to test joinDomain
        //instance.joinDomain(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAutomaticTapeCreationPolicies', function() {
      it('should call listAutomaticTapeCreationPolicies successfully', function(done) {
        //uncomment below and update the code to test listAutomaticTapeCreationPolicies
        //instance.listAutomaticTapeCreationPolicies(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFileShares', function() {
      it('should call listFileShares successfully', function(done) {
        //uncomment below and update the code to test listFileShares
        //instance.listFileShares(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listFileSystemAssociations', function() {
      it('should call listFileSystemAssociations successfully', function(done) {
        //uncomment below and update the code to test listFileSystemAssociations
        //instance.listFileSystemAssociations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGateways', function() {
      it('should call listGateways successfully', function(done) {
        //uncomment below and update the code to test listGateways
        //instance.listGateways(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLocalDisks', function() {
      it('should call listLocalDisks successfully', function(done) {
        //uncomment below and update the code to test listLocalDisks
        //instance.listLocalDisks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTapePools', function() {
      it('should call listTapePools successfully', function(done) {
        //uncomment below and update the code to test listTapePools
        //instance.listTapePools(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTapes', function() {
      it('should call listTapes successfully', function(done) {
        //uncomment below and update the code to test listTapes
        //instance.listTapes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVolumeInitiators', function() {
      it('should call listVolumeInitiators successfully', function(done) {
        //uncomment below and update the code to test listVolumeInitiators
        //instance.listVolumeInitiators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVolumeRecoveryPoints', function() {
      it('should call listVolumeRecoveryPoints successfully', function(done) {
        //uncomment below and update the code to test listVolumeRecoveryPoints
        //instance.listVolumeRecoveryPoints(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVolumes', function() {
      it('should call listVolumes successfully', function(done) {
        //uncomment below and update the code to test listVolumes
        //instance.listVolumes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('notifyWhenUploaded', function() {
      it('should call notifyWhenUploaded successfully', function(done) {
        //uncomment below and update the code to test notifyWhenUploaded
        //instance.notifyWhenUploaded(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('refreshCache', function() {
      it('should call refreshCache successfully', function(done) {
        //uncomment below and update the code to test refreshCache
        //instance.refreshCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeTagsFromResource', function() {
      it('should call removeTagsFromResource successfully', function(done) {
        //uncomment below and update the code to test removeTagsFromResource
        //instance.removeTagsFromResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetCache', function() {
      it('should call resetCache successfully', function(done) {
        //uncomment below and update the code to test resetCache
        //instance.resetCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveTapeArchive', function() {
      it('should call retrieveTapeArchive successfully', function(done) {
        //uncomment below and update the code to test retrieveTapeArchive
        //instance.retrieveTapeArchive(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('retrieveTapeRecoveryPoint', function() {
      it('should call retrieveTapeRecoveryPoint successfully', function(done) {
        //uncomment below and update the code to test retrieveTapeRecoveryPoint
        //instance.retrieveTapeRecoveryPoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setLocalConsolePassword', function() {
      it('should call setLocalConsolePassword successfully', function(done) {
        //uncomment below and update the code to test setLocalConsolePassword
        //instance.setLocalConsolePassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setSMBGuestPassword', function() {
      it('should call setSMBGuestPassword successfully', function(done) {
        //uncomment below and update the code to test setSMBGuestPassword
        //instance.setSMBGuestPassword(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('shutdownGateway', function() {
      it('should call shutdownGateway successfully', function(done) {
        //uncomment below and update the code to test shutdownGateway
        //instance.shutdownGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startAvailabilityMonitorTest', function() {
      it('should call startAvailabilityMonitorTest successfully', function(done) {
        //uncomment below and update the code to test startAvailabilityMonitorTest
        //instance.startAvailabilityMonitorTest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startGateway', function() {
      it('should call startGateway successfully', function(done) {
        //uncomment below and update the code to test startGateway
        //instance.startGateway(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAutomaticTapeCreationPolicy', function() {
      it('should call updateAutomaticTapeCreationPolicy successfully', function(done) {
        //uncomment below and update the code to test updateAutomaticTapeCreationPolicy
        //instance.updateAutomaticTapeCreationPolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBandwidthRateLimit', function() {
      it('should call updateBandwidthRateLimit successfully', function(done) {
        //uncomment below and update the code to test updateBandwidthRateLimit
        //instance.updateBandwidthRateLimit(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBandwidthRateLimitSchedule', function() {
      it('should call updateBandwidthRateLimitSchedule successfully', function(done) {
        //uncomment below and update the code to test updateBandwidthRateLimitSchedule
        //instance.updateBandwidthRateLimitSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChapCredentials', function() {
      it('should call updateChapCredentials successfully', function(done) {
        //uncomment below and update the code to test updateChapCredentials
        //instance.updateChapCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateFileSystemAssociation', function() {
      it('should call updateFileSystemAssociation successfully', function(done) {
        //uncomment below and update the code to test updateFileSystemAssociation
        //instance.updateFileSystemAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGatewayInformation', function() {
      it('should call updateGatewayInformation successfully', function(done) {
        //uncomment below and update the code to test updateGatewayInformation
        //instance.updateGatewayInformation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGatewaySoftwareNow', function() {
      it('should call updateGatewaySoftwareNow successfully', function(done) {
        //uncomment below and update the code to test updateGatewaySoftwareNow
        //instance.updateGatewaySoftwareNow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateMaintenanceStartTime', function() {
      it('should call updateMaintenanceStartTime successfully', function(done) {
        //uncomment below and update the code to test updateMaintenanceStartTime
        //instance.updateMaintenanceStartTime(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateNFSFileShare', function() {
      it('should call updateNFSFileShare successfully', function(done) {
        //uncomment below and update the code to test updateNFSFileShare
        //instance.updateNFSFileShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSMBFileShare', function() {
      it('should call updateSMBFileShare successfully', function(done) {
        //uncomment below and update the code to test updateSMBFileShare
        //instance.updateSMBFileShare(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSMBFileShareVisibility', function() {
      it('should call updateSMBFileShareVisibility successfully', function(done) {
        //uncomment below and update the code to test updateSMBFileShareVisibility
        //instance.updateSMBFileShareVisibility(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSMBLocalGroups', function() {
      it('should call updateSMBLocalGroups successfully', function(done) {
        //uncomment below and update the code to test updateSMBLocalGroups
        //instance.updateSMBLocalGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSMBSecurityStrategy', function() {
      it('should call updateSMBSecurityStrategy successfully', function(done) {
        //uncomment below and update the code to test updateSMBSecurityStrategy
        //instance.updateSMBSecurityStrategy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSnapshotSchedule', function() {
      it('should call updateSnapshotSchedule successfully', function(done) {
        //uncomment below and update the code to test updateSnapshotSchedule
        //instance.updateSnapshotSchedule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVTLDeviceType', function() {
      it('should call updateVTLDeviceType successfully', function(done) {
        //uncomment below and update the code to test updateVTLDeviceType
        //instance.updateVTLDeviceType(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
