/**
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICachediSCSIVolume.h
 *
 * Describes an iSCSI cached volume.
 */

#ifndef OAICachediSCSIVolume_H
#define OAICachediSCSIVolume_H

#include <QJsonObject>

#include "OAICachediSCSIVolume_VolumeiSCSIAttributes.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICachediSCSIVolume_VolumeiSCSIAttributes;

class OAICachediSCSIVolume : public OAIObject {
public:
    OAICachediSCSIVolume();
    OAICachediSCSIVolume(QString json);
    ~OAICachediSCSIVolume() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getVolumeArn() const;
    void setVolumeArn(const QString &volume_arn);
    bool is_volume_arn_Set() const;
    bool is_volume_arn_Valid() const;

    QString getVolumeId() const;
    void setVolumeId(const QString &volume_id);
    bool is_volume_id_Set() const;
    bool is_volume_id_Valid() const;

    QString getVolumeType() const;
    void setVolumeType(const QString &volume_type);
    bool is_volume_type_Set() const;
    bool is_volume_type_Valid() const;

    QString getVolumeStatus() const;
    void setVolumeStatus(const QString &volume_status);
    bool is_volume_status_Set() const;
    bool is_volume_status_Valid() const;

    QString getVolumeAttachmentStatus() const;
    void setVolumeAttachmentStatus(const QString &volume_attachment_status);
    bool is_volume_attachment_status_Set() const;
    bool is_volume_attachment_status_Valid() const;

    qint32 getVolumeSizeInBytes() const;
    void setVolumeSizeInBytes(const qint32 &volume_size_in_bytes);
    bool is_volume_size_in_bytes_Set() const;
    bool is_volume_size_in_bytes_Valid() const;

    double getVolumeProgress() const;
    void setVolumeProgress(const double &volume_progress);
    bool is_volume_progress_Set() const;
    bool is_volume_progress_Valid() const;

    QString getSourceSnapshotId() const;
    void setSourceSnapshotId(const QString &source_snapshot_id);
    bool is_source_snapshot_id_Set() const;
    bool is_source_snapshot_id_Valid() const;

    OAICachediSCSIVolume_VolumeiSCSIAttributes getVolumeiScsiAttributes() const;
    void setVolumeiScsiAttributes(const OAICachediSCSIVolume_VolumeiSCSIAttributes &volumei_scsi_attributes);
    bool is_volumei_scsi_attributes_Set() const;
    bool is_volumei_scsi_attributes_Valid() const;

    QDateTime getCreatedDate() const;
    void setCreatedDate(const QDateTime &created_date);
    bool is_created_date_Set() const;
    bool is_created_date_Valid() const;

    qint32 getVolumeUsedInBytes() const;
    void setVolumeUsedInBytes(const qint32 &volume_used_in_bytes);
    bool is_volume_used_in_bytes_Set() const;
    bool is_volume_used_in_bytes_Valid() const;

    QString getKmsKey() const;
    void setKmsKey(const QString &kms_key);
    bool is_kms_key_Set() const;
    bool is_kms_key_Valid() const;

    QString getTargetName() const;
    void setTargetName(const QString &target_name);
    bool is_target_name_Set() const;
    bool is_target_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_volume_arn;
    bool m_volume_arn_isSet;
    bool m_volume_arn_isValid;

    QString m_volume_id;
    bool m_volume_id_isSet;
    bool m_volume_id_isValid;

    QString m_volume_type;
    bool m_volume_type_isSet;
    bool m_volume_type_isValid;

    QString m_volume_status;
    bool m_volume_status_isSet;
    bool m_volume_status_isValid;

    QString m_volume_attachment_status;
    bool m_volume_attachment_status_isSet;
    bool m_volume_attachment_status_isValid;

    qint32 m_volume_size_in_bytes;
    bool m_volume_size_in_bytes_isSet;
    bool m_volume_size_in_bytes_isValid;

    double m_volume_progress;
    bool m_volume_progress_isSet;
    bool m_volume_progress_isValid;

    QString m_source_snapshot_id;
    bool m_source_snapshot_id_isSet;
    bool m_source_snapshot_id_isValid;

    OAICachediSCSIVolume_VolumeiSCSIAttributes m_volumei_scsi_attributes;
    bool m_volumei_scsi_attributes_isSet;
    bool m_volumei_scsi_attributes_isValid;

    QDateTime m_created_date;
    bool m_created_date_isSet;
    bool m_created_date_isValid;

    qint32 m_volume_used_in_bytes;
    bool m_volume_used_in_bytes_isSet;
    bool m_volume_used_in_bytes_isValid;

    QString m_kms_key;
    bool m_kms_key_isSet;
    bool m_kms_key_isValid;

    QString m_target_name;
    bool m_target_name_isSet;
    bool m_target_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICachediSCSIVolume)

#endif // OAICachediSCSIVolume_H
