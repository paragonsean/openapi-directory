/**
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateNFSFileShareInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateNFSFileShareInput::OAICreateNFSFileShareInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateNFSFileShareInput::OAICreateNFSFileShareInput() {
    this->initializeModel();
}

OAICreateNFSFileShareInput::~OAICreateNFSFileShareInput() {}

void OAICreateNFSFileShareInput::initializeModel() {

    m_client_token_isSet = false;
    m_client_token_isValid = false;

    m_nfs_file_share_defaults_isSet = false;
    m_nfs_file_share_defaults_isValid = false;

    m_gateway_arn_isSet = false;
    m_gateway_arn_isValid = false;

    m_kms_encrypted_isSet = false;
    m_kms_encrypted_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_location_arn_isSet = false;
    m_location_arn_isValid = false;

    m_default_storage_class_isSet = false;
    m_default_storage_class_isValid = false;

    m_object_acl_isSet = false;
    m_object_acl_isValid = false;

    m_client_list_isSet = false;
    m_client_list_isValid = false;

    m_squash_isSet = false;
    m_squash_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_guess_mime_type_enabled_isSet = false;
    m_guess_mime_type_enabled_isValid = false;

    m_requester_pays_isSet = false;
    m_requester_pays_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_file_share_name_isSet = false;
    m_file_share_name_isValid = false;

    m_cache_attributes_isSet = false;
    m_cache_attributes_isValid = false;

    m_notification_policy_isSet = false;
    m_notification_policy_isValid = false;

    m_vpc_endpoint_dns_name_isSet = false;
    m_vpc_endpoint_dns_name_isValid = false;

    m_bucket_region_isSet = false;
    m_bucket_region_isValid = false;

    m_audit_destination_arn_isSet = false;
    m_audit_destination_arn_isValid = false;
}

void OAICreateNFSFileShareInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateNFSFileShareInput::fromJsonObject(QJsonObject json) {

    m_client_token_isValid = ::OpenAPI::fromJsonValue(m_client_token, json[QString("ClientToken")]);
    m_client_token_isSet = !json[QString("ClientToken")].isNull() && m_client_token_isValid;

    m_nfs_file_share_defaults_isValid = ::OpenAPI::fromJsonValue(m_nfs_file_share_defaults, json[QString("NFSFileShareDefaults")]);
    m_nfs_file_share_defaults_isSet = !json[QString("NFSFileShareDefaults")].isNull() && m_nfs_file_share_defaults_isValid;

    m_gateway_arn_isValid = ::OpenAPI::fromJsonValue(m_gateway_arn, json[QString("GatewayARN")]);
    m_gateway_arn_isSet = !json[QString("GatewayARN")].isNull() && m_gateway_arn_isValid;

    m_kms_encrypted_isValid = ::OpenAPI::fromJsonValue(m_kms_encrypted, json[QString("KMSEncrypted")]);
    m_kms_encrypted_isSet = !json[QString("KMSEncrypted")].isNull() && m_kms_encrypted_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("KMSKey")]);
    m_kms_key_isSet = !json[QString("KMSKey")].isNull() && m_kms_key_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("Role")]);
    m_role_isSet = !json[QString("Role")].isNull() && m_role_isValid;

    m_location_arn_isValid = ::OpenAPI::fromJsonValue(m_location_arn, json[QString("LocationARN")]);
    m_location_arn_isSet = !json[QString("LocationARN")].isNull() && m_location_arn_isValid;

    m_default_storage_class_isValid = ::OpenAPI::fromJsonValue(m_default_storage_class, json[QString("DefaultStorageClass")]);
    m_default_storage_class_isSet = !json[QString("DefaultStorageClass")].isNull() && m_default_storage_class_isValid;

    m_object_acl_isValid = ::OpenAPI::fromJsonValue(m_object_acl, json[QString("ObjectACL")]);
    m_object_acl_isSet = !json[QString("ObjectACL")].isNull() && m_object_acl_isValid;

    m_client_list_isValid = ::OpenAPI::fromJsonValue(m_client_list, json[QString("ClientList")]);
    m_client_list_isSet = !json[QString("ClientList")].isNull() && m_client_list_isValid;

    m_squash_isValid = ::OpenAPI::fromJsonValue(m_squash, json[QString("Squash")]);
    m_squash_isSet = !json[QString("Squash")].isNull() && m_squash_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("ReadOnly")]);
    m_read_only_isSet = !json[QString("ReadOnly")].isNull() && m_read_only_isValid;

    m_guess_mime_type_enabled_isValid = ::OpenAPI::fromJsonValue(m_guess_mime_type_enabled, json[QString("GuessMIMETypeEnabled")]);
    m_guess_mime_type_enabled_isSet = !json[QString("GuessMIMETypeEnabled")].isNull() && m_guess_mime_type_enabled_isValid;

    m_requester_pays_isValid = ::OpenAPI::fromJsonValue(m_requester_pays, json[QString("RequesterPays")]);
    m_requester_pays_isSet = !json[QString("RequesterPays")].isNull() && m_requester_pays_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_file_share_name_isValid = ::OpenAPI::fromJsonValue(m_file_share_name, json[QString("FileShareName")]);
    m_file_share_name_isSet = !json[QString("FileShareName")].isNull() && m_file_share_name_isValid;

    m_cache_attributes_isValid = ::OpenAPI::fromJsonValue(m_cache_attributes, json[QString("CacheAttributes")]);
    m_cache_attributes_isSet = !json[QString("CacheAttributes")].isNull() && m_cache_attributes_isValid;

    m_notification_policy_isValid = ::OpenAPI::fromJsonValue(m_notification_policy, json[QString("NotificationPolicy")]);
    m_notification_policy_isSet = !json[QString("NotificationPolicy")].isNull() && m_notification_policy_isValid;

    m_vpc_endpoint_dns_name_isValid = ::OpenAPI::fromJsonValue(m_vpc_endpoint_dns_name, json[QString("VPCEndpointDNSName")]);
    m_vpc_endpoint_dns_name_isSet = !json[QString("VPCEndpointDNSName")].isNull() && m_vpc_endpoint_dns_name_isValid;

    m_bucket_region_isValid = ::OpenAPI::fromJsonValue(m_bucket_region, json[QString("BucketRegion")]);
    m_bucket_region_isSet = !json[QString("BucketRegion")].isNull() && m_bucket_region_isValid;

    m_audit_destination_arn_isValid = ::OpenAPI::fromJsonValue(m_audit_destination_arn, json[QString("AuditDestinationARN")]);
    m_audit_destination_arn_isSet = !json[QString("AuditDestinationARN")].isNull() && m_audit_destination_arn_isValid;
}

QString OAICreateNFSFileShareInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateNFSFileShareInput::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_isSet) {
        obj.insert(QString("ClientToken"), ::OpenAPI::toJsonValue(m_client_token));
    }
    if (m_nfs_file_share_defaults.isSet()) {
        obj.insert(QString("NFSFileShareDefaults"), ::OpenAPI::toJsonValue(m_nfs_file_share_defaults));
    }
    if (m_gateway_arn_isSet) {
        obj.insert(QString("GatewayARN"), ::OpenAPI::toJsonValue(m_gateway_arn));
    }
    if (m_kms_encrypted_isSet) {
        obj.insert(QString("KMSEncrypted"), ::OpenAPI::toJsonValue(m_kms_encrypted));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("KMSKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_role_isSet) {
        obj.insert(QString("Role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_location_arn_isSet) {
        obj.insert(QString("LocationARN"), ::OpenAPI::toJsonValue(m_location_arn));
    }
    if (m_default_storage_class_isSet) {
        obj.insert(QString("DefaultStorageClass"), ::OpenAPI::toJsonValue(m_default_storage_class));
    }
    if (m_object_acl.isSet()) {
        obj.insert(QString("ObjectACL"), ::OpenAPI::toJsonValue(m_object_acl));
    }
    if (m_client_list.isSet()) {
        obj.insert(QString("ClientList"), ::OpenAPI::toJsonValue(m_client_list));
    }
    if (m_squash_isSet) {
        obj.insert(QString("Squash"), ::OpenAPI::toJsonValue(m_squash));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("ReadOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_guess_mime_type_enabled_isSet) {
        obj.insert(QString("GuessMIMETypeEnabled"), ::OpenAPI::toJsonValue(m_guess_mime_type_enabled));
    }
    if (m_requester_pays_isSet) {
        obj.insert(QString("RequesterPays"), ::OpenAPI::toJsonValue(m_requester_pays));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_file_share_name_isSet) {
        obj.insert(QString("FileShareName"), ::OpenAPI::toJsonValue(m_file_share_name));
    }
    if (m_cache_attributes.isSet()) {
        obj.insert(QString("CacheAttributes"), ::OpenAPI::toJsonValue(m_cache_attributes));
    }
    if (m_notification_policy_isSet) {
        obj.insert(QString("NotificationPolicy"), ::OpenAPI::toJsonValue(m_notification_policy));
    }
    if (m_vpc_endpoint_dns_name_isSet) {
        obj.insert(QString("VPCEndpointDNSName"), ::OpenAPI::toJsonValue(m_vpc_endpoint_dns_name));
    }
    if (m_bucket_region_isSet) {
        obj.insert(QString("BucketRegion"), ::OpenAPI::toJsonValue(m_bucket_region));
    }
    if (m_audit_destination_arn_isSet) {
        obj.insert(QString("AuditDestinationARN"), ::OpenAPI::toJsonValue(m_audit_destination_arn));
    }
    return obj;
}

QString OAICreateNFSFileShareInput::getClientToken() const {
    return m_client_token;
}
void OAICreateNFSFileShareInput::setClientToken(const QString &client_token) {
    m_client_token = client_token;
    m_client_token_isSet = true;
}

bool OAICreateNFSFileShareInput::is_client_token_Set() const{
    return m_client_token_isSet;
}

bool OAICreateNFSFileShareInput::is_client_token_Valid() const{
    return m_client_token_isValid;
}

OAICreateNFSFileShareInput_NFSFileShareDefaults OAICreateNFSFileShareInput::getNfsFileShareDefaults() const {
    return m_nfs_file_share_defaults;
}
void OAICreateNFSFileShareInput::setNfsFileShareDefaults(const OAICreateNFSFileShareInput_NFSFileShareDefaults &nfs_file_share_defaults) {
    m_nfs_file_share_defaults = nfs_file_share_defaults;
    m_nfs_file_share_defaults_isSet = true;
}

bool OAICreateNFSFileShareInput::is_nfs_file_share_defaults_Set() const{
    return m_nfs_file_share_defaults_isSet;
}

bool OAICreateNFSFileShareInput::is_nfs_file_share_defaults_Valid() const{
    return m_nfs_file_share_defaults_isValid;
}

QString OAICreateNFSFileShareInput::getGatewayArn() const {
    return m_gateway_arn;
}
void OAICreateNFSFileShareInput::setGatewayArn(const QString &gateway_arn) {
    m_gateway_arn = gateway_arn;
    m_gateway_arn_isSet = true;
}

bool OAICreateNFSFileShareInput::is_gateway_arn_Set() const{
    return m_gateway_arn_isSet;
}

bool OAICreateNFSFileShareInput::is_gateway_arn_Valid() const{
    return m_gateway_arn_isValid;
}

bool OAICreateNFSFileShareInput::getKmsEncrypted() const {
    return m_kms_encrypted;
}
void OAICreateNFSFileShareInput::setKmsEncrypted(const bool &kms_encrypted) {
    m_kms_encrypted = kms_encrypted;
    m_kms_encrypted_isSet = true;
}

bool OAICreateNFSFileShareInput::is_kms_encrypted_Set() const{
    return m_kms_encrypted_isSet;
}

bool OAICreateNFSFileShareInput::is_kms_encrypted_Valid() const{
    return m_kms_encrypted_isValid;
}

QString OAICreateNFSFileShareInput::getKmsKey() const {
    return m_kms_key;
}
void OAICreateNFSFileShareInput::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAICreateNFSFileShareInput::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAICreateNFSFileShareInput::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QString OAICreateNFSFileShareInput::getRole() const {
    return m_role;
}
void OAICreateNFSFileShareInput::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAICreateNFSFileShareInput::is_role_Set() const{
    return m_role_isSet;
}

bool OAICreateNFSFileShareInput::is_role_Valid() const{
    return m_role_isValid;
}

QString OAICreateNFSFileShareInput::getLocationArn() const {
    return m_location_arn;
}
void OAICreateNFSFileShareInput::setLocationArn(const QString &location_arn) {
    m_location_arn = location_arn;
    m_location_arn_isSet = true;
}

bool OAICreateNFSFileShareInput::is_location_arn_Set() const{
    return m_location_arn_isSet;
}

bool OAICreateNFSFileShareInput::is_location_arn_Valid() const{
    return m_location_arn_isValid;
}

QString OAICreateNFSFileShareInput::getDefaultStorageClass() const {
    return m_default_storage_class;
}
void OAICreateNFSFileShareInput::setDefaultStorageClass(const QString &default_storage_class) {
    m_default_storage_class = default_storage_class;
    m_default_storage_class_isSet = true;
}

bool OAICreateNFSFileShareInput::is_default_storage_class_Set() const{
    return m_default_storage_class_isSet;
}

bool OAICreateNFSFileShareInput::is_default_storage_class_Valid() const{
    return m_default_storage_class_isValid;
}

OAIObjectACL OAICreateNFSFileShareInput::getObjectAcl() const {
    return m_object_acl;
}
void OAICreateNFSFileShareInput::setObjectAcl(const OAIObjectACL &object_acl) {
    m_object_acl = object_acl;
    m_object_acl_isSet = true;
}

bool OAICreateNFSFileShareInput::is_object_acl_Set() const{
    return m_object_acl_isSet;
}

bool OAICreateNFSFileShareInput::is_object_acl_Valid() const{
    return m_object_acl_isValid;
}

QList OAICreateNFSFileShareInput::getClientList() const {
    return m_client_list;
}
void OAICreateNFSFileShareInput::setClientList(const QList &client_list) {
    m_client_list = client_list;
    m_client_list_isSet = true;
}

bool OAICreateNFSFileShareInput::is_client_list_Set() const{
    return m_client_list_isSet;
}

bool OAICreateNFSFileShareInput::is_client_list_Valid() const{
    return m_client_list_isValid;
}

QString OAICreateNFSFileShareInput::getSquash() const {
    return m_squash;
}
void OAICreateNFSFileShareInput::setSquash(const QString &squash) {
    m_squash = squash;
    m_squash_isSet = true;
}

bool OAICreateNFSFileShareInput::is_squash_Set() const{
    return m_squash_isSet;
}

bool OAICreateNFSFileShareInput::is_squash_Valid() const{
    return m_squash_isValid;
}

bool OAICreateNFSFileShareInput::getReadOnly() const {
    return m_read_only;
}
void OAICreateNFSFileShareInput::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAICreateNFSFileShareInput::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAICreateNFSFileShareInput::is_read_only_Valid() const{
    return m_read_only_isValid;
}

bool OAICreateNFSFileShareInput::getGuessMimeTypeEnabled() const {
    return m_guess_mime_type_enabled;
}
void OAICreateNFSFileShareInput::setGuessMimeTypeEnabled(const bool &guess_mime_type_enabled) {
    m_guess_mime_type_enabled = guess_mime_type_enabled;
    m_guess_mime_type_enabled_isSet = true;
}

bool OAICreateNFSFileShareInput::is_guess_mime_type_enabled_Set() const{
    return m_guess_mime_type_enabled_isSet;
}

bool OAICreateNFSFileShareInput::is_guess_mime_type_enabled_Valid() const{
    return m_guess_mime_type_enabled_isValid;
}

bool OAICreateNFSFileShareInput::getRequesterPays() const {
    return m_requester_pays;
}
void OAICreateNFSFileShareInput::setRequesterPays(const bool &requester_pays) {
    m_requester_pays = requester_pays;
    m_requester_pays_isSet = true;
}

bool OAICreateNFSFileShareInput::is_requester_pays_Set() const{
    return m_requester_pays_isSet;
}

bool OAICreateNFSFileShareInput::is_requester_pays_Valid() const{
    return m_requester_pays_isValid;
}

QList OAICreateNFSFileShareInput::getTags() const {
    return m_tags;
}
void OAICreateNFSFileShareInput::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateNFSFileShareInput::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateNFSFileShareInput::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateNFSFileShareInput::getFileShareName() const {
    return m_file_share_name;
}
void OAICreateNFSFileShareInput::setFileShareName(const QString &file_share_name) {
    m_file_share_name = file_share_name;
    m_file_share_name_isSet = true;
}

bool OAICreateNFSFileShareInput::is_file_share_name_Set() const{
    return m_file_share_name_isSet;
}

bool OAICreateNFSFileShareInput::is_file_share_name_Valid() const{
    return m_file_share_name_isValid;
}

OAICreateNFSFileShareInput_CacheAttributes OAICreateNFSFileShareInput::getCacheAttributes() const {
    return m_cache_attributes;
}
void OAICreateNFSFileShareInput::setCacheAttributes(const OAICreateNFSFileShareInput_CacheAttributes &cache_attributes) {
    m_cache_attributes = cache_attributes;
    m_cache_attributes_isSet = true;
}

bool OAICreateNFSFileShareInput::is_cache_attributes_Set() const{
    return m_cache_attributes_isSet;
}

bool OAICreateNFSFileShareInput::is_cache_attributes_Valid() const{
    return m_cache_attributes_isValid;
}

QString OAICreateNFSFileShareInput::getNotificationPolicy() const {
    return m_notification_policy;
}
void OAICreateNFSFileShareInput::setNotificationPolicy(const QString &notification_policy) {
    m_notification_policy = notification_policy;
    m_notification_policy_isSet = true;
}

bool OAICreateNFSFileShareInput::is_notification_policy_Set() const{
    return m_notification_policy_isSet;
}

bool OAICreateNFSFileShareInput::is_notification_policy_Valid() const{
    return m_notification_policy_isValid;
}

QString OAICreateNFSFileShareInput::getVpcEndpointDnsName() const {
    return m_vpc_endpoint_dns_name;
}
void OAICreateNFSFileShareInput::setVpcEndpointDnsName(const QString &vpc_endpoint_dns_name) {
    m_vpc_endpoint_dns_name = vpc_endpoint_dns_name;
    m_vpc_endpoint_dns_name_isSet = true;
}

bool OAICreateNFSFileShareInput::is_vpc_endpoint_dns_name_Set() const{
    return m_vpc_endpoint_dns_name_isSet;
}

bool OAICreateNFSFileShareInput::is_vpc_endpoint_dns_name_Valid() const{
    return m_vpc_endpoint_dns_name_isValid;
}

QString OAICreateNFSFileShareInput::getBucketRegion() const {
    return m_bucket_region;
}
void OAICreateNFSFileShareInput::setBucketRegion(const QString &bucket_region) {
    m_bucket_region = bucket_region;
    m_bucket_region_isSet = true;
}

bool OAICreateNFSFileShareInput::is_bucket_region_Set() const{
    return m_bucket_region_isSet;
}

bool OAICreateNFSFileShareInput::is_bucket_region_Valid() const{
    return m_bucket_region_isValid;
}

QString OAICreateNFSFileShareInput::getAuditDestinationArn() const {
    return m_audit_destination_arn;
}
void OAICreateNFSFileShareInput::setAuditDestinationArn(const QString &audit_destination_arn) {
    m_audit_destination_arn = audit_destination_arn;
    m_audit_destination_arn_isSet = true;
}

bool OAICreateNFSFileShareInput::is_audit_destination_arn_Set() const{
    return m_audit_destination_arn_isSet;
}

bool OAICreateNFSFileShareInput::is_audit_destination_arn_Valid() const{
    return m_audit_destination_arn_isValid;
}

bool OAICreateNFSFileShareInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_file_share_defaults.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_storage_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_acl.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_squash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guess_mime_type_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requester_pays_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_endpoint_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bucket_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audit_destination_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateNFSFileShareInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_token_isValid && m_gateway_arn_isValid && m_role_isValid && m_location_arn_isValid && true;
}

} // namespace OpenAPI
