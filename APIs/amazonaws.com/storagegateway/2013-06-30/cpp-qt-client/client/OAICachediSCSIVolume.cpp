/**
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICachediSCSIVolume.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICachediSCSIVolume::OAICachediSCSIVolume(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICachediSCSIVolume::OAICachediSCSIVolume() {
    this->initializeModel();
}

OAICachediSCSIVolume::~OAICachediSCSIVolume() {}

void OAICachediSCSIVolume::initializeModel() {

    m_volume_arn_isSet = false;
    m_volume_arn_isValid = false;

    m_volume_id_isSet = false;
    m_volume_id_isValid = false;

    m_volume_type_isSet = false;
    m_volume_type_isValid = false;

    m_volume_status_isSet = false;
    m_volume_status_isValid = false;

    m_volume_attachment_status_isSet = false;
    m_volume_attachment_status_isValid = false;

    m_volume_size_in_bytes_isSet = false;
    m_volume_size_in_bytes_isValid = false;

    m_volume_progress_isSet = false;
    m_volume_progress_isValid = false;

    m_source_snapshot_id_isSet = false;
    m_source_snapshot_id_isValid = false;

    m_volumei_scsi_attributes_isSet = false;
    m_volumei_scsi_attributes_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_volume_used_in_bytes_isSet = false;
    m_volume_used_in_bytes_isValid = false;

    m_kms_key_isSet = false;
    m_kms_key_isValid = false;

    m_target_name_isSet = false;
    m_target_name_isValid = false;
}

void OAICachediSCSIVolume::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICachediSCSIVolume::fromJsonObject(QJsonObject json) {

    m_volume_arn_isValid = ::OpenAPI::fromJsonValue(m_volume_arn, json[QString("VolumeARN")]);
    m_volume_arn_isSet = !json[QString("VolumeARN")].isNull() && m_volume_arn_isValid;

    m_volume_id_isValid = ::OpenAPI::fromJsonValue(m_volume_id, json[QString("VolumeId")]);
    m_volume_id_isSet = !json[QString("VolumeId")].isNull() && m_volume_id_isValid;

    m_volume_type_isValid = ::OpenAPI::fromJsonValue(m_volume_type, json[QString("VolumeType")]);
    m_volume_type_isSet = !json[QString("VolumeType")].isNull() && m_volume_type_isValid;

    m_volume_status_isValid = ::OpenAPI::fromJsonValue(m_volume_status, json[QString("VolumeStatus")]);
    m_volume_status_isSet = !json[QString("VolumeStatus")].isNull() && m_volume_status_isValid;

    m_volume_attachment_status_isValid = ::OpenAPI::fromJsonValue(m_volume_attachment_status, json[QString("VolumeAttachmentStatus")]);
    m_volume_attachment_status_isSet = !json[QString("VolumeAttachmentStatus")].isNull() && m_volume_attachment_status_isValid;

    m_volume_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_volume_size_in_bytes, json[QString("VolumeSizeInBytes")]);
    m_volume_size_in_bytes_isSet = !json[QString("VolumeSizeInBytes")].isNull() && m_volume_size_in_bytes_isValid;

    m_volume_progress_isValid = ::OpenAPI::fromJsonValue(m_volume_progress, json[QString("VolumeProgress")]);
    m_volume_progress_isSet = !json[QString("VolumeProgress")].isNull() && m_volume_progress_isValid;

    m_source_snapshot_id_isValid = ::OpenAPI::fromJsonValue(m_source_snapshot_id, json[QString("SourceSnapshotId")]);
    m_source_snapshot_id_isSet = !json[QString("SourceSnapshotId")].isNull() && m_source_snapshot_id_isValid;

    m_volumei_scsi_attributes_isValid = ::OpenAPI::fromJsonValue(m_volumei_scsi_attributes, json[QString("VolumeiSCSIAttributes")]);
    m_volumei_scsi_attributes_isSet = !json[QString("VolumeiSCSIAttributes")].isNull() && m_volumei_scsi_attributes_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("CreatedDate")]);
    m_created_date_isSet = !json[QString("CreatedDate")].isNull() && m_created_date_isValid;

    m_volume_used_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_volume_used_in_bytes, json[QString("VolumeUsedInBytes")]);
    m_volume_used_in_bytes_isSet = !json[QString("VolumeUsedInBytes")].isNull() && m_volume_used_in_bytes_isValid;

    m_kms_key_isValid = ::OpenAPI::fromJsonValue(m_kms_key, json[QString("KMSKey")]);
    m_kms_key_isSet = !json[QString("KMSKey")].isNull() && m_kms_key_isValid;

    m_target_name_isValid = ::OpenAPI::fromJsonValue(m_target_name, json[QString("TargetName")]);
    m_target_name_isSet = !json[QString("TargetName")].isNull() && m_target_name_isValid;
}

QString OAICachediSCSIVolume::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICachediSCSIVolume::asJsonObject() const {
    QJsonObject obj;
    if (m_volume_arn_isSet) {
        obj.insert(QString("VolumeARN"), ::OpenAPI::toJsonValue(m_volume_arn));
    }
    if (m_volume_id_isSet) {
        obj.insert(QString("VolumeId"), ::OpenAPI::toJsonValue(m_volume_id));
    }
    if (m_volume_type_isSet) {
        obj.insert(QString("VolumeType"), ::OpenAPI::toJsonValue(m_volume_type));
    }
    if (m_volume_status_isSet) {
        obj.insert(QString("VolumeStatus"), ::OpenAPI::toJsonValue(m_volume_status));
    }
    if (m_volume_attachment_status_isSet) {
        obj.insert(QString("VolumeAttachmentStatus"), ::OpenAPI::toJsonValue(m_volume_attachment_status));
    }
    if (m_volume_size_in_bytes_isSet) {
        obj.insert(QString("VolumeSizeInBytes"), ::OpenAPI::toJsonValue(m_volume_size_in_bytes));
    }
    if (m_volume_progress_isSet) {
        obj.insert(QString("VolumeProgress"), ::OpenAPI::toJsonValue(m_volume_progress));
    }
    if (m_source_snapshot_id_isSet) {
        obj.insert(QString("SourceSnapshotId"), ::OpenAPI::toJsonValue(m_source_snapshot_id));
    }
    if (m_volumei_scsi_attributes.isSet()) {
        obj.insert(QString("VolumeiSCSIAttributes"), ::OpenAPI::toJsonValue(m_volumei_scsi_attributes));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("CreatedDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_volume_used_in_bytes_isSet) {
        obj.insert(QString("VolumeUsedInBytes"), ::OpenAPI::toJsonValue(m_volume_used_in_bytes));
    }
    if (m_kms_key_isSet) {
        obj.insert(QString("KMSKey"), ::OpenAPI::toJsonValue(m_kms_key));
    }
    if (m_target_name_isSet) {
        obj.insert(QString("TargetName"), ::OpenAPI::toJsonValue(m_target_name));
    }
    return obj;
}

QString OAICachediSCSIVolume::getVolumeArn() const {
    return m_volume_arn;
}
void OAICachediSCSIVolume::setVolumeArn(const QString &volume_arn) {
    m_volume_arn = volume_arn;
    m_volume_arn_isSet = true;
}

bool OAICachediSCSIVolume::is_volume_arn_Set() const{
    return m_volume_arn_isSet;
}

bool OAICachediSCSIVolume::is_volume_arn_Valid() const{
    return m_volume_arn_isValid;
}

QString OAICachediSCSIVolume::getVolumeId() const {
    return m_volume_id;
}
void OAICachediSCSIVolume::setVolumeId(const QString &volume_id) {
    m_volume_id = volume_id;
    m_volume_id_isSet = true;
}

bool OAICachediSCSIVolume::is_volume_id_Set() const{
    return m_volume_id_isSet;
}

bool OAICachediSCSIVolume::is_volume_id_Valid() const{
    return m_volume_id_isValid;
}

QString OAICachediSCSIVolume::getVolumeType() const {
    return m_volume_type;
}
void OAICachediSCSIVolume::setVolumeType(const QString &volume_type) {
    m_volume_type = volume_type;
    m_volume_type_isSet = true;
}

bool OAICachediSCSIVolume::is_volume_type_Set() const{
    return m_volume_type_isSet;
}

bool OAICachediSCSIVolume::is_volume_type_Valid() const{
    return m_volume_type_isValid;
}

QString OAICachediSCSIVolume::getVolumeStatus() const {
    return m_volume_status;
}
void OAICachediSCSIVolume::setVolumeStatus(const QString &volume_status) {
    m_volume_status = volume_status;
    m_volume_status_isSet = true;
}

bool OAICachediSCSIVolume::is_volume_status_Set() const{
    return m_volume_status_isSet;
}

bool OAICachediSCSIVolume::is_volume_status_Valid() const{
    return m_volume_status_isValid;
}

QString OAICachediSCSIVolume::getVolumeAttachmentStatus() const {
    return m_volume_attachment_status;
}
void OAICachediSCSIVolume::setVolumeAttachmentStatus(const QString &volume_attachment_status) {
    m_volume_attachment_status = volume_attachment_status;
    m_volume_attachment_status_isSet = true;
}

bool OAICachediSCSIVolume::is_volume_attachment_status_Set() const{
    return m_volume_attachment_status_isSet;
}

bool OAICachediSCSIVolume::is_volume_attachment_status_Valid() const{
    return m_volume_attachment_status_isValid;
}

qint32 OAICachediSCSIVolume::getVolumeSizeInBytes() const {
    return m_volume_size_in_bytes;
}
void OAICachediSCSIVolume::setVolumeSizeInBytes(const qint32 &volume_size_in_bytes) {
    m_volume_size_in_bytes = volume_size_in_bytes;
    m_volume_size_in_bytes_isSet = true;
}

bool OAICachediSCSIVolume::is_volume_size_in_bytes_Set() const{
    return m_volume_size_in_bytes_isSet;
}

bool OAICachediSCSIVolume::is_volume_size_in_bytes_Valid() const{
    return m_volume_size_in_bytes_isValid;
}

double OAICachediSCSIVolume::getVolumeProgress() const {
    return m_volume_progress;
}
void OAICachediSCSIVolume::setVolumeProgress(const double &volume_progress) {
    m_volume_progress = volume_progress;
    m_volume_progress_isSet = true;
}

bool OAICachediSCSIVolume::is_volume_progress_Set() const{
    return m_volume_progress_isSet;
}

bool OAICachediSCSIVolume::is_volume_progress_Valid() const{
    return m_volume_progress_isValid;
}

QString OAICachediSCSIVolume::getSourceSnapshotId() const {
    return m_source_snapshot_id;
}
void OAICachediSCSIVolume::setSourceSnapshotId(const QString &source_snapshot_id) {
    m_source_snapshot_id = source_snapshot_id;
    m_source_snapshot_id_isSet = true;
}

bool OAICachediSCSIVolume::is_source_snapshot_id_Set() const{
    return m_source_snapshot_id_isSet;
}

bool OAICachediSCSIVolume::is_source_snapshot_id_Valid() const{
    return m_source_snapshot_id_isValid;
}

OAICachediSCSIVolume_VolumeiSCSIAttributes OAICachediSCSIVolume::getVolumeiScsiAttributes() const {
    return m_volumei_scsi_attributes;
}
void OAICachediSCSIVolume::setVolumeiScsiAttributes(const OAICachediSCSIVolume_VolumeiSCSIAttributes &volumei_scsi_attributes) {
    m_volumei_scsi_attributes = volumei_scsi_attributes;
    m_volumei_scsi_attributes_isSet = true;
}

bool OAICachediSCSIVolume::is_volumei_scsi_attributes_Set() const{
    return m_volumei_scsi_attributes_isSet;
}

bool OAICachediSCSIVolume::is_volumei_scsi_attributes_Valid() const{
    return m_volumei_scsi_attributes_isValid;
}

QDateTime OAICachediSCSIVolume::getCreatedDate() const {
    return m_created_date;
}
void OAICachediSCSIVolume::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAICachediSCSIVolume::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAICachediSCSIVolume::is_created_date_Valid() const{
    return m_created_date_isValid;
}

qint32 OAICachediSCSIVolume::getVolumeUsedInBytes() const {
    return m_volume_used_in_bytes;
}
void OAICachediSCSIVolume::setVolumeUsedInBytes(const qint32 &volume_used_in_bytes) {
    m_volume_used_in_bytes = volume_used_in_bytes;
    m_volume_used_in_bytes_isSet = true;
}

bool OAICachediSCSIVolume::is_volume_used_in_bytes_Set() const{
    return m_volume_used_in_bytes_isSet;
}

bool OAICachediSCSIVolume::is_volume_used_in_bytes_Valid() const{
    return m_volume_used_in_bytes_isValid;
}

QString OAICachediSCSIVolume::getKmsKey() const {
    return m_kms_key;
}
void OAICachediSCSIVolume::setKmsKey(const QString &kms_key) {
    m_kms_key = kms_key;
    m_kms_key_isSet = true;
}

bool OAICachediSCSIVolume::is_kms_key_Set() const{
    return m_kms_key_isSet;
}

bool OAICachediSCSIVolume::is_kms_key_Valid() const{
    return m_kms_key_isValid;
}

QString OAICachediSCSIVolume::getTargetName() const {
    return m_target_name;
}
void OAICachediSCSIVolume::setTargetName(const QString &target_name) {
    m_target_name = target_name;
    m_target_name_isSet = true;
}

bool OAICachediSCSIVolume::is_target_name_Set() const{
    return m_target_name_isSet;
}

bool OAICachediSCSIVolume::is_target_name_Valid() const{
    return m_target_name_isValid;
}

bool OAICachediSCSIVolume::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_volume_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_attachment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_snapshot_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumei_scsi_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volume_used_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICachediSCSIVolume::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
