/**
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITapeArchive.h
 *
 * Represents a virtual tape that is archived in the virtual tape shelf (VTS).
 */

#ifndef OAITapeArchive_H
#define OAITapeArchive_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITapeArchive : public OAIObject {
public:
    OAITapeArchive();
    OAITapeArchive(QString json);
    ~OAITapeArchive() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getTapeArn() const;
    void setTapeArn(const QString &tape_arn);
    bool is_tape_arn_Set() const;
    bool is_tape_arn_Valid() const;

    QString getTapeBarcode() const;
    void setTapeBarcode(const QString &tape_barcode);
    bool is_tape_barcode_Set() const;
    bool is_tape_barcode_Valid() const;

    QDateTime getTapeCreatedDate() const;
    void setTapeCreatedDate(const QDateTime &tape_created_date);
    bool is_tape_created_date_Set() const;
    bool is_tape_created_date_Valid() const;

    qint32 getTapeSizeInBytes() const;
    void setTapeSizeInBytes(const qint32 &tape_size_in_bytes);
    bool is_tape_size_in_bytes_Set() const;
    bool is_tape_size_in_bytes_Valid() const;

    QDateTime getCompletionTime() const;
    void setCompletionTime(const QDateTime &completion_time);
    bool is_completion_time_Set() const;
    bool is_completion_time_Valid() const;

    QString getRetrievedTo() const;
    void setRetrievedTo(const QString &retrieved_to);
    bool is_retrieved_to_Set() const;
    bool is_retrieved_to_Valid() const;

    QString getTapeStatus() const;
    void setTapeStatus(const QString &tape_status);
    bool is_tape_status_Set() const;
    bool is_tape_status_Valid() const;

    qint32 getTapeUsedInBytes() const;
    void setTapeUsedInBytes(const qint32 &tape_used_in_bytes);
    bool is_tape_used_in_bytes_Set() const;
    bool is_tape_used_in_bytes_Valid() const;

    QString getKmsKey() const;
    void setKmsKey(const QString &kms_key);
    bool is_kms_key_Set() const;
    bool is_kms_key_Valid() const;

    QString getPoolId() const;
    void setPoolId(const QString &pool_id);
    bool is_pool_id_Set() const;
    bool is_pool_id_Valid() const;

    bool getWorm() const;
    void setWorm(const bool &worm);
    bool is_worm_Set() const;
    bool is_worm_Valid() const;

    QDateTime getRetentionStartDate() const;
    void setRetentionStartDate(const QDateTime &retention_start_date);
    bool is_retention_start_date_Set() const;
    bool is_retention_start_date_Valid() const;

    QDateTime getPoolEntryDate() const;
    void setPoolEntryDate(const QDateTime &pool_entry_date);
    bool is_pool_entry_date_Set() const;
    bool is_pool_entry_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_tape_arn;
    bool m_tape_arn_isSet;
    bool m_tape_arn_isValid;

    QString m_tape_barcode;
    bool m_tape_barcode_isSet;
    bool m_tape_barcode_isValid;

    QDateTime m_tape_created_date;
    bool m_tape_created_date_isSet;
    bool m_tape_created_date_isValid;

    qint32 m_tape_size_in_bytes;
    bool m_tape_size_in_bytes_isSet;
    bool m_tape_size_in_bytes_isValid;

    QDateTime m_completion_time;
    bool m_completion_time_isSet;
    bool m_completion_time_isValid;

    QString m_retrieved_to;
    bool m_retrieved_to_isSet;
    bool m_retrieved_to_isValid;

    QString m_tape_status;
    bool m_tape_status_isSet;
    bool m_tape_status_isValid;

    qint32 m_tape_used_in_bytes;
    bool m_tape_used_in_bytes_isSet;
    bool m_tape_used_in_bytes_isValid;

    QString m_kms_key;
    bool m_kms_key_isSet;
    bool m_kms_key_isValid;

    QString m_pool_id;
    bool m_pool_id_isSet;
    bool m_pool_id_isValid;

    bool m_worm;
    bool m_worm_isSet;
    bool m_worm_isValid;

    QDateTime m_retention_start_date;
    bool m_retention_start_date_isSet;
    bool m_retention_start_date_isValid;

    QDateTime m_pool_entry_date;
    bool m_pool_entry_date_isSet;
    bool m_pool_entry_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITapeArchive)

#endif // OAITapeArchive_H
