/**
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateSMBFileShareInput.h
 *
 * UpdateSMBFileShareInput
 */

#ifndef OAIUpdateSMBFileShareInput_H
#define OAIUpdateSMBFileShareInput_H

#include <QJsonObject>

#include "OAICaseSensitivity.h"
#include "OAICreateNFSFileShareInput_CacheAttributes.h"
#include "OAIObjectACL.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateNFSFileShareInput_CacheAttributes;

class OAIUpdateSMBFileShareInput : public OAIObject {
public:
    OAIUpdateSMBFileShareInput();
    OAIUpdateSMBFileShareInput(QString json);
    ~OAIUpdateSMBFileShareInput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFileShareArn() const;
    void setFileShareArn(const QString &file_share_arn);
    bool is_file_share_arn_Set() const;
    bool is_file_share_arn_Valid() const;

    bool getKmsEncrypted() const;
    void setKmsEncrypted(const bool &kms_encrypted);
    bool is_kms_encrypted_Set() const;
    bool is_kms_encrypted_Valid() const;

    QString getKmsKey() const;
    void setKmsKey(const QString &kms_key);
    bool is_kms_key_Set() const;
    bool is_kms_key_Valid() const;

    QString getDefaultStorageClass() const;
    void setDefaultStorageClass(const QString &default_storage_class);
    bool is_default_storage_class_Set() const;
    bool is_default_storage_class_Valid() const;

    OAIObjectACL getObjectAcl() const;
    void setObjectAcl(const OAIObjectACL &object_acl);
    bool is_object_acl_Set() const;
    bool is_object_acl_Valid() const;

    bool getReadOnly() const;
    void setReadOnly(const bool &read_only);
    bool is_read_only_Set() const;
    bool is_read_only_Valid() const;

    bool getGuessMimeTypeEnabled() const;
    void setGuessMimeTypeEnabled(const bool &guess_mime_type_enabled);
    bool is_guess_mime_type_enabled_Set() const;
    bool is_guess_mime_type_enabled_Valid() const;

    bool getRequesterPays() const;
    void setRequesterPays(const bool &requester_pays);
    bool is_requester_pays_Set() const;
    bool is_requester_pays_Valid() const;

    bool getSmbaclEnabled() const;
    void setSmbaclEnabled(const bool &smbacl_enabled);
    bool is_smbacl_enabled_Set() const;
    bool is_smbacl_enabled_Valid() const;

    bool getAccessBasedEnumeration() const;
    void setAccessBasedEnumeration(const bool &access_based_enumeration);
    bool is_access_based_enumeration_Set() const;
    bool is_access_based_enumeration_Valid() const;

    QList getAdminUserList() const;
    void setAdminUserList(const QList &admin_user_list);
    bool is_admin_user_list_Set() const;
    bool is_admin_user_list_Valid() const;

    QList getValidUserList() const;
    void setValidUserList(const QList &valid_user_list);
    bool is_valid_user_list_Set() const;
    bool is_valid_user_list_Valid() const;

    QList getInvalidUserList() const;
    void setInvalidUserList(const QList &invalid_user_list);
    bool is_invalid_user_list_Set() const;
    bool is_invalid_user_list_Valid() const;

    QString getAuditDestinationArn() const;
    void setAuditDestinationArn(const QString &audit_destination_arn);
    bool is_audit_destination_arn_Set() const;
    bool is_audit_destination_arn_Valid() const;

    OAICaseSensitivity getCaseSensitivity() const;
    void setCaseSensitivity(const OAICaseSensitivity &case_sensitivity);
    bool is_case_sensitivity_Set() const;
    bool is_case_sensitivity_Valid() const;

    QString getFileShareName() const;
    void setFileShareName(const QString &file_share_name);
    bool is_file_share_name_Set() const;
    bool is_file_share_name_Valid() const;

    OAICreateNFSFileShareInput_CacheAttributes getCacheAttributes() const;
    void setCacheAttributes(const OAICreateNFSFileShareInput_CacheAttributes &cache_attributes);
    bool is_cache_attributes_Set() const;
    bool is_cache_attributes_Valid() const;

    QString getNotificationPolicy() const;
    void setNotificationPolicy(const QString &notification_policy);
    bool is_notification_policy_Set() const;
    bool is_notification_policy_Valid() const;

    bool getOplocksEnabled() const;
    void setOplocksEnabled(const bool &oplocks_enabled);
    bool is_oplocks_enabled_Set() const;
    bool is_oplocks_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_file_share_arn;
    bool m_file_share_arn_isSet;
    bool m_file_share_arn_isValid;

    bool m_kms_encrypted;
    bool m_kms_encrypted_isSet;
    bool m_kms_encrypted_isValid;

    QString m_kms_key;
    bool m_kms_key_isSet;
    bool m_kms_key_isValid;

    QString m_default_storage_class;
    bool m_default_storage_class_isSet;
    bool m_default_storage_class_isValid;

    OAIObjectACL m_object_acl;
    bool m_object_acl_isSet;
    bool m_object_acl_isValid;

    bool m_read_only;
    bool m_read_only_isSet;
    bool m_read_only_isValid;

    bool m_guess_mime_type_enabled;
    bool m_guess_mime_type_enabled_isSet;
    bool m_guess_mime_type_enabled_isValid;

    bool m_requester_pays;
    bool m_requester_pays_isSet;
    bool m_requester_pays_isValid;

    bool m_smbacl_enabled;
    bool m_smbacl_enabled_isSet;
    bool m_smbacl_enabled_isValid;

    bool m_access_based_enumeration;
    bool m_access_based_enumeration_isSet;
    bool m_access_based_enumeration_isValid;

    QList m_admin_user_list;
    bool m_admin_user_list_isSet;
    bool m_admin_user_list_isValid;

    QList m_valid_user_list;
    bool m_valid_user_list_isSet;
    bool m_valid_user_list_isValid;

    QList m_invalid_user_list;
    bool m_invalid_user_list_isSet;
    bool m_invalid_user_list_isValid;

    QString m_audit_destination_arn;
    bool m_audit_destination_arn_isSet;
    bool m_audit_destination_arn_isValid;

    OAICaseSensitivity m_case_sensitivity;
    bool m_case_sensitivity_isSet;
    bool m_case_sensitivity_isValid;

    QString m_file_share_name;
    bool m_file_share_name_isSet;
    bool m_file_share_name_isValid;

    OAICreateNFSFileShareInput_CacheAttributes m_cache_attributes;
    bool m_cache_attributes_isSet;
    bool m_cache_attributes_isValid;

    QString m_notification_policy;
    bool m_notification_policy_isSet;
    bool m_notification_policy_isValid;

    bool m_oplocks_enabled;
    bool m_oplocks_enabled_isSet;
    bool m_oplocks_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateSMBFileShareInput)

#endif // OAIUpdateSMBFileShareInput_H
