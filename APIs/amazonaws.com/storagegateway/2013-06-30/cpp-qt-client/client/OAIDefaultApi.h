/**
 * AWS Storage Gateway
 * <fullname>Storage Gateway Service</fullname> <p>Storage Gateway is the service that connects an on-premises software appliance with cloud-based storage to provide seamless and secure integration between an organization's on-premises IT environment and the Amazon Web Services storage infrastructure. The service enables you to securely upload data to the Amazon Web Services Cloud for cost effective backup and rapid disaster recovery.</p> <p>Use the following links to get started using the <i>Storage Gateway Service API Reference</i>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewayHTTPRequestsHeaders\">Storage Gateway required request headers</a>: Describes the required headers that you must send with every POST request to Storage Gateway.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#AWSStorageGatewaySigningRequests\">Signing requests</a>: Storage Gateway requires that you authenticate every request you send; this topic describes how sign such a request.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/userguide/AWSStorageGatewayAPI.html#APIErrorResponses\">Error responses</a>: Provides reference information about Storage Gateway errors.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/storagegateway/latest/APIReference/API_Operations.html\">Operations in Storage Gateway</a>: Contains detailed descriptions of all Storage Gateway operations, their request parameters, response elements, possible errors, and examples of requests and responses.</p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/general/latest/gr/sg.html\">Storage Gateway endpoints and quotas</a>: Provides a list of each Amazon Web Services Region and the endpoints available for use with Storage Gateway.</p> </li> </ul> <note> <p>Storage Gateway resource IDs are in uppercase. When you use these resource IDs with the Amazon EC2 API, EC2 expects resource IDs in lowercase. You must change your resource ID to lowercase to use it with the EC2 API. For example, in Storage Gateway the ID for a volume might be <code>vol-AA22BB012345DAF670</code>. When you use this ID with the EC2 API, you must change it to <code>vol-aa22bb012345daf670</code>. Otherwise, the EC2 API might not behave as expected.</p> </note> <important> <p>IDs for Storage Gateway volumes and Amazon EBS snapshots created from gateway volumes are changing to a longer format. Starting in December 2016, all new volumes and snapshots will be created with a 17-character string. Starting in April 2016, you will be able to use these longer IDs so you can test your systems with the new format. For more information, see <a href=\"http://aws.amazon.com/ec2/faqs/#longer-ids\">Longer EC2 and EBS resource IDs</a>.</p> <p>For example, a volume Amazon Resource Name (ARN) with the longer volume ID format looks like the following:</p> <p> <code>arn:aws:storagegateway:us-west-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABBCCDDEEFFG</code>.</p> <p>A snapshot ID with the longer ID format looks like the following: <code>snap-78e226633445566ee</code>.</p> <p>For more information, see <a href=\"http://forums.aws.amazon.com/ann.jspa?annID=3557\">Announcement: Heads-up â€“ Longer Storage Gateway volume and snapshot IDs coming in 2016</a>.</p> </important>
 *
 * The version of the OpenAPI document: 2013-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivateGatewayInput.h"
#include "OAIActivateGatewayOutput.h"
#include "OAIAddCacheInput.h"
#include "OAIAddCacheOutput.h"
#include "OAIAddTagsToResourceInput.h"
#include "OAIAddTagsToResourceOutput.h"
#include "OAIAddUploadBufferInput.h"
#include "OAIAddUploadBufferOutput.h"
#include "OAIAddWorkingStorageInput.h"
#include "OAIAddWorkingStorageOutput.h"
#include "OAIAssignTapePoolInput.h"
#include "OAIAssignTapePoolOutput.h"
#include "OAIAssociateFileSystemInput.h"
#include "OAIAssociateFileSystemOutput.h"
#include "OAIAttachVolumeInput.h"
#include "OAIAttachVolumeOutput.h"
#include "OAICancelArchivalInput.h"
#include "OAICancelArchivalOutput.h"
#include "OAICancelRetrievalInput.h"
#include "OAICancelRetrievalOutput.h"
#include "OAICreateCachediSCSIVolumeInput.h"
#include "OAICreateCachediSCSIVolumeOutput.h"
#include "OAICreateNFSFileShareInput.h"
#include "OAICreateNFSFileShareOutput.h"
#include "OAICreateSMBFileShareInput.h"
#include "OAICreateSMBFileShareOutput.h"
#include "OAICreateSnapshotFromVolumeRecoveryPointInput.h"
#include "OAICreateSnapshotFromVolumeRecoveryPointOutput.h"
#include "OAICreateSnapshotInput.h"
#include "OAICreateSnapshotOutput.h"
#include "OAICreateStorediSCSIVolumeInput.h"
#include "OAICreateStorediSCSIVolumeOutput.h"
#include "OAICreateTapePoolInput.h"
#include "OAICreateTapePoolOutput.h"
#include "OAICreateTapeWithBarcodeInput.h"
#include "OAICreateTapeWithBarcodeOutput.h"
#include "OAICreateTapesInput.h"
#include "OAICreateTapesOutput.h"
#include "OAIDeleteAutomaticTapeCreationPolicyInput.h"
#include "OAIDeleteAutomaticTapeCreationPolicyOutput.h"
#include "OAIDeleteBandwidthRateLimitInput.h"
#include "OAIDeleteBandwidthRateLimitOutput.h"
#include "OAIDeleteChapCredentialsInput.h"
#include "OAIDeleteChapCredentialsOutput.h"
#include "OAIDeleteFileShareInput.h"
#include "OAIDeleteFileShareOutput.h"
#include "OAIDeleteGatewayInput.h"
#include "OAIDeleteGatewayOutput.h"
#include "OAIDeleteSnapshotScheduleInput.h"
#include "OAIDeleteSnapshotScheduleOutput.h"
#include "OAIDeleteTapeArchiveInput.h"
#include "OAIDeleteTapeArchiveOutput.h"
#include "OAIDeleteTapeInput.h"
#include "OAIDeleteTapeOutput.h"
#include "OAIDeleteTapePoolInput.h"
#include "OAIDeleteTapePoolOutput.h"
#include "OAIDeleteVolumeInput.h"
#include "OAIDeleteVolumeOutput.h"
#include "OAIDescribeAvailabilityMonitorTestInput.h"
#include "OAIDescribeAvailabilityMonitorTestOutput.h"
#include "OAIDescribeBandwidthRateLimitInput.h"
#include "OAIDescribeBandwidthRateLimitOutput.h"
#include "OAIDescribeBandwidthRateLimitScheduleInput.h"
#include "OAIDescribeBandwidthRateLimitScheduleOutput.h"
#include "OAIDescribeCacheInput.h"
#include "OAIDescribeCacheOutput.h"
#include "OAIDescribeCachediSCSIVolumesInput.h"
#include "OAIDescribeCachediSCSIVolumesOutput.h"
#include "OAIDescribeChapCredentialsInput.h"
#include "OAIDescribeChapCredentialsOutput.h"
#include "OAIDescribeFileSystemAssociationsInput.h"
#include "OAIDescribeFileSystemAssociationsOutput.h"
#include "OAIDescribeGatewayInformationInput.h"
#include "OAIDescribeGatewayInformationOutput.h"
#include "OAIDescribeMaintenanceStartTimeInput.h"
#include "OAIDescribeMaintenanceStartTimeOutput.h"
#include "OAIDescribeNFSFileSharesInput.h"
#include "OAIDescribeNFSFileSharesOutput.h"
#include "OAIDescribeSMBFileSharesInput.h"
#include "OAIDescribeSMBFileSharesOutput.h"
#include "OAIDescribeSMBSettingsInput.h"
#include "OAIDescribeSMBSettingsOutput.h"
#include "OAIDescribeSnapshotScheduleInput.h"
#include "OAIDescribeSnapshotScheduleOutput.h"
#include "OAIDescribeStorediSCSIVolumesInput.h"
#include "OAIDescribeStorediSCSIVolumesOutput.h"
#include "OAIDescribeTapeArchivesInput.h"
#include "OAIDescribeTapeArchivesOutput.h"
#include "OAIDescribeTapeRecoveryPointsInput.h"
#include "OAIDescribeTapeRecoveryPointsOutput.h"
#include "OAIDescribeTapesInput.h"
#include "OAIDescribeTapesOutput.h"
#include "OAIDescribeUploadBufferInput.h"
#include "OAIDescribeUploadBufferOutput.h"
#include "OAIDescribeVTLDevicesInput.h"
#include "OAIDescribeVTLDevicesOutput.h"
#include "OAIDescribeWorkingStorageInput.h"
#include "OAIDescribeWorkingStorageOutput.h"
#include "OAIDetachVolumeInput.h"
#include "OAIDetachVolumeOutput.h"
#include "OAIDisableGatewayInput.h"
#include "OAIDisableGatewayOutput.h"
#include "OAIDisassociateFileSystemInput.h"
#include "OAIDisassociateFileSystemOutput.h"
#include "OAIJoinDomainInput.h"
#include "OAIJoinDomainOutput.h"
#include "OAIListAutomaticTapeCreationPoliciesInput.h"
#include "OAIListAutomaticTapeCreationPoliciesOutput.h"
#include "OAIListFileSharesInput.h"
#include "OAIListFileSharesOutput.h"
#include "OAIListFileSystemAssociationsInput.h"
#include "OAIListFileSystemAssociationsOutput.h"
#include "OAIListGatewaysInput.h"
#include "OAIListGatewaysOutput.h"
#include "OAIListLocalDisksInput.h"
#include "OAIListLocalDisksOutput.h"
#include "OAIListTagsForResourceInput.h"
#include "OAIListTagsForResourceOutput.h"
#include "OAIListTapePoolsInput.h"
#include "OAIListTapePoolsOutput.h"
#include "OAIListTapesInput.h"
#include "OAIListTapesOutput.h"
#include "OAIListVolumeInitiatorsInput.h"
#include "OAIListVolumeInitiatorsOutput.h"
#include "OAIListVolumeRecoveryPointsInput.h"
#include "OAIListVolumeRecoveryPointsOutput.h"
#include "OAIListVolumesInput.h"
#include "OAIListVolumesOutput.h"
#include "OAINotifyWhenUploadedInput.h"
#include "OAINotifyWhenUploadedOutput.h"
#include "OAIRefreshCacheInput.h"
#include "OAIRefreshCacheOutput.h"
#include "OAIRemoveTagsFromResourceInput.h"
#include "OAIRemoveTagsFromResourceOutput.h"
#include "OAIResetCacheInput.h"
#include "OAIResetCacheOutput.h"
#include "OAIRetrieveTapeArchiveInput.h"
#include "OAIRetrieveTapeArchiveOutput.h"
#include "OAIRetrieveTapeRecoveryPointInput.h"
#include "OAIRetrieveTapeRecoveryPointOutput.h"
#include "OAISetLocalConsolePasswordInput.h"
#include "OAISetLocalConsolePasswordOutput.h"
#include "OAISetSMBGuestPasswordInput.h"
#include "OAISetSMBGuestPasswordOutput.h"
#include "OAIShutdownGatewayInput.h"
#include "OAIShutdownGatewayOutput.h"
#include "OAIStartAvailabilityMonitorTestInput.h"
#include "OAIStartAvailabilityMonitorTestOutput.h"
#include "OAIStartGatewayInput.h"
#include "OAIStartGatewayOutput.h"
#include "OAIUpdateAutomaticTapeCreationPolicyInput.h"
#include "OAIUpdateAutomaticTapeCreationPolicyOutput.h"
#include "OAIUpdateBandwidthRateLimitInput.h"
#include "OAIUpdateBandwidthRateLimitOutput.h"
#include "OAIUpdateBandwidthRateLimitScheduleInput.h"
#include "OAIUpdateBandwidthRateLimitScheduleOutput.h"
#include "OAIUpdateChapCredentialsInput.h"
#include "OAIUpdateChapCredentialsOutput.h"
#include "OAIUpdateFileSystemAssociationInput.h"
#include "OAIUpdateFileSystemAssociationOutput.h"
#include "OAIUpdateGatewayInformationInput.h"
#include "OAIUpdateGatewayInformationOutput.h"
#include "OAIUpdateGatewaySoftwareNowInput.h"
#include "OAIUpdateGatewaySoftwareNowOutput.h"
#include "OAIUpdateMaintenanceStartTimeInput.h"
#include "OAIUpdateMaintenanceStartTimeOutput.h"
#include "OAIUpdateNFSFileShareInput.h"
#include "OAIUpdateNFSFileShareOutput.h"
#include "OAIUpdateSMBFileShareInput.h"
#include "OAIUpdateSMBFileShareOutput.h"
#include "OAIUpdateSMBFileShareVisibilityInput.h"
#include "OAIUpdateSMBFileShareVisibilityOutput.h"
#include "OAIUpdateSMBLocalGroupsInput.h"
#include "OAIUpdateSMBLocalGroupsOutput.h"
#include "OAIUpdateSMBSecurityStrategyInput.h"
#include "OAIUpdateSMBSecurityStrategyOutput.h"
#include "OAIUpdateSnapshotScheduleInput.h"
#include "OAIUpdateSnapshotScheduleOutput.h"
#include "OAIUpdateVTLDeviceTypeInput.h"
#include "OAIUpdateVTLDeviceTypeOutput.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_activate_gateway_input OAIActivateGatewayInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void activateGateway(const QString &x_amz_target, const OAIActivateGatewayInput &oai_activate_gateway_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_add_cache_input OAIAddCacheInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void addCache(const QString &x_amz_target, const OAIAddCacheInput &oai_add_cache_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_add_tags_to_resource_input OAIAddTagsToResourceInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void addTagsToResource(const QString &x_amz_target, const OAIAddTagsToResourceInput &oai_add_tags_to_resource_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_add_upload_buffer_input OAIAddUploadBufferInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void addUploadBuffer(const QString &x_amz_target, const OAIAddUploadBufferInput &oai_add_upload_buffer_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_add_working_storage_input OAIAddWorkingStorageInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void addWorkingStorage(const QString &x_amz_target, const OAIAddWorkingStorageInput &oai_add_working_storage_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_assign_tape_pool_input OAIAssignTapePoolInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void assignTapePool(const QString &x_amz_target, const OAIAssignTapePoolInput &oai_assign_tape_pool_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_associate_file_system_input OAIAssociateFileSystemInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateFileSystem(const QString &x_amz_target, const OAIAssociateFileSystemInput &oai_associate_file_system_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_attach_volume_input OAIAttachVolumeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void attachVolume(const QString &x_amz_target, const OAIAttachVolumeInput &oai_attach_volume_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_cancel_archival_input OAICancelArchivalInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void cancelArchival(const QString &x_amz_target, const OAICancelArchivalInput &oai_cancel_archival_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_cancel_retrieval_input OAICancelRetrievalInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void cancelRetrieval(const QString &x_amz_target, const OAICancelRetrievalInput &oai_cancel_retrieval_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_cachedi_scsi_volume_input OAICreateCachediSCSIVolumeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createCachediSCSIVolume(const QString &x_amz_target, const OAICreateCachediSCSIVolumeInput &oai_create_cachedi_scsi_volume_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_nfs_file_share_input OAICreateNFSFileShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createNFSFileShare(const QString &x_amz_target, const OAICreateNFSFileShareInput &oai_create_nfs_file_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_smb_file_share_input OAICreateSMBFileShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createSMBFileShare(const QString &x_amz_target, const OAICreateSMBFileShareInput &oai_create_smb_file_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_snapshot_input OAICreateSnapshotInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createSnapshot(const QString &x_amz_target, const OAICreateSnapshotInput &oai_create_snapshot_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_snapshot_from_volume_recovery_point_input OAICreateSnapshotFromVolumeRecoveryPointInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createSnapshotFromVolumeRecoveryPoint(const QString &x_amz_target, const OAICreateSnapshotFromVolumeRecoveryPointInput &oai_create_snapshot_from_volume_recovery_point_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_storedi_scsi_volume_input OAICreateStorediSCSIVolumeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createStorediSCSIVolume(const QString &x_amz_target, const OAICreateStorediSCSIVolumeInput &oai_create_storedi_scsi_volume_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_tape_pool_input OAICreateTapePoolInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTapePool(const QString &x_amz_target, const OAICreateTapePoolInput &oai_create_tape_pool_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_tape_with_barcode_input OAICreateTapeWithBarcodeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTapeWithBarcode(const QString &x_amz_target, const OAICreateTapeWithBarcodeInput &oai_create_tape_with_barcode_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_create_tapes_input OAICreateTapesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createTapes(const QString &x_amz_target, const OAICreateTapesInput &oai_create_tapes_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_automatic_tape_creation_policy_input OAIDeleteAutomaticTapeCreationPolicyInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAutomaticTapeCreationPolicy(const QString &x_amz_target, const OAIDeleteAutomaticTapeCreationPolicyInput &oai_delete_automatic_tape_creation_policy_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_bandwidth_rate_limit_input OAIDeleteBandwidthRateLimitInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteBandwidthRateLimit(const QString &x_amz_target, const OAIDeleteBandwidthRateLimitInput &oai_delete_bandwidth_rate_limit_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_chap_credentials_input OAIDeleteChapCredentialsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteChapCredentials(const QString &x_amz_target, const OAIDeleteChapCredentialsInput &oai_delete_chap_credentials_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_file_share_input OAIDeleteFileShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteFileShare(const QString &x_amz_target, const OAIDeleteFileShareInput &oai_delete_file_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_gateway_input OAIDeleteGatewayInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteGateway(const QString &x_amz_target, const OAIDeleteGatewayInput &oai_delete_gateway_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_snapshot_schedule_input OAIDeleteSnapshotScheduleInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteSnapshotSchedule(const QString &x_amz_target, const OAIDeleteSnapshotScheduleInput &oai_delete_snapshot_schedule_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_tape_input OAIDeleteTapeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTape(const QString &x_amz_target, const OAIDeleteTapeInput &oai_delete_tape_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_tape_archive_input OAIDeleteTapeArchiveInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTapeArchive(const QString &x_amz_target, const OAIDeleteTapeArchiveInput &oai_delete_tape_archive_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_tape_pool_input OAIDeleteTapePoolInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteTapePool(const QString &x_amz_target, const OAIDeleteTapePoolInput &oai_delete_tape_pool_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_delete_volume_input OAIDeleteVolumeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteVolume(const QString &x_amz_target, const OAIDeleteVolumeInput &oai_delete_volume_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_availability_monitor_test_input OAIDescribeAvailabilityMonitorTestInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeAvailabilityMonitorTest(const QString &x_amz_target, const OAIDescribeAvailabilityMonitorTestInput &oai_describe_availability_monitor_test_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_bandwidth_rate_limit_input OAIDescribeBandwidthRateLimitInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeBandwidthRateLimit(const QString &x_amz_target, const OAIDescribeBandwidthRateLimitInput &oai_describe_bandwidth_rate_limit_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_bandwidth_rate_limit_schedule_input OAIDescribeBandwidthRateLimitScheduleInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeBandwidthRateLimitSchedule(const QString &x_amz_target, const OAIDescribeBandwidthRateLimitScheduleInput &oai_describe_bandwidth_rate_limit_schedule_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_cache_input OAIDescribeCacheInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeCache(const QString &x_amz_target, const OAIDescribeCacheInput &oai_describe_cache_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_cachedi_scsi_volumes_input OAIDescribeCachediSCSIVolumesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeCachediSCSIVolumes(const QString &x_amz_target, const OAIDescribeCachediSCSIVolumesInput &oai_describe_cachedi_scsi_volumes_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_chap_credentials_input OAIDescribeChapCredentialsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeChapCredentials(const QString &x_amz_target, const OAIDescribeChapCredentialsInput &oai_describe_chap_credentials_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_file_system_associations_input OAIDescribeFileSystemAssociationsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeFileSystemAssociations(const QString &x_amz_target, const OAIDescribeFileSystemAssociationsInput &oai_describe_file_system_associations_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_gateway_information_input OAIDescribeGatewayInformationInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeGatewayInformation(const QString &x_amz_target, const OAIDescribeGatewayInformationInput &oai_describe_gateway_information_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_maintenance_start_time_input OAIDescribeMaintenanceStartTimeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeMaintenanceStartTime(const QString &x_amz_target, const OAIDescribeMaintenanceStartTimeInput &oai_describe_maintenance_start_time_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_nfs_file_shares_input OAIDescribeNFSFileSharesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeNFSFileShares(const QString &x_amz_target, const OAIDescribeNFSFileSharesInput &oai_describe_nfs_file_shares_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_smb_file_shares_input OAIDescribeSMBFileSharesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeSMBFileShares(const QString &x_amz_target, const OAIDescribeSMBFileSharesInput &oai_describe_smb_file_shares_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_smb_settings_input OAIDescribeSMBSettingsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeSMBSettings(const QString &x_amz_target, const OAIDescribeSMBSettingsInput &oai_describe_smb_settings_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_snapshot_schedule_input OAIDescribeSnapshotScheduleInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeSnapshotSchedule(const QString &x_amz_target, const OAIDescribeSnapshotScheduleInput &oai_describe_snapshot_schedule_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_storedi_scsi_volumes_input OAIDescribeStorediSCSIVolumesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeStorediSCSIVolumes(const QString &x_amz_target, const OAIDescribeStorediSCSIVolumesInput &oai_describe_storedi_scsi_volumes_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_tape_archives_input OAIDescribeTapeArchivesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void describeTapeArchives(const QString &x_amz_target, const OAIDescribeTapeArchivesInput &oai_describe_tape_archives_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_tape_recovery_points_input OAIDescribeTapeRecoveryPointsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void describeTapeRecoveryPoints(const QString &x_amz_target, const OAIDescribeTapeRecoveryPointsInput &oai_describe_tape_recovery_points_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_tapes_input OAIDescribeTapesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void describeTapes(const QString &x_amz_target, const OAIDescribeTapesInput &oai_describe_tapes_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_upload_buffer_input OAIDescribeUploadBufferInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeUploadBuffer(const QString &x_amz_target, const OAIDescribeUploadBufferInput &oai_describe_upload_buffer_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_vtl_devices_input OAIDescribeVTLDevicesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void describeVTLDevices(const QString &x_amz_target, const OAIDescribeVTLDevicesInput &oai_describe_vtl_devices_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_describe_working_storage_input OAIDescribeWorkingStorageInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void describeWorkingStorage(const QString &x_amz_target, const OAIDescribeWorkingStorageInput &oai_describe_working_storage_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_detach_volume_input OAIDetachVolumeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void detachVolume(const QString &x_amz_target, const OAIDetachVolumeInput &oai_detach_volume_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disable_gateway_input OAIDisableGatewayInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disableGateway(const QString &x_amz_target, const OAIDisableGatewayInput &oai_disable_gateway_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_disassociate_file_system_input OAIDisassociateFileSystemInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateFileSystem(const QString &x_amz_target, const OAIDisassociateFileSystemInput &oai_disassociate_file_system_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_join_domain_input OAIJoinDomainInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void joinDomain(const QString &x_amz_target, const OAIJoinDomainInput &oai_join_domain_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_automatic_tape_creation_policies_input OAIListAutomaticTapeCreationPoliciesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listAutomaticTapeCreationPolicies(const QString &x_amz_target, const OAIListAutomaticTapeCreationPoliciesInput &oai_list_automatic_tape_creation_policies_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_file_shares_input OAIListFileSharesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listFileShares(const QString &x_amz_target, const OAIListFileSharesInput &oai_list_file_shares_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_file_system_associations_input OAIListFileSystemAssociationsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listFileSystemAssociations(const QString &x_amz_target, const OAIListFileSystemAssociationsInput &oai_list_file_system_associations_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_gateways_input OAIListGatewaysInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listGateways(const QString &x_amz_target, const OAIListGatewaysInput &oai_list_gateways_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_local_disks_input OAIListLocalDisksInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listLocalDisks(const QString &x_amz_target, const OAIListLocalDisksInput &oai_list_local_disks_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tags_for_resource_input OAIListTagsForResourceInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listTagsForResource(const QString &x_amz_target, const OAIListTagsForResourceInput &oai_list_tags_for_resource_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tape_pools_input OAIListTapePoolsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listTapePools(const QString &x_amz_target, const OAIListTapePoolsInput &oai_list_tape_pools_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_tapes_input OAIListTapesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listTapes(const QString &x_amz_target, const OAIListTapesInput &oai_list_tapes_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_volume_initiators_input OAIListVolumeInitiatorsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listVolumeInitiators(const QString &x_amz_target, const OAIListVolumeInitiatorsInput &oai_list_volume_initiators_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_volume_recovery_points_input OAIListVolumeRecoveryPointsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listVolumeRecoveryPoints(const QString &x_amz_target, const OAIListVolumeRecoveryPointsInput &oai_list_volume_recovery_points_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_list_volumes_input OAIListVolumesInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  limit QString [optional]
    * @param[in]  marker QString [optional]
    */
    virtual void listVolumes(const QString &x_amz_target, const OAIListVolumesInput &oai_list_volumes_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &marker = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_notify_when_uploaded_input OAINotifyWhenUploadedInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void notifyWhenUploaded(const QString &x_amz_target, const OAINotifyWhenUploadedInput &oai_notify_when_uploaded_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_refresh_cache_input OAIRefreshCacheInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void refreshCache(const QString &x_amz_target, const OAIRefreshCacheInput &oai_refresh_cache_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_remove_tags_from_resource_input OAIRemoveTagsFromResourceInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void removeTagsFromResource(const QString &x_amz_target, const OAIRemoveTagsFromResourceInput &oai_remove_tags_from_resource_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_reset_cache_input OAIResetCacheInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void resetCache(const QString &x_amz_target, const OAIResetCacheInput &oai_reset_cache_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_retrieve_tape_archive_input OAIRetrieveTapeArchiveInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void retrieveTapeArchive(const QString &x_amz_target, const OAIRetrieveTapeArchiveInput &oai_retrieve_tape_archive_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_retrieve_tape_recovery_point_input OAIRetrieveTapeRecoveryPointInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void retrieveTapeRecoveryPoint(const QString &x_amz_target, const OAIRetrieveTapeRecoveryPointInput &oai_retrieve_tape_recovery_point_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_set_local_console_password_input OAISetLocalConsolePasswordInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void setLocalConsolePassword(const QString &x_amz_target, const OAISetLocalConsolePasswordInput &oai_set_local_console_password_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_set_smb_guest_password_input OAISetSMBGuestPasswordInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void setSMBGuestPassword(const QString &x_amz_target, const OAISetSMBGuestPasswordInput &oai_set_smb_guest_password_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_shutdown_gateway_input OAIShutdownGatewayInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void shutdownGateway(const QString &x_amz_target, const OAIShutdownGatewayInput &oai_shutdown_gateway_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_availability_monitor_test_input OAIStartAvailabilityMonitorTestInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startAvailabilityMonitorTest(const QString &x_amz_target, const OAIStartAvailabilityMonitorTestInput &oai_start_availability_monitor_test_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_start_gateway_input OAIStartGatewayInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void startGateway(const QString &x_amz_target, const OAIStartGatewayInput &oai_start_gateway_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_automatic_tape_creation_policy_input OAIUpdateAutomaticTapeCreationPolicyInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAutomaticTapeCreationPolicy(const QString &x_amz_target, const OAIUpdateAutomaticTapeCreationPolicyInput &oai_update_automatic_tape_creation_policy_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_bandwidth_rate_limit_input OAIUpdateBandwidthRateLimitInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateBandwidthRateLimit(const QString &x_amz_target, const OAIUpdateBandwidthRateLimitInput &oai_update_bandwidth_rate_limit_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_bandwidth_rate_limit_schedule_input OAIUpdateBandwidthRateLimitScheduleInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateBandwidthRateLimitSchedule(const QString &x_amz_target, const OAIUpdateBandwidthRateLimitScheduleInput &oai_update_bandwidth_rate_limit_schedule_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_chap_credentials_input OAIUpdateChapCredentialsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateChapCredentials(const QString &x_amz_target, const OAIUpdateChapCredentialsInput &oai_update_chap_credentials_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_file_system_association_input OAIUpdateFileSystemAssociationInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateFileSystemAssociation(const QString &x_amz_target, const OAIUpdateFileSystemAssociationInput &oai_update_file_system_association_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_gateway_information_input OAIUpdateGatewayInformationInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateGatewayInformation(const QString &x_amz_target, const OAIUpdateGatewayInformationInput &oai_update_gateway_information_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_gateway_software_now_input OAIUpdateGatewaySoftwareNowInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateGatewaySoftwareNow(const QString &x_amz_target, const OAIUpdateGatewaySoftwareNowInput &oai_update_gateway_software_now_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_maintenance_start_time_input OAIUpdateMaintenanceStartTimeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateMaintenanceStartTime(const QString &x_amz_target, const OAIUpdateMaintenanceStartTimeInput &oai_update_maintenance_start_time_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_nfs_file_share_input OAIUpdateNFSFileShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateNFSFileShare(const QString &x_amz_target, const OAIUpdateNFSFileShareInput &oai_update_nfs_file_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_smb_file_share_input OAIUpdateSMBFileShareInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSMBFileShare(const QString &x_amz_target, const OAIUpdateSMBFileShareInput &oai_update_smb_file_share_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_smb_file_share_visibility_input OAIUpdateSMBFileShareVisibilityInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSMBFileShareVisibility(const QString &x_amz_target, const OAIUpdateSMBFileShareVisibilityInput &oai_update_smb_file_share_visibility_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_smb_local_groups_input OAIUpdateSMBLocalGroupsInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSMBLocalGroups(const QString &x_amz_target, const OAIUpdateSMBLocalGroupsInput &oai_update_smb_local_groups_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_smb_security_strategy_input OAIUpdateSMBSecurityStrategyInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSMBSecurityStrategy(const QString &x_amz_target, const OAIUpdateSMBSecurityStrategyInput &oai_update_smb_security_strategy_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_snapshot_schedule_input OAIUpdateSnapshotScheduleInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateSnapshotSchedule(const QString &x_amz_target, const OAIUpdateSnapshotScheduleInput &oai_update_snapshot_schedule_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_target QString [required]
    * @param[in]  oai_update_vtl_device_type_input OAIUpdateVTLDeviceTypeInput [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateVTLDeviceType(const QString &x_amz_target, const OAIUpdateVTLDeviceTypeInput &oai_update_vtl_device_type_input, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void activateGatewayCallback(OAIHttpRequestWorker *worker);
    void addCacheCallback(OAIHttpRequestWorker *worker);
    void addTagsToResourceCallback(OAIHttpRequestWorker *worker);
    void addUploadBufferCallback(OAIHttpRequestWorker *worker);
    void addWorkingStorageCallback(OAIHttpRequestWorker *worker);
    void assignTapePoolCallback(OAIHttpRequestWorker *worker);
    void associateFileSystemCallback(OAIHttpRequestWorker *worker);
    void attachVolumeCallback(OAIHttpRequestWorker *worker);
    void cancelArchivalCallback(OAIHttpRequestWorker *worker);
    void cancelRetrievalCallback(OAIHttpRequestWorker *worker);
    void createCachediSCSIVolumeCallback(OAIHttpRequestWorker *worker);
    void createNFSFileShareCallback(OAIHttpRequestWorker *worker);
    void createSMBFileShareCallback(OAIHttpRequestWorker *worker);
    void createSnapshotCallback(OAIHttpRequestWorker *worker);
    void createSnapshotFromVolumeRecoveryPointCallback(OAIHttpRequestWorker *worker);
    void createStorediSCSIVolumeCallback(OAIHttpRequestWorker *worker);
    void createTapePoolCallback(OAIHttpRequestWorker *worker);
    void createTapeWithBarcodeCallback(OAIHttpRequestWorker *worker);
    void createTapesCallback(OAIHttpRequestWorker *worker);
    void deleteAutomaticTapeCreationPolicyCallback(OAIHttpRequestWorker *worker);
    void deleteBandwidthRateLimitCallback(OAIHttpRequestWorker *worker);
    void deleteChapCredentialsCallback(OAIHttpRequestWorker *worker);
    void deleteFileShareCallback(OAIHttpRequestWorker *worker);
    void deleteGatewayCallback(OAIHttpRequestWorker *worker);
    void deleteSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void deleteTapeCallback(OAIHttpRequestWorker *worker);
    void deleteTapeArchiveCallback(OAIHttpRequestWorker *worker);
    void deleteTapePoolCallback(OAIHttpRequestWorker *worker);
    void deleteVolumeCallback(OAIHttpRequestWorker *worker);
    void describeAvailabilityMonitorTestCallback(OAIHttpRequestWorker *worker);
    void describeBandwidthRateLimitCallback(OAIHttpRequestWorker *worker);
    void describeBandwidthRateLimitScheduleCallback(OAIHttpRequestWorker *worker);
    void describeCacheCallback(OAIHttpRequestWorker *worker);
    void describeCachediSCSIVolumesCallback(OAIHttpRequestWorker *worker);
    void describeChapCredentialsCallback(OAIHttpRequestWorker *worker);
    void describeFileSystemAssociationsCallback(OAIHttpRequestWorker *worker);
    void describeGatewayInformationCallback(OAIHttpRequestWorker *worker);
    void describeMaintenanceStartTimeCallback(OAIHttpRequestWorker *worker);
    void describeNFSFileSharesCallback(OAIHttpRequestWorker *worker);
    void describeSMBFileSharesCallback(OAIHttpRequestWorker *worker);
    void describeSMBSettingsCallback(OAIHttpRequestWorker *worker);
    void describeSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void describeStorediSCSIVolumesCallback(OAIHttpRequestWorker *worker);
    void describeTapeArchivesCallback(OAIHttpRequestWorker *worker);
    void describeTapeRecoveryPointsCallback(OAIHttpRequestWorker *worker);
    void describeTapesCallback(OAIHttpRequestWorker *worker);
    void describeUploadBufferCallback(OAIHttpRequestWorker *worker);
    void describeVTLDevicesCallback(OAIHttpRequestWorker *worker);
    void describeWorkingStorageCallback(OAIHttpRequestWorker *worker);
    void detachVolumeCallback(OAIHttpRequestWorker *worker);
    void disableGatewayCallback(OAIHttpRequestWorker *worker);
    void disassociateFileSystemCallback(OAIHttpRequestWorker *worker);
    void joinDomainCallback(OAIHttpRequestWorker *worker);
    void listAutomaticTapeCreationPoliciesCallback(OAIHttpRequestWorker *worker);
    void listFileSharesCallback(OAIHttpRequestWorker *worker);
    void listFileSystemAssociationsCallback(OAIHttpRequestWorker *worker);
    void listGatewaysCallback(OAIHttpRequestWorker *worker);
    void listLocalDisksCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void listTapePoolsCallback(OAIHttpRequestWorker *worker);
    void listTapesCallback(OAIHttpRequestWorker *worker);
    void listVolumeInitiatorsCallback(OAIHttpRequestWorker *worker);
    void listVolumeRecoveryPointsCallback(OAIHttpRequestWorker *worker);
    void listVolumesCallback(OAIHttpRequestWorker *worker);
    void notifyWhenUploadedCallback(OAIHttpRequestWorker *worker);
    void refreshCacheCallback(OAIHttpRequestWorker *worker);
    void removeTagsFromResourceCallback(OAIHttpRequestWorker *worker);
    void resetCacheCallback(OAIHttpRequestWorker *worker);
    void retrieveTapeArchiveCallback(OAIHttpRequestWorker *worker);
    void retrieveTapeRecoveryPointCallback(OAIHttpRequestWorker *worker);
    void setLocalConsolePasswordCallback(OAIHttpRequestWorker *worker);
    void setSMBGuestPasswordCallback(OAIHttpRequestWorker *worker);
    void shutdownGatewayCallback(OAIHttpRequestWorker *worker);
    void startAvailabilityMonitorTestCallback(OAIHttpRequestWorker *worker);
    void startGatewayCallback(OAIHttpRequestWorker *worker);
    void updateAutomaticTapeCreationPolicyCallback(OAIHttpRequestWorker *worker);
    void updateBandwidthRateLimitCallback(OAIHttpRequestWorker *worker);
    void updateBandwidthRateLimitScheduleCallback(OAIHttpRequestWorker *worker);
    void updateChapCredentialsCallback(OAIHttpRequestWorker *worker);
    void updateFileSystemAssociationCallback(OAIHttpRequestWorker *worker);
    void updateGatewayInformationCallback(OAIHttpRequestWorker *worker);
    void updateGatewaySoftwareNowCallback(OAIHttpRequestWorker *worker);
    void updateMaintenanceStartTimeCallback(OAIHttpRequestWorker *worker);
    void updateNFSFileShareCallback(OAIHttpRequestWorker *worker);
    void updateSMBFileShareCallback(OAIHttpRequestWorker *worker);
    void updateSMBFileShareVisibilityCallback(OAIHttpRequestWorker *worker);
    void updateSMBLocalGroupsCallback(OAIHttpRequestWorker *worker);
    void updateSMBSecurityStrategyCallback(OAIHttpRequestWorker *worker);
    void updateSnapshotScheduleCallback(OAIHttpRequestWorker *worker);
    void updateVTLDeviceTypeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void activateGatewaySignal(OAIActivateGatewayOutput summary);
    void addCacheSignal(OAIAddCacheOutput summary);
    void addTagsToResourceSignal(OAIAddTagsToResourceOutput summary);
    void addUploadBufferSignal(OAIAddUploadBufferOutput summary);
    void addWorkingStorageSignal(OAIAddWorkingStorageOutput summary);
    void assignTapePoolSignal(OAIAssignTapePoolOutput summary);
    void associateFileSystemSignal(OAIAssociateFileSystemOutput summary);
    void attachVolumeSignal(OAIAttachVolumeOutput summary);
    void cancelArchivalSignal(OAICancelArchivalOutput summary);
    void cancelRetrievalSignal(OAICancelRetrievalOutput summary);
    void createCachediSCSIVolumeSignal(OAICreateCachediSCSIVolumeOutput summary);
    void createNFSFileShareSignal(OAICreateNFSFileShareOutput summary);
    void createSMBFileShareSignal(OAICreateSMBFileShareOutput summary);
    void createSnapshotSignal(OAICreateSnapshotOutput summary);
    void createSnapshotFromVolumeRecoveryPointSignal(OAICreateSnapshotFromVolumeRecoveryPointOutput summary);
    void createStorediSCSIVolumeSignal(OAICreateStorediSCSIVolumeOutput summary);
    void createTapePoolSignal(OAICreateTapePoolOutput summary);
    void createTapeWithBarcodeSignal(OAICreateTapeWithBarcodeOutput summary);
    void createTapesSignal(OAICreateTapesOutput summary);
    void deleteAutomaticTapeCreationPolicySignal(OAIDeleteAutomaticTapeCreationPolicyOutput summary);
    void deleteBandwidthRateLimitSignal(OAIDeleteBandwidthRateLimitOutput summary);
    void deleteChapCredentialsSignal(OAIDeleteChapCredentialsOutput summary);
    void deleteFileShareSignal(OAIDeleteFileShareOutput summary);
    void deleteGatewaySignal(OAIDeleteGatewayOutput summary);
    void deleteSnapshotScheduleSignal(OAIDeleteSnapshotScheduleOutput summary);
    void deleteTapeSignal(OAIDeleteTapeOutput summary);
    void deleteTapeArchiveSignal(OAIDeleteTapeArchiveOutput summary);
    void deleteTapePoolSignal(OAIDeleteTapePoolOutput summary);
    void deleteVolumeSignal(OAIDeleteVolumeOutput summary);
    void describeAvailabilityMonitorTestSignal(OAIDescribeAvailabilityMonitorTestOutput summary);
    void describeBandwidthRateLimitSignal(OAIDescribeBandwidthRateLimitOutput summary);
    void describeBandwidthRateLimitScheduleSignal(OAIDescribeBandwidthRateLimitScheduleOutput summary);
    void describeCacheSignal(OAIDescribeCacheOutput summary);
    void describeCachediSCSIVolumesSignal(OAIDescribeCachediSCSIVolumesOutput summary);
    void describeChapCredentialsSignal(OAIDescribeChapCredentialsOutput summary);
    void describeFileSystemAssociationsSignal(OAIDescribeFileSystemAssociationsOutput summary);
    void describeGatewayInformationSignal(OAIDescribeGatewayInformationOutput summary);
    void describeMaintenanceStartTimeSignal(OAIDescribeMaintenanceStartTimeOutput summary);
    void describeNFSFileSharesSignal(OAIDescribeNFSFileSharesOutput summary);
    void describeSMBFileSharesSignal(OAIDescribeSMBFileSharesOutput summary);
    void describeSMBSettingsSignal(OAIDescribeSMBSettingsOutput summary);
    void describeSnapshotScheduleSignal(OAIDescribeSnapshotScheduleOutput summary);
    void describeStorediSCSIVolumesSignal(OAIDescribeStorediSCSIVolumesOutput summary);
    void describeTapeArchivesSignal(OAIDescribeTapeArchivesOutput summary);
    void describeTapeRecoveryPointsSignal(OAIDescribeTapeRecoveryPointsOutput summary);
    void describeTapesSignal(OAIDescribeTapesOutput summary);
    void describeUploadBufferSignal(OAIDescribeUploadBufferOutput summary);
    void describeVTLDevicesSignal(OAIDescribeVTLDevicesOutput summary);
    void describeWorkingStorageSignal(OAIDescribeWorkingStorageOutput summary);
    void detachVolumeSignal(OAIDetachVolumeOutput summary);
    void disableGatewaySignal(OAIDisableGatewayOutput summary);
    void disassociateFileSystemSignal(OAIDisassociateFileSystemOutput summary);
    void joinDomainSignal(OAIJoinDomainOutput summary);
    void listAutomaticTapeCreationPoliciesSignal(OAIListAutomaticTapeCreationPoliciesOutput summary);
    void listFileSharesSignal(OAIListFileSharesOutput summary);
    void listFileSystemAssociationsSignal(OAIListFileSystemAssociationsOutput summary);
    void listGatewaysSignal(OAIListGatewaysOutput summary);
    void listLocalDisksSignal(OAIListLocalDisksOutput summary);
    void listTagsForResourceSignal(OAIListTagsForResourceOutput summary);
    void listTapePoolsSignal(OAIListTapePoolsOutput summary);
    void listTapesSignal(OAIListTapesOutput summary);
    void listVolumeInitiatorsSignal(OAIListVolumeInitiatorsOutput summary);
    void listVolumeRecoveryPointsSignal(OAIListVolumeRecoveryPointsOutput summary);
    void listVolumesSignal(OAIListVolumesOutput summary);
    void notifyWhenUploadedSignal(OAINotifyWhenUploadedOutput summary);
    void refreshCacheSignal(OAIRefreshCacheOutput summary);
    void removeTagsFromResourceSignal(OAIRemoveTagsFromResourceOutput summary);
    void resetCacheSignal(OAIResetCacheOutput summary);
    void retrieveTapeArchiveSignal(OAIRetrieveTapeArchiveOutput summary);
    void retrieveTapeRecoveryPointSignal(OAIRetrieveTapeRecoveryPointOutput summary);
    void setLocalConsolePasswordSignal(OAISetLocalConsolePasswordOutput summary);
    void setSMBGuestPasswordSignal(OAISetSMBGuestPasswordOutput summary);
    void shutdownGatewaySignal(OAIShutdownGatewayOutput summary);
    void startAvailabilityMonitorTestSignal(OAIStartAvailabilityMonitorTestOutput summary);
    void startGatewaySignal(OAIStartGatewayOutput summary);
    void updateAutomaticTapeCreationPolicySignal(OAIUpdateAutomaticTapeCreationPolicyOutput summary);
    void updateBandwidthRateLimitSignal(OAIUpdateBandwidthRateLimitOutput summary);
    void updateBandwidthRateLimitScheduleSignal(OAIUpdateBandwidthRateLimitScheduleOutput summary);
    void updateChapCredentialsSignal(OAIUpdateChapCredentialsOutput summary);
    void updateFileSystemAssociationSignal(OAIUpdateFileSystemAssociationOutput summary);
    void updateGatewayInformationSignal(OAIUpdateGatewayInformationOutput summary);
    void updateGatewaySoftwareNowSignal(OAIUpdateGatewaySoftwareNowOutput summary);
    void updateMaintenanceStartTimeSignal(OAIUpdateMaintenanceStartTimeOutput summary);
    void updateNFSFileShareSignal(OAIUpdateNFSFileShareOutput summary);
    void updateSMBFileShareSignal(OAIUpdateSMBFileShareOutput summary);
    void updateSMBFileShareVisibilitySignal(OAIUpdateSMBFileShareVisibilityOutput summary);
    void updateSMBLocalGroupsSignal(OAIUpdateSMBLocalGroupsOutput summary);
    void updateSMBSecurityStrategySignal(OAIUpdateSMBSecurityStrategyOutput summary);
    void updateSnapshotScheduleSignal(OAIUpdateSnapshotScheduleOutput summary);
    void updateVTLDeviceTypeSignal(OAIUpdateVTLDeviceTypeOutput summary);


    void activateGatewaySignalFull(OAIHttpRequestWorker *worker, OAIActivateGatewayOutput summary);
    void addCacheSignalFull(OAIHttpRequestWorker *worker, OAIAddCacheOutput summary);
    void addTagsToResourceSignalFull(OAIHttpRequestWorker *worker, OAIAddTagsToResourceOutput summary);
    void addUploadBufferSignalFull(OAIHttpRequestWorker *worker, OAIAddUploadBufferOutput summary);
    void addWorkingStorageSignalFull(OAIHttpRequestWorker *worker, OAIAddWorkingStorageOutput summary);
    void assignTapePoolSignalFull(OAIHttpRequestWorker *worker, OAIAssignTapePoolOutput summary);
    void associateFileSystemSignalFull(OAIHttpRequestWorker *worker, OAIAssociateFileSystemOutput summary);
    void attachVolumeSignalFull(OAIHttpRequestWorker *worker, OAIAttachVolumeOutput summary);
    void cancelArchivalSignalFull(OAIHttpRequestWorker *worker, OAICancelArchivalOutput summary);
    void cancelRetrievalSignalFull(OAIHttpRequestWorker *worker, OAICancelRetrievalOutput summary);
    void createCachediSCSIVolumeSignalFull(OAIHttpRequestWorker *worker, OAICreateCachediSCSIVolumeOutput summary);
    void createNFSFileShareSignalFull(OAIHttpRequestWorker *worker, OAICreateNFSFileShareOutput summary);
    void createSMBFileShareSignalFull(OAIHttpRequestWorker *worker, OAICreateSMBFileShareOutput summary);
    void createSnapshotSignalFull(OAIHttpRequestWorker *worker, OAICreateSnapshotOutput summary);
    void createSnapshotFromVolumeRecoveryPointSignalFull(OAIHttpRequestWorker *worker, OAICreateSnapshotFromVolumeRecoveryPointOutput summary);
    void createStorediSCSIVolumeSignalFull(OAIHttpRequestWorker *worker, OAICreateStorediSCSIVolumeOutput summary);
    void createTapePoolSignalFull(OAIHttpRequestWorker *worker, OAICreateTapePoolOutput summary);
    void createTapeWithBarcodeSignalFull(OAIHttpRequestWorker *worker, OAICreateTapeWithBarcodeOutput summary);
    void createTapesSignalFull(OAIHttpRequestWorker *worker, OAICreateTapesOutput summary);
    void deleteAutomaticTapeCreationPolicySignalFull(OAIHttpRequestWorker *worker, OAIDeleteAutomaticTapeCreationPolicyOutput summary);
    void deleteBandwidthRateLimitSignalFull(OAIHttpRequestWorker *worker, OAIDeleteBandwidthRateLimitOutput summary);
    void deleteChapCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIDeleteChapCredentialsOutput summary);
    void deleteFileShareSignalFull(OAIHttpRequestWorker *worker, OAIDeleteFileShareOutput summary);
    void deleteGatewaySignalFull(OAIHttpRequestWorker *worker, OAIDeleteGatewayOutput summary);
    void deleteSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker, OAIDeleteSnapshotScheduleOutput summary);
    void deleteTapeSignalFull(OAIHttpRequestWorker *worker, OAIDeleteTapeOutput summary);
    void deleteTapeArchiveSignalFull(OAIHttpRequestWorker *worker, OAIDeleteTapeArchiveOutput summary);
    void deleteTapePoolSignalFull(OAIHttpRequestWorker *worker, OAIDeleteTapePoolOutput summary);
    void deleteVolumeSignalFull(OAIHttpRequestWorker *worker, OAIDeleteVolumeOutput summary);
    void describeAvailabilityMonitorTestSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAvailabilityMonitorTestOutput summary);
    void describeBandwidthRateLimitSignalFull(OAIHttpRequestWorker *worker, OAIDescribeBandwidthRateLimitOutput summary);
    void describeBandwidthRateLimitScheduleSignalFull(OAIHttpRequestWorker *worker, OAIDescribeBandwidthRateLimitScheduleOutput summary);
    void describeCacheSignalFull(OAIHttpRequestWorker *worker, OAIDescribeCacheOutput summary);
    void describeCachediSCSIVolumesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeCachediSCSIVolumesOutput summary);
    void describeChapCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChapCredentialsOutput summary);
    void describeFileSystemAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeFileSystemAssociationsOutput summary);
    void describeGatewayInformationSignalFull(OAIHttpRequestWorker *worker, OAIDescribeGatewayInformationOutput summary);
    void describeMaintenanceStartTimeSignalFull(OAIHttpRequestWorker *worker, OAIDescribeMaintenanceStartTimeOutput summary);
    void describeNFSFileSharesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeNFSFileSharesOutput summary);
    void describeSMBFileSharesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSMBFileSharesOutput summary);
    void describeSMBSettingsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSMBSettingsOutput summary);
    void describeSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker, OAIDescribeSnapshotScheduleOutput summary);
    void describeStorediSCSIVolumesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeStorediSCSIVolumesOutput summary);
    void describeTapeArchivesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTapeArchivesOutput summary);
    void describeTapeRecoveryPointsSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTapeRecoveryPointsOutput summary);
    void describeTapesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeTapesOutput summary);
    void describeUploadBufferSignalFull(OAIHttpRequestWorker *worker, OAIDescribeUploadBufferOutput summary);
    void describeVTLDevicesSignalFull(OAIHttpRequestWorker *worker, OAIDescribeVTLDevicesOutput summary);
    void describeWorkingStorageSignalFull(OAIHttpRequestWorker *worker, OAIDescribeWorkingStorageOutput summary);
    void detachVolumeSignalFull(OAIHttpRequestWorker *worker, OAIDetachVolumeOutput summary);
    void disableGatewaySignalFull(OAIHttpRequestWorker *worker, OAIDisableGatewayOutput summary);
    void disassociateFileSystemSignalFull(OAIHttpRequestWorker *worker, OAIDisassociateFileSystemOutput summary);
    void joinDomainSignalFull(OAIHttpRequestWorker *worker, OAIJoinDomainOutput summary);
    void listAutomaticTapeCreationPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIListAutomaticTapeCreationPoliciesOutput summary);
    void listFileSharesSignalFull(OAIHttpRequestWorker *worker, OAIListFileSharesOutput summary);
    void listFileSystemAssociationsSignalFull(OAIHttpRequestWorker *worker, OAIListFileSystemAssociationsOutput summary);
    void listGatewaysSignalFull(OAIHttpRequestWorker *worker, OAIListGatewaysOutput summary);
    void listLocalDisksSignalFull(OAIHttpRequestWorker *worker, OAIListLocalDisksOutput summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceOutput summary);
    void listTapePoolsSignalFull(OAIHttpRequestWorker *worker, OAIListTapePoolsOutput summary);
    void listTapesSignalFull(OAIHttpRequestWorker *worker, OAIListTapesOutput summary);
    void listVolumeInitiatorsSignalFull(OAIHttpRequestWorker *worker, OAIListVolumeInitiatorsOutput summary);
    void listVolumeRecoveryPointsSignalFull(OAIHttpRequestWorker *worker, OAIListVolumeRecoveryPointsOutput summary);
    void listVolumesSignalFull(OAIHttpRequestWorker *worker, OAIListVolumesOutput summary);
    void notifyWhenUploadedSignalFull(OAIHttpRequestWorker *worker, OAINotifyWhenUploadedOutput summary);
    void refreshCacheSignalFull(OAIHttpRequestWorker *worker, OAIRefreshCacheOutput summary);
    void removeTagsFromResourceSignalFull(OAIHttpRequestWorker *worker, OAIRemoveTagsFromResourceOutput summary);
    void resetCacheSignalFull(OAIHttpRequestWorker *worker, OAIResetCacheOutput summary);
    void retrieveTapeArchiveSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveTapeArchiveOutput summary);
    void retrieveTapeRecoveryPointSignalFull(OAIHttpRequestWorker *worker, OAIRetrieveTapeRecoveryPointOutput summary);
    void setLocalConsolePasswordSignalFull(OAIHttpRequestWorker *worker, OAISetLocalConsolePasswordOutput summary);
    void setSMBGuestPasswordSignalFull(OAIHttpRequestWorker *worker, OAISetSMBGuestPasswordOutput summary);
    void shutdownGatewaySignalFull(OAIHttpRequestWorker *worker, OAIShutdownGatewayOutput summary);
    void startAvailabilityMonitorTestSignalFull(OAIHttpRequestWorker *worker, OAIStartAvailabilityMonitorTestOutput summary);
    void startGatewaySignalFull(OAIHttpRequestWorker *worker, OAIStartGatewayOutput summary);
    void updateAutomaticTapeCreationPolicySignalFull(OAIHttpRequestWorker *worker, OAIUpdateAutomaticTapeCreationPolicyOutput summary);
    void updateBandwidthRateLimitSignalFull(OAIHttpRequestWorker *worker, OAIUpdateBandwidthRateLimitOutput summary);
    void updateBandwidthRateLimitScheduleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateBandwidthRateLimitScheduleOutput summary);
    void updateChapCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateChapCredentialsOutput summary);
    void updateFileSystemAssociationSignalFull(OAIHttpRequestWorker *worker, OAIUpdateFileSystemAssociationOutput summary);
    void updateGatewayInformationSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGatewayInformationOutput summary);
    void updateGatewaySoftwareNowSignalFull(OAIHttpRequestWorker *worker, OAIUpdateGatewaySoftwareNowOutput summary);
    void updateMaintenanceStartTimeSignalFull(OAIHttpRequestWorker *worker, OAIUpdateMaintenanceStartTimeOutput summary);
    void updateNFSFileShareSignalFull(OAIHttpRequestWorker *worker, OAIUpdateNFSFileShareOutput summary);
    void updateSMBFileShareSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSMBFileShareOutput summary);
    void updateSMBFileShareVisibilitySignalFull(OAIHttpRequestWorker *worker, OAIUpdateSMBFileShareVisibilityOutput summary);
    void updateSMBLocalGroupsSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSMBLocalGroupsOutput summary);
    void updateSMBSecurityStrategySignalFull(OAIHttpRequestWorker *worker, OAIUpdateSMBSecurityStrategyOutput summary);
    void updateSnapshotScheduleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSnapshotScheduleOutput summary);
    void updateVTLDeviceTypeSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVTLDeviceTypeOutput summary);

    Q_DECL_DEPRECATED_X("Use activateGatewaySignalError() instead")
    void activateGatewaySignalE(OAIActivateGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void activateGatewaySignalError(OAIActivateGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCacheSignalError() instead")
    void addCacheSignalE(OAIAddCacheOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addCacheSignalError(OAIAddCacheOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTagsToResourceSignalError() instead")
    void addTagsToResourceSignalE(OAIAddTagsToResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTagsToResourceSignalError(OAIAddTagsToResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUploadBufferSignalError() instead")
    void addUploadBufferSignalE(OAIAddUploadBufferOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addUploadBufferSignalError(OAIAddUploadBufferOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addWorkingStorageSignalError() instead")
    void addWorkingStorageSignalE(OAIAddWorkingStorageOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addWorkingStorageSignalError(OAIAddWorkingStorageOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignTapePoolSignalError() instead")
    void assignTapePoolSignalE(OAIAssignTapePoolOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignTapePoolSignalError(OAIAssignTapePoolOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateFileSystemSignalError() instead")
    void associateFileSystemSignalE(OAIAssociateFileSystemOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateFileSystemSignalError(OAIAssociateFileSystemOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachVolumeSignalError() instead")
    void attachVolumeSignalE(OAIAttachVolumeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachVolumeSignalError(OAIAttachVolumeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelArchivalSignalError() instead")
    void cancelArchivalSignalE(OAICancelArchivalOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelArchivalSignalError(OAICancelArchivalOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelRetrievalSignalError() instead")
    void cancelRetrievalSignalE(OAICancelRetrievalOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelRetrievalSignalError(OAICancelRetrievalOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCachediSCSIVolumeSignalError() instead")
    void createCachediSCSIVolumeSignalE(OAICreateCachediSCSIVolumeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCachediSCSIVolumeSignalError(OAICreateCachediSCSIVolumeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNFSFileShareSignalError() instead")
    void createNFSFileShareSignalE(OAICreateNFSFileShareOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createNFSFileShareSignalError(OAICreateNFSFileShareOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSMBFileShareSignalError() instead")
    void createSMBFileShareSignalE(OAICreateSMBFileShareOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSMBFileShareSignalError(OAICreateSMBFileShareOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnapshotSignalError() instead")
    void createSnapshotSignalE(OAICreateSnapshotOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnapshotSignalError(OAICreateSnapshotOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnapshotFromVolumeRecoveryPointSignalError() instead")
    void createSnapshotFromVolumeRecoveryPointSignalE(OAICreateSnapshotFromVolumeRecoveryPointOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnapshotFromVolumeRecoveryPointSignalError(OAICreateSnapshotFromVolumeRecoveryPointOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStorediSCSIVolumeSignalError() instead")
    void createStorediSCSIVolumeSignalE(OAICreateStorediSCSIVolumeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createStorediSCSIVolumeSignalError(OAICreateStorediSCSIVolumeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTapePoolSignalError() instead")
    void createTapePoolSignalE(OAICreateTapePoolOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTapePoolSignalError(OAICreateTapePoolOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTapeWithBarcodeSignalError() instead")
    void createTapeWithBarcodeSignalE(OAICreateTapeWithBarcodeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTapeWithBarcodeSignalError(OAICreateTapeWithBarcodeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTapesSignalError() instead")
    void createTapesSignalE(OAICreateTapesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTapesSignalError(OAICreateTapesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAutomaticTapeCreationPolicySignalError() instead")
    void deleteAutomaticTapeCreationPolicySignalE(OAIDeleteAutomaticTapeCreationPolicyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAutomaticTapeCreationPolicySignalError(OAIDeleteAutomaticTapeCreationPolicyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBandwidthRateLimitSignalError() instead")
    void deleteBandwidthRateLimitSignalE(OAIDeleteBandwidthRateLimitOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBandwidthRateLimitSignalError(OAIDeleteBandwidthRateLimitOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChapCredentialsSignalError() instead")
    void deleteChapCredentialsSignalE(OAIDeleteChapCredentialsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChapCredentialsSignalError(OAIDeleteChapCredentialsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFileShareSignalError() instead")
    void deleteFileShareSignalE(OAIDeleteFileShareOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileShareSignalError(OAIDeleteFileShareOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGatewaySignalError() instead")
    void deleteGatewaySignalE(OAIDeleteGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGatewaySignalError(OAIDeleteGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSnapshotScheduleSignalError() instead")
    void deleteSnapshotScheduleSignalE(OAIDeleteSnapshotScheduleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSnapshotScheduleSignalError(OAIDeleteSnapshotScheduleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTapeSignalError() instead")
    void deleteTapeSignalE(OAIDeleteTapeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTapeSignalError(OAIDeleteTapeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTapeArchiveSignalError() instead")
    void deleteTapeArchiveSignalE(OAIDeleteTapeArchiveOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTapeArchiveSignalError(OAIDeleteTapeArchiveOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTapePoolSignalError() instead")
    void deleteTapePoolSignalE(OAIDeleteTapePoolOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTapePoolSignalError(OAIDeleteTapePoolOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVolumeSignalError() instead")
    void deleteVolumeSignalE(OAIDeleteVolumeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVolumeSignalError(OAIDeleteVolumeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAvailabilityMonitorTestSignalError() instead")
    void describeAvailabilityMonitorTestSignalE(OAIDescribeAvailabilityMonitorTestOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAvailabilityMonitorTestSignalError(OAIDescribeAvailabilityMonitorTestOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeBandwidthRateLimitSignalError() instead")
    void describeBandwidthRateLimitSignalE(OAIDescribeBandwidthRateLimitOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeBandwidthRateLimitSignalError(OAIDescribeBandwidthRateLimitOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeBandwidthRateLimitScheduleSignalError() instead")
    void describeBandwidthRateLimitScheduleSignalE(OAIDescribeBandwidthRateLimitScheduleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeBandwidthRateLimitScheduleSignalError(OAIDescribeBandwidthRateLimitScheduleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCacheSignalError() instead")
    void describeCacheSignalE(OAIDescribeCacheOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCacheSignalError(OAIDescribeCacheOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCachediSCSIVolumesSignalError() instead")
    void describeCachediSCSIVolumesSignalE(OAIDescribeCachediSCSIVolumesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCachediSCSIVolumesSignalError(OAIDescribeCachediSCSIVolumesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChapCredentialsSignalError() instead")
    void describeChapCredentialsSignalE(OAIDescribeChapCredentialsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChapCredentialsSignalError(OAIDescribeChapCredentialsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeFileSystemAssociationsSignalError() instead")
    void describeFileSystemAssociationsSignalE(OAIDescribeFileSystemAssociationsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeFileSystemAssociationsSignalError(OAIDescribeFileSystemAssociationsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeGatewayInformationSignalError() instead")
    void describeGatewayInformationSignalE(OAIDescribeGatewayInformationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeGatewayInformationSignalError(OAIDescribeGatewayInformationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeMaintenanceStartTimeSignalError() instead")
    void describeMaintenanceStartTimeSignalE(OAIDescribeMaintenanceStartTimeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeMaintenanceStartTimeSignalError(OAIDescribeMaintenanceStartTimeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeNFSFileSharesSignalError() instead")
    void describeNFSFileSharesSignalE(OAIDescribeNFSFileSharesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeNFSFileSharesSignalError(OAIDescribeNFSFileSharesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSMBFileSharesSignalError() instead")
    void describeSMBFileSharesSignalE(OAIDescribeSMBFileSharesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSMBFileSharesSignalError(OAIDescribeSMBFileSharesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSMBSettingsSignalError() instead")
    void describeSMBSettingsSignalE(OAIDescribeSMBSettingsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSMBSettingsSignalError(OAIDescribeSMBSettingsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSnapshotScheduleSignalError() instead")
    void describeSnapshotScheduleSignalE(OAIDescribeSnapshotScheduleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSnapshotScheduleSignalError(OAIDescribeSnapshotScheduleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeStorediSCSIVolumesSignalError() instead")
    void describeStorediSCSIVolumesSignalE(OAIDescribeStorediSCSIVolumesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeStorediSCSIVolumesSignalError(OAIDescribeStorediSCSIVolumesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTapeArchivesSignalError() instead")
    void describeTapeArchivesSignalE(OAIDescribeTapeArchivesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTapeArchivesSignalError(OAIDescribeTapeArchivesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTapeRecoveryPointsSignalError() instead")
    void describeTapeRecoveryPointsSignalE(OAIDescribeTapeRecoveryPointsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTapeRecoveryPointsSignalError(OAIDescribeTapeRecoveryPointsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTapesSignalError() instead")
    void describeTapesSignalE(OAIDescribeTapesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTapesSignalError(OAIDescribeTapesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeUploadBufferSignalError() instead")
    void describeUploadBufferSignalE(OAIDescribeUploadBufferOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeUploadBufferSignalError(OAIDescribeUploadBufferOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVTLDevicesSignalError() instead")
    void describeVTLDevicesSignalE(OAIDescribeVTLDevicesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVTLDevicesSignalError(OAIDescribeVTLDevicesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeWorkingStorageSignalError() instead")
    void describeWorkingStorageSignalE(OAIDescribeWorkingStorageOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeWorkingStorageSignalError(OAIDescribeWorkingStorageOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detachVolumeSignalError() instead")
    void detachVolumeSignalE(OAIDetachVolumeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detachVolumeSignalError(OAIDetachVolumeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableGatewaySignalError() instead")
    void disableGatewaySignalE(OAIDisableGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disableGatewaySignalError(OAIDisableGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateFileSystemSignalError() instead")
    void disassociateFileSystemSignalE(OAIDisassociateFileSystemOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateFileSystemSignalError(OAIDisassociateFileSystemOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinDomainSignalError() instead")
    void joinDomainSignalE(OAIJoinDomainOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void joinDomainSignalError(OAIJoinDomainOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAutomaticTapeCreationPoliciesSignalError() instead")
    void listAutomaticTapeCreationPoliciesSignalE(OAIListAutomaticTapeCreationPoliciesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAutomaticTapeCreationPoliciesSignalError(OAIListAutomaticTapeCreationPoliciesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFileSharesSignalError() instead")
    void listFileSharesSignalE(OAIListFileSharesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFileSharesSignalError(OAIListFileSharesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFileSystemAssociationsSignalError() instead")
    void listFileSystemAssociationsSignalE(OAIListFileSystemAssociationsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listFileSystemAssociationsSignalError(OAIListFileSystemAssociationsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGatewaysSignalError() instead")
    void listGatewaysSignalE(OAIListGatewaysOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGatewaysSignalError(OAIListGatewaysOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLocalDisksSignalError() instead")
    void listLocalDisksSignalE(OAIListLocalDisksOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listLocalDisksSignalError(OAIListLocalDisksOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTapePoolsSignalError() instead")
    void listTapePoolsSignalE(OAIListTapePoolsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTapePoolsSignalError(OAIListTapePoolsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTapesSignalError() instead")
    void listTapesSignalE(OAIListTapesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTapesSignalError(OAIListTapesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVolumeInitiatorsSignalError() instead")
    void listVolumeInitiatorsSignalE(OAIListVolumeInitiatorsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVolumeInitiatorsSignalError(OAIListVolumeInitiatorsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVolumeRecoveryPointsSignalError() instead")
    void listVolumeRecoveryPointsSignalE(OAIListVolumeRecoveryPointsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVolumeRecoveryPointsSignalError(OAIListVolumeRecoveryPointsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVolumesSignalError() instead")
    void listVolumesSignalE(OAIListVolumesOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVolumesSignalError(OAIListVolumesOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyWhenUploadedSignalError() instead")
    void notifyWhenUploadedSignalE(OAINotifyWhenUploadedOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyWhenUploadedSignalError(OAINotifyWhenUploadedOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshCacheSignalError() instead")
    void refreshCacheSignalE(OAIRefreshCacheOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshCacheSignalError(OAIRefreshCacheOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTagsFromResourceSignalError() instead")
    void removeTagsFromResourceSignalE(OAIRemoveTagsFromResourceOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTagsFromResourceSignalError(OAIRemoveTagsFromResourceOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetCacheSignalError() instead")
    void resetCacheSignalE(OAIResetCacheOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetCacheSignalError(OAIResetCacheOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveTapeArchiveSignalError() instead")
    void retrieveTapeArchiveSignalE(OAIRetrieveTapeArchiveOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveTapeArchiveSignalError(OAIRetrieveTapeArchiveOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveTapeRecoveryPointSignalError() instead")
    void retrieveTapeRecoveryPointSignalE(OAIRetrieveTapeRecoveryPointOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveTapeRecoveryPointSignalError(OAIRetrieveTapeRecoveryPointOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLocalConsolePasswordSignalError() instead")
    void setLocalConsolePasswordSignalE(OAISetLocalConsolePasswordOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setLocalConsolePasswordSignalError(OAISetLocalConsolePasswordOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSMBGuestPasswordSignalError() instead")
    void setSMBGuestPasswordSignalE(OAISetSMBGuestPasswordOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setSMBGuestPasswordSignalError(OAISetSMBGuestPasswordOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shutdownGatewaySignalError() instead")
    void shutdownGatewaySignalE(OAIShutdownGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shutdownGatewaySignalError(OAIShutdownGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAvailabilityMonitorTestSignalError() instead")
    void startAvailabilityMonitorTestSignalE(OAIStartAvailabilityMonitorTestOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startAvailabilityMonitorTestSignalError(OAIStartAvailabilityMonitorTestOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startGatewaySignalError() instead")
    void startGatewaySignalE(OAIStartGatewayOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startGatewaySignalError(OAIStartGatewayOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAutomaticTapeCreationPolicySignalError() instead")
    void updateAutomaticTapeCreationPolicySignalE(OAIUpdateAutomaticTapeCreationPolicyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAutomaticTapeCreationPolicySignalError(OAIUpdateAutomaticTapeCreationPolicyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBandwidthRateLimitSignalError() instead")
    void updateBandwidthRateLimitSignalE(OAIUpdateBandwidthRateLimitOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBandwidthRateLimitSignalError(OAIUpdateBandwidthRateLimitOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBandwidthRateLimitScheduleSignalError() instead")
    void updateBandwidthRateLimitScheduleSignalE(OAIUpdateBandwidthRateLimitScheduleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBandwidthRateLimitScheduleSignalError(OAIUpdateBandwidthRateLimitScheduleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChapCredentialsSignalError() instead")
    void updateChapCredentialsSignalE(OAIUpdateChapCredentialsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChapCredentialsSignalError(OAIUpdateChapCredentialsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFileSystemAssociationSignalError() instead")
    void updateFileSystemAssociationSignalE(OAIUpdateFileSystemAssociationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFileSystemAssociationSignalError(OAIUpdateFileSystemAssociationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGatewayInformationSignalError() instead")
    void updateGatewayInformationSignalE(OAIUpdateGatewayInformationOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGatewayInformationSignalError(OAIUpdateGatewayInformationOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGatewaySoftwareNowSignalError() instead")
    void updateGatewaySoftwareNowSignalE(OAIUpdateGatewaySoftwareNowOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGatewaySoftwareNowSignalError(OAIUpdateGatewaySoftwareNowOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMaintenanceStartTimeSignalError() instead")
    void updateMaintenanceStartTimeSignalE(OAIUpdateMaintenanceStartTimeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMaintenanceStartTimeSignalError(OAIUpdateMaintenanceStartTimeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNFSFileShareSignalError() instead")
    void updateNFSFileShareSignalE(OAIUpdateNFSFileShareOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNFSFileShareSignalError(OAIUpdateNFSFileShareOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSMBFileShareSignalError() instead")
    void updateSMBFileShareSignalE(OAIUpdateSMBFileShareOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSMBFileShareSignalError(OAIUpdateSMBFileShareOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSMBFileShareVisibilitySignalError() instead")
    void updateSMBFileShareVisibilitySignalE(OAIUpdateSMBFileShareVisibilityOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSMBFileShareVisibilitySignalError(OAIUpdateSMBFileShareVisibilityOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSMBLocalGroupsSignalError() instead")
    void updateSMBLocalGroupsSignalE(OAIUpdateSMBLocalGroupsOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSMBLocalGroupsSignalError(OAIUpdateSMBLocalGroupsOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSMBSecurityStrategySignalError() instead")
    void updateSMBSecurityStrategySignalE(OAIUpdateSMBSecurityStrategyOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSMBSecurityStrategySignalError(OAIUpdateSMBSecurityStrategyOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSnapshotScheduleSignalError() instead")
    void updateSnapshotScheduleSignalE(OAIUpdateSnapshotScheduleOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSnapshotScheduleSignalError(OAIUpdateSnapshotScheduleOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVTLDeviceTypeSignalError() instead")
    void updateVTLDeviceTypeSignalE(OAIUpdateVTLDeviceTypeOutput summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVTLDeviceTypeSignalError(OAIUpdateVTLDeviceTypeOutput summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use activateGatewaySignalErrorFull() instead")
    void activateGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void activateGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addCacheSignalErrorFull() instead")
    void addCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTagsToResourceSignalErrorFull() instead")
    void addTagsToResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTagsToResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addUploadBufferSignalErrorFull() instead")
    void addUploadBufferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addUploadBufferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addWorkingStorageSignalErrorFull() instead")
    void addWorkingStorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWorkingStorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignTapePoolSignalErrorFull() instead")
    void assignTapePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignTapePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateFileSystemSignalErrorFull() instead")
    void associateFileSystemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateFileSystemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use attachVolumeSignalErrorFull() instead")
    void attachVolumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachVolumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelArchivalSignalErrorFull() instead")
    void cancelArchivalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelArchivalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelRetrievalSignalErrorFull() instead")
    void cancelRetrievalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelRetrievalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCachediSCSIVolumeSignalErrorFull() instead")
    void createCachediSCSIVolumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCachediSCSIVolumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createNFSFileShareSignalErrorFull() instead")
    void createNFSFileShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createNFSFileShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSMBFileShareSignalErrorFull() instead")
    void createSMBFileShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSMBFileShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnapshotSignalErrorFull() instead")
    void createSnapshotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnapshotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSnapshotFromVolumeRecoveryPointSignalErrorFull() instead")
    void createSnapshotFromVolumeRecoveryPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSnapshotFromVolumeRecoveryPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createStorediSCSIVolumeSignalErrorFull() instead")
    void createStorediSCSIVolumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createStorediSCSIVolumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTapePoolSignalErrorFull() instead")
    void createTapePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTapePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTapeWithBarcodeSignalErrorFull() instead")
    void createTapeWithBarcodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTapeWithBarcodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTapesSignalErrorFull() instead")
    void createTapesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTapesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAutomaticTapeCreationPolicySignalErrorFull() instead")
    void deleteAutomaticTapeCreationPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAutomaticTapeCreationPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteBandwidthRateLimitSignalErrorFull() instead")
    void deleteBandwidthRateLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteBandwidthRateLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChapCredentialsSignalErrorFull() instead")
    void deleteChapCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChapCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFileShareSignalErrorFull() instead")
    void deleteFileShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFileShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGatewaySignalErrorFull() instead")
    void deleteGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSnapshotScheduleSignalErrorFull() instead")
    void deleteSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTapeSignalErrorFull() instead")
    void deleteTapeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTapeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTapeArchiveSignalErrorFull() instead")
    void deleteTapeArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTapeArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTapePoolSignalErrorFull() instead")
    void deleteTapePoolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTapePoolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVolumeSignalErrorFull() instead")
    void deleteVolumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVolumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAvailabilityMonitorTestSignalErrorFull() instead")
    void describeAvailabilityMonitorTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAvailabilityMonitorTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeBandwidthRateLimitSignalErrorFull() instead")
    void describeBandwidthRateLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeBandwidthRateLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeBandwidthRateLimitScheduleSignalErrorFull() instead")
    void describeBandwidthRateLimitScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeBandwidthRateLimitScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCacheSignalErrorFull() instead")
    void describeCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeCachediSCSIVolumesSignalErrorFull() instead")
    void describeCachediSCSIVolumesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeCachediSCSIVolumesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChapCredentialsSignalErrorFull() instead")
    void describeChapCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChapCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeFileSystemAssociationsSignalErrorFull() instead")
    void describeFileSystemAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeFileSystemAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeGatewayInformationSignalErrorFull() instead")
    void describeGatewayInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeGatewayInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeMaintenanceStartTimeSignalErrorFull() instead")
    void describeMaintenanceStartTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeMaintenanceStartTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeNFSFileSharesSignalErrorFull() instead")
    void describeNFSFileSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeNFSFileSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSMBFileSharesSignalErrorFull() instead")
    void describeSMBFileSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSMBFileSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSMBSettingsSignalErrorFull() instead")
    void describeSMBSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSMBSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeSnapshotScheduleSignalErrorFull() instead")
    void describeSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeStorediSCSIVolumesSignalErrorFull() instead")
    void describeStorediSCSIVolumesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeStorediSCSIVolumesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTapeArchivesSignalErrorFull() instead")
    void describeTapeArchivesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTapeArchivesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTapeRecoveryPointsSignalErrorFull() instead")
    void describeTapeRecoveryPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTapeRecoveryPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeTapesSignalErrorFull() instead")
    void describeTapesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeTapesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeUploadBufferSignalErrorFull() instead")
    void describeUploadBufferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeUploadBufferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeVTLDevicesSignalErrorFull() instead")
    void describeVTLDevicesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeVTLDevicesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeWorkingStorageSignalErrorFull() instead")
    void describeWorkingStorageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeWorkingStorageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detachVolumeSignalErrorFull() instead")
    void detachVolumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detachVolumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableGatewaySignalErrorFull() instead")
    void disableGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateFileSystemSignalErrorFull() instead")
    void disassociateFileSystemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateFileSystemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinDomainSignalErrorFull() instead")
    void joinDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void joinDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAutomaticTapeCreationPoliciesSignalErrorFull() instead")
    void listAutomaticTapeCreationPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAutomaticTapeCreationPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFileSharesSignalErrorFull() instead")
    void listFileSharesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFileSharesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listFileSystemAssociationsSignalErrorFull() instead")
    void listFileSystemAssociationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listFileSystemAssociationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGatewaysSignalErrorFull() instead")
    void listGatewaysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGatewaysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLocalDisksSignalErrorFull() instead")
    void listLocalDisksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLocalDisksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTapePoolsSignalErrorFull() instead")
    void listTapePoolsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTapePoolsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTapesSignalErrorFull() instead")
    void listTapesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTapesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVolumeInitiatorsSignalErrorFull() instead")
    void listVolumeInitiatorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVolumeInitiatorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVolumeRecoveryPointsSignalErrorFull() instead")
    void listVolumeRecoveryPointsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVolumeRecoveryPointsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVolumesSignalErrorFull() instead")
    void listVolumesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVolumesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notifyWhenUploadedSignalErrorFull() instead")
    void notifyWhenUploadedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notifyWhenUploadedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use refreshCacheSignalErrorFull() instead")
    void refreshCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void refreshCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeTagsFromResourceSignalErrorFull() instead")
    void removeTagsFromResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeTagsFromResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetCacheSignalErrorFull() instead")
    void resetCacheSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetCacheSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveTapeArchiveSignalErrorFull() instead")
    void retrieveTapeArchiveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveTapeArchiveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveTapeRecoveryPointSignalErrorFull() instead")
    void retrieveTapeRecoveryPointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveTapeRecoveryPointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setLocalConsolePasswordSignalErrorFull() instead")
    void setLocalConsolePasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setLocalConsolePasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setSMBGuestPasswordSignalErrorFull() instead")
    void setSMBGuestPasswordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setSMBGuestPasswordSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shutdownGatewaySignalErrorFull() instead")
    void shutdownGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shutdownGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startAvailabilityMonitorTestSignalErrorFull() instead")
    void startAvailabilityMonitorTestSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startAvailabilityMonitorTestSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startGatewaySignalErrorFull() instead")
    void startGatewaySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startGatewaySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAutomaticTapeCreationPolicySignalErrorFull() instead")
    void updateAutomaticTapeCreationPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAutomaticTapeCreationPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBandwidthRateLimitSignalErrorFull() instead")
    void updateBandwidthRateLimitSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBandwidthRateLimitSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBandwidthRateLimitScheduleSignalErrorFull() instead")
    void updateBandwidthRateLimitScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBandwidthRateLimitScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChapCredentialsSignalErrorFull() instead")
    void updateChapCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChapCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateFileSystemAssociationSignalErrorFull() instead")
    void updateFileSystemAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateFileSystemAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGatewayInformationSignalErrorFull() instead")
    void updateGatewayInformationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGatewayInformationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGatewaySoftwareNowSignalErrorFull() instead")
    void updateGatewaySoftwareNowSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGatewaySoftwareNowSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateMaintenanceStartTimeSignalErrorFull() instead")
    void updateMaintenanceStartTimeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateMaintenanceStartTimeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateNFSFileShareSignalErrorFull() instead")
    void updateNFSFileShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateNFSFileShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSMBFileShareSignalErrorFull() instead")
    void updateSMBFileShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSMBFileShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSMBFileShareVisibilitySignalErrorFull() instead")
    void updateSMBFileShareVisibilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSMBFileShareVisibilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSMBLocalGroupsSignalErrorFull() instead")
    void updateSMBLocalGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSMBLocalGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSMBSecurityStrategySignalErrorFull() instead")
    void updateSMBSecurityStrategySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSMBSecurityStrategySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSnapshotScheduleSignalErrorFull() instead")
    void updateSnapshotScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSnapshotScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVTLDeviceTypeSignalErrorFull() instead")
    void updateVTLDeviceTypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVTLDeviceTypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
