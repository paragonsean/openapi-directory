/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SNSActionEncoding from './SNSActionEncoding';

/**
 * The SNSAction model module.
 * @module model/SNSAction
 * @version 2010-12-01
 */
class SNSAction {
    /**
     * Constructs a new <code>SNSAction</code>.
     * &lt;p&gt;When included in a receipt rule, this action publishes a notification to Amazon Simple Notification Service (Amazon SNS). This action includes a complete copy of the email content in the Amazon SNS notifications. Amazon SNS notifications for all other actions simply provide information about the email. They do not include the email content itself.&lt;/p&gt; &lt;p&gt;If you own the Amazon SNS topic, you don&#39;t need to do anything to give Amazon SES permission to publish emails to it. However, if you don&#39;t own the Amazon SNS topic, you need to attach a policy to the topic to give Amazon SES permissions to access it. For information about giving permissions, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;You can only publish emails that are 150 KB or less (including the header) to Amazon SNS. Larger emails will bounce. If you anticipate emails larger than 150 KB, use the S3 action instead.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For information about using a receipt rule to publish an Amazon SNS notification, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-sns.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @alias module:model/SNSAction
     * @param topicArn {String} 
     */
    constructor(topicArn) { 
        
        SNSAction.initialize(this, topicArn);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, topicArn) { 
        obj['TopicArn'] = topicArn;
    }

    /**
     * Constructs a <code>SNSAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SNSAction} obj Optional instance to populate.
     * @return {module:model/SNSAction} The populated <code>SNSAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SNSAction();

            if (data.hasOwnProperty('TopicArn')) {
                obj['TopicArn'] = ApiClient.convertToType(data['TopicArn'], 'String');
            }
            if (data.hasOwnProperty('Encoding')) {
                obj['Encoding'] = ApiClient.convertToType(data['Encoding'], SNSActionEncoding);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SNSAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SNSAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SNSAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `TopicArn`
        if (data['TopicArn']) { // data not null
          String.validateJSON(data['TopicArn']);
        }
        // validate the optional field `Encoding`
        if (data['Encoding']) { // data not null
          SNSActionEncoding.validateJSON(data['Encoding']);
        }

        return true;
    }


}

SNSAction.RequiredProperties = ["TopicArn"];

/**
 * @member {String} TopicArn
 */
SNSAction.prototype['TopicArn'] = undefined;

/**
 * @member {module:model/SNSActionEncoding} Encoding
 */
SNSAction.prototype['Encoding'] = undefined;






export default SNSAction;

