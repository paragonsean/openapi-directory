/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination from './GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination';
import GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination from './GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination';
import GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination from './GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination';

/**
 * The EventDestination model module.
 * @module model/EventDestination
 * @version 2010-12-01
 */
class EventDestination {
    /**
     * Constructs a new <code>EventDestination</code>.
     * &lt;p&gt;Contains information about the event destination that the specified email sending events will be published to.&lt;/p&gt; &lt;note&gt; &lt;p&gt;When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/monitor-sending-activity.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt;
     * @alias module:model/EventDestination
     * @param name {String} 
     * @param matchingEventTypes {Array} 
     */
    constructor(name, matchingEventTypes) { 
        
        EventDestination.initialize(this, name, matchingEventTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, matchingEventTypes) { 
        obj['Name'] = name;
        obj['MatchingEventTypes'] = matchingEventTypes;
    }

    /**
     * Constructs a <code>EventDestination</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventDestination} obj Optional instance to populate.
     * @return {module:model/EventDestination} The populated <code>EventDestination</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventDestination();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Enabled')) {
                obj['Enabled'] = ApiClient.convertToType(data['Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('MatchingEventTypes')) {
                obj['MatchingEventTypes'] = ApiClient.convertToType(data['MatchingEventTypes'], Array);
            }
            if (data.hasOwnProperty('KinesisFirehoseDestination')) {
                obj['KinesisFirehoseDestination'] = GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination.constructFromObject(data['KinesisFirehoseDestination']);
            }
            if (data.hasOwnProperty('CloudWatchDestination')) {
                obj['CloudWatchDestination'] = GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination.constructFromObject(data['CloudWatchDestination']);
            }
            if (data.hasOwnProperty('SNSDestination')) {
                obj['SNSDestination'] = GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination.constructFromObject(data['SNSDestination']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventDestination</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventDestination</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventDestination.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Name`
        if (data['Name']) { // data not null
          String.validateJSON(data['Name']);
        }
        // validate the optional field `Enabled`
        if (data['Enabled']) { // data not null
          Boolean.validateJSON(data['Enabled']);
        }
        // validate the optional field `MatchingEventTypes`
        if (data['MatchingEventTypes']) { // data not null
          Array.validateJSON(data['MatchingEventTypes']);
        }
        // validate the optional field `KinesisFirehoseDestination`
        if (data['KinesisFirehoseDestination']) { // data not null
          GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination.validateJSON(data['KinesisFirehoseDestination']);
        }
        // validate the optional field `CloudWatchDestination`
        if (data['CloudWatchDestination']) { // data not null
          GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination.validateJSON(data['CloudWatchDestination']);
        }
        // validate the optional field `SNSDestination`
        if (data['SNSDestination']) { // data not null
          GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination.validateJSON(data['SNSDestination']);
        }

        return true;
    }


}

EventDestination.RequiredProperties = ["Name", "MatchingEventTypes"];

/**
 * @member {String} Name
 */
EventDestination.prototype['Name'] = undefined;

/**
 * @member {Boolean} Enabled
 */
EventDestination.prototype['Enabled'] = undefined;

/**
 * @member {Array} MatchingEventTypes
 */
EventDestination.prototype['MatchingEventTypes'] = undefined;

/**
 * @member {module:model/GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination} KinesisFirehoseDestination
 */
EventDestination.prototype['KinesisFirehoseDestination'] = undefined;

/**
 * @member {module:model/GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination} CloudWatchDestination
 */
EventDestination.prototype['CloudWatchDestination'] = undefined;

/**
 * @member {module:model/GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination} SNSDestination
 */
EventDestination.prototype['SNSDestination'] = undefined;






export default EventDestination;

