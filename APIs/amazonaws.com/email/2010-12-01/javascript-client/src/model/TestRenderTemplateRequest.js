/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TestRenderTemplateRequest model module.
 * @module model/TestRenderTemplateRequest
 * @version 2010-12-01
 */
class TestRenderTemplateRequest {
    /**
     * Constructs a new <code>TestRenderTemplateRequest</code>.
     * @alias module:model/TestRenderTemplateRequest
     * @param templateName {String} 
     * @param templateData {String} 
     */
    constructor(templateName, templateData) { 
        
        TestRenderTemplateRequest.initialize(this, templateName, templateData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, templateName, templateData) { 
        obj['TemplateName'] = templateName;
        obj['TemplateData'] = templateData;
    }

    /**
     * Constructs a <code>TestRenderTemplateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestRenderTemplateRequest} obj Optional instance to populate.
     * @return {module:model/TestRenderTemplateRequest} The populated <code>TestRenderTemplateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestRenderTemplateRequest();

            if (data.hasOwnProperty('TemplateName')) {
                obj['TemplateName'] = ApiClient.convertToType(data['TemplateName'], 'String');
            }
            if (data.hasOwnProperty('TemplateData')) {
                obj['TemplateData'] = ApiClient.convertToType(data['TemplateData'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestRenderTemplateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestRenderTemplateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestRenderTemplateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `TemplateName`
        if (data['TemplateName']) { // data not null
          String.validateJSON(data['TemplateName']);
        }
        // validate the optional field `TemplateData`
        if (data['TemplateData']) { // data not null
          String.validateJSON(data['TemplateData']);
        }

        return true;
    }


}

TestRenderTemplateRequest.RequiredProperties = ["TemplateName", "TemplateData"];

/**
 * @member {String} TemplateName
 */
TestRenderTemplateRequest.prototype['TemplateName'] = undefined;

/**
 * @member {String} TemplateData
 */
TestRenderTemplateRequest.prototype['TemplateData'] = undefined;






export default TestRenderTemplateRequest;

