/*
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InvocationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;When included in a receipt rule, this action calls an AWS Lambda function and, optionally, publishes a notification to Amazon Simple Notification Service (Amazon SNS).&lt;/p&gt; &lt;p&gt;To enable Amazon SES to call your AWS Lambda function or to publish to an Amazon SNS topic of another account, Amazon SES must have permission to access those resources. For information about giving permissions, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about using AWS Lambda actions in receipt rules, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-lambda.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:43.263586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LambdaAction {
  public static final String SERIALIZED_NAME_TOPIC_ARN = "TopicArn";
  @SerializedName(SERIALIZED_NAME_TOPIC_ARN)
  private String topicArn;

  public static final String SERIALIZED_NAME_FUNCTION_ARN = "FunctionArn";
  @SerializedName(SERIALIZED_NAME_FUNCTION_ARN)
  private String functionArn;

  public static final String SERIALIZED_NAME_INVOCATION_TYPE = "InvocationType";
  @SerializedName(SERIALIZED_NAME_INVOCATION_TYPE)
  private InvocationType invocationType;

  public LambdaAction() {
  }

  public LambdaAction topicArn(String topicArn) {
    this.topicArn = topicArn;
    return this;
  }

  /**
   * Get topicArn
   * @return topicArn
   */
  @javax.annotation.Nullable
  public String getTopicArn() {
    return topicArn;
  }

  public void setTopicArn(String topicArn) {
    this.topicArn = topicArn;
  }


  public LambdaAction functionArn(String functionArn) {
    this.functionArn = functionArn;
    return this;
  }

  /**
   * Get functionArn
   * @return functionArn
   */
  @javax.annotation.Nonnull
  public String getFunctionArn() {
    return functionArn;
  }

  public void setFunctionArn(String functionArn) {
    this.functionArn = functionArn;
  }


  public LambdaAction invocationType(InvocationType invocationType) {
    this.invocationType = invocationType;
    return this;
  }

  /**
   * Get invocationType
   * @return invocationType
   */
  @javax.annotation.Nullable
  public InvocationType getInvocationType() {
    return invocationType;
  }

  public void setInvocationType(InvocationType invocationType) {
    this.invocationType = invocationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LambdaAction lambdaAction = (LambdaAction) o;
    return Objects.equals(this.topicArn, lambdaAction.topicArn) &&
        Objects.equals(this.functionArn, lambdaAction.functionArn) &&
        Objects.equals(this.invocationType, lambdaAction.invocationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topicArn, functionArn, invocationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LambdaAction {\n");
    sb.append("    topicArn: ").append(toIndentedString(topicArn)).append("\n");
    sb.append("    functionArn: ").append(toIndentedString(functionArn)).append("\n");
    sb.append("    invocationType: ").append(toIndentedString(invocationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TopicArn");
    openapiFields.add("FunctionArn");
    openapiFields.add("InvocationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("FunctionArn");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LambdaAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LambdaAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LambdaAction is not found in the empty JSON string", LambdaAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LambdaAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LambdaAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LambdaAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TopicArn`
      if (jsonObj.get("TopicArn") != null && !jsonObj.get("TopicArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TopicArn"));
      }
      // validate the required field `FunctionArn`
      String.validateJsonElement(jsonObj.get("FunctionArn"));
      // validate the optional field `InvocationType`
      if (jsonObj.get("InvocationType") != null && !jsonObj.get("InvocationType").isJsonNull()) {
        InvocationType.validateJsonElement(jsonObj.get("InvocationType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LambdaAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LambdaAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LambdaAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LambdaAction.class));

       return (TypeAdapter<T>) new TypeAdapter<LambdaAction>() {
           @Override
           public void write(JsonWriter out, LambdaAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LambdaAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LambdaAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LambdaAction
   * @throws IOException if the JSON string is invalid with respect to LambdaAction
   */
  public static LambdaAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LambdaAction.class);
  }

  /**
   * Convert an instance of LambdaAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

