/*
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents sending statistics data. Each &lt;code&gt;SendDataPoint&lt;/code&gt; contains statistics for a 15-minute period of sending activity. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:43.263586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendDataPoint {
  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_DELIVERY_ATTEMPTS = "DeliveryAttempts";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ATTEMPTS)
  private Integer deliveryAttempts;

  public static final String SERIALIZED_NAME_BOUNCES = "Bounces";
  @SerializedName(SERIALIZED_NAME_BOUNCES)
  private Integer bounces;

  public static final String SERIALIZED_NAME_COMPLAINTS = "Complaints";
  @SerializedName(SERIALIZED_NAME_COMPLAINTS)
  private Integer complaints;

  public static final String SERIALIZED_NAME_REJECTS = "Rejects";
  @SerializedName(SERIALIZED_NAME_REJECTS)
  private Integer rejects;

  public SendDataPoint() {
  }

  public SendDataPoint timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   * @return timestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public SendDataPoint deliveryAttempts(Integer deliveryAttempts) {
    this.deliveryAttempts = deliveryAttempts;
    return this;
  }

  /**
   * Get deliveryAttempts
   * @return deliveryAttempts
   */
  @javax.annotation.Nullable
  public Integer getDeliveryAttempts() {
    return deliveryAttempts;
  }

  public void setDeliveryAttempts(Integer deliveryAttempts) {
    this.deliveryAttempts = deliveryAttempts;
  }


  public SendDataPoint bounces(Integer bounces) {
    this.bounces = bounces;
    return this;
  }

  /**
   * Get bounces
   * @return bounces
   */
  @javax.annotation.Nullable
  public Integer getBounces() {
    return bounces;
  }

  public void setBounces(Integer bounces) {
    this.bounces = bounces;
  }


  public SendDataPoint complaints(Integer complaints) {
    this.complaints = complaints;
    return this;
  }

  /**
   * Get complaints
   * @return complaints
   */
  @javax.annotation.Nullable
  public Integer getComplaints() {
    return complaints;
  }

  public void setComplaints(Integer complaints) {
    this.complaints = complaints;
  }


  public SendDataPoint rejects(Integer rejects) {
    this.rejects = rejects;
    return this;
  }

  /**
   * Get rejects
   * @return rejects
   */
  @javax.annotation.Nullable
  public Integer getRejects() {
    return rejects;
  }

  public void setRejects(Integer rejects) {
    this.rejects = rejects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendDataPoint sendDataPoint = (SendDataPoint) o;
    return Objects.equals(this.timestamp, sendDataPoint.timestamp) &&
        Objects.equals(this.deliveryAttempts, sendDataPoint.deliveryAttempts) &&
        Objects.equals(this.bounces, sendDataPoint.bounces) &&
        Objects.equals(this.complaints, sendDataPoint.complaints) &&
        Objects.equals(this.rejects, sendDataPoint.rejects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, deliveryAttempts, bounces, complaints, rejects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendDataPoint {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    deliveryAttempts: ").append(toIndentedString(deliveryAttempts)).append("\n");
    sb.append("    bounces: ").append(toIndentedString(bounces)).append("\n");
    sb.append("    complaints: ").append(toIndentedString(complaints)).append("\n");
    sb.append("    rejects: ").append(toIndentedString(rejects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Timestamp");
    openapiFields.add("DeliveryAttempts");
    openapiFields.add("Bounces");
    openapiFields.add("Complaints");
    openapiFields.add("Rejects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendDataPoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendDataPoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendDataPoint is not found in the empty JSON string", SendDataPoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendDataPoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendDataPoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Timestamp`
      if (jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("Timestamp"));
      }
      // validate the optional field `DeliveryAttempts`
      if (jsonObj.get("DeliveryAttempts") != null && !jsonObj.get("DeliveryAttempts").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("DeliveryAttempts"));
      }
      // validate the optional field `Bounces`
      if (jsonObj.get("Bounces") != null && !jsonObj.get("Bounces").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Bounces"));
      }
      // validate the optional field `Complaints`
      if (jsonObj.get("Complaints") != null && !jsonObj.get("Complaints").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Complaints"));
      }
      // validate the optional field `Rejects`
      if (jsonObj.get("Rejects") != null && !jsonObj.get("Rejects").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("Rejects"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendDataPoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendDataPoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendDataPoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendDataPoint.class));

       return (TypeAdapter<T>) new TypeAdapter<SendDataPoint>() {
           @Override
           public void write(JsonWriter out, SendDataPoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendDataPoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendDataPoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendDataPoint
   * @throws IOException if the JSON string is invalid with respect to SendDataPoint
   */
  public static SendDataPoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendDataPoint.class);
  }

  /**
   * Convert an instance of SendDataPoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

