/*
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NotificationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a request to specify the Amazon SNS topic to which Amazon SES will publish bounce, complaint, or delivery notifications for emails sent with that identity as the Source. For information about Amazon SES notifications, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications-via-sns.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:43.263586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SetIdentityNotificationTopicRequest {
  public static final String SERIALIZED_NAME_IDENTITY = "Identity";
  @SerializedName(SERIALIZED_NAME_IDENTITY)
  private String identity;

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "NotificationType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  private NotificationType notificationType;

  public static final String SERIALIZED_NAME_SNS_TOPIC = "SnsTopic";
  @SerializedName(SERIALIZED_NAME_SNS_TOPIC)
  private String snsTopic;

  public SetIdentityNotificationTopicRequest() {
  }

  public SetIdentityNotificationTopicRequest identity(String identity) {
    this.identity = identity;
    return this;
  }

  /**
   * Get identity
   * @return identity
   */
  @javax.annotation.Nonnull
  public String getIdentity() {
    return identity;
  }

  public void setIdentity(String identity) {
    this.identity = identity;
  }


  public SetIdentityNotificationTopicRequest notificationType(NotificationType notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Get notificationType
   * @return notificationType
   */
  @javax.annotation.Nonnull
  public NotificationType getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(NotificationType notificationType) {
    this.notificationType = notificationType;
  }


  public SetIdentityNotificationTopicRequest snsTopic(String snsTopic) {
    this.snsTopic = snsTopic;
    return this;
  }

  /**
   * Get snsTopic
   * @return snsTopic
   */
  @javax.annotation.Nullable
  public String getSnsTopic() {
    return snsTopic;
  }

  public void setSnsTopic(String snsTopic) {
    this.snsTopic = snsTopic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SetIdentityNotificationTopicRequest setIdentityNotificationTopicRequest = (SetIdentityNotificationTopicRequest) o;
    return Objects.equals(this.identity, setIdentityNotificationTopicRequest.identity) &&
        Objects.equals(this.notificationType, setIdentityNotificationTopicRequest.notificationType) &&
        Objects.equals(this.snsTopic, setIdentityNotificationTopicRequest.snsTopic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identity, notificationType, snsTopic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SetIdentityNotificationTopicRequest {\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    snsTopic: ").append(toIndentedString(snsTopic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Identity");
    openapiFields.add("NotificationType");
    openapiFields.add("SnsTopic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Identity");
    openapiRequiredFields.add("NotificationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SetIdentityNotificationTopicRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SetIdentityNotificationTopicRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SetIdentityNotificationTopicRequest is not found in the empty JSON string", SetIdentityNotificationTopicRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SetIdentityNotificationTopicRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SetIdentityNotificationTopicRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SetIdentityNotificationTopicRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Identity`
      String.validateJsonElement(jsonObj.get("Identity"));
      // validate the required field `NotificationType`
      NotificationType.validateJsonElement(jsonObj.get("NotificationType"));
      // validate the optional field `SnsTopic`
      if (jsonObj.get("SnsTopic") != null && !jsonObj.get("SnsTopic").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SnsTopic"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SetIdentityNotificationTopicRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SetIdentityNotificationTopicRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SetIdentityNotificationTopicRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SetIdentityNotificationTopicRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SetIdentityNotificationTopicRequest>() {
           @Override
           public void write(JsonWriter out, SetIdentityNotificationTopicRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SetIdentityNotificationTopicRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SetIdentityNotificationTopicRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SetIdentityNotificationTopicRequest
   * @throws IOException if the JSON string is invalid with respect to SetIdentityNotificationTopicRequest
   */
  public static SetIdentityNotificationTopicRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SetIdentityNotificationTopicRequest.class);
  }

  /**
   * Convert an instance of SetIdentityNotificationTopicRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

