/*
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the notification attributes of an identity, including whether an identity has Amazon Simple Notification Service (Amazon SNS) topics set for bounce, complaint, and/or delivery notifications, and whether feedback forwarding is enabled for bounce and complaint notifications.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:43.263586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityNotificationAttributes {
  public static final String SERIALIZED_NAME_BOUNCE_TOPIC = "BounceTopic";
  @SerializedName(SERIALIZED_NAME_BOUNCE_TOPIC)
  private String bounceTopic;

  public static final String SERIALIZED_NAME_COMPLAINT_TOPIC = "ComplaintTopic";
  @SerializedName(SERIALIZED_NAME_COMPLAINT_TOPIC)
  private String complaintTopic;

  public static final String SERIALIZED_NAME_DELIVERY_TOPIC = "DeliveryTopic";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TOPIC)
  private String deliveryTopic;

  public static final String SERIALIZED_NAME_FORWARDING_ENABLED = "ForwardingEnabled";
  @SerializedName(SERIALIZED_NAME_FORWARDING_ENABLED)
  private Boolean forwardingEnabled;

  public static final String SERIALIZED_NAME_HEADERS_IN_BOUNCE_NOTIFICATIONS_ENABLED = "HeadersInBounceNotificationsEnabled";
  @SerializedName(SERIALIZED_NAME_HEADERS_IN_BOUNCE_NOTIFICATIONS_ENABLED)
  private Boolean headersInBounceNotificationsEnabled;

  public static final String SERIALIZED_NAME_HEADERS_IN_COMPLAINT_NOTIFICATIONS_ENABLED = "HeadersInComplaintNotificationsEnabled";
  @SerializedName(SERIALIZED_NAME_HEADERS_IN_COMPLAINT_NOTIFICATIONS_ENABLED)
  private Boolean headersInComplaintNotificationsEnabled;

  public static final String SERIALIZED_NAME_HEADERS_IN_DELIVERY_NOTIFICATIONS_ENABLED = "HeadersInDeliveryNotificationsEnabled";
  @SerializedName(SERIALIZED_NAME_HEADERS_IN_DELIVERY_NOTIFICATIONS_ENABLED)
  private Boolean headersInDeliveryNotificationsEnabled;

  public IdentityNotificationAttributes() {
  }

  public IdentityNotificationAttributes bounceTopic(String bounceTopic) {
    this.bounceTopic = bounceTopic;
    return this;
  }

  /**
   * Get bounceTopic
   * @return bounceTopic
   */
  @javax.annotation.Nonnull
  public String getBounceTopic() {
    return bounceTopic;
  }

  public void setBounceTopic(String bounceTopic) {
    this.bounceTopic = bounceTopic;
  }


  public IdentityNotificationAttributes complaintTopic(String complaintTopic) {
    this.complaintTopic = complaintTopic;
    return this;
  }

  /**
   * Get complaintTopic
   * @return complaintTopic
   */
  @javax.annotation.Nonnull
  public String getComplaintTopic() {
    return complaintTopic;
  }

  public void setComplaintTopic(String complaintTopic) {
    this.complaintTopic = complaintTopic;
  }


  public IdentityNotificationAttributes deliveryTopic(String deliveryTopic) {
    this.deliveryTopic = deliveryTopic;
    return this;
  }

  /**
   * Get deliveryTopic
   * @return deliveryTopic
   */
  @javax.annotation.Nonnull
  public String getDeliveryTopic() {
    return deliveryTopic;
  }

  public void setDeliveryTopic(String deliveryTopic) {
    this.deliveryTopic = deliveryTopic;
  }


  public IdentityNotificationAttributes forwardingEnabled(Boolean forwardingEnabled) {
    this.forwardingEnabled = forwardingEnabled;
    return this;
  }

  /**
   * Get forwardingEnabled
   * @return forwardingEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getForwardingEnabled() {
    return forwardingEnabled;
  }

  public void setForwardingEnabled(Boolean forwardingEnabled) {
    this.forwardingEnabled = forwardingEnabled;
  }


  public IdentityNotificationAttributes headersInBounceNotificationsEnabled(Boolean headersInBounceNotificationsEnabled) {
    this.headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabled;
    return this;
  }

  /**
   * Get headersInBounceNotificationsEnabled
   * @return headersInBounceNotificationsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHeadersInBounceNotificationsEnabled() {
    return headersInBounceNotificationsEnabled;
  }

  public void setHeadersInBounceNotificationsEnabled(Boolean headersInBounceNotificationsEnabled) {
    this.headersInBounceNotificationsEnabled = headersInBounceNotificationsEnabled;
  }


  public IdentityNotificationAttributes headersInComplaintNotificationsEnabled(Boolean headersInComplaintNotificationsEnabled) {
    this.headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabled;
    return this;
  }

  /**
   * Get headersInComplaintNotificationsEnabled
   * @return headersInComplaintNotificationsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHeadersInComplaintNotificationsEnabled() {
    return headersInComplaintNotificationsEnabled;
  }

  public void setHeadersInComplaintNotificationsEnabled(Boolean headersInComplaintNotificationsEnabled) {
    this.headersInComplaintNotificationsEnabled = headersInComplaintNotificationsEnabled;
  }


  public IdentityNotificationAttributes headersInDeliveryNotificationsEnabled(Boolean headersInDeliveryNotificationsEnabled) {
    this.headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabled;
    return this;
  }

  /**
   * Get headersInDeliveryNotificationsEnabled
   * @return headersInDeliveryNotificationsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHeadersInDeliveryNotificationsEnabled() {
    return headersInDeliveryNotificationsEnabled;
  }

  public void setHeadersInDeliveryNotificationsEnabled(Boolean headersInDeliveryNotificationsEnabled) {
    this.headersInDeliveryNotificationsEnabled = headersInDeliveryNotificationsEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityNotificationAttributes identityNotificationAttributes = (IdentityNotificationAttributes) o;
    return Objects.equals(this.bounceTopic, identityNotificationAttributes.bounceTopic) &&
        Objects.equals(this.complaintTopic, identityNotificationAttributes.complaintTopic) &&
        Objects.equals(this.deliveryTopic, identityNotificationAttributes.deliveryTopic) &&
        Objects.equals(this.forwardingEnabled, identityNotificationAttributes.forwardingEnabled) &&
        Objects.equals(this.headersInBounceNotificationsEnabled, identityNotificationAttributes.headersInBounceNotificationsEnabled) &&
        Objects.equals(this.headersInComplaintNotificationsEnabled, identityNotificationAttributes.headersInComplaintNotificationsEnabled) &&
        Objects.equals(this.headersInDeliveryNotificationsEnabled, identityNotificationAttributes.headersInDeliveryNotificationsEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bounceTopic, complaintTopic, deliveryTopic, forwardingEnabled, headersInBounceNotificationsEnabled, headersInComplaintNotificationsEnabled, headersInDeliveryNotificationsEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityNotificationAttributes {\n");
    sb.append("    bounceTopic: ").append(toIndentedString(bounceTopic)).append("\n");
    sb.append("    complaintTopic: ").append(toIndentedString(complaintTopic)).append("\n");
    sb.append("    deliveryTopic: ").append(toIndentedString(deliveryTopic)).append("\n");
    sb.append("    forwardingEnabled: ").append(toIndentedString(forwardingEnabled)).append("\n");
    sb.append("    headersInBounceNotificationsEnabled: ").append(toIndentedString(headersInBounceNotificationsEnabled)).append("\n");
    sb.append("    headersInComplaintNotificationsEnabled: ").append(toIndentedString(headersInComplaintNotificationsEnabled)).append("\n");
    sb.append("    headersInDeliveryNotificationsEnabled: ").append(toIndentedString(headersInDeliveryNotificationsEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BounceTopic");
    openapiFields.add("ComplaintTopic");
    openapiFields.add("DeliveryTopic");
    openapiFields.add("ForwardingEnabled");
    openapiFields.add("HeadersInBounceNotificationsEnabled");
    openapiFields.add("HeadersInComplaintNotificationsEnabled");
    openapiFields.add("HeadersInDeliveryNotificationsEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("BounceTopic");
    openapiRequiredFields.add("ComplaintTopic");
    openapiRequiredFields.add("DeliveryTopic");
    openapiRequiredFields.add("ForwardingEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityNotificationAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityNotificationAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityNotificationAttributes is not found in the empty JSON string", IdentityNotificationAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityNotificationAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityNotificationAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IdentityNotificationAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `BounceTopic`
      String.validateJsonElement(jsonObj.get("BounceTopic"));
      // validate the required field `ComplaintTopic`
      String.validateJsonElement(jsonObj.get("ComplaintTopic"));
      // validate the required field `DeliveryTopic`
      String.validateJsonElement(jsonObj.get("DeliveryTopic"));
      // validate the required field `ForwardingEnabled`
      Boolean.validateJsonElement(jsonObj.get("ForwardingEnabled"));
      // validate the optional field `HeadersInBounceNotificationsEnabled`
      if (jsonObj.get("HeadersInBounceNotificationsEnabled") != null && !jsonObj.get("HeadersInBounceNotificationsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HeadersInBounceNotificationsEnabled"));
      }
      // validate the optional field `HeadersInComplaintNotificationsEnabled`
      if (jsonObj.get("HeadersInComplaintNotificationsEnabled") != null && !jsonObj.get("HeadersInComplaintNotificationsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HeadersInComplaintNotificationsEnabled"));
      }
      // validate the optional field `HeadersInDeliveryNotificationsEnabled`
      if (jsonObj.get("HeadersInDeliveryNotificationsEnabled") != null && !jsonObj.get("HeadersInDeliveryNotificationsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("HeadersInDeliveryNotificationsEnabled"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityNotificationAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityNotificationAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityNotificationAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityNotificationAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityNotificationAttributes>() {
           @Override
           public void write(JsonWriter out, IdentityNotificationAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityNotificationAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityNotificationAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityNotificationAttributes
   * @throws IOException if the JSON string is invalid with respect to IdentityNotificationAttributes
   */
  public static IdentityNotificationAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityNotificationAttributes.class);
  }

  /**
   * Convert an instance of IdentityNotificationAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

