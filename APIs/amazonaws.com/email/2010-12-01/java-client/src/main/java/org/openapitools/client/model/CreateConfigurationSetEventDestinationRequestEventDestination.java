/*
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination;
import org.openapitools.client.model.GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination;
import org.openapitools.client.model.GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateConfigurationSetEventDestinationRequestEventDestination
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:43.263586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateConfigurationSetEventDestinationRequestEventDestination {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ENABLED = "Enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_MATCHING_EVENT_TYPES = "MatchingEventTypes";
  @SerializedName(SERIALIZED_NAME_MATCHING_EVENT_TYPES)
  private List matchingEventTypes;

  public static final String SERIALIZED_NAME_KINESIS_FIREHOSE_DESTINATION = "KinesisFirehoseDestination";
  @SerializedName(SERIALIZED_NAME_KINESIS_FIREHOSE_DESTINATION)
  private GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination kinesisFirehoseDestination;

  public static final String SERIALIZED_NAME_CLOUD_WATCH_DESTINATION = "CloudWatchDestination";
  @SerializedName(SERIALIZED_NAME_CLOUD_WATCH_DESTINATION)
  private GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination cloudWatchDestination;

  public static final String SERIALIZED_NAME_SN_S_DESTINATION = "SNSDestination";
  @SerializedName(SERIALIZED_NAME_SN_S_DESTINATION)
  private GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination snSDestination;

  public CreateConfigurationSetEventDestinationRequestEventDestination() {
  }

  public CreateConfigurationSetEventDestinationRequestEventDestination name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateConfigurationSetEventDestinationRequestEventDestination enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CreateConfigurationSetEventDestinationRequestEventDestination matchingEventTypes(List matchingEventTypes) {
    this.matchingEventTypes = matchingEventTypes;
    return this;
  }

  /**
   * Get matchingEventTypes
   * @return matchingEventTypes
   */
  @javax.annotation.Nonnull
  public List getMatchingEventTypes() {
    return matchingEventTypes;
  }

  public void setMatchingEventTypes(List matchingEventTypes) {
    this.matchingEventTypes = matchingEventTypes;
  }


  public CreateConfigurationSetEventDestinationRequestEventDestination kinesisFirehoseDestination(GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination kinesisFirehoseDestination) {
    this.kinesisFirehoseDestination = kinesisFirehoseDestination;
    return this;
  }

  /**
   * Get kinesisFirehoseDestination
   * @return kinesisFirehoseDestination
   */
  @javax.annotation.Nullable
  public GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination getKinesisFirehoseDestination() {
    return kinesisFirehoseDestination;
  }

  public void setKinesisFirehoseDestination(GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination kinesisFirehoseDestination) {
    this.kinesisFirehoseDestination = kinesisFirehoseDestination;
  }


  public CreateConfigurationSetEventDestinationRequestEventDestination cloudWatchDestination(GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination cloudWatchDestination) {
    this.cloudWatchDestination = cloudWatchDestination;
    return this;
  }

  /**
   * Get cloudWatchDestination
   * @return cloudWatchDestination
   */
  @javax.annotation.Nullable
  public GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination getCloudWatchDestination() {
    return cloudWatchDestination;
  }

  public void setCloudWatchDestination(GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination cloudWatchDestination) {
    this.cloudWatchDestination = cloudWatchDestination;
  }


  public CreateConfigurationSetEventDestinationRequestEventDestination snSDestination(GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination snSDestination) {
    this.snSDestination = snSDestination;
    return this;
  }

  /**
   * Get snSDestination
   * @return snSDestination
   */
  @javax.annotation.Nullable
  public GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination getSnSDestination() {
    return snSDestination;
  }

  public void setSnSDestination(GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination snSDestination) {
    this.snSDestination = snSDestination;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConfigurationSetEventDestinationRequestEventDestination createConfigurationSetEventDestinationRequestEventDestination = (CreateConfigurationSetEventDestinationRequestEventDestination) o;
    return Objects.equals(this.name, createConfigurationSetEventDestinationRequestEventDestination.name) &&
        Objects.equals(this.enabled, createConfigurationSetEventDestinationRequestEventDestination.enabled) &&
        Objects.equals(this.matchingEventTypes, createConfigurationSetEventDestinationRequestEventDestination.matchingEventTypes) &&
        Objects.equals(this.kinesisFirehoseDestination, createConfigurationSetEventDestinationRequestEventDestination.kinesisFirehoseDestination) &&
        Objects.equals(this.cloudWatchDestination, createConfigurationSetEventDestinationRequestEventDestination.cloudWatchDestination) &&
        Objects.equals(this.snSDestination, createConfigurationSetEventDestinationRequestEventDestination.snSDestination);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, enabled, matchingEventTypes, kinesisFirehoseDestination, cloudWatchDestination, snSDestination);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConfigurationSetEventDestinationRequestEventDestination {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    matchingEventTypes: ").append(toIndentedString(matchingEventTypes)).append("\n");
    sb.append("    kinesisFirehoseDestination: ").append(toIndentedString(kinesisFirehoseDestination)).append("\n");
    sb.append("    cloudWatchDestination: ").append(toIndentedString(cloudWatchDestination)).append("\n");
    sb.append("    snSDestination: ").append(toIndentedString(snSDestination)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("Enabled");
    openapiFields.add("MatchingEventTypes");
    openapiFields.add("KinesisFirehoseDestination");
    openapiFields.add("CloudWatchDestination");
    openapiFields.add("SNSDestination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("MatchingEventTypes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConfigurationSetEventDestinationRequestEventDestination
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateConfigurationSetEventDestinationRequestEventDestination.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConfigurationSetEventDestinationRequestEventDestination is not found in the empty JSON string", CreateConfigurationSetEventDestinationRequestEventDestination.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConfigurationSetEventDestinationRequestEventDestination.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConfigurationSetEventDestinationRequestEventDestination` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConfigurationSetEventDestinationRequestEventDestination.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
      // validate the optional field `Enabled`
      if (jsonObj.get("Enabled") != null && !jsonObj.get("Enabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("Enabled"));
      }
      // validate the required field `MatchingEventTypes`
      List.validateJsonElement(jsonObj.get("MatchingEventTypes"));
      // validate the optional field `KinesisFirehoseDestination`
      if (jsonObj.get("KinesisFirehoseDestination") != null && !jsonObj.get("KinesisFirehoseDestination").isJsonNull()) {
        GETCreateConfigurationSetEventDestinationEventDestinationParameterKinesisFirehoseDestination.validateJsonElement(jsonObj.get("KinesisFirehoseDestination"));
      }
      // validate the optional field `CloudWatchDestination`
      if (jsonObj.get("CloudWatchDestination") != null && !jsonObj.get("CloudWatchDestination").isJsonNull()) {
        GETCreateConfigurationSetEventDestinationEventDestinationParameterCloudWatchDestination.validateJsonElement(jsonObj.get("CloudWatchDestination"));
      }
      // validate the optional field `SNSDestination`
      if (jsonObj.get("SNSDestination") != null && !jsonObj.get("SNSDestination").isJsonNull()) {
        GETCreateConfigurationSetEventDestinationEventDestinationParameterSNSDestination.validateJsonElement(jsonObj.get("SNSDestination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConfigurationSetEventDestinationRequestEventDestination.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConfigurationSetEventDestinationRequestEventDestination' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConfigurationSetEventDestinationRequestEventDestination> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConfigurationSetEventDestinationRequestEventDestination.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConfigurationSetEventDestinationRequestEventDestination>() {
           @Override
           public void write(JsonWriter out, CreateConfigurationSetEventDestinationRequestEventDestination value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConfigurationSetEventDestinationRequestEventDestination read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConfigurationSetEventDestinationRequestEventDestination given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConfigurationSetEventDestinationRequestEventDestination
   * @throws IOException if the JSON string is invalid with respect to CreateConfigurationSetEventDestinationRequestEventDestination
   */
  public static CreateConfigurationSetEventDestinationRequestEventDestination fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConfigurationSetEventDestinationRequestEventDestination.class);
  }

  /**
   * Convert an instance of CreateConfigurationSetEventDestinationRequestEventDestination to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

