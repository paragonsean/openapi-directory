/*
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ReceiptActionAddHeaderAction;
import org.openapitools.client.model.ReceiptActionBounceAction;
import org.openapitools.client.model.ReceiptActionLambdaAction;
import org.openapitools.client.model.ReceiptActionS3Action;
import org.openapitools.client.model.ReceiptActionSNSAction;
import org.openapitools.client.model.ReceiptActionStopAction;
import org.openapitools.client.model.ReceiptActionWorkmailAction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;An action that Amazon SES can take when it receives an email on behalf of one or more email addresses or domains that you own. An instance of this data type can represent only one action.&lt;/p&gt; &lt;p&gt;For information about setting up receipt rules, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-receipt-rules.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:43.263586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReceiptAction {
  public static final String SERIALIZED_NAME_S3_ACTION = "S3Action";
  @SerializedName(SERIALIZED_NAME_S3_ACTION)
  private ReceiptActionS3Action s3Action;

  public static final String SERIALIZED_NAME_BOUNCE_ACTION = "BounceAction";
  @SerializedName(SERIALIZED_NAME_BOUNCE_ACTION)
  private ReceiptActionBounceAction bounceAction;

  public static final String SERIALIZED_NAME_WORKMAIL_ACTION = "WorkmailAction";
  @SerializedName(SERIALIZED_NAME_WORKMAIL_ACTION)
  private ReceiptActionWorkmailAction workmailAction;

  public static final String SERIALIZED_NAME_LAMBDA_ACTION = "LambdaAction";
  @SerializedName(SERIALIZED_NAME_LAMBDA_ACTION)
  private ReceiptActionLambdaAction lambdaAction;

  public static final String SERIALIZED_NAME_STOP_ACTION = "StopAction";
  @SerializedName(SERIALIZED_NAME_STOP_ACTION)
  private ReceiptActionStopAction stopAction;

  public static final String SERIALIZED_NAME_ADD_HEADER_ACTION = "AddHeaderAction";
  @SerializedName(SERIALIZED_NAME_ADD_HEADER_ACTION)
  private ReceiptActionAddHeaderAction addHeaderAction;

  public static final String SERIALIZED_NAME_SN_S_ACTION = "SNSAction";
  @SerializedName(SERIALIZED_NAME_SN_S_ACTION)
  private ReceiptActionSNSAction snSAction;

  public ReceiptAction() {
  }

  public ReceiptAction s3Action(ReceiptActionS3Action s3Action) {
    this.s3Action = s3Action;
    return this;
  }

  /**
   * Get s3Action
   * @return s3Action
   */
  @javax.annotation.Nullable
  public ReceiptActionS3Action getS3Action() {
    return s3Action;
  }

  public void setS3Action(ReceiptActionS3Action s3Action) {
    this.s3Action = s3Action;
  }


  public ReceiptAction bounceAction(ReceiptActionBounceAction bounceAction) {
    this.bounceAction = bounceAction;
    return this;
  }

  /**
   * Get bounceAction
   * @return bounceAction
   */
  @javax.annotation.Nullable
  public ReceiptActionBounceAction getBounceAction() {
    return bounceAction;
  }

  public void setBounceAction(ReceiptActionBounceAction bounceAction) {
    this.bounceAction = bounceAction;
  }


  public ReceiptAction workmailAction(ReceiptActionWorkmailAction workmailAction) {
    this.workmailAction = workmailAction;
    return this;
  }

  /**
   * Get workmailAction
   * @return workmailAction
   */
  @javax.annotation.Nullable
  public ReceiptActionWorkmailAction getWorkmailAction() {
    return workmailAction;
  }

  public void setWorkmailAction(ReceiptActionWorkmailAction workmailAction) {
    this.workmailAction = workmailAction;
  }


  public ReceiptAction lambdaAction(ReceiptActionLambdaAction lambdaAction) {
    this.lambdaAction = lambdaAction;
    return this;
  }

  /**
   * Get lambdaAction
   * @return lambdaAction
   */
  @javax.annotation.Nullable
  public ReceiptActionLambdaAction getLambdaAction() {
    return lambdaAction;
  }

  public void setLambdaAction(ReceiptActionLambdaAction lambdaAction) {
    this.lambdaAction = lambdaAction;
  }


  public ReceiptAction stopAction(ReceiptActionStopAction stopAction) {
    this.stopAction = stopAction;
    return this;
  }

  /**
   * Get stopAction
   * @return stopAction
   */
  @javax.annotation.Nullable
  public ReceiptActionStopAction getStopAction() {
    return stopAction;
  }

  public void setStopAction(ReceiptActionStopAction stopAction) {
    this.stopAction = stopAction;
  }


  public ReceiptAction addHeaderAction(ReceiptActionAddHeaderAction addHeaderAction) {
    this.addHeaderAction = addHeaderAction;
    return this;
  }

  /**
   * Get addHeaderAction
   * @return addHeaderAction
   */
  @javax.annotation.Nullable
  public ReceiptActionAddHeaderAction getAddHeaderAction() {
    return addHeaderAction;
  }

  public void setAddHeaderAction(ReceiptActionAddHeaderAction addHeaderAction) {
    this.addHeaderAction = addHeaderAction;
  }


  public ReceiptAction snSAction(ReceiptActionSNSAction snSAction) {
    this.snSAction = snSAction;
    return this;
  }

  /**
   * Get snSAction
   * @return snSAction
   */
  @javax.annotation.Nullable
  public ReceiptActionSNSAction getSnSAction() {
    return snSAction;
  }

  public void setSnSAction(ReceiptActionSNSAction snSAction) {
    this.snSAction = snSAction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReceiptAction receiptAction = (ReceiptAction) o;
    return Objects.equals(this.s3Action, receiptAction.s3Action) &&
        Objects.equals(this.bounceAction, receiptAction.bounceAction) &&
        Objects.equals(this.workmailAction, receiptAction.workmailAction) &&
        Objects.equals(this.lambdaAction, receiptAction.lambdaAction) &&
        Objects.equals(this.stopAction, receiptAction.stopAction) &&
        Objects.equals(this.addHeaderAction, receiptAction.addHeaderAction) &&
        Objects.equals(this.snSAction, receiptAction.snSAction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Action, bounceAction, workmailAction, lambdaAction, stopAction, addHeaderAction, snSAction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReceiptAction {\n");
    sb.append("    s3Action: ").append(toIndentedString(s3Action)).append("\n");
    sb.append("    bounceAction: ").append(toIndentedString(bounceAction)).append("\n");
    sb.append("    workmailAction: ").append(toIndentedString(workmailAction)).append("\n");
    sb.append("    lambdaAction: ").append(toIndentedString(lambdaAction)).append("\n");
    sb.append("    stopAction: ").append(toIndentedString(stopAction)).append("\n");
    sb.append("    addHeaderAction: ").append(toIndentedString(addHeaderAction)).append("\n");
    sb.append("    snSAction: ").append(toIndentedString(snSAction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3Action");
    openapiFields.add("BounceAction");
    openapiFields.add("WorkmailAction");
    openapiFields.add("LambdaAction");
    openapiFields.add("StopAction");
    openapiFields.add("AddHeaderAction");
    openapiFields.add("SNSAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReceiptAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReceiptAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReceiptAction is not found in the empty JSON string", ReceiptAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReceiptAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReceiptAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3Action`
      if (jsonObj.get("S3Action") != null && !jsonObj.get("S3Action").isJsonNull()) {
        ReceiptActionS3Action.validateJsonElement(jsonObj.get("S3Action"));
      }
      // validate the optional field `BounceAction`
      if (jsonObj.get("BounceAction") != null && !jsonObj.get("BounceAction").isJsonNull()) {
        ReceiptActionBounceAction.validateJsonElement(jsonObj.get("BounceAction"));
      }
      // validate the optional field `WorkmailAction`
      if (jsonObj.get("WorkmailAction") != null && !jsonObj.get("WorkmailAction").isJsonNull()) {
        ReceiptActionWorkmailAction.validateJsonElement(jsonObj.get("WorkmailAction"));
      }
      // validate the optional field `LambdaAction`
      if (jsonObj.get("LambdaAction") != null && !jsonObj.get("LambdaAction").isJsonNull()) {
        ReceiptActionLambdaAction.validateJsonElement(jsonObj.get("LambdaAction"));
      }
      // validate the optional field `StopAction`
      if (jsonObj.get("StopAction") != null && !jsonObj.get("StopAction").isJsonNull()) {
        ReceiptActionStopAction.validateJsonElement(jsonObj.get("StopAction"));
      }
      // validate the optional field `AddHeaderAction`
      if (jsonObj.get("AddHeaderAction") != null && !jsonObj.get("AddHeaderAction").isJsonNull()) {
        ReceiptActionAddHeaderAction.validateJsonElement(jsonObj.get("AddHeaderAction"));
      }
      // validate the optional field `SNSAction`
      if (jsonObj.get("SNSAction") != null && !jsonObj.get("SNSAction").isJsonNull()) {
        ReceiptActionSNSAction.validateJsonElement(jsonObj.get("SNSAction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReceiptAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReceiptAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReceiptAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReceiptAction.class));

       return (TypeAdapter<T>) new TypeAdapter<ReceiptAction>() {
           @Override
           public void write(JsonWriter out, ReceiptAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReceiptAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReceiptAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReceiptAction
   * @throws IOException if the JSON string is invalid with respect to ReceiptAction
   */
  public static ReceiptAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReceiptAction.class);
  }

  /**
   * Convert an instance of ReceiptAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

