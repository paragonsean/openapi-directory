/*
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SendRawEmailRequestRawMessage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a request to send a single raw email using Amazon SES. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-raw.html\&quot;&gt;Amazon SES Developer Guide&lt;/a&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:43.263586-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SendRawEmailRequest {
  public static final String SERIALIZED_NAME_SOURCE = "Source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_DESTINATIONS = "Destinations";
  @SerializedName(SERIALIZED_NAME_DESTINATIONS)
  private List destinations;

  public static final String SERIALIZED_NAME_RAW_MESSAGE = "RawMessage";
  @SerializedName(SERIALIZED_NAME_RAW_MESSAGE)
  private SendRawEmailRequestRawMessage rawMessage;

  public static final String SERIALIZED_NAME_FROM_ARN = "FromArn";
  @SerializedName(SERIALIZED_NAME_FROM_ARN)
  private String fromArn;

  public static final String SERIALIZED_NAME_SOURCE_ARN = "SourceArn";
  @SerializedName(SERIALIZED_NAME_SOURCE_ARN)
  private String sourceArn;

  public static final String SERIALIZED_NAME_RETURN_PATH_ARN = "ReturnPathArn";
  @SerializedName(SERIALIZED_NAME_RETURN_PATH_ARN)
  private String returnPathArn;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List tags;

  public static final String SERIALIZED_NAME_CONFIGURATION_SET_NAME = "ConfigurationSetName";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_SET_NAME)
  private String configurationSetName;

  public SendRawEmailRequest() {
  }

  public SendRawEmailRequest source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public SendRawEmailRequest destinations(List destinations) {
    this.destinations = destinations;
    return this;
  }

  /**
   * Get destinations
   * @return destinations
   */
  @javax.annotation.Nullable
  public List getDestinations() {
    return destinations;
  }

  public void setDestinations(List destinations) {
    this.destinations = destinations;
  }


  public SendRawEmailRequest rawMessage(SendRawEmailRequestRawMessage rawMessage) {
    this.rawMessage = rawMessage;
    return this;
  }

  /**
   * Get rawMessage
   * @return rawMessage
   */
  @javax.annotation.Nonnull
  public SendRawEmailRequestRawMessage getRawMessage() {
    return rawMessage;
  }

  public void setRawMessage(SendRawEmailRequestRawMessage rawMessage) {
    this.rawMessage = rawMessage;
  }


  public SendRawEmailRequest fromArn(String fromArn) {
    this.fromArn = fromArn;
    return this;
  }

  /**
   * Get fromArn
   * @return fromArn
   */
  @javax.annotation.Nullable
  public String getFromArn() {
    return fromArn;
  }

  public void setFromArn(String fromArn) {
    this.fromArn = fromArn;
  }


  public SendRawEmailRequest sourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
    return this;
  }

  /**
   * Get sourceArn
   * @return sourceArn
   */
  @javax.annotation.Nullable
  public String getSourceArn() {
    return sourceArn;
  }

  public void setSourceArn(String sourceArn) {
    this.sourceArn = sourceArn;
  }


  public SendRawEmailRequest returnPathArn(String returnPathArn) {
    this.returnPathArn = returnPathArn;
    return this;
  }

  /**
   * Get returnPathArn
   * @return returnPathArn
   */
  @javax.annotation.Nullable
  public String getReturnPathArn() {
    return returnPathArn;
  }

  public void setReturnPathArn(String returnPathArn) {
    this.returnPathArn = returnPathArn;
  }


  public SendRawEmailRequest tags(List tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List getTags() {
    return tags;
  }

  public void setTags(List tags) {
    this.tags = tags;
  }


  public SendRawEmailRequest configurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
    return this;
  }

  /**
   * Get configurationSetName
   * @return configurationSetName
   */
  @javax.annotation.Nullable
  public String getConfigurationSetName() {
    return configurationSetName;
  }

  public void setConfigurationSetName(String configurationSetName) {
    this.configurationSetName = configurationSetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendRawEmailRequest sendRawEmailRequest = (SendRawEmailRequest) o;
    return Objects.equals(this.source, sendRawEmailRequest.source) &&
        Objects.equals(this.destinations, sendRawEmailRequest.destinations) &&
        Objects.equals(this.rawMessage, sendRawEmailRequest.rawMessage) &&
        Objects.equals(this.fromArn, sendRawEmailRequest.fromArn) &&
        Objects.equals(this.sourceArn, sendRawEmailRequest.sourceArn) &&
        Objects.equals(this.returnPathArn, sendRawEmailRequest.returnPathArn) &&
        Objects.equals(this.tags, sendRawEmailRequest.tags) &&
        Objects.equals(this.configurationSetName, sendRawEmailRequest.configurationSetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(source, destinations, rawMessage, fromArn, sourceArn, returnPathArn, tags, configurationSetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendRawEmailRequest {\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    destinations: ").append(toIndentedString(destinations)).append("\n");
    sb.append("    rawMessage: ").append(toIndentedString(rawMessage)).append("\n");
    sb.append("    fromArn: ").append(toIndentedString(fromArn)).append("\n");
    sb.append("    sourceArn: ").append(toIndentedString(sourceArn)).append("\n");
    sb.append("    returnPathArn: ").append(toIndentedString(returnPathArn)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    configurationSetName: ").append(toIndentedString(configurationSetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Source");
    openapiFields.add("Destinations");
    openapiFields.add("RawMessage");
    openapiFields.add("FromArn");
    openapiFields.add("SourceArn");
    openapiFields.add("ReturnPathArn");
    openapiFields.add("Tags");
    openapiFields.add("ConfigurationSetName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("RawMessage");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendRawEmailRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SendRawEmailRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendRawEmailRequest is not found in the empty JSON string", SendRawEmailRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendRawEmailRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendRawEmailRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendRawEmailRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Source`
      if (jsonObj.get("Source") != null && !jsonObj.get("Source").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Source"));
      }
      // validate the optional field `Destinations`
      if (jsonObj.get("Destinations") != null && !jsonObj.get("Destinations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Destinations"));
      }
      // validate the required field `RawMessage`
      SendRawEmailRequestRawMessage.validateJsonElement(jsonObj.get("RawMessage"));
      // validate the optional field `FromArn`
      if (jsonObj.get("FromArn") != null && !jsonObj.get("FromArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("FromArn"));
      }
      // validate the optional field `SourceArn`
      if (jsonObj.get("SourceArn") != null && !jsonObj.get("SourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("SourceArn"));
      }
      // validate the optional field `ReturnPathArn`
      if (jsonObj.get("ReturnPathArn") != null && !jsonObj.get("ReturnPathArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReturnPathArn"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `ConfigurationSetName`
      if (jsonObj.get("ConfigurationSetName") != null && !jsonObj.get("ConfigurationSetName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConfigurationSetName"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendRawEmailRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendRawEmailRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendRawEmailRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendRawEmailRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SendRawEmailRequest>() {
           @Override
           public void write(JsonWriter out, SendRawEmailRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendRawEmailRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendRawEmailRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendRawEmailRequest
   * @throws IOException if the JSON string is invalid with respect to SendRawEmailRequest
   */
  public static SendRawEmailRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendRawEmailRequest.class);
  }

  /**
   * Convert an instance of SendRawEmailRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

