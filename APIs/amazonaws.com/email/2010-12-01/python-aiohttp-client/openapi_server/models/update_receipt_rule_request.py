# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_receipt_rule_request_rule import UpdateReceiptRuleRequestRule
from openapi_server import util


class UpdateReceiptRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_set_name: str=None, rule: UpdateReceiptRuleRequestRule=None):
        """UpdateReceiptRuleRequest - a model defined in OpenAPI

        :param rule_set_name: The rule_set_name of this UpdateReceiptRuleRequest.
        :param rule: The rule of this UpdateReceiptRuleRequest.
        """
        self.openapi_types = {
            'rule_set_name': str,
            'rule': UpdateReceiptRuleRequestRule
        }

        self.attribute_map = {
            'rule_set_name': 'RuleSetName',
            'rule': 'Rule'
        }

        self._rule_set_name = rule_set_name
        self._rule = rule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateReceiptRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateReceiptRuleRequest of this UpdateReceiptRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_set_name(self):
        """Gets the rule_set_name of this UpdateReceiptRuleRequest.


        :return: The rule_set_name of this UpdateReceiptRuleRequest.
        :rtype: str
        """
        return self._rule_set_name

    @rule_set_name.setter
    def rule_set_name(self, rule_set_name):
        """Sets the rule_set_name of this UpdateReceiptRuleRequest.


        :param rule_set_name: The rule_set_name of this UpdateReceiptRuleRequest.
        :type rule_set_name: str
        """
        if rule_set_name is None:
            raise ValueError("Invalid value for `rule_set_name`, must not be `None`")

        self._rule_set_name = rule_set_name

    @property
    def rule(self):
        """Gets the rule of this UpdateReceiptRuleRequest.


        :return: The rule of this UpdateReceiptRuleRequest.
        :rtype: UpdateReceiptRuleRequestRule
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this UpdateReceiptRuleRequest.


        :param rule: The rule of this UpdateReceiptRuleRequest.
        :type rule: UpdateReceiptRuleRequestRule
        """
        if rule is None:
            raise ValueError("Invalid value for `rule`, must not be `None`")

        self._rule = rule
