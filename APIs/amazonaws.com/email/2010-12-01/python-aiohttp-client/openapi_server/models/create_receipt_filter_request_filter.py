# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_create_receipt_filter_filter_parameter_ip_filter import GETCreateReceiptFilterFilterParameterIpFilter
from openapi_server import util


class CreateReceiptFilterRequestFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, ip_filter: GETCreateReceiptFilterFilterParameterIpFilter=None):
        """CreateReceiptFilterRequestFilter - a model defined in OpenAPI

        :param name: The name of this CreateReceiptFilterRequestFilter.
        :param ip_filter: The ip_filter of this CreateReceiptFilterRequestFilter.
        """
        self.openapi_types = {
            'name': str,
            'ip_filter': GETCreateReceiptFilterFilterParameterIpFilter
        }

        self.attribute_map = {
            'name': 'Name',
            'ip_filter': 'IpFilter'
        }

        self._name = name
        self._ip_filter = ip_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateReceiptFilterRequestFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateReceiptFilterRequest_Filter of this CreateReceiptFilterRequestFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateReceiptFilterRequestFilter.


        :return: The name of this CreateReceiptFilterRequestFilter.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateReceiptFilterRequestFilter.


        :param name: The name of this CreateReceiptFilterRequestFilter.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def ip_filter(self):
        """Gets the ip_filter of this CreateReceiptFilterRequestFilter.


        :return: The ip_filter of this CreateReceiptFilterRequestFilter.
        :rtype: GETCreateReceiptFilterFilterParameterIpFilter
        """
        return self._ip_filter

    @ip_filter.setter
    def ip_filter(self, ip_filter):
        """Sets the ip_filter of this CreateReceiptFilterRequestFilter.


        :param ip_filter: The ip_filter of this CreateReceiptFilterRequestFilter.
        :type ip_filter: GETCreateReceiptFilterFilterParameterIpFilter
        """
        if ip_filter is None:
            raise ValueError("Invalid value for `ip_filter`, must not be `None`")

        self._ip_filter = ip_filter
