# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tls_policy import TlsPolicy
from openapi_server import util


class ReceiptRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, enabled: bool=None, tls_policy: TlsPolicy=None, recipients: List=None, actions: List=None, scan_enabled: bool=None):
        """ReceiptRule - a model defined in OpenAPI

        :param name: The name of this ReceiptRule.
        :param enabled: The enabled of this ReceiptRule.
        :param tls_policy: The tls_policy of this ReceiptRule.
        :param recipients: The recipients of this ReceiptRule.
        :param actions: The actions of this ReceiptRule.
        :param scan_enabled: The scan_enabled of this ReceiptRule.
        """
        self.openapi_types = {
            'name': str,
            'enabled': bool,
            'tls_policy': TlsPolicy,
            'recipients': List,
            'actions': List,
            'scan_enabled': bool
        }

        self.attribute_map = {
            'name': 'Name',
            'enabled': 'Enabled',
            'tls_policy': 'TlsPolicy',
            'recipients': 'Recipients',
            'actions': 'Actions',
            'scan_enabled': 'ScanEnabled'
        }

        self._name = name
        self._enabled = enabled
        self._tls_policy = tls_policy
        self._recipients = recipients
        self._actions = actions
        self._scan_enabled = scan_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReceiptRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReceiptRule of this ReceiptRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ReceiptRule.


        :return: The name of this ReceiptRule.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReceiptRule.


        :param name: The name of this ReceiptRule.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def enabled(self):
        """Gets the enabled of this ReceiptRule.


        :return: The enabled of this ReceiptRule.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ReceiptRule.


        :param enabled: The enabled of this ReceiptRule.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def tls_policy(self):
        """Gets the tls_policy of this ReceiptRule.


        :return: The tls_policy of this ReceiptRule.
        :rtype: TlsPolicy
        """
        return self._tls_policy

    @tls_policy.setter
    def tls_policy(self, tls_policy):
        """Sets the tls_policy of this ReceiptRule.


        :param tls_policy: The tls_policy of this ReceiptRule.
        :type tls_policy: TlsPolicy
        """

        self._tls_policy = tls_policy

    @property
    def recipients(self):
        """Gets the recipients of this ReceiptRule.


        :return: The recipients of this ReceiptRule.
        :rtype: List
        """
        return self._recipients

    @recipients.setter
    def recipients(self, recipients):
        """Sets the recipients of this ReceiptRule.


        :param recipients: The recipients of this ReceiptRule.
        :type recipients: List
        """

        self._recipients = recipients

    @property
    def actions(self):
        """Gets the actions of this ReceiptRule.


        :return: The actions of this ReceiptRule.
        :rtype: List
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this ReceiptRule.


        :param actions: The actions of this ReceiptRule.
        :type actions: List
        """

        self._actions = actions

    @property
    def scan_enabled(self):
        """Gets the scan_enabled of this ReceiptRule.


        :return: The scan_enabled of this ReceiptRule.
        :rtype: bool
        """
        return self._scan_enabled

    @scan_enabled.setter
    def scan_enabled(self, scan_enabled):
        """Sets the scan_enabled of this ReceiptRule.


        :param scan_enabled: The scan_enabled of this ReceiptRule.
        :type scan_enabled: bool
        """

        self._scan_enabled = scan_enabled
