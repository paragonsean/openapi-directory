# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Template(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, template_name: str=None, subject_part: str=None, text_part: str=None, html_part: str=None):
        """Template - a model defined in OpenAPI

        :param template_name: The template_name of this Template.
        :param subject_part: The subject_part of this Template.
        :param text_part: The text_part of this Template.
        :param html_part: The html_part of this Template.
        """
        self.openapi_types = {
            'template_name': str,
            'subject_part': str,
            'text_part': str,
            'html_part': str
        }

        self.attribute_map = {
            'template_name': 'TemplateName',
            'subject_part': 'SubjectPart',
            'text_part': 'TextPart',
            'html_part': 'HtmlPart'
        }

        self._template_name = template_name
        self._subject_part = subject_part
        self._text_part = text_part
        self._html_part = html_part

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Template':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Template of this Template.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def template_name(self):
        """Gets the template_name of this Template.


        :return: The template_name of this Template.
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this Template.


        :param template_name: The template_name of this Template.
        :type template_name: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")

        self._template_name = template_name

    @property
    def subject_part(self):
        """Gets the subject_part of this Template.


        :return: The subject_part of this Template.
        :rtype: str
        """
        return self._subject_part

    @subject_part.setter
    def subject_part(self, subject_part):
        """Sets the subject_part of this Template.


        :param subject_part: The subject_part of this Template.
        :type subject_part: str
        """

        self._subject_part = subject_part

    @property
    def text_part(self):
        """Gets the text_part of this Template.


        :return: The text_part of this Template.
        :rtype: str
        """
        return self._text_part

    @text_part.setter
    def text_part(self, text_part):
        """Sets the text_part of this Template.


        :param text_part: The text_part of this Template.
        :type text_part: str
        """

        self._text_part = text_part

    @property
    def html_part(self):
        """Gets the html_part of this Template.


        :return: The html_part of this Template.
        :rtype: str
        """
        return self._html_part

    @html_part.setter
    def html_part(self, html_part):
        """Sets the html_part of this Template.


        :param html_part: The html_part of this Template.
        :type html_part: str
        """

        self._html_part = html_part
