# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.verification_status import VerificationStatus
from openapi_server import util


class IdentityVerificationAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, verification_status: VerificationStatus=None, verification_token: str=None):
        """IdentityVerificationAttributes - a model defined in OpenAPI

        :param verification_status: The verification_status of this IdentityVerificationAttributes.
        :param verification_token: The verification_token of this IdentityVerificationAttributes.
        """
        self.openapi_types = {
            'verification_status': VerificationStatus,
            'verification_token': str
        }

        self.attribute_map = {
            'verification_status': 'VerificationStatus',
            'verification_token': 'VerificationToken'
        }

        self._verification_status = verification_status
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityVerificationAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityVerificationAttributes of this IdentityVerificationAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def verification_status(self):
        """Gets the verification_status of this IdentityVerificationAttributes.


        :return: The verification_status of this IdentityVerificationAttributes.
        :rtype: VerificationStatus
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this IdentityVerificationAttributes.


        :param verification_status: The verification_status of this IdentityVerificationAttributes.
        :type verification_status: VerificationStatus
        """
        if verification_status is None:
            raise ValueError("Invalid value for `verification_status`, must not be `None`")

        self._verification_status = verification_status

    @property
    def verification_token(self):
        """Gets the verification_token of this IdentityVerificationAttributes.


        :return: The verification_token of this IdentityVerificationAttributes.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this IdentityVerificationAttributes.


        :param verification_token: The verification_token of this IdentityVerificationAttributes.
        :type verification_token: str
        """

        self._verification_token = verification_token
