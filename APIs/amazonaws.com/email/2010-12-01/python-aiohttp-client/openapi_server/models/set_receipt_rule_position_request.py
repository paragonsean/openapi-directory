# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetReceiptRulePositionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_set_name: str=None, rule_name: str=None, after: str=None):
        """SetReceiptRulePositionRequest - a model defined in OpenAPI

        :param rule_set_name: The rule_set_name of this SetReceiptRulePositionRequest.
        :param rule_name: The rule_name of this SetReceiptRulePositionRequest.
        :param after: The after of this SetReceiptRulePositionRequest.
        """
        self.openapi_types = {
            'rule_set_name': str,
            'rule_name': str,
            'after': str
        }

        self.attribute_map = {
            'rule_set_name': 'RuleSetName',
            'rule_name': 'RuleName',
            'after': 'After'
        }

        self._rule_set_name = rule_set_name
        self._rule_name = rule_name
        self._after = after

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetReceiptRulePositionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetReceiptRulePositionRequest of this SetReceiptRulePositionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_set_name(self):
        """Gets the rule_set_name of this SetReceiptRulePositionRequest.


        :return: The rule_set_name of this SetReceiptRulePositionRequest.
        :rtype: str
        """
        return self._rule_set_name

    @rule_set_name.setter
    def rule_set_name(self, rule_set_name):
        """Sets the rule_set_name of this SetReceiptRulePositionRequest.


        :param rule_set_name: The rule_set_name of this SetReceiptRulePositionRequest.
        :type rule_set_name: str
        """
        if rule_set_name is None:
            raise ValueError("Invalid value for `rule_set_name`, must not be `None`")

        self._rule_set_name = rule_set_name

    @property
    def rule_name(self):
        """Gets the rule_name of this SetReceiptRulePositionRequest.


        :return: The rule_name of this SetReceiptRulePositionRequest.
        :rtype: str
        """
        return self._rule_name

    @rule_name.setter
    def rule_name(self, rule_name):
        """Sets the rule_name of this SetReceiptRulePositionRequest.


        :param rule_name: The rule_name of this SetReceiptRulePositionRequest.
        :type rule_name: str
        """
        if rule_name is None:
            raise ValueError("Invalid value for `rule_name`, must not be `None`")

        self._rule_name = rule_name

    @property
    def after(self):
        """Gets the after of this SetReceiptRulePositionRequest.


        :return: The after of this SetReceiptRulePositionRequest.
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this SetReceiptRulePositionRequest.


        :param after: The after of this SetReceiptRulePositionRequest.
        :type after: str
        """

        self._after = after
