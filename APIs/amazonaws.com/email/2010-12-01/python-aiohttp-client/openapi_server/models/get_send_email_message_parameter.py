# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.get_send_email_message_parameter_body import GETSendEmailMessageParameterBody
from openapi_server.models.get_send_email_message_parameter_subject import GETSendEmailMessageParameterSubject
from openapi_server import util


class GETSendEmailMessageParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subject: GETSendEmailMessageParameterSubject=None, body: GETSendEmailMessageParameterBody=None):
        """GETSendEmailMessageParameter - a model defined in OpenAPI

        :param subject: The subject of this GETSendEmailMessageParameter.
        :param body: The body of this GETSendEmailMessageParameter.
        """
        self.openapi_types = {
            'subject': GETSendEmailMessageParameterSubject,
            'body': GETSendEmailMessageParameterBody
        }

        self.attribute_map = {
            'subject': 'Subject',
            'body': 'Body'
        }

        self._subject = subject
        self._body = body

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GETSendEmailMessageParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GET_SendEmail_Message_parameter of this GETSendEmailMessageParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subject(self):
        """Gets the subject of this GETSendEmailMessageParameter.


        :return: The subject of this GETSendEmailMessageParameter.
        :rtype: GETSendEmailMessageParameterSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this GETSendEmailMessageParameter.


        :param subject: The subject of this GETSendEmailMessageParameter.
        :type subject: GETSendEmailMessageParameterSubject
        """
        if subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")

        self._subject = subject

    @property
    def body(self):
        """Gets the body of this GETSendEmailMessageParameter.


        :return: The body of this GETSendEmailMessageParameter.
        :rtype: GETSendEmailMessageParameterBody
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this GETSendEmailMessageParameter.


        :param body: The body of this GETSendEmailMessageParameter.
        :type body: GETSendEmailMessageParameterBody
        """
        if body is None:
            raise ValueError("Invalid value for `body`, must not be `None`")

        self._body = body
