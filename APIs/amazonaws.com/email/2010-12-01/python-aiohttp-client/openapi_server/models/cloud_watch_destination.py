# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloudWatchDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dimension_configurations: List=None):
        """CloudWatchDestination - a model defined in OpenAPI

        :param dimension_configurations: The dimension_configurations of this CloudWatchDestination.
        """
        self.openapi_types = {
            'dimension_configurations': List
        }

        self.attribute_map = {
            'dimension_configurations': 'DimensionConfigurations'
        }

        self._dimension_configurations = dimension_configurations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloudWatchDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloudWatchDestination of this CloudWatchDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dimension_configurations(self):
        """Gets the dimension_configurations of this CloudWatchDestination.


        :return: The dimension_configurations of this CloudWatchDestination.
        :rtype: List
        """
        return self._dimension_configurations

    @dimension_configurations.setter
    def dimension_configurations(self, dimension_configurations):
        """Sets the dimension_configurations of this CloudWatchDestination.


        :param dimension_configurations: The dimension_configurations of this CloudWatchDestination.
        :type dimension_configurations: List
        """
        if dimension_configurations is None:
            raise ValueError("Invalid value for `dimension_configurations`, must not be `None`")

        self._dimension_configurations = dimension_configurations
