# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.receipt_filter_policy import ReceiptFilterPolicy
from openapi_server import util


class ReceiptIpFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy: ReceiptFilterPolicy=None, cidr: str=None):
        """ReceiptIpFilter - a model defined in OpenAPI

        :param policy: The policy of this ReceiptIpFilter.
        :param cidr: The cidr of this ReceiptIpFilter.
        """
        self.openapi_types = {
            'policy': ReceiptFilterPolicy,
            'cidr': str
        }

        self.attribute_map = {
            'policy': 'Policy',
            'cidr': 'Cidr'
        }

        self._policy = policy
        self._cidr = cidr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReceiptIpFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReceiptIpFilter of this ReceiptIpFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy(self):
        """Gets the policy of this ReceiptIpFilter.


        :return: The policy of this ReceiptIpFilter.
        :rtype: ReceiptFilterPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this ReceiptIpFilter.


        :param policy: The policy of this ReceiptIpFilter.
        :type policy: ReceiptFilterPolicy
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")

        self._policy = policy

    @property
    def cidr(self):
        """Gets the cidr of this ReceiptIpFilter.


        :return: The cidr of this ReceiptIpFilter.
        :rtype: str
        """
        return self._cidr

    @cidr.setter
    def cidr(self, cidr):
        """Sets the cidr of this ReceiptIpFilter.


        :param cidr: The cidr of this ReceiptIpFilter.
        :type cidr: str
        """
        if cidr is None:
            raise ValueError("Invalid value for `cidr`, must not be `None`")

        self._cidr = cidr
