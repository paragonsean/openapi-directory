# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_configuration_set_request_configuration_set import CreateConfigurationSetRequestConfigurationSet
from openapi_server import util


class CreateConfigurationSetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration_set: CreateConfigurationSetRequestConfigurationSet=None):
        """CreateConfigurationSetRequest - a model defined in OpenAPI

        :param configuration_set: The configuration_set of this CreateConfigurationSetRequest.
        """
        self.openapi_types = {
            'configuration_set': CreateConfigurationSetRequestConfigurationSet
        }

        self.attribute_map = {
            'configuration_set': 'ConfigurationSet'
        }

        self._configuration_set = configuration_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateConfigurationSetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateConfigurationSetRequest of this CreateConfigurationSetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration_set(self):
        """Gets the configuration_set of this CreateConfigurationSetRequest.


        :return: The configuration_set of this CreateConfigurationSetRequest.
        :rtype: CreateConfigurationSetRequestConfigurationSet
        """
        return self._configuration_set

    @configuration_set.setter
    def configuration_set(self, configuration_set):
        """Sets the configuration_set of this CreateConfigurationSetRequest.


        :param configuration_set: The configuration_set of this CreateConfigurationSetRequest.
        :type configuration_set: CreateConfigurationSetRequestConfigurationSet
        """
        if configuration_set is None:
            raise ValueError("Invalid value for `configuration_set`, must not be `None`")

        self._configuration_set = configuration_set
