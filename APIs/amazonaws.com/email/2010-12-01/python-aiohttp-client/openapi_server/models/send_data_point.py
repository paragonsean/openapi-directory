# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SendDataPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, timestamp: datetime=None, delivery_attempts: int=None, bounces: int=None, complaints: int=None, rejects: int=None):
        """SendDataPoint - a model defined in OpenAPI

        :param timestamp: The timestamp of this SendDataPoint.
        :param delivery_attempts: The delivery_attempts of this SendDataPoint.
        :param bounces: The bounces of this SendDataPoint.
        :param complaints: The complaints of this SendDataPoint.
        :param rejects: The rejects of this SendDataPoint.
        """
        self.openapi_types = {
            'timestamp': datetime,
            'delivery_attempts': int,
            'bounces': int,
            'complaints': int,
            'rejects': int
        }

        self.attribute_map = {
            'timestamp': 'Timestamp',
            'delivery_attempts': 'DeliveryAttempts',
            'bounces': 'Bounces',
            'complaints': 'Complaints',
            'rejects': 'Rejects'
        }

        self._timestamp = timestamp
        self._delivery_attempts = delivery_attempts
        self._bounces = bounces
        self._complaints = complaints
        self._rejects = rejects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendDataPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendDataPoint of this SendDataPoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self):
        """Gets the timestamp of this SendDataPoint.


        :return: The timestamp of this SendDataPoint.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this SendDataPoint.


        :param timestamp: The timestamp of this SendDataPoint.
        :type timestamp: datetime
        """

        self._timestamp = timestamp

    @property
    def delivery_attempts(self):
        """Gets the delivery_attempts of this SendDataPoint.


        :return: The delivery_attempts of this SendDataPoint.
        :rtype: int
        """
        return self._delivery_attempts

    @delivery_attempts.setter
    def delivery_attempts(self, delivery_attempts):
        """Sets the delivery_attempts of this SendDataPoint.


        :param delivery_attempts: The delivery_attempts of this SendDataPoint.
        :type delivery_attempts: int
        """

        self._delivery_attempts = delivery_attempts

    @property
    def bounces(self):
        """Gets the bounces of this SendDataPoint.


        :return: The bounces of this SendDataPoint.
        :rtype: int
        """
        return self._bounces

    @bounces.setter
    def bounces(self, bounces):
        """Sets the bounces of this SendDataPoint.


        :param bounces: The bounces of this SendDataPoint.
        :type bounces: int
        """

        self._bounces = bounces

    @property
    def complaints(self):
        """Gets the complaints of this SendDataPoint.


        :return: The complaints of this SendDataPoint.
        :rtype: int
        """
        return self._complaints

    @complaints.setter
    def complaints(self, complaints):
        """Sets the complaints of this SendDataPoint.


        :param complaints: The complaints of this SendDataPoint.
        :type complaints: int
        """

        self._complaints = complaints

    @property
    def rejects(self):
        """Gets the rejects of this SendDataPoint.


        :return: The rejects of this SendDataPoint.
        :rtype: int
        """
        return self._rejects

    @rejects.setter
    def rejects(self, rejects):
        """Sets the rejects of this SendDataPoint.


        :param rejects: The rejects of this SendDataPoint.
        :type rejects: int
        """

        self._rejects = rejects
