# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_type import NotificationType
from openapi_server import util


class SetIdentityHeadersInNotificationsEnabledRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity: str=None, notification_type: NotificationType=None, enabled: bool=None):
        """SetIdentityHeadersInNotificationsEnabledRequest - a model defined in OpenAPI

        :param identity: The identity of this SetIdentityHeadersInNotificationsEnabledRequest.
        :param notification_type: The notification_type of this SetIdentityHeadersInNotificationsEnabledRequest.
        :param enabled: The enabled of this SetIdentityHeadersInNotificationsEnabledRequest.
        """
        self.openapi_types = {
            'identity': str,
            'notification_type': NotificationType,
            'enabled': bool
        }

        self.attribute_map = {
            'identity': 'Identity',
            'notification_type': 'NotificationType',
            'enabled': 'Enabled'
        }

        self._identity = identity
        self._notification_type = notification_type
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetIdentityHeadersInNotificationsEnabledRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetIdentityHeadersInNotificationsEnabledRequest of this SetIdentityHeadersInNotificationsEnabledRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity(self):
        """Gets the identity of this SetIdentityHeadersInNotificationsEnabledRequest.


        :return: The identity of this SetIdentityHeadersInNotificationsEnabledRequest.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this SetIdentityHeadersInNotificationsEnabledRequest.


        :param identity: The identity of this SetIdentityHeadersInNotificationsEnabledRequest.
        :type identity: str
        """
        if identity is None:
            raise ValueError("Invalid value for `identity`, must not be `None`")

        self._identity = identity

    @property
    def notification_type(self):
        """Gets the notification_type of this SetIdentityHeadersInNotificationsEnabledRequest.


        :return: The notification_type of this SetIdentityHeadersInNotificationsEnabledRequest.
        :rtype: NotificationType
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type):
        """Sets the notification_type of this SetIdentityHeadersInNotificationsEnabledRequest.


        :param notification_type: The notification_type of this SetIdentityHeadersInNotificationsEnabledRequest.
        :type notification_type: NotificationType
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")

        self._notification_type = notification_type

    @property
    def enabled(self):
        """Gets the enabled of this SetIdentityHeadersInNotificationsEnabledRequest.


        :return: The enabled of this SetIdentityHeadersInNotificationsEnabledRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this SetIdentityHeadersInNotificationsEnabledRequest.


        :param enabled: The enabled of this SetIdentityHeadersInNotificationsEnabledRequest.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")

        self._enabled = enabled
