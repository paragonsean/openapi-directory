# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetIdentityMailFromDomainAttributesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mail_from_domain_attributes: Dict=None):
        """GetIdentityMailFromDomainAttributesResponse - a model defined in OpenAPI

        :param mail_from_domain_attributes: The mail_from_domain_attributes of this GetIdentityMailFromDomainAttributesResponse.
        """
        self.openapi_types = {
            'mail_from_domain_attributes': Dict
        }

        self.attribute_map = {
            'mail_from_domain_attributes': 'MailFromDomainAttributes'
        }

        self._mail_from_domain_attributes = mail_from_domain_attributes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetIdentityMailFromDomainAttributesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetIdentityMailFromDomainAttributesResponse of this GetIdentityMailFromDomainAttributesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mail_from_domain_attributes(self):
        """Gets the mail_from_domain_attributes of this GetIdentityMailFromDomainAttributesResponse.


        :return: The mail_from_domain_attributes of this GetIdentityMailFromDomainAttributesResponse.
        :rtype: Dict
        """
        return self._mail_from_domain_attributes

    @mail_from_domain_attributes.setter
    def mail_from_domain_attributes(self, mail_from_domain_attributes):
        """Sets the mail_from_domain_attributes of this GetIdentityMailFromDomainAttributesResponse.


        :param mail_from_domain_attributes: The mail_from_domain_attributes of this GetIdentityMailFromDomainAttributesResponse.
        :type mail_from_domain_attributes: Dict
        """
        if mail_from_domain_attributes is None:
            raise ValueError("Invalid value for `mail_from_domain_attributes`, must not be `None`")

        self._mail_from_domain_attributes = mail_from_domain_attributes
