# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SetIdentityDkimEnabledRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity: str=None, dkim_enabled: bool=None):
        """SetIdentityDkimEnabledRequest - a model defined in OpenAPI

        :param identity: The identity of this SetIdentityDkimEnabledRequest.
        :param dkim_enabled: The dkim_enabled of this SetIdentityDkimEnabledRequest.
        """
        self.openapi_types = {
            'identity': str,
            'dkim_enabled': bool
        }

        self.attribute_map = {
            'identity': 'Identity',
            'dkim_enabled': 'DkimEnabled'
        }

        self._identity = identity
        self._dkim_enabled = dkim_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SetIdentityDkimEnabledRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SetIdentityDkimEnabledRequest of this SetIdentityDkimEnabledRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity(self):
        """Gets the identity of this SetIdentityDkimEnabledRequest.


        :return: The identity of this SetIdentityDkimEnabledRequest.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this SetIdentityDkimEnabledRequest.


        :param identity: The identity of this SetIdentityDkimEnabledRequest.
        :type identity: str
        """
        if identity is None:
            raise ValueError("Invalid value for `identity`, must not be `None`")

        self._identity = identity

    @property
    def dkim_enabled(self):
        """Gets the dkim_enabled of this SetIdentityDkimEnabledRequest.


        :return: The dkim_enabled of this SetIdentityDkimEnabledRequest.
        :rtype: bool
        """
        return self._dkim_enabled

    @dkim_enabled.setter
    def dkim_enabled(self, dkim_enabled):
        """Sets the dkim_enabled of this SetIdentityDkimEnabledRequest.


        :param dkim_enabled: The dkim_enabled of this SetIdentityDkimEnabledRequest.
        :type dkim_enabled: bool
        """
        if dkim_enabled is None:
            raise ValueError("Invalid value for `dkim_enabled`, must not be `None`")

        self._dkim_enabled = dkim_enabled
