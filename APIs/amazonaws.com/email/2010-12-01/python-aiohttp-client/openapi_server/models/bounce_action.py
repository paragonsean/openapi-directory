# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BounceAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, topic_arn: str=None, smtp_reply_code: str=None, status_code: str=None, message: str=None, sender: str=None):
        """BounceAction - a model defined in OpenAPI

        :param topic_arn: The topic_arn of this BounceAction.
        :param smtp_reply_code: The smtp_reply_code of this BounceAction.
        :param status_code: The status_code of this BounceAction.
        :param message: The message of this BounceAction.
        :param sender: The sender of this BounceAction.
        """
        self.openapi_types = {
            'topic_arn': str,
            'smtp_reply_code': str,
            'status_code': str,
            'message': str,
            'sender': str
        }

        self.attribute_map = {
            'topic_arn': 'TopicArn',
            'smtp_reply_code': 'SmtpReplyCode',
            'status_code': 'StatusCode',
            'message': 'Message',
            'sender': 'Sender'
        }

        self._topic_arn = topic_arn
        self._smtp_reply_code = smtp_reply_code
        self._status_code = status_code
        self._message = message
        self._sender = sender

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BounceAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BounceAction of this BounceAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def topic_arn(self):
        """Gets the topic_arn of this BounceAction.


        :return: The topic_arn of this BounceAction.
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this BounceAction.


        :param topic_arn: The topic_arn of this BounceAction.
        :type topic_arn: str
        """

        self._topic_arn = topic_arn

    @property
    def smtp_reply_code(self):
        """Gets the smtp_reply_code of this BounceAction.


        :return: The smtp_reply_code of this BounceAction.
        :rtype: str
        """
        return self._smtp_reply_code

    @smtp_reply_code.setter
    def smtp_reply_code(self, smtp_reply_code):
        """Sets the smtp_reply_code of this BounceAction.


        :param smtp_reply_code: The smtp_reply_code of this BounceAction.
        :type smtp_reply_code: str
        """
        if smtp_reply_code is None:
            raise ValueError("Invalid value for `smtp_reply_code`, must not be `None`")

        self._smtp_reply_code = smtp_reply_code

    @property
    def status_code(self):
        """Gets the status_code of this BounceAction.


        :return: The status_code of this BounceAction.
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this BounceAction.


        :param status_code: The status_code of this BounceAction.
        :type status_code: str
        """

        self._status_code = status_code

    @property
    def message(self):
        """Gets the message of this BounceAction.


        :return: The message of this BounceAction.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BounceAction.


        :param message: The message of this BounceAction.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def sender(self):
        """Gets the sender of this BounceAction.


        :return: The sender of this BounceAction.
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this BounceAction.


        :param sender: The sender of this BounceAction.
        :type sender: str
        """
        if sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")

        self._sender = sender
