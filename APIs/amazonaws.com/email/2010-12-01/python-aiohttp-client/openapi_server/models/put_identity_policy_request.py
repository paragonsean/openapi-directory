# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PutIdentityPolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity: str=None, policy_name: str=None, policy: str=None):
        """PutIdentityPolicyRequest - a model defined in OpenAPI

        :param identity: The identity of this PutIdentityPolicyRequest.
        :param policy_name: The policy_name of this PutIdentityPolicyRequest.
        :param policy: The policy of this PutIdentityPolicyRequest.
        """
        self.openapi_types = {
            'identity': str,
            'policy_name': str,
            'policy': str
        }

        self.attribute_map = {
            'identity': 'Identity',
            'policy_name': 'PolicyName',
            'policy': 'Policy'
        }

        self._identity = identity
        self._policy_name = policy_name
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PutIdentityPolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PutIdentityPolicyRequest of this PutIdentityPolicyRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity(self):
        """Gets the identity of this PutIdentityPolicyRequest.


        :return: The identity of this PutIdentityPolicyRequest.
        :rtype: str
        """
        return self._identity

    @identity.setter
    def identity(self, identity):
        """Sets the identity of this PutIdentityPolicyRequest.


        :param identity: The identity of this PutIdentityPolicyRequest.
        :type identity: str
        """
        if identity is None:
            raise ValueError("Invalid value for `identity`, must not be `None`")

        self._identity = identity

    @property
    def policy_name(self):
        """Gets the policy_name of this PutIdentityPolicyRequest.


        :return: The policy_name of this PutIdentityPolicyRequest.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name):
        """Sets the policy_name of this PutIdentityPolicyRequest.


        :param policy_name: The policy_name of this PutIdentityPolicyRequest.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")

        self._policy_name = policy_name

    @property
    def policy(self):
        """Gets the policy of this PutIdentityPolicyRequest.


        :return: The policy of this PutIdentityPolicyRequest.
        :rtype: str
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this PutIdentityPolicyRequest.


        :param policy: The policy of this PutIdentityPolicyRequest.
        :type policy: str
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")

        self._policy = policy
