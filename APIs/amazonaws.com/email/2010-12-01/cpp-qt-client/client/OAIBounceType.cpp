/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBounceType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBounceType::OAIBounceType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBounceType::OAIBounceType() {
    this->initializeModel();
}

OAIBounceType::~OAIBounceType() {}

void OAIBounceType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBounceType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBounceType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DoesNotExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBounceType::DOESNOTEXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MessageTooLarge", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBounceType::MESSAGETOOLARGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ExceededQuota", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBounceType::EXCEEDEDQUOTA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ContentRejected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBounceType::CONTENTREJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Undefined", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBounceType::UNDEFINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TemporaryFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBounceType::TEMPORARYFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBounceType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBounceType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBounceType::DOESNOTEXIST:
            val = "DoesNotExist";
            break;
        case eOAIBounceType::MESSAGETOOLARGE:
            val = "MessageTooLarge";
            break;
        case eOAIBounceType::EXCEEDEDQUOTA:
            val = "ExceededQuota";
            break;
        case eOAIBounceType::CONTENTREJECTED:
            val = "ContentRejected";
            break;
        case eOAIBounceType::UNDEFINED:
            val = "Undefined";
            break;
        case eOAIBounceType::TEMPORARYFAILURE:
            val = "TemporaryFailure";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBounceType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBounceType::eOAIBounceType OAIBounceType::getValue() const {
    return m_value;
}

void OAIBounceType::setValue(const OAIBounceType::eOAIBounceType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBounceType::isSet() const {
    
    return m_value_isSet;
}

bool OAIBounceType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
