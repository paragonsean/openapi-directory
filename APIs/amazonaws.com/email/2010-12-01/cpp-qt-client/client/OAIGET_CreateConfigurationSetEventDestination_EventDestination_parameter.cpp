/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter() {
    this->initializeModel();
}

OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::~OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter() {}

void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_matching_event_types_isSet = false;
    m_matching_event_types_isValid = false;

    m_kinesis_firehose_destination_isSet = false;
    m_kinesis_firehose_destination_isValid = false;

    m_cloud_watch_destination_isSet = false;
    m_cloud_watch_destination_isValid = false;

    m_sns_destination_isSet = false;
    m_sns_destination_isValid = false;
}

void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("Enabled")]);
    m_enabled_isSet = !json[QString("Enabled")].isNull() && m_enabled_isValid;

    m_matching_event_types_isValid = ::OpenAPI::fromJsonValue(m_matching_event_types, json[QString("MatchingEventTypes")]);
    m_matching_event_types_isSet = !json[QString("MatchingEventTypes")].isNull() && m_matching_event_types_isValid;

    m_kinesis_firehose_destination_isValid = ::OpenAPI::fromJsonValue(m_kinesis_firehose_destination, json[QString("KinesisFirehoseDestination")]);
    m_kinesis_firehose_destination_isSet = !json[QString("KinesisFirehoseDestination")].isNull() && m_kinesis_firehose_destination_isValid;

    m_cloud_watch_destination_isValid = ::OpenAPI::fromJsonValue(m_cloud_watch_destination, json[QString("CloudWatchDestination")]);
    m_cloud_watch_destination_isSet = !json[QString("CloudWatchDestination")].isNull() && m_cloud_watch_destination_isValid;

    m_sns_destination_isValid = ::OpenAPI::fromJsonValue(m_sns_destination, json[QString("SNSDestination")]);
    m_sns_destination_isSet = !json[QString("SNSDestination")].isNull() && m_sns_destination_isValid;
}

QString OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("Enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_matching_event_types.isSet()) {
        obj.insert(QString("MatchingEventTypes"), ::OpenAPI::toJsonValue(m_matching_event_types));
    }
    if (m_kinesis_firehose_destination.isSet()) {
        obj.insert(QString("KinesisFirehoseDestination"), ::OpenAPI::toJsonValue(m_kinesis_firehose_destination));
    }
    if (m_cloud_watch_destination.isSet()) {
        obj.insert(QString("CloudWatchDestination"), ::OpenAPI::toJsonValue(m_cloud_watch_destination));
    }
    if (m_sns_destination.isSet()) {
        obj.insert(QString("SNSDestination"), ::OpenAPI::toJsonValue(m_sns_destination));
    }
    return obj;
}

QString OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::getName() const {
    return m_name;
}
void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::getEnabled() const {
    return m_enabled;
}
void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::getMatchingEventTypes() const {
    return m_matching_event_types;
}
void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::setMatchingEventTypes(const QList &matching_event_types) {
    m_matching_event_types = matching_event_types;
    m_matching_event_types_isSet = true;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_matching_event_types_Set() const{
    return m_matching_event_types_isSet;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_matching_event_types_Valid() const{
    return m_matching_event_types_isValid;
}

OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter_KinesisFirehoseDestination OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::getKinesisFirehoseDestination() const {
    return m_kinesis_firehose_destination;
}
void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::setKinesisFirehoseDestination(const OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter_KinesisFirehoseDestination &kinesis_firehose_destination) {
    m_kinesis_firehose_destination = kinesis_firehose_destination;
    m_kinesis_firehose_destination_isSet = true;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_kinesis_firehose_destination_Set() const{
    return m_kinesis_firehose_destination_isSet;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_kinesis_firehose_destination_Valid() const{
    return m_kinesis_firehose_destination_isValid;
}

OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter_CloudWatchDestination OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::getCloudWatchDestination() const {
    return m_cloud_watch_destination;
}
void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::setCloudWatchDestination(const OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter_CloudWatchDestination &cloud_watch_destination) {
    m_cloud_watch_destination = cloud_watch_destination;
    m_cloud_watch_destination_isSet = true;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_cloud_watch_destination_Set() const{
    return m_cloud_watch_destination_isSet;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_cloud_watch_destination_Valid() const{
    return m_cloud_watch_destination_isValid;
}

OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter_SNSDestination OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::getSnsDestination() const {
    return m_sns_destination;
}
void OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::setSnsDestination(const OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter_SNSDestination &sns_destination) {
    m_sns_destination = sns_destination;
    m_sns_destination_isSet = true;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_sns_destination_Set() const{
    return m_sns_destination_isSet;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::is_sns_destination_Valid() const{
    return m_sns_destination_isValid;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matching_event_types.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kinesis_firehose_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_watch_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_matching_event_types_isValid && true;
}

} // namespace OpenAPI
