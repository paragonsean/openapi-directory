/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkEmailStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkEmailStatus::OAIBulkEmailStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkEmailStatus::OAIBulkEmailStatus() {
    this->initializeModel();
}

OAIBulkEmailStatus::~OAIBulkEmailStatus() {}

void OAIBulkEmailStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIBulkEmailStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIBulkEmailStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Success", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::SUCCESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MessageRejected", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::MESSAGEREJECTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MailFromDomainNotVerified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::MAILFROMDOMAINNOTVERIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConfigurationSetDoesNotExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::CONFIGURATIONSETDOESNOTEXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TemplateDoesNotExist", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::TEMPLATEDOESNOTEXIST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccountSuspended", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::ACCOUNTSUSPENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccountThrottled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::ACCOUNTTHROTTLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccountDailyQuotaExceeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::ACCOUNTDAILYQUOTAEXCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidSendingPoolName", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::INVALIDSENDINGPOOLNAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccountSendingPaused", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::ACCOUNTSENDINGPAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ConfigurationSetSendingPaused", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::CONFIGURATIONSETSENDINGPAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidParameterValue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::INVALIDPARAMETERVALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TransientFailure", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::TRANSIENTFAILURE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIBulkEmailStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIBulkEmailStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIBulkEmailStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIBulkEmailStatus::SUCCESS:
            val = "Success";
            break;
        case eOAIBulkEmailStatus::MESSAGEREJECTED:
            val = "MessageRejected";
            break;
        case eOAIBulkEmailStatus::MAILFROMDOMAINNOTVERIFIED:
            val = "MailFromDomainNotVerified";
            break;
        case eOAIBulkEmailStatus::CONFIGURATIONSETDOESNOTEXIST:
            val = "ConfigurationSetDoesNotExist";
            break;
        case eOAIBulkEmailStatus::TEMPLATEDOESNOTEXIST:
            val = "TemplateDoesNotExist";
            break;
        case eOAIBulkEmailStatus::ACCOUNTSUSPENDED:
            val = "AccountSuspended";
            break;
        case eOAIBulkEmailStatus::ACCOUNTTHROTTLED:
            val = "AccountThrottled";
            break;
        case eOAIBulkEmailStatus::ACCOUNTDAILYQUOTAEXCEEDED:
            val = "AccountDailyQuotaExceeded";
            break;
        case eOAIBulkEmailStatus::INVALIDSENDINGPOOLNAME:
            val = "InvalidSendingPoolName";
            break;
        case eOAIBulkEmailStatus::ACCOUNTSENDINGPAUSED:
            val = "AccountSendingPaused";
            break;
        case eOAIBulkEmailStatus::CONFIGURATIONSETSENDINGPAUSED:
            val = "ConfigurationSetSendingPaused";
            break;
        case eOAIBulkEmailStatus::INVALIDPARAMETERVALUE:
            val = "InvalidParameterValue";
            break;
        case eOAIBulkEmailStatus::TRANSIENTFAILURE:
            val = "TransientFailure";
            break;
        case eOAIBulkEmailStatus::FAILED:
            val = "Failed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIBulkEmailStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIBulkEmailStatus::eOAIBulkEmailStatus OAIBulkEmailStatus::getValue() const {
    return m_value;
}

void OAIBulkEmailStatus::setValue(const OAIBulkEmailStatus::eOAIBulkEmailStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIBulkEmailStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIBulkEmailStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
