/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityNotificationAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityNotificationAttributes::OAIIdentityNotificationAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityNotificationAttributes::OAIIdentityNotificationAttributes() {
    this->initializeModel();
}

OAIIdentityNotificationAttributes::~OAIIdentityNotificationAttributes() {}

void OAIIdentityNotificationAttributes::initializeModel() {

    m_bounce_topic_isSet = false;
    m_bounce_topic_isValid = false;

    m_complaint_topic_isSet = false;
    m_complaint_topic_isValid = false;

    m_delivery_topic_isSet = false;
    m_delivery_topic_isValid = false;

    m_forwarding_enabled_isSet = false;
    m_forwarding_enabled_isValid = false;

    m_headers_in_bounce_notifications_enabled_isSet = false;
    m_headers_in_bounce_notifications_enabled_isValid = false;

    m_headers_in_complaint_notifications_enabled_isSet = false;
    m_headers_in_complaint_notifications_enabled_isValid = false;

    m_headers_in_delivery_notifications_enabled_isSet = false;
    m_headers_in_delivery_notifications_enabled_isValid = false;
}

void OAIIdentityNotificationAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityNotificationAttributes::fromJsonObject(QJsonObject json) {

    m_bounce_topic_isValid = ::OpenAPI::fromJsonValue(m_bounce_topic, json[QString("BounceTopic")]);
    m_bounce_topic_isSet = !json[QString("BounceTopic")].isNull() && m_bounce_topic_isValid;

    m_complaint_topic_isValid = ::OpenAPI::fromJsonValue(m_complaint_topic, json[QString("ComplaintTopic")]);
    m_complaint_topic_isSet = !json[QString("ComplaintTopic")].isNull() && m_complaint_topic_isValid;

    m_delivery_topic_isValid = ::OpenAPI::fromJsonValue(m_delivery_topic, json[QString("DeliveryTopic")]);
    m_delivery_topic_isSet = !json[QString("DeliveryTopic")].isNull() && m_delivery_topic_isValid;

    m_forwarding_enabled_isValid = ::OpenAPI::fromJsonValue(m_forwarding_enabled, json[QString("ForwardingEnabled")]);
    m_forwarding_enabled_isSet = !json[QString("ForwardingEnabled")].isNull() && m_forwarding_enabled_isValid;

    m_headers_in_bounce_notifications_enabled_isValid = ::OpenAPI::fromJsonValue(m_headers_in_bounce_notifications_enabled, json[QString("HeadersInBounceNotificationsEnabled")]);
    m_headers_in_bounce_notifications_enabled_isSet = !json[QString("HeadersInBounceNotificationsEnabled")].isNull() && m_headers_in_bounce_notifications_enabled_isValid;

    m_headers_in_complaint_notifications_enabled_isValid = ::OpenAPI::fromJsonValue(m_headers_in_complaint_notifications_enabled, json[QString("HeadersInComplaintNotificationsEnabled")]);
    m_headers_in_complaint_notifications_enabled_isSet = !json[QString("HeadersInComplaintNotificationsEnabled")].isNull() && m_headers_in_complaint_notifications_enabled_isValid;

    m_headers_in_delivery_notifications_enabled_isValid = ::OpenAPI::fromJsonValue(m_headers_in_delivery_notifications_enabled, json[QString("HeadersInDeliveryNotificationsEnabled")]);
    m_headers_in_delivery_notifications_enabled_isSet = !json[QString("HeadersInDeliveryNotificationsEnabled")].isNull() && m_headers_in_delivery_notifications_enabled_isValid;
}

QString OAIIdentityNotificationAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityNotificationAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_bounce_topic_isSet) {
        obj.insert(QString("BounceTopic"), ::OpenAPI::toJsonValue(m_bounce_topic));
    }
    if (m_complaint_topic_isSet) {
        obj.insert(QString("ComplaintTopic"), ::OpenAPI::toJsonValue(m_complaint_topic));
    }
    if (m_delivery_topic_isSet) {
        obj.insert(QString("DeliveryTopic"), ::OpenAPI::toJsonValue(m_delivery_topic));
    }
    if (m_forwarding_enabled_isSet) {
        obj.insert(QString("ForwardingEnabled"), ::OpenAPI::toJsonValue(m_forwarding_enabled));
    }
    if (m_headers_in_bounce_notifications_enabled_isSet) {
        obj.insert(QString("HeadersInBounceNotificationsEnabled"), ::OpenAPI::toJsonValue(m_headers_in_bounce_notifications_enabled));
    }
    if (m_headers_in_complaint_notifications_enabled_isSet) {
        obj.insert(QString("HeadersInComplaintNotificationsEnabled"), ::OpenAPI::toJsonValue(m_headers_in_complaint_notifications_enabled));
    }
    if (m_headers_in_delivery_notifications_enabled_isSet) {
        obj.insert(QString("HeadersInDeliveryNotificationsEnabled"), ::OpenAPI::toJsonValue(m_headers_in_delivery_notifications_enabled));
    }
    return obj;
}

QString OAIIdentityNotificationAttributes::getBounceTopic() const {
    return m_bounce_topic;
}
void OAIIdentityNotificationAttributes::setBounceTopic(const QString &bounce_topic) {
    m_bounce_topic = bounce_topic;
    m_bounce_topic_isSet = true;
}

bool OAIIdentityNotificationAttributes::is_bounce_topic_Set() const{
    return m_bounce_topic_isSet;
}

bool OAIIdentityNotificationAttributes::is_bounce_topic_Valid() const{
    return m_bounce_topic_isValid;
}

QString OAIIdentityNotificationAttributes::getComplaintTopic() const {
    return m_complaint_topic;
}
void OAIIdentityNotificationAttributes::setComplaintTopic(const QString &complaint_topic) {
    m_complaint_topic = complaint_topic;
    m_complaint_topic_isSet = true;
}

bool OAIIdentityNotificationAttributes::is_complaint_topic_Set() const{
    return m_complaint_topic_isSet;
}

bool OAIIdentityNotificationAttributes::is_complaint_topic_Valid() const{
    return m_complaint_topic_isValid;
}

QString OAIIdentityNotificationAttributes::getDeliveryTopic() const {
    return m_delivery_topic;
}
void OAIIdentityNotificationAttributes::setDeliveryTopic(const QString &delivery_topic) {
    m_delivery_topic = delivery_topic;
    m_delivery_topic_isSet = true;
}

bool OAIIdentityNotificationAttributes::is_delivery_topic_Set() const{
    return m_delivery_topic_isSet;
}

bool OAIIdentityNotificationAttributes::is_delivery_topic_Valid() const{
    return m_delivery_topic_isValid;
}

bool OAIIdentityNotificationAttributes::getForwardingEnabled() const {
    return m_forwarding_enabled;
}
void OAIIdentityNotificationAttributes::setForwardingEnabled(const bool &forwarding_enabled) {
    m_forwarding_enabled = forwarding_enabled;
    m_forwarding_enabled_isSet = true;
}

bool OAIIdentityNotificationAttributes::is_forwarding_enabled_Set() const{
    return m_forwarding_enabled_isSet;
}

bool OAIIdentityNotificationAttributes::is_forwarding_enabled_Valid() const{
    return m_forwarding_enabled_isValid;
}

bool OAIIdentityNotificationAttributes::getHeadersInBounceNotificationsEnabled() const {
    return m_headers_in_bounce_notifications_enabled;
}
void OAIIdentityNotificationAttributes::setHeadersInBounceNotificationsEnabled(const bool &headers_in_bounce_notifications_enabled) {
    m_headers_in_bounce_notifications_enabled = headers_in_bounce_notifications_enabled;
    m_headers_in_bounce_notifications_enabled_isSet = true;
}

bool OAIIdentityNotificationAttributes::is_headers_in_bounce_notifications_enabled_Set() const{
    return m_headers_in_bounce_notifications_enabled_isSet;
}

bool OAIIdentityNotificationAttributes::is_headers_in_bounce_notifications_enabled_Valid() const{
    return m_headers_in_bounce_notifications_enabled_isValid;
}

bool OAIIdentityNotificationAttributes::getHeadersInComplaintNotificationsEnabled() const {
    return m_headers_in_complaint_notifications_enabled;
}
void OAIIdentityNotificationAttributes::setHeadersInComplaintNotificationsEnabled(const bool &headers_in_complaint_notifications_enabled) {
    m_headers_in_complaint_notifications_enabled = headers_in_complaint_notifications_enabled;
    m_headers_in_complaint_notifications_enabled_isSet = true;
}

bool OAIIdentityNotificationAttributes::is_headers_in_complaint_notifications_enabled_Set() const{
    return m_headers_in_complaint_notifications_enabled_isSet;
}

bool OAIIdentityNotificationAttributes::is_headers_in_complaint_notifications_enabled_Valid() const{
    return m_headers_in_complaint_notifications_enabled_isValid;
}

bool OAIIdentityNotificationAttributes::getHeadersInDeliveryNotificationsEnabled() const {
    return m_headers_in_delivery_notifications_enabled;
}
void OAIIdentityNotificationAttributes::setHeadersInDeliveryNotificationsEnabled(const bool &headers_in_delivery_notifications_enabled) {
    m_headers_in_delivery_notifications_enabled = headers_in_delivery_notifications_enabled;
    m_headers_in_delivery_notifications_enabled_isSet = true;
}

bool OAIIdentityNotificationAttributes::is_headers_in_delivery_notifications_enabled_Set() const{
    return m_headers_in_delivery_notifications_enabled_isSet;
}

bool OAIIdentityNotificationAttributes::is_headers_in_delivery_notifications_enabled_Valid() const{
    return m_headers_in_delivery_notifications_enabled_isValid;
}

bool OAIIdentityNotificationAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounce_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complaint_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_in_bounce_notifications_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_in_complaint_notifications_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_in_delivery_notifications_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityNotificationAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bounce_topic_isValid && m_complaint_topic_isValid && m_delivery_topic_isValid && m_forwarding_enabled_isValid && true;
}

} // namespace OpenAPI
