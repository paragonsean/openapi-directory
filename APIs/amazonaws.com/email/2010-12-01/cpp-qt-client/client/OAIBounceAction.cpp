/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBounceAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBounceAction::OAIBounceAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBounceAction::OAIBounceAction() {
    this->initializeModel();
}

OAIBounceAction::~OAIBounceAction() {}

void OAIBounceAction::initializeModel() {

    m_topic_arn_isSet = false;
    m_topic_arn_isValid = false;

    m_smtp_reply_code_isSet = false;
    m_smtp_reply_code_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_sender_isSet = false;
    m_sender_isValid = false;
}

void OAIBounceAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBounceAction::fromJsonObject(QJsonObject json) {

    m_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_topic_arn, json[QString("TopicArn")]);
    m_topic_arn_isSet = !json[QString("TopicArn")].isNull() && m_topic_arn_isValid;

    m_smtp_reply_code_isValid = ::OpenAPI::fromJsonValue(m_smtp_reply_code, json[QString("SmtpReplyCode")]);
    m_smtp_reply_code_isSet = !json[QString("SmtpReplyCode")].isNull() && m_smtp_reply_code_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("StatusCode")]);
    m_status_code_isSet = !json[QString("StatusCode")].isNull() && m_status_code_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("Message")]);
    m_message_isSet = !json[QString("Message")].isNull() && m_message_isValid;

    m_sender_isValid = ::OpenAPI::fromJsonValue(m_sender, json[QString("Sender")]);
    m_sender_isSet = !json[QString("Sender")].isNull() && m_sender_isValid;
}

QString OAIBounceAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBounceAction::asJsonObject() const {
    QJsonObject obj;
    if (m_topic_arn_isSet) {
        obj.insert(QString("TopicArn"), ::OpenAPI::toJsonValue(m_topic_arn));
    }
    if (m_smtp_reply_code_isSet) {
        obj.insert(QString("SmtpReplyCode"), ::OpenAPI::toJsonValue(m_smtp_reply_code));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("StatusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_message_isSet) {
        obj.insert(QString("Message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_sender_isSet) {
        obj.insert(QString("Sender"), ::OpenAPI::toJsonValue(m_sender));
    }
    return obj;
}

QString OAIBounceAction::getTopicArn() const {
    return m_topic_arn;
}
void OAIBounceAction::setTopicArn(const QString &topic_arn) {
    m_topic_arn = topic_arn;
    m_topic_arn_isSet = true;
}

bool OAIBounceAction::is_topic_arn_Set() const{
    return m_topic_arn_isSet;
}

bool OAIBounceAction::is_topic_arn_Valid() const{
    return m_topic_arn_isValid;
}

QString OAIBounceAction::getSmtpReplyCode() const {
    return m_smtp_reply_code;
}
void OAIBounceAction::setSmtpReplyCode(const QString &smtp_reply_code) {
    m_smtp_reply_code = smtp_reply_code;
    m_smtp_reply_code_isSet = true;
}

bool OAIBounceAction::is_smtp_reply_code_Set() const{
    return m_smtp_reply_code_isSet;
}

bool OAIBounceAction::is_smtp_reply_code_Valid() const{
    return m_smtp_reply_code_isValid;
}

QString OAIBounceAction::getStatusCode() const {
    return m_status_code;
}
void OAIBounceAction::setStatusCode(const QString &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIBounceAction::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIBounceAction::is_status_code_Valid() const{
    return m_status_code_isValid;
}

QString OAIBounceAction::getMessage() const {
    return m_message;
}
void OAIBounceAction::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIBounceAction::is_message_Set() const{
    return m_message_isSet;
}

bool OAIBounceAction::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIBounceAction::getSender() const {
    return m_sender;
}
void OAIBounceAction::setSender(const QString &sender) {
    m_sender = sender;
    m_sender_isSet = true;
}

bool OAIBounceAction::is_sender_Set() const{
    return m_sender_isSet;
}

bool OAIBounceAction::is_sender_Valid() const{
    return m_sender_isValid;
}

bool OAIBounceAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smtp_reply_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBounceAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_smtp_reply_code_isValid && m_message_isValid && m_sender_isValid && true;
}

} // namespace OpenAPI
