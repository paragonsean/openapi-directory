/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiptAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiptAction::OAIReceiptAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiptAction::OAIReceiptAction() {
    this->initializeModel();
}

OAIReceiptAction::~OAIReceiptAction() {}

void OAIReceiptAction::initializeModel() {

    m_s3_action_isSet = false;
    m_s3_action_isValid = false;

    m_bounce_action_isSet = false;
    m_bounce_action_isValid = false;

    m_workmail_action_isSet = false;
    m_workmail_action_isValid = false;

    m_lambda_action_isSet = false;
    m_lambda_action_isValid = false;

    m_stop_action_isSet = false;
    m_stop_action_isValid = false;

    m_add_header_action_isSet = false;
    m_add_header_action_isValid = false;

    m_sns_action_isSet = false;
    m_sns_action_isValid = false;
}

void OAIReceiptAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiptAction::fromJsonObject(QJsonObject json) {

    m_s3_action_isValid = ::OpenAPI::fromJsonValue(m_s3_action, json[QString("S3Action")]);
    m_s3_action_isSet = !json[QString("S3Action")].isNull() && m_s3_action_isValid;

    m_bounce_action_isValid = ::OpenAPI::fromJsonValue(m_bounce_action, json[QString("BounceAction")]);
    m_bounce_action_isSet = !json[QString("BounceAction")].isNull() && m_bounce_action_isValid;

    m_workmail_action_isValid = ::OpenAPI::fromJsonValue(m_workmail_action, json[QString("WorkmailAction")]);
    m_workmail_action_isSet = !json[QString("WorkmailAction")].isNull() && m_workmail_action_isValid;

    m_lambda_action_isValid = ::OpenAPI::fromJsonValue(m_lambda_action, json[QString("LambdaAction")]);
    m_lambda_action_isSet = !json[QString("LambdaAction")].isNull() && m_lambda_action_isValid;

    m_stop_action_isValid = ::OpenAPI::fromJsonValue(m_stop_action, json[QString("StopAction")]);
    m_stop_action_isSet = !json[QString("StopAction")].isNull() && m_stop_action_isValid;

    m_add_header_action_isValid = ::OpenAPI::fromJsonValue(m_add_header_action, json[QString("AddHeaderAction")]);
    m_add_header_action_isSet = !json[QString("AddHeaderAction")].isNull() && m_add_header_action_isValid;

    m_sns_action_isValid = ::OpenAPI::fromJsonValue(m_sns_action, json[QString("SNSAction")]);
    m_sns_action_isSet = !json[QString("SNSAction")].isNull() && m_sns_action_isValid;
}

QString OAIReceiptAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiptAction::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_action.isSet()) {
        obj.insert(QString("S3Action"), ::OpenAPI::toJsonValue(m_s3_action));
    }
    if (m_bounce_action.isSet()) {
        obj.insert(QString("BounceAction"), ::OpenAPI::toJsonValue(m_bounce_action));
    }
    if (m_workmail_action.isSet()) {
        obj.insert(QString("WorkmailAction"), ::OpenAPI::toJsonValue(m_workmail_action));
    }
    if (m_lambda_action.isSet()) {
        obj.insert(QString("LambdaAction"), ::OpenAPI::toJsonValue(m_lambda_action));
    }
    if (m_stop_action.isSet()) {
        obj.insert(QString("StopAction"), ::OpenAPI::toJsonValue(m_stop_action));
    }
    if (m_add_header_action.isSet()) {
        obj.insert(QString("AddHeaderAction"), ::OpenAPI::toJsonValue(m_add_header_action));
    }
    if (m_sns_action.isSet()) {
        obj.insert(QString("SNSAction"), ::OpenAPI::toJsonValue(m_sns_action));
    }
    return obj;
}

OAIReceiptAction_S3Action OAIReceiptAction::getS3Action() const {
    return m_s3_action;
}
void OAIReceiptAction::setS3Action(const OAIReceiptAction_S3Action &s3_action) {
    m_s3_action = s3_action;
    m_s3_action_isSet = true;
}

bool OAIReceiptAction::is_s3_action_Set() const{
    return m_s3_action_isSet;
}

bool OAIReceiptAction::is_s3_action_Valid() const{
    return m_s3_action_isValid;
}

OAIReceiptAction_BounceAction OAIReceiptAction::getBounceAction() const {
    return m_bounce_action;
}
void OAIReceiptAction::setBounceAction(const OAIReceiptAction_BounceAction &bounce_action) {
    m_bounce_action = bounce_action;
    m_bounce_action_isSet = true;
}

bool OAIReceiptAction::is_bounce_action_Set() const{
    return m_bounce_action_isSet;
}

bool OAIReceiptAction::is_bounce_action_Valid() const{
    return m_bounce_action_isValid;
}

OAIReceiptAction_WorkmailAction OAIReceiptAction::getWorkmailAction() const {
    return m_workmail_action;
}
void OAIReceiptAction::setWorkmailAction(const OAIReceiptAction_WorkmailAction &workmail_action) {
    m_workmail_action = workmail_action;
    m_workmail_action_isSet = true;
}

bool OAIReceiptAction::is_workmail_action_Set() const{
    return m_workmail_action_isSet;
}

bool OAIReceiptAction::is_workmail_action_Valid() const{
    return m_workmail_action_isValid;
}

OAIReceiptAction_LambdaAction OAIReceiptAction::getLambdaAction() const {
    return m_lambda_action;
}
void OAIReceiptAction::setLambdaAction(const OAIReceiptAction_LambdaAction &lambda_action) {
    m_lambda_action = lambda_action;
    m_lambda_action_isSet = true;
}

bool OAIReceiptAction::is_lambda_action_Set() const{
    return m_lambda_action_isSet;
}

bool OAIReceiptAction::is_lambda_action_Valid() const{
    return m_lambda_action_isValid;
}

OAIReceiptAction_StopAction OAIReceiptAction::getStopAction() const {
    return m_stop_action;
}
void OAIReceiptAction::setStopAction(const OAIReceiptAction_StopAction &stop_action) {
    m_stop_action = stop_action;
    m_stop_action_isSet = true;
}

bool OAIReceiptAction::is_stop_action_Set() const{
    return m_stop_action_isSet;
}

bool OAIReceiptAction::is_stop_action_Valid() const{
    return m_stop_action_isValid;
}

OAIReceiptAction_AddHeaderAction OAIReceiptAction::getAddHeaderAction() const {
    return m_add_header_action;
}
void OAIReceiptAction::setAddHeaderAction(const OAIReceiptAction_AddHeaderAction &add_header_action) {
    m_add_header_action = add_header_action;
    m_add_header_action_isSet = true;
}

bool OAIReceiptAction::is_add_header_action_Set() const{
    return m_add_header_action_isSet;
}

bool OAIReceiptAction::is_add_header_action_Valid() const{
    return m_add_header_action_isValid;
}

OAIReceiptAction_SNSAction OAIReceiptAction::getSnsAction() const {
    return m_sns_action;
}
void OAIReceiptAction::setSnsAction(const OAIReceiptAction_SNSAction &sns_action) {
    m_sns_action = sns_action;
    m_sns_action_isSet = true;
}

bool OAIReceiptAction::is_sns_action_Set() const{
    return m_sns_action_isSet;
}

bool OAIReceiptAction::is_sns_action_Valid() const{
    return m_sns_action_isValid;
}

bool OAIReceiptAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounce_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workmail_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_header_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sns_action.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiptAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
