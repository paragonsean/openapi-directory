/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendBounceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendBounceRequest::OAISendBounceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendBounceRequest::OAISendBounceRequest() {
    this->initializeModel();
}

OAISendBounceRequest::~OAISendBounceRequest() {}

void OAISendBounceRequest::initializeModel() {

    m_original_message_id_isSet = false;
    m_original_message_id_isValid = false;

    m_bounce_sender_isSet = false;
    m_bounce_sender_isValid = false;

    m_explanation_isSet = false;
    m_explanation_isValid = false;

    m_message_dsn_isSet = false;
    m_message_dsn_isValid = false;

    m_bounced_recipient_info_list_isSet = false;
    m_bounced_recipient_info_list_isValid = false;

    m_bounce_sender_arn_isSet = false;
    m_bounce_sender_arn_isValid = false;
}

void OAISendBounceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendBounceRequest::fromJsonObject(QJsonObject json) {

    m_original_message_id_isValid = ::OpenAPI::fromJsonValue(m_original_message_id, json[QString("OriginalMessageId")]);
    m_original_message_id_isSet = !json[QString("OriginalMessageId")].isNull() && m_original_message_id_isValid;

    m_bounce_sender_isValid = ::OpenAPI::fromJsonValue(m_bounce_sender, json[QString("BounceSender")]);
    m_bounce_sender_isSet = !json[QString("BounceSender")].isNull() && m_bounce_sender_isValid;

    m_explanation_isValid = ::OpenAPI::fromJsonValue(m_explanation, json[QString("Explanation")]);
    m_explanation_isSet = !json[QString("Explanation")].isNull() && m_explanation_isValid;

    m_message_dsn_isValid = ::OpenAPI::fromJsonValue(m_message_dsn, json[QString("MessageDsn")]);
    m_message_dsn_isSet = !json[QString("MessageDsn")].isNull() && m_message_dsn_isValid;

    m_bounced_recipient_info_list_isValid = ::OpenAPI::fromJsonValue(m_bounced_recipient_info_list, json[QString("BouncedRecipientInfoList")]);
    m_bounced_recipient_info_list_isSet = !json[QString("BouncedRecipientInfoList")].isNull() && m_bounced_recipient_info_list_isValid;

    m_bounce_sender_arn_isValid = ::OpenAPI::fromJsonValue(m_bounce_sender_arn, json[QString("BounceSenderArn")]);
    m_bounce_sender_arn_isSet = !json[QString("BounceSenderArn")].isNull() && m_bounce_sender_arn_isValid;
}

QString OAISendBounceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendBounceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_original_message_id_isSet) {
        obj.insert(QString("OriginalMessageId"), ::OpenAPI::toJsonValue(m_original_message_id));
    }
    if (m_bounce_sender_isSet) {
        obj.insert(QString("BounceSender"), ::OpenAPI::toJsonValue(m_bounce_sender));
    }
    if (m_explanation_isSet) {
        obj.insert(QString("Explanation"), ::OpenAPI::toJsonValue(m_explanation));
    }
    if (m_message_dsn.isSet()) {
        obj.insert(QString("MessageDsn"), ::OpenAPI::toJsonValue(m_message_dsn));
    }
    if (m_bounced_recipient_info_list.isSet()) {
        obj.insert(QString("BouncedRecipientInfoList"), ::OpenAPI::toJsonValue(m_bounced_recipient_info_list));
    }
    if (m_bounce_sender_arn_isSet) {
        obj.insert(QString("BounceSenderArn"), ::OpenAPI::toJsonValue(m_bounce_sender_arn));
    }
    return obj;
}

QString OAISendBounceRequest::getOriginalMessageId() const {
    return m_original_message_id;
}
void OAISendBounceRequest::setOriginalMessageId(const QString &original_message_id) {
    m_original_message_id = original_message_id;
    m_original_message_id_isSet = true;
}

bool OAISendBounceRequest::is_original_message_id_Set() const{
    return m_original_message_id_isSet;
}

bool OAISendBounceRequest::is_original_message_id_Valid() const{
    return m_original_message_id_isValid;
}

QString OAISendBounceRequest::getBounceSender() const {
    return m_bounce_sender;
}
void OAISendBounceRequest::setBounceSender(const QString &bounce_sender) {
    m_bounce_sender = bounce_sender;
    m_bounce_sender_isSet = true;
}

bool OAISendBounceRequest::is_bounce_sender_Set() const{
    return m_bounce_sender_isSet;
}

bool OAISendBounceRequest::is_bounce_sender_Valid() const{
    return m_bounce_sender_isValid;
}

QString OAISendBounceRequest::getExplanation() const {
    return m_explanation;
}
void OAISendBounceRequest::setExplanation(const QString &explanation) {
    m_explanation = explanation;
    m_explanation_isSet = true;
}

bool OAISendBounceRequest::is_explanation_Set() const{
    return m_explanation_isSet;
}

bool OAISendBounceRequest::is_explanation_Valid() const{
    return m_explanation_isValid;
}

OAISendBounceRequest_MessageDsn OAISendBounceRequest::getMessageDsn() const {
    return m_message_dsn;
}
void OAISendBounceRequest::setMessageDsn(const OAISendBounceRequest_MessageDsn &message_dsn) {
    m_message_dsn = message_dsn;
    m_message_dsn_isSet = true;
}

bool OAISendBounceRequest::is_message_dsn_Set() const{
    return m_message_dsn_isSet;
}

bool OAISendBounceRequest::is_message_dsn_Valid() const{
    return m_message_dsn_isValid;
}

QList OAISendBounceRequest::getBouncedRecipientInfoList() const {
    return m_bounced_recipient_info_list;
}
void OAISendBounceRequest::setBouncedRecipientInfoList(const QList &bounced_recipient_info_list) {
    m_bounced_recipient_info_list = bounced_recipient_info_list;
    m_bounced_recipient_info_list_isSet = true;
}

bool OAISendBounceRequest::is_bounced_recipient_info_list_Set() const{
    return m_bounced_recipient_info_list_isSet;
}

bool OAISendBounceRequest::is_bounced_recipient_info_list_Valid() const{
    return m_bounced_recipient_info_list_isValid;
}

QString OAISendBounceRequest::getBounceSenderArn() const {
    return m_bounce_sender_arn;
}
void OAISendBounceRequest::setBounceSenderArn(const QString &bounce_sender_arn) {
    m_bounce_sender_arn = bounce_sender_arn;
    m_bounce_sender_arn_isSet = true;
}

bool OAISendBounceRequest::is_bounce_sender_arn_Set() const{
    return m_bounce_sender_arn_isSet;
}

bool OAISendBounceRequest::is_bounce_sender_arn_Valid() const{
    return m_bounce_sender_arn_isValid;
}

bool OAISendBounceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_original_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounce_sender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_explanation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_dsn.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounced_recipient_info_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounce_sender_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendBounceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_original_message_id_isValid && m_bounce_sender_isValid && m_bounced_recipient_info_list_isValid && true;
}

} // namespace OpenAPI
