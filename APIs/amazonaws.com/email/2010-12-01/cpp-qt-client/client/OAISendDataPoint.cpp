/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISendDataPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISendDataPoint::OAISendDataPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISendDataPoint::OAISendDataPoint() {
    this->initializeModel();
}

OAISendDataPoint::~OAISendDataPoint() {}

void OAISendDataPoint::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_delivery_attempts_isSet = false;
    m_delivery_attempts_isValid = false;

    m_bounces_isSet = false;
    m_bounces_isValid = false;

    m_complaints_isSet = false;
    m_complaints_isValid = false;

    m_rejects_isSet = false;
    m_rejects_isValid = false;
}

void OAISendDataPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISendDataPoint::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("Timestamp")]);
    m_timestamp_isSet = !json[QString("Timestamp")].isNull() && m_timestamp_isValid;

    m_delivery_attempts_isValid = ::OpenAPI::fromJsonValue(m_delivery_attempts, json[QString("DeliveryAttempts")]);
    m_delivery_attempts_isSet = !json[QString("DeliveryAttempts")].isNull() && m_delivery_attempts_isValid;

    m_bounces_isValid = ::OpenAPI::fromJsonValue(m_bounces, json[QString("Bounces")]);
    m_bounces_isSet = !json[QString("Bounces")].isNull() && m_bounces_isValid;

    m_complaints_isValid = ::OpenAPI::fromJsonValue(m_complaints, json[QString("Complaints")]);
    m_complaints_isSet = !json[QString("Complaints")].isNull() && m_complaints_isValid;

    m_rejects_isValid = ::OpenAPI::fromJsonValue(m_rejects, json[QString("Rejects")]);
    m_rejects_isSet = !json[QString("Rejects")].isNull() && m_rejects_isValid;
}

QString OAISendDataPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISendDataPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("Timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_delivery_attempts_isSet) {
        obj.insert(QString("DeliveryAttempts"), ::OpenAPI::toJsonValue(m_delivery_attempts));
    }
    if (m_bounces_isSet) {
        obj.insert(QString("Bounces"), ::OpenAPI::toJsonValue(m_bounces));
    }
    if (m_complaints_isSet) {
        obj.insert(QString("Complaints"), ::OpenAPI::toJsonValue(m_complaints));
    }
    if (m_rejects_isSet) {
        obj.insert(QString("Rejects"), ::OpenAPI::toJsonValue(m_rejects));
    }
    return obj;
}

QDateTime OAISendDataPoint::getTimestamp() const {
    return m_timestamp;
}
void OAISendDataPoint::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAISendDataPoint::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAISendDataPoint::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

qint32 OAISendDataPoint::getDeliveryAttempts() const {
    return m_delivery_attempts;
}
void OAISendDataPoint::setDeliveryAttempts(const qint32 &delivery_attempts) {
    m_delivery_attempts = delivery_attempts;
    m_delivery_attempts_isSet = true;
}

bool OAISendDataPoint::is_delivery_attempts_Set() const{
    return m_delivery_attempts_isSet;
}

bool OAISendDataPoint::is_delivery_attempts_Valid() const{
    return m_delivery_attempts_isValid;
}

qint32 OAISendDataPoint::getBounces() const {
    return m_bounces;
}
void OAISendDataPoint::setBounces(const qint32 &bounces) {
    m_bounces = bounces;
    m_bounces_isSet = true;
}

bool OAISendDataPoint::is_bounces_Set() const{
    return m_bounces_isSet;
}

bool OAISendDataPoint::is_bounces_Valid() const{
    return m_bounces_isValid;
}

qint32 OAISendDataPoint::getComplaints() const {
    return m_complaints;
}
void OAISendDataPoint::setComplaints(const qint32 &complaints) {
    m_complaints = complaints;
    m_complaints_isSet = true;
}

bool OAISendDataPoint::is_complaints_Set() const{
    return m_complaints_isSet;
}

bool OAISendDataPoint::is_complaints_Valid() const{
    return m_complaints_isValid;
}

qint32 OAISendDataPoint::getRejects() const {
    return m_rejects;
}
void OAISendDataPoint::setRejects(const qint32 &rejects) {
    m_rejects = rejects;
    m_rejects_isSet = true;
}

bool OAISendDataPoint::is_rejects_Set() const{
    return m_rejects_isSet;
}

bool OAISendDataPoint::is_rejects_Valid() const{
    return m_rejects_isValid;
}

bool OAISendDataPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounces_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complaints_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejects_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISendDataPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
