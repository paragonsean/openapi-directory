/**
 * Amazon Simple Email Service
 * <fullname>Amazon Simple Email Service</fullname> <p> This document contains reference information for the <a href=\"https://aws.amazon.com/ses/\">Amazon Simple Email Service</a> (Amazon SES) API, version 2010-12-01. This document is best used in conjunction with the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>. </p> <note> <p> For a list of Amazon SES endpoints to use in service requests, see <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/regions.html\">Regions and Amazon SES</a> in the <a href=\"https://docs.aws.amazon.com/ses/latest/DeveloperGuide/Welcome.html\">Amazon SES Developer Guide</a>.</p> </note>
 *
 * The version of the OpenAPI document: 2010-12-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBouncedRecipientInfo.h"
#include "OAIBulkEmailDestination.h"
#include "OAICloneReceiptRuleSetRequest.h"
#include "OAIConfigurationSetAttribute.h"
#include "OAICreateConfigurationSetEventDestinationRequest.h"
#include "OAICreateConfigurationSetRequest.h"
#include "OAICreateConfigurationSetTrackingOptionsRequest.h"
#include "OAICreateCustomVerificationEmailTemplateRequest.h"
#include "OAICreateReceiptFilterRequest.h"
#include "OAICreateReceiptRuleRequest.h"
#include "OAICreateReceiptRuleSetRequest.h"
#include "OAICreateTemplateRequest.h"
#include "OAIDeleteConfigurationSetEventDestinationRequest.h"
#include "OAIDeleteConfigurationSetRequest.h"
#include "OAIDeleteConfigurationSetTrackingOptionsRequest.h"
#include "OAIDeleteCustomVerificationEmailTemplateRequest.h"
#include "OAIDeleteIdentityPolicyRequest.h"
#include "OAIDeleteIdentityRequest.h"
#include "OAIDeleteReceiptFilterRequest.h"
#include "OAIDeleteReceiptRuleRequest.h"
#include "OAIDeleteReceiptRuleSetRequest.h"
#include "OAIDeleteTemplateRequest.h"
#include "OAIDeleteVerifiedEmailAddressRequest.h"
#include "OAIDescribeActiveReceiptRuleSetResponse.h"
#include "OAIDescribeConfigurationSetRequest.h"
#include "OAIDescribeConfigurationSetResponse.h"
#include "OAIDescribeReceiptRuleRequest.h"
#include "OAIDescribeReceiptRuleResponse.h"
#include "OAIDescribeReceiptRuleSetRequest.h"
#include "OAIDescribeReceiptRuleSetResponse.h"
#include "OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter.h"
#include "OAIGET_CreateConfigurationSetTrackingOptions_TrackingOptions_parameter.h"
#include "OAIGET_CreateConfigurationSet_ConfigurationSet_parameter.h"
#include "OAIGET_CreateReceiptFilter_Filter_parameter.h"
#include "OAIGET_CreateReceiptRule_Rule_parameter.h"
#include "OAIGET_CreateTemplate_Template_parameter.h"
#include "OAIGET_PutConfigurationSetDeliveryOptions_DeliveryOptions_parameter.h"
#include "OAIGET_SendBounce_MessageDsn_parameter.h"
#include "OAIGET_SendEmail_Destination_parameter.h"
#include "OAIGET_SendEmail_Message_parameter.h"
#include "OAIGET_SendRawEmail_RawMessage_parameter.h"
#include "OAIGetAccountSendingEnabledResponse.h"
#include "OAIGetCustomVerificationEmailTemplateRequest.h"
#include "OAIGetCustomVerificationEmailTemplateResponse.h"
#include "OAIGetIdentityDkimAttributesRequest.h"
#include "OAIGetIdentityDkimAttributesResponse.h"
#include "OAIGetIdentityMailFromDomainAttributesRequest.h"
#include "OAIGetIdentityMailFromDomainAttributesResponse.h"
#include "OAIGetIdentityNotificationAttributesRequest.h"
#include "OAIGetIdentityNotificationAttributesResponse.h"
#include "OAIGetIdentityPoliciesRequest.h"
#include "OAIGetIdentityPoliciesResponse.h"
#include "OAIGetIdentityVerificationAttributesRequest.h"
#include "OAIGetIdentityVerificationAttributesResponse.h"
#include "OAIGetSendQuotaResponse.h"
#include "OAIGetSendStatisticsResponse.h"
#include "OAIGetTemplateRequest.h"
#include "OAIGetTemplateResponse.h"
#include "OAIListConfigurationSetsRequest.h"
#include "OAIListConfigurationSetsResponse.h"
#include "OAIListCustomVerificationEmailTemplatesRequest.h"
#include "OAIListCustomVerificationEmailTemplatesResponse.h"
#include "OAIListIdentitiesRequest.h"
#include "OAIListIdentitiesResponse.h"
#include "OAIListIdentityPoliciesRequest.h"
#include "OAIListIdentityPoliciesResponse.h"
#include "OAIListReceiptFiltersResponse.h"
#include "OAIListReceiptRuleSetsRequest.h"
#include "OAIListReceiptRuleSetsResponse.h"
#include "OAIListTemplatesRequest.h"
#include "OAIListTemplatesResponse.h"
#include "OAIListVerifiedEmailAddressesResponse.h"
#include "OAIMessageTag.h"
#include "OAIObject.h"
#include "OAIPutConfigurationSetDeliveryOptionsRequest.h"
#include "OAIPutIdentityPolicyRequest.h"
#include "OAIReorderReceiptRuleSetRequest.h"
#include "OAISendBounceRequest.h"
#include "OAISendBounceResponse.h"
#include "OAISendBulkTemplatedEmailRequest.h"
#include "OAISendBulkTemplatedEmailResponse.h"
#include "OAISendCustomVerificationEmailRequest.h"
#include "OAISendCustomVerificationEmailResponse.h"
#include "OAISendEmailRequest.h"
#include "OAISendEmailResponse.h"
#include "OAISendRawEmailRequest.h"
#include "OAISendRawEmailResponse.h"
#include "OAISendTemplatedEmailRequest.h"
#include "OAISendTemplatedEmailResponse.h"
#include "OAISetActiveReceiptRuleSetRequest.h"
#include "OAISetIdentityDkimEnabledRequest.h"
#include "OAISetIdentityFeedbackForwardingEnabledRequest.h"
#include "OAISetIdentityHeadersInNotificationsEnabledRequest.h"
#include "OAISetIdentityMailFromDomainRequest.h"
#include "OAISetIdentityNotificationTopicRequest.h"
#include "OAISetReceiptRulePositionRequest.h"
#include "OAITestRenderTemplateRequest.h"
#include "OAITestRenderTemplateResponse.h"
#include "OAIUpdateAccountSendingEnabledRequest.h"
#include "OAIUpdateConfigurationSetEventDestinationRequest.h"
#include "OAIUpdateConfigurationSetReputationMetricsEnabledRequest.h"
#include "OAIUpdateConfigurationSetSendingEnabledRequest.h"
#include "OAIUpdateConfigurationSetTrackingOptionsRequest.h"
#include "OAIUpdateCustomVerificationEmailTemplateRequest.h"
#include "OAIUpdateReceiptRuleRequest.h"
#include "OAIUpdateTemplateRequest.h"
#include "OAIVerifyDomainDkimRequest.h"
#include "OAIVerifyDomainDkimResponse.h"
#include "OAIVerifyDomainIdentityRequest.h"
#include "OAIVerifyDomainIdentityResponse.h"
#include "OAIVerifyEmailAddressRequest.h"
#include "OAIVerifyEmailIdentityRequest.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  original_rule_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCloneReceiptRuleSet(const QString &rule_set_name, const QString &original_rule_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set OAIGET_CreateConfigurationSet_ConfigurationSet_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateConfigurationSet(const OAIGET_CreateConfigurationSet_ConfigurationSet_parameter &configuration_set, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  event_destination OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateConfigurationSetEventDestination(const QString &configuration_set_name, const OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter &event_destination, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  tracking_options OAIGET_CreateConfigurationSetTrackingOptions_TrackingOptions_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateConfigurationSetTrackingOptions(const QString &configuration_set_name, const OAIGET_CreateConfigurationSetTrackingOptions_TrackingOptions_parameter &tracking_options, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  from_email_address QString [required]
    * @param[in]  template_subject QString [required]
    * @param[in]  template_content QString [required]
    * @param[in]  success_redirection_url QString [required]
    * @param[in]  failure_redirection_url QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateCustomVerificationEmailTemplate(const QString &template_name, const QString &from_email_address, const QString &template_subject, const QString &template_content, const QString &success_redirection_url, const QString &failure_redirection_url, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter OAIGET_CreateReceiptFilter_Filter_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateReceiptFilter(const OAIGET_CreateReceiptFilter_Filter_parameter &filter, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  rule OAIGET_CreateReceiptRule_Rule_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  after QString [optional]
    */
    virtual void gETCreateReceiptRule(const QString &rule_set_name, const OAIGET_CreateReceiptRule_Rule_parameter &rule, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateReceiptRuleSet(const QString &rule_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_template OAIGET_CreateTemplate_Template_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETCreateTemplate(const OAIGET_CreateTemplate_Template_parameter &r_template, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteConfigurationSet(const QString &configuration_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  event_destination_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteConfigurationSetEventDestination(const QString &configuration_set_name, const QString &event_destination_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteConfigurationSetTrackingOptions(const QString &configuration_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteCustomVerificationEmailTemplate(const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteIdentity(const QString &identity, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteIdentityPolicy(const QString &identity, const QString &policy_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  filter_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteReceiptFilter(const QString &filter_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteReceiptRule(const QString &rule_set_name, const QString &rule_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteReceiptRuleSet(const QString &rule_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteTemplate(const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  email_address QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDeleteVerifiedEmailAddress(const QString &email_address, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeActiveReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  configuration_set_attribute_names QList<OAIConfigurationSetAttribute> [optional]
    */
    virtual void gETDescribeConfigurationSet(const QString &configuration_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIConfigurationSetAttribute>> &configuration_set_attribute_names = ::OpenAPI::OptionalParam<QList<OAIConfigurationSetAttribute>>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeReceiptRule(const QString &rule_set_name, const QString &rule_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETDescribeReceiptRuleSet(const QString &rule_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetAccountSendingEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetCustomVerificationEmailTemplate(const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identities QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetIdentityDkimAttributes(const QList<QString> &identities, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identities QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetIdentityMailFromDomainAttributes(const QList<QString> &identities, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identities QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetIdentityNotificationAttributes(const QList<QString> &identities, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  policy_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetIdentityPolicies(const QString &identity, const QList<QString> &policy_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identities QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetIdentityVerificationAttributes(const QList<QString> &identities, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetSendQuota(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetSendStatistics(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETGetTemplate(const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_items qint32 [optional]
    */
    virtual void gETListConfigurationSets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_items = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    */
    virtual void gETListCustomVerificationEmailTemplates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  identity_type QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_items qint32 [optional]
    */
    virtual void gETListIdentities(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &identity_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_items = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETListIdentityPolicies(const QString &identity, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETListReceiptFilters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    */
    virtual void gETListReceiptRuleSets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_items qint32 [optional]
    */
    virtual void gETListTemplates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_items = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETListVerifiedEmailAddresses(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  delivery_options OAIGET_PutConfigurationSetDeliveryOptions_DeliveryOptions_parameter [optional]
    */
    virtual void gETPutConfigurationSetDeliveryOptions(const QString &configuration_set_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_PutConfigurationSetDeliveryOptions_DeliveryOptions_parameter> &delivery_options = ::OpenAPI::OptionalParam<OAIGET_PutConfigurationSetDeliveryOptions_DeliveryOptions_parameter>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  policy_name QString [required]
    * @param[in]  policy QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETPutIdentityPolicy(const QString &identity, const QString &policy_name, const QString &policy, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  rule_names QList<QString> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETReorderReceiptRuleSet(const QString &rule_set_name, const QList<QString> &rule_names, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  original_message_id QString [required]
    * @param[in]  bounce_sender QString [required]
    * @param[in]  bounced_recipient_info_list QList<OAIBouncedRecipientInfo> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  explanation QString [optional]
    * @param[in]  message_dsn OAIGET_SendBounce_MessageDsn_parameter [optional]
    * @param[in]  bounce_sender_arn QString [optional]
    */
    virtual void gETSendBounce(const QString &original_message_id, const QString &bounce_sender, const QList<OAIBouncedRecipientInfo> &bounced_recipient_info_list, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &explanation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGET_SendBounce_MessageDsn_parameter> &message_dsn = ::OpenAPI::OptionalParam<OAIGET_SendBounce_MessageDsn_parameter>(), const ::OpenAPI::OptionalParam<QString> &bounce_sender_arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  r_template QString [required]
    * @param[in]  destinations QList<OAIBulkEmailDestination> [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source_arn QString [optional]
    * @param[in]  reply_to_addresses QList<QString> [optional]
    * @param[in]  return_path QString [optional]
    * @param[in]  return_path_arn QString [optional]
    * @param[in]  configuration_set_name QString [optional]
    * @param[in]  default_tags QList<OAIMessageTag> [optional]
    * @param[in]  template_arn QString [optional]
    * @param[in]  default_template_data QString [optional]
    */
    virtual void gETSendBulkTemplatedEmail(const QString &source, const QString &r_template, const QList<OAIBulkEmailDestination> &destinations, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &reply_to_addresses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &return_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &return_path_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &configuration_set_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageTag>> &default_tags = ::OpenAPI::OptionalParam<QList<OAIMessageTag>>(), const ::OpenAPI::OptionalParam<QString> &template_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_template_data = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  email_address QString [required]
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  configuration_set_name QString [optional]
    */
    virtual void gETSendCustomVerificationEmail(const QString &email_address, const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &configuration_set_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  destination OAIGET_SendEmail_Destination_parameter [required]
    * @param[in]  message OAIGET_SendEmail_Message_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  reply_to_addresses QList<QString> [optional]
    * @param[in]  return_path QString [optional]
    * @param[in]  source_arn QString [optional]
    * @param[in]  return_path_arn QString [optional]
    * @param[in]  tags QList<OAIMessageTag> [optional]
    * @param[in]  configuration_set_name QString [optional]
    */
    virtual void gETSendEmail(const QString &source, const OAIGET_SendEmail_Destination_parameter &destination, const OAIGET_SendEmail_Message_parameter &message, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &reply_to_addresses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &return_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &return_path_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageTag>> &tags = ::OpenAPI::OptionalParam<QList<OAIMessageTag>>(), const ::OpenAPI::OptionalParam<QString> &configuration_set_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  raw_message OAIGET_SendRawEmail_RawMessage_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  source QString [optional]
    * @param[in]  destinations QList<QString> [optional]
    * @param[in]  from_arn QString [optional]
    * @param[in]  source_arn QString [optional]
    * @param[in]  return_path_arn QString [optional]
    * @param[in]  tags QList<OAIMessageTag> [optional]
    * @param[in]  configuration_set_name QString [optional]
    */
    virtual void gETSendRawEmail(const OAIGET_SendRawEmail_RawMessage_parameter &raw_message, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &destinations = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &from_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &return_path_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageTag>> &tags = ::OpenAPI::OptionalParam<QList<OAIMessageTag>>(), const ::OpenAPI::OptionalParam<QString> &configuration_set_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  source QString [required]
    * @param[in]  destination OAIGET_SendEmail_Destination_parameter [required]
    * @param[in]  r_template QString [required]
    * @param[in]  template_data QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  reply_to_addresses QList<QString> [optional]
    * @param[in]  return_path QString [optional]
    * @param[in]  source_arn QString [optional]
    * @param[in]  return_path_arn QString [optional]
    * @param[in]  tags QList<OAIMessageTag> [optional]
    * @param[in]  configuration_set_name QString [optional]
    * @param[in]  template_arn QString [optional]
    */
    virtual void gETSendTemplatedEmail(const QString &source, const OAIGET_SendEmail_Destination_parameter &destination, const QString &r_template, const QString &template_data, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &reply_to_addresses = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &return_path = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &return_path_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<OAIMessageTag>> &tags = ::OpenAPI::OptionalParam<QList<OAIMessageTag>>(), const ::OpenAPI::OptionalParam<QString> &configuration_set_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_arn = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  rule_set_name QString [optional]
    */
    virtual void gETSetActiveReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &rule_set_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  dkim_enabled bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetIdentityDkimEnabled(const QString &identity, const bool &dkim_enabled, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  forwarding_enabled bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetIdentityFeedbackForwardingEnabled(const QString &identity, const bool &forwarding_enabled, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  notification_type QString [required]
    * @param[in]  enabled bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETSetIdentityHeadersInNotificationsEnabled(const QString &identity, const QString &notification_type, const bool &enabled, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  mail_from_domain QString [optional]
    * @param[in]  behavior_on_mx_failure QString [optional]
    */
    virtual void gETSetIdentityMailFromDomain(const QString &identity, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mail_from_domain = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &behavior_on_mx_failure = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  identity QString [required]
    * @param[in]  notification_type QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  sns_topic QString [optional]
    */
    virtual void gETSetIdentityNotificationTopic(const QString &identity, const QString &notification_type, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sns_topic = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  rule_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  after QString [optional]
    */
    virtual void gETSetReceiptRulePosition(const QString &rule_set_name, const QString &rule_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &after = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  template_data QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETTestRenderTemplate(const QString &template_name, const QString &template_data, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  enabled bool [optional]
    */
    virtual void gETUpdateAccountSendingEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  event_destination OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateConfigurationSetEventDestination(const QString &configuration_set_name, const OAIGET_CreateConfigurationSetEventDestination_EventDestination_parameter &event_destination, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  enabled bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateConfigurationSetReputationMetricsEnabled(const QString &configuration_set_name, const bool &enabled, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  enabled bool [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateConfigurationSetSendingEnabled(const QString &configuration_set_name, const bool &enabled, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  configuration_set_name QString [required]
    * @param[in]  tracking_options OAIGET_CreateConfigurationSetTrackingOptions_TrackingOptions_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateConfigurationSetTrackingOptions(const QString &configuration_set_name, const OAIGET_CreateConfigurationSetTrackingOptions_TrackingOptions_parameter &tracking_options, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  template_name QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  from_email_address QString [optional]
    * @param[in]  template_subject QString [optional]
    * @param[in]  template_content QString [optional]
    * @param[in]  success_redirection_url QString [optional]
    * @param[in]  failure_redirection_url QString [optional]
    */
    virtual void gETUpdateCustomVerificationEmailTemplate(const QString &template_name, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &from_email_address = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &template_content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &success_redirection_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &failure_redirection_url = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  rule_set_name QString [required]
    * @param[in]  rule OAIGET_CreateReceiptRule_Rule_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateReceiptRule(const QString &rule_set_name, const OAIGET_CreateReceiptRule_Rule_parameter &rule, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  r_template OAIGET_CreateTemplate_Template_parameter [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETUpdateTemplate(const OAIGET_CreateTemplate_Template_parameter &r_template, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETVerifyDomainDkim(const QString &domain, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  domain QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETVerifyDomainIdentity(const QString &domain, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  email_address QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETVerifyEmailAddress(const QString &email_address, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  email_address QString [required]
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void gETVerifyEmailIdentity(const QString &email_address, const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_clone_receipt_rule_set_request OAICloneReceiptRuleSetRequest [optional]
    */
    virtual void pOSTCloneReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICloneReceiptRuleSetRequest> &oai_clone_receipt_rule_set_request = ::OpenAPI::OptionalParam<OAICloneReceiptRuleSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_configuration_set_request OAICreateConfigurationSetRequest [optional]
    */
    virtual void pOSTCreateConfigurationSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateConfigurationSetRequest> &oai_create_configuration_set_request = ::OpenAPI::OptionalParam<OAICreateConfigurationSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_configuration_set_event_destination_request OAICreateConfigurationSetEventDestinationRequest [optional]
    */
    virtual void pOSTCreateConfigurationSetEventDestination(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateConfigurationSetEventDestinationRequest> &oai_create_configuration_set_event_destination_request = ::OpenAPI::OptionalParam<OAICreateConfigurationSetEventDestinationRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_configuration_set_tracking_options_request OAICreateConfigurationSetTrackingOptionsRequest [optional]
    */
    virtual void pOSTCreateConfigurationSetTrackingOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateConfigurationSetTrackingOptionsRequest> &oai_create_configuration_set_tracking_options_request = ::OpenAPI::OptionalParam<OAICreateConfigurationSetTrackingOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_custom_verification_email_template_request OAICreateCustomVerificationEmailTemplateRequest [optional]
    */
    virtual void pOSTCreateCustomVerificationEmailTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateCustomVerificationEmailTemplateRequest> &oai_create_custom_verification_email_template_request = ::OpenAPI::OptionalParam<OAICreateCustomVerificationEmailTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_receipt_filter_request OAICreateReceiptFilterRequest [optional]
    */
    virtual void pOSTCreateReceiptFilter(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateReceiptFilterRequest> &oai_create_receipt_filter_request = ::OpenAPI::OptionalParam<OAICreateReceiptFilterRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_receipt_rule_request OAICreateReceiptRuleRequest [optional]
    */
    virtual void pOSTCreateReceiptRule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateReceiptRuleRequest> &oai_create_receipt_rule_request = ::OpenAPI::OptionalParam<OAICreateReceiptRuleRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_receipt_rule_set_request OAICreateReceiptRuleSetRequest [optional]
    */
    virtual void pOSTCreateReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateReceiptRuleSetRequest> &oai_create_receipt_rule_set_request = ::OpenAPI::OptionalParam<OAICreateReceiptRuleSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_create_template_request OAICreateTemplateRequest [optional]
    */
    virtual void pOSTCreateTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateTemplateRequest> &oai_create_template_request = ::OpenAPI::OptionalParam<OAICreateTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_configuration_set_request OAIDeleteConfigurationSetRequest [optional]
    */
    virtual void pOSTDeleteConfigurationSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteConfigurationSetRequest> &oai_delete_configuration_set_request = ::OpenAPI::OptionalParam<OAIDeleteConfigurationSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_configuration_set_event_destination_request OAIDeleteConfigurationSetEventDestinationRequest [optional]
    */
    virtual void pOSTDeleteConfigurationSetEventDestination(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteConfigurationSetEventDestinationRequest> &oai_delete_configuration_set_event_destination_request = ::OpenAPI::OptionalParam<OAIDeleteConfigurationSetEventDestinationRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_configuration_set_tracking_options_request OAIDeleteConfigurationSetTrackingOptionsRequest [optional]
    */
    virtual void pOSTDeleteConfigurationSetTrackingOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteConfigurationSetTrackingOptionsRequest> &oai_delete_configuration_set_tracking_options_request = ::OpenAPI::OptionalParam<OAIDeleteConfigurationSetTrackingOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_custom_verification_email_template_request OAIDeleteCustomVerificationEmailTemplateRequest [optional]
    */
    virtual void pOSTDeleteCustomVerificationEmailTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteCustomVerificationEmailTemplateRequest> &oai_delete_custom_verification_email_template_request = ::OpenAPI::OptionalParam<OAIDeleteCustomVerificationEmailTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_identity_request OAIDeleteIdentityRequest [optional]
    */
    virtual void pOSTDeleteIdentity(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteIdentityRequest> &oai_delete_identity_request = ::OpenAPI::OptionalParam<OAIDeleteIdentityRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_identity_policy_request OAIDeleteIdentityPolicyRequest [optional]
    */
    virtual void pOSTDeleteIdentityPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteIdentityPolicyRequest> &oai_delete_identity_policy_request = ::OpenAPI::OptionalParam<OAIDeleteIdentityPolicyRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_receipt_filter_request OAIDeleteReceiptFilterRequest [optional]
    */
    virtual void pOSTDeleteReceiptFilter(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteReceiptFilterRequest> &oai_delete_receipt_filter_request = ::OpenAPI::OptionalParam<OAIDeleteReceiptFilterRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_receipt_rule_request OAIDeleteReceiptRuleRequest [optional]
    */
    virtual void pOSTDeleteReceiptRule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteReceiptRuleRequest> &oai_delete_receipt_rule_request = ::OpenAPI::OptionalParam<OAIDeleteReceiptRuleRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_receipt_rule_set_request OAIDeleteReceiptRuleSetRequest [optional]
    */
    virtual void pOSTDeleteReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteReceiptRuleSetRequest> &oai_delete_receipt_rule_set_request = ::OpenAPI::OptionalParam<OAIDeleteReceiptRuleSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_template_request OAIDeleteTemplateRequest [optional]
    */
    virtual void pOSTDeleteTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteTemplateRequest> &oai_delete_template_request = ::OpenAPI::OptionalParam<OAIDeleteTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_delete_verified_email_address_request OAIDeleteVerifiedEmailAddressRequest [optional]
    */
    virtual void pOSTDeleteVerifiedEmailAddress(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDeleteVerifiedEmailAddressRequest> &oai_delete_verified_email_address_request = ::OpenAPI::OptionalParam<OAIDeleteVerifiedEmailAddressRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void pOSTDescribeActiveReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_configuration_set_request OAIDescribeConfigurationSetRequest [optional]
    */
    virtual void pOSTDescribeConfigurationSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeConfigurationSetRequest> &oai_describe_configuration_set_request = ::OpenAPI::OptionalParam<OAIDescribeConfigurationSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_receipt_rule_request OAIDescribeReceiptRuleRequest [optional]
    */
    virtual void pOSTDescribeReceiptRule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeReceiptRuleRequest> &oai_describe_receipt_rule_request = ::OpenAPI::OptionalParam<OAIDescribeReceiptRuleRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_describe_receipt_rule_set_request OAIDescribeReceiptRuleSetRequest [optional]
    */
    virtual void pOSTDescribeReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDescribeReceiptRuleSetRequest> &oai_describe_receipt_rule_set_request = ::OpenAPI::OptionalParam<OAIDescribeReceiptRuleSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTGetAccountSendingEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_custom_verification_email_template_request OAIGetCustomVerificationEmailTemplateRequest [optional]
    */
    virtual void pOSTGetCustomVerificationEmailTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetCustomVerificationEmailTemplateRequest> &oai_get_custom_verification_email_template_request = ::OpenAPI::OptionalParam<OAIGetCustomVerificationEmailTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_identity_dkim_attributes_request OAIGetIdentityDkimAttributesRequest [optional]
    */
    virtual void pOSTGetIdentityDkimAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetIdentityDkimAttributesRequest> &oai_get_identity_dkim_attributes_request = ::OpenAPI::OptionalParam<OAIGetIdentityDkimAttributesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_identity_mail_from_domain_attributes_request OAIGetIdentityMailFromDomainAttributesRequest [optional]
    */
    virtual void pOSTGetIdentityMailFromDomainAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetIdentityMailFromDomainAttributesRequest> &oai_get_identity_mail_from_domain_attributes_request = ::OpenAPI::OptionalParam<OAIGetIdentityMailFromDomainAttributesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_identity_notification_attributes_request OAIGetIdentityNotificationAttributesRequest [optional]
    */
    virtual void pOSTGetIdentityNotificationAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetIdentityNotificationAttributesRequest> &oai_get_identity_notification_attributes_request = ::OpenAPI::OptionalParam<OAIGetIdentityNotificationAttributesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_identity_policies_request OAIGetIdentityPoliciesRequest [optional]
    */
    virtual void pOSTGetIdentityPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetIdentityPoliciesRequest> &oai_get_identity_policies_request = ::OpenAPI::OptionalParam<OAIGetIdentityPoliciesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_identity_verification_attributes_request OAIGetIdentityVerificationAttributesRequest [optional]
    */
    virtual void pOSTGetIdentityVerificationAttributes(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetIdentityVerificationAttributesRequest> &oai_get_identity_verification_attributes_request = ::OpenAPI::OptionalParam<OAIGetIdentityVerificationAttributesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTGetSendQuota(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTGetSendStatistics(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_get_template_request OAIGetTemplateRequest [optional]
    */
    virtual void pOSTGetTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGetTemplateRequest> &oai_get_template_request = ::OpenAPI::OptionalParam<OAIGetTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_list_configuration_sets_request OAIListConfigurationSetsRequest [optional]
    */
    virtual void pOSTListConfigurationSets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListConfigurationSetsRequest> &oai_list_configuration_sets_request = ::OpenAPI::OptionalParam<OAIListConfigurationSetsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_custom_verification_email_templates_request OAIListCustomVerificationEmailTemplatesRequest [optional]
    */
    virtual void pOSTListCustomVerificationEmailTemplates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListCustomVerificationEmailTemplatesRequest> &oai_list_custom_verification_email_templates_request = ::OpenAPI::OptionalParam<OAIListCustomVerificationEmailTemplatesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_items QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  oai_list_identities_request OAIListIdentitiesRequest [optional]
    */
    virtual void pOSTListIdentities(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_items = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListIdentitiesRequest> &oai_list_identities_request = ::OpenAPI::OptionalParam<OAIListIdentitiesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_list_identity_policies_request OAIListIdentityPoliciesRequest [optional]
    */
    virtual void pOSTListIdentityPolicies(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListIdentityPoliciesRequest> &oai_list_identity_policies_request = ::OpenAPI::OptionalParam<OAIListIdentityPoliciesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void pOSTListReceiptFilters(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_list_receipt_rule_sets_request OAIListReceiptRuleSetsRequest [optional]
    */
    virtual void pOSTListReceiptRuleSets(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListReceiptRuleSetsRequest> &oai_list_receipt_rule_sets_request = ::OpenAPI::OptionalParam<OAIListReceiptRuleSetsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_list_templates_request OAIListTemplatesRequest [optional]
    */
    virtual void pOSTListTemplates(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIListTemplatesRequest> &oai_list_templates_request = ::OpenAPI::OptionalParam<OAIListTemplatesRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void pOSTListVerifiedEmailAddresses(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_configuration_set_delivery_options_request OAIPutConfigurationSetDeliveryOptionsRequest [optional]
    */
    virtual void pOSTPutConfigurationSetDeliveryOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutConfigurationSetDeliveryOptionsRequest> &oai_put_configuration_set_delivery_options_request = ::OpenAPI::OptionalParam<OAIPutConfigurationSetDeliveryOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_put_identity_policy_request OAIPutIdentityPolicyRequest [optional]
    */
    virtual void pOSTPutIdentityPolicy(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPutIdentityPolicyRequest> &oai_put_identity_policy_request = ::OpenAPI::OptionalParam<OAIPutIdentityPolicyRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_reorder_receipt_rule_set_request OAIReorderReceiptRuleSetRequest [optional]
    */
    virtual void pOSTReorderReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIReorderReceiptRuleSetRequest> &oai_reorder_receipt_rule_set_request = ::OpenAPI::OptionalParam<OAIReorderReceiptRuleSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_send_bounce_request OAISendBounceRequest [optional]
    */
    virtual void pOSTSendBounce(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendBounceRequest> &oai_send_bounce_request = ::OpenAPI::OptionalParam<OAISendBounceRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_send_bulk_templated_email_request OAISendBulkTemplatedEmailRequest [optional]
    */
    virtual void pOSTSendBulkTemplatedEmail(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendBulkTemplatedEmailRequest> &oai_send_bulk_templated_email_request = ::OpenAPI::OptionalParam<OAISendBulkTemplatedEmailRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_send_custom_verification_email_request OAISendCustomVerificationEmailRequest [optional]
    */
    virtual void pOSTSendCustomVerificationEmail(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendCustomVerificationEmailRequest> &oai_send_custom_verification_email_request = ::OpenAPI::OptionalParam<OAISendCustomVerificationEmailRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_send_email_request OAISendEmailRequest [optional]
    */
    virtual void pOSTSendEmail(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendEmailRequest> &oai_send_email_request = ::OpenAPI::OptionalParam<OAISendEmailRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_send_raw_email_request OAISendRawEmailRequest [optional]
    */
    virtual void pOSTSendRawEmail(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendRawEmailRequest> &oai_send_raw_email_request = ::OpenAPI::OptionalParam<OAISendRawEmailRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_send_templated_email_request OAISendTemplatedEmailRequest [optional]
    */
    virtual void pOSTSendTemplatedEmail(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISendTemplatedEmailRequest> &oai_send_templated_email_request = ::OpenAPI::OptionalParam<OAISendTemplatedEmailRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_active_receipt_rule_set_request OAISetActiveReceiptRuleSetRequest [optional]
    */
    virtual void pOSTSetActiveReceiptRuleSet(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetActiveReceiptRuleSetRequest> &oai_set_active_receipt_rule_set_request = ::OpenAPI::OptionalParam<OAISetActiveReceiptRuleSetRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_identity_dkim_enabled_request OAISetIdentityDkimEnabledRequest [optional]
    */
    virtual void pOSTSetIdentityDkimEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIdentityDkimEnabledRequest> &oai_set_identity_dkim_enabled_request = ::OpenAPI::OptionalParam<OAISetIdentityDkimEnabledRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_identity_feedback_forwarding_enabled_request OAISetIdentityFeedbackForwardingEnabledRequest [optional]
    */
    virtual void pOSTSetIdentityFeedbackForwardingEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIdentityFeedbackForwardingEnabledRequest> &oai_set_identity_feedback_forwarding_enabled_request = ::OpenAPI::OptionalParam<OAISetIdentityFeedbackForwardingEnabledRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_identity_headers_in_notifications_enabled_request OAISetIdentityHeadersInNotificationsEnabledRequest [optional]
    */
    virtual void pOSTSetIdentityHeadersInNotificationsEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIdentityHeadersInNotificationsEnabledRequest> &oai_set_identity_headers_in_notifications_enabled_request = ::OpenAPI::OptionalParam<OAISetIdentityHeadersInNotificationsEnabledRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_identity_mail_from_domain_request OAISetIdentityMailFromDomainRequest [optional]
    */
    virtual void pOSTSetIdentityMailFromDomain(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIdentityMailFromDomainRequest> &oai_set_identity_mail_from_domain_request = ::OpenAPI::OptionalParam<OAISetIdentityMailFromDomainRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_identity_notification_topic_request OAISetIdentityNotificationTopicRequest [optional]
    */
    virtual void pOSTSetIdentityNotificationTopic(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetIdentityNotificationTopicRequest> &oai_set_identity_notification_topic_request = ::OpenAPI::OptionalParam<OAISetIdentityNotificationTopicRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_set_receipt_rule_position_request OAISetReceiptRulePositionRequest [optional]
    */
    virtual void pOSTSetReceiptRulePosition(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISetReceiptRulePositionRequest> &oai_set_receipt_rule_position_request = ::OpenAPI::OptionalParam<OAISetReceiptRulePositionRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_test_render_template_request OAITestRenderTemplateRequest [optional]
    */
    virtual void pOSTTestRenderTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAITestRenderTemplateRequest> &oai_test_render_template_request = ::OpenAPI::OptionalParam<OAITestRenderTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_account_sending_enabled_request OAIUpdateAccountSendingEnabledRequest [optional]
    */
    virtual void pOSTUpdateAccountSendingEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateAccountSendingEnabledRequest> &oai_update_account_sending_enabled_request = ::OpenAPI::OptionalParam<OAIUpdateAccountSendingEnabledRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_configuration_set_event_destination_request OAIUpdateConfigurationSetEventDestinationRequest [optional]
    */
    virtual void pOSTUpdateConfigurationSetEventDestination(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateConfigurationSetEventDestinationRequest> &oai_update_configuration_set_event_destination_request = ::OpenAPI::OptionalParam<OAIUpdateConfigurationSetEventDestinationRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_configuration_set_reputation_metrics_enabled_request OAIUpdateConfigurationSetReputationMetricsEnabledRequest [optional]
    */
    virtual void pOSTUpdateConfigurationSetReputationMetricsEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateConfigurationSetReputationMetricsEnabledRequest> &oai_update_configuration_set_reputation_metrics_enabled_request = ::OpenAPI::OptionalParam<OAIUpdateConfigurationSetReputationMetricsEnabledRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_configuration_set_sending_enabled_request OAIUpdateConfigurationSetSendingEnabledRequest [optional]
    */
    virtual void pOSTUpdateConfigurationSetSendingEnabled(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateConfigurationSetSendingEnabledRequest> &oai_update_configuration_set_sending_enabled_request = ::OpenAPI::OptionalParam<OAIUpdateConfigurationSetSendingEnabledRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_configuration_set_tracking_options_request OAIUpdateConfigurationSetTrackingOptionsRequest [optional]
    */
    virtual void pOSTUpdateConfigurationSetTrackingOptions(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateConfigurationSetTrackingOptionsRequest> &oai_update_configuration_set_tracking_options_request = ::OpenAPI::OptionalParam<OAIUpdateConfigurationSetTrackingOptionsRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_custom_verification_email_template_request OAIUpdateCustomVerificationEmailTemplateRequest [optional]
    */
    virtual void pOSTUpdateCustomVerificationEmailTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateCustomVerificationEmailTemplateRequest> &oai_update_custom_verification_email_template_request = ::OpenAPI::OptionalParam<OAIUpdateCustomVerificationEmailTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_receipt_rule_request OAIUpdateReceiptRuleRequest [optional]
    */
    virtual void pOSTUpdateReceiptRule(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateReceiptRuleRequest> &oai_update_receipt_rule_request = ::OpenAPI::OptionalParam<OAIUpdateReceiptRuleRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_update_template_request OAIUpdateTemplateRequest [optional]
    */
    virtual void pOSTUpdateTemplate(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIUpdateTemplateRequest> &oai_update_template_request = ::OpenAPI::OptionalParam<OAIUpdateTemplateRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_verify_domain_dkim_request OAIVerifyDomainDkimRequest [optional]
    */
    virtual void pOSTVerifyDomainDkim(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVerifyDomainDkimRequest> &oai_verify_domain_dkim_request = ::OpenAPI::OptionalParam<OAIVerifyDomainDkimRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_verify_domain_identity_request OAIVerifyDomainIdentityRequest [optional]
    */
    virtual void pOSTVerifyDomainIdentity(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVerifyDomainIdentityRequest> &oai_verify_domain_identity_request = ::OpenAPI::OptionalParam<OAIVerifyDomainIdentityRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_verify_email_address_request OAIVerifyEmailAddressRequest [optional]
    */
    virtual void pOSTVerifyEmailAddress(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVerifyEmailAddressRequest> &oai_verify_email_address_request = ::OpenAPI::OptionalParam<OAIVerifyEmailAddressRequest>());

    /**
    * @param[in]  action QString [required]
    * @param[in]  version QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  oai_verify_email_identity_request OAIVerifyEmailIdentityRequest [optional]
    */
    virtual void pOSTVerifyEmailIdentity(const QString &action, const QString &version, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIVerifyEmailIdentityRequest> &oai_verify_email_identity_request = ::OpenAPI::OptionalParam<OAIVerifyEmailIdentityRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void gETCloneReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void gETCreateConfigurationSetCallback(OAIHttpRequestWorker *worker);
    void gETCreateConfigurationSetEventDestinationCallback(OAIHttpRequestWorker *worker);
    void gETCreateConfigurationSetTrackingOptionsCallback(OAIHttpRequestWorker *worker);
    void gETCreateCustomVerificationEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void gETCreateReceiptFilterCallback(OAIHttpRequestWorker *worker);
    void gETCreateReceiptRuleCallback(OAIHttpRequestWorker *worker);
    void gETCreateReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void gETCreateTemplateCallback(OAIHttpRequestWorker *worker);
    void gETDeleteConfigurationSetCallback(OAIHttpRequestWorker *worker);
    void gETDeleteConfigurationSetEventDestinationCallback(OAIHttpRequestWorker *worker);
    void gETDeleteConfigurationSetTrackingOptionsCallback(OAIHttpRequestWorker *worker);
    void gETDeleteCustomVerificationEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void gETDeleteIdentityCallback(OAIHttpRequestWorker *worker);
    void gETDeleteIdentityPolicyCallback(OAIHttpRequestWorker *worker);
    void gETDeleteReceiptFilterCallback(OAIHttpRequestWorker *worker);
    void gETDeleteReceiptRuleCallback(OAIHttpRequestWorker *worker);
    void gETDeleteReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void gETDeleteTemplateCallback(OAIHttpRequestWorker *worker);
    void gETDeleteVerifiedEmailAddressCallback(OAIHttpRequestWorker *worker);
    void gETDescribeActiveReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void gETDescribeConfigurationSetCallback(OAIHttpRequestWorker *worker);
    void gETDescribeReceiptRuleCallback(OAIHttpRequestWorker *worker);
    void gETDescribeReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void gETGetAccountSendingEnabledCallback(OAIHttpRequestWorker *worker);
    void gETGetCustomVerificationEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void gETGetIdentityDkimAttributesCallback(OAIHttpRequestWorker *worker);
    void gETGetIdentityMailFromDomainAttributesCallback(OAIHttpRequestWorker *worker);
    void gETGetIdentityNotificationAttributesCallback(OAIHttpRequestWorker *worker);
    void gETGetIdentityPoliciesCallback(OAIHttpRequestWorker *worker);
    void gETGetIdentityVerificationAttributesCallback(OAIHttpRequestWorker *worker);
    void gETGetSendQuotaCallback(OAIHttpRequestWorker *worker);
    void gETGetSendStatisticsCallback(OAIHttpRequestWorker *worker);
    void gETGetTemplateCallback(OAIHttpRequestWorker *worker);
    void gETListConfigurationSetsCallback(OAIHttpRequestWorker *worker);
    void gETListCustomVerificationEmailTemplatesCallback(OAIHttpRequestWorker *worker);
    void gETListIdentitiesCallback(OAIHttpRequestWorker *worker);
    void gETListIdentityPoliciesCallback(OAIHttpRequestWorker *worker);
    void gETListReceiptFiltersCallback(OAIHttpRequestWorker *worker);
    void gETListReceiptRuleSetsCallback(OAIHttpRequestWorker *worker);
    void gETListTemplatesCallback(OAIHttpRequestWorker *worker);
    void gETListVerifiedEmailAddressesCallback(OAIHttpRequestWorker *worker);
    void gETPutConfigurationSetDeliveryOptionsCallback(OAIHttpRequestWorker *worker);
    void gETPutIdentityPolicyCallback(OAIHttpRequestWorker *worker);
    void gETReorderReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void gETSendBounceCallback(OAIHttpRequestWorker *worker);
    void gETSendBulkTemplatedEmailCallback(OAIHttpRequestWorker *worker);
    void gETSendCustomVerificationEmailCallback(OAIHttpRequestWorker *worker);
    void gETSendEmailCallback(OAIHttpRequestWorker *worker);
    void gETSendRawEmailCallback(OAIHttpRequestWorker *worker);
    void gETSendTemplatedEmailCallback(OAIHttpRequestWorker *worker);
    void gETSetActiveReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void gETSetIdentityDkimEnabledCallback(OAIHttpRequestWorker *worker);
    void gETSetIdentityFeedbackForwardingEnabledCallback(OAIHttpRequestWorker *worker);
    void gETSetIdentityHeadersInNotificationsEnabledCallback(OAIHttpRequestWorker *worker);
    void gETSetIdentityMailFromDomainCallback(OAIHttpRequestWorker *worker);
    void gETSetIdentityNotificationTopicCallback(OAIHttpRequestWorker *worker);
    void gETSetReceiptRulePositionCallback(OAIHttpRequestWorker *worker);
    void gETTestRenderTemplateCallback(OAIHttpRequestWorker *worker);
    void gETUpdateAccountSendingEnabledCallback(OAIHttpRequestWorker *worker);
    void gETUpdateConfigurationSetEventDestinationCallback(OAIHttpRequestWorker *worker);
    void gETUpdateConfigurationSetReputationMetricsEnabledCallback(OAIHttpRequestWorker *worker);
    void gETUpdateConfigurationSetSendingEnabledCallback(OAIHttpRequestWorker *worker);
    void gETUpdateConfigurationSetTrackingOptionsCallback(OAIHttpRequestWorker *worker);
    void gETUpdateCustomVerificationEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void gETUpdateReceiptRuleCallback(OAIHttpRequestWorker *worker);
    void gETUpdateTemplateCallback(OAIHttpRequestWorker *worker);
    void gETVerifyDomainDkimCallback(OAIHttpRequestWorker *worker);
    void gETVerifyDomainIdentityCallback(OAIHttpRequestWorker *worker);
    void gETVerifyEmailAddressCallback(OAIHttpRequestWorker *worker);
    void gETVerifyEmailIdentityCallback(OAIHttpRequestWorker *worker);
    void pOSTCloneReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateConfigurationSetCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateConfigurationSetEventDestinationCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateConfigurationSetTrackingOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateCustomVerificationEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateReceiptFilterCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateReceiptRuleCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void pOSTCreateTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteConfigurationSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteConfigurationSetEventDestinationCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteConfigurationSetTrackingOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteCustomVerificationEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteIdentityCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteIdentityPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteReceiptFilterCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteReceiptRuleCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTDeleteVerifiedEmailAddressCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeActiveReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeConfigurationSetCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeReceiptRuleCallback(OAIHttpRequestWorker *worker);
    void pOSTDescribeReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void pOSTGetAccountSendingEnabledCallback(OAIHttpRequestWorker *worker);
    void pOSTGetCustomVerificationEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTGetIdentityDkimAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTGetIdentityMailFromDomainAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTGetIdentityNotificationAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTGetIdentityPoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTGetIdentityVerificationAttributesCallback(OAIHttpRequestWorker *worker);
    void pOSTGetSendQuotaCallback(OAIHttpRequestWorker *worker);
    void pOSTGetSendStatisticsCallback(OAIHttpRequestWorker *worker);
    void pOSTGetTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTListConfigurationSetsCallback(OAIHttpRequestWorker *worker);
    void pOSTListCustomVerificationEmailTemplatesCallback(OAIHttpRequestWorker *worker);
    void pOSTListIdentitiesCallback(OAIHttpRequestWorker *worker);
    void pOSTListIdentityPoliciesCallback(OAIHttpRequestWorker *worker);
    void pOSTListReceiptFiltersCallback(OAIHttpRequestWorker *worker);
    void pOSTListReceiptRuleSetsCallback(OAIHttpRequestWorker *worker);
    void pOSTListTemplatesCallback(OAIHttpRequestWorker *worker);
    void pOSTListVerifiedEmailAddressesCallback(OAIHttpRequestWorker *worker);
    void pOSTPutConfigurationSetDeliveryOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTPutIdentityPolicyCallback(OAIHttpRequestWorker *worker);
    void pOSTReorderReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void pOSTSendBounceCallback(OAIHttpRequestWorker *worker);
    void pOSTSendBulkTemplatedEmailCallback(OAIHttpRequestWorker *worker);
    void pOSTSendCustomVerificationEmailCallback(OAIHttpRequestWorker *worker);
    void pOSTSendEmailCallback(OAIHttpRequestWorker *worker);
    void pOSTSendRawEmailCallback(OAIHttpRequestWorker *worker);
    void pOSTSendTemplatedEmailCallback(OAIHttpRequestWorker *worker);
    void pOSTSetActiveReceiptRuleSetCallback(OAIHttpRequestWorker *worker);
    void pOSTSetIdentityDkimEnabledCallback(OAIHttpRequestWorker *worker);
    void pOSTSetIdentityFeedbackForwardingEnabledCallback(OAIHttpRequestWorker *worker);
    void pOSTSetIdentityHeadersInNotificationsEnabledCallback(OAIHttpRequestWorker *worker);
    void pOSTSetIdentityMailFromDomainCallback(OAIHttpRequestWorker *worker);
    void pOSTSetIdentityNotificationTopicCallback(OAIHttpRequestWorker *worker);
    void pOSTSetReceiptRulePositionCallback(OAIHttpRequestWorker *worker);
    void pOSTTestRenderTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateAccountSendingEnabledCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateConfigurationSetEventDestinationCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateConfigurationSetReputationMetricsEnabledCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateConfigurationSetSendingEnabledCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateConfigurationSetTrackingOptionsCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateCustomVerificationEmailTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateReceiptRuleCallback(OAIHttpRequestWorker *worker);
    void pOSTUpdateTemplateCallback(OAIHttpRequestWorker *worker);
    void pOSTVerifyDomainDkimCallback(OAIHttpRequestWorker *worker);
    void pOSTVerifyDomainIdentityCallback(OAIHttpRequestWorker *worker);
    void pOSTVerifyEmailAddressCallback(OAIHttpRequestWorker *worker);
    void pOSTVerifyEmailIdentityCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void gETCloneReceiptRuleSetSignal(OAIObject summary);
    void gETCreateConfigurationSetSignal(OAIObject summary);
    void gETCreateConfigurationSetEventDestinationSignal(OAIObject summary);
    void gETCreateConfigurationSetTrackingOptionsSignal(OAIObject summary);
    void gETCreateCustomVerificationEmailTemplateSignal();
    void gETCreateReceiptFilterSignal(OAIObject summary);
    void gETCreateReceiptRuleSignal(OAIObject summary);
    void gETCreateReceiptRuleSetSignal(OAIObject summary);
    void gETCreateTemplateSignal(OAIObject summary);
    void gETDeleteConfigurationSetSignal(OAIObject summary);
    void gETDeleteConfigurationSetEventDestinationSignal(OAIObject summary);
    void gETDeleteConfigurationSetTrackingOptionsSignal(OAIObject summary);
    void gETDeleteCustomVerificationEmailTemplateSignal();
    void gETDeleteIdentitySignal(OAIObject summary);
    void gETDeleteIdentityPolicySignal(OAIObject summary);
    void gETDeleteReceiptFilterSignal(OAIObject summary);
    void gETDeleteReceiptRuleSignal(OAIObject summary);
    void gETDeleteReceiptRuleSetSignal(OAIObject summary);
    void gETDeleteTemplateSignal(OAIObject summary);
    void gETDeleteVerifiedEmailAddressSignal();
    void gETDescribeActiveReceiptRuleSetSignal(OAIDescribeActiveReceiptRuleSetResponse summary);
    void gETDescribeConfigurationSetSignal(OAIDescribeConfigurationSetResponse summary);
    void gETDescribeReceiptRuleSignal(OAIDescribeReceiptRuleResponse summary);
    void gETDescribeReceiptRuleSetSignal(OAIDescribeReceiptRuleSetResponse summary);
    void gETGetAccountSendingEnabledSignal(OAIGetAccountSendingEnabledResponse summary);
    void gETGetCustomVerificationEmailTemplateSignal(OAIGetCustomVerificationEmailTemplateResponse summary);
    void gETGetIdentityDkimAttributesSignal(OAIGetIdentityDkimAttributesResponse summary);
    void gETGetIdentityMailFromDomainAttributesSignal(OAIGetIdentityMailFromDomainAttributesResponse summary);
    void gETGetIdentityNotificationAttributesSignal(OAIGetIdentityNotificationAttributesResponse summary);
    void gETGetIdentityPoliciesSignal(OAIGetIdentityPoliciesResponse summary);
    void gETGetIdentityVerificationAttributesSignal(OAIGetIdentityVerificationAttributesResponse summary);
    void gETGetSendQuotaSignal(OAIGetSendQuotaResponse summary);
    void gETGetSendStatisticsSignal(OAIGetSendStatisticsResponse summary);
    void gETGetTemplateSignal(OAIGetTemplateResponse summary);
    void gETListConfigurationSetsSignal(OAIListConfigurationSetsResponse summary);
    void gETListCustomVerificationEmailTemplatesSignal(OAIListCustomVerificationEmailTemplatesResponse summary);
    void gETListIdentitiesSignal(OAIListIdentitiesResponse summary);
    void gETListIdentityPoliciesSignal(OAIListIdentityPoliciesResponse summary);
    void gETListReceiptFiltersSignal(OAIListReceiptFiltersResponse summary);
    void gETListReceiptRuleSetsSignal(OAIListReceiptRuleSetsResponse summary);
    void gETListTemplatesSignal(OAIListTemplatesResponse summary);
    void gETListVerifiedEmailAddressesSignal(OAIListVerifiedEmailAddressesResponse summary);
    void gETPutConfigurationSetDeliveryOptionsSignal(OAIObject summary);
    void gETPutIdentityPolicySignal(OAIObject summary);
    void gETReorderReceiptRuleSetSignal(OAIObject summary);
    void gETSendBounceSignal(OAISendBounceResponse summary);
    void gETSendBulkTemplatedEmailSignal(OAISendBulkTemplatedEmailResponse summary);
    void gETSendCustomVerificationEmailSignal(OAISendCustomVerificationEmailResponse summary);
    void gETSendEmailSignal(OAISendEmailResponse summary);
    void gETSendRawEmailSignal(OAISendRawEmailResponse summary);
    void gETSendTemplatedEmailSignal(OAISendTemplatedEmailResponse summary);
    void gETSetActiveReceiptRuleSetSignal(OAIObject summary);
    void gETSetIdentityDkimEnabledSignal(OAIObject summary);
    void gETSetIdentityFeedbackForwardingEnabledSignal(OAIObject summary);
    void gETSetIdentityHeadersInNotificationsEnabledSignal(OAIObject summary);
    void gETSetIdentityMailFromDomainSignal(OAIObject summary);
    void gETSetIdentityNotificationTopicSignal(OAIObject summary);
    void gETSetReceiptRulePositionSignal(OAIObject summary);
    void gETTestRenderTemplateSignal(OAITestRenderTemplateResponse summary);
    void gETUpdateAccountSendingEnabledSignal();
    void gETUpdateConfigurationSetEventDestinationSignal(OAIObject summary);
    void gETUpdateConfigurationSetReputationMetricsEnabledSignal();
    void gETUpdateConfigurationSetSendingEnabledSignal();
    void gETUpdateConfigurationSetTrackingOptionsSignal(OAIObject summary);
    void gETUpdateCustomVerificationEmailTemplateSignal();
    void gETUpdateReceiptRuleSignal(OAIObject summary);
    void gETUpdateTemplateSignal(OAIObject summary);
    void gETVerifyDomainDkimSignal(OAIVerifyDomainDkimResponse summary);
    void gETVerifyDomainIdentitySignal(OAIVerifyDomainIdentityResponse summary);
    void gETVerifyEmailAddressSignal();
    void gETVerifyEmailIdentitySignal(OAIObject summary);
    void pOSTCloneReceiptRuleSetSignal(OAIObject summary);
    void pOSTCreateConfigurationSetSignal(OAIObject summary);
    void pOSTCreateConfigurationSetEventDestinationSignal(OAIObject summary);
    void pOSTCreateConfigurationSetTrackingOptionsSignal(OAIObject summary);
    void pOSTCreateCustomVerificationEmailTemplateSignal();
    void pOSTCreateReceiptFilterSignal(OAIObject summary);
    void pOSTCreateReceiptRuleSignal(OAIObject summary);
    void pOSTCreateReceiptRuleSetSignal(OAIObject summary);
    void pOSTCreateTemplateSignal(OAIObject summary);
    void pOSTDeleteConfigurationSetSignal(OAIObject summary);
    void pOSTDeleteConfigurationSetEventDestinationSignal(OAIObject summary);
    void pOSTDeleteConfigurationSetTrackingOptionsSignal(OAIObject summary);
    void pOSTDeleteCustomVerificationEmailTemplateSignal();
    void pOSTDeleteIdentitySignal(OAIObject summary);
    void pOSTDeleteIdentityPolicySignal(OAIObject summary);
    void pOSTDeleteReceiptFilterSignal(OAIObject summary);
    void pOSTDeleteReceiptRuleSignal(OAIObject summary);
    void pOSTDeleteReceiptRuleSetSignal(OAIObject summary);
    void pOSTDeleteTemplateSignal(OAIObject summary);
    void pOSTDeleteVerifiedEmailAddressSignal();
    void pOSTDescribeActiveReceiptRuleSetSignal(OAIDescribeActiveReceiptRuleSetResponse summary);
    void pOSTDescribeConfigurationSetSignal(OAIDescribeConfigurationSetResponse summary);
    void pOSTDescribeReceiptRuleSignal(OAIDescribeReceiptRuleResponse summary);
    void pOSTDescribeReceiptRuleSetSignal(OAIDescribeReceiptRuleSetResponse summary);
    void pOSTGetAccountSendingEnabledSignal(OAIGetAccountSendingEnabledResponse summary);
    void pOSTGetCustomVerificationEmailTemplateSignal(OAIGetCustomVerificationEmailTemplateResponse summary);
    void pOSTGetIdentityDkimAttributesSignal(OAIGetIdentityDkimAttributesResponse summary);
    void pOSTGetIdentityMailFromDomainAttributesSignal(OAIGetIdentityMailFromDomainAttributesResponse summary);
    void pOSTGetIdentityNotificationAttributesSignal(OAIGetIdentityNotificationAttributesResponse summary);
    void pOSTGetIdentityPoliciesSignal(OAIGetIdentityPoliciesResponse summary);
    void pOSTGetIdentityVerificationAttributesSignal(OAIGetIdentityVerificationAttributesResponse summary);
    void pOSTGetSendQuotaSignal(OAIGetSendQuotaResponse summary);
    void pOSTGetSendStatisticsSignal(OAIGetSendStatisticsResponse summary);
    void pOSTGetTemplateSignal(OAIGetTemplateResponse summary);
    void pOSTListConfigurationSetsSignal(OAIListConfigurationSetsResponse summary);
    void pOSTListCustomVerificationEmailTemplatesSignal(OAIListCustomVerificationEmailTemplatesResponse summary);
    void pOSTListIdentitiesSignal(OAIListIdentitiesResponse summary);
    void pOSTListIdentityPoliciesSignal(OAIListIdentityPoliciesResponse summary);
    void pOSTListReceiptFiltersSignal(OAIListReceiptFiltersResponse summary);
    void pOSTListReceiptRuleSetsSignal(OAIListReceiptRuleSetsResponse summary);
    void pOSTListTemplatesSignal(OAIListTemplatesResponse summary);
    void pOSTListVerifiedEmailAddressesSignal(OAIListVerifiedEmailAddressesResponse summary);
    void pOSTPutConfigurationSetDeliveryOptionsSignal(OAIObject summary);
    void pOSTPutIdentityPolicySignal(OAIObject summary);
    void pOSTReorderReceiptRuleSetSignal(OAIObject summary);
    void pOSTSendBounceSignal(OAISendBounceResponse summary);
    void pOSTSendBulkTemplatedEmailSignal(OAISendBulkTemplatedEmailResponse summary);
    void pOSTSendCustomVerificationEmailSignal(OAISendCustomVerificationEmailResponse summary);
    void pOSTSendEmailSignal(OAISendEmailResponse summary);
    void pOSTSendRawEmailSignal(OAISendRawEmailResponse summary);
    void pOSTSendTemplatedEmailSignal(OAISendTemplatedEmailResponse summary);
    void pOSTSetActiveReceiptRuleSetSignal(OAIObject summary);
    void pOSTSetIdentityDkimEnabledSignal(OAIObject summary);
    void pOSTSetIdentityFeedbackForwardingEnabledSignal(OAIObject summary);
    void pOSTSetIdentityHeadersInNotificationsEnabledSignal(OAIObject summary);
    void pOSTSetIdentityMailFromDomainSignal(OAIObject summary);
    void pOSTSetIdentityNotificationTopicSignal(OAIObject summary);
    void pOSTSetReceiptRulePositionSignal(OAIObject summary);
    void pOSTTestRenderTemplateSignal(OAITestRenderTemplateResponse summary);
    void pOSTUpdateAccountSendingEnabledSignal();
    void pOSTUpdateConfigurationSetEventDestinationSignal(OAIObject summary);
    void pOSTUpdateConfigurationSetReputationMetricsEnabledSignal();
    void pOSTUpdateConfigurationSetSendingEnabledSignal();
    void pOSTUpdateConfigurationSetTrackingOptionsSignal(OAIObject summary);
    void pOSTUpdateCustomVerificationEmailTemplateSignal();
    void pOSTUpdateReceiptRuleSignal(OAIObject summary);
    void pOSTUpdateTemplateSignal(OAIObject summary);
    void pOSTVerifyDomainDkimSignal(OAIVerifyDomainDkimResponse summary);
    void pOSTVerifyDomainIdentitySignal(OAIVerifyDomainIdentityResponse summary);
    void pOSTVerifyEmailAddressSignal();
    void pOSTVerifyEmailIdentitySignal(OAIObject summary);


    void gETCloneReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateConfigurationSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateConfigurationSetEventDestinationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateConfigurationSetTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateCustomVerificationEmailTemplateSignalFull(OAIHttpRequestWorker *worker);
    void gETCreateReceiptFilterSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateReceiptRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETCreateTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteConfigurationSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteConfigurationSetEventDestinationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteConfigurationSetTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteCustomVerificationEmailTemplateSignalFull(OAIHttpRequestWorker *worker);
    void gETDeleteIdentitySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteIdentityPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteReceiptFilterSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteReceiptRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETDeleteVerifiedEmailAddressSignalFull(OAIHttpRequestWorker *worker);
    void gETDescribeActiveReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeActiveReceiptRuleSetResponse summary);
    void gETDescribeConfigurationSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeConfigurationSetResponse summary);
    void gETDescribeReceiptRuleSignalFull(OAIHttpRequestWorker *worker, OAIDescribeReceiptRuleResponse summary);
    void gETDescribeReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeReceiptRuleSetResponse summary);
    void gETGetAccountSendingEnabledSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountSendingEnabledResponse summary);
    void gETGetCustomVerificationEmailTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetCustomVerificationEmailTemplateResponse summary);
    void gETGetIdentityDkimAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityDkimAttributesResponse summary);
    void gETGetIdentityMailFromDomainAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityMailFromDomainAttributesResponse summary);
    void gETGetIdentityNotificationAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityNotificationAttributesResponse summary);
    void gETGetIdentityPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityPoliciesResponse summary);
    void gETGetIdentityVerificationAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityVerificationAttributesResponse summary);
    void gETGetSendQuotaSignalFull(OAIHttpRequestWorker *worker, OAIGetSendQuotaResponse summary);
    void gETGetSendStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIGetSendStatisticsResponse summary);
    void gETGetTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetTemplateResponse summary);
    void gETListConfigurationSetsSignalFull(OAIHttpRequestWorker *worker, OAIListConfigurationSetsResponse summary);
    void gETListCustomVerificationEmailTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIListCustomVerificationEmailTemplatesResponse summary);
    void gETListIdentitiesSignalFull(OAIHttpRequestWorker *worker, OAIListIdentitiesResponse summary);
    void gETListIdentityPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIListIdentityPoliciesResponse summary);
    void gETListReceiptFiltersSignalFull(OAIHttpRequestWorker *worker, OAIListReceiptFiltersResponse summary);
    void gETListReceiptRuleSetsSignalFull(OAIHttpRequestWorker *worker, OAIListReceiptRuleSetsResponse summary);
    void gETListTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIListTemplatesResponse summary);
    void gETListVerifiedEmailAddressesSignalFull(OAIHttpRequestWorker *worker, OAIListVerifiedEmailAddressesResponse summary);
    void gETPutConfigurationSetDeliveryOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETPutIdentityPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETReorderReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSendBounceSignalFull(OAIHttpRequestWorker *worker, OAISendBounceResponse summary);
    void gETSendBulkTemplatedEmailSignalFull(OAIHttpRequestWorker *worker, OAISendBulkTemplatedEmailResponse summary);
    void gETSendCustomVerificationEmailSignalFull(OAIHttpRequestWorker *worker, OAISendCustomVerificationEmailResponse summary);
    void gETSendEmailSignalFull(OAIHttpRequestWorker *worker, OAISendEmailResponse summary);
    void gETSendRawEmailSignalFull(OAIHttpRequestWorker *worker, OAISendRawEmailResponse summary);
    void gETSendTemplatedEmailSignalFull(OAIHttpRequestWorker *worker, OAISendTemplatedEmailResponse summary);
    void gETSetActiveReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetIdentityDkimEnabledSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetIdentityFeedbackForwardingEnabledSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetIdentityHeadersInNotificationsEnabledSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetIdentityMailFromDomainSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetIdentityNotificationTopicSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETSetReceiptRulePositionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETTestRenderTemplateSignalFull(OAIHttpRequestWorker *worker, OAITestRenderTemplateResponse summary);
    void gETUpdateAccountSendingEnabledSignalFull(OAIHttpRequestWorker *worker);
    void gETUpdateConfigurationSetEventDestinationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETUpdateConfigurationSetReputationMetricsEnabledSignalFull(OAIHttpRequestWorker *worker);
    void gETUpdateConfigurationSetSendingEnabledSignalFull(OAIHttpRequestWorker *worker);
    void gETUpdateConfigurationSetTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETUpdateCustomVerificationEmailTemplateSignalFull(OAIHttpRequestWorker *worker);
    void gETUpdateReceiptRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETUpdateTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void gETVerifyDomainDkimSignalFull(OAIHttpRequestWorker *worker, OAIVerifyDomainDkimResponse summary);
    void gETVerifyDomainIdentitySignalFull(OAIHttpRequestWorker *worker, OAIVerifyDomainIdentityResponse summary);
    void gETVerifyEmailAddressSignalFull(OAIHttpRequestWorker *worker);
    void gETVerifyEmailIdentitySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCloneReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateConfigurationSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateConfigurationSetEventDestinationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateConfigurationSetTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateCustomVerificationEmailTemplateSignalFull(OAIHttpRequestWorker *worker);
    void pOSTCreateReceiptFilterSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateReceiptRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTCreateTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteConfigurationSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteConfigurationSetEventDestinationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteConfigurationSetTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteCustomVerificationEmailTemplateSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDeleteIdentitySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteIdentityPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteReceiptFilterSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteReceiptRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTDeleteVerifiedEmailAddressSignalFull(OAIHttpRequestWorker *worker);
    void pOSTDescribeActiveReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeActiveReceiptRuleSetResponse summary);
    void pOSTDescribeConfigurationSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeConfigurationSetResponse summary);
    void pOSTDescribeReceiptRuleSignalFull(OAIHttpRequestWorker *worker, OAIDescribeReceiptRuleResponse summary);
    void pOSTDescribeReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIDescribeReceiptRuleSetResponse summary);
    void pOSTGetAccountSendingEnabledSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountSendingEnabledResponse summary);
    void pOSTGetCustomVerificationEmailTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetCustomVerificationEmailTemplateResponse summary);
    void pOSTGetIdentityDkimAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityDkimAttributesResponse summary);
    void pOSTGetIdentityMailFromDomainAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityMailFromDomainAttributesResponse summary);
    void pOSTGetIdentityNotificationAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityNotificationAttributesResponse summary);
    void pOSTGetIdentityPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityPoliciesResponse summary);
    void pOSTGetIdentityVerificationAttributesSignalFull(OAIHttpRequestWorker *worker, OAIGetIdentityVerificationAttributesResponse summary);
    void pOSTGetSendQuotaSignalFull(OAIHttpRequestWorker *worker, OAIGetSendQuotaResponse summary);
    void pOSTGetSendStatisticsSignalFull(OAIHttpRequestWorker *worker, OAIGetSendStatisticsResponse summary);
    void pOSTGetTemplateSignalFull(OAIHttpRequestWorker *worker, OAIGetTemplateResponse summary);
    void pOSTListConfigurationSetsSignalFull(OAIHttpRequestWorker *worker, OAIListConfigurationSetsResponse summary);
    void pOSTListCustomVerificationEmailTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIListCustomVerificationEmailTemplatesResponse summary);
    void pOSTListIdentitiesSignalFull(OAIHttpRequestWorker *worker, OAIListIdentitiesResponse summary);
    void pOSTListIdentityPoliciesSignalFull(OAIHttpRequestWorker *worker, OAIListIdentityPoliciesResponse summary);
    void pOSTListReceiptFiltersSignalFull(OAIHttpRequestWorker *worker, OAIListReceiptFiltersResponse summary);
    void pOSTListReceiptRuleSetsSignalFull(OAIHttpRequestWorker *worker, OAIListReceiptRuleSetsResponse summary);
    void pOSTListTemplatesSignalFull(OAIHttpRequestWorker *worker, OAIListTemplatesResponse summary);
    void pOSTListVerifiedEmailAddressesSignalFull(OAIHttpRequestWorker *worker, OAIListVerifiedEmailAddressesResponse summary);
    void pOSTPutConfigurationSetDeliveryOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTPutIdentityPolicySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTReorderReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSendBounceSignalFull(OAIHttpRequestWorker *worker, OAISendBounceResponse summary);
    void pOSTSendBulkTemplatedEmailSignalFull(OAIHttpRequestWorker *worker, OAISendBulkTemplatedEmailResponse summary);
    void pOSTSendCustomVerificationEmailSignalFull(OAIHttpRequestWorker *worker, OAISendCustomVerificationEmailResponse summary);
    void pOSTSendEmailSignalFull(OAIHttpRequestWorker *worker, OAISendEmailResponse summary);
    void pOSTSendRawEmailSignalFull(OAIHttpRequestWorker *worker, OAISendRawEmailResponse summary);
    void pOSTSendTemplatedEmailSignalFull(OAIHttpRequestWorker *worker, OAISendTemplatedEmailResponse summary);
    void pOSTSetActiveReceiptRuleSetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetIdentityDkimEnabledSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetIdentityFeedbackForwardingEnabledSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetIdentityHeadersInNotificationsEnabledSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetIdentityMailFromDomainSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetIdentityNotificationTopicSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTSetReceiptRulePositionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTTestRenderTemplateSignalFull(OAIHttpRequestWorker *worker, OAITestRenderTemplateResponse summary);
    void pOSTUpdateAccountSendingEnabledSignalFull(OAIHttpRequestWorker *worker);
    void pOSTUpdateConfigurationSetEventDestinationSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTUpdateConfigurationSetReputationMetricsEnabledSignalFull(OAIHttpRequestWorker *worker);
    void pOSTUpdateConfigurationSetSendingEnabledSignalFull(OAIHttpRequestWorker *worker);
    void pOSTUpdateConfigurationSetTrackingOptionsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTUpdateCustomVerificationEmailTemplateSignalFull(OAIHttpRequestWorker *worker);
    void pOSTUpdateReceiptRuleSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTUpdateTemplateSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void pOSTVerifyDomainDkimSignalFull(OAIHttpRequestWorker *worker, OAIVerifyDomainDkimResponse summary);
    void pOSTVerifyDomainIdentitySignalFull(OAIHttpRequestWorker *worker, OAIVerifyDomainIdentityResponse summary);
    void pOSTVerifyEmailAddressSignalFull(OAIHttpRequestWorker *worker);
    void pOSTVerifyEmailIdentitySignalFull(OAIHttpRequestWorker *worker, OAIObject summary);

    Q_DECL_DEPRECATED_X("Use gETCloneReceiptRuleSetSignalError() instead")
    void gETCloneReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCloneReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateConfigurationSetSignalError() instead")
    void gETCreateConfigurationSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateConfigurationSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateConfigurationSetEventDestinationSignalError() instead")
    void gETCreateConfigurationSetEventDestinationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateConfigurationSetEventDestinationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateConfigurationSetTrackingOptionsSignalError() instead")
    void gETCreateConfigurationSetTrackingOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateConfigurationSetTrackingOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateCustomVerificationEmailTemplateSignalError() instead")
    void gETCreateCustomVerificationEmailTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateCustomVerificationEmailTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateReceiptFilterSignalError() instead")
    void gETCreateReceiptFilterSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateReceiptFilterSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateReceiptRuleSignalError() instead")
    void gETCreateReceiptRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateReceiptRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateReceiptRuleSetSignalError() instead")
    void gETCreateReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateTemplateSignalError() instead")
    void gETCreateTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteConfigurationSetSignalError() instead")
    void gETDeleteConfigurationSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteConfigurationSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteConfigurationSetEventDestinationSignalError() instead")
    void gETDeleteConfigurationSetEventDestinationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteConfigurationSetEventDestinationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteConfigurationSetTrackingOptionsSignalError() instead")
    void gETDeleteConfigurationSetTrackingOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteConfigurationSetTrackingOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteCustomVerificationEmailTemplateSignalError() instead")
    void gETDeleteCustomVerificationEmailTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteCustomVerificationEmailTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteIdentitySignalError() instead")
    void gETDeleteIdentitySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteIdentitySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteIdentityPolicySignalError() instead")
    void gETDeleteIdentityPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteIdentityPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteReceiptFilterSignalError() instead")
    void gETDeleteReceiptFilterSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteReceiptFilterSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteReceiptRuleSignalError() instead")
    void gETDeleteReceiptRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteReceiptRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteReceiptRuleSetSignalError() instead")
    void gETDeleteReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteTemplateSignalError() instead")
    void gETDeleteTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteVerifiedEmailAddressSignalError() instead")
    void gETDeleteVerifiedEmailAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteVerifiedEmailAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeActiveReceiptRuleSetSignalError() instead")
    void gETDescribeActiveReceiptRuleSetSignalE(OAIDescribeActiveReceiptRuleSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeActiveReceiptRuleSetSignalError(OAIDescribeActiveReceiptRuleSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeConfigurationSetSignalError() instead")
    void gETDescribeConfigurationSetSignalE(OAIDescribeConfigurationSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeConfigurationSetSignalError(OAIDescribeConfigurationSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReceiptRuleSignalError() instead")
    void gETDescribeReceiptRuleSignalE(OAIDescribeReceiptRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReceiptRuleSignalError(OAIDescribeReceiptRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReceiptRuleSetSignalError() instead")
    void gETDescribeReceiptRuleSetSignalE(OAIDescribeReceiptRuleSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReceiptRuleSetSignalError(OAIDescribeReceiptRuleSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetAccountSendingEnabledSignalError() instead")
    void gETGetAccountSendingEnabledSignalE(OAIGetAccountSendingEnabledResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetAccountSendingEnabledSignalError(OAIGetAccountSendingEnabledResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetCustomVerificationEmailTemplateSignalError() instead")
    void gETGetCustomVerificationEmailTemplateSignalE(OAIGetCustomVerificationEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetCustomVerificationEmailTemplateSignalError(OAIGetCustomVerificationEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityDkimAttributesSignalError() instead")
    void gETGetIdentityDkimAttributesSignalE(OAIGetIdentityDkimAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityDkimAttributesSignalError(OAIGetIdentityDkimAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityMailFromDomainAttributesSignalError() instead")
    void gETGetIdentityMailFromDomainAttributesSignalE(OAIGetIdentityMailFromDomainAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityMailFromDomainAttributesSignalError(OAIGetIdentityMailFromDomainAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityNotificationAttributesSignalError() instead")
    void gETGetIdentityNotificationAttributesSignalE(OAIGetIdentityNotificationAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityNotificationAttributesSignalError(OAIGetIdentityNotificationAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityPoliciesSignalError() instead")
    void gETGetIdentityPoliciesSignalE(OAIGetIdentityPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityPoliciesSignalError(OAIGetIdentityPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityVerificationAttributesSignalError() instead")
    void gETGetIdentityVerificationAttributesSignalE(OAIGetIdentityVerificationAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityVerificationAttributesSignalError(OAIGetIdentityVerificationAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetSendQuotaSignalError() instead")
    void gETGetSendQuotaSignalE(OAIGetSendQuotaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetSendQuotaSignalError(OAIGetSendQuotaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetSendStatisticsSignalError() instead")
    void gETGetSendStatisticsSignalE(OAIGetSendStatisticsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetSendStatisticsSignalError(OAIGetSendStatisticsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetTemplateSignalError() instead")
    void gETGetTemplateSignalE(OAIGetTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetTemplateSignalError(OAIGetTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListConfigurationSetsSignalError() instead")
    void gETListConfigurationSetsSignalE(OAIListConfigurationSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListConfigurationSetsSignalError(OAIListConfigurationSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListCustomVerificationEmailTemplatesSignalError() instead")
    void gETListCustomVerificationEmailTemplatesSignalE(OAIListCustomVerificationEmailTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListCustomVerificationEmailTemplatesSignalError(OAIListCustomVerificationEmailTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListIdentitiesSignalError() instead")
    void gETListIdentitiesSignalE(OAIListIdentitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListIdentitiesSignalError(OAIListIdentitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListIdentityPoliciesSignalError() instead")
    void gETListIdentityPoliciesSignalE(OAIListIdentityPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListIdentityPoliciesSignalError(OAIListIdentityPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListReceiptFiltersSignalError() instead")
    void gETListReceiptFiltersSignalE(OAIListReceiptFiltersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListReceiptFiltersSignalError(OAIListReceiptFiltersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListReceiptRuleSetsSignalError() instead")
    void gETListReceiptRuleSetsSignalE(OAIListReceiptRuleSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListReceiptRuleSetsSignalError(OAIListReceiptRuleSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTemplatesSignalError() instead")
    void gETListTemplatesSignalE(OAIListTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTemplatesSignalError(OAIListTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListVerifiedEmailAddressesSignalError() instead")
    void gETListVerifiedEmailAddressesSignalE(OAIListVerifiedEmailAddressesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListVerifiedEmailAddressesSignalError(OAIListVerifiedEmailAddressesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutConfigurationSetDeliveryOptionsSignalError() instead")
    void gETPutConfigurationSetDeliveryOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutConfigurationSetDeliveryOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutIdentityPolicySignalError() instead")
    void gETPutIdentityPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutIdentityPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETReorderReceiptRuleSetSignalError() instead")
    void gETReorderReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETReorderReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendBounceSignalError() instead")
    void gETSendBounceSignalE(OAISendBounceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendBounceSignalError(OAISendBounceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendBulkTemplatedEmailSignalError() instead")
    void gETSendBulkTemplatedEmailSignalE(OAISendBulkTemplatedEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendBulkTemplatedEmailSignalError(OAISendBulkTemplatedEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendCustomVerificationEmailSignalError() instead")
    void gETSendCustomVerificationEmailSignalE(OAISendCustomVerificationEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendCustomVerificationEmailSignalError(OAISendCustomVerificationEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendEmailSignalError() instead")
    void gETSendEmailSignalE(OAISendEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendEmailSignalError(OAISendEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendRawEmailSignalError() instead")
    void gETSendRawEmailSignalE(OAISendRawEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendRawEmailSignalError(OAISendRawEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendTemplatedEmailSignalError() instead")
    void gETSendTemplatedEmailSignalE(OAISendTemplatedEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendTemplatedEmailSignalError(OAISendTemplatedEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetActiveReceiptRuleSetSignalError() instead")
    void gETSetActiveReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetActiveReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityDkimEnabledSignalError() instead")
    void gETSetIdentityDkimEnabledSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityDkimEnabledSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityFeedbackForwardingEnabledSignalError() instead")
    void gETSetIdentityFeedbackForwardingEnabledSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityFeedbackForwardingEnabledSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityHeadersInNotificationsEnabledSignalError() instead")
    void gETSetIdentityHeadersInNotificationsEnabledSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityHeadersInNotificationsEnabledSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityMailFromDomainSignalError() instead")
    void gETSetIdentityMailFromDomainSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityMailFromDomainSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityNotificationTopicSignalError() instead")
    void gETSetIdentityNotificationTopicSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityNotificationTopicSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetReceiptRulePositionSignalError() instead")
    void gETSetReceiptRulePositionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetReceiptRulePositionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTestRenderTemplateSignalError() instead")
    void gETTestRenderTemplateSignalE(OAITestRenderTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTestRenderTemplateSignalError(OAITestRenderTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateAccountSendingEnabledSignalError() instead")
    void gETUpdateAccountSendingEnabledSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateAccountSendingEnabledSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationSetEventDestinationSignalError() instead")
    void gETUpdateConfigurationSetEventDestinationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationSetEventDestinationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationSetReputationMetricsEnabledSignalError() instead")
    void gETUpdateConfigurationSetReputationMetricsEnabledSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationSetReputationMetricsEnabledSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationSetSendingEnabledSignalError() instead")
    void gETUpdateConfigurationSetSendingEnabledSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationSetSendingEnabledSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationSetTrackingOptionsSignalError() instead")
    void gETUpdateConfigurationSetTrackingOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationSetTrackingOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateCustomVerificationEmailTemplateSignalError() instead")
    void gETUpdateCustomVerificationEmailTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateCustomVerificationEmailTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateReceiptRuleSignalError() instead")
    void gETUpdateReceiptRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateReceiptRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateTemplateSignalError() instead")
    void gETUpdateTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVerifyDomainDkimSignalError() instead")
    void gETVerifyDomainDkimSignalE(OAIVerifyDomainDkimResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVerifyDomainDkimSignalError(OAIVerifyDomainDkimResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVerifyDomainIdentitySignalError() instead")
    void gETVerifyDomainIdentitySignalE(OAIVerifyDomainIdentityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVerifyDomainIdentitySignalError(OAIVerifyDomainIdentityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVerifyEmailAddressSignalError() instead")
    void gETVerifyEmailAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void gETVerifyEmailAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVerifyEmailIdentitySignalError() instead")
    void gETVerifyEmailIdentitySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVerifyEmailIdentitySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCloneReceiptRuleSetSignalError() instead")
    void pOSTCloneReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCloneReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateConfigurationSetSignalError() instead")
    void pOSTCreateConfigurationSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateConfigurationSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateConfigurationSetEventDestinationSignalError() instead")
    void pOSTCreateConfigurationSetEventDestinationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateConfigurationSetEventDestinationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateConfigurationSetTrackingOptionsSignalError() instead")
    void pOSTCreateConfigurationSetTrackingOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateConfigurationSetTrackingOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateCustomVerificationEmailTemplateSignalError() instead")
    void pOSTCreateCustomVerificationEmailTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateCustomVerificationEmailTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateReceiptFilterSignalError() instead")
    void pOSTCreateReceiptFilterSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateReceiptFilterSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateReceiptRuleSignalError() instead")
    void pOSTCreateReceiptRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateReceiptRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateReceiptRuleSetSignalError() instead")
    void pOSTCreateReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateTemplateSignalError() instead")
    void pOSTCreateTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteConfigurationSetSignalError() instead")
    void pOSTDeleteConfigurationSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteConfigurationSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteConfigurationSetEventDestinationSignalError() instead")
    void pOSTDeleteConfigurationSetEventDestinationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteConfigurationSetEventDestinationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteConfigurationSetTrackingOptionsSignalError() instead")
    void pOSTDeleteConfigurationSetTrackingOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteConfigurationSetTrackingOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteCustomVerificationEmailTemplateSignalError() instead")
    void pOSTDeleteCustomVerificationEmailTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteCustomVerificationEmailTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteIdentitySignalError() instead")
    void pOSTDeleteIdentitySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteIdentitySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteIdentityPolicySignalError() instead")
    void pOSTDeleteIdentityPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteIdentityPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteReceiptFilterSignalError() instead")
    void pOSTDeleteReceiptFilterSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteReceiptFilterSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteReceiptRuleSignalError() instead")
    void pOSTDeleteReceiptRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteReceiptRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteReceiptRuleSetSignalError() instead")
    void pOSTDeleteReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteTemplateSignalError() instead")
    void pOSTDeleteTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteVerifiedEmailAddressSignalError() instead")
    void pOSTDeleteVerifiedEmailAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteVerifiedEmailAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeActiveReceiptRuleSetSignalError() instead")
    void pOSTDescribeActiveReceiptRuleSetSignalE(OAIDescribeActiveReceiptRuleSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeActiveReceiptRuleSetSignalError(OAIDescribeActiveReceiptRuleSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeConfigurationSetSignalError() instead")
    void pOSTDescribeConfigurationSetSignalE(OAIDescribeConfigurationSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeConfigurationSetSignalError(OAIDescribeConfigurationSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReceiptRuleSignalError() instead")
    void pOSTDescribeReceiptRuleSignalE(OAIDescribeReceiptRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReceiptRuleSignalError(OAIDescribeReceiptRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReceiptRuleSetSignalError() instead")
    void pOSTDescribeReceiptRuleSetSignalE(OAIDescribeReceiptRuleSetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReceiptRuleSetSignalError(OAIDescribeReceiptRuleSetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetAccountSendingEnabledSignalError() instead")
    void pOSTGetAccountSendingEnabledSignalE(OAIGetAccountSendingEnabledResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetAccountSendingEnabledSignalError(OAIGetAccountSendingEnabledResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetCustomVerificationEmailTemplateSignalError() instead")
    void pOSTGetCustomVerificationEmailTemplateSignalE(OAIGetCustomVerificationEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetCustomVerificationEmailTemplateSignalError(OAIGetCustomVerificationEmailTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityDkimAttributesSignalError() instead")
    void pOSTGetIdentityDkimAttributesSignalE(OAIGetIdentityDkimAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityDkimAttributesSignalError(OAIGetIdentityDkimAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityMailFromDomainAttributesSignalError() instead")
    void pOSTGetIdentityMailFromDomainAttributesSignalE(OAIGetIdentityMailFromDomainAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityMailFromDomainAttributesSignalError(OAIGetIdentityMailFromDomainAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityNotificationAttributesSignalError() instead")
    void pOSTGetIdentityNotificationAttributesSignalE(OAIGetIdentityNotificationAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityNotificationAttributesSignalError(OAIGetIdentityNotificationAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityPoliciesSignalError() instead")
    void pOSTGetIdentityPoliciesSignalE(OAIGetIdentityPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityPoliciesSignalError(OAIGetIdentityPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityVerificationAttributesSignalError() instead")
    void pOSTGetIdentityVerificationAttributesSignalE(OAIGetIdentityVerificationAttributesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityVerificationAttributesSignalError(OAIGetIdentityVerificationAttributesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetSendQuotaSignalError() instead")
    void pOSTGetSendQuotaSignalE(OAIGetSendQuotaResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetSendQuotaSignalError(OAIGetSendQuotaResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetSendStatisticsSignalError() instead")
    void pOSTGetSendStatisticsSignalE(OAIGetSendStatisticsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetSendStatisticsSignalError(OAIGetSendStatisticsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetTemplateSignalError() instead")
    void pOSTGetTemplateSignalE(OAIGetTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetTemplateSignalError(OAIGetTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListConfigurationSetsSignalError() instead")
    void pOSTListConfigurationSetsSignalE(OAIListConfigurationSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListConfigurationSetsSignalError(OAIListConfigurationSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListCustomVerificationEmailTemplatesSignalError() instead")
    void pOSTListCustomVerificationEmailTemplatesSignalE(OAIListCustomVerificationEmailTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListCustomVerificationEmailTemplatesSignalError(OAIListCustomVerificationEmailTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListIdentitiesSignalError() instead")
    void pOSTListIdentitiesSignalE(OAIListIdentitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListIdentitiesSignalError(OAIListIdentitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListIdentityPoliciesSignalError() instead")
    void pOSTListIdentityPoliciesSignalE(OAIListIdentityPoliciesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListIdentityPoliciesSignalError(OAIListIdentityPoliciesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListReceiptFiltersSignalError() instead")
    void pOSTListReceiptFiltersSignalE(OAIListReceiptFiltersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListReceiptFiltersSignalError(OAIListReceiptFiltersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListReceiptRuleSetsSignalError() instead")
    void pOSTListReceiptRuleSetsSignalE(OAIListReceiptRuleSetsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListReceiptRuleSetsSignalError(OAIListReceiptRuleSetsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTemplatesSignalError() instead")
    void pOSTListTemplatesSignalE(OAIListTemplatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTemplatesSignalError(OAIListTemplatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListVerifiedEmailAddressesSignalError() instead")
    void pOSTListVerifiedEmailAddressesSignalE(OAIListVerifiedEmailAddressesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListVerifiedEmailAddressesSignalError(OAIListVerifiedEmailAddressesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutConfigurationSetDeliveryOptionsSignalError() instead")
    void pOSTPutConfigurationSetDeliveryOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutConfigurationSetDeliveryOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutIdentityPolicySignalError() instead")
    void pOSTPutIdentityPolicySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutIdentityPolicySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTReorderReceiptRuleSetSignalError() instead")
    void pOSTReorderReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTReorderReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendBounceSignalError() instead")
    void pOSTSendBounceSignalE(OAISendBounceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendBounceSignalError(OAISendBounceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendBulkTemplatedEmailSignalError() instead")
    void pOSTSendBulkTemplatedEmailSignalE(OAISendBulkTemplatedEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendBulkTemplatedEmailSignalError(OAISendBulkTemplatedEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendCustomVerificationEmailSignalError() instead")
    void pOSTSendCustomVerificationEmailSignalE(OAISendCustomVerificationEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendCustomVerificationEmailSignalError(OAISendCustomVerificationEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendEmailSignalError() instead")
    void pOSTSendEmailSignalE(OAISendEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendEmailSignalError(OAISendEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendRawEmailSignalError() instead")
    void pOSTSendRawEmailSignalE(OAISendRawEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendRawEmailSignalError(OAISendRawEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendTemplatedEmailSignalError() instead")
    void pOSTSendTemplatedEmailSignalE(OAISendTemplatedEmailResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendTemplatedEmailSignalError(OAISendTemplatedEmailResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetActiveReceiptRuleSetSignalError() instead")
    void pOSTSetActiveReceiptRuleSetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetActiveReceiptRuleSetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityDkimEnabledSignalError() instead")
    void pOSTSetIdentityDkimEnabledSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityDkimEnabledSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityFeedbackForwardingEnabledSignalError() instead")
    void pOSTSetIdentityFeedbackForwardingEnabledSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityFeedbackForwardingEnabledSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityHeadersInNotificationsEnabledSignalError() instead")
    void pOSTSetIdentityHeadersInNotificationsEnabledSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityHeadersInNotificationsEnabledSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityMailFromDomainSignalError() instead")
    void pOSTSetIdentityMailFromDomainSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityMailFromDomainSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityNotificationTopicSignalError() instead")
    void pOSTSetIdentityNotificationTopicSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityNotificationTopicSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetReceiptRulePositionSignalError() instead")
    void pOSTSetReceiptRulePositionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetReceiptRulePositionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTestRenderTemplateSignalError() instead")
    void pOSTTestRenderTemplateSignalE(OAITestRenderTemplateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTestRenderTemplateSignalError(OAITestRenderTemplateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateAccountSendingEnabledSignalError() instead")
    void pOSTUpdateAccountSendingEnabledSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateAccountSendingEnabledSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationSetEventDestinationSignalError() instead")
    void pOSTUpdateConfigurationSetEventDestinationSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationSetEventDestinationSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationSetReputationMetricsEnabledSignalError() instead")
    void pOSTUpdateConfigurationSetReputationMetricsEnabledSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationSetReputationMetricsEnabledSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationSetSendingEnabledSignalError() instead")
    void pOSTUpdateConfigurationSetSendingEnabledSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationSetSendingEnabledSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationSetTrackingOptionsSignalError() instead")
    void pOSTUpdateConfigurationSetTrackingOptionsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationSetTrackingOptionsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateCustomVerificationEmailTemplateSignalError() instead")
    void pOSTUpdateCustomVerificationEmailTemplateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateCustomVerificationEmailTemplateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateReceiptRuleSignalError() instead")
    void pOSTUpdateReceiptRuleSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateReceiptRuleSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateTemplateSignalError() instead")
    void pOSTUpdateTemplateSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateTemplateSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVerifyDomainDkimSignalError() instead")
    void pOSTVerifyDomainDkimSignalE(OAIVerifyDomainDkimResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVerifyDomainDkimSignalError(OAIVerifyDomainDkimResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVerifyDomainIdentitySignalError() instead")
    void pOSTVerifyDomainIdentitySignalE(OAIVerifyDomainIdentityResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVerifyDomainIdentitySignalError(OAIVerifyDomainIdentityResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVerifyEmailAddressSignalError() instead")
    void pOSTVerifyEmailAddressSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVerifyEmailAddressSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVerifyEmailIdentitySignalError() instead")
    void pOSTVerifyEmailIdentitySignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVerifyEmailIdentitySignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use gETCloneReceiptRuleSetSignalErrorFull() instead")
    void gETCloneReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCloneReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateConfigurationSetSignalErrorFull() instead")
    void gETCreateConfigurationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateConfigurationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateConfigurationSetEventDestinationSignalErrorFull() instead")
    void gETCreateConfigurationSetEventDestinationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateConfigurationSetEventDestinationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateConfigurationSetTrackingOptionsSignalErrorFull() instead")
    void gETCreateConfigurationSetTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateConfigurationSetTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateCustomVerificationEmailTemplateSignalErrorFull() instead")
    void gETCreateCustomVerificationEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateCustomVerificationEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateReceiptFilterSignalErrorFull() instead")
    void gETCreateReceiptFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateReceiptFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateReceiptRuleSignalErrorFull() instead")
    void gETCreateReceiptRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateReceiptRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateReceiptRuleSetSignalErrorFull() instead")
    void gETCreateReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETCreateTemplateSignalErrorFull() instead")
    void gETCreateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETCreateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteConfigurationSetSignalErrorFull() instead")
    void gETDeleteConfigurationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteConfigurationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteConfigurationSetEventDestinationSignalErrorFull() instead")
    void gETDeleteConfigurationSetEventDestinationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteConfigurationSetEventDestinationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteConfigurationSetTrackingOptionsSignalErrorFull() instead")
    void gETDeleteConfigurationSetTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteConfigurationSetTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteCustomVerificationEmailTemplateSignalErrorFull() instead")
    void gETDeleteCustomVerificationEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteCustomVerificationEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteIdentitySignalErrorFull() instead")
    void gETDeleteIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteIdentityPolicySignalErrorFull() instead")
    void gETDeleteIdentityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteIdentityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteReceiptFilterSignalErrorFull() instead")
    void gETDeleteReceiptFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteReceiptFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteReceiptRuleSignalErrorFull() instead")
    void gETDeleteReceiptRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteReceiptRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteReceiptRuleSetSignalErrorFull() instead")
    void gETDeleteReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteTemplateSignalErrorFull() instead")
    void gETDeleteTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDeleteVerifiedEmailAddressSignalErrorFull() instead")
    void gETDeleteVerifiedEmailAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDeleteVerifiedEmailAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeActiveReceiptRuleSetSignalErrorFull() instead")
    void gETDescribeActiveReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeActiveReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeConfigurationSetSignalErrorFull() instead")
    void gETDescribeConfigurationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeConfigurationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReceiptRuleSignalErrorFull() instead")
    void gETDescribeReceiptRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReceiptRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETDescribeReceiptRuleSetSignalErrorFull() instead")
    void gETDescribeReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETDescribeReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetAccountSendingEnabledSignalErrorFull() instead")
    void gETGetAccountSendingEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetAccountSendingEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetCustomVerificationEmailTemplateSignalErrorFull() instead")
    void gETGetCustomVerificationEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetCustomVerificationEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityDkimAttributesSignalErrorFull() instead")
    void gETGetIdentityDkimAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityDkimAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityMailFromDomainAttributesSignalErrorFull() instead")
    void gETGetIdentityMailFromDomainAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityMailFromDomainAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityNotificationAttributesSignalErrorFull() instead")
    void gETGetIdentityNotificationAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityNotificationAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityPoliciesSignalErrorFull() instead")
    void gETGetIdentityPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetIdentityVerificationAttributesSignalErrorFull() instead")
    void gETGetIdentityVerificationAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetIdentityVerificationAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetSendQuotaSignalErrorFull() instead")
    void gETGetSendQuotaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetSendQuotaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetSendStatisticsSignalErrorFull() instead")
    void gETGetSendStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetSendStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETGetTemplateSignalErrorFull() instead")
    void gETGetTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETGetTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListConfigurationSetsSignalErrorFull() instead")
    void gETListConfigurationSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListConfigurationSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListCustomVerificationEmailTemplatesSignalErrorFull() instead")
    void gETListCustomVerificationEmailTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListCustomVerificationEmailTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListIdentitiesSignalErrorFull() instead")
    void gETListIdentitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListIdentitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListIdentityPoliciesSignalErrorFull() instead")
    void gETListIdentityPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListIdentityPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListReceiptFiltersSignalErrorFull() instead")
    void gETListReceiptFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListReceiptFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListReceiptRuleSetsSignalErrorFull() instead")
    void gETListReceiptRuleSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListReceiptRuleSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListTemplatesSignalErrorFull() instead")
    void gETListTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETListVerifiedEmailAddressesSignalErrorFull() instead")
    void gETListVerifiedEmailAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETListVerifiedEmailAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutConfigurationSetDeliveryOptionsSignalErrorFull() instead")
    void gETPutConfigurationSetDeliveryOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutConfigurationSetDeliveryOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETPutIdentityPolicySignalErrorFull() instead")
    void gETPutIdentityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETPutIdentityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETReorderReceiptRuleSetSignalErrorFull() instead")
    void gETReorderReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETReorderReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendBounceSignalErrorFull() instead")
    void gETSendBounceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendBounceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendBulkTemplatedEmailSignalErrorFull() instead")
    void gETSendBulkTemplatedEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendBulkTemplatedEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendCustomVerificationEmailSignalErrorFull() instead")
    void gETSendCustomVerificationEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendCustomVerificationEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendEmailSignalErrorFull() instead")
    void gETSendEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendRawEmailSignalErrorFull() instead")
    void gETSendRawEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendRawEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSendTemplatedEmailSignalErrorFull() instead")
    void gETSendTemplatedEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSendTemplatedEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetActiveReceiptRuleSetSignalErrorFull() instead")
    void gETSetActiveReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetActiveReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityDkimEnabledSignalErrorFull() instead")
    void gETSetIdentityDkimEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityDkimEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityFeedbackForwardingEnabledSignalErrorFull() instead")
    void gETSetIdentityFeedbackForwardingEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityFeedbackForwardingEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityHeadersInNotificationsEnabledSignalErrorFull() instead")
    void gETSetIdentityHeadersInNotificationsEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityHeadersInNotificationsEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityMailFromDomainSignalErrorFull() instead")
    void gETSetIdentityMailFromDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityMailFromDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetIdentityNotificationTopicSignalErrorFull() instead")
    void gETSetIdentityNotificationTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetIdentityNotificationTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETSetReceiptRulePositionSignalErrorFull() instead")
    void gETSetReceiptRulePositionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETSetReceiptRulePositionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETTestRenderTemplateSignalErrorFull() instead")
    void gETTestRenderTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETTestRenderTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateAccountSendingEnabledSignalErrorFull() instead")
    void gETUpdateAccountSendingEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateAccountSendingEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationSetEventDestinationSignalErrorFull() instead")
    void gETUpdateConfigurationSetEventDestinationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationSetEventDestinationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationSetReputationMetricsEnabledSignalErrorFull() instead")
    void gETUpdateConfigurationSetReputationMetricsEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationSetReputationMetricsEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationSetSendingEnabledSignalErrorFull() instead")
    void gETUpdateConfigurationSetSendingEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationSetSendingEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateConfigurationSetTrackingOptionsSignalErrorFull() instead")
    void gETUpdateConfigurationSetTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateConfigurationSetTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateCustomVerificationEmailTemplateSignalErrorFull() instead")
    void gETUpdateCustomVerificationEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateCustomVerificationEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateReceiptRuleSignalErrorFull() instead")
    void gETUpdateReceiptRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateReceiptRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETUpdateTemplateSignalErrorFull() instead")
    void gETUpdateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETUpdateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVerifyDomainDkimSignalErrorFull() instead")
    void gETVerifyDomainDkimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVerifyDomainDkimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVerifyDomainIdentitySignalErrorFull() instead")
    void gETVerifyDomainIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVerifyDomainIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVerifyEmailAddressSignalErrorFull() instead")
    void gETVerifyEmailAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVerifyEmailAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gETVerifyEmailIdentitySignalErrorFull() instead")
    void gETVerifyEmailIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gETVerifyEmailIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCloneReceiptRuleSetSignalErrorFull() instead")
    void pOSTCloneReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCloneReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateConfigurationSetSignalErrorFull() instead")
    void pOSTCreateConfigurationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateConfigurationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateConfigurationSetEventDestinationSignalErrorFull() instead")
    void pOSTCreateConfigurationSetEventDestinationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateConfigurationSetEventDestinationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateConfigurationSetTrackingOptionsSignalErrorFull() instead")
    void pOSTCreateConfigurationSetTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateConfigurationSetTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateCustomVerificationEmailTemplateSignalErrorFull() instead")
    void pOSTCreateCustomVerificationEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateCustomVerificationEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateReceiptFilterSignalErrorFull() instead")
    void pOSTCreateReceiptFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateReceiptFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateReceiptRuleSignalErrorFull() instead")
    void pOSTCreateReceiptRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateReceiptRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateReceiptRuleSetSignalErrorFull() instead")
    void pOSTCreateReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTCreateTemplateSignalErrorFull() instead")
    void pOSTCreateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTCreateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteConfigurationSetSignalErrorFull() instead")
    void pOSTDeleteConfigurationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteConfigurationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteConfigurationSetEventDestinationSignalErrorFull() instead")
    void pOSTDeleteConfigurationSetEventDestinationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteConfigurationSetEventDestinationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteConfigurationSetTrackingOptionsSignalErrorFull() instead")
    void pOSTDeleteConfigurationSetTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteConfigurationSetTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteCustomVerificationEmailTemplateSignalErrorFull() instead")
    void pOSTDeleteCustomVerificationEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteCustomVerificationEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteIdentitySignalErrorFull() instead")
    void pOSTDeleteIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteIdentityPolicySignalErrorFull() instead")
    void pOSTDeleteIdentityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteIdentityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteReceiptFilterSignalErrorFull() instead")
    void pOSTDeleteReceiptFilterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteReceiptFilterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteReceiptRuleSignalErrorFull() instead")
    void pOSTDeleteReceiptRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteReceiptRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteReceiptRuleSetSignalErrorFull() instead")
    void pOSTDeleteReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteTemplateSignalErrorFull() instead")
    void pOSTDeleteTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDeleteVerifiedEmailAddressSignalErrorFull() instead")
    void pOSTDeleteVerifiedEmailAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDeleteVerifiedEmailAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeActiveReceiptRuleSetSignalErrorFull() instead")
    void pOSTDescribeActiveReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeActiveReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeConfigurationSetSignalErrorFull() instead")
    void pOSTDescribeConfigurationSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeConfigurationSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReceiptRuleSignalErrorFull() instead")
    void pOSTDescribeReceiptRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReceiptRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTDescribeReceiptRuleSetSignalErrorFull() instead")
    void pOSTDescribeReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTDescribeReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetAccountSendingEnabledSignalErrorFull() instead")
    void pOSTGetAccountSendingEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetAccountSendingEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetCustomVerificationEmailTemplateSignalErrorFull() instead")
    void pOSTGetCustomVerificationEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetCustomVerificationEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityDkimAttributesSignalErrorFull() instead")
    void pOSTGetIdentityDkimAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityDkimAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityMailFromDomainAttributesSignalErrorFull() instead")
    void pOSTGetIdentityMailFromDomainAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityMailFromDomainAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityNotificationAttributesSignalErrorFull() instead")
    void pOSTGetIdentityNotificationAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityNotificationAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityPoliciesSignalErrorFull() instead")
    void pOSTGetIdentityPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetIdentityVerificationAttributesSignalErrorFull() instead")
    void pOSTGetIdentityVerificationAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetIdentityVerificationAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetSendQuotaSignalErrorFull() instead")
    void pOSTGetSendQuotaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetSendQuotaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetSendStatisticsSignalErrorFull() instead")
    void pOSTGetSendStatisticsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetSendStatisticsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTGetTemplateSignalErrorFull() instead")
    void pOSTGetTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTGetTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListConfigurationSetsSignalErrorFull() instead")
    void pOSTListConfigurationSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListConfigurationSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListCustomVerificationEmailTemplatesSignalErrorFull() instead")
    void pOSTListCustomVerificationEmailTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListCustomVerificationEmailTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListIdentitiesSignalErrorFull() instead")
    void pOSTListIdentitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListIdentitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListIdentityPoliciesSignalErrorFull() instead")
    void pOSTListIdentityPoliciesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListIdentityPoliciesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListReceiptFiltersSignalErrorFull() instead")
    void pOSTListReceiptFiltersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListReceiptFiltersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListReceiptRuleSetsSignalErrorFull() instead")
    void pOSTListReceiptRuleSetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListReceiptRuleSetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListTemplatesSignalErrorFull() instead")
    void pOSTListTemplatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListTemplatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTListVerifiedEmailAddressesSignalErrorFull() instead")
    void pOSTListVerifiedEmailAddressesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTListVerifiedEmailAddressesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutConfigurationSetDeliveryOptionsSignalErrorFull() instead")
    void pOSTPutConfigurationSetDeliveryOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutConfigurationSetDeliveryOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTPutIdentityPolicySignalErrorFull() instead")
    void pOSTPutIdentityPolicySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTPutIdentityPolicySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTReorderReceiptRuleSetSignalErrorFull() instead")
    void pOSTReorderReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTReorderReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendBounceSignalErrorFull() instead")
    void pOSTSendBounceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendBounceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendBulkTemplatedEmailSignalErrorFull() instead")
    void pOSTSendBulkTemplatedEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendBulkTemplatedEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendCustomVerificationEmailSignalErrorFull() instead")
    void pOSTSendCustomVerificationEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendCustomVerificationEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendEmailSignalErrorFull() instead")
    void pOSTSendEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendRawEmailSignalErrorFull() instead")
    void pOSTSendRawEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendRawEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSendTemplatedEmailSignalErrorFull() instead")
    void pOSTSendTemplatedEmailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSendTemplatedEmailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetActiveReceiptRuleSetSignalErrorFull() instead")
    void pOSTSetActiveReceiptRuleSetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetActiveReceiptRuleSetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityDkimEnabledSignalErrorFull() instead")
    void pOSTSetIdentityDkimEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityDkimEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityFeedbackForwardingEnabledSignalErrorFull() instead")
    void pOSTSetIdentityFeedbackForwardingEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityFeedbackForwardingEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityHeadersInNotificationsEnabledSignalErrorFull() instead")
    void pOSTSetIdentityHeadersInNotificationsEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityHeadersInNotificationsEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityMailFromDomainSignalErrorFull() instead")
    void pOSTSetIdentityMailFromDomainSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityMailFromDomainSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetIdentityNotificationTopicSignalErrorFull() instead")
    void pOSTSetIdentityNotificationTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetIdentityNotificationTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTSetReceiptRulePositionSignalErrorFull() instead")
    void pOSTSetReceiptRulePositionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTSetReceiptRulePositionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTTestRenderTemplateSignalErrorFull() instead")
    void pOSTTestRenderTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTTestRenderTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateAccountSendingEnabledSignalErrorFull() instead")
    void pOSTUpdateAccountSendingEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateAccountSendingEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationSetEventDestinationSignalErrorFull() instead")
    void pOSTUpdateConfigurationSetEventDestinationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationSetEventDestinationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationSetReputationMetricsEnabledSignalErrorFull() instead")
    void pOSTUpdateConfigurationSetReputationMetricsEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationSetReputationMetricsEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationSetSendingEnabledSignalErrorFull() instead")
    void pOSTUpdateConfigurationSetSendingEnabledSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationSetSendingEnabledSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateConfigurationSetTrackingOptionsSignalErrorFull() instead")
    void pOSTUpdateConfigurationSetTrackingOptionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateConfigurationSetTrackingOptionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateCustomVerificationEmailTemplateSignalErrorFull() instead")
    void pOSTUpdateCustomVerificationEmailTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateCustomVerificationEmailTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateReceiptRuleSignalErrorFull() instead")
    void pOSTUpdateReceiptRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateReceiptRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTUpdateTemplateSignalErrorFull() instead")
    void pOSTUpdateTemplateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTUpdateTemplateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVerifyDomainDkimSignalErrorFull() instead")
    void pOSTVerifyDomainDkimSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVerifyDomainDkimSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVerifyDomainIdentitySignalErrorFull() instead")
    void pOSTVerifyDomainIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVerifyDomainIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVerifyEmailAddressSignalErrorFull() instead")
    void pOSTVerifyEmailAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVerifyEmailAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pOSTVerifyEmailIdentitySignalErrorFull() instead")
    void pOSTVerifyEmailIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pOSTVerifyEmailIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
