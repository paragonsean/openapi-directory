/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonChime);
  }
}(this, function(expect, AmazonChime) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonChime.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('associatePhoneNumberWithUser', function() {
      it('should call associatePhoneNumberWithUser successfully', function(done) {
        //uncomment below and update the code to test associatePhoneNumberWithUser
        //instance.associatePhoneNumberWithUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associatePhoneNumbersWithVoiceConnector', function() {
      it('should call associatePhoneNumbersWithVoiceConnector successfully', function(done) {
        //uncomment below and update the code to test associatePhoneNumbersWithVoiceConnector
        //instance.associatePhoneNumbersWithVoiceConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associatePhoneNumbersWithVoiceConnectorGroup', function() {
      it('should call associatePhoneNumbersWithVoiceConnectorGroup successfully', function(done) {
        //uncomment below and update the code to test associatePhoneNumbersWithVoiceConnectorGroup
        //instance.associatePhoneNumbersWithVoiceConnectorGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('associateSigninDelegateGroupsWithAccount', function() {
      it('should call associateSigninDelegateGroupsWithAccount successfully', function(done) {
        //uncomment below and update the code to test associateSigninDelegateGroupsWithAccount
        //instance.associateSigninDelegateGroupsWithAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchCreateAttendee', function() {
      it('should call batchCreateAttendee successfully', function(done) {
        //uncomment below and update the code to test batchCreateAttendee
        //instance.batchCreateAttendee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchCreateChannelMembership', function() {
      it('should call batchCreateChannelMembership successfully', function(done) {
        //uncomment below and update the code to test batchCreateChannelMembership
        //instance.batchCreateChannelMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchCreateRoomMembership', function() {
      it('should call batchCreateRoomMembership successfully', function(done) {
        //uncomment below and update the code to test batchCreateRoomMembership
        //instance.batchCreateRoomMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchDeletePhoneNumber', function() {
      it('should call batchDeletePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test batchDeletePhoneNumber
        //instance.batchDeletePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchSuspendUser', function() {
      it('should call batchSuspendUser successfully', function(done) {
        //uncomment below and update the code to test batchSuspendUser
        //instance.batchSuspendUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUnsuspendUser', function() {
      it('should call batchUnsuspendUser successfully', function(done) {
        //uncomment below and update the code to test batchUnsuspendUser
        //instance.batchUnsuspendUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUpdatePhoneNumber', function() {
      it('should call batchUpdatePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test batchUpdatePhoneNumber
        //instance.batchUpdatePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('batchUpdateUser', function() {
      it('should call batchUpdateUser successfully', function(done) {
        //uncomment below and update the code to test batchUpdateUser
        //instance.batchUpdateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAccount', function() {
      it('should call createAccount successfully', function(done) {
        //uncomment below and update the code to test createAccount
        //instance.createAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAppInstance', function() {
      it('should call createAppInstance successfully', function(done) {
        //uncomment below and update the code to test createAppInstance
        //instance.createAppInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAppInstanceAdmin', function() {
      it('should call createAppInstanceAdmin successfully', function(done) {
        //uncomment below and update the code to test createAppInstanceAdmin
        //instance.createAppInstanceAdmin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAppInstanceUser', function() {
      it('should call createAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test createAppInstanceUser
        //instance.createAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAttendee', function() {
      it('should call createAttendee successfully', function(done) {
        //uncomment below and update the code to test createAttendee
        //instance.createAttendee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createBot', function() {
      it('should call createBot successfully', function(done) {
        //uncomment below and update the code to test createBot
        //instance.createBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannel', function() {
      it('should call createChannel successfully', function(done) {
        //uncomment below and update the code to test createChannel
        //instance.createChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannelBan', function() {
      it('should call createChannelBan successfully', function(done) {
        //uncomment below and update the code to test createChannelBan
        //instance.createChannelBan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannelMembership', function() {
      it('should call createChannelMembership successfully', function(done) {
        //uncomment below and update the code to test createChannelMembership
        //instance.createChannelMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createChannelModerator', function() {
      it('should call createChannelModerator successfully', function(done) {
        //uncomment below and update the code to test createChannelModerator
        //instance.createChannelModerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMediaCapturePipeline', function() {
      it('should call createMediaCapturePipeline successfully', function(done) {
        //uncomment below and update the code to test createMediaCapturePipeline
        //instance.createMediaCapturePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMeeting', function() {
      it('should call createMeeting successfully', function(done) {
        //uncomment below and update the code to test createMeeting
        //instance.createMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMeetingDialOut', function() {
      it('should call createMeetingDialOut successfully', function(done) {
        //uncomment below and update the code to test createMeetingDialOut
        //instance.createMeetingDialOut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createMeetingWithAttendees', function() {
      it('should call createMeetingWithAttendees successfully', function(done) {
        //uncomment below and update the code to test createMeetingWithAttendees
        //instance.createMeetingWithAttendees(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createPhoneNumberOrder', function() {
      it('should call createPhoneNumberOrder successfully', function(done) {
        //uncomment below and update the code to test createPhoneNumberOrder
        //instance.createPhoneNumberOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createProxySession', function() {
      it('should call createProxySession successfully', function(done) {
        //uncomment below and update the code to test createProxySession
        //instance.createProxySession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoom', function() {
      it('should call createRoom successfully', function(done) {
        //uncomment below and update the code to test createRoom
        //instance.createRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoomMembership', function() {
      it('should call createRoomMembership successfully', function(done) {
        //uncomment below and update the code to test createRoomMembership
        //instance.createRoomMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSipMediaApplication', function() {
      it('should call createSipMediaApplication successfully', function(done) {
        //uncomment below and update the code to test createSipMediaApplication
        //instance.createSipMediaApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSipMediaApplicationCall', function() {
      it('should call createSipMediaApplicationCall successfully', function(done) {
        //uncomment below and update the code to test createSipMediaApplicationCall
        //instance.createSipMediaApplicationCall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSipRule', function() {
      it('should call createSipRule successfully', function(done) {
        //uncomment below and update the code to test createSipRule
        //instance.createSipRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createUser', function() {
      it('should call createUser successfully', function(done) {
        //uncomment below and update the code to test createUser
        //instance.createUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVoiceConnector', function() {
      it('should call createVoiceConnector successfully', function(done) {
        //uncomment below and update the code to test createVoiceConnector
        //instance.createVoiceConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVoiceConnectorGroup', function() {
      it('should call createVoiceConnectorGroup successfully', function(done) {
        //uncomment below and update the code to test createVoiceConnectorGroup
        //instance.createVoiceConnectorGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccount', function() {
      it('should call deleteAccount successfully', function(done) {
        //uncomment below and update the code to test deleteAccount
        //instance.deleteAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppInstance', function() {
      it('should call deleteAppInstance successfully', function(done) {
        //uncomment below and update the code to test deleteAppInstance
        //instance.deleteAppInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppInstanceAdmin', function() {
      it('should call deleteAppInstanceAdmin successfully', function(done) {
        //uncomment below and update the code to test deleteAppInstanceAdmin
        //instance.deleteAppInstanceAdmin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppInstanceStreamingConfigurations', function() {
      it('should call deleteAppInstanceStreamingConfigurations successfully', function(done) {
        //uncomment below and update the code to test deleteAppInstanceStreamingConfigurations
        //instance.deleteAppInstanceStreamingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAppInstanceUser', function() {
      it('should call deleteAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test deleteAppInstanceUser
        //instance.deleteAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAttendee', function() {
      it('should call deleteAttendee successfully', function(done) {
        //uncomment below and update the code to test deleteAttendee
        //instance.deleteAttendee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannel', function() {
      it('should call deleteChannel successfully', function(done) {
        //uncomment below and update the code to test deleteChannel
        //instance.deleteChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelBan', function() {
      it('should call deleteChannelBan successfully', function(done) {
        //uncomment below and update the code to test deleteChannelBan
        //instance.deleteChannelBan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelMembership', function() {
      it('should call deleteChannelMembership successfully', function(done) {
        //uncomment below and update the code to test deleteChannelMembership
        //instance.deleteChannelMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelMessage', function() {
      it('should call deleteChannelMessage successfully', function(done) {
        //uncomment below and update the code to test deleteChannelMessage
        //instance.deleteChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteChannelModerator', function() {
      it('should call deleteChannelModerator successfully', function(done) {
        //uncomment below and update the code to test deleteChannelModerator
        //instance.deleteChannelModerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteEventsConfiguration', function() {
      it('should call deleteEventsConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteEventsConfiguration
        //instance.deleteEventsConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMediaCapturePipeline', function() {
      it('should call deleteMediaCapturePipeline successfully', function(done) {
        //uncomment below and update the code to test deleteMediaCapturePipeline
        //instance.deleteMediaCapturePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteMeeting', function() {
      it('should call deleteMeeting successfully', function(done) {
        //uncomment below and update the code to test deleteMeeting
        //instance.deleteMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePhoneNumber', function() {
      it('should call deletePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test deletePhoneNumber
        //instance.deletePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteProxySession', function() {
      it('should call deleteProxySession successfully', function(done) {
        //uncomment below and update the code to test deleteProxySession
        //instance.deleteProxySession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoom', function() {
      it('should call deleteRoom successfully', function(done) {
        //uncomment below and update the code to test deleteRoom
        //instance.deleteRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoomMembership', function() {
      it('should call deleteRoomMembership successfully', function(done) {
        //uncomment below and update the code to test deleteRoomMembership
        //instance.deleteRoomMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSipMediaApplication', function() {
      it('should call deleteSipMediaApplication successfully', function(done) {
        //uncomment below and update the code to test deleteSipMediaApplication
        //instance.deleteSipMediaApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSipRule', function() {
      it('should call deleteSipRule successfully', function(done) {
        //uncomment below and update the code to test deleteSipRule
        //instance.deleteSipRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceConnector', function() {
      it('should call deleteVoiceConnector successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceConnector
        //instance.deleteVoiceConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceConnectorEmergencyCallingConfiguration', function() {
      it('should call deleteVoiceConnectorEmergencyCallingConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceConnectorEmergencyCallingConfiguration
        //instance.deleteVoiceConnectorEmergencyCallingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceConnectorGroup', function() {
      it('should call deleteVoiceConnectorGroup successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceConnectorGroup
        //instance.deleteVoiceConnectorGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceConnectorOrigination', function() {
      it('should call deleteVoiceConnectorOrigination successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceConnectorOrigination
        //instance.deleteVoiceConnectorOrigination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceConnectorProxy', function() {
      it('should call deleteVoiceConnectorProxy successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceConnectorProxy
        //instance.deleteVoiceConnectorProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceConnectorStreamingConfiguration', function() {
      it('should call deleteVoiceConnectorStreamingConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceConnectorStreamingConfiguration
        //instance.deleteVoiceConnectorStreamingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceConnectorTermination', function() {
      it('should call deleteVoiceConnectorTermination successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceConnectorTermination
        //instance.deleteVoiceConnectorTermination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVoiceConnectorTerminationCredentials', function() {
      it('should call deleteVoiceConnectorTerminationCredentials successfully', function(done) {
        //uncomment below and update the code to test deleteVoiceConnectorTerminationCredentials
        //instance.deleteVoiceConnectorTerminationCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAppInstance', function() {
      it('should call describeAppInstance successfully', function(done) {
        //uncomment below and update the code to test describeAppInstance
        //instance.describeAppInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAppInstanceAdmin', function() {
      it('should call describeAppInstanceAdmin successfully', function(done) {
        //uncomment below and update the code to test describeAppInstanceAdmin
        //instance.describeAppInstanceAdmin(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeAppInstanceUser', function() {
      it('should call describeAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test describeAppInstanceUser
        //instance.describeAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannel', function() {
      it('should call describeChannel successfully', function(done) {
        //uncomment below and update the code to test describeChannel
        //instance.describeChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelBan', function() {
      it('should call describeChannelBan successfully', function(done) {
        //uncomment below and update the code to test describeChannelBan
        //instance.describeChannelBan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelMembership', function() {
      it('should call describeChannelMembership successfully', function(done) {
        //uncomment below and update the code to test describeChannelMembership
        //instance.describeChannelMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelMembershipForAppInstanceUser', function() {
      it('should call describeChannelMembershipForAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test describeChannelMembershipForAppInstanceUser
        //instance.describeChannelMembershipForAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelModeratedByAppInstanceUser', function() {
      it('should call describeChannelModeratedByAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test describeChannelModeratedByAppInstanceUser
        //instance.describeChannelModeratedByAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeChannelModerator', function() {
      it('should call describeChannelModerator successfully', function(done) {
        //uncomment below and update the code to test describeChannelModerator
        //instance.describeChannelModerator(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociatePhoneNumberFromUser', function() {
      it('should call disassociatePhoneNumberFromUser successfully', function(done) {
        //uncomment below and update the code to test disassociatePhoneNumberFromUser
        //instance.disassociatePhoneNumberFromUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociatePhoneNumbersFromVoiceConnector', function() {
      it('should call disassociatePhoneNumbersFromVoiceConnector successfully', function(done) {
        //uncomment below and update the code to test disassociatePhoneNumbersFromVoiceConnector
        //instance.disassociatePhoneNumbersFromVoiceConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociatePhoneNumbersFromVoiceConnectorGroup', function() {
      it('should call disassociatePhoneNumbersFromVoiceConnectorGroup successfully', function(done) {
        //uncomment below and update the code to test disassociatePhoneNumbersFromVoiceConnectorGroup
        //instance.disassociatePhoneNumbersFromVoiceConnectorGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disassociateSigninDelegateGroupsFromAccount', function() {
      it('should call disassociateSigninDelegateGroupsFromAccount successfully', function(done) {
        //uncomment below and update the code to test disassociateSigninDelegateGroupsFromAccount
        //instance.disassociateSigninDelegateGroupsFromAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAccount', function() {
      it('should call getAccount successfully', function(done) {
        //uncomment below and update the code to test getAccount
        //instance.getAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAccountSettings', function() {
      it('should call getAccountSettings successfully', function(done) {
        //uncomment below and update the code to test getAccountSettings
        //instance.getAccountSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppInstanceRetentionSettings', function() {
      it('should call getAppInstanceRetentionSettings successfully', function(done) {
        //uncomment below and update the code to test getAppInstanceRetentionSettings
        //instance.getAppInstanceRetentionSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAppInstanceStreamingConfigurations', function() {
      it('should call getAppInstanceStreamingConfigurations successfully', function(done) {
        //uncomment below and update the code to test getAppInstanceStreamingConfigurations
        //instance.getAppInstanceStreamingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAttendee', function() {
      it('should call getAttendee successfully', function(done) {
        //uncomment below and update the code to test getAttendee
        //instance.getAttendee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getBot', function() {
      it('should call getBot successfully', function(done) {
        //uncomment below and update the code to test getBot
        //instance.getBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getChannelMessage', function() {
      it('should call getChannelMessage successfully', function(done) {
        //uncomment below and update the code to test getChannelMessage
        //instance.getChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getEventsConfiguration', function() {
      it('should call getEventsConfiguration successfully', function(done) {
        //uncomment below and update the code to test getEventsConfiguration
        //instance.getEventsConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGlobalSettings', function() {
      it('should call getGlobalSettings successfully', function(done) {
        //uncomment below and update the code to test getGlobalSettings
        //instance.getGlobalSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMediaCapturePipeline', function() {
      it('should call getMediaCapturePipeline successfully', function(done) {
        //uncomment below and update the code to test getMediaCapturePipeline
        //instance.getMediaCapturePipeline(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMeeting', function() {
      it('should call getMeeting successfully', function(done) {
        //uncomment below and update the code to test getMeeting
        //instance.getMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMessagingSessionEndpoint', function() {
      it('should call getMessagingSessionEndpoint successfully', function(done) {
        //uncomment below and update the code to test getMessagingSessionEndpoint
        //instance.getMessagingSessionEndpoint(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPhoneNumber', function() {
      it('should call getPhoneNumber successfully', function(done) {
        //uncomment below and update the code to test getPhoneNumber
        //instance.getPhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPhoneNumberOrder', function() {
      it('should call getPhoneNumberOrder successfully', function(done) {
        //uncomment below and update the code to test getPhoneNumberOrder
        //instance.getPhoneNumberOrder(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPhoneNumberSettings', function() {
      it('should call getPhoneNumberSettings successfully', function(done) {
        //uncomment below and update the code to test getPhoneNumberSettings
        //instance.getPhoneNumberSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getProxySession', function() {
      it('should call getProxySession successfully', function(done) {
        //uncomment below and update the code to test getProxySession
        //instance.getProxySession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRetentionSettings', function() {
      it('should call getRetentionSettings successfully', function(done) {
        //uncomment below and update the code to test getRetentionSettings
        //instance.getRetentionSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoom', function() {
      it('should call getRoom successfully', function(done) {
        //uncomment below and update the code to test getRoom
        //instance.getRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSipMediaApplication', function() {
      it('should call getSipMediaApplication successfully', function(done) {
        //uncomment below and update the code to test getSipMediaApplication
        //instance.getSipMediaApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSipMediaApplicationLoggingConfiguration', function() {
      it('should call getSipMediaApplicationLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test getSipMediaApplicationLoggingConfiguration
        //instance.getSipMediaApplicationLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getSipRule', function() {
      it('should call getSipRule successfully', function(done) {
        //uncomment below and update the code to test getSipRule
        //instance.getSipRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUser', function() {
      it('should call getUser successfully', function(done) {
        //uncomment below and update the code to test getUser
        //instance.getUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getUserSettings', function() {
      it('should call getUserSettings successfully', function(done) {
        //uncomment below and update the code to test getUserSettings
        //instance.getUserSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnector', function() {
      it('should call getVoiceConnector successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnector
        //instance.getVoiceConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnectorEmergencyCallingConfiguration', function() {
      it('should call getVoiceConnectorEmergencyCallingConfiguration successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnectorEmergencyCallingConfiguration
        //instance.getVoiceConnectorEmergencyCallingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnectorGroup', function() {
      it('should call getVoiceConnectorGroup successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnectorGroup
        //instance.getVoiceConnectorGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnectorLoggingConfiguration', function() {
      it('should call getVoiceConnectorLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnectorLoggingConfiguration
        //instance.getVoiceConnectorLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnectorOrigination', function() {
      it('should call getVoiceConnectorOrigination successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnectorOrigination
        //instance.getVoiceConnectorOrigination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnectorProxy', function() {
      it('should call getVoiceConnectorProxy successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnectorProxy
        //instance.getVoiceConnectorProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnectorStreamingConfiguration', function() {
      it('should call getVoiceConnectorStreamingConfiguration successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnectorStreamingConfiguration
        //instance.getVoiceConnectorStreamingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnectorTermination', function() {
      it('should call getVoiceConnectorTermination successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnectorTermination
        //instance.getVoiceConnectorTermination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVoiceConnectorTerminationHealth', function() {
      it('should call getVoiceConnectorTerminationHealth successfully', function(done) {
        //uncomment below and update the code to test getVoiceConnectorTerminationHealth
        //instance.getVoiceConnectorTerminationHealth(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('inviteUsers', function() {
      it('should call inviteUsers successfully', function(done) {
        //uncomment below and update the code to test inviteUsers
        //instance.inviteUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAccounts', function() {
      it('should call listAccounts successfully', function(done) {
        //uncomment below and update the code to test listAccounts
        //instance.listAccounts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppInstanceAdmins', function() {
      it('should call listAppInstanceAdmins successfully', function(done) {
        //uncomment below and update the code to test listAppInstanceAdmins
        //instance.listAppInstanceAdmins(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppInstanceUsers', function() {
      it('should call listAppInstanceUsers successfully', function(done) {
        //uncomment below and update the code to test listAppInstanceUsers
        //instance.listAppInstanceUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAppInstances', function() {
      it('should call listAppInstances successfully', function(done) {
        //uncomment below and update the code to test listAppInstances
        //instance.listAppInstances(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAttendeeTags', function() {
      it('should call listAttendeeTags successfully', function(done) {
        //uncomment below and update the code to test listAttendeeTags
        //instance.listAttendeeTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAttendees', function() {
      it('should call listAttendees successfully', function(done) {
        //uncomment below and update the code to test listAttendees
        //instance.listAttendees(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listBots', function() {
      it('should call listBots successfully', function(done) {
        //uncomment below and update the code to test listBots
        //instance.listBots(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelBans', function() {
      it('should call listChannelBans successfully', function(done) {
        //uncomment below and update the code to test listChannelBans
        //instance.listChannelBans(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelMemberships', function() {
      it('should call listChannelMemberships successfully', function(done) {
        //uncomment below and update the code to test listChannelMemberships
        //instance.listChannelMemberships(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelMembershipsForAppInstanceUser', function() {
      it('should call listChannelMembershipsForAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test listChannelMembershipsForAppInstanceUser
        //instance.listChannelMembershipsForAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelMessages', function() {
      it('should call listChannelMessages successfully', function(done) {
        //uncomment below and update the code to test listChannelMessages
        //instance.listChannelMessages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelModerators', function() {
      it('should call listChannelModerators successfully', function(done) {
        //uncomment below and update the code to test listChannelModerators
        //instance.listChannelModerators(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannels', function() {
      it('should call listChannels successfully', function(done) {
        //uncomment below and update the code to test listChannels
        //instance.listChannels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listChannelsModeratedByAppInstanceUser', function() {
      it('should call listChannelsModeratedByAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test listChannelsModeratedByAppInstanceUser
        //instance.listChannelsModeratedByAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMediaCapturePipelines', function() {
      it('should call listMediaCapturePipelines successfully', function(done) {
        //uncomment below and update the code to test listMediaCapturePipelines
        //instance.listMediaCapturePipelines(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMeetingTags', function() {
      it('should call listMeetingTags successfully', function(done) {
        //uncomment below and update the code to test listMeetingTags
        //instance.listMeetingTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listMeetings', function() {
      it('should call listMeetings successfully', function(done) {
        //uncomment below and update the code to test listMeetings
        //instance.listMeetings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPhoneNumberOrders', function() {
      it('should call listPhoneNumberOrders successfully', function(done) {
        //uncomment below and update the code to test listPhoneNumberOrders
        //instance.listPhoneNumberOrders(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listPhoneNumbers', function() {
      it('should call listPhoneNumbers successfully', function(done) {
        //uncomment below and update the code to test listPhoneNumbers
        //instance.listPhoneNumbers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProxySessions', function() {
      it('should call listProxySessions successfully', function(done) {
        //uncomment below and update the code to test listProxySessions
        //instance.listProxySessions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRoomMemberships', function() {
      it('should call listRoomMemberships successfully', function(done) {
        //uncomment below and update the code to test listRoomMemberships
        //instance.listRoomMemberships(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRooms', function() {
      it('should call listRooms successfully', function(done) {
        //uncomment below and update the code to test listRooms
        //instance.listRooms(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSipMediaApplications', function() {
      it('should call listSipMediaApplications successfully', function(done) {
        //uncomment below and update the code to test listSipMediaApplications
        //instance.listSipMediaApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSipRules', function() {
      it('should call listSipRules successfully', function(done) {
        //uncomment below and update the code to test listSipRules
        //instance.listSipRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSupportedPhoneNumberCountries', function() {
      it('should call listSupportedPhoneNumberCountries successfully', function(done) {
        //uncomment below and update the code to test listSupportedPhoneNumberCountries
        //instance.listSupportedPhoneNumberCountries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUsers', function() {
      it('should call listUsers successfully', function(done) {
        //uncomment below and update the code to test listUsers
        //instance.listUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVoiceConnectorGroups', function() {
      it('should call listVoiceConnectorGroups successfully', function(done) {
        //uncomment below and update the code to test listVoiceConnectorGroups
        //instance.listVoiceConnectorGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVoiceConnectorTerminationCredentials', function() {
      it('should call listVoiceConnectorTerminationCredentials successfully', function(done) {
        //uncomment below and update the code to test listVoiceConnectorTerminationCredentials
        //instance.listVoiceConnectorTerminationCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listVoiceConnectors', function() {
      it('should call listVoiceConnectors successfully', function(done) {
        //uncomment below and update the code to test listVoiceConnectors
        //instance.listVoiceConnectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('logoutUser', function() {
      it('should call logoutUser successfully', function(done) {
        //uncomment below and update the code to test logoutUser
        //instance.logoutUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAppInstanceRetentionSettings', function() {
      it('should call putAppInstanceRetentionSettings successfully', function(done) {
        //uncomment below and update the code to test putAppInstanceRetentionSettings
        //instance.putAppInstanceRetentionSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putAppInstanceStreamingConfigurations', function() {
      it('should call putAppInstanceStreamingConfigurations successfully', function(done) {
        //uncomment below and update the code to test putAppInstanceStreamingConfigurations
        //instance.putAppInstanceStreamingConfigurations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putEventsConfiguration', function() {
      it('should call putEventsConfiguration successfully', function(done) {
        //uncomment below and update the code to test putEventsConfiguration
        //instance.putEventsConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putRetentionSettings', function() {
      it('should call putRetentionSettings successfully', function(done) {
        //uncomment below and update the code to test putRetentionSettings
        //instance.putRetentionSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putSipMediaApplicationLoggingConfiguration', function() {
      it('should call putSipMediaApplicationLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test putSipMediaApplicationLoggingConfiguration
        //instance.putSipMediaApplicationLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putVoiceConnectorEmergencyCallingConfiguration', function() {
      it('should call putVoiceConnectorEmergencyCallingConfiguration successfully', function(done) {
        //uncomment below and update the code to test putVoiceConnectorEmergencyCallingConfiguration
        //instance.putVoiceConnectorEmergencyCallingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putVoiceConnectorLoggingConfiguration', function() {
      it('should call putVoiceConnectorLoggingConfiguration successfully', function(done) {
        //uncomment below and update the code to test putVoiceConnectorLoggingConfiguration
        //instance.putVoiceConnectorLoggingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putVoiceConnectorOrigination', function() {
      it('should call putVoiceConnectorOrigination successfully', function(done) {
        //uncomment below and update the code to test putVoiceConnectorOrigination
        //instance.putVoiceConnectorOrigination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putVoiceConnectorProxy', function() {
      it('should call putVoiceConnectorProxy successfully', function(done) {
        //uncomment below and update the code to test putVoiceConnectorProxy
        //instance.putVoiceConnectorProxy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putVoiceConnectorStreamingConfiguration', function() {
      it('should call putVoiceConnectorStreamingConfiguration successfully', function(done) {
        //uncomment below and update the code to test putVoiceConnectorStreamingConfiguration
        //instance.putVoiceConnectorStreamingConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putVoiceConnectorTermination', function() {
      it('should call putVoiceConnectorTermination successfully', function(done) {
        //uncomment below and update the code to test putVoiceConnectorTermination
        //instance.putVoiceConnectorTermination(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putVoiceConnectorTerminationCredentials', function() {
      it('should call putVoiceConnectorTerminationCredentials successfully', function(done) {
        //uncomment below and update the code to test putVoiceConnectorTerminationCredentials
        //instance.putVoiceConnectorTerminationCredentials(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redactChannelMessage', function() {
      it('should call redactChannelMessage successfully', function(done) {
        //uncomment below and update the code to test redactChannelMessage
        //instance.redactChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redactConversationMessage', function() {
      it('should call redactConversationMessage successfully', function(done) {
        //uncomment below and update the code to test redactConversationMessage
        //instance.redactConversationMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('redactRoomMessage', function() {
      it('should call redactRoomMessage successfully', function(done) {
        //uncomment below and update the code to test redactRoomMessage
        //instance.redactRoomMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('regenerateSecurityToken', function() {
      it('should call regenerateSecurityToken successfully', function(done) {
        //uncomment below and update the code to test regenerateSecurityToken
        //instance.regenerateSecurityToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetPersonalPIN', function() {
      it('should call resetPersonalPIN successfully', function(done) {
        //uncomment below and update the code to test resetPersonalPIN
        //instance.resetPersonalPIN(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restorePhoneNumber', function() {
      it('should call restorePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test restorePhoneNumber
        //instance.restorePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchAvailablePhoneNumbers', function() {
      it('should call searchAvailablePhoneNumbers successfully', function(done) {
        //uncomment below and update the code to test searchAvailablePhoneNumbers
        //instance.searchAvailablePhoneNumbers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sendChannelMessage', function() {
      it('should call sendChannelMessage successfully', function(done) {
        //uncomment below and update the code to test sendChannelMessage
        //instance.sendChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startMeetingTranscription', function() {
      it('should call startMeetingTranscription successfully', function(done) {
        //uncomment below and update the code to test startMeetingTranscription
        //instance.startMeetingTranscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopMeetingTranscription', function() {
      it('should call stopMeetingTranscription successfully', function(done) {
        //uncomment below and update the code to test stopMeetingTranscription
        //instance.stopMeetingTranscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagAttendee', function() {
      it('should call tagAttendee successfully', function(done) {
        //uncomment below and update the code to test tagAttendee
        //instance.tagAttendee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagMeeting', function() {
      it('should call tagMeeting successfully', function(done) {
        //uncomment below and update the code to test tagMeeting
        //instance.tagMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagAttendee', function() {
      it('should call untagAttendee successfully', function(done) {
        //uncomment below and update the code to test untagAttendee
        //instance.untagAttendee(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagMeeting', function() {
      it('should call untagMeeting successfully', function(done) {
        //uncomment below and update the code to test untagMeeting
        //instance.untagMeeting(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAccount', function() {
      it('should call updateAccount successfully', function(done) {
        //uncomment below and update the code to test updateAccount
        //instance.updateAccount(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAccountSettings', function() {
      it('should call updateAccountSettings successfully', function(done) {
        //uncomment below and update the code to test updateAccountSettings
        //instance.updateAccountSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAppInstance', function() {
      it('should call updateAppInstance successfully', function(done) {
        //uncomment below and update the code to test updateAppInstance
        //instance.updateAppInstance(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAppInstanceUser', function() {
      it('should call updateAppInstanceUser successfully', function(done) {
        //uncomment below and update the code to test updateAppInstanceUser
        //instance.updateAppInstanceUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateBot', function() {
      it('should call updateBot successfully', function(done) {
        //uncomment below and update the code to test updateBot
        //instance.updateBot(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannel', function() {
      it('should call updateChannel successfully', function(done) {
        //uncomment below and update the code to test updateChannel
        //instance.updateChannel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannelMessage', function() {
      it('should call updateChannelMessage successfully', function(done) {
        //uncomment below and update the code to test updateChannelMessage
        //instance.updateChannelMessage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateChannelReadMarker', function() {
      it('should call updateChannelReadMarker successfully', function(done) {
        //uncomment below and update the code to test updateChannelReadMarker
        //instance.updateChannelReadMarker(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateGlobalSettings', function() {
      it('should call updateGlobalSettings successfully', function(done) {
        //uncomment below and update the code to test updateGlobalSettings
        //instance.updateGlobalSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePhoneNumber', function() {
      it('should call updatePhoneNumber successfully', function(done) {
        //uncomment below and update the code to test updatePhoneNumber
        //instance.updatePhoneNumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePhoneNumberSettings', function() {
      it('should call updatePhoneNumberSettings successfully', function(done) {
        //uncomment below and update the code to test updatePhoneNumberSettings
        //instance.updatePhoneNumberSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateProxySession', function() {
      it('should call updateProxySession successfully', function(done) {
        //uncomment below and update the code to test updateProxySession
        //instance.updateProxySession(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoom', function() {
      it('should call updateRoom successfully', function(done) {
        //uncomment below and update the code to test updateRoom
        //instance.updateRoom(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoomMembership', function() {
      it('should call updateRoomMembership successfully', function(done) {
        //uncomment below and update the code to test updateRoomMembership
        //instance.updateRoomMembership(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSipMediaApplication', function() {
      it('should call updateSipMediaApplication successfully', function(done) {
        //uncomment below and update the code to test updateSipMediaApplication
        //instance.updateSipMediaApplication(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSipMediaApplicationCall', function() {
      it('should call updateSipMediaApplicationCall successfully', function(done) {
        //uncomment below and update the code to test updateSipMediaApplicationCall
        //instance.updateSipMediaApplicationCall(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSipRule', function() {
      it('should call updateSipRule successfully', function(done) {
        //uncomment below and update the code to test updateSipRule
        //instance.updateSipRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUser', function() {
      it('should call updateUser successfully', function(done) {
        //uncomment below and update the code to test updateUser
        //instance.updateUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateUserSettings', function() {
      it('should call updateUserSettings successfully', function(done) {
        //uncomment below and update the code to test updateUserSettings
        //instance.updateUserSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVoiceConnector', function() {
      it('should call updateVoiceConnector successfully', function(done) {
        //uncomment below and update the code to test updateVoiceConnector
        //instance.updateVoiceConnector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVoiceConnectorGroup', function() {
      it('should call updateVoiceConnectorGroup successfully', function(done) {
        //uncomment below and update the code to test updateVoiceConnectorGroup
        //instance.updateVoiceConnectorGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('validateE911Address', function() {
      it('should call validateE911Address successfully', function(done) {
        //uncomment below and update the code to test validateE911Address
        //instance.validateE911Address(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
