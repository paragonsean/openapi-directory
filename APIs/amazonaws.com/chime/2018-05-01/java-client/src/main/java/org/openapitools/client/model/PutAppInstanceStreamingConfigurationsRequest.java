/*
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppInstanceStreamingConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PutAppInstanceStreamingConfigurationsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:22.248115-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PutAppInstanceStreamingConfigurationsRequest {
  public static final String SERIALIZED_NAME_APP_INSTANCE_STREAMING_CONFIGURATIONS = "AppInstanceStreamingConfigurations";
  @SerializedName(SERIALIZED_NAME_APP_INSTANCE_STREAMING_CONFIGURATIONS)
  private List<AppInstanceStreamingConfiguration> appInstanceStreamingConfigurations = new ArrayList<>();

  public PutAppInstanceStreamingConfigurationsRequest() {
  }

  public PutAppInstanceStreamingConfigurationsRequest appInstanceStreamingConfigurations(List<AppInstanceStreamingConfiguration> appInstanceStreamingConfigurations) {
    this.appInstanceStreamingConfigurations = appInstanceStreamingConfigurations;
    return this;
  }

  public PutAppInstanceStreamingConfigurationsRequest addAppInstanceStreamingConfigurationsItem(AppInstanceStreamingConfiguration appInstanceStreamingConfigurationsItem) {
    if (this.appInstanceStreamingConfigurations == null) {
      this.appInstanceStreamingConfigurations = new ArrayList<>();
    }
    this.appInstanceStreamingConfigurations.add(appInstanceStreamingConfigurationsItem);
    return this;
  }

  /**
   * The streaming configurations set for an &lt;code&gt;AppInstance&lt;/code&gt;.
   * @return appInstanceStreamingConfigurations
   */
  @javax.annotation.Nonnull
  public List<AppInstanceStreamingConfiguration> getAppInstanceStreamingConfigurations() {
    return appInstanceStreamingConfigurations;
  }

  public void setAppInstanceStreamingConfigurations(List<AppInstanceStreamingConfiguration> appInstanceStreamingConfigurations) {
    this.appInstanceStreamingConfigurations = appInstanceStreamingConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PutAppInstanceStreamingConfigurationsRequest putAppInstanceStreamingConfigurationsRequest = (PutAppInstanceStreamingConfigurationsRequest) o;
    return Objects.equals(this.appInstanceStreamingConfigurations, putAppInstanceStreamingConfigurationsRequest.appInstanceStreamingConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInstanceStreamingConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PutAppInstanceStreamingConfigurationsRequest {\n");
    sb.append("    appInstanceStreamingConfigurations: ").append(toIndentedString(appInstanceStreamingConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppInstanceStreamingConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AppInstanceStreamingConfigurations");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PutAppInstanceStreamingConfigurationsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PutAppInstanceStreamingConfigurationsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PutAppInstanceStreamingConfigurationsRequest is not found in the empty JSON string", PutAppInstanceStreamingConfigurationsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PutAppInstanceStreamingConfigurationsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PutAppInstanceStreamingConfigurationsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PutAppInstanceStreamingConfigurationsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("AppInstanceStreamingConfigurations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AppInstanceStreamingConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("AppInstanceStreamingConfigurations").toString()));
      }

      JsonArray jsonArrayappInstanceStreamingConfigurations = jsonObj.getAsJsonArray("AppInstanceStreamingConfigurations");
      // validate the required field `AppInstanceStreamingConfigurations` (array)
      for (int i = 0; i < jsonArrayappInstanceStreamingConfigurations.size(); i++) {
        AppInstanceStreamingConfiguration.validateJsonElement(jsonArrayappInstanceStreamingConfigurations.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PutAppInstanceStreamingConfigurationsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PutAppInstanceStreamingConfigurationsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PutAppInstanceStreamingConfigurationsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PutAppInstanceStreamingConfigurationsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PutAppInstanceStreamingConfigurationsRequest>() {
           @Override
           public void write(JsonWriter out, PutAppInstanceStreamingConfigurationsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PutAppInstanceStreamingConfigurationsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PutAppInstanceStreamingConfigurationsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PutAppInstanceStreamingConfigurationsRequest
   * @throws IOException if the JSON string is invalid with respect to PutAppInstanceStreamingConfigurationsRequest
   */
  public static PutAppInstanceStreamingConfigurationsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PutAppInstanceStreamingConfigurationsRequest.class);
  }

  /**
   * Convert an instance of PutAppInstanceStreamingConfigurationsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

