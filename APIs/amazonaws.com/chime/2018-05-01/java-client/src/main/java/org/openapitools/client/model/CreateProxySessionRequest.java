/*
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Capability;
import org.openapitools.client.model.CreateProxySessionRequestGeoMatchParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateProxySessionRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:22.248115-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateProxySessionRequest {
  public static final String SERIALIZED_NAME_PARTICIPANT_PHONE_NUMBERS = "ParticipantPhoneNumbers";
  @SerializedName(SERIALIZED_NAME_PARTICIPANT_PHONE_NUMBERS)
  private List<String> participantPhoneNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_EXPIRY_MINUTES = "ExpiryMinutes";
  @SerializedName(SERIALIZED_NAME_EXPIRY_MINUTES)
  private Integer expiryMinutes;

  public static final String SERIALIZED_NAME_CAPABILITIES = "Capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<Capability> capabilities = new ArrayList<>();

  /**
   * The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.
   */
  @JsonAdapter(NumberSelectionBehaviorEnum.Adapter.class)
  public enum NumberSelectionBehaviorEnum {
    PREFER_STICKY("PreferSticky"),
    
    AVOID_STICKY("AvoidSticky");

    private String value;

    NumberSelectionBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NumberSelectionBehaviorEnum fromValue(String value) {
      for (NumberSelectionBehaviorEnum b : NumberSelectionBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NumberSelectionBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NumberSelectionBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NumberSelectionBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NumberSelectionBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NumberSelectionBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NUMBER_SELECTION_BEHAVIOR = "NumberSelectionBehavior";
  @SerializedName(SERIALIZED_NAME_NUMBER_SELECTION_BEHAVIOR)
  private NumberSelectionBehaviorEnum numberSelectionBehavior;

  /**
   * The preference for matching the country or area code of the proxy phone number with that of the first participant.
   */
  @JsonAdapter(GeoMatchLevelEnum.Adapter.class)
  public enum GeoMatchLevelEnum {
    COUNTRY("Country"),
    
    AREA_CODE("AreaCode");

    private String value;

    GeoMatchLevelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GeoMatchLevelEnum fromValue(String value) {
      for (GeoMatchLevelEnum b : GeoMatchLevelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GeoMatchLevelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GeoMatchLevelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GeoMatchLevelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GeoMatchLevelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GeoMatchLevelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GEO_MATCH_LEVEL = "GeoMatchLevel";
  @SerializedName(SERIALIZED_NAME_GEO_MATCH_LEVEL)
  private GeoMatchLevelEnum geoMatchLevel;

  public static final String SERIALIZED_NAME_GEO_MATCH_PARAMS = "GeoMatchParams";
  @SerializedName(SERIALIZED_NAME_GEO_MATCH_PARAMS)
  private CreateProxySessionRequestGeoMatchParams geoMatchParams;

  public CreateProxySessionRequest() {
  }

  public CreateProxySessionRequest participantPhoneNumbers(List<String> participantPhoneNumbers) {
    this.participantPhoneNumbers = participantPhoneNumbers;
    return this;
  }

  public CreateProxySessionRequest addParticipantPhoneNumbersItem(String participantPhoneNumbersItem) {
    if (this.participantPhoneNumbers == null) {
      this.participantPhoneNumbers = new ArrayList<>();
    }
    this.participantPhoneNumbers.add(participantPhoneNumbersItem);
    return this;
  }

  /**
   * The participant phone numbers.
   * @return participantPhoneNumbers
   */
  @javax.annotation.Nonnull
  public List<String> getParticipantPhoneNumbers() {
    return participantPhoneNumbers;
  }

  public void setParticipantPhoneNumbers(List<String> participantPhoneNumbers) {
    this.participantPhoneNumbers = participantPhoneNumbers;
  }


  public CreateProxySessionRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the proxy session.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateProxySessionRequest expiryMinutes(Integer expiryMinutes) {
    this.expiryMinutes = expiryMinutes;
    return this;
  }

  /**
   * The number of minutes allowed for the proxy session.
   * minimum: 1
   * @return expiryMinutes
   */
  @javax.annotation.Nullable
  public Integer getExpiryMinutes() {
    return expiryMinutes;
  }

  public void setExpiryMinutes(Integer expiryMinutes) {
    this.expiryMinutes = expiryMinutes;
  }


  public CreateProxySessionRequest capabilities(List<Capability> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public CreateProxySessionRequest addCapabilitiesItem(Capability capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * The proxy session capabilities.
   * @return capabilities
   */
  @javax.annotation.Nonnull
  public List<Capability> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<Capability> capabilities) {
    this.capabilities = capabilities;
  }


  public CreateProxySessionRequest numberSelectionBehavior(NumberSelectionBehaviorEnum numberSelectionBehavior) {
    this.numberSelectionBehavior = numberSelectionBehavior;
    return this;
  }

  /**
   * The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.
   * @return numberSelectionBehavior
   */
  @javax.annotation.Nullable
  public NumberSelectionBehaviorEnum getNumberSelectionBehavior() {
    return numberSelectionBehavior;
  }

  public void setNumberSelectionBehavior(NumberSelectionBehaviorEnum numberSelectionBehavior) {
    this.numberSelectionBehavior = numberSelectionBehavior;
  }


  public CreateProxySessionRequest geoMatchLevel(GeoMatchLevelEnum geoMatchLevel) {
    this.geoMatchLevel = geoMatchLevel;
    return this;
  }

  /**
   * The preference for matching the country or area code of the proxy phone number with that of the first participant.
   * @return geoMatchLevel
   */
  @javax.annotation.Nullable
  public GeoMatchLevelEnum getGeoMatchLevel() {
    return geoMatchLevel;
  }

  public void setGeoMatchLevel(GeoMatchLevelEnum geoMatchLevel) {
    this.geoMatchLevel = geoMatchLevel;
  }


  public CreateProxySessionRequest geoMatchParams(CreateProxySessionRequestGeoMatchParams geoMatchParams) {
    this.geoMatchParams = geoMatchParams;
    return this;
  }

  /**
   * Get geoMatchParams
   * @return geoMatchParams
   */
  @javax.annotation.Nullable
  public CreateProxySessionRequestGeoMatchParams getGeoMatchParams() {
    return geoMatchParams;
  }

  public void setGeoMatchParams(CreateProxySessionRequestGeoMatchParams geoMatchParams) {
    this.geoMatchParams = geoMatchParams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateProxySessionRequest createProxySessionRequest = (CreateProxySessionRequest) o;
    return Objects.equals(this.participantPhoneNumbers, createProxySessionRequest.participantPhoneNumbers) &&
        Objects.equals(this.name, createProxySessionRequest.name) &&
        Objects.equals(this.expiryMinutes, createProxySessionRequest.expiryMinutes) &&
        Objects.equals(this.capabilities, createProxySessionRequest.capabilities) &&
        Objects.equals(this.numberSelectionBehavior, createProxySessionRequest.numberSelectionBehavior) &&
        Objects.equals(this.geoMatchLevel, createProxySessionRequest.geoMatchLevel) &&
        Objects.equals(this.geoMatchParams, createProxySessionRequest.geoMatchParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(participantPhoneNumbers, name, expiryMinutes, capabilities, numberSelectionBehavior, geoMatchLevel, geoMatchParams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateProxySessionRequest {\n");
    sb.append("    participantPhoneNumbers: ").append(toIndentedString(participantPhoneNumbers)).append("\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    expiryMinutes: ").append(toIndentedString(expiryMinutes)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    numberSelectionBehavior: ").append(toIndentedString(numberSelectionBehavior)).append("\n");
    sb.append("    geoMatchLevel: ").append(toIndentedString(geoMatchLevel)).append("\n");
    sb.append("    geoMatchParams: ").append(toIndentedString(geoMatchParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ParticipantPhoneNumbers");
    openapiFields.add("Name");
    openapiFields.add("ExpiryMinutes");
    openapiFields.add("Capabilities");
    openapiFields.add("NumberSelectionBehavior");
    openapiFields.add("GeoMatchLevel");
    openapiFields.add("GeoMatchParams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ParticipantPhoneNumbers");
    openapiRequiredFields.add("Capabilities");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateProxySessionRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateProxySessionRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateProxySessionRequest is not found in the empty JSON string", CreateProxySessionRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateProxySessionRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateProxySessionRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateProxySessionRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("ParticipantPhoneNumbers") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("ParticipantPhoneNumbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ParticipantPhoneNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("ParticipantPhoneNumbers").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("Capabilities") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("Capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("Capabilities").toString()));
      }
      if ((jsonObj.get("NumberSelectionBehavior") != null && !jsonObj.get("NumberSelectionBehavior").isJsonNull()) && !jsonObj.get("NumberSelectionBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NumberSelectionBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NumberSelectionBehavior").toString()));
      }
      // validate the optional field `NumberSelectionBehavior`
      if (jsonObj.get("NumberSelectionBehavior") != null && !jsonObj.get("NumberSelectionBehavior").isJsonNull()) {
        NumberSelectionBehaviorEnum.validateJsonElement(jsonObj.get("NumberSelectionBehavior"));
      }
      if ((jsonObj.get("GeoMatchLevel") != null && !jsonObj.get("GeoMatchLevel").isJsonNull()) && !jsonObj.get("GeoMatchLevel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `GeoMatchLevel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("GeoMatchLevel").toString()));
      }
      // validate the optional field `GeoMatchLevel`
      if (jsonObj.get("GeoMatchLevel") != null && !jsonObj.get("GeoMatchLevel").isJsonNull()) {
        GeoMatchLevelEnum.validateJsonElement(jsonObj.get("GeoMatchLevel"));
      }
      // validate the optional field `GeoMatchParams`
      if (jsonObj.get("GeoMatchParams") != null && !jsonObj.get("GeoMatchParams").isJsonNull()) {
        CreateProxySessionRequestGeoMatchParams.validateJsonElement(jsonObj.get("GeoMatchParams"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateProxySessionRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateProxySessionRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateProxySessionRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateProxySessionRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateProxySessionRequest>() {
           @Override
           public void write(JsonWriter out, CreateProxySessionRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateProxySessionRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateProxySessionRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateProxySessionRequest
   * @throws IOException if the JSON string is invalid with respect to CreateProxySessionRequest
   */
  public static CreateProxySessionRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateProxySessionRequest.class);
  }

  /**
   * Convert an instance of CreateProxySessionRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

