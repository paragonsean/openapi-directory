/*
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AssociatePhoneNumberWithUserRequest;
import org.openapitools.client.model.AssociatePhoneNumbersWithVoiceConnectorGroupRequest;
import org.openapitools.client.model.AssociatePhoneNumbersWithVoiceConnectorGroupResponse;
import org.openapitools.client.model.AssociatePhoneNumbersWithVoiceConnectorRequest;
import org.openapitools.client.model.AssociatePhoneNumbersWithVoiceConnectorResponse;
import org.openapitools.client.model.AssociateSigninDelegateGroupsWithAccountRequest;
import org.openapitools.client.model.BatchCreateAttendeeRequest;
import org.openapitools.client.model.BatchCreateAttendeeResponse;
import org.openapitools.client.model.BatchCreateChannelMembershipRequest;
import org.openapitools.client.model.BatchCreateChannelMembershipResponse;
import org.openapitools.client.model.BatchCreateRoomMembershipRequest;
import org.openapitools.client.model.BatchCreateRoomMembershipResponse;
import org.openapitools.client.model.BatchDeletePhoneNumberRequest;
import org.openapitools.client.model.BatchDeletePhoneNumberResponse;
import org.openapitools.client.model.BatchSuspendUserRequest;
import org.openapitools.client.model.BatchSuspendUserResponse;
import org.openapitools.client.model.BatchUnsuspendUserRequest;
import org.openapitools.client.model.BatchUnsuspendUserResponse;
import org.openapitools.client.model.BatchUpdatePhoneNumberRequest;
import org.openapitools.client.model.BatchUpdatePhoneNumberResponse;
import org.openapitools.client.model.BatchUpdateUserRequest;
import org.openapitools.client.model.BatchUpdateUserResponse;
import org.openapitools.client.model.CreateAccountRequest;
import org.openapitools.client.model.CreateAccountResponse;
import org.openapitools.client.model.CreateAppInstanceAdminRequest;
import org.openapitools.client.model.CreateAppInstanceAdminResponse;
import org.openapitools.client.model.CreateAppInstanceRequest;
import org.openapitools.client.model.CreateAppInstanceResponse;
import org.openapitools.client.model.CreateAppInstanceUserRequest;
import org.openapitools.client.model.CreateAppInstanceUserResponse;
import org.openapitools.client.model.CreateAttendeeRequest;
import org.openapitools.client.model.CreateAttendeeResponse;
import org.openapitools.client.model.CreateBotRequest;
import org.openapitools.client.model.CreateBotResponse;
import org.openapitools.client.model.CreateChannelBanRequest;
import org.openapitools.client.model.CreateChannelBanResponse;
import org.openapitools.client.model.CreateChannelMembershipRequest;
import org.openapitools.client.model.CreateChannelMembershipResponse;
import org.openapitools.client.model.CreateChannelModeratorRequest;
import org.openapitools.client.model.CreateChannelModeratorResponse;
import org.openapitools.client.model.CreateChannelRequest;
import org.openapitools.client.model.CreateChannelResponse;
import org.openapitools.client.model.CreateMediaCapturePipelineRequest;
import org.openapitools.client.model.CreateMediaCapturePipelineResponse;
import org.openapitools.client.model.CreateMeetingDialOutRequest;
import org.openapitools.client.model.CreateMeetingDialOutResponse;
import org.openapitools.client.model.CreateMeetingRequest;
import org.openapitools.client.model.CreateMeetingResponse;
import org.openapitools.client.model.CreateMeetingWithAttendeesRequest;
import org.openapitools.client.model.CreateMeetingWithAttendeesResponse;
import org.openapitools.client.model.CreatePhoneNumberOrderRequest;
import org.openapitools.client.model.CreatePhoneNumberOrderResponse;
import org.openapitools.client.model.CreateProxySessionRequest;
import org.openapitools.client.model.CreateProxySessionResponse;
import org.openapitools.client.model.CreateRoomMembershipRequest;
import org.openapitools.client.model.CreateRoomMembershipResponse;
import org.openapitools.client.model.CreateRoomRequest;
import org.openapitools.client.model.CreateRoomResponse;
import org.openapitools.client.model.CreateSipMediaApplicationCallRequest;
import org.openapitools.client.model.CreateSipMediaApplicationCallResponse;
import org.openapitools.client.model.CreateSipMediaApplicationRequest;
import org.openapitools.client.model.CreateSipMediaApplicationResponse;
import org.openapitools.client.model.CreateSipRuleRequest;
import org.openapitools.client.model.CreateSipRuleResponse;
import org.openapitools.client.model.CreateUserRequest;
import org.openapitools.client.model.CreateUserResponse;
import org.openapitools.client.model.CreateVoiceConnectorGroupRequest;
import org.openapitools.client.model.CreateVoiceConnectorGroupResponse;
import org.openapitools.client.model.CreateVoiceConnectorRequest;
import org.openapitools.client.model.CreateVoiceConnectorResponse;
import org.openapitools.client.model.DeleteVoiceConnectorTerminationCredentialsRequest;
import org.openapitools.client.model.DescribeAppInstanceAdminResponse;
import org.openapitools.client.model.DescribeAppInstanceResponse;
import org.openapitools.client.model.DescribeAppInstanceUserResponse;
import org.openapitools.client.model.DescribeChannelBanResponse;
import org.openapitools.client.model.DescribeChannelMembershipForAppInstanceUserResponse;
import org.openapitools.client.model.DescribeChannelMembershipResponse;
import org.openapitools.client.model.DescribeChannelModeratedByAppInstanceUserResponse;
import org.openapitools.client.model.DescribeChannelModeratorResponse;
import org.openapitools.client.model.DescribeChannelResponse;
import org.openapitools.client.model.DisassociatePhoneNumbersFromVoiceConnectorGroupResponse;
import org.openapitools.client.model.DisassociatePhoneNumbersFromVoiceConnectorRequest;
import org.openapitools.client.model.DisassociatePhoneNumbersFromVoiceConnectorResponse;
import org.openapitools.client.model.DisassociateSigninDelegateGroupsFromAccountRequest;
import org.openapitools.client.model.GetAccountResponse;
import org.openapitools.client.model.GetAccountSettingsResponse;
import org.openapitools.client.model.GetAppInstanceRetentionSettingsResponse;
import org.openapitools.client.model.GetAppInstanceStreamingConfigurationsResponse;
import org.openapitools.client.model.GetAttendeeResponse;
import org.openapitools.client.model.GetBotResponse;
import org.openapitools.client.model.GetChannelMessageResponse;
import org.openapitools.client.model.GetEventsConfigurationResponse;
import org.openapitools.client.model.GetGlobalSettingsResponse;
import org.openapitools.client.model.GetMediaCapturePipelineResponse;
import org.openapitools.client.model.GetMeetingResponse;
import org.openapitools.client.model.GetMessagingSessionEndpointResponse;
import org.openapitools.client.model.GetPhoneNumberOrderResponse;
import org.openapitools.client.model.GetPhoneNumberResponse;
import org.openapitools.client.model.GetPhoneNumberSettingsResponse;
import org.openapitools.client.model.GetProxySessionResponse;
import org.openapitools.client.model.GetRetentionSettingsResponse;
import org.openapitools.client.model.GetRoomResponse;
import org.openapitools.client.model.GetSipMediaApplicationLoggingConfigurationResponse;
import org.openapitools.client.model.GetSipMediaApplicationResponse;
import org.openapitools.client.model.GetSipRuleResponse;
import org.openapitools.client.model.GetUserResponse;
import org.openapitools.client.model.GetUserSettingsResponse;
import org.openapitools.client.model.GetVoiceConnectorEmergencyCallingConfigurationResponse;
import org.openapitools.client.model.GetVoiceConnectorGroupResponse;
import org.openapitools.client.model.GetVoiceConnectorLoggingConfigurationResponse;
import org.openapitools.client.model.GetVoiceConnectorOriginationResponse;
import org.openapitools.client.model.GetVoiceConnectorProxyResponse;
import org.openapitools.client.model.GetVoiceConnectorResponse;
import org.openapitools.client.model.GetVoiceConnectorStreamingConfigurationResponse;
import org.openapitools.client.model.GetVoiceConnectorTerminationHealthResponse;
import org.openapitools.client.model.GetVoiceConnectorTerminationResponse;
import org.openapitools.client.model.InviteUsersRequest;
import org.openapitools.client.model.InviteUsersResponse;
import org.openapitools.client.model.ListAccountsResponse;
import org.openapitools.client.model.ListAppInstanceAdminsResponse;
import org.openapitools.client.model.ListAppInstanceUsersResponse;
import org.openapitools.client.model.ListAppInstancesResponse;
import org.openapitools.client.model.ListAttendeeTagsResponse;
import org.openapitools.client.model.ListAttendeesResponse;
import org.openapitools.client.model.ListBotsResponse;
import org.openapitools.client.model.ListChannelBansResponse;
import org.openapitools.client.model.ListChannelMembershipsForAppInstanceUserResponse;
import org.openapitools.client.model.ListChannelMembershipsResponse;
import org.openapitools.client.model.ListChannelMessagesResponse;
import org.openapitools.client.model.ListChannelModeratorsResponse;
import org.openapitools.client.model.ListChannelsModeratedByAppInstanceUserResponse;
import org.openapitools.client.model.ListChannelsResponse;
import org.openapitools.client.model.ListMediaCapturePipelinesResponse;
import org.openapitools.client.model.ListMeetingTagsResponse;
import org.openapitools.client.model.ListMeetingsResponse;
import org.openapitools.client.model.ListPhoneNumberOrdersResponse;
import org.openapitools.client.model.ListPhoneNumbersResponse;
import org.openapitools.client.model.ListProxySessionsResponse;
import org.openapitools.client.model.ListRoomMembershipsResponse;
import org.openapitools.client.model.ListRoomsResponse;
import org.openapitools.client.model.ListSipMediaApplicationsResponse;
import org.openapitools.client.model.ListSipRulesResponse;
import org.openapitools.client.model.ListSupportedPhoneNumberCountriesResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.ListUsersResponse;
import org.openapitools.client.model.ListVoiceConnectorGroupsResponse;
import org.openapitools.client.model.ListVoiceConnectorTerminationCredentialsResponse;
import org.openapitools.client.model.ListVoiceConnectorsResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PutAppInstanceRetentionSettingsRequest;
import org.openapitools.client.model.PutAppInstanceRetentionSettingsResponse;
import org.openapitools.client.model.PutAppInstanceStreamingConfigurationsRequest;
import org.openapitools.client.model.PutAppInstanceStreamingConfigurationsResponse;
import org.openapitools.client.model.PutEventsConfigurationRequest;
import org.openapitools.client.model.PutEventsConfigurationResponse;
import org.openapitools.client.model.PutRetentionSettingsRequest;
import org.openapitools.client.model.PutRetentionSettingsResponse;
import org.openapitools.client.model.PutSipMediaApplicationLoggingConfigurationRequest;
import org.openapitools.client.model.PutSipMediaApplicationLoggingConfigurationResponse;
import org.openapitools.client.model.PutVoiceConnectorEmergencyCallingConfigurationRequest;
import org.openapitools.client.model.PutVoiceConnectorEmergencyCallingConfigurationResponse;
import org.openapitools.client.model.PutVoiceConnectorLoggingConfigurationRequest;
import org.openapitools.client.model.PutVoiceConnectorLoggingConfigurationResponse;
import org.openapitools.client.model.PutVoiceConnectorOriginationRequest;
import org.openapitools.client.model.PutVoiceConnectorOriginationResponse;
import org.openapitools.client.model.PutVoiceConnectorProxyRequest;
import org.openapitools.client.model.PutVoiceConnectorProxyResponse;
import org.openapitools.client.model.PutVoiceConnectorStreamingConfigurationRequest;
import org.openapitools.client.model.PutVoiceConnectorStreamingConfigurationResponse;
import org.openapitools.client.model.PutVoiceConnectorTerminationCredentialsRequest;
import org.openapitools.client.model.PutVoiceConnectorTerminationRequest;
import org.openapitools.client.model.PutVoiceConnectorTerminationResponse;
import org.openapitools.client.model.RedactChannelMessageResponse;
import org.openapitools.client.model.RegenerateSecurityTokenResponse;
import org.openapitools.client.model.ResetPersonalPINResponse;
import org.openapitools.client.model.RestorePhoneNumberResponse;
import org.openapitools.client.model.SearchAvailablePhoneNumbersResponse;
import org.openapitools.client.model.SendChannelMessageRequest;
import org.openapitools.client.model.SendChannelMessageResponse;
import org.openapitools.client.model.StartMeetingTranscriptionRequest;
import org.openapitools.client.model.TagAttendeeRequest;
import org.openapitools.client.model.TagMeetingRequest;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UntagAttendeeRequest;
import org.openapitools.client.model.UntagMeetingRequest;
import org.openapitools.client.model.UntagResourceRequest;
import org.openapitools.client.model.UpdateAccountRequest;
import org.openapitools.client.model.UpdateAccountResponse;
import org.openapitools.client.model.UpdateAccountSettingsRequest;
import org.openapitools.client.model.UpdateAppInstanceRequest;
import org.openapitools.client.model.UpdateAppInstanceResponse;
import org.openapitools.client.model.UpdateAppInstanceUserRequest;
import org.openapitools.client.model.UpdateAppInstanceUserResponse;
import org.openapitools.client.model.UpdateBotRequest;
import org.openapitools.client.model.UpdateBotResponse;
import org.openapitools.client.model.UpdateChannelMessageRequest;
import org.openapitools.client.model.UpdateChannelMessageResponse;
import org.openapitools.client.model.UpdateChannelReadMarkerResponse;
import org.openapitools.client.model.UpdateChannelRequest;
import org.openapitools.client.model.UpdateChannelResponse;
import org.openapitools.client.model.UpdateGlobalSettingsRequest;
import org.openapitools.client.model.UpdatePhoneNumberRequest;
import org.openapitools.client.model.UpdatePhoneNumberResponse;
import org.openapitools.client.model.UpdatePhoneNumberSettingsRequest;
import org.openapitools.client.model.UpdateProxySessionRequest;
import org.openapitools.client.model.UpdateProxySessionResponse;
import org.openapitools.client.model.UpdateRoomMembershipRequest;
import org.openapitools.client.model.UpdateRoomMembershipResponse;
import org.openapitools.client.model.UpdateRoomRequest;
import org.openapitools.client.model.UpdateRoomResponse;
import org.openapitools.client.model.UpdateSipMediaApplicationCallRequest;
import org.openapitools.client.model.UpdateSipMediaApplicationCallResponse;
import org.openapitools.client.model.UpdateSipMediaApplicationRequest;
import org.openapitools.client.model.UpdateSipMediaApplicationResponse;
import org.openapitools.client.model.UpdateSipRuleRequest;
import org.openapitools.client.model.UpdateSipRuleResponse;
import org.openapitools.client.model.UpdateUserRequest;
import org.openapitools.client.model.UpdateUserResponse;
import org.openapitools.client.model.UpdateUserSettingsRequest;
import org.openapitools.client.model.UpdateVoiceConnectorGroupRequest;
import org.openapitools.client.model.UpdateVoiceConnectorGroupResponse;
import org.openapitools.client.model.UpdateVoiceConnectorRequest;
import org.openapitools.client.model.UpdateVoiceConnectorResponse;
import org.openapitools.client.model.ValidateE911AddressRequest;
import org.openapitools.client.model.ValidateE911AddressResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for associatePhoneNumberWithUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumberWithUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associatePhoneNumberWithUserCall(String accountId, String userId, String operation, AssociatePhoneNumberWithUserRequest associatePhoneNumberWithUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associatePhoneNumberWithUserRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users/{userId}#operation=associate-phone-number"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associatePhoneNumberWithUserValidateBeforeCall(String accountId, String userId, String operation, AssociatePhoneNumberWithUserRequest associatePhoneNumberWithUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling associatePhoneNumberWithUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling associatePhoneNumberWithUser(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling associatePhoneNumberWithUser(Async)");
        }

        // verify the required parameter 'associatePhoneNumberWithUserRequest' is set
        if (associatePhoneNumberWithUserRequest == null) {
            throw new ApiException("Missing the required parameter 'associatePhoneNumberWithUserRequest' when calling associatePhoneNumberWithUser(Async)");
        }

        return associatePhoneNumberWithUserCall(accountId, userId, operation, associatePhoneNumberWithUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Associates a phone number with the specified Amazon Chime user.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumberWithUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object associatePhoneNumberWithUser(String accountId, String userId, String operation, AssociatePhoneNumberWithUserRequest associatePhoneNumberWithUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = associatePhoneNumberWithUserWithHttpInfo(accountId, userId, operation, associatePhoneNumberWithUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Associates a phone number with the specified Amazon Chime user.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumberWithUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> associatePhoneNumberWithUserWithHttpInfo(String accountId, String userId, String operation, AssociatePhoneNumberWithUserRequest associatePhoneNumberWithUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associatePhoneNumberWithUserValidateBeforeCall(accountId, userId, operation, associatePhoneNumberWithUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Associates a phone number with the specified Amazon Chime user.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumberWithUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associatePhoneNumberWithUserAsync(String accountId, String userId, String operation, AssociatePhoneNumberWithUserRequest associatePhoneNumberWithUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = associatePhoneNumberWithUserValidateBeforeCall(accountId, userId, operation, associatePhoneNumberWithUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associatePhoneNumbersWithVoiceConnector
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumbersWithVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call associatePhoneNumbersWithVoiceConnectorCall(String voiceConnectorId, String operation, AssociatePhoneNumbersWithVoiceConnectorRequest associatePhoneNumbersWithVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associatePhoneNumbersWithVoiceConnectorRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}#operation=associate-phone-numbers"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call associatePhoneNumbersWithVoiceConnectorValidateBeforeCall(String voiceConnectorId, String operation, AssociatePhoneNumbersWithVoiceConnectorRequest associatePhoneNumbersWithVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling associatePhoneNumbersWithVoiceConnector(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling associatePhoneNumbersWithVoiceConnector(Async)");
        }

        // verify the required parameter 'associatePhoneNumbersWithVoiceConnectorRequest' is set
        if (associatePhoneNumbersWithVoiceConnectorRequest == null) {
            throw new ApiException("Missing the required parameter 'associatePhoneNumbersWithVoiceConnectorRequest' when calling associatePhoneNumbersWithVoiceConnector(Async)");
        }

        return associatePhoneNumbersWithVoiceConnectorCall(voiceConnectorId, operation, associatePhoneNumbersWithVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates phone numbers with the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_AssociatePhoneNumbersWithVoiceConnector.html\&quot;&gt;AssociatePhoneNumbersWithVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumbersWithVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AssociatePhoneNumbersWithVoiceConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AssociatePhoneNumbersWithVoiceConnectorResponse associatePhoneNumbersWithVoiceConnector(String voiceConnectorId, String operation, AssociatePhoneNumbersWithVoiceConnectorRequest associatePhoneNumbersWithVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AssociatePhoneNumbersWithVoiceConnectorResponse> localVarResp = associatePhoneNumbersWithVoiceConnectorWithHttpInfo(voiceConnectorId, operation, associatePhoneNumbersWithVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Associates phone numbers with the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_AssociatePhoneNumbersWithVoiceConnector.html\&quot;&gt;AssociatePhoneNumbersWithVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumbersWithVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AssociatePhoneNumbersWithVoiceConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AssociatePhoneNumbersWithVoiceConnectorResponse> associatePhoneNumbersWithVoiceConnectorWithHttpInfo(String voiceConnectorId, String operation, AssociatePhoneNumbersWithVoiceConnectorRequest associatePhoneNumbersWithVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associatePhoneNumbersWithVoiceConnectorValidateBeforeCall(voiceConnectorId, operation, associatePhoneNumbersWithVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AssociatePhoneNumbersWithVoiceConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates phone numbers with the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_AssociatePhoneNumbersWithVoiceConnector.html\&quot;&gt;AssociatePhoneNumbersWithVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumbersWithVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call associatePhoneNumbersWithVoiceConnectorAsync(String voiceConnectorId, String operation, AssociatePhoneNumbersWithVoiceConnectorRequest associatePhoneNumbersWithVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AssociatePhoneNumbersWithVoiceConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associatePhoneNumbersWithVoiceConnectorValidateBeforeCall(voiceConnectorId, operation, associatePhoneNumbersWithVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AssociatePhoneNumbersWithVoiceConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associatePhoneNumbersWithVoiceConnectorGroup
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumbersWithVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call associatePhoneNumbersWithVoiceConnectorGroupCall(String voiceConnectorGroupId, String operation, AssociatePhoneNumbersWithVoiceConnectorGroupRequest associatePhoneNumbersWithVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associatePhoneNumbersWithVoiceConnectorGroupRequest;

        // create path and map variables
        String localVarPath = "/voice-connector-groups/{voiceConnectorGroupId}#operation=associate-phone-numbers"
            .replace("{" + "voiceConnectorGroupId" + "}", localVarApiClient.escapeString(voiceConnectorGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call associatePhoneNumbersWithVoiceConnectorGroupValidateBeforeCall(String voiceConnectorGroupId, String operation, AssociatePhoneNumbersWithVoiceConnectorGroupRequest associatePhoneNumbersWithVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorGroupId' is set
        if (voiceConnectorGroupId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorGroupId' when calling associatePhoneNumbersWithVoiceConnectorGroup(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling associatePhoneNumbersWithVoiceConnectorGroup(Async)");
        }

        // verify the required parameter 'associatePhoneNumbersWithVoiceConnectorGroupRequest' is set
        if (associatePhoneNumbersWithVoiceConnectorGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'associatePhoneNumbersWithVoiceConnectorGroupRequest' when calling associatePhoneNumbersWithVoiceConnectorGroup(Async)");
        }

        return associatePhoneNumbersWithVoiceConnectorGroupCall(voiceConnectorGroupId, operation, associatePhoneNumbersWithVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Associates phone numbers with the specified Amazon Chime Voice Connector group.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_AssociatePhoneNumbersWithVoiceConnectorGroup.html\&quot;&gt;AssociatePhoneNumbersWithVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumbersWithVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return AssociatePhoneNumbersWithVoiceConnectorGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public AssociatePhoneNumbersWithVoiceConnectorGroupResponse associatePhoneNumbersWithVoiceConnectorGroup(String voiceConnectorGroupId, String operation, AssociatePhoneNumbersWithVoiceConnectorGroupRequest associatePhoneNumbersWithVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<AssociatePhoneNumbersWithVoiceConnectorGroupResponse> localVarResp = associatePhoneNumbersWithVoiceConnectorGroupWithHttpInfo(voiceConnectorGroupId, operation, associatePhoneNumbersWithVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Associates phone numbers with the specified Amazon Chime Voice Connector group.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_AssociatePhoneNumbersWithVoiceConnectorGroup.html\&quot;&gt;AssociatePhoneNumbersWithVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumbersWithVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;AssociatePhoneNumbersWithVoiceConnectorGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<AssociatePhoneNumbersWithVoiceConnectorGroupResponse> associatePhoneNumbersWithVoiceConnectorGroupWithHttpInfo(String voiceConnectorGroupId, String operation, AssociatePhoneNumbersWithVoiceConnectorGroupRequest associatePhoneNumbersWithVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associatePhoneNumbersWithVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, operation, associatePhoneNumbersWithVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<AssociatePhoneNumbersWithVoiceConnectorGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Associates phone numbers with the specified Amazon Chime Voice Connector group.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_AssociatePhoneNumbersWithVoiceConnectorGroup.html\&quot;&gt;AssociatePhoneNumbersWithVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param operation  (required)
     * @param associatePhoneNumbersWithVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call associatePhoneNumbersWithVoiceConnectorGroupAsync(String voiceConnectorGroupId, String operation, AssociatePhoneNumbersWithVoiceConnectorGroupRequest associatePhoneNumbersWithVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<AssociatePhoneNumbersWithVoiceConnectorGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associatePhoneNumbersWithVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, operation, associatePhoneNumbersWithVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<AssociatePhoneNumbersWithVoiceConnectorGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for associateSigninDelegateGroupsWithAccount
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param associateSigninDelegateGroupsWithAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateSigninDelegateGroupsWithAccountCall(String accountId, String operation, AssociateSigninDelegateGroupsWithAccountRequest associateSigninDelegateGroupsWithAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = associateSigninDelegateGroupsWithAccountRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}#operation=associate-signin-delegate-groups"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associateSigninDelegateGroupsWithAccountValidateBeforeCall(String accountId, String operation, AssociateSigninDelegateGroupsWithAccountRequest associateSigninDelegateGroupsWithAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling associateSigninDelegateGroupsWithAccount(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling associateSigninDelegateGroupsWithAccount(Async)");
        }

        // verify the required parameter 'associateSigninDelegateGroupsWithAccountRequest' is set
        if (associateSigninDelegateGroupsWithAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'associateSigninDelegateGroupsWithAccountRequest' when calling associateSigninDelegateGroupsWithAccount(Async)");
        }

        return associateSigninDelegateGroupsWithAccountCall(accountId, operation, associateSigninDelegateGroupsWithAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Associates the specified sign-in delegate groups with the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param associateSigninDelegateGroupsWithAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object associateSigninDelegateGroupsWithAccount(String accountId, String operation, AssociateSigninDelegateGroupsWithAccountRequest associateSigninDelegateGroupsWithAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = associateSigninDelegateGroupsWithAccountWithHttpInfo(accountId, operation, associateSigninDelegateGroupsWithAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Associates the specified sign-in delegate groups with the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param associateSigninDelegateGroupsWithAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> associateSigninDelegateGroupsWithAccountWithHttpInfo(String accountId, String operation, AssociateSigninDelegateGroupsWithAccountRequest associateSigninDelegateGroupsWithAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = associateSigninDelegateGroupsWithAccountValidateBeforeCall(accountId, operation, associateSigninDelegateGroupsWithAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Associates the specified sign-in delegate groups with the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param associateSigninDelegateGroupsWithAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call associateSigninDelegateGroupsWithAccountAsync(String accountId, String operation, AssociateSigninDelegateGroupsWithAccountRequest associateSigninDelegateGroupsWithAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = associateSigninDelegateGroupsWithAccountValidateBeforeCall(accountId, operation, associateSigninDelegateGroupsWithAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchCreateAttendee
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param batchCreateAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call batchCreateAttendeeCall(String meetingId, String operation, BatchCreateAttendeeRequest batchCreateAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchCreateAttendeeRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/attendees#operation=batch-create"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchCreateAttendeeValidateBeforeCall(String meetingId, String operation, BatchCreateAttendeeRequest batchCreateAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling batchCreateAttendee(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling batchCreateAttendee(Async)");
        }

        // verify the required parameter 'batchCreateAttendeeRequest' is set
        if (batchCreateAttendeeRequest == null) {
            throw new ApiException("Missing the required parameter 'batchCreateAttendeeRequest' when calling batchCreateAttendee(Async)");
        }

        return batchCreateAttendeeCall(meetingId, operation, batchCreateAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates up to 100 new attendees for an active Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_BatchCreateAttendee.html\&quot;&gt;BatchCreateAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param batchCreateAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchCreateAttendeeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BatchCreateAttendeeResponse batchCreateAttendee(String meetingId, String operation, BatchCreateAttendeeRequest batchCreateAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchCreateAttendeeResponse> localVarResp = batchCreateAttendeeWithHttpInfo(meetingId, operation, batchCreateAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates up to 100 new attendees for an active Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_BatchCreateAttendee.html\&quot;&gt;BatchCreateAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param batchCreateAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchCreateAttendeeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BatchCreateAttendeeResponse> batchCreateAttendeeWithHttpInfo(String meetingId, String operation, BatchCreateAttendeeRequest batchCreateAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchCreateAttendeeValidateBeforeCall(meetingId, operation, batchCreateAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchCreateAttendeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates up to 100 new attendees for an active Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_BatchCreateAttendee.html\&quot;&gt;BatchCreateAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param batchCreateAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call batchCreateAttendeeAsync(String meetingId, String operation, BatchCreateAttendeeRequest batchCreateAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchCreateAttendeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchCreateAttendeeValidateBeforeCall(meetingId, operation, batchCreateAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchCreateAttendeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchCreateChannelMembership
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param operation  (required)
     * @param batchCreateChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call batchCreateChannelMembershipCall(String channelArn, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchCreateChannelMembershipRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships#operation=batch-create"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchCreateChannelMembershipValidateBeforeCall(String channelArn, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling batchCreateChannelMembership(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling batchCreateChannelMembership(Async)");
        }

        // verify the required parameter 'batchCreateChannelMembershipRequest' is set
        if (batchCreateChannelMembershipRequest == null) {
            throw new ApiException("Missing the required parameter 'batchCreateChannelMembershipRequest' when calling batchCreateChannelMembership(Async)");
        }

        return batchCreateChannelMembershipCall(channelArn, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a specified number of users to a channel.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_BatchCreateChannelMembership.html\&quot;&gt;BatchCreateChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param operation  (required)
     * @param batchCreateChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return BatchCreateChannelMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BatchCreateChannelMembershipResponse batchCreateChannelMembership(String channelArn, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<BatchCreateChannelMembershipResponse> localVarResp = batchCreateChannelMembershipWithHttpInfo(channelArn, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds a specified number of users to a channel.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_BatchCreateChannelMembership.html\&quot;&gt;BatchCreateChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param operation  (required)
     * @param batchCreateChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;BatchCreateChannelMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BatchCreateChannelMembershipResponse> batchCreateChannelMembershipWithHttpInfo(String channelArn, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = batchCreateChannelMembershipValidateBeforeCall(channelArn, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<BatchCreateChannelMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a specified number of users to a channel.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_BatchCreateChannelMembership.html\&quot;&gt;BatchCreateChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param operation  (required)
     * @param batchCreateChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call batchCreateChannelMembershipAsync(String channelArn, String operation, BatchCreateChannelMembershipRequest batchCreateChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<BatchCreateChannelMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchCreateChannelMembershipValidateBeforeCall(channelArn, operation, batchCreateChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<BatchCreateChannelMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchCreateRoomMembership
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param operation  (required)
     * @param batchCreateRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCreateRoomMembershipCall(String accountId, String roomId, String operation, BatchCreateRoomMembershipRequest batchCreateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchCreateRoomMembershipRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}/memberships#operation=batch-create"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchCreateRoomMembershipValidateBeforeCall(String accountId, String roomId, String operation, BatchCreateRoomMembershipRequest batchCreateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling batchCreateRoomMembership(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling batchCreateRoomMembership(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling batchCreateRoomMembership(Async)");
        }

        // verify the required parameter 'batchCreateRoomMembershipRequest' is set
        if (batchCreateRoomMembershipRequest == null) {
            throw new ApiException("Missing the required parameter 'batchCreateRoomMembershipRequest' when calling batchCreateRoomMembership(Async)");
        }

        return batchCreateRoomMembershipCall(accountId, roomId, operation, batchCreateRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param operation  (required)
     * @param batchCreateRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchCreateRoomMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public BatchCreateRoomMembershipResponse batchCreateRoomMembership(String accountId, String roomId, String operation, BatchCreateRoomMembershipRequest batchCreateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchCreateRoomMembershipResponse> localVarResp = batchCreateRoomMembershipWithHttpInfo(accountId, roomId, operation, batchCreateRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param operation  (required)
     * @param batchCreateRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchCreateRoomMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchCreateRoomMembershipResponse> batchCreateRoomMembershipWithHttpInfo(String accountId, String roomId, String operation, BatchCreateRoomMembershipRequest batchCreateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchCreateRoomMembershipValidateBeforeCall(accountId, roomId, operation, batchCreateRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchCreateRoomMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds up to 50 members to a chat room in an Amazon Chime Enterprise account. Members can be users or bots. The member role designates whether the member is a chat room administrator or a general chat room member.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param operation  (required)
     * @param batchCreateRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCreateRoomMembershipAsync(String accountId, String roomId, String operation, BatchCreateRoomMembershipRequest batchCreateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchCreateRoomMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchCreateRoomMembershipValidateBeforeCall(accountId, roomId, operation, batchCreateRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchCreateRoomMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchDeletePhoneNumber
     * @param operation  (required)
     * @param batchDeletePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDeletePhoneNumberCall(String operation, BatchDeletePhoneNumberRequest batchDeletePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchDeletePhoneNumberRequest;

        // create path and map variables
        String localVarPath = "/phone-numbers#operation=batch-delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchDeletePhoneNumberValidateBeforeCall(String operation, BatchDeletePhoneNumberRequest batchDeletePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling batchDeletePhoneNumber(Async)");
        }

        // verify the required parameter 'batchDeletePhoneNumberRequest' is set
        if (batchDeletePhoneNumberRequest == null) {
            throw new ApiException("Missing the required parameter 'batchDeletePhoneNumberRequest' when calling batchDeletePhoneNumber(Async)");
        }

        return batchDeletePhoneNumberCall(operation, batchDeletePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Moves phone numbers into the &lt;b&gt;Deletion queue&lt;/b&gt;. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted. &lt;/p&gt; &lt;p&gt; Phone numbers remain in the &lt;b&gt;Deletion queue&lt;/b&gt; for 7 days before they are deleted permanently. &lt;/p&gt;
     * @param operation  (required)
     * @param batchDeletePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchDeletePhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public BatchDeletePhoneNumberResponse batchDeletePhoneNumber(String operation, BatchDeletePhoneNumberRequest batchDeletePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchDeletePhoneNumberResponse> localVarResp = batchDeletePhoneNumberWithHttpInfo(operation, batchDeletePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Moves phone numbers into the &lt;b&gt;Deletion queue&lt;/b&gt;. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted. &lt;/p&gt; &lt;p&gt; Phone numbers remain in the &lt;b&gt;Deletion queue&lt;/b&gt; for 7 days before they are deleted permanently. &lt;/p&gt;
     * @param operation  (required)
     * @param batchDeletePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchDeletePhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchDeletePhoneNumberResponse> batchDeletePhoneNumberWithHttpInfo(String operation, BatchDeletePhoneNumberRequest batchDeletePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchDeletePhoneNumberValidateBeforeCall(operation, batchDeletePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchDeletePhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Moves phone numbers into the &lt;b&gt;Deletion queue&lt;/b&gt;. Phone numbers must be disassociated from any users or Amazon Chime Voice Connectors before they can be deleted. &lt;/p&gt; &lt;p&gt; Phone numbers remain in the &lt;b&gt;Deletion queue&lt;/b&gt; for 7 days before they are deleted permanently. &lt;/p&gt;
     * @param operation  (required)
     * @param batchDeletePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchDeletePhoneNumberAsync(String operation, BatchDeletePhoneNumberRequest batchDeletePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchDeletePhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchDeletePhoneNumberValidateBeforeCall(operation, batchDeletePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchDeletePhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchSuspendUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param batchSuspendUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchSuspendUserCall(String accountId, String operation, BatchSuspendUserRequest batchSuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchSuspendUserRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users#operation=suspend"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchSuspendUserValidateBeforeCall(String accountId, String operation, BatchSuspendUserRequest batchSuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling batchSuspendUser(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling batchSuspendUser(Async)");
        }

        // verify the required parameter 'batchSuspendUserRequest' is set
        if (batchSuspendUserRequest == null) {
            throw new ApiException("Missing the required parameter 'batchSuspendUserRequest' when calling batchSuspendUser(Async)");
        }

        return batchSuspendUserCall(accountId, operation, batchSuspendUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Suspends up to 50 users from a &lt;code&gt;Team&lt;/code&gt; or &lt;code&gt;EnterpriseLWA&lt;/code&gt; Amazon Chime account. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt;Managing Your Amazon Chime Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Users suspended from a &lt;code&gt;Team&lt;/code&gt; account are disassociated from the account,but they can continue to use Amazon Chime as free users. To remove the suspension from suspended &lt;code&gt;Team&lt;/code&gt; account users, invite them to the &lt;code&gt;Team&lt;/code&gt; account again. You can use the &lt;a&gt;InviteUsers&lt;/a&gt; action to do so.&lt;/p&gt; &lt;p&gt;Users suspended from an &lt;code&gt;EnterpriseLWA&lt;/code&gt; account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended &lt;code&gt;EnterpriseLWA&lt;/code&gt; account users, use the &lt;a&gt;BatchUnsuspendUser&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt; To sign out users without suspending them, use the &lt;a&gt;LogoutUser&lt;/a&gt; action.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param batchSuspendUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchSuspendUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public BatchSuspendUserResponse batchSuspendUser(String accountId, String operation, BatchSuspendUserRequest batchSuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchSuspendUserResponse> localVarResp = batchSuspendUserWithHttpInfo(accountId, operation, batchSuspendUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Suspends up to 50 users from a &lt;code&gt;Team&lt;/code&gt; or &lt;code&gt;EnterpriseLWA&lt;/code&gt; Amazon Chime account. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt;Managing Your Amazon Chime Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Users suspended from a &lt;code&gt;Team&lt;/code&gt; account are disassociated from the account,but they can continue to use Amazon Chime as free users. To remove the suspension from suspended &lt;code&gt;Team&lt;/code&gt; account users, invite them to the &lt;code&gt;Team&lt;/code&gt; account again. You can use the &lt;a&gt;InviteUsers&lt;/a&gt; action to do so.&lt;/p&gt; &lt;p&gt;Users suspended from an &lt;code&gt;EnterpriseLWA&lt;/code&gt; account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended &lt;code&gt;EnterpriseLWA&lt;/code&gt; account users, use the &lt;a&gt;BatchUnsuspendUser&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt; To sign out users without suspending them, use the &lt;a&gt;LogoutUser&lt;/a&gt; action.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param batchSuspendUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchSuspendUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchSuspendUserResponse> batchSuspendUserWithHttpInfo(String accountId, String operation, BatchSuspendUserRequest batchSuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchSuspendUserValidateBeforeCall(accountId, operation, batchSuspendUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchSuspendUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Suspends up to 50 users from a &lt;code&gt;Team&lt;/code&gt; or &lt;code&gt;EnterpriseLWA&lt;/code&gt; Amazon Chime account. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt;Managing Your Amazon Chime Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Users suspended from a &lt;code&gt;Team&lt;/code&gt; account are disassociated from the account,but they can continue to use Amazon Chime as free users. To remove the suspension from suspended &lt;code&gt;Team&lt;/code&gt; account users, invite them to the &lt;code&gt;Team&lt;/code&gt; account again. You can use the &lt;a&gt;InviteUsers&lt;/a&gt; action to do so.&lt;/p&gt; &lt;p&gt;Users suspended from an &lt;code&gt;EnterpriseLWA&lt;/code&gt; account are immediately signed out of Amazon Chime and can no longer sign in. To remove the suspension from suspended &lt;code&gt;EnterpriseLWA&lt;/code&gt; account users, use the &lt;a&gt;BatchUnsuspendUser&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt; To sign out users without suspending them, use the &lt;a&gt;LogoutUser&lt;/a&gt; action.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param batchSuspendUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchSuspendUserAsync(String accountId, String operation, BatchSuspendUserRequest batchSuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchSuspendUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchSuspendUserValidateBeforeCall(accountId, operation, batchSuspendUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchSuspendUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchUnsuspendUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param batchUnsuspendUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUnsuspendUserCall(String accountId, String operation, BatchUnsuspendUserRequest batchUnsuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchUnsuspendUserRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users#operation=unsuspend"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUnsuspendUserValidateBeforeCall(String accountId, String operation, BatchUnsuspendUserRequest batchUnsuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling batchUnsuspendUser(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling batchUnsuspendUser(Async)");
        }

        // verify the required parameter 'batchUnsuspendUserRequest' is set
        if (batchUnsuspendUserRequest == null) {
            throw new ApiException("Missing the required parameter 'batchUnsuspendUserRequest' when calling batchUnsuspendUser(Async)");
        }

        return batchUnsuspendUserCall(accountId, operation, batchUnsuspendUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime &lt;code&gt;EnterpriseLWA&lt;/code&gt; account. Only users on &lt;code&gt;EnterpriseLWA&lt;/code&gt; accounts can be unsuspended using this action. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt; Managing Your Amazon Chime Accounts &lt;/a&gt; in the account types, in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Previously suspended users who are unsuspended using this action are returned to &lt;code&gt;Registered&lt;/code&gt; status. Users who are not previously suspended are ignored.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param batchUnsuspendUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchUnsuspendUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public BatchUnsuspendUserResponse batchUnsuspendUser(String accountId, String operation, BatchUnsuspendUserRequest batchUnsuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchUnsuspendUserResponse> localVarResp = batchUnsuspendUserWithHttpInfo(accountId, operation, batchUnsuspendUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime &lt;code&gt;EnterpriseLWA&lt;/code&gt; account. Only users on &lt;code&gt;EnterpriseLWA&lt;/code&gt; accounts can be unsuspended using this action. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt; Managing Your Amazon Chime Accounts &lt;/a&gt; in the account types, in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Previously suspended users who are unsuspended using this action are returned to &lt;code&gt;Registered&lt;/code&gt; status. Users who are not previously suspended are ignored.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param batchUnsuspendUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchUnsuspendUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchUnsuspendUserResponse> batchUnsuspendUserWithHttpInfo(String accountId, String operation, BatchUnsuspendUserRequest batchUnsuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchUnsuspendUserValidateBeforeCall(accountId, operation, batchUnsuspendUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchUnsuspendUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes the suspension from up to 50 previously suspended users for the specified Amazon Chime &lt;code&gt;EnterpriseLWA&lt;/code&gt; account. Only users on &lt;code&gt;EnterpriseLWA&lt;/code&gt; accounts can be unsuspended using this action. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt; Managing Your Amazon Chime Accounts &lt;/a&gt; in the account types, in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;Previously suspended users who are unsuspended using this action are returned to &lt;code&gt;Registered&lt;/code&gt; status. Users who are not previously suspended are ignored.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param batchUnsuspendUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUnsuspendUserAsync(String accountId, String operation, BatchUnsuspendUserRequest batchUnsuspendUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchUnsuspendUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUnsuspendUserValidateBeforeCall(accountId, operation, batchUnsuspendUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchUnsuspendUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchUpdatePhoneNumber
     * @param operation  (required)
     * @param batchUpdatePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdatePhoneNumberCall(String operation, BatchUpdatePhoneNumberRequest batchUpdatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchUpdatePhoneNumberRequest;

        // create path and map variables
        String localVarPath = "/phone-numbers#operation=batch-update";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUpdatePhoneNumberValidateBeforeCall(String operation, BatchUpdatePhoneNumberRequest batchUpdatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling batchUpdatePhoneNumber(Async)");
        }

        // verify the required parameter 'batchUpdatePhoneNumberRequest' is set
        if (batchUpdatePhoneNumberRequest == null) {
            throw new ApiException("Missing the required parameter 'batchUpdatePhoneNumberRequest' when calling batchUpdatePhoneNumber(Async)");
        }

        return batchUpdatePhoneNumberCall(operation, batchUpdatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates phone number product types or calling names. You can update one attribute at a time for each &lt;code&gt;UpdatePhoneNumberRequestItem&lt;/code&gt;. For example, you can update the product type or the calling name.&lt;/p&gt; &lt;p&gt;For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.&lt;/p&gt; &lt;p&gt;Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.&lt;/p&gt;
     * @param operation  (required)
     * @param batchUpdatePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchUpdatePhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public BatchUpdatePhoneNumberResponse batchUpdatePhoneNumber(String operation, BatchUpdatePhoneNumberRequest batchUpdatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchUpdatePhoneNumberResponse> localVarResp = batchUpdatePhoneNumberWithHttpInfo(operation, batchUpdatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates phone number product types or calling names. You can update one attribute at a time for each &lt;code&gt;UpdatePhoneNumberRequestItem&lt;/code&gt;. For example, you can update the product type or the calling name.&lt;/p&gt; &lt;p&gt;For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.&lt;/p&gt; &lt;p&gt;Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.&lt;/p&gt;
     * @param operation  (required)
     * @param batchUpdatePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchUpdatePhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchUpdatePhoneNumberResponse> batchUpdatePhoneNumberWithHttpInfo(String operation, BatchUpdatePhoneNumberRequest batchUpdatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchUpdatePhoneNumberValidateBeforeCall(operation, batchUpdatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchUpdatePhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates phone number product types or calling names. You can update one attribute at a time for each &lt;code&gt;UpdatePhoneNumberRequestItem&lt;/code&gt;. For example, you can update the product type or the calling name.&lt;/p&gt; &lt;p&gt;For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.&lt;/p&gt; &lt;p&gt;Updates to outbound calling names can take up to 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.&lt;/p&gt;
     * @param operation  (required)
     * @param batchUpdatePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdatePhoneNumberAsync(String operation, BatchUpdatePhoneNumberRequest batchUpdatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchUpdatePhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUpdatePhoneNumberValidateBeforeCall(operation, batchUpdatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchUpdatePhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for batchUpdateUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param batchUpdateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateUserCall(String accountId, BatchUpdateUserRequest batchUpdateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchUpdateUserRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchUpdateUserValidateBeforeCall(String accountId, BatchUpdateUserRequest batchUpdateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling batchUpdateUser(Async)");
        }

        // verify the required parameter 'batchUpdateUserRequest' is set
        if (batchUpdateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'batchUpdateUserRequest' when calling batchUpdateUser(Async)");
        }

        return batchUpdateUserCall(accountId, batchUpdateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates user details within the &lt;a&gt;UpdateUserRequestItem&lt;/a&gt; object for up to 20 users for the specified Amazon Chime account. Currently, only &lt;code&gt;LicenseType&lt;/code&gt; updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param batchUpdateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return BatchUpdateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public BatchUpdateUserResponse batchUpdateUser(String accountId, BatchUpdateUserRequest batchUpdateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<BatchUpdateUserResponse> localVarResp = batchUpdateUserWithHttpInfo(accountId, batchUpdateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates user details within the &lt;a&gt;UpdateUserRequestItem&lt;/a&gt; object for up to 20 users for the specified Amazon Chime account. Currently, only &lt;code&gt;LicenseType&lt;/code&gt; updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param batchUpdateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;BatchUpdateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchUpdateUserResponse> batchUpdateUserWithHttpInfo(String accountId, BatchUpdateUserRequest batchUpdateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = batchUpdateUserValidateBeforeCall(accountId, batchUpdateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<BatchUpdateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates user details within the &lt;a&gt;UpdateUserRequestItem&lt;/a&gt; object for up to 20 users for the specified Amazon Chime account. Currently, only &lt;code&gt;LicenseType&lt;/code&gt; updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param batchUpdateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchUpdateUserAsync(String accountId, BatchUpdateUserRequest batchUpdateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<BatchUpdateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchUpdateUserValidateBeforeCall(accountId, batchUpdateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<BatchUpdateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAccount
     * @param createAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountCall(CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAccountRequest;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountValidateBeforeCall(CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAccountRequest' is set
        if (createAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'createAccountRequest' when calling createAccount(Async)");
        }

        return createAccountCall(createAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an Amazon Chime account under the administrator&#39;s AWS account. Only &lt;code&gt;Team&lt;/code&gt; account types are currently supported for this action. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt;Managing Your Amazon Chime Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.
     * @param createAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateAccountResponse createAccount(CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateAccountResponse> localVarResp = createAccountWithHttpInfo(createAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an Amazon Chime account under the administrator&#39;s AWS account. Only &lt;code&gt;Team&lt;/code&gt; account types are currently supported for this action. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt;Managing Your Amazon Chime Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.
     * @param createAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAccountResponse> createAccountWithHttpInfo(CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createAccountValidateBeforeCall(createAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an Amazon Chime account under the administrator&#39;s AWS account. Only &lt;code&gt;Team&lt;/code&gt; account types are currently supported for this action. For more information about different account types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/manage-chime-account.html\&quot;&gt;Managing Your Amazon Chime Accounts&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.
     * @param createAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAccountAsync(CreateAccountRequest createAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountValidateBeforeCall(createAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAppInstance
     * @param createAppInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createAppInstanceCall(CreateAppInstanceRequest createAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppInstanceRequest;

        // create path and map variables
        String localVarPath = "/app-instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAppInstanceValidateBeforeCall(CreateAppInstanceRequest createAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAppInstanceRequest' is set
        if (createAppInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'createAppInstanceRequest' when calling createAppInstance(Async)");
        }

        return createAppInstanceCall(createAppInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Chime SDK messaging &lt;code&gt;AppInstance&lt;/code&gt; under an AWS account. Only SDK messaging customers use this API. &lt;code&gt;CreateAppInstance&lt;/code&gt; supports idempotency behavior as described in the AWS API Standard.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstance.html\&quot;&gt;CreateAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createAppInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateAppInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateAppInstanceResponse createAppInstance(CreateAppInstanceRequest createAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateAppInstanceResponse> localVarResp = createAppInstanceWithHttpInfo(createAppInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Chime SDK messaging &lt;code&gt;AppInstance&lt;/code&gt; under an AWS account. Only SDK messaging customers use this API. &lt;code&gt;CreateAppInstance&lt;/code&gt; supports idempotency behavior as described in the AWS API Standard.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstance.html\&quot;&gt;CreateAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createAppInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateAppInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateAppInstanceResponse> createAppInstanceWithHttpInfo(CreateAppInstanceRequest createAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createAppInstanceValidateBeforeCall(createAppInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateAppInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon Chime SDK messaging &lt;code&gt;AppInstance&lt;/code&gt; under an AWS account. Only SDK messaging customers use this API. &lt;code&gt;CreateAppInstance&lt;/code&gt; supports idempotency behavior as described in the AWS API Standard.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstance.html\&quot;&gt;CreateAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createAppInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createAppInstanceAsync(CreateAppInstanceRequest createAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateAppInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAppInstanceValidateBeforeCall(createAppInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateAppInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAppInstanceAdmin
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param createAppInstanceAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createAppInstanceAdminCall(String appInstanceArn, CreateAppInstanceAdminRequest createAppInstanceAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppInstanceAdminRequest;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/admins"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAppInstanceAdminValidateBeforeCall(String appInstanceArn, CreateAppInstanceAdminRequest createAppInstanceAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling createAppInstanceAdmin(Async)");
        }

        // verify the required parameter 'createAppInstanceAdminRequest' is set
        if (createAppInstanceAdminRequest == null) {
            throw new ApiException("Missing the required parameter 'createAppInstanceAdminRequest' when calling createAppInstanceAdmin(Async)");
        }

        return createAppInstanceAdminCall(appInstanceArn, createAppInstanceAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Promotes an &lt;code&gt;AppInstanceUser&lt;/code&gt; to an &lt;code&gt;AppInstanceAdmin&lt;/code&gt;. The promoted user can perform the following actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstanceAdmin.html\&quot;&gt;CreateAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChannelModerator&lt;/code&gt; actions across all channels in the &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeleteChannelMessage&lt;/code&gt; actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceUser&lt;/code&gt; can be promoted to an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; role.&lt;/p&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param createAppInstanceAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateAppInstanceAdminResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateAppInstanceAdminResponse createAppInstanceAdmin(String appInstanceArn, CreateAppInstanceAdminRequest createAppInstanceAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateAppInstanceAdminResponse> localVarResp = createAppInstanceAdminWithHttpInfo(appInstanceArn, createAppInstanceAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Promotes an &lt;code&gt;AppInstanceUser&lt;/code&gt; to an &lt;code&gt;AppInstanceAdmin&lt;/code&gt;. The promoted user can perform the following actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstanceAdmin.html\&quot;&gt;CreateAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChannelModerator&lt;/code&gt; actions across all channels in the &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeleteChannelMessage&lt;/code&gt; actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceUser&lt;/code&gt; can be promoted to an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; role.&lt;/p&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param createAppInstanceAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateAppInstanceAdminResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateAppInstanceAdminResponse> createAppInstanceAdminWithHttpInfo(String appInstanceArn, CreateAppInstanceAdminRequest createAppInstanceAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createAppInstanceAdminValidateBeforeCall(appInstanceArn, createAppInstanceAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateAppInstanceAdminResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Promotes an &lt;code&gt;AppInstanceUser&lt;/code&gt; to an &lt;code&gt;AppInstanceAdmin&lt;/code&gt;. The promoted user can perform the following actions. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstanceAdmin.html\&quot;&gt;CreateAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ChannelModerator&lt;/code&gt; actions across all channels in the &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;DeleteChannelMessage&lt;/code&gt; actions.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceUser&lt;/code&gt; can be promoted to an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; role.&lt;/p&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param createAppInstanceAdminRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createAppInstanceAdminAsync(String appInstanceArn, CreateAppInstanceAdminRequest createAppInstanceAdminRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateAppInstanceAdminResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAppInstanceAdminValidateBeforeCall(appInstanceArn, createAppInstanceAdminRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateAppInstanceAdminResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAppInstanceUser
     * @param createAppInstanceUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createAppInstanceUserCall(CreateAppInstanceUserRequest createAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAppInstanceUserRequest;

        // create path and map variables
        String localVarPath = "/app-instance-users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAppInstanceUserValidateBeforeCall(CreateAppInstanceUserRequest createAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAppInstanceUserRequest' is set
        if (createAppInstanceUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createAppInstanceUserRequest' when calling createAppInstanceUser(Async)");
        }

        return createAppInstanceUserCall(createAppInstanceUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a user under an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;. The request consists of a unique &lt;code&gt;appInstanceUserId&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt; for that user.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstanceUser.html\&quot;&gt;CreateAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createAppInstanceUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateAppInstanceUserResponse createAppInstanceUser(CreateAppInstanceUserRequest createAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateAppInstanceUserResponse> localVarResp = createAppInstanceUserWithHttpInfo(createAppInstanceUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a user under an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;. The request consists of a unique &lt;code&gt;appInstanceUserId&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt; for that user.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstanceUser.html\&quot;&gt;CreateAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createAppInstanceUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateAppInstanceUserResponse> createAppInstanceUserWithHttpInfo(CreateAppInstanceUserRequest createAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createAppInstanceUserValidateBeforeCall(createAppInstanceUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a user under an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;. The request consists of a unique &lt;code&gt;appInstanceUserId&lt;/code&gt; and &lt;code&gt;Name&lt;/code&gt; for that user.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_CreateAppInstanceUser.html\&quot;&gt;CreateAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createAppInstanceUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createAppInstanceUserAsync(CreateAppInstanceUserRequest createAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAppInstanceUserValidateBeforeCall(createAppInstanceUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAttendee
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param createAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createAttendeeCall(String meetingId, CreateAttendeeRequest createAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAttendeeRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/attendees"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAttendeeValidateBeforeCall(String meetingId, CreateAttendeeRequest createAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling createAttendee(Async)");
        }

        // verify the required parameter 'createAttendeeRequest' is set
        if (createAttendeeRequest == null) {
            throw new ApiException("Missing the required parameter 'createAttendeeRequest' when calling createAttendee(Async)");
        }

        return createAttendeeCall(meetingId, createAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateAttendee.html\&quot;&gt;CreateAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param createAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateAttendeeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateAttendeeResponse createAttendee(String meetingId, CreateAttendeeRequest createAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateAttendeeResponse> localVarResp = createAttendeeWithHttpInfo(meetingId, createAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateAttendee.html\&quot;&gt;CreateAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param createAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateAttendeeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateAttendeeResponse> createAttendeeWithHttpInfo(String meetingId, CreateAttendeeRequest createAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createAttendeeValidateBeforeCall(meetingId, createAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateAttendeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Creates a new attendee for an active Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateAttendee.html\&quot;&gt;CreateAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param createAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createAttendeeAsync(String meetingId, CreateAttendeeRequest createAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateAttendeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAttendeeValidateBeforeCall(meetingId, createAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateAttendeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createBot
     * @param accountId The Amazon Chime account ID. (required)
     * @param createBotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBotCall(String accountId, CreateBotRequest createBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createBotRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/bots"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBotValidateBeforeCall(String accountId, CreateBotRequest createBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createBot(Async)");
        }

        // verify the required parameter 'createBotRequest' is set
        if (createBotRequest == null) {
            throw new ApiException("Missing the required parameter 'createBotRequest' when calling createBot(Async)");
        }

        return createBotCall(accountId, createBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a bot for an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param createBotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateBotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public CreateBotResponse createBot(String accountId, CreateBotRequest createBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateBotResponse> localVarResp = createBotWithHttpInfo(accountId, createBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a bot for an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param createBotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateBotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateBotResponse> createBotWithHttpInfo(String accountId, CreateBotRequest createBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createBotValidateBeforeCall(accountId, createBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateBotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a bot for an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param createBotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createBotAsync(String accountId, CreateBotRequest createBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateBotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBotValidateBeforeCall(accountId, createBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateBotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannel
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createChannelCall(CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelRequest;

        // create path and map variables
        String localVarPath = "/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelValidateBeforeCall(CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createChannelRequest' is set
        if (createChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelRequest' when calling createChannel(Async)");
        }

        return createChannelCall(createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a channel to which you can add users and send messages.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannel.html\&quot;&gt;CreateChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return CreateChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateChannelResponse createChannel(CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<CreateChannelResponse> localVarResp = createChannelWithHttpInfo(createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a channel to which you can add users and send messages.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannel.html\&quot;&gt;CreateChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;CreateChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateChannelResponse> createChannelWithHttpInfo(CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = createChannelValidateBeforeCall(createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<CreateChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a channel to which you can add users and send messages.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannel.html\&quot;&gt;CreateChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createChannelAsync(CreateChannelRequest createChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<CreateChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelValidateBeforeCall(createChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannelBan
     * @param channelArn The ARN of the ban request. (required)
     * @param createChannelBanRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createChannelBanCall(String channelArn, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelBanRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/bans"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelBanValidateBeforeCall(String channelArn, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling createChannelBan(Async)");
        }

        // verify the required parameter 'createChannelBanRequest' is set
        if (createChannelBanRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelBanRequest' when calling createChannelBan(Async)");
        }

        return createChannelBanCall(channelArn, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Permanently bans a member from a channel. Moderators can&#39;t add banned members to a channel. To undo a ban, you first have to &lt;code&gt;DeleteChannelBan&lt;/code&gt;, and then &lt;code&gt;CreateChannelMembership&lt;/code&gt;. Bans are cleaned up when you delete users or channels.&lt;/p&gt; &lt;p&gt;If you ban a user who is already part of a channel, that user is automatically kicked from the channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelBan.html\&quot;&gt;CreateChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the ban request. (required)
     * @param createChannelBanRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return CreateChannelBanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateChannelBanResponse createChannelBan(String channelArn, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<CreateChannelBanResponse> localVarResp = createChannelBanWithHttpInfo(channelArn, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Permanently bans a member from a channel. Moderators can&#39;t add banned members to a channel. To undo a ban, you first have to &lt;code&gt;DeleteChannelBan&lt;/code&gt;, and then &lt;code&gt;CreateChannelMembership&lt;/code&gt;. Bans are cleaned up when you delete users or channels.&lt;/p&gt; &lt;p&gt;If you ban a user who is already part of a channel, that user is automatically kicked from the channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelBan.html\&quot;&gt;CreateChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the ban request. (required)
     * @param createChannelBanRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;CreateChannelBanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateChannelBanResponse> createChannelBanWithHttpInfo(String channelArn, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = createChannelBanValidateBeforeCall(channelArn, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<CreateChannelBanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Permanently bans a member from a channel. Moderators can&#39;t add banned members to a channel. To undo a ban, you first have to &lt;code&gt;DeleteChannelBan&lt;/code&gt;, and then &lt;code&gt;CreateChannelMembership&lt;/code&gt;. Bans are cleaned up when you delete users or channels.&lt;/p&gt; &lt;p&gt;If you ban a user who is already part of a channel, that user is automatically kicked from the channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelBan.html\&quot;&gt;CreateChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the ban request. (required)
     * @param createChannelBanRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createChannelBanAsync(String channelArn, CreateChannelBanRequest createChannelBanRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<CreateChannelBanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelBanValidateBeforeCall(channelArn, createChannelBanRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelBanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannelMembership
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param createChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createChannelMembershipCall(String channelArn, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelMembershipRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelMembershipValidateBeforeCall(String channelArn, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling createChannelMembership(Async)");
        }

        // verify the required parameter 'createChannelMembershipRequest' is set
        if (createChannelMembershipRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelMembershipRequest' when calling createChannelMembership(Async)");
        }

        return createChannelMembershipCall(channelArn, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a user to a channel. The &lt;code&gt;InvitedBy&lt;/code&gt; response field is derived from the request header. A channel member can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;List messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Send messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Receive messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edit their own messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leave the channel&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Privacy settings impact this action as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Private Channels: You must be a member to list or send messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelMembership.html\&quot;&gt;CreateChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param createChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return CreateChannelMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateChannelMembershipResponse createChannelMembership(String channelArn, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<CreateChannelMembershipResponse> localVarResp = createChannelMembershipWithHttpInfo(channelArn, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds a user to a channel. The &lt;code&gt;InvitedBy&lt;/code&gt; response field is derived from the request header. A channel member can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;List messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Send messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Receive messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edit their own messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leave the channel&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Privacy settings impact this action as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Private Channels: You must be a member to list or send messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelMembership.html\&quot;&gt;CreateChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param createChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;CreateChannelMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateChannelMembershipResponse> createChannelMembershipWithHttpInfo(String channelArn, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = createChannelMembershipValidateBeforeCall(channelArn, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<CreateChannelMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a user to a channel. The &lt;code&gt;InvitedBy&lt;/code&gt; response field is derived from the request header. A channel member can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;List messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Send messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Receive messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Edit their own messages&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Leave the channel&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Privacy settings impact this action as follows:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Private Channels: You must be a member to list or send messages.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelMembership.html\&quot;&gt;CreateChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which you&#39;re adding users. (required)
     * @param createChannelMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createChannelMembershipAsync(String channelArn, CreateChannelMembershipRequest createChannelMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<CreateChannelMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelMembershipValidateBeforeCall(channelArn, createChannelMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createChannelModerator
     * @param channelArn The ARN of the channel. (required)
     * @param createChannelModeratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createChannelModeratorCall(String channelArn, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannelModeratorRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/moderators"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChannelModeratorValidateBeforeCall(String channelArn, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling createChannelModerator(Async)");
        }

        // verify the required parameter 'createChannelModeratorRequest' is set
        if (createChannelModeratorRequest == null) {
            throw new ApiException("Missing the required parameter 'createChannelModeratorRequest' when calling createChannelModerator(Async)");
        }

        return createChannelModeratorCall(channelArn, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new &lt;code&gt;ChannelModerator&lt;/code&gt;. A channel moderator can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add and remove other members of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove other moderators of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove user bans for the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redact messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;List messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelModerator.html\&quot;&gt;CreateChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param createChannelModeratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return CreateChannelModeratorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateChannelModeratorResponse createChannelModerator(String channelArn, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<CreateChannelModeratorResponse> localVarResp = createChannelModeratorWithHttpInfo(channelArn, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new &lt;code&gt;ChannelModerator&lt;/code&gt;. A channel moderator can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add and remove other members of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove other moderators of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove user bans for the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redact messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;List messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelModerator.html\&quot;&gt;CreateChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param createChannelModeratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;CreateChannelModeratorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateChannelModeratorResponse> createChannelModeratorWithHttpInfo(String channelArn, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = createChannelModeratorValidateBeforeCall(channelArn, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<CreateChannelModeratorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new &lt;code&gt;ChannelModerator&lt;/code&gt;. A channel moderator can:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Add and remove other members of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove other moderators of the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Add and remove user bans for the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Redact messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;List messages in the channel.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_CreateChannelModerator.html\&quot;&gt;CreateChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param createChannelModeratorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createChannelModeratorAsync(String channelArn, CreateChannelModeratorRequest createChannelModeratorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<CreateChannelModeratorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChannelModeratorValidateBeforeCall(channelArn, createChannelModeratorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<CreateChannelModeratorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMediaCapturePipeline
     * @param createMediaCapturePipelineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMediaCapturePipelineCall(CreateMediaCapturePipelineRequest createMediaCapturePipelineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMediaCapturePipelineRequest;

        // create path and map variables
        String localVarPath = "/media-capture-pipelines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMediaCapturePipelineValidateBeforeCall(CreateMediaCapturePipelineRequest createMediaCapturePipelineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createMediaCapturePipelineRequest' is set
        if (createMediaCapturePipelineRequest == null) {
            throw new ApiException("Missing the required parameter 'createMediaCapturePipelineRequest' when calling createMediaCapturePipeline(Async)");
        }

        return createMediaCapturePipelineCall(createMediaCapturePipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_CreateMediaCapturePipeline\&quot;&gt;CreateMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createMediaCapturePipelineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateMediaCapturePipelineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateMediaCapturePipelineResponse createMediaCapturePipeline(CreateMediaCapturePipelineRequest createMediaCapturePipelineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateMediaCapturePipelineResponse> localVarResp = createMediaCapturePipelineWithHttpInfo(createMediaCapturePipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_CreateMediaCapturePipeline\&quot;&gt;CreateMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createMediaCapturePipelineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateMediaCapturePipelineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateMediaCapturePipelineResponse> createMediaCapturePipelineWithHttpInfo(CreateMediaCapturePipelineRequest createMediaCapturePipelineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createMediaCapturePipelineValidateBeforeCall(createMediaCapturePipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateMediaCapturePipelineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_CreateMediaCapturePipeline\&quot;&gt;CreateMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createMediaCapturePipelineRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMediaCapturePipelineAsync(CreateMediaCapturePipelineRequest createMediaCapturePipelineRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateMediaCapturePipelineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMediaCapturePipelineValidateBeforeCall(createMediaCapturePipelineRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateMediaCapturePipelineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMeeting
     * @param createMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeetingCall(CreateMeetingRequest createMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMeetingRequest;

        // create path and map variables
        String localVarPath = "/meetings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeetingValidateBeforeCall(CreateMeetingRequest createMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createMeetingRequest' is set
        if (createMeetingRequest == null) {
            throw new ApiException("Missing the required parameter 'createMeetingRequest' when calling createMeeting(Async)");
        }

        return createMeetingCall(createMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/chime-sdk-meetings-regions.html\&quot;&gt;Amazon Chime SDK Media Regions&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeeting.html\&quot;&gt;CreateMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateMeetingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateMeetingResponse createMeeting(CreateMeetingRequest createMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateMeetingResponse> localVarResp = createMeetingWithHttpInfo(createMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/chime-sdk-meetings-regions.html\&quot;&gt;Amazon Chime SDK Media Regions&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeeting.html\&quot;&gt;CreateMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateMeetingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateMeetingResponse> createMeetingWithHttpInfo(CreateMeetingRequest createMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createMeetingValidateBeforeCall(createMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateMeetingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a new Amazon Chime SDK meeting in the specified media Region with no initial attendees. For more information about specifying media Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/chime-sdk-meetings-regions.html\&quot;&gt;Amazon Chime SDK Media Regions&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeeting.html\&quot;&gt;CreateMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeetingAsync(CreateMeetingRequest createMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateMeetingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeetingValidateBeforeCall(createMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateMeetingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMeetingDialOut
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param createMeetingDialOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMeetingDialOutCall(String meetingId, CreateMeetingDialOutRequest createMeetingDialOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMeetingDialOutRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/dial-outs"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeetingDialOutValidateBeforeCall(String meetingId, CreateMeetingDialOutRequest createMeetingDialOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling createMeetingDialOut(Async)");
        }

        // verify the required parameter 'createMeetingDialOutRequest' is set
        if (createMeetingDialOutRequest == null) {
            throw new ApiException("Missing the required parameter 'createMeetingDialOutRequest' when calling createMeetingDialOut(Async)");
        }

        return createMeetingDialOutCall(meetingId, createMeetingDialOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer.&lt;/p&gt; &lt;p&gt;To play welcome audio or implement an interactive voice response (IVR), use the &lt;code&gt;CreateSipMediaApplicationCall&lt;/code&gt; action with the corresponding SIP media application ID.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is not available in a dedicated namespace.&lt;/b&gt; &lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param createMeetingDialOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateMeetingDialOutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateMeetingDialOutResponse createMeetingDialOut(String meetingId, CreateMeetingDialOutRequest createMeetingDialOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateMeetingDialOutResponse> localVarResp = createMeetingDialOutWithHttpInfo(meetingId, createMeetingDialOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer.&lt;/p&gt; &lt;p&gt;To play welcome audio or implement an interactive voice response (IVR), use the &lt;code&gt;CreateSipMediaApplicationCall&lt;/code&gt; action with the corresponding SIP media application ID.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is not available in a dedicated namespace.&lt;/b&gt; &lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param createMeetingDialOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateMeetingDialOutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateMeetingDialOutResponse> createMeetingDialOutWithHttpInfo(String meetingId, CreateMeetingDialOutRequest createMeetingDialOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createMeetingDialOutValidateBeforeCall(meetingId, createMeetingDialOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateMeetingDialOutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Uses the join token and call metadata in a meeting request (From number, To number, and so forth) to initiate an outbound call to a public switched telephone network (PSTN) and join them into a Chime meeting. Also ensures that the From number belongs to the customer.&lt;/p&gt; &lt;p&gt;To play welcome audio or implement an interactive voice response (IVR), use the &lt;code&gt;CreateSipMediaApplicationCall&lt;/code&gt; action with the corresponding SIP media application ID.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is not available in a dedicated namespace.&lt;/b&gt; &lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param createMeetingDialOutRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMeetingDialOutAsync(String meetingId, CreateMeetingDialOutRequest createMeetingDialOutRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateMeetingDialOutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeetingDialOutValidateBeforeCall(meetingId, createMeetingDialOutRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateMeetingDialOutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMeetingWithAttendees
     * @param operation  (required)
     * @param createMeetingWithAttendeesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeetingWithAttendeesCall(String operation, CreateMeetingWithAttendeesRequest createMeetingWithAttendeesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMeetingWithAttendeesRequest;

        // create path and map variables
        String localVarPath = "/meetings#operation=create-attendees";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMeetingWithAttendeesValidateBeforeCall(String operation, CreateMeetingWithAttendeesRequest createMeetingWithAttendeesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling createMeetingWithAttendees(Async)");
        }

        // verify the required parameter 'createMeetingWithAttendeesRequest' is set
        if (createMeetingWithAttendeesRequest == null) {
            throw new ApiException("Missing the required parameter 'createMeetingWithAttendeesRequest' when calling createMeetingWithAttendees(Async)");
        }

        return createMeetingWithAttendeesCall(operation, createMeetingWithAttendeesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/chime-sdk-meetings-regions.html\&quot;&gt;Amazon Chime SDK Media Regions&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeetingWithAttendees.html\&quot;&gt;CreateMeetingWithAttendees&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param createMeetingWithAttendeesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateMeetingWithAttendeesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateMeetingWithAttendeesResponse createMeetingWithAttendees(String operation, CreateMeetingWithAttendeesRequest createMeetingWithAttendeesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateMeetingWithAttendeesResponse> localVarResp = createMeetingWithAttendeesWithHttpInfo(operation, createMeetingWithAttendeesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/chime-sdk-meetings-regions.html\&quot;&gt;Amazon Chime SDK Media Regions&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeetingWithAttendees.html\&quot;&gt;CreateMeetingWithAttendees&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param createMeetingWithAttendeesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateMeetingWithAttendeesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateMeetingWithAttendeesResponse> createMeetingWithAttendeesWithHttpInfo(String operation, CreateMeetingWithAttendeesRequest createMeetingWithAttendeesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createMeetingWithAttendeesValidateBeforeCall(operation, createMeetingWithAttendeesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateMeetingWithAttendeesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Creates a new Amazon Chime SDK meeting in the specified media Region, with attendees. For more information about specifying media Regions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/chime-sdk-meetings-regions.html\&quot;&gt;Amazon Chime SDK Media Regions&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_CreateMeetingWithAttendees.html\&quot;&gt;CreateMeetingWithAttendees&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param createMeetingWithAttendeesRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createMeetingWithAttendeesAsync(String operation, CreateMeetingWithAttendeesRequest createMeetingWithAttendeesRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateMeetingWithAttendeesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMeetingWithAttendeesValidateBeforeCall(operation, createMeetingWithAttendeesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateMeetingWithAttendeesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPhoneNumberOrder
     * @param createPhoneNumberOrderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPhoneNumberOrderCall(CreatePhoneNumberOrderRequest createPhoneNumberOrderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPhoneNumberOrderRequest;

        // create path and map variables
        String localVarPath = "/phone-number-orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPhoneNumberOrderValidateBeforeCall(CreatePhoneNumberOrderRequest createPhoneNumberOrderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPhoneNumberOrderRequest' is set
        if (createPhoneNumberOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'createPhoneNumberOrderRequest' when calling createPhoneNumberOrder(Async)");
        }

        return createPhoneNumberOrderCall(createPhoneNumberOrderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.
     * @param createPhoneNumberOrderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreatePhoneNumberOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreatePhoneNumberOrderResponse createPhoneNumberOrder(CreatePhoneNumberOrderRequest createPhoneNumberOrderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreatePhoneNumberOrderResponse> localVarResp = createPhoneNumberOrderWithHttpInfo(createPhoneNumberOrderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.
     * @param createPhoneNumberOrderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreatePhoneNumberOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePhoneNumberOrderResponse> createPhoneNumberOrderWithHttpInfo(CreatePhoneNumberOrderRequest createPhoneNumberOrderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createPhoneNumberOrderValidateBeforeCall(createPhoneNumberOrderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreatePhoneNumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an order for phone numbers to be provisioned. For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.
     * @param createPhoneNumberOrderRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPhoneNumberOrderAsync(CreatePhoneNumberOrderRequest createPhoneNumberOrderRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreatePhoneNumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPhoneNumberOrderValidateBeforeCall(createPhoneNumberOrderRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreatePhoneNumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createProxySession
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param createProxySessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createProxySessionCall(String voiceConnectorId, CreateProxySessionRequest createProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createProxySessionRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/proxy-sessions"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createProxySessionValidateBeforeCall(String voiceConnectorId, CreateProxySessionRequest createProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling createProxySession(Async)");
        }

        // verify the required parameter 'createProxySessionRequest' is set
        if (createProxySessionRequest == null) {
            throw new ApiException("Missing the required parameter 'createProxySessionRequest' when calling createProxySession(Async)");
        }

        return createProxySessionCall(voiceConnectorId, createProxySessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateProxySession.html\&quot;&gt;CreateProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param createProxySessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateProxySessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateProxySessionResponse createProxySession(String voiceConnectorId, CreateProxySessionRequest createProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateProxySessionResponse> localVarResp = createProxySessionWithHttpInfo(voiceConnectorId, createProxySessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateProxySession.html\&quot;&gt;CreateProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param createProxySessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateProxySessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateProxySessionResponse> createProxySessionWithHttpInfo(String voiceConnectorId, CreateProxySessionRequest createProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createProxySessionValidateBeforeCall(voiceConnectorId, createProxySessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateProxySessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a proxy session on the specified Amazon Chime Voice Connector for the specified participant phone numbers.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateProxySession.html\&quot;&gt;CreateProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param createProxySessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createProxySessionAsync(String voiceConnectorId, CreateProxySessionRequest createProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateProxySessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createProxySessionValidateBeforeCall(voiceConnectorId, createProxySessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateProxySessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRoom
     * @param accountId The Amazon Chime account ID. (required)
     * @param createRoomRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoomCall(String accountId, CreateRoomRequest createRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRoomRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoomValidateBeforeCall(String accountId, CreateRoomRequest createRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createRoom(Async)");
        }

        // verify the required parameter 'createRoomRequest' is set
        if (createRoomRequest == null) {
            throw new ApiException("Missing the required parameter 'createRoomRequest' when calling createRoom(Async)");
        }

        return createRoomCall(accountId, createRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a chat room for the specified Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param createRoomRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRoomResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRoomResponse createRoom(String accountId, CreateRoomRequest createRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRoomResponse> localVarResp = createRoomWithHttpInfo(accountId, createRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a chat room for the specified Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param createRoomRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRoomResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRoomResponse> createRoomWithHttpInfo(String accountId, CreateRoomRequest createRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRoomValidateBeforeCall(accountId, createRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRoomResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a chat room for the specified Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param createRoomRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoomAsync(String accountId, CreateRoomRequest createRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRoomResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoomValidateBeforeCall(accountId, createRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRoomResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRoomMembership
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param createRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoomMembershipCall(String accountId, String roomId, CreateRoomMembershipRequest createRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRoomMembershipRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}/memberships"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoomMembershipValidateBeforeCall(String accountId, String roomId, CreateRoomMembershipRequest createRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createRoomMembership(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling createRoomMembership(Async)");
        }

        // verify the required parameter 'createRoomMembershipRequest' is set
        if (createRoomMembershipRequest == null) {
            throw new ApiException("Missing the required parameter 'createRoomMembershipRequest' when calling createRoomMembership(Async)");
        }

        return createRoomMembershipCall(accountId, roomId, createRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param createRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateRoomMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateRoomMembershipResponse createRoomMembership(String accountId, String roomId, CreateRoomMembershipRequest createRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateRoomMembershipResponse> localVarResp = createRoomMembershipWithHttpInfo(accountId, roomId, createRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param createRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateRoomMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRoomMembershipResponse> createRoomMembershipWithHttpInfo(String accountId, String roomId, CreateRoomMembershipRequest createRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createRoomMembershipValidateBeforeCall(accountId, roomId, createRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateRoomMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a member to a chat room in an Amazon Chime Enterprise account. A member can be either a user or a bot. The member role designates whether the member is a chat room administrator or a general chat room member.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param createRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoomMembershipAsync(String accountId, String roomId, CreateRoomMembershipRequest createRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateRoomMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoomMembershipValidateBeforeCall(accountId, roomId, createRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateRoomMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSipMediaApplication
     * @param createSipMediaApplicationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSipMediaApplicationCall(CreateSipMediaApplicationRequest createSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSipMediaApplicationRequest;

        // create path and map variables
        String localVarPath = "/sip-media-applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSipMediaApplicationValidateBeforeCall(CreateSipMediaApplicationRequest createSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSipMediaApplicationRequest' is set
        if (createSipMediaApplicationRequest == null) {
            throw new ApiException("Missing the required parameter 'createSipMediaApplicationRequest' when calling createSipMediaApplication(Async)");
        }

        return createSipMediaApplicationCall(createSipMediaApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipMediaApplication.html\&quot;&gt;CreateSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createSipMediaApplicationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSipMediaApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateSipMediaApplicationResponse createSipMediaApplication(CreateSipMediaApplicationRequest createSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSipMediaApplicationResponse> localVarResp = createSipMediaApplicationWithHttpInfo(createSipMediaApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipMediaApplication.html\&quot;&gt;CreateSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createSipMediaApplicationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSipMediaApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateSipMediaApplicationResponse> createSipMediaApplicationWithHttpInfo(CreateSipMediaApplicationRequest createSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSipMediaApplicationValidateBeforeCall(createSipMediaApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSipMediaApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipMediaApplication.html\&quot;&gt;CreateSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createSipMediaApplicationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSipMediaApplicationAsync(CreateSipMediaApplicationRequest createSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSipMediaApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSipMediaApplicationValidateBeforeCall(createSipMediaApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSipMediaApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSipMediaApplicationCall
     * @param sipMediaApplicationId The ID of the SIP media application. (required)
     * @param createSipMediaApplicationCallRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSipMediaApplicationCallCall(String sipMediaApplicationId, CreateSipMediaApplicationCallRequest createSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSipMediaApplicationCallRequest;

        // create path and map variables
        String localVarPath = "/sip-media-applications/{sipMediaApplicationId}/calls"
            .replace("{" + "sipMediaApplicationId" + "}", localVarApiClient.escapeString(sipMediaApplicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSipMediaApplicationCallValidateBeforeCall(String sipMediaApplicationId, CreateSipMediaApplicationCallRequest createSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipMediaApplicationId' is set
        if (sipMediaApplicationId == null) {
            throw new ApiException("Missing the required parameter 'sipMediaApplicationId' when calling createSipMediaApplicationCall(Async)");
        }

        // verify the required parameter 'createSipMediaApplicationCallRequest' is set
        if (createSipMediaApplicationCallRequest == null) {
            throw new ApiException("Missing the required parameter 'createSipMediaApplicationCallRequest' when calling createSipMediaApplicationCall(Async)");
        }

        return createSipMediaApplicationCallCall(sipMediaApplicationId, createSipMediaApplicationCallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified &lt;code&gt;sipMediaApplicationId&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipMediaApplicationCall.html\&quot;&gt;CreateSipMediaApplicationCall&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The ID of the SIP media application. (required)
     * @param createSipMediaApplicationCallRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSipMediaApplicationCallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateSipMediaApplicationCallResponse createSipMediaApplicationCall(String sipMediaApplicationId, CreateSipMediaApplicationCallRequest createSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSipMediaApplicationCallResponse> localVarResp = createSipMediaApplicationCallWithHttpInfo(sipMediaApplicationId, createSipMediaApplicationCallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified &lt;code&gt;sipMediaApplicationId&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipMediaApplicationCall.html\&quot;&gt;CreateSipMediaApplicationCall&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The ID of the SIP media application. (required)
     * @param createSipMediaApplicationCallRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSipMediaApplicationCallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateSipMediaApplicationCallResponse> createSipMediaApplicationCallWithHttpInfo(String sipMediaApplicationId, CreateSipMediaApplicationCallRequest createSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSipMediaApplicationCallValidateBeforeCall(sipMediaApplicationId, createSipMediaApplicationCallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSipMediaApplicationCallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an outbound call to a phone number from the phone number specified in the request, and it invokes the endpoint of the specified &lt;code&gt;sipMediaApplicationId&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipMediaApplicationCall.html\&quot;&gt;CreateSipMediaApplicationCall&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The ID of the SIP media application. (required)
     * @param createSipMediaApplicationCallRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSipMediaApplicationCallAsync(String sipMediaApplicationId, CreateSipMediaApplicationCallRequest createSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSipMediaApplicationCallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSipMediaApplicationCallValidateBeforeCall(sipMediaApplicationId, createSipMediaApplicationCallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSipMediaApplicationCallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSipRule
     * @param createSipRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSipRuleCall(CreateSipRuleRequest createSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSipRuleRequest;

        // create path and map variables
        String localVarPath = "/sip-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSipRuleValidateBeforeCall(CreateSipRuleRequest createSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createSipRuleRequest' is set
        if (createSipRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'createSipRuleRequest' when calling createSipRule(Async)");
        }

        return createSipRuleCall(createSipRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipRule.html\&quot;&gt;CreateSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createSipRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateSipRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateSipRuleResponse createSipRule(CreateSipRuleRequest createSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateSipRuleResponse> localVarResp = createSipRuleWithHttpInfo(createSipRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipRule.html\&quot;&gt;CreateSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createSipRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateSipRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateSipRuleResponse> createSipRuleWithHttpInfo(CreateSipRuleRequest createSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createSipRuleValidateBeforeCall(createSipRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateSipRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates a SIP rule which can be used to run a SIP media application as a target for a specific trigger type.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateSipRule.html\&quot;&gt;CreateSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createSipRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createSipRuleAsync(CreateSipRuleRequest createSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateSipRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSipRuleValidateBeforeCall(createSipRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateSipRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param createUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(String accountId, String operation, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createUserRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users#operation=create"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(String accountId, String operation, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling createUser(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling createUser(Async)");
        }

        // verify the required parameter 'createUserRequest' is set
        if (createUserRequest == null) {
            throw new ApiException("Missing the required parameter 'createUserRequest' when calling createUser(Async)");
        }

        return createUserCall(accountId, operation, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates a user under the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param createUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public CreateUserResponse createUser(String accountId, String operation, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateUserResponse> localVarResp = createUserWithHttpInfo(accountId, operation, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a user under the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param createUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateUserResponse> createUserWithHttpInfo(String accountId, String operation, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(accountId, operation, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a user under the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param createUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(String accountId, String operation, CreateUserRequest createUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(accountId, operation, createUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVoiceConnector
     * @param createVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createVoiceConnectorCall(CreateVoiceConnectorRequest createVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVoiceConnectorRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVoiceConnectorValidateBeforeCall(CreateVoiceConnectorRequest createVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createVoiceConnectorRequest' is set
        if (createVoiceConnectorRequest == null) {
            throw new ApiException("Missing the required parameter 'createVoiceConnectorRequest' when calling createVoiceConnector(Async)");
        }

        return createVoiceConnectorCall(createVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Chime Voice Connector under the administrator&#39;s AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.&lt;/p&gt; &lt;p&gt;Enabling &lt;a&gt;CreateVoiceConnectorRequest$RequireEncryption&lt;/a&gt; configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateVoiceConnector.html\&quot;&gt;CreateVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateVoiceConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateVoiceConnectorResponse createVoiceConnector(CreateVoiceConnectorRequest createVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateVoiceConnectorResponse> localVarResp = createVoiceConnectorWithHttpInfo(createVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Chime Voice Connector under the administrator&#39;s AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.&lt;/p&gt; &lt;p&gt;Enabling &lt;a&gt;CreateVoiceConnectorRequest$RequireEncryption&lt;/a&gt; configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateVoiceConnector.html\&quot;&gt;CreateVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateVoiceConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateVoiceConnectorResponse> createVoiceConnectorWithHttpInfo(CreateVoiceConnectorRequest createVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createVoiceConnectorValidateBeforeCall(createVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateVoiceConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon Chime Voice Connector under the administrator&#39;s AWS account. You can choose to create an Amazon Chime Voice Connector in a specific AWS Region.&lt;/p&gt; &lt;p&gt;Enabling &lt;a&gt;CreateVoiceConnectorRequest$RequireEncryption&lt;/a&gt; configures your Amazon Chime Voice Connector to use TLS transport for SIP signaling and Secure RTP (SRTP) for media. Inbound calls use TLS transport, and unencrypted outbound calls are blocked. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateVoiceConnector.html\&quot;&gt;CreateVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createVoiceConnectorAsync(CreateVoiceConnectorRequest createVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateVoiceConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVoiceConnectorValidateBeforeCall(createVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateVoiceConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVoiceConnectorGroup
     * @param createVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createVoiceConnectorGroupCall(CreateVoiceConnectorGroupRequest createVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createVoiceConnectorGroupRequest;

        // create path and map variables
        String localVarPath = "/voice-connector-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVoiceConnectorGroupValidateBeforeCall(CreateVoiceConnectorGroupRequest createVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createVoiceConnectorGroupRequest' is set
        if (createVoiceConnectorGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'createVoiceConnectorGroupRequest' when calling createVoiceConnectorGroup(Async)");
        }

        return createVoiceConnectorGroupCall(createVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Chime Voice Connector group under the administrator&#39;s AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including &lt;code&gt;VoiceConnectorItems&lt;/code&gt; in the request.&lt;/p&gt; &lt;p&gt;You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateVoiceConnectorGroup.html\&quot;&gt;CreateVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return CreateVoiceConnectorGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public CreateVoiceConnectorGroupResponse createVoiceConnectorGroup(CreateVoiceConnectorGroupRequest createVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<CreateVoiceConnectorGroupResponse> localVarResp = createVoiceConnectorGroupWithHttpInfo(createVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Creates an Amazon Chime Voice Connector group under the administrator&#39;s AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including &lt;code&gt;VoiceConnectorItems&lt;/code&gt; in the request.&lt;/p&gt; &lt;p&gt;You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateVoiceConnectorGroup.html\&quot;&gt;CreateVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;CreateVoiceConnectorGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<CreateVoiceConnectorGroupResponse> createVoiceConnectorGroupWithHttpInfo(CreateVoiceConnectorGroupRequest createVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = createVoiceConnectorGroupValidateBeforeCall(createVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<CreateVoiceConnectorGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Creates an Amazon Chime Voice Connector group under the administrator&#39;s AWS account. You can associate Amazon Chime Voice Connectors with the Amazon Chime Voice Connector group by including &lt;code&gt;VoiceConnectorItems&lt;/code&gt; in the request.&lt;/p&gt; &lt;p&gt;You can include Amazon Chime Voice Connectors from different AWS Regions in your group. This creates a fault tolerant mechanism for fallback in case of availability events.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_CreateVoiceConnectorGroup.html\&quot;&gt;CreateVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param createVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createVoiceConnectorGroupAsync(CreateVoiceConnectorGroupRequest createVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<CreateVoiceConnectorGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVoiceConnectorGroupValidateBeforeCall(createVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<CreateVoiceConnectorGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccount
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccount(Async)");
        }

        return deleteAccountCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Amazon Chime account. You must suspend all users before deleting &lt;code&gt;Team&lt;/code&gt; account. You can use the &lt;a&gt;BatchSuspendUser&lt;/a&gt; action to dodo.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;EnterpriseLWA&lt;/code&gt; and &lt;code&gt;EnterpriseAD&lt;/code&gt; accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended.&lt;/p&gt; &lt;p&gt;Deleted accounts appear in your &lt;code&gt;Disabled&lt;/code&gt; accounts list for 90 days. To restore deleted account from your &lt;code&gt;Disabled&lt;/code&gt; accounts list, you must contact AWS Support.&lt;/p&gt; &lt;p&gt;After 90 days, deleted accounts are permanently removed from your &lt;code&gt;Disabled&lt;/code&gt; accounts list.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteAccount(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = deleteAccountWithHttpInfo(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Amazon Chime account. You must suspend all users before deleting &lt;code&gt;Team&lt;/code&gt; account. You can use the &lt;a&gt;BatchSuspendUser&lt;/a&gt; action to dodo.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;EnterpriseLWA&lt;/code&gt; and &lt;code&gt;EnterpriseAD&lt;/code&gt; accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended.&lt;/p&gt; &lt;p&gt;Deleted accounts appear in your &lt;code&gt;Disabled&lt;/code&gt; accounts list for 90 days. To restore deleted account from your &lt;code&gt;Disabled&lt;/code&gt; accounts list, you must contact AWS Support.&lt;/p&gt; &lt;p&gt;After 90 days, deleted accounts are permanently removed from your &lt;code&gt;Disabled&lt;/code&gt; accounts list.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteAccountWithHttpInfo(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified Amazon Chime account. You must suspend all users before deleting &lt;code&gt;Team&lt;/code&gt; account. You can use the &lt;a&gt;BatchSuspendUser&lt;/a&gt; action to dodo.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;EnterpriseLWA&lt;/code&gt; and &lt;code&gt;EnterpriseAD&lt;/code&gt; accounts, you must release the claimed domains for your Amazon Chime account before deletion. As soon as you release the domain, all users under that account are suspended.&lt;/p&gt; &lt;p&gt;Deleted accounts appear in your &lt;code&gt;Disabled&lt;/code&gt; accounts list for 90 days. To restore deleted account from your &lt;code&gt;Disabled&lt;/code&gt; accounts list, you must contact AWS Support.&lt;/p&gt; &lt;p&gt;After 90 days, deleted accounts are permanently removed from your &lt;code&gt;Disabled&lt;/code&gt; accounts list.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAsync(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAppInstance
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAppInstanceCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppInstanceValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling deleteAppInstance(Async)");
        }

        return deleteAppInstanceCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an &lt;code&gt;AppInstance&lt;/code&gt; and all associated data asynchronously.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstance.html\&quot;&gt;DeleteAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteAppInstance(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteAppInstanceWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes an &lt;code&gt;AppInstance&lt;/code&gt; and all associated data asynchronously.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstance.html\&quot;&gt;DeleteAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteAppInstanceWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteAppInstanceValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an &lt;code&gt;AppInstance&lt;/code&gt; and all associated data asynchronously.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstance.html\&quot;&gt;DeleteAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAppInstanceAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppInstanceValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAppInstanceAdmin
     * @param appInstanceAdminArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;&#39;s administrator. (required)
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAppInstanceAdminCall(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}"
            .replace("{" + "appInstanceAdminArn" + "}", localVarApiClient.escapeString(appInstanceAdminArn.toString()))
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppInstanceAdminValidateBeforeCall(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceAdminArn' is set
        if (appInstanceAdminArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceAdminArn' when calling deleteAppInstanceAdmin(Async)");
        }

        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling deleteAppInstanceAdmin(Async)");
        }

        return deleteAppInstanceAdminCall(appInstanceAdminArn, appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Demotes an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; to an &lt;code&gt;AppInstanceUser&lt;/code&gt;. This action does not delete the user.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceAdmin.html\&quot;&gt;DeleteAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceAdminArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;&#39;s administrator. (required)
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteAppInstanceAdmin(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteAppInstanceAdminWithHttpInfo(appInstanceAdminArn, appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Demotes an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; to an &lt;code&gt;AppInstanceUser&lt;/code&gt;. This action does not delete the user.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceAdmin.html\&quot;&gt;DeleteAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceAdminArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;&#39;s administrator. (required)
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteAppInstanceAdminWithHttpInfo(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteAppInstanceAdminValidateBeforeCall(appInstanceAdminArn, appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Demotes an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; to an &lt;code&gt;AppInstanceUser&lt;/code&gt;. This action does not delete the user.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceAdmin.html\&quot;&gt;DeleteAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceAdminArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;&#39;s administrator. (required)
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAppInstanceAdminAsync(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppInstanceAdminValidateBeforeCall(appInstanceAdminArn, appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAppInstanceStreamingConfigurations
     * @param appInstanceArn The ARN of the streaming configurations being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAppInstanceStreamingConfigurationsCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/streaming-configurations"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppInstanceStreamingConfigurationsValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling deleteAppInstanceStreamingConfigurations(Async)");
        }

        return deleteAppInstanceStreamingConfigurationsCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the streaming configurations of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceStreamingConfigurations.html\&quot;&gt;DeleteAppInstanceStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the streaming configurations being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteAppInstanceStreamingConfigurations(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteAppInstanceStreamingConfigurationsWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the streaming configurations of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceStreamingConfigurations.html\&quot;&gt;DeleteAppInstanceStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the streaming configurations being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteAppInstanceStreamingConfigurationsWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteAppInstanceStreamingConfigurationsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the streaming configurations of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceStreamingConfigurations.html\&quot;&gt;DeleteAppInstanceStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the streaming configurations being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAppInstanceStreamingConfigurationsAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppInstanceStreamingConfigurationsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAppInstanceUser
     * @param appInstanceUserArn The ARN of the user request being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAppInstanceUserCall(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instance-users/{appInstanceUserArn}"
            .replace("{" + "appInstanceUserArn" + "}", localVarApiClient.escapeString(appInstanceUserArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppInstanceUserValidateBeforeCall(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceUserArn' is set
        if (appInstanceUserArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceUserArn' when calling deleteAppInstanceUser(Async)");
        }

        return deleteAppInstanceUserCall(appInstanceUserArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceUser.html\&quot;&gt;DeleteAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the user request being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteAppInstanceUser(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteAppInstanceUserWithHttpInfo(appInstanceUserArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceUser.html\&quot;&gt;DeleteAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the user request being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteAppInstanceUserWithHttpInfo(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteAppInstanceUserValidateBeforeCall(appInstanceUserArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DeleteAppInstanceUser.html\&quot;&gt;DeleteAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the user request being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAppInstanceUserAsync(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppInstanceUserValidateBeforeCall(appInstanceUserArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAttendee
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAttendeeCall(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/attendees/{attendeeId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "attendeeId" + "}", localVarApiClient.escapeString(attendeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttendeeValidateBeforeCall(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling deleteAttendee(Async)");
        }

        // verify the required parameter 'attendeeId' is set
        if (attendeeId == null) {
            throw new ApiException("Missing the required parameter 'attendeeId' when calling deleteAttendee(Async)");
        }

        return deleteAttendeeCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their &lt;code&gt;JoinToken&lt;/code&gt;. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_DeleteAttendee.html\&quot;&gt;DeleteAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteAttendee(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteAttendeeWithHttpInfo(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their &lt;code&gt;JoinToken&lt;/code&gt;. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_DeleteAttendee.html\&quot;&gt;DeleteAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteAttendeeWithHttpInfo(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteAttendeeValidateBeforeCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes an attendee from the specified Amazon Chime SDK meeting and deletes their &lt;code&gt;JoinToken&lt;/code&gt;. Attendees are automatically deleted when a Amazon Chime SDK meeting is deleted. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_DeleteAttendee.html\&quot;&gt;DeleteAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteAttendeeAsync(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttendeeValidateBeforeCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannel
     * @param channelArn The ARN of the channel being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelValidateBeforeCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannel(Async)");
        }

        return deleteChannelCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannel.html\&quot;&gt;DeleteChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteChannel(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        deleteChannelWithHttpInfo(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
    }

    /**
     * 
     * &lt;p&gt;Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannel.html\&quot;&gt;DeleteChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteChannelWithHttpInfo(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Immediately makes a channel and its memberships inaccessible and marks them for deletion. This is an irreversible process.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannel.html\&quot;&gt;DeleteChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelAsync(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelBan
     * @param channelArn The ARN of the channel from which the &lt;code&gt;AppInstanceUser&lt;/code&gt; was banned. (required)
     * @param memberArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; that you want to reinstate. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelBanCall(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/bans/{memberArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelBanValidateBeforeCall(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannelBan(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling deleteChannelBan(Async)");
        }

        return deleteChannelBanCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes a user from a channel&#39;s ban list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelBan.html\&quot;&gt;DeleteChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which the &lt;code&gt;AppInstanceUser&lt;/code&gt; was banned. (required)
     * @param memberArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; that you want to reinstate. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteChannelBan(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        deleteChannelBanWithHttpInfo(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
    }

    /**
     * 
     * &lt;p&gt;Removes a user from a channel&#39;s ban list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelBan.html\&quot;&gt;DeleteChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which the &lt;code&gt;AppInstanceUser&lt;/code&gt; was banned. (required)
     * @param memberArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; that you want to reinstate. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteChannelBanWithHttpInfo(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelBanValidateBeforeCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes a user from a channel&#39;s ban list.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelBan.html\&quot;&gt;DeleteChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which the &lt;code&gt;AppInstanceUser&lt;/code&gt; was banned. (required)
     * @param memberArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; that you want to reinstate. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelBanAsync(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelBanValidateBeforeCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelMembership
     * @param channelArn The ARN of the channel from which you want to remove the user. (required)
     * @param memberArn The ARN of the member that you&#39;re removing from the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelMembershipCall(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships/{memberArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelMembershipValidateBeforeCall(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannelMembership(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling deleteChannelMembership(Async)");
        }

        return deleteChannelMembershipCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Removes a member from a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelMembership.html\&quot;&gt;DeleteChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which you want to remove the user. (required)
     * @param memberArn The ARN of the member that you&#39;re removing from the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteChannelMembership(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        deleteChannelMembershipWithHttpInfo(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
    }

    /**
     * 
     * &lt;p&gt;Removes a member from a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelMembership.html\&quot;&gt;DeleteChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which you want to remove the user. (required)
     * @param memberArn The ARN of the member that you&#39;re removing from the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteChannelMembershipWithHttpInfo(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelMembershipValidateBeforeCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Removes a member from a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelMembership.html\&quot;&gt;DeleteChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which you want to remove the user. (required)
     * @param memberArn The ARN of the member that you&#39;re removing from the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelMembershipAsync(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelMembershipValidateBeforeCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelMessage
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelMessageCall(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelMessageValidateBeforeCall(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannelMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling deleteChannelMessage(Async)");
        }

        return deleteChannelMessageCall(channelArn, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by &lt;code&gt;UpdateChannelMessage&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelMessage.html\&quot;&gt;DeleteChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteChannelMessage(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        deleteChannelMessageWithHttpInfo(channelArn, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
    }

    /**
     * 
     * &lt;p&gt;Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by &lt;code&gt;UpdateChannelMessage&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelMessage.html\&quot;&gt;DeleteChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteChannelMessageWithHttpInfo(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelMessageValidateBeforeCall(channelArn, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a channel message. Only admins can perform this action. Deletion makes messages inaccessible immediately. A background process deletes any revisions created by &lt;code&gt;UpdateChannelMessage&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelMessage.html\&quot;&gt;DeleteChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelMessageAsync(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelMessageValidateBeforeCall(channelArn, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteChannelModerator
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The ARN of the moderator being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelModeratorCall(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/moderators/{channelModeratorArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "channelModeratorArn" + "}", localVarApiClient.escapeString(channelModeratorArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteChannelModeratorValidateBeforeCall(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling deleteChannelModerator(Async)");
        }

        // verify the required parameter 'channelModeratorArn' is set
        if (channelModeratorArn == null) {
            throw new ApiException("Missing the required parameter 'channelModeratorArn' when calling deleteChannelModerator(Async)");
        }

        return deleteChannelModeratorCall(channelArn, channelModeratorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a channel moderator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelModerator.html\&quot;&gt;DeleteChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The ARN of the moderator being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteChannelModerator(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        deleteChannelModeratorWithHttpInfo(channelArn, channelModeratorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
    }

    /**
     * 
     * &lt;p&gt;Deletes a channel moderator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelModerator.html\&quot;&gt;DeleteChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The ARN of the moderator being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteChannelModeratorWithHttpInfo(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = deleteChannelModeratorValidateBeforeCall(channelArn, channelModeratorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a channel moderator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DeleteChannelModerator.html\&quot;&gt;DeleteChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The ARN of the moderator being deleted. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteChannelModeratorAsync(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteChannelModeratorValidateBeforeCall(channelArn, channelModeratorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEventsConfiguration
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventsConfigurationCall(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/bots/{botId}/events-configuration"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "botId" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEventsConfigurationValidateBeforeCall(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteEventsConfiguration(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling deleteEventsConfiguration(Async)");
        }

        return deleteEventsConfigurationCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes the events configuration that allows a bot to receive outgoing events.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEventsConfiguration(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteEventsConfigurationWithHttpInfo(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes the events configuration that allows a bot to receive outgoing events.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEventsConfigurationWithHttpInfo(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteEventsConfigurationValidateBeforeCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the events configuration that allows a bot to receive outgoing events.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEventsConfigurationAsync(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEventsConfigurationValidateBeforeCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMediaCapturePipeline
     * @param mediaPipelineId The ID of the media capture pipeline being deleted.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMediaCapturePipelineCall(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media-capture-pipelines/{mediaPipelineId}"
            .replace("{" + "mediaPipelineId" + "}", localVarApiClient.escapeString(mediaPipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMediaCapturePipelineValidateBeforeCall(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaPipelineId' is set
        if (mediaPipelineId == null) {
            throw new ApiException("Missing the required parameter 'mediaPipelineId' when calling deleteMediaCapturePipeline(Async)");
        }

        return deleteMediaCapturePipelineCall(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_DeleteMediaCapturePipeline.html\&quot;&gt;DeleteMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param mediaPipelineId The ID of the media capture pipeline being deleted.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMediaCapturePipeline(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteMediaCapturePipelineWithHttpInfo(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_DeleteMediaCapturePipeline.html\&quot;&gt;DeleteMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param mediaPipelineId The ID of the media capture pipeline being deleted.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMediaCapturePipelineWithHttpInfo(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteMediaCapturePipelineValidateBeforeCall(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_DeleteMediaCapturePipeline.html\&quot;&gt;DeleteMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param mediaPipelineId The ID of the media capture pipeline being deleted.  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMediaCapturePipelineAsync(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMediaCapturePipelineValidateBeforeCall(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMeeting
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeetingCall(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMeetingValidateBeforeCall(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling deleteMeeting(Async)");
        }

        return deleteMeetingCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from joining the meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_DeleteMeeting.html\&quot;&gt;DeleteMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteMeeting(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteMeetingWithHttpInfo(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from joining the meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_DeleteMeeting.html\&quot;&gt;DeleteMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteMeetingWithHttpInfo(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteMeetingValidateBeforeCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified Amazon Chime SDK meeting. The operation deletes all attendees, disconnects all clients, and prevents new clients from joining the meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_DeleteMeeting.html\&quot;&gt;DeleteMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteMeetingAsync(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMeetingValidateBeforeCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePhoneNumber
     * @param phoneNumberId The phone number ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePhoneNumberCall(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-numbers/{phoneNumberId}"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePhoneNumberValidateBeforeCall(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling deletePhoneNumber(Async)");
        }

        return deletePhoneNumberCall(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Moves the specified phone number into the &lt;b&gt;Deletion queue&lt;/b&gt;. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.&lt;/p&gt; &lt;p&gt;Deleted phone numbers remain in the &lt;b&gt;Deletion queue&lt;/b&gt; for 7 days before they are deleted permanently.&lt;/p&gt;
     * @param phoneNumberId The phone number ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deletePhoneNumber(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deletePhoneNumberWithHttpInfo(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Moves the specified phone number into the &lt;b&gt;Deletion queue&lt;/b&gt;. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.&lt;/p&gt; &lt;p&gt;Deleted phone numbers remain in the &lt;b&gt;Deletion queue&lt;/b&gt; for 7 days before they are deleted permanently.&lt;/p&gt;
     * @param phoneNumberId The phone number ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePhoneNumberWithHttpInfo(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deletePhoneNumberValidateBeforeCall(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Moves the specified phone number into the &lt;b&gt;Deletion queue&lt;/b&gt;. A phone number must be disassociated from any users or Amazon Chime Voice Connectors before it can be deleted.&lt;/p&gt; &lt;p&gt;Deleted phone numbers remain in the &lt;b&gt;Deletion queue&lt;/b&gt; for 7 days before they are deleted permanently.&lt;/p&gt;
     * @param phoneNumberId The phone number ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePhoneNumberAsync(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePhoneNumberValidateBeforeCall(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteProxySession
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteProxySessionCall(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()))
            .replace("{" + "proxySessionId" + "}", localVarApiClient.escapeString(proxySessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteProxySessionValidateBeforeCall(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling deleteProxySession(Async)");
        }

        // verify the required parameter 'proxySessionId' is set
        if (proxySessionId == null) {
            throw new ApiException("Missing the required parameter 'proxySessionId' when calling deleteProxySession(Async)");
        }

        return deleteProxySessionCall(voiceConnectorId, proxySessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified proxy session from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteProxySession.html\&quot;&gt;DeleteProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteProxySession(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteProxySessionWithHttpInfo(voiceConnectorId, proxySessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified proxy session from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteProxySession.html\&quot;&gt;DeleteProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteProxySessionWithHttpInfo(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteProxySessionValidateBeforeCall(voiceConnectorId, proxySessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified proxy session from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteProxySession.html\&quot;&gt;DeleteProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteProxySessionAsync(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteProxySessionValidateBeforeCall(voiceConnectorId, proxySessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoom
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The chat room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoomCall(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoomValidateBeforeCall(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteRoom(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling deleteRoom(Async)");
        }

        return deleteRoomCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Deletes a chat room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The chat room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRoom(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteRoomWithHttpInfo(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Deletes a chat room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The chat room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoomWithHttpInfo(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRoomValidateBeforeCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a chat room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The chat room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoomAsync(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoomValidateBeforeCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoomMembership
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param memberId The member ID (user ID or bot ID). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoomMembershipCall(String accountId, String roomId, String memberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoomMembershipValidateBeforeCall(String accountId, String roomId, String memberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteRoomMembership(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling deleteRoomMembership(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling deleteRoomMembership(Async)");
        }

        return deleteRoomMembershipCall(accountId, roomId, memberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Removes a member from a chat room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param memberId The member ID (user ID or bot ID). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRoomMembership(String accountId, String roomId, String memberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteRoomMembershipWithHttpInfo(accountId, roomId, memberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Removes a member from a chat room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param memberId The member ID (user ID or bot ID). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoomMembershipWithHttpInfo(String accountId, String roomId, String memberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteRoomMembershipValidateBeforeCall(accountId, roomId, memberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Removes a member from a chat room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param memberId The member ID (user ID or bot ID). (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoomMembershipAsync(String accountId, String roomId, String memberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoomMembershipValidateBeforeCall(accountId, roomId, memberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSipMediaApplication
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSipMediaApplicationCall(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip-media-applications/{sipMediaApplicationId}"
            .replace("{" + "sipMediaApplicationId" + "}", localVarApiClient.escapeString(sipMediaApplicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSipMediaApplicationValidateBeforeCall(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipMediaApplicationId' is set
        if (sipMediaApplicationId == null) {
            throw new ApiException("Missing the required parameter 'sipMediaApplicationId' when calling deleteSipMediaApplication(Async)");
        }

        return deleteSipMediaApplicationCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteSipMediaApplication.html\&quot;&gt;DeleteSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteSipMediaApplication(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteSipMediaApplicationWithHttpInfo(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteSipMediaApplication.html\&quot;&gt;DeleteSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteSipMediaApplicationWithHttpInfo(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSipMediaApplicationValidateBeforeCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteSipMediaApplication.html\&quot;&gt;DeleteSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSipMediaApplicationAsync(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSipMediaApplicationValidateBeforeCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSipRule
     * @param sipRuleId The SIP rule ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSipRuleCall(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip-rules/{sipRuleId}"
            .replace("{" + "sipRuleId" + "}", localVarApiClient.escapeString(sipRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSipRuleValidateBeforeCall(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipRuleId' is set
        if (sipRuleId == null) {
            throw new ApiException("Missing the required parameter 'sipRuleId' when calling deleteSipRule(Async)");
        }

        return deleteSipRuleCall(sipRuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes a SIP rule. You must disable a SIP rule before you can delete it.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteSipRule.html\&quot;&gt;DeleteSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteSipRule(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteSipRuleWithHttpInfo(sipRuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes a SIP rule. You must disable a SIP rule before you can delete it.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteSipRule.html\&quot;&gt;DeleteSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteSipRuleWithHttpInfo(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteSipRuleValidateBeforeCall(sipRuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes a SIP rule. You must disable a SIP rule before you can delete it.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteSipRule.html\&quot;&gt;DeleteSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteSipRuleAsync(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSipRuleValidateBeforeCall(sipRuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoiceConnector
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoiceConnectorValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling deleteVoiceConnector(Async)");
        }

        return deleteVoiceConnectorCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnector.html\&quot;&gt;DeleteVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteVoiceConnector(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteVoiceConnectorWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnector.html\&quot;&gt;DeleteVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteVoiceConnectorWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVoiceConnectorValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified Amazon Chime Voice Connector. Any phone numbers associated with the Amazon Chime Voice Connector must be disassociated from it before it can be deleted.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnector.html\&quot;&gt;DeleteVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoiceConnectorValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoiceConnectorEmergencyCallingConfiguration
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorEmergencyCallingConfigurationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling deleteVoiceConnectorEmergencyCallingConfiguration(Async)");
        }

        return deleteVoiceConnectorEmergencyCallingConfigurationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;DeleteVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteVoiceConnectorEmergencyCallingConfiguration(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteVoiceConnectorEmergencyCallingConfigurationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;DeleteVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteVoiceConnectorEmergencyCallingConfigurationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the emergency calling configuration details from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;DeleteVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorEmergencyCallingConfigurationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoiceConnectorGroup
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorGroupCall(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connector-groups/{voiceConnectorGroupId}"
            .replace("{" + "voiceConnectorGroupId" + "}", localVarApiClient.escapeString(voiceConnectorGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoiceConnectorGroupValidateBeforeCall(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorGroupId' is set
        if (voiceConnectorGroupId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorGroupId' when calling deleteVoiceConnectorGroup(Async)");
        }

        return deleteVoiceConnectorGroupCall(voiceConnectorGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Amazon Chime Voice Connector group. Any &lt;code&gt;VoiceConnectorItems&lt;/code&gt; and phone numbers associated with the group must be removed before it can be deleted.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorGroup.html\&quot;&gt;DeleteVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteVoiceConnectorGroup(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteVoiceConnectorGroupWithHttpInfo(voiceConnectorGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified Amazon Chime Voice Connector group. Any &lt;code&gt;VoiceConnectorItems&lt;/code&gt; and phone numbers associated with the group must be removed before it can be deleted.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorGroup.html\&quot;&gt;DeleteVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteVoiceConnectorGroupWithHttpInfo(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified Amazon Chime Voice Connector group. Any &lt;code&gt;VoiceConnectorItems&lt;/code&gt; and phone numbers associated with the group must be removed before it can be deleted.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorGroup.html\&quot;&gt;DeleteVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorGroupAsync(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoiceConnectorOrigination
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorOriginationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/origination"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoiceConnectorOriginationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling deleteVoiceConnectorOrigination(Async)");
        }

        return deleteVoiceConnectorOriginationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the origination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorOrigination.html\&quot;&gt;DeleteVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteVoiceConnectorOrigination(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteVoiceConnectorOriginationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the origination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorOrigination.html\&quot;&gt;DeleteVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteVoiceConnectorOriginationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVoiceConnectorOriginationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the origination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the origination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorOrigination.html\&quot;&gt;DeleteVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorOriginationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoiceConnectorOriginationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoiceConnectorProxy
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorProxyCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoiceConnectorProxyValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling deleteVoiceConnectorProxy(Async)");
        }

        return deleteVoiceConnectorProxyCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the proxy configuration from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorProxy.html\&quot;&gt;DeleteVoiceProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteVoiceConnectorProxy(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteVoiceConnectorProxyWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the proxy configuration from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorProxy.html\&quot;&gt;DeleteVoiceProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteVoiceConnectorProxyWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVoiceConnectorProxyValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the proxy configuration from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorProxy.html\&quot;&gt;DeleteVoiceProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorProxyAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoiceConnectorProxyValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoiceConnectorStreamingConfiguration
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorStreamingConfigurationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/streaming-configuration"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoiceConnectorStreamingConfigurationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling deleteVoiceConnectorStreamingConfiguration(Async)");
        }

        return deleteVoiceConnectorStreamingConfigurationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the streaming configuration for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorStreamingConfiguration.html\&quot;&gt;DeleteVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteVoiceConnectorStreamingConfiguration(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteVoiceConnectorStreamingConfigurationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the streaming configuration for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorStreamingConfiguration.html\&quot;&gt;DeleteVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteVoiceConnectorStreamingConfigurationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVoiceConnectorStreamingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the streaming configuration for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorStreamingConfiguration.html\&quot;&gt;DeleteVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorStreamingConfigurationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoiceConnectorStreamingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoiceConnectorTermination
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorTerminationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/termination"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoiceConnectorTerminationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling deleteVoiceConnectorTermination(Async)");
        }

        return deleteVoiceConnectorTerminationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the termination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorTermination.html\&quot;&gt;DeleteVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteVoiceConnectorTermination(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteVoiceConnectorTerminationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the termination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorTermination.html\&quot;&gt;DeleteVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteVoiceConnectorTerminationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVoiceConnectorTerminationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the termination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to deleting the termination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorTermination.html\&quot;&gt;DeleteVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorTerminationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoiceConnectorTerminationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVoiceConnectorTerminationCredentials
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param deleteVoiceConnectorTerminationCredentialsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorTerminationCredentialsCall(String voiceConnectorId, String operation, DeleteVoiceConnectorTerminationCredentialsRequest deleteVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteVoiceConnectorTerminationCredentialsRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/termination/credentials#operation=delete"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVoiceConnectorTerminationCredentialsValidateBeforeCall(String voiceConnectorId, String operation, DeleteVoiceConnectorTerminationCredentialsRequest deleteVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling deleteVoiceConnectorTerminationCredentials(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling deleteVoiceConnectorTerminationCredentials(Async)");
        }

        // verify the required parameter 'deleteVoiceConnectorTerminationCredentialsRequest' is set
        if (deleteVoiceConnectorTerminationCredentialsRequest == null) {
            throw new ApiException("Missing the required parameter 'deleteVoiceConnectorTerminationCredentialsRequest' when calling deleteVoiceConnectorTerminationCredentials(Async)");
        }

        return deleteVoiceConnectorTerminationCredentialsCall(voiceConnectorId, operation, deleteVoiceConnectorTerminationCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Deletes the specified SIP credentials used by your equipment to authenticate during call termination.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorTerminationCredentials.html\&quot;&gt;DeleteVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param deleteVoiceConnectorTerminationCredentialsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteVoiceConnectorTerminationCredentials(String voiceConnectorId, String operation, DeleteVoiceConnectorTerminationCredentialsRequest deleteVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        deleteVoiceConnectorTerminationCredentialsWithHttpInfo(voiceConnectorId, operation, deleteVoiceConnectorTerminationCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Deletes the specified SIP credentials used by your equipment to authenticate during call termination.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorTerminationCredentials.html\&quot;&gt;DeleteVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param deleteVoiceConnectorTerminationCredentialsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteVoiceConnectorTerminationCredentialsWithHttpInfo(String voiceConnectorId, String operation, DeleteVoiceConnectorTerminationCredentialsRequest deleteVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = deleteVoiceConnectorTerminationCredentialsValidateBeforeCall(voiceConnectorId, operation, deleteVoiceConnectorTerminationCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Deletes the specified SIP credentials used by your equipment to authenticate during call termination.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DeleteVoiceConnectorTerminationCredentials.html\&quot;&gt;DeleteVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param deleteVoiceConnectorTerminationCredentialsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteVoiceConnectorTerminationCredentialsAsync(String voiceConnectorId, String operation, DeleteVoiceConnectorTerminationCredentialsRequest deleteVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVoiceConnectorTerminationCredentialsValidateBeforeCall(voiceConnectorId, operation, deleteVoiceConnectorTerminationCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAppInstance
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeAppInstanceCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeAppInstanceValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling describeAppInstance(Async)");
        }

        return describeAppInstanceCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstance.html\&quot;&gt;DescribeAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAppInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeAppInstanceResponse describeAppInstance(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAppInstanceResponse> localVarResp = describeAppInstanceWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstance.html\&quot;&gt;DescribeAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAppInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeAppInstanceResponse> describeAppInstanceWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeAppInstanceValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAppInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstance.html\&quot;&gt;DescribeAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeAppInstanceAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAppInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeAppInstanceValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAppInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAppInstanceAdmin
     * @param appInstanceAdminArn The ARN of the &lt;code&gt;AppInstanceAdmin&lt;/code&gt;. (required)
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeAppInstanceAdminCall(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}"
            .replace("{" + "appInstanceAdminArn" + "}", localVarApiClient.escapeString(appInstanceAdminArn.toString()))
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeAppInstanceAdminValidateBeforeCall(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceAdminArn' is set
        if (appInstanceAdminArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceAdminArn' when calling describeAppInstanceAdmin(Async)");
        }

        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling describeAppInstanceAdmin(Async)");
        }

        return describeAppInstanceAdminCall(appInstanceAdminArn, appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstanceAdmin&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstanceAdmin.html\&quot;&gt;DescribeAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceAdminArn The ARN of the &lt;code&gt;AppInstanceAdmin&lt;/code&gt;. (required)
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAppInstanceAdminResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeAppInstanceAdminResponse describeAppInstanceAdmin(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAppInstanceAdminResponse> localVarResp = describeAppInstanceAdminWithHttpInfo(appInstanceAdminArn, appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstanceAdmin&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstanceAdmin.html\&quot;&gt;DescribeAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceAdminArn The ARN of the &lt;code&gt;AppInstanceAdmin&lt;/code&gt;. (required)
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAppInstanceAdminResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeAppInstanceAdminResponse> describeAppInstanceAdminWithHttpInfo(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeAppInstanceAdminValidateBeforeCall(appInstanceAdminArn, appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAppInstanceAdminResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstanceAdmin&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstanceAdmin.html\&quot;&gt;DescribeAppInstanceAdmin&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceAdminArn The ARN of the &lt;code&gt;AppInstanceAdmin&lt;/code&gt;. (required)
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeAppInstanceAdminAsync(String appInstanceAdminArn, String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAppInstanceAdminResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeAppInstanceAdminValidateBeforeCall(appInstanceAdminArn, appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAppInstanceAdminResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeAppInstanceUser
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeAppInstanceUserCall(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instance-users/{appInstanceUserArn}"
            .replace("{" + "appInstanceUserArn" + "}", localVarApiClient.escapeString(appInstanceUserArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeAppInstanceUserValidateBeforeCall(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceUserArn' is set
        if (appInstanceUserArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceUserArn' when calling describeAppInstanceUser(Async)");
        }

        return describeAppInstanceUserCall(appInstanceUserArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstanceUser.html\&quot;&gt;DescribeAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DescribeAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeAppInstanceUserResponse describeAppInstanceUser(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DescribeAppInstanceUserResponse> localVarResp = describeAppInstanceUserWithHttpInfo(appInstanceUserArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstanceUser.html\&quot;&gt;DescribeAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DescribeAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeAppInstanceUserResponse> describeAppInstanceUserWithHttpInfo(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = describeAppInstanceUserValidateBeforeCall(appInstanceUserArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DescribeAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_DescribeAppInstanceUser.html\&quot;&gt;DescribeAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeAppInstanceUserAsync(String appInstanceUserArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DescribeAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeAppInstanceUserValidateBeforeCall(appInstanceUserArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DescribeAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannel
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelValidateBeforeCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannel(Async)");
        }

        return describeChannelCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannel.html\&quot;&gt;DescribeChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return DescribeChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeChannelResponse describeChannel(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<DescribeChannelResponse> localVarResp = describeChannelWithHttpInfo(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannel.html\&quot;&gt;DescribeChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;DescribeChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeChannelResponse> describeChannelWithHttpInfo(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = describeChannelValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<DescribeChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a channel in an Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannel.html\&quot;&gt;DescribeChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelAsync(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<DescribeChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelBan
     * @param channelArn The ARN of the channel from which the user is banned. (required)
     * @param memberArn The ARN of the member being banned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelBanCall(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/bans/{memberArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelBanValidateBeforeCall(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelBan(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling describeChannelBan(Async)");
        }

        return describeChannelBanCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel ban.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelBan.html\&quot;&gt;DescribeChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which the user is banned. (required)
     * @param memberArn The ARN of the member being banned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return DescribeChannelBanResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeChannelBanResponse describeChannelBan(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<DescribeChannelBanResponse> localVarResp = describeChannelBanWithHttpInfo(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel ban.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelBan.html\&quot;&gt;DescribeChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which the user is banned. (required)
     * @param memberArn The ARN of the member being banned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;DescribeChannelBanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeChannelBanResponse> describeChannelBanWithHttpInfo(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = describeChannelBanValidateBeforeCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<DescribeChannelBanResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a channel ban.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelBan.html\&quot;&gt;DescribeChannelBan&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel from which the user is banned. (required)
     * @param memberArn The ARN of the member being banned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelBanAsync(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<DescribeChannelBanResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelBanValidateBeforeCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelBanResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelMembership
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The ARN of the member. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelMembershipCall(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships/{memberArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "memberArn" + "}", localVarApiClient.escapeString(memberArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelMembershipValidateBeforeCall(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelMembership(Async)");
        }

        // verify the required parameter 'memberArn' is set
        if (memberArn == null) {
            throw new ApiException("Missing the required parameter 'memberArn' when calling describeChannelMembership(Async)");
        }

        return describeChannelMembershipCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a user&#39;s channel membership.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelMembership.html\&quot;&gt;DescribeChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The ARN of the member. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return DescribeChannelMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeChannelMembershipResponse describeChannelMembership(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<DescribeChannelMembershipResponse> localVarResp = describeChannelMembershipWithHttpInfo(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a user&#39;s channel membership.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelMembership.html\&quot;&gt;DescribeChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The ARN of the member. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;DescribeChannelMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeChannelMembershipResponse> describeChannelMembershipWithHttpInfo(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = describeChannelMembershipValidateBeforeCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<DescribeChannelMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a user&#39;s channel membership.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelMembership.html\&quot;&gt;DescribeChannelMembership&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param memberArn The ARN of the member. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelMembershipAsync(String channelArn, String memberArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<DescribeChannelMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelMembershipValidateBeforeCall(channelArn, memberArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelMembershipForAppInstanceUser
     * @param channelArn The ARN of the channel to which the user belongs. (required)
     * @param appInstanceUserArn The ARN of the user in a channel. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelMembershipForAppInstanceUserCall(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}#scope=app-instance-user-membership&app-instance-user-arn"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceUserArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-user-arn", appInstanceUserArn));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelMembershipForAppInstanceUserValidateBeforeCall(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelMembershipForAppInstanceUser(Async)");
        }

        // verify the required parameter 'appInstanceUserArn' is set
        if (appInstanceUserArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceUserArn' when calling describeChannelMembershipForAppInstanceUser(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling describeChannelMembershipForAppInstanceUser(Async)");
        }

        return describeChannelMembershipForAppInstanceUserCall(channelArn, appInstanceUserArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt; Returns the details of a channel based on the membership of the specified &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelMembershipForAppInstanceUser.html\&quot;&gt;DescribeChannelMembershipForAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which the user belongs. (required)
     * @param appInstanceUserArn The ARN of the user in a channel. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return DescribeChannelMembershipForAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeChannelMembershipForAppInstanceUserResponse describeChannelMembershipForAppInstanceUser(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<DescribeChannelMembershipForAppInstanceUserResponse> localVarResp = describeChannelMembershipForAppInstanceUserWithHttpInfo(channelArn, appInstanceUserArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Returns the details of a channel based on the membership of the specified &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelMembershipForAppInstanceUser.html\&quot;&gt;DescribeChannelMembershipForAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which the user belongs. (required)
     * @param appInstanceUserArn The ARN of the user in a channel. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;DescribeChannelMembershipForAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeChannelMembershipForAppInstanceUserResponse> describeChannelMembershipForAppInstanceUserWithHttpInfo(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = describeChannelMembershipForAppInstanceUserValidateBeforeCall(channelArn, appInstanceUserArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<DescribeChannelMembershipForAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Returns the details of a channel based on the membership of the specified &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelMembershipForAppInstanceUser.html\&quot;&gt;DescribeChannelMembershipForAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel to which the user belongs. (required)
     * @param appInstanceUserArn The ARN of the user in a channel. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelMembershipForAppInstanceUserAsync(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<DescribeChannelMembershipForAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelMembershipForAppInstanceUserValidateBeforeCall(channelArn, appInstanceUserArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelMembershipForAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelModeratedByAppInstanceUser
     * @param channelArn The ARN of the moderated channel. (required)
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; in the moderated channel. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelModeratedByAppInstanceUserCall(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}#scope=app-instance-user-moderated-channel&app-instance-user-arn"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceUserArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-user-arn", appInstanceUserArn));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelModeratedByAppInstanceUserValidateBeforeCall(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelModeratedByAppInstanceUser(Async)");
        }

        // verify the required parameter 'appInstanceUserArn' is set
        if (appInstanceUserArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceUserArn' when calling describeChannelModeratedByAppInstanceUser(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling describeChannelModeratedByAppInstanceUser(Async)");
        }

        return describeChannelModeratedByAppInstanceUserCall(channelArn, appInstanceUserArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel moderated by the specified &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelModeratedByAppInstanceUser.html\&quot;&gt;DescribeChannelModeratedByAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the moderated channel. (required)
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; in the moderated channel. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return DescribeChannelModeratedByAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeChannelModeratedByAppInstanceUserResponse describeChannelModeratedByAppInstanceUser(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<DescribeChannelModeratedByAppInstanceUserResponse> localVarResp = describeChannelModeratedByAppInstanceUserWithHttpInfo(channelArn, appInstanceUserArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a channel moderated by the specified &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelModeratedByAppInstanceUser.html\&quot;&gt;DescribeChannelModeratedByAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the moderated channel. (required)
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; in the moderated channel. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;DescribeChannelModeratedByAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeChannelModeratedByAppInstanceUserResponse> describeChannelModeratedByAppInstanceUserWithHttpInfo(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = describeChannelModeratedByAppInstanceUserValidateBeforeCall(channelArn, appInstanceUserArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<DescribeChannelModeratedByAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a channel moderated by the specified &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelModeratedByAppInstanceUser.html\&quot;&gt;DescribeChannelModeratedByAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the moderated channel. (required)
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt; in the moderated channel. (required)
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelModeratedByAppInstanceUserAsync(String channelArn, String appInstanceUserArn, String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<DescribeChannelModeratedByAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelModeratedByAppInstanceUserValidateBeforeCall(channelArn, appInstanceUserArn, scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelModeratedByAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeChannelModerator
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The ARN of the channel moderator. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelModeratorCall(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/moderators/{channelModeratorArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "channelModeratorArn" + "}", localVarApiClient.escapeString(channelModeratorArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeChannelModeratorValidateBeforeCall(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling describeChannelModerator(Async)");
        }

        // verify the required parameter 'channelModeratorArn' is set
        if (channelModeratorArn == null) {
            throw new ApiException("Missing the required parameter 'channelModeratorArn' when calling describeChannelModerator(Async)");
        }

        return describeChannelModeratorCall(channelArn, channelModeratorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a single ChannelModerator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelModerator.html\&quot;&gt;DescribeChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The ARN of the channel moderator. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return DescribeChannelModeratorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DescribeChannelModeratorResponse describeChannelModerator(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<DescribeChannelModeratorResponse> localVarResp = describeChannelModeratorWithHttpInfo(channelArn, channelModeratorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the full details of a single ChannelModerator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelModerator.html\&quot;&gt;DescribeChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The ARN of the channel moderator. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;DescribeChannelModeratorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DescribeChannelModeratorResponse> describeChannelModeratorWithHttpInfo(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = describeChannelModeratorValidateBeforeCall(channelArn, channelModeratorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<DescribeChannelModeratorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the full details of a single ChannelModerator.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_DescribeChannelModerator.html\&quot;&gt;DescribeChannelModerator&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param channelModeratorArn The ARN of the channel moderator. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call describeChannelModeratorAsync(String channelArn, String channelModeratorArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<DescribeChannelModeratorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeChannelModeratorValidateBeforeCall(channelArn, channelModeratorArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<DescribeChannelModeratorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociatePhoneNumberFromUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociatePhoneNumberFromUserCall(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users/{userId}#operation=disassociate-phone-number"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociatePhoneNumberFromUserValidateBeforeCall(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling disassociatePhoneNumberFromUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling disassociatePhoneNumberFromUser(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling disassociatePhoneNumberFromUser(Async)");
        }

        return disassociatePhoneNumberFromUserCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disassociates the primary provisioned phone number from the specified Amazon Chime user.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object disassociatePhoneNumberFromUser(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disassociatePhoneNumberFromUserWithHttpInfo(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Disassociates the primary provisioned phone number from the specified Amazon Chime user.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disassociatePhoneNumberFromUserWithHttpInfo(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociatePhoneNumberFromUserValidateBeforeCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disassociates the primary provisioned phone number from the specified Amazon Chime user.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociatePhoneNumberFromUserAsync(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociatePhoneNumberFromUserValidateBeforeCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociatePhoneNumbersFromVoiceConnector
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param disassociatePhoneNumbersFromVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call disassociatePhoneNumbersFromVoiceConnectorCall(String voiceConnectorId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociatePhoneNumbersFromVoiceConnectorRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}#operation=disassociate-phone-numbers"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociatePhoneNumbersFromVoiceConnectorValidateBeforeCall(String voiceConnectorId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling disassociatePhoneNumbersFromVoiceConnector(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling disassociatePhoneNumbersFromVoiceConnector(Async)");
        }

        // verify the required parameter 'disassociatePhoneNumbersFromVoiceConnectorRequest' is set
        if (disassociatePhoneNumbersFromVoiceConnectorRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociatePhoneNumbersFromVoiceConnectorRequest' when calling disassociatePhoneNumbersFromVoiceConnector(Async)");
        }

        return disassociatePhoneNumbersFromVoiceConnectorCall(voiceConnectorId, operation, disassociatePhoneNumbersFromVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DisassociatePhoneNumbersFromVoiceConnector.html\&quot;&gt;DisassociatePhoneNumbersFromVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param disassociatePhoneNumbersFromVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisassociatePhoneNumbersFromVoiceConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DisassociatePhoneNumbersFromVoiceConnectorResponse disassociatePhoneNumbersFromVoiceConnector(String voiceConnectorId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisassociatePhoneNumbersFromVoiceConnectorResponse> localVarResp = disassociatePhoneNumbersFromVoiceConnectorWithHttpInfo(voiceConnectorId, operation, disassociatePhoneNumbersFromVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DisassociatePhoneNumbersFromVoiceConnector.html\&quot;&gt;DisassociatePhoneNumbersFromVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param disassociatePhoneNumbersFromVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisassociatePhoneNumbersFromVoiceConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DisassociatePhoneNumbersFromVoiceConnectorResponse> disassociatePhoneNumbersFromVoiceConnectorWithHttpInfo(String voiceConnectorId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociatePhoneNumbersFromVoiceConnectorValidateBeforeCall(voiceConnectorId, operation, disassociatePhoneNumbersFromVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisassociatePhoneNumbersFromVoiceConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DisassociatePhoneNumbersFromVoiceConnector.html\&quot;&gt;DisassociatePhoneNumbersFromVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param disassociatePhoneNumbersFromVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call disassociatePhoneNumbersFromVoiceConnectorAsync(String voiceConnectorId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisassociatePhoneNumbersFromVoiceConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociatePhoneNumbersFromVoiceConnectorValidateBeforeCall(voiceConnectorId, operation, disassociatePhoneNumbersFromVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisassociatePhoneNumbersFromVoiceConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociatePhoneNumbersFromVoiceConnectorGroup
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param operation  (required)
     * @param disassociatePhoneNumbersFromVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call disassociatePhoneNumbersFromVoiceConnectorGroupCall(String voiceConnectorGroupId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociatePhoneNumbersFromVoiceConnectorRequest;

        // create path and map variables
        String localVarPath = "/voice-connector-groups/{voiceConnectorGroupId}#operation=disassociate-phone-numbers"
            .replace("{" + "voiceConnectorGroupId" + "}", localVarApiClient.escapeString(voiceConnectorGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociatePhoneNumbersFromVoiceConnectorGroupValidateBeforeCall(String voiceConnectorGroupId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorGroupId' is set
        if (voiceConnectorGroupId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorGroupId' when calling disassociatePhoneNumbersFromVoiceConnectorGroup(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling disassociatePhoneNumbersFromVoiceConnectorGroup(Async)");
        }

        // verify the required parameter 'disassociatePhoneNumbersFromVoiceConnectorRequest' is set
        if (disassociatePhoneNumbersFromVoiceConnectorRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociatePhoneNumbersFromVoiceConnectorRequest' when calling disassociatePhoneNumbersFromVoiceConnectorGroup(Async)");
        }

        return disassociatePhoneNumbersFromVoiceConnectorGroupCall(voiceConnectorGroupId, operation, disassociatePhoneNumbersFromVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DisassociatePhoneNumbersFromVoiceConnectorGroup.html\&quot;&gt;DisassociatePhoneNumbersFromVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param operation  (required)
     * @param disassociatePhoneNumbersFromVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return DisassociatePhoneNumbersFromVoiceConnectorGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DisassociatePhoneNumbersFromVoiceConnectorGroupResponse disassociatePhoneNumbersFromVoiceConnectorGroup(String voiceConnectorGroupId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> localVarResp = disassociatePhoneNumbersFromVoiceConnectorGroupWithHttpInfo(voiceConnectorGroupId, operation, disassociatePhoneNumbersFromVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DisassociatePhoneNumbersFromVoiceConnectorGroup.html\&quot;&gt;DisassociatePhoneNumbersFromVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param operation  (required)
     * @param disassociatePhoneNumbersFromVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;DisassociatePhoneNumbersFromVoiceConnectorGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> disassociatePhoneNumbersFromVoiceConnectorGroupWithHttpInfo(String voiceConnectorGroupId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociatePhoneNumbersFromVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, operation, disassociatePhoneNumbersFromVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Disassociates the specified phone numbers from the specified Amazon Chime Voice Connector group.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_DisassociatePhoneNumbersFromVoiceConnectorGroup.html\&quot;&gt;DisassociatePhoneNumbersFromVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param operation  (required)
     * @param disassociatePhoneNumbersFromVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call disassociatePhoneNumbersFromVoiceConnectorGroupAsync(String voiceConnectorGroupId, String operation, DisassociatePhoneNumbersFromVoiceConnectorRequest disassociatePhoneNumbersFromVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociatePhoneNumbersFromVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, operation, disassociatePhoneNumbersFromVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<DisassociatePhoneNumbersFromVoiceConnectorGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for disassociateSigninDelegateGroupsFromAccount
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param disassociateSigninDelegateGroupsFromAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateSigninDelegateGroupsFromAccountCall(String accountId, String operation, DisassociateSigninDelegateGroupsFromAccountRequest disassociateSigninDelegateGroupsFromAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = disassociateSigninDelegateGroupsFromAccountRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}#operation=disassociate-signin-delegate-groups"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disassociateSigninDelegateGroupsFromAccountValidateBeforeCall(String accountId, String operation, DisassociateSigninDelegateGroupsFromAccountRequest disassociateSigninDelegateGroupsFromAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling disassociateSigninDelegateGroupsFromAccount(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling disassociateSigninDelegateGroupsFromAccount(Async)");
        }

        // verify the required parameter 'disassociateSigninDelegateGroupsFromAccountRequest' is set
        if (disassociateSigninDelegateGroupsFromAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'disassociateSigninDelegateGroupsFromAccountRequest' when calling disassociateSigninDelegateGroupsFromAccount(Async)");
        }

        return disassociateSigninDelegateGroupsFromAccountCall(accountId, operation, disassociateSigninDelegateGroupsFromAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param disassociateSigninDelegateGroupsFromAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object disassociateSigninDelegateGroupsFromAccount(String accountId, String operation, DisassociateSigninDelegateGroupsFromAccountRequest disassociateSigninDelegateGroupsFromAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = disassociateSigninDelegateGroupsFromAccountWithHttpInfo(accountId, operation, disassociateSigninDelegateGroupsFromAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param disassociateSigninDelegateGroupsFromAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> disassociateSigninDelegateGroupsFromAccountWithHttpInfo(String accountId, String operation, DisassociateSigninDelegateGroupsFromAccountRequest disassociateSigninDelegateGroupsFromAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = disassociateSigninDelegateGroupsFromAccountValidateBeforeCall(accountId, operation, disassociateSigninDelegateGroupsFromAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Disassociates the specified sign-in delegate groups from the specified Amazon Chime account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param disassociateSigninDelegateGroupsFromAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call disassociateSigninDelegateGroupsFromAccountAsync(String accountId, String operation, DisassociateSigninDelegateGroupsFromAccountRequest disassociateSigninDelegateGroupsFromAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = disassociateSigninDelegateGroupsFromAccountValidateBeforeCall(accountId, operation, disassociateSigninDelegateGroupsFromAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccount
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountValidateBeforeCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccount(Async)");
        }

        return getAccountCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountResponse getAccount(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetAccountResponse> localVarResp = getAccountWithHttpInfo(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAccountResponse> getAccountWithHttpInfo(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getAccountValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves details for the specified Amazon Chime account, such as account type and supported licenses.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAsync(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountSettings
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountSettingsCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/settings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountSettingsValidateBeforeCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccountSettings(Async)");
        }

        return getAccountSettingsCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dialout settings. For more information about these settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/policies.html\&quot;&gt;Use the Policies Page&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. 
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetAccountSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountSettingsResponse getAccountSettings(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetAccountSettingsResponse> localVarResp = getAccountSettingsWithHttpInfo(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dialout settings. For more information about these settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/policies.html\&quot;&gt;Use the Policies Page&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. 
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetAccountSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAccountSettingsResponse> getAccountSettingsWithHttpInfo(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getAccountSettingsValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetAccountSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves account settings for the specified Amazon Chime account ID, such as remote control and dialout settings. For more information about these settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/policies.html\&quot;&gt;Use the Policies Page&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. 
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountSettingsAsync(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetAccountSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountSettingsValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetAccountSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppInstanceRetentionSettings
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAppInstanceRetentionSettingsCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/retention-settings"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppInstanceRetentionSettingsValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling getAppInstanceRetentionSettings(Async)");
        }

        return getAppInstanceRetentionSettingsCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the retention settings for an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_GetAppInstanceRetentionSettings.html\&quot;&gt;GetMessagingRetentionSettings&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetAppInstanceRetentionSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetAppInstanceRetentionSettingsResponse getAppInstanceRetentionSettings(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetAppInstanceRetentionSettingsResponse> localVarResp = getAppInstanceRetentionSettingsWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the retention settings for an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_GetAppInstanceRetentionSettings.html\&quot;&gt;GetMessagingRetentionSettings&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetAppInstanceRetentionSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetAppInstanceRetentionSettingsResponse> getAppInstanceRetentionSettingsWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getAppInstanceRetentionSettingsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetAppInstanceRetentionSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the retention settings for an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_GetAppInstanceRetentionSettings.html\&quot;&gt;GetMessagingRetentionSettings&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAppInstanceRetentionSettingsAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetAppInstanceRetentionSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppInstanceRetentionSettingsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetAppInstanceRetentionSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAppInstanceStreamingConfigurations
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAppInstanceStreamingConfigurationsCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/streaming-configurations"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppInstanceStreamingConfigurationsValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling getAppInstanceStreamingConfigurations(Async)");
        }

        return getAppInstanceStreamingConfigurationsCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the streaming settings for an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetMessagingStreamingConfigurations.html\&quot;&gt;GetMessagingStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetAppInstanceStreamingConfigurationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetAppInstanceStreamingConfigurationsResponse getAppInstanceStreamingConfigurations(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetAppInstanceStreamingConfigurationsResponse> localVarResp = getAppInstanceStreamingConfigurationsWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the streaming settings for an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetMessagingStreamingConfigurations.html\&quot;&gt;GetMessagingStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetAppInstanceStreamingConfigurationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetAppInstanceStreamingConfigurationsResponse> getAppInstanceStreamingConfigurationsWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getAppInstanceStreamingConfigurationsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetAppInstanceStreamingConfigurationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the streaming settings for an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetMessagingStreamingConfigurations.html\&quot;&gt;GetMessagingStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAppInstanceStreamingConfigurationsAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetAppInstanceStreamingConfigurationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppInstanceStreamingConfigurationsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetAppInstanceStreamingConfigurationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAttendee
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAttendeeCall(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/attendees/{attendeeId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "attendeeId" + "}", localVarApiClient.escapeString(attendeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttendeeValidateBeforeCall(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getAttendee(Async)");
        }

        // verify the required parameter 'attendeeId' is set
        if (attendeeId == null) {
            throw new ApiException("Missing the required parameter 'attendeeId' when calling getAttendee(Async)");
        }

        return getAttendeeCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_GetAttendee.html\&quot;&gt;GetAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetAttendeeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetAttendeeResponse getAttendee(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetAttendeeResponse> localVarResp = getAttendeeWithHttpInfo(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_GetAttendee.html\&quot;&gt;GetAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetAttendeeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetAttendeeResponse> getAttendeeWithHttpInfo(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getAttendeeValidateBeforeCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetAttendeeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Gets the Amazon Chime SDK attendee details for a specified meeting ID and attendee ID. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_GetAttendee.html\&quot;&gt;GetAttendee&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getAttendeeAsync(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetAttendeeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttendeeValidateBeforeCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetAttendeeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getBot
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotCall(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/bots/{botId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "botId" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBotValidateBeforeCall(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getBot(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling getBot(Async)");
        }

        return getBotCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetBotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public GetBotResponse getBot(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetBotResponse> localVarResp = getBotWithHttpInfo(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetBotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetBotResponse> getBotWithHttpInfo(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getBotValidateBeforeCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetBotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves details for the specified bot, such as bot email address, bot type, status, and display name.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBotAsync(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetBotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBotValidateBeforeCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetBotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getChannelMessage
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getChannelMessageCall(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelMessageValidateBeforeCall(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling getChannelMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling getChannelMessage(Async)");
        }

        return getChannelMessageCall(channelArn, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the full details of a channel message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The x-amz-chime-bearer request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetChannelMessage.html\&quot;&gt;GetChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return GetChannelMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetChannelMessageResponse getChannelMessage(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<GetChannelMessageResponse> localVarResp = getChannelMessageWithHttpInfo(channelArn, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the full details of a channel message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The x-amz-chime-bearer request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetChannelMessage.html\&quot;&gt;GetChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;GetChannelMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetChannelMessageResponse> getChannelMessageWithHttpInfo(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = getChannelMessageValidateBeforeCall(channelArn, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<GetChannelMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the full details of a channel message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The x-amz-chime-bearer request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetChannelMessage.html\&quot;&gt;GetChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID of the message. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getChannelMessageAsync(String channelArn, String messageId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<GetChannelMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelMessageValidateBeforeCall(channelArn, messageId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<GetChannelMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventsConfiguration
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsConfigurationCall(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/bots/{botId}/events-configuration"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "botId" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsConfigurationValidateBeforeCall(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getEventsConfiguration(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling getEventsConfiguration(Async)");
        }

        return getEventsConfigurationCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetEventsConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public GetEventsConfigurationResponse getEventsConfiguration(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetEventsConfigurationResponse> localVarResp = getEventsConfigurationWithHttpInfo(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetEventsConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEventsConfigurationResponse> getEventsConfigurationWithHttpInfo(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getEventsConfigurationValidateBeforeCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetEventsConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets details for an events configuration that allows a bot to receive outgoing events, such as an HTTPS endpoint or Lambda function ARN.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsConfigurationAsync(String accountId, String botId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetEventsConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsConfigurationValidateBeforeCall(accountId, botId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetEventsConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGlobalSettings
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalSettingsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalSettingsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        return getGlobalSettingsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves global settings for the administrator&#39;s AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetGlobalSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetGlobalSettingsResponse getGlobalSettings(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetGlobalSettingsResponse> localVarResp = getGlobalSettingsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves global settings for the administrator&#39;s AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetGlobalSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGlobalSettingsResponse> getGlobalSettingsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getGlobalSettingsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetGlobalSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves global settings for the administrator&#39;s AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalSettingsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetGlobalSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalSettingsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetGlobalSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMediaCapturePipeline
     * @param mediaPipelineId The ID of the pipeline that you want to get. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMediaCapturePipelineCall(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media-capture-pipelines/{mediaPipelineId}"
            .replace("{" + "mediaPipelineId" + "}", localVarApiClient.escapeString(mediaPipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMediaCapturePipelineValidateBeforeCall(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mediaPipelineId' is set
        if (mediaPipelineId == null) {
            throw new ApiException("Missing the required parameter 'mediaPipelineId' when calling getMediaCapturePipeline(Async)");
        }

        return getMediaCapturePipelineCall(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets an existing media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_GetMediaCapturePipeline.html\&quot;&gt;GetMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param mediaPipelineId The ID of the pipeline that you want to get. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMediaCapturePipelineResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetMediaCapturePipelineResponse getMediaCapturePipeline(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMediaCapturePipelineResponse> localVarResp = getMediaCapturePipelineWithHttpInfo(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets an existing media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_GetMediaCapturePipeline.html\&quot;&gt;GetMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param mediaPipelineId The ID of the pipeline that you want to get. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMediaCapturePipelineResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetMediaCapturePipelineResponse> getMediaCapturePipelineWithHttpInfo(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getMediaCapturePipelineValidateBeforeCall(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMediaCapturePipelineResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets an existing media capture pipeline.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_GetMediaCapturePipeline.html\&quot;&gt;GetMediaCapturePipeline&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param mediaPipelineId The ID of the pipeline that you want to get. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMediaCapturePipelineAsync(String mediaPipelineId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMediaCapturePipelineResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMediaCapturePipelineValidateBeforeCall(mediaPipelineId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMediaCapturePipelineResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMeeting
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeetingCall(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMeetingValidateBeforeCall(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling getMeeting(Async)");
        }

        return getMeetingCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_GetMeeting.html\&quot;&gt;GetMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt; Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . &lt;/p&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMeetingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetMeetingResponse getMeeting(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMeetingResponse> localVarResp = getMeetingWithHttpInfo(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_GetMeeting.html\&quot;&gt;GetMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt; Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . &lt;/p&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMeetingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetMeetingResponse> getMeetingWithHttpInfo(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getMeetingValidateBeforeCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMeetingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_GetMeeting.html\&quot;&gt;GetMeeting&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt; Gets the Amazon Chime SDK meeting details for the specified meeting ID. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt; . &lt;/p&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMeetingAsync(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMeetingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMeetingValidateBeforeCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMeetingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMessagingSessionEndpoint
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMessagingSessionEndpointCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/endpoints/messaging-session";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMessagingSessionEndpointValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        return getMessagingSessionEndpointCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The details of the endpoint for the messaging session.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetMessagingSessionEndpoint.html\&quot;&gt;GetMessagingSessionEndpoint&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetMessagingSessionEndpointResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetMessagingSessionEndpointResponse getMessagingSessionEndpoint(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetMessagingSessionEndpointResponse> localVarResp = getMessagingSessionEndpointWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The details of the endpoint for the messaging session.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetMessagingSessionEndpoint.html\&quot;&gt;GetMessagingSessionEndpoint&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetMessagingSessionEndpointResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetMessagingSessionEndpointResponse> getMessagingSessionEndpointWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getMessagingSessionEndpointValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetMessagingSessionEndpointResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The details of the endpoint for the messaging session.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_GetMessagingSessionEndpoint.html\&quot;&gt;GetMessagingSessionEndpoint&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getMessagingSessionEndpointAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetMessagingSessionEndpointResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMessagingSessionEndpointValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetMessagingSessionEndpointResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhoneNumber
     * @param phoneNumberId The phone number ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhoneNumberCall(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-numbers/{phoneNumberId}"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumberValidateBeforeCall(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling getPhoneNumber(Async)");
        }

        return getPhoneNumberCall(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
     * @param phoneNumberId The phone number ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetPhoneNumberResponse getPhoneNumber(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPhoneNumberResponse> localVarResp = getPhoneNumberWithHttpInfo(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
     * @param phoneNumberId The phone number ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPhoneNumberResponse> getPhoneNumberWithHttpInfo(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumberValidateBeforeCall(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves details for the specified phone number ID, such as associations, capabilities, and product type.
     * @param phoneNumberId The phone number ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhoneNumberAsync(String phoneNumberId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumberValidateBeforeCall(phoneNumberId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhoneNumberOrder
     * @param phoneNumberOrderId The ID for the phone number order. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhoneNumberOrderCall(String phoneNumberOrderId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-number-orders/{phoneNumberOrderId}"
            .replace("{" + "phoneNumberOrderId" + "}", localVarApiClient.escapeString(phoneNumberOrderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumberOrderValidateBeforeCall(String phoneNumberOrderId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberOrderId' is set
        if (phoneNumberOrderId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberOrderId' when calling getPhoneNumberOrder(Async)");
        }

        return getPhoneNumberOrderCall(phoneNumberOrderId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves details for the specified phone number order, such as the order creation timestamp, phone numbers in E.164 format, product type, and order status.
     * @param phoneNumberOrderId The ID for the phone number order. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPhoneNumberOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetPhoneNumberOrderResponse getPhoneNumberOrder(String phoneNumberOrderId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPhoneNumberOrderResponse> localVarResp = getPhoneNumberOrderWithHttpInfo(phoneNumberOrderId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves details for the specified phone number order, such as the order creation timestamp, phone numbers in E.164 format, product type, and order status.
     * @param phoneNumberOrderId The ID for the phone number order. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPhoneNumberOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPhoneNumberOrderResponse> getPhoneNumberOrderWithHttpInfo(String phoneNumberOrderId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumberOrderValidateBeforeCall(phoneNumberOrderId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPhoneNumberOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves details for the specified phone number order, such as the order creation timestamp, phone numbers in E.164 format, product type, and order status.
     * @param phoneNumberOrderId The ID for the phone number order. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhoneNumberOrderAsync(String phoneNumberOrderId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPhoneNumberOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumberOrderValidateBeforeCall(phoneNumberOrderId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPhoneNumberOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPhoneNumberSettings
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhoneNumberSettingsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/settings/phone-number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumberSettingsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        return getPhoneNumberSettingsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves the phone number settings for the administrator&#39;s AWS account, such as the default outbound calling name.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetPhoneNumberSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetPhoneNumberSettingsResponse getPhoneNumberSettings(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetPhoneNumberSettingsResponse> localVarResp = getPhoneNumberSettingsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the phone number settings for the administrator&#39;s AWS account, such as the default outbound calling name.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetPhoneNumberSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPhoneNumberSettingsResponse> getPhoneNumberSettingsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumberSettingsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetPhoneNumberSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the phone number settings for the administrator&#39;s AWS account, such as the default outbound calling name.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPhoneNumberSettingsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetPhoneNumberSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumberSettingsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetPhoneNumberSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getProxySession
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProxySessionCall(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()))
            .replace("{" + "proxySessionId" + "}", localVarApiClient.escapeString(proxySessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProxySessionValidateBeforeCall(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getProxySession(Async)");
        }

        // verify the required parameter 'proxySessionId' is set
        if (proxySessionId == null) {
            throw new ApiException("Missing the required parameter 'proxySessionId' when calling getProxySession(Async)");
        }

        return getProxySessionCall(voiceConnectorId, proxySessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the specified proxy session details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetProxySession.html\&quot;&gt;GetProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetProxySessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetProxySessionResponse getProxySession(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetProxySessionResponse> localVarResp = getProxySessionWithHttpInfo(voiceConnectorId, proxySessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the specified proxy session details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetProxySession.html\&quot;&gt;GetProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetProxySessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetProxySessionResponse> getProxySessionWithHttpInfo(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getProxySessionValidateBeforeCall(voiceConnectorId, proxySessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetProxySessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the specified proxy session details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetProxySession.html\&quot;&gt;GetProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getProxySessionAsync(String voiceConnectorId, String proxySessionId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetProxySessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProxySessionValidateBeforeCall(voiceConnectorId, proxySessionId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetProxySessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRetentionSettings
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetentionSettingsCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/retention-settings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRetentionSettingsValidateBeforeCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getRetentionSettings(Async)");
        }

        return getRetentionSettingsCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     *  Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html\&quot;&gt;Managing Chat Retention Policies&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. 
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRetentionSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetRetentionSettingsResponse getRetentionSettings(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRetentionSettingsResponse> localVarResp = getRetentionSettingsWithHttpInfo(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     *  Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html\&quot;&gt;Managing Chat Retention Policies&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. 
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRetentionSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRetentionSettingsResponse> getRetentionSettingsWithHttpInfo(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRetentionSettingsValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRetentionSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     *  Gets the retention settings for the specified Amazon Chime Enterprise account. For more information about retention settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html\&quot;&gt;Managing Chat Retention Policies&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;. 
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRetentionSettingsAsync(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRetentionSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRetentionSettingsValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRetentionSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoom
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoomCall(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoomValidateBeforeCall(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getRoom(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling getRoom(Async)");
        }

        return getRoomCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetRoomResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetRoomResponse getRoom(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetRoomResponse> localVarResp = getRoomWithHttpInfo(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetRoomResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRoomResponse> getRoomWithHttpInfo(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getRoomValidateBeforeCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetRoomResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves room details, such as the room name, for a room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoomAsync(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetRoomResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoomValidateBeforeCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetRoomResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSipMediaApplication
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSipMediaApplicationCall(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip-media-applications/{sipMediaApplicationId}"
            .replace("{" + "sipMediaApplicationId" + "}", localVarApiClient.escapeString(sipMediaApplicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSipMediaApplicationValidateBeforeCall(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipMediaApplicationId' is set
        if (sipMediaApplicationId == null) {
            throw new ApiException("Missing the required parameter 'sipMediaApplicationId' when calling getSipMediaApplication(Async)");
        }

        return getSipMediaApplicationCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipMediaApplication.html\&quot;&gt;GetSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSipMediaApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetSipMediaApplicationResponse getSipMediaApplication(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSipMediaApplicationResponse> localVarResp = getSipMediaApplicationWithHttpInfo(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipMediaApplication.html\&quot;&gt;GetSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSipMediaApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetSipMediaApplicationResponse> getSipMediaApplicationWithHttpInfo(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSipMediaApplicationValidateBeforeCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSipMediaApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the information for a SIP media application, including name, AWS Region, and endpoints.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipMediaApplication.html\&quot;&gt;GetSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSipMediaApplicationAsync(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSipMediaApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSipMediaApplicationValidateBeforeCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSipMediaApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSipMediaApplicationLoggingConfiguration
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSipMediaApplicationLoggingConfigurationCall(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip-media-applications/{sipMediaApplicationId}/logging-configuration"
            .replace("{" + "sipMediaApplicationId" + "}", localVarApiClient.escapeString(sipMediaApplicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSipMediaApplicationLoggingConfigurationValidateBeforeCall(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipMediaApplicationId' is set
        if (sipMediaApplicationId == null) {
            throw new ApiException("Missing the required parameter 'sipMediaApplicationId' when calling getSipMediaApplicationLoggingConfiguration(Async)");
        }

        return getSipMediaApplicationLoggingConfigurationCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns the logging configuration for the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipMediaApplicationLoggingConfiguration.html\&quot;&gt;GetSipMediaApplicationLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSipMediaApplicationLoggingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetSipMediaApplicationLoggingConfigurationResponse getSipMediaApplicationLoggingConfiguration(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSipMediaApplicationLoggingConfigurationResponse> localVarResp = getSipMediaApplicationLoggingConfigurationWithHttpInfo(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns the logging configuration for the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipMediaApplicationLoggingConfiguration.html\&quot;&gt;GetSipMediaApplicationLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSipMediaApplicationLoggingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetSipMediaApplicationLoggingConfigurationResponse> getSipMediaApplicationLoggingConfigurationWithHttpInfo(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSipMediaApplicationLoggingConfigurationValidateBeforeCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSipMediaApplicationLoggingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns the logging configuration for the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipMediaApplicationLoggingConfiguration.html\&quot;&gt;GetSipMediaApplicationLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSipMediaApplicationLoggingConfigurationAsync(String sipMediaApplicationId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSipMediaApplicationLoggingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSipMediaApplicationLoggingConfigurationValidateBeforeCall(sipMediaApplicationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSipMediaApplicationLoggingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSipRule
     * @param sipRuleId The SIP rule ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSipRuleCall(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip-rules/{sipRuleId}"
            .replace("{" + "sipRuleId" + "}", localVarApiClient.escapeString(sipRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSipRuleValidateBeforeCall(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipRuleId' is set
        if (sipRuleId == null) {
            throw new ApiException("Missing the required parameter 'sipRuleId' when calling getSipRule(Async)");
        }

        return getSipRuleCall(sipRuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipRule.html\&quot;&gt;GetSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetSipRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetSipRuleResponse getSipRule(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetSipRuleResponse> localVarResp = getSipRuleWithHttpInfo(sipRuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipRule.html\&quot;&gt;GetSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetSipRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetSipRuleResponse> getSipRuleWithHttpInfo(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getSipRuleValidateBeforeCall(sipRuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetSipRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the details of a SIP rule, such as the rule ID, name, triggers, and target endpoints.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetSipRule.html\&quot;&gt;GetSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getSipRuleAsync(String sipRuleId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetSipRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSipRuleValidateBeforeCall(sipRuleId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetSipRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users/{userId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }

        return getUserCall(accountId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.&lt;/p&gt; &lt;p&gt; To retrieve user details with an email address instead of a user ID, use the &lt;a&gt;ListUsers&lt;/a&gt; action, and then filter by email address. &lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetUserResponse getUser(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetUserResponse> localVarResp = getUserWithHttpInfo(accountId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.&lt;/p&gt; &lt;p&gt; To retrieve user details with an email address instead of a user ID, use the &lt;a&gt;ListUsers&lt;/a&gt; action, and then filter by email address. &lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserResponse> getUserWithHttpInfo(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(accountId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves details for the specified user ID, such as primary email address, license type,and personal meeting PIN.&lt;/p&gt; &lt;p&gt; To retrieve user details with an email address instead of a user ID, use the &lt;a&gt;ListUsers&lt;/a&gt; action, and then filter by email address. &lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(accountId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserSettings
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserSettingsCall(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users/{userId}/settings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserSettingsValidateBeforeCall(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getUserSettings(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserSettings(Async)");
        }

        return getUserSettingsCall(accountId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Retrieves settings for the specified user ID, such as any associated phone number settings.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetUserSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public GetUserSettingsResponse getUserSettings(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetUserSettingsResponse> localVarResp = getUserSettingsWithHttpInfo(accountId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves settings for the specified user ID, such as any associated phone number settings.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetUserSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetUserSettingsResponse> getUserSettingsWithHttpInfo(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getUserSettingsValidateBeforeCall(accountId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetUserSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves settings for the specified user ID, such as any associated phone number settings.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserSettingsAsync(String accountId, String userId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetUserSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserSettingsValidateBeforeCall(accountId, userId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetUserSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnector
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getVoiceConnector(Async)");
        }

        return getVoiceConnectorCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnector.html\&quot;&gt;GetVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorResponse getVoiceConnector(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorResponse> localVarResp = getVoiceConnectorWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnector.html\&quot;&gt;GetVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorResponse> getVoiceConnectorWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves details for the specified Amazon Chime Voice Connector, such as timestamps,name, outbound host, and encryption requirements.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnector.html\&quot;&gt;GetVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnectorEmergencyCallingConfiguration
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorEmergencyCallingConfigurationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getVoiceConnectorEmergencyCallingConfiguration(Async)");
        }

        return getVoiceConnectorEmergencyCallingConfigurationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;GetVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorEmergencyCallingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorEmergencyCallingConfigurationResponse getVoiceConnectorEmergencyCallingConfiguration(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorEmergencyCallingConfigurationResponse> localVarResp = getVoiceConnectorEmergencyCallingConfigurationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;GetVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorEmergencyCallingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorEmergencyCallingConfigurationResponse> getVoiceConnectorEmergencyCallingConfigurationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorEmergencyCallingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the emergency calling configuration details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;GetVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorEmergencyCallingConfigurationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorEmergencyCallingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorEmergencyCallingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnectorGroup
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorGroupCall(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connector-groups/{voiceConnectorGroupId}"
            .replace("{" + "voiceConnectorGroupId" + "}", localVarApiClient.escapeString(voiceConnectorGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorGroupValidateBeforeCall(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorGroupId' is set
        if (voiceConnectorGroupId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorGroupId' when calling getVoiceConnectorGroup(Async)");
        }

        return getVoiceConnectorGroupCall(voiceConnectorGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated &lt;code&gt;VoiceConnectorItems&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorGroup.html\&quot;&gt;GetVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorGroupResponse getVoiceConnectorGroup(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorGroupResponse> localVarResp = getVoiceConnectorGroupWithHttpInfo(voiceConnectorGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated &lt;code&gt;VoiceConnectorItems&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorGroup.html\&quot;&gt;GetVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorGroupResponse> getVoiceConnectorGroupWithHttpInfo(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Retrieves details for the specified Amazon Chime Voice Connector group, such as timestamps,name, and associated &lt;code&gt;VoiceConnectorItems&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorGroup.html\&quot;&gt;GetVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorGroupAsync(String voiceConnectorGroupId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnectorLoggingConfiguration
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorLoggingConfigurationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/logging-configuration"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorLoggingConfigurationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getVoiceConnectorLoggingConfiguration(Async)");
        }

        return getVoiceConnectorLoggingConfigurationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorLoggingConfiguration.html\&quot;&gt;GetVoiceConnectorLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorLoggingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorLoggingConfigurationResponse getVoiceConnectorLoggingConfiguration(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorLoggingConfigurationResponse> localVarResp = getVoiceConnectorLoggingConfigurationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorLoggingConfiguration.html\&quot;&gt;GetVoiceConnectorLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorLoggingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorLoggingConfigurationResponse> getVoiceConnectorLoggingConfigurationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorLoggingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorLoggingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the logging configuration details for the specified Amazon Chime Voice Connector. Shows whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorLoggingConfiguration.html\&quot;&gt;GetVoiceConnectorLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorLoggingConfigurationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorLoggingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorLoggingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorLoggingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnectorOrigination
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorOriginationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/origination"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorOriginationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getVoiceConnectorOrigination(Async)");
        }

        return getVoiceConnectorOriginationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves origination setting details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorOrigination.html\&quot;&gt;GetVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorOriginationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorOriginationResponse getVoiceConnectorOrigination(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorOriginationResponse> localVarResp = getVoiceConnectorOriginationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves origination setting details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorOrigination.html\&quot;&gt;GetVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorOriginationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorOriginationResponse> getVoiceConnectorOriginationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorOriginationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorOriginationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves origination setting details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorOrigination.html\&quot;&gt;GetVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorOriginationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorOriginationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorOriginationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorOriginationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnectorProxy
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorProxyCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorProxyValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getVoiceConnectorProxy(Async)");
        }

        return getVoiceConnectorProxyCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Gets the proxy configuration details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorProxy.html\&quot;&gt;GetVoiceConnectorProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorProxyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorProxyResponse getVoiceConnectorProxy(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorProxyResponse> localVarResp = getVoiceConnectorProxyWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Gets the proxy configuration details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorProxy.html\&quot;&gt;GetVoiceConnectorProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorProxyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorProxyResponse> getVoiceConnectorProxyWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorProxyValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorProxyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Gets the proxy configuration details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorProxy.html\&quot;&gt;GetVoiceConnectorProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorProxyAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorProxyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorProxyValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorProxyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnectorStreamingConfiguration
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorStreamingConfigurationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/streaming-configuration"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorStreamingConfigurationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getVoiceConnectorStreamingConfiguration(Async)");
        }

        return getVoiceConnectorStreamingConfigurationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorStreamingConfiguration.html\&quot;&gt;GetVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorStreamingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorStreamingConfigurationResponse getVoiceConnectorStreamingConfiguration(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorStreamingConfigurationResponse> localVarResp = getVoiceConnectorStreamingConfigurationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorStreamingConfiguration.html\&quot;&gt;GetVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorStreamingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorStreamingConfigurationResponse> getVoiceConnectorStreamingConfigurationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorStreamingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorStreamingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves the streaming configuration details for the specified Amazon Chime Voice Connector. Shows whether media streaming is enabled for sending to Amazon Kinesis. It also shows the retention period, in hours, for the Amazon Kinesis data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorStreamingConfiguration.html\&quot;&gt;GetVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorStreamingConfigurationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorStreamingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorStreamingConfigurationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorStreamingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnectorTermination
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorTerminationCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/termination"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorTerminationValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getVoiceConnectorTermination(Async)");
        }

        return getVoiceConnectorTerminationCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Retrieves termination setting details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorTermination.html\&quot;&gt;GetVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorTerminationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorTerminationResponse getVoiceConnectorTermination(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorTerminationResponse> localVarResp = getVoiceConnectorTerminationWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Retrieves termination setting details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorTermination.html\&quot;&gt;GetVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorTerminationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorTerminationResponse> getVoiceConnectorTerminationWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorTerminationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorTerminationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Retrieves termination setting details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorTermination.html\&quot;&gt;GetVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorTerminationAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorTerminationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorTerminationValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorTerminationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVoiceConnectorTerminationHealth
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorTerminationHealthCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/termination/health"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVoiceConnectorTerminationHealthValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling getVoiceConnectorTerminationHealth(Async)");
        }

        return getVoiceConnectorTerminationHealthCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorTerminationHealth.html\&quot;&gt;GetVoiceConnectorTerminationHealth&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Retrieves information about the last time a SIP &lt;code&gt;OPTIONS&lt;/code&gt; ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.&lt;/p&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return GetVoiceConnectorTerminationHealthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetVoiceConnectorTerminationHealthResponse getVoiceConnectorTerminationHealth(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<GetVoiceConnectorTerminationHealthResponse> localVarResp = getVoiceConnectorTerminationHealthWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorTerminationHealth.html\&quot;&gt;GetVoiceConnectorTerminationHealth&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Retrieves information about the last time a SIP &lt;code&gt;OPTIONS&lt;/code&gt; ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.&lt;/p&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;GetVoiceConnectorTerminationHealthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<GetVoiceConnectorTerminationHealthResponse> getVoiceConnectorTerminationHealthWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = getVoiceConnectorTerminationHealthValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorTerminationHealthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_GetVoiceConnectorTerminationHealth.html\&quot;&gt;GetVoiceConnectorTerminationHealth&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;Retrieves information about the last time a SIP &lt;code&gt;OPTIONS&lt;/code&gt; ping was received from your SIP infrastructure for the specified Amazon Chime Voice Connector.&lt;/p&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getVoiceConnectorTerminationHealthAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<GetVoiceConnectorTerminationHealthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVoiceConnectorTerminationHealthValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<GetVoiceConnectorTerminationHealthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inviteUsers
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param inviteUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUsersCall(String accountId, String operation, InviteUsersRequest inviteUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inviteUsersRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users#operation=add"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteUsersValidateBeforeCall(String accountId, String operation, InviteUsersRequest inviteUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling inviteUsers(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling inviteUsers(Async)");
        }

        // verify the required parameter 'inviteUsersRequest' is set
        if (inviteUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'inviteUsersRequest' when calling inviteUsers(Async)");
        }

        return inviteUsersCall(accountId, operation, inviteUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime &lt;code&gt;Team&lt;/code&gt; account. Only &lt;code&gt;Team&lt;/code&gt; account types are currently supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param inviteUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return InviteUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public InviteUsersResponse inviteUsers(String accountId, String operation, InviteUsersRequest inviteUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<InviteUsersResponse> localVarResp = inviteUsersWithHttpInfo(accountId, operation, inviteUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime &lt;code&gt;Team&lt;/code&gt; account. Only &lt;code&gt;Team&lt;/code&gt; account types are currently supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param inviteUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;InviteUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InviteUsersResponse> inviteUsersWithHttpInfo(String accountId, String operation, InviteUsersRequest inviteUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = inviteUsersValidateBeforeCall(accountId, operation, inviteUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<InviteUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sends email to a maximum of 50 users, inviting them to the specified Amazon Chime &lt;code&gt;Team&lt;/code&gt; account. Only &lt;code&gt;Team&lt;/code&gt; account types are currently supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param operation  (required)
     * @param inviteUsersRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inviteUsersAsync(String accountId, String operation, InviteUsersRequest inviteUsersRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<InviteUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteUsersValidateBeforeCall(accountId, operation, inviteUsersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<InviteUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccounts
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name Amazon Chime account name prefix with which to filter results. (optional)
     * @param userEmail User email address with which to filter results. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String userEmail, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user-email", userEmail));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String userEmail, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listAccountsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, userEmail, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists the Amazon Chime accounts under the administrator&#39;s AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user&#39;s email address, which returns one account result.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name Amazon Chime account name prefix with which to filter results. (optional)
     * @param userEmail User email address with which to filter results. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountsResponse listAccounts(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String userEmail, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListAccountsResponse> localVarResp = listAccountsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, userEmail, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the Amazon Chime accounts under the administrator&#39;s AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user&#39;s email address, which returns one account result.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name Amazon Chime account name prefix with which to filter results. (optional)
     * @param userEmail User email address with which to filter results. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAccountsResponse> listAccountsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String userEmail, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, userEmail, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the Amazon Chime accounts under the administrator&#39;s AWS account. You can filter accounts by account name prefix. To find out which Amazon Chime account a user belongs to, you can filter by the user&#39;s email address, which returns one account result.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param name Amazon Chime account name prefix with which to filter results. (optional)
     * @param userEmail User email address with which to filter results. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccountsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String name, String userEmail, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, name, userEmail, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAppInstanceAdmins
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of administrators that you want to return. (optional)
     * @param nextToken The token returned from previous API requests until the number of administrators is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAppInstanceAdminsCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/admins"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppInstanceAdminsValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling listAppInstanceAdmins(Async)");
        }

        return listAppInstanceAdminsCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of the administrators in the &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstanceAdmins.html\&quot;&gt;ListAppInstanceAdmins&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of administrators that you want to return. (optional)
     * @param nextToken The token returned from previous API requests until the number of administrators is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListAppInstanceAdminsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListAppInstanceAdminsResponse listAppInstanceAdmins(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListAppInstanceAdminsResponse> localVarResp = listAppInstanceAdminsWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of the administrators in the &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstanceAdmins.html\&quot;&gt;ListAppInstanceAdmins&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of administrators that you want to return. (optional)
     * @param nextToken The token returned from previous API requests until the number of administrators is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListAppInstanceAdminsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListAppInstanceAdminsResponse> listAppInstanceAdminsWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listAppInstanceAdminsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListAppInstanceAdminsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of the administrators in the &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstanceAdmins.html\&quot;&gt;ListAppInstanceAdmins&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of administrators that you want to return. (optional)
     * @param nextToken The token returned from previous API requests until the number of administrators is reached. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAppInstanceAdminsAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListAppInstanceAdminsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppInstanceAdminsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListAppInstanceAdminsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAppInstanceUsers
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of requests that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested users are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAppInstanceUsersCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instance-users#app-instance-arn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-arn", appInstanceArn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppInstanceUsersValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling listAppInstanceUsers(Async)");
        }

        return listAppInstanceUsersCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;List all &lt;code&gt;AppInstanceUsers&lt;/code&gt; created under a single &lt;code&gt;AppInstance&lt;/code&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstanceUsers.html\&quot;&gt;ListAppInstanceUsers&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of requests that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested users are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListAppInstanceUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListAppInstanceUsersResponse listAppInstanceUsers(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListAppInstanceUsersResponse> localVarResp = listAppInstanceUsersWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List all &lt;code&gt;AppInstanceUsers&lt;/code&gt; created under a single &lt;code&gt;AppInstance&lt;/code&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstanceUsers.html\&quot;&gt;ListAppInstanceUsers&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of requests that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested users are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListAppInstanceUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListAppInstanceUsersResponse> listAppInstanceUsersWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listAppInstanceUsersValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListAppInstanceUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List all &lt;code&gt;AppInstanceUsers&lt;/code&gt; created under a single &lt;code&gt;AppInstance&lt;/code&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstanceUsers.html\&quot;&gt;ListAppInstanceUsers&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of requests that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested users are returned. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAppInstanceUsersAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListAppInstanceUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppInstanceUsersValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListAppInstanceUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAppInstances
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of &lt;code&gt;AppInstance&lt;/code&gt;s that you want to return. (optional)
     * @param nextToken The token passed by previous API requests until you reach the maximum number of &lt;code&gt;AppInstance&lt;/code&gt;s. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAppInstancesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/app-instances";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppInstancesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listAppInstancesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;s created under a single AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstances.html\&quot;&gt;ListAppInstances&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of &lt;code&gt;AppInstance&lt;/code&gt;s that you want to return. (optional)
     * @param nextToken The token passed by previous API requests until you reach the maximum number of &lt;code&gt;AppInstance&lt;/code&gt;s. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListAppInstancesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListAppInstancesResponse listAppInstances(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListAppInstancesResponse> localVarResp = listAppInstancesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;s created under a single AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstances.html\&quot;&gt;ListAppInstances&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of &lt;code&gt;AppInstance&lt;/code&gt;s that you want to return. (optional)
     * @param nextToken The token passed by previous API requests until you reach the maximum number of &lt;code&gt;AppInstance&lt;/code&gt;s. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListAppInstancesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListAppInstancesResponse> listAppInstancesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listAppInstancesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListAppInstancesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all Amazon Chime &lt;code&gt;AppInstance&lt;/code&gt;s created under a single AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_ListAppInstances.html\&quot;&gt;ListAppInstances&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of &lt;code&gt;AppInstance&lt;/code&gt;s that you want to return. (optional)
     * @param nextToken The token passed by previous API requests until you reach the maximum number of &lt;code&gt;AppInstance&lt;/code&gt;s. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAppInstancesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListAppInstancesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppInstancesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListAppInstancesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttendeeTags
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAttendeeTagsCall(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/attendees/{attendeeId}/tags"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "attendeeId" + "}", localVarApiClient.escapeString(attendeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttendeeTagsValidateBeforeCall(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listAttendeeTags(Async)");
        }

        // verify the required parameter 'attendeeId' is set
        if (attendeeId == null) {
            throw new ApiException("Missing the required parameter 'attendeeId' when calling listAttendeeTags(Async)");
        }

        return listAttendeeTagsCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK attendee resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;ListAttendeeTags is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListAttendeeTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListAttendeeTagsResponse listAttendeeTags(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListAttendeeTagsResponse> localVarResp = listAttendeeTagsWithHttpInfo(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK attendee resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;ListAttendeeTags is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListAttendeeTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListAttendeeTagsResponse> listAttendeeTagsWithHttpInfo(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listAttendeeTagsValidateBeforeCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListAttendeeTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK attendee resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt;ListAttendeeTags is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAttendeeTagsAsync(String meetingId, String attendeeId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListAttendeeTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttendeeTagsValidateBeforeCall(meetingId, attendeeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListAttendeeTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAttendees
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAttendeesCall(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/attendees"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAttendeesValidateBeforeCall(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listAttendees(Async)");
        }

        return listAttendeesCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt; Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListAttendees.html\&quot;&gt;ListAttendees&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListAttendeesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListAttendeesResponse listAttendees(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListAttendeesResponse> localVarResp = listAttendeesWithHttpInfo(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListAttendees.html\&quot;&gt;ListAttendees&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListAttendeesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListAttendeesResponse> listAttendeesWithHttpInfo(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listAttendeesValidateBeforeCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListAttendeesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Lists the attendees for the specified Amazon Chime SDK meeting. For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;. &lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListAttendees.html\&quot;&gt;ListAttendees&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listAttendeesAsync(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListAttendeesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAttendeesValidateBeforeCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListAttendeesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listBots
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. The default is 10. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBotsCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/bots"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBotsValidateBeforeCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listBots(Async)");
        }

        return listBotsCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists the bots associated with the administrator&#39;s Amazon Chime Enterprise account ID.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. The default is 10. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListBotsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public ListBotsResponse listBots(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListBotsResponse> localVarResp = listBotsWithHttpInfo(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the bots associated with the administrator&#39;s Amazon Chime Enterprise account ID.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. The default is 10. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListBotsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListBotsResponse> listBotsWithHttpInfo(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listBotsValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListBotsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the bots associated with the administrator&#39;s Amazon Chime Enterprise account ID.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. The default is 10. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listBotsAsync(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListBotsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBotsValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListBotsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelBans
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of bans that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested bans are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelBansCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/bans"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelBansValidateBeforeCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listChannelBans(Async)");
        }

        return listChannelBansCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the users banned from a particular channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelBans.html\&quot;&gt;ListChannelBans&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of bans that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested bans are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelBansResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListChannelBansResponse listChannelBans(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelBansResponse> localVarResp = listChannelBansWithHttpInfo(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the users banned from a particular channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelBans.html\&quot;&gt;ListChannelBans&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of bans that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested bans are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelBansResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListChannelBansResponse> listChannelBansWithHttpInfo(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelBansValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelBansResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the users banned from a particular channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelBans.html\&quot;&gt;ListChannelBans&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of bans that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested bans are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelBansAsync(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback<ListChannelBansResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelBansValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelBansResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelMemberships
     * @param channelArn The maximum number of channel memberships that you want returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The membership type of a user, &lt;code&gt;DEFAULT&lt;/code&gt; or &lt;code&gt;HIDDEN&lt;/code&gt;. Default members are always returned as part of &lt;code&gt;ListChannelMemberships&lt;/code&gt;. Hidden members are only returned if the type filter in &lt;code&gt;ListChannelMemberships&lt;/code&gt; equals &lt;code&gt;HIDDEN&lt;/code&gt;. Otherwise hidden members are not returned. (optional)
     * @param maxResults The maximum number of channel memberships that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel memberships are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelMembershipsCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/memberships"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelMembershipsValidateBeforeCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listChannelMemberships(Async)");
        }

        return listChannelMembershipsCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all channel memberships in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMemberships.html\&quot;&gt;ListChannelMemberships&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The maximum number of channel memberships that you want returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The membership type of a user, &lt;code&gt;DEFAULT&lt;/code&gt; or &lt;code&gt;HIDDEN&lt;/code&gt;. Default members are always returned as part of &lt;code&gt;ListChannelMemberships&lt;/code&gt;. Hidden members are only returned if the type filter in &lt;code&gt;ListChannelMemberships&lt;/code&gt; equals &lt;code&gt;HIDDEN&lt;/code&gt;. Otherwise hidden members are not returned. (optional)
     * @param maxResults The maximum number of channel memberships that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel memberships are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelMembershipsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListChannelMembershipsResponse listChannelMemberships(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelMembershipsResponse> localVarResp = listChannelMembershipsWithHttpInfo(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all channel memberships in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMemberships.html\&quot;&gt;ListChannelMemberships&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The maximum number of channel memberships that you want returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The membership type of a user, &lt;code&gt;DEFAULT&lt;/code&gt; or &lt;code&gt;HIDDEN&lt;/code&gt;. Default members are always returned as part of &lt;code&gt;ListChannelMemberships&lt;/code&gt;. Hidden members are only returned if the type filter in &lt;code&gt;ListChannelMemberships&lt;/code&gt; equals &lt;code&gt;HIDDEN&lt;/code&gt;. Otherwise hidden members are not returned. (optional)
     * @param maxResults The maximum number of channel memberships that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel memberships are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelMembershipsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListChannelMembershipsResponse> listChannelMembershipsWithHttpInfo(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelMembershipsValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelMembershipsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all channel memberships in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMemberships.html\&quot;&gt;ListChannelMemberships&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The maximum number of channel memberships that you want returned. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param type The membership type of a user, &lt;code&gt;DEFAULT&lt;/code&gt; or &lt;code&gt;HIDDEN&lt;/code&gt;. Default members are always returned as part of &lt;code&gt;ListChannelMemberships&lt;/code&gt;. Hidden members are only returned if the type filter in &lt;code&gt;ListChannelMemberships&lt;/code&gt; equals &lt;code&gt;HIDDEN&lt;/code&gt;. Otherwise hidden members are not returned. (optional)
     * @param maxResults The maximum number of channel memberships that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested channel memberships are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelMembershipsAsync(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String type, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback<ListChannelMembershipsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelMembershipsValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, type, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelMembershipsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelMembershipsForAppInstanceUser
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;s (optional)
     * @param maxResults The maximum number of users that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channel memberships is reached. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelMembershipsForAppInstanceUserCall(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels#scope=app-instance-user-memberships";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceUserArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-user-arn", appInstanceUserArn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelMembershipsForAppInstanceUserValidateBeforeCall(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listChannelMembershipsForAppInstanceUser(Async)");
        }

        return listChannelMembershipsForAppInstanceUserCall(scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt; Lists all channels that a particular &lt;code&gt;AppInstanceUser&lt;/code&gt; is a part of. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can call the API with a user ARN that is not their own. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html\&quot;&gt;ListChannelMembershipsForAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;s (optional)
     * @param maxResults The maximum number of users that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channel memberships is reached. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelMembershipsForAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListChannelMembershipsForAppInstanceUserResponse listChannelMembershipsForAppInstanceUser(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelMembershipsForAppInstanceUserResponse> localVarResp = listChannelMembershipsForAppInstanceUserWithHttpInfo(scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Lists all channels that a particular &lt;code&gt;AppInstanceUser&lt;/code&gt; is a part of. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can call the API with a user ARN that is not their own. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html\&quot;&gt;ListChannelMembershipsForAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;s (optional)
     * @param maxResults The maximum number of users that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channel memberships is reached. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelMembershipsForAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListChannelMembershipsForAppInstanceUserResponse> listChannelMembershipsForAppInstanceUserWithHttpInfo(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelMembershipsForAppInstanceUserValidateBeforeCall(scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelMembershipsForAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Lists all channels that a particular &lt;code&gt;AppInstanceUser&lt;/code&gt; is a part of. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can call the API with a user ARN that is not their own. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMembershipsForAppInstanceUser.html\&quot;&gt;ListChannelMembershipsForAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;s (optional)
     * @param maxResults The maximum number of users that you want returned. (optional)
     * @param nextToken The token returned from previous API requests until the number of channel memberships is reached. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelMembershipsForAppInstanceUserAsync(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback<ListChannelMembershipsForAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelMembershipsForAppInstanceUserValidateBeforeCall(scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelMembershipsForAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelMessages
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sortOrder The order in which you want messages sorted. Default is Descending, based on time created. (optional)
     * @param notBefore The initial or starting time stamp for your requested messages. (optional)
     * @param notAfter The final or ending time stamp for your requested messages. (optional)
     * @param maxResults The maximum number of messages that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested messages are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelMessagesCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort-order", sortOrder));
        }

        if (notBefore != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not-before", notBefore));
        }

        if (notAfter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("not-after", notAfter));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelMessagesValidateBeforeCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listChannelMessages(Async)");
        }

        return listChannelMessagesCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;List all the messages in a channel. Returns a paginated list of &lt;code&gt;ChannelMessages&lt;/code&gt;. By default, sorted by creation timestamp in descending order.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.&lt;/p&gt; &lt;p&gt;Also, the x-amz-chime-bearer request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMessages.html\&quot;&gt;ListChannelMessages&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sortOrder The order in which you want messages sorted. Default is Descending, based on time created. (optional)
     * @param notBefore The initial or starting time stamp for your requested messages. (optional)
     * @param notAfter The final or ending time stamp for your requested messages. (optional)
     * @param maxResults The maximum number of messages that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested messages are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelMessagesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListChannelMessagesResponse listChannelMessages(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelMessagesResponse> localVarResp = listChannelMessagesWithHttpInfo(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;List all the messages in a channel. Returns a paginated list of &lt;code&gt;ChannelMessages&lt;/code&gt;. By default, sorted by creation timestamp in descending order.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.&lt;/p&gt; &lt;p&gt;Also, the x-amz-chime-bearer request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMessages.html\&quot;&gt;ListChannelMessages&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sortOrder The order in which you want messages sorted. Default is Descending, based on time created. (optional)
     * @param notBefore The initial or starting time stamp for your requested messages. (optional)
     * @param notAfter The final or ending time stamp for your requested messages. (optional)
     * @param maxResults The maximum number of messages that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested messages are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelMessagesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListChannelMessagesResponse> listChannelMessagesWithHttpInfo(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelMessagesValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelMessagesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;List all the messages in a channel. Returns a paginated list of &lt;code&gt;ChannelMessages&lt;/code&gt;. By default, sorted by creation timestamp in descending order.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Redacted messages appear in the results as empty, since they are only redacted, not deleted. Deleted messages do not appear in the results. This action always returns the latest version of an edited message.&lt;/p&gt; &lt;p&gt;Also, the x-amz-chime-bearer request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelMessages.html\&quot;&gt;ListChannelMessages&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sortOrder The order in which you want messages sorted. Default is Descending, based on time created. (optional)
     * @param notBefore The initial or starting time stamp for your requested messages. (optional)
     * @param notAfter The final or ending time stamp for your requested messages. (optional)
     * @param maxResults The maximum number of messages that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested messages are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelMessagesAsync(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sortOrder, OffsetDateTime notBefore, OffsetDateTime notAfter, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback<ListChannelMessagesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelMessagesValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sortOrder, notBefore, notAfter, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelMessagesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelModerators
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of moderators that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested moderators are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelModeratorsCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/moderators"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelModeratorsValidateBeforeCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling listChannelModerators(Async)");
        }

        return listChannelModeratorsCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all the moderators for a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelModerators.html\&quot;&gt;ListChannelModerators&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of moderators that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested moderators are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelModeratorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListChannelModeratorsResponse listChannelModerators(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelModeratorsResponse> localVarResp = listChannelModeratorsWithHttpInfo(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all the moderators for a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelModerators.html\&quot;&gt;ListChannelModerators&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of moderators that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested moderators are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelModeratorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListChannelModeratorsResponse> listChannelModeratorsWithHttpInfo(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelModeratorsValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelModeratorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all the moderators for a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelModerators.html\&quot;&gt;ListChannelModerators&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of moderators that you want returned. (optional)
     * @param nextToken The token passed by previous API calls until all requested moderators are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelModeratorsAsync(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback<ListChannelModeratorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelModeratorsValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelModeratorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannels
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param privacy The privacy setting. &lt;code&gt;PUBLIC&lt;/code&gt; retrieves all the public channels. &lt;code&gt;PRIVATE&lt;/code&gt; retrieves private channels. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can retrieve private channels.  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelsCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels#app-instance-arn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-arn", appInstanceArn));
        }

        if (privacy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privacy", privacy));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsValidateBeforeCall(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling listChannels(Async)");
        }

        return listChannelsCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Functionality &amp;amp; restrictions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use privacy &#x3D; &lt;code&gt;PUBLIC&lt;/code&gt; to retrieve all public channels in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can set privacy &#x3D; &lt;code&gt;PRIVATE&lt;/code&gt; to list the private channels in an account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannels.html\&quot;&gt;ListChannels&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param privacy The privacy setting. &lt;code&gt;PUBLIC&lt;/code&gt; retrieves all the public channels. &lt;code&gt;PRIVATE&lt;/code&gt; retrieves private channels. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can retrieve private channels.  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListChannelsResponse listChannels(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelsResponse> localVarResp = listChannelsWithHttpInfo(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Functionality &amp;amp; restrictions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use privacy &#x3D; &lt;code&gt;PUBLIC&lt;/code&gt; to retrieve all public channels in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can set privacy &#x3D; &lt;code&gt;PRIVATE&lt;/code&gt; to list the private channels in an account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannels.html\&quot;&gt;ListChannels&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param privacy The privacy setting. &lt;code&gt;PUBLIC&lt;/code&gt; retrieves all the public channels. &lt;code&gt;PRIVATE&lt;/code&gt; retrieves private channels. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can retrieve private channels.  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListChannelsResponse> listChannelsWithHttpInfo(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists all Channels created under a single Chime App as a paginated list. You can specify filters to narrow results.&lt;/p&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Functionality &amp;amp; restrictions&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Use privacy &#x3D; &lt;code&gt;PUBLIC&lt;/code&gt; to retrieve all public channels in the account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can set privacy &#x3D; &lt;code&gt;PRIVATE&lt;/code&gt; to list the private channels in an account.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannels.html\&quot;&gt;ListChannels&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param privacy The privacy setting. &lt;code&gt;PUBLIC&lt;/code&gt; retrieves all the public channels. &lt;code&gt;PRIVATE&lt;/code&gt; retrieves private channels. Only an &lt;code&gt;AppInstanceAdmin&lt;/code&gt; can retrieve private channels.  (optional)
     * @param maxResults The maximum number of channels that you want to return. (optional)
     * @param nextToken The token passed by previous API calls until all requested channels are returned. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelsAsync(String appInstanceArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String privacy, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback<ListChannelsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(appInstanceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, privacy, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listChannelsModeratedByAppInstanceUser
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user in the moderated channel. (optional)
     * @param maxResults The maximum number of channels in the request. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels moderated by the user is reached. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelsModeratedByAppInstanceUserCall(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels#scope=app-instance-user-moderated-channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appInstanceUserArn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app-instance-user-arn", appInstanceUserArn));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsModeratedByAppInstanceUserValidateBeforeCall(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling listChannelsModeratedByAppInstanceUser(Async)");
        }

        return listChannelsModeratedByAppInstanceUserCall(scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;A list of the channels moderated by an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelsModeratedByAppInstanceUser.html\&quot;&gt;ListChannelsModeratedByAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user in the moderated channel. (optional)
     * @param maxResults The maximum number of channels in the request. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels moderated by the user is reached. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListChannelsModeratedByAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListChannelsModeratedByAppInstanceUserResponse listChannelsModeratedByAppInstanceUser(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListChannelsModeratedByAppInstanceUserResponse> localVarResp = listChannelsModeratedByAppInstanceUserWithHttpInfo(scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;A list of the channels moderated by an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelsModeratedByAppInstanceUser.html\&quot;&gt;ListChannelsModeratedByAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user in the moderated channel. (optional)
     * @param maxResults The maximum number of channels in the request. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels moderated by the user is reached. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListChannelsModeratedByAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListChannelsModeratedByAppInstanceUserResponse> listChannelsModeratedByAppInstanceUserWithHttpInfo(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listChannelsModeratedByAppInstanceUserValidateBeforeCall(scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListChannelsModeratedByAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;A list of the channels moderated by an &lt;code&gt;AppInstanceUser&lt;/code&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListChannelsModeratedByAppInstanceUser.html\&quot;&gt;ListChannelsModeratedByAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param scope  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param appInstanceUserArn The ARN of the user in the moderated channel. (optional)
     * @param maxResults The maximum number of channels in the request. (optional)
     * @param nextToken The token returned from previous API requests until the number of channels moderated by the user is reached. (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listChannelsModeratedByAppInstanceUserAsync(String scope, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String appInstanceUserArn, Integer maxResults, String nextToken, String xAmzChimeBearer, String maxResults2, String nextToken2, final ApiCallback<ListChannelsModeratedByAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsModeratedByAppInstanceUserValidateBeforeCall(scope, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, appInstanceUserArn, maxResults, nextToken, xAmzChimeBearer, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListChannelsModeratedByAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMediaCapturePipelines
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token used to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. Valid Range: 1 - 99. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMediaCapturePipelinesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/media-capture-pipelines";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMediaCapturePipelinesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listMediaCapturePipelinesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Returns a list of media capture pipelines.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_ListMediaCapturePipelines.html\&quot;&gt;ListMediaCapturePipelines&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token used to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. Valid Range: 1 - 99. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListMediaCapturePipelinesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListMediaCapturePipelinesResponse listMediaCapturePipelines(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListMediaCapturePipelinesResponse> localVarResp = listMediaCapturePipelinesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Returns a list of media capture pipelines.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_ListMediaCapturePipelines.html\&quot;&gt;ListMediaCapturePipelines&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token used to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. Valid Range: 1 - 99. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListMediaCapturePipelinesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListMediaCapturePipelinesResponse> listMediaCapturePipelinesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listMediaCapturePipelinesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListMediaCapturePipelinesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Returns a list of media capture pipelines.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_media-pipelines-chime_ListMediaCapturePipelines.html\&quot;&gt;ListMediaCapturePipelines&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token used to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. Valid Range: 1 - 99. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMediaCapturePipelinesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListMediaCapturePipelinesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMediaCapturePipelinesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListMediaCapturePipelinesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMeetingTags
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeetingTagsCall(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/tags"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeetingTagsValidateBeforeCall(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling listMeetingTags(Async)");
        }

        return listMeetingTagsCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListMeetingTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListMeetingTagsResponse listMeetingTags(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListMeetingTagsResponse> localVarResp = listMeetingTagsWithHttpInfo(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListMeetingTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListMeetingTagsResponse> listMeetingTagsWithHttpInfo(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listMeetingTagsValidateBeforeCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListMeetingTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeetingTagsAsync(String meetingId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListMeetingTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeetingTagsValidateBeforeCall(meetingId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListMeetingTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMeetings
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeetingsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMeetingsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listMeetingsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists up to 100 active Amazon Chime SDK meetings.&lt;/p&gt; &lt;important&gt; &lt;p&gt;ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListMeetingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListMeetingsResponse listMeetings(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListMeetingsResponse> localVarResp = listMeetingsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists up to 100 active Amazon Chime SDK meetings.&lt;/p&gt; &lt;important&gt; &lt;p&gt;ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListMeetingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListMeetingsResponse> listMeetingsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listMeetingsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListMeetingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists up to 100 active Amazon Chime SDK meetings.&lt;/p&gt; &lt;important&gt; &lt;p&gt;ListMeetings is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;For more information about the Amazon Chime SDK, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meetings-sdk.html\&quot;&gt;Using the Amazon Chime SDK&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listMeetingsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListMeetingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMeetingsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListMeetingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPhoneNumberOrders
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPhoneNumberOrdersCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-number-orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPhoneNumberOrdersValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listPhoneNumberOrdersCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists the phone number orders for the administrator&#39;s Amazon Chime account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListPhoneNumberOrdersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListPhoneNumberOrdersResponse listPhoneNumberOrders(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListPhoneNumberOrdersResponse> localVarResp = listPhoneNumberOrdersWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the phone number orders for the administrator&#39;s Amazon Chime account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListPhoneNumberOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPhoneNumberOrdersResponse> listPhoneNumberOrdersWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listPhoneNumberOrdersValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumberOrdersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the phone number orders for the administrator&#39;s Amazon Chime account.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPhoneNumberOrdersAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListPhoneNumberOrdersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPhoneNumberOrdersValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListPhoneNumberOrdersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPhoneNumbers
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param status The phone number status. (optional)
     * @param productType The phone number product type. (optional)
     * @param filterName The filter to use to limit the number of results. (optional)
     * @param filterValue The value to use for the filter. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPhoneNumbersCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String productType, String filterName, String filterValue, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product-type", productType));
        }

        if (filterName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter-name", filterName));
        }

        if (filterValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter-value", filterValue));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPhoneNumbersValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String productType, String filterName, String filterValue, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listPhoneNumbersCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, productType, filterName, filterValue, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param status The phone number status. (optional)
     * @param productType The phone number product type. (optional)
     * @param filterName The filter to use to limit the number of results. (optional)
     * @param filterValue The value to use for the filter. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListPhoneNumbersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListPhoneNumbersResponse listPhoneNumbers(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String productType, String filterName, String filterValue, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListPhoneNumbersResponse> localVarResp = listPhoneNumbersWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, productType, filterName, filterValue, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param status The phone number status. (optional)
     * @param productType The phone number product type. (optional)
     * @param filterName The filter to use to limit the number of results. (optional)
     * @param filterValue The value to use for the filter. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListPhoneNumbersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListPhoneNumbersResponse> listPhoneNumbersWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String productType, String filterName, String filterValue, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listPhoneNumbersValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, productType, filterName, filterValue, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the phone numbers for the specified Amazon Chime account, Amazon Chime user, Amazon Chime Voice Connector, or Amazon Chime Voice Connector group.
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param status The phone number status. (optional)
     * @param productType The phone number product type. (optional)
     * @param filterName The filter to use to limit the number of results. (optional)
     * @param filterValue The value to use for the filter. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPhoneNumbersAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String productType, String filterName, String filterValue, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListPhoneNumbersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPhoneNumbersValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, productType, filterName, filterValue, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListPhoneNumbersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listProxySessions
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param status The proxy session status. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listProxySessionsCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/proxy-sessions"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listProxySessionsValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling listProxySessions(Async)");
        }

        return listProxySessionsCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the proxy sessions for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListProxySessions.html\&quot;&gt;ListProxySessions&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param status The proxy session status. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListProxySessionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListProxySessionsResponse listProxySessions(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListProxySessionsResponse> localVarResp = listProxySessionsWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the proxy sessions for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListProxySessions.html\&quot;&gt;ListProxySessions&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param status The proxy session status. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListProxySessionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListProxySessionsResponse> listProxySessionsWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listProxySessionsValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListProxySessionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the proxy sessions for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListProxySessions.html\&quot;&gt;ListProxySessions&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param status The proxy session status. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listProxySessionsAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String status, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListProxySessionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listProxySessionsValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, status, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListProxySessionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoomMemberships
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoomMembershipsCall(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}/memberships"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoomMembershipsValidateBeforeCall(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listRoomMemberships(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling listRoomMemberships(Async)");
        }

        return listRoomMembershipsCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members&#39; IDs, email addresses, and names.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListRoomMembershipsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListRoomMembershipsResponse listRoomMemberships(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListRoomMembershipsResponse> localVarResp = listRoomMembershipsWithHttpInfo(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members&#39; IDs, email addresses, and names.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListRoomMembershipsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRoomMembershipsResponse> listRoomMembershipsWithHttpInfo(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listRoomMembershipsValidateBeforeCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListRoomMembershipsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the membership details for the specified room in an Amazon Chime Enterprise account, such as the members&#39; IDs, email addresses, and names.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoomMembershipsAsync(String accountId, String roomId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListRoomMembershipsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoomMembershipsValidateBeforeCall(accountId, roomId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListRoomMembershipsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRooms
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param memberId The member ID (user ID or bot ID). (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoomsCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String memberId, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (memberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("member-id", memberId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRoomsValidateBeforeCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String memberId, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listRooms(Async)");
        }

        return listRoomsCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, memberId, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param memberId The member ID (user ID or bot ID). (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListRoomsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListRoomsResponse listRooms(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String memberId, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListRoomsResponse> localVarResp = listRoomsWithHttpInfo(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, memberId, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param memberId The member ID (user ID or bot ID). (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListRoomsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRoomsResponse> listRoomsWithHttpInfo(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String memberId, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listRoomsValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, memberId, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListRoomsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the room details for the specified Amazon Chime Enterprise account. Optionally, filter the results by a member ID (user ID or bot ID) to see a list of rooms that the member belongs to.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param memberId The member ID (user ID or bot ID). (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRoomsAsync(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String memberId, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListRoomsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRoomsValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, memberId, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListRoomsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSipMediaApplications
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listSipMediaApplicationsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip-media-applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSipMediaApplicationsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listSipMediaApplicationsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the SIP media applications under the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListSipMediaApplications.html\&quot;&gt;ListSipMediaApplications&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListSipMediaApplicationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListSipMediaApplicationsResponse listSipMediaApplications(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListSipMediaApplicationsResponse> localVarResp = listSipMediaApplicationsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the SIP media applications under the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListSipMediaApplications.html\&quot;&gt;ListSipMediaApplications&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListSipMediaApplicationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListSipMediaApplicationsResponse> listSipMediaApplicationsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listSipMediaApplicationsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListSipMediaApplicationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the SIP media applications under the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListSipMediaApplications.html\&quot;&gt;ListSipMediaApplications&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listSipMediaApplicationsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListSipMediaApplicationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSipMediaApplicationsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListSipMediaApplicationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSipRules
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sipMediaApplication The SIP media application ID. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listSipRulesCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sipMediaApplication, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sip-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sipMediaApplication != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sip-media-application", sipMediaApplication));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSipRulesValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sipMediaApplication, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listSipRulesCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sipMediaApplication, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the SIP rules under the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListSipRules.html\&quot;&gt;ListSipRules&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sipMediaApplication The SIP media application ID. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListSipRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListSipRulesResponse listSipRules(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sipMediaApplication, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListSipRulesResponse> localVarResp = listSipRulesWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sipMediaApplication, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the SIP rules under the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListSipRules.html\&quot;&gt;ListSipRules&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sipMediaApplication The SIP media application ID. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListSipRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListSipRulesResponse> listSipRulesWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sipMediaApplication, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listSipRulesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sipMediaApplication, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListSipRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the SIP rules under the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListSipRules.html\&quot;&gt;ListSipRules&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param sipMediaApplication The SIP media application ID. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listSipRulesAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String sipMediaApplication, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListSipRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSipRulesValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, sipMediaApplication, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListSipRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSupportedPhoneNumberCountries
     * @param productType The phone number product type. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSupportedPhoneNumberCountriesCall(String productType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-number-countries#product-type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product-type", productType));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSupportedPhoneNumberCountriesValidateBeforeCall(String productType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productType' is set
        if (productType == null) {
            throw new ApiException("Missing the required parameter 'productType' when calling listSupportedPhoneNumberCountries(Async)");
        }

        return listSupportedPhoneNumberCountriesCall(productType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Lists supported phone number countries.
     * @param productType The phone number product type. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListSupportedPhoneNumberCountriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListSupportedPhoneNumberCountriesResponse listSupportedPhoneNumberCountries(String productType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListSupportedPhoneNumberCountriesResponse> localVarResp = listSupportedPhoneNumberCountriesWithHttpInfo(productType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists supported phone number countries.
     * @param productType The phone number product type. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListSupportedPhoneNumberCountriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListSupportedPhoneNumberCountriesResponse> listSupportedPhoneNumberCountriesWithHttpInfo(String productType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listSupportedPhoneNumberCountriesValidateBeforeCall(productType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListSupportedPhoneNumberCountriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists supported phone number countries.
     * @param productType The phone number product type. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSupportedPhoneNumberCountriesAsync(String productType, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListSupportedPhoneNumberCountriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSupportedPhoneNumberCountriesValidateBeforeCall(productType, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListSupportedPhoneNumberCountriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTagsForResource
     * @param arn The resource ARN. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listTagsForResourceCall(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags#arn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (arn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arn", arn));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTagsForResourceValidateBeforeCall(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'arn' is set
        if (arn == null) {
            throw new ApiException("Missing the required parameter 'arn' when calling listTagsForResource(Async)");
        }

        return listTagsForResourceCall(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK meeting and messaging resources.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the applicable latest version in the Amazon Chime SDK.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For meetings: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For messaging: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param arn The resource ARN. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListTagsForResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListTagsForResourceResponse listTagsForResource(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListTagsForResourceResponse> localVarResp = listTagsForResourceWithHttpInfo(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK meeting and messaging resources.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the applicable latest version in the Amazon Chime SDK.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For meetings: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For messaging: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param arn The resource ARN. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListTagsForResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListTagsForResourceResponse> listTagsForResourceWithHttpInfo(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the tags applied to an Amazon Chime SDK meeting and messaging resources.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the applicable latest version in the Amazon Chime SDK.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;For meetings: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;For messaging: &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_ListTagsForResource.html\&quot;&gt;ListTagsForResource&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param arn The resource ARN. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listTagsForResourceAsync(String arn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListTagsForResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTagsForResourceValidateBeforeCall(arn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListTagsForResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsers
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userEmail Optional. The user email address used to filter results. Maximum 1. (optional)
     * @param userType The user type. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userEmail, String userType, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user-email", userEmail));
        }

        if (userType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user-type", userType));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userEmail, String userType, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listUsers(Async)");
        }

        return listUsersCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userEmail, userType, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userEmail Optional. The user email address used to filter results. Maximum 1. (optional)
     * @param userType The user type. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ListUsersResponse listUsers(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userEmail, String userType, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListUsersResponse> localVarResp = listUsersWithHttpInfo(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userEmail, userType, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userEmail Optional. The user email address used to filter results. Maximum 1. (optional)
     * @param userType The user type. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListUsersResponse> listUsersWithHttpInfo(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userEmail, String userType, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userEmail, userType, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists the users that belong to the specified Amazon Chime account. You can specify an email address to list only the user that the email address belongs to.
     * @param accountId The Amazon Chime account ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param userEmail Optional. The user email address used to filter results. Maximum 1. (optional)
     * @param userType The user type. (optional)
     * @param maxResults The maximum number of results to return in a single call. Defaults to 100. (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersAsync(String accountId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String userEmail, String userType, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<ListUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(accountId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, userEmail, userType, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVoiceConnectorGroups
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listVoiceConnectorGroupsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connector-groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVoiceConnectorGroupsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listVoiceConnectorGroupsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the Amazon Chime Voice Connector groups for the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectorGroups.html\&quot;&gt;ListVoiceConnectorGroups&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListVoiceConnectorGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListVoiceConnectorGroupsResponse listVoiceConnectorGroups(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListVoiceConnectorGroupsResponse> localVarResp = listVoiceConnectorGroupsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the Amazon Chime Voice Connector groups for the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectorGroups.html\&quot;&gt;ListVoiceConnectorGroups&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListVoiceConnectorGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListVoiceConnectorGroupsResponse> listVoiceConnectorGroupsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listVoiceConnectorGroupsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListVoiceConnectorGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the Amazon Chime Voice Connector groups for the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectorGroups.html\&quot;&gt;ListVoiceConnectorGroups&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listVoiceConnectorGroupsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListVoiceConnectorGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVoiceConnectorGroupsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListVoiceConnectorGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVoiceConnectorTerminationCredentials
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listVoiceConnectorTerminationCredentialsCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/termination/credentials"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVoiceConnectorTerminationCredentialsValidateBeforeCall(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling listVoiceConnectorTerminationCredentials(Async)");
        }

        return listVoiceConnectorTerminationCredentialsCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the SIP credentials for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectorTerminationCredentials.html\&quot;&gt;ListVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ListVoiceConnectorTerminationCredentialsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListVoiceConnectorTerminationCredentialsResponse listVoiceConnectorTerminationCredentials(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ListVoiceConnectorTerminationCredentialsResponse> localVarResp = listVoiceConnectorTerminationCredentialsWithHttpInfo(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the SIP credentials for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectorTerminationCredentials.html\&quot;&gt;ListVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ListVoiceConnectorTerminationCredentialsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListVoiceConnectorTerminationCredentialsResponse> listVoiceConnectorTerminationCredentialsWithHttpInfo(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = listVoiceConnectorTerminationCredentialsValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ListVoiceConnectorTerminationCredentialsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the SIP credentials for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectorTerminationCredentials.html\&quot;&gt;ListVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listVoiceConnectorTerminationCredentialsAsync(String voiceConnectorId, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ListVoiceConnectorTerminationCredentialsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVoiceConnectorTerminationCredentialsValidateBeforeCall(voiceConnectorId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ListVoiceConnectorTerminationCredentialsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVoiceConnectors
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listVoiceConnectorsCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/voice-connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVoiceConnectorsValidateBeforeCall(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        return listVoiceConnectorsCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * &lt;p&gt;Lists the Amazon Chime Voice Connectors for the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectors.html\&quot;&gt;ListVoiceConnectors&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ListVoiceConnectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListVoiceConnectorsResponse listVoiceConnectors(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<ListVoiceConnectorsResponse> localVarResp = listVoiceConnectorsWithHttpInfo(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Lists the Amazon Chime Voice Connectors for the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectors.html\&quot;&gt;ListVoiceConnectors&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;ListVoiceConnectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListVoiceConnectorsResponse> listVoiceConnectorsWithHttpInfo(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = listVoiceConnectorsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<ListVoiceConnectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Lists the Amazon Chime Voice Connectors for the administrator&#39;s AWS account.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ListVoiceConnectors.html\&quot;&gt;ListVoiceConnectors&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param nextToken The token to use to retrieve the next page of results. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listVoiceConnectorsAsync(String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String nextToken, Integer maxResults, String maxResults2, String nextToken2, final ApiCallback<ListVoiceConnectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVoiceConnectorsValidateBeforeCall(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, nextToken, maxResults, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<ListVoiceConnectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logoutUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutUserCall(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users/{userId}#operation=logout"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutUserValidateBeforeCall(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling logoutUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling logoutUser(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling logoutUser(Async)");
        }

        return logoutUserCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Logs out the specified user from all of the devices they are currently logged into.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object logoutUser(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = logoutUserWithHttpInfo(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Logs out the specified user from all of the devices they are currently logged into.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> logoutUserWithHttpInfo(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = logoutUserValidateBeforeCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Logs out the specified user from all of the devices they are currently logged into.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutUserAsync(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutUserValidateBeforeCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAppInstanceRetentionSettings
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param putAppInstanceRetentionSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putAppInstanceRetentionSettingsCall(String appInstanceArn, PutAppInstanceRetentionSettingsRequest putAppInstanceRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAppInstanceRetentionSettingsRequest;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/retention-settings"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAppInstanceRetentionSettingsValidateBeforeCall(String appInstanceArn, PutAppInstanceRetentionSettingsRequest putAppInstanceRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling putAppInstanceRetentionSettings(Async)");
        }

        // verify the required parameter 'putAppInstanceRetentionSettingsRequest' is set
        if (putAppInstanceRetentionSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'putAppInstanceRetentionSettingsRequest' when calling putAppInstanceRetentionSettings(Async)");
        }

        return putAppInstanceRetentionSettingsCall(appInstanceArn, putAppInstanceRetentionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sets the amount of time in days that a given &lt;code&gt;AppInstance&lt;/code&gt; retains data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_PutAppInstanceRetentionSettings.html\&quot;&gt;PutAppInstanceRetentionSettings&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param putAppInstanceRetentionSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutAppInstanceRetentionSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutAppInstanceRetentionSettingsResponse putAppInstanceRetentionSettings(String appInstanceArn, PutAppInstanceRetentionSettingsRequest putAppInstanceRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutAppInstanceRetentionSettingsResponse> localVarResp = putAppInstanceRetentionSettingsWithHttpInfo(appInstanceArn, putAppInstanceRetentionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sets the amount of time in days that a given &lt;code&gt;AppInstance&lt;/code&gt; retains data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_PutAppInstanceRetentionSettings.html\&quot;&gt;PutAppInstanceRetentionSettings&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param putAppInstanceRetentionSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutAppInstanceRetentionSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutAppInstanceRetentionSettingsResponse> putAppInstanceRetentionSettingsWithHttpInfo(String appInstanceArn, PutAppInstanceRetentionSettingsRequest putAppInstanceRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putAppInstanceRetentionSettingsValidateBeforeCall(appInstanceArn, putAppInstanceRetentionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutAppInstanceRetentionSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sets the amount of time in days that a given &lt;code&gt;AppInstance&lt;/code&gt; retains data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_PutAppInstanceRetentionSettings.html\&quot;&gt;PutAppInstanceRetentionSettings&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param putAppInstanceRetentionSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putAppInstanceRetentionSettingsAsync(String appInstanceArn, PutAppInstanceRetentionSettingsRequest putAppInstanceRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutAppInstanceRetentionSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAppInstanceRetentionSettingsValidateBeforeCall(appInstanceArn, putAppInstanceRetentionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutAppInstanceRetentionSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putAppInstanceStreamingConfigurations
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param putAppInstanceStreamingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putAppInstanceStreamingConfigurationsCall(String appInstanceArn, PutAppInstanceStreamingConfigurationsRequest putAppInstanceStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putAppInstanceStreamingConfigurationsRequest;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}/streaming-configurations"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putAppInstanceStreamingConfigurationsValidateBeforeCall(String appInstanceArn, PutAppInstanceStreamingConfigurationsRequest putAppInstanceStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling putAppInstanceStreamingConfigurations(Async)");
        }

        // verify the required parameter 'putAppInstanceStreamingConfigurationsRequest' is set
        if (putAppInstanceStreamingConfigurationsRequest == null) {
            throw new ApiException("Missing the required parameter 'putAppInstanceStreamingConfigurationsRequest' when calling putAppInstanceStreamingConfigurations(Async)");
        }

        return putAppInstanceStreamingConfigurationsCall(appInstanceArn, putAppInstanceStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;The data streaming configurations of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_PutMessagingStreamingConfigurations.html\&quot;&gt;PutMessagingStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param putAppInstanceStreamingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutAppInstanceStreamingConfigurationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutAppInstanceStreamingConfigurationsResponse putAppInstanceStreamingConfigurations(String appInstanceArn, PutAppInstanceStreamingConfigurationsRequest putAppInstanceStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutAppInstanceStreamingConfigurationsResponse> localVarResp = putAppInstanceStreamingConfigurationsWithHttpInfo(appInstanceArn, putAppInstanceStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The data streaming configurations of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_PutMessagingStreamingConfigurations.html\&quot;&gt;PutMessagingStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param putAppInstanceStreamingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutAppInstanceStreamingConfigurationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutAppInstanceStreamingConfigurationsResponse> putAppInstanceStreamingConfigurationsWithHttpInfo(String appInstanceArn, PutAppInstanceStreamingConfigurationsRequest putAppInstanceStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putAppInstanceStreamingConfigurationsValidateBeforeCall(appInstanceArn, putAppInstanceStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutAppInstanceStreamingConfigurationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The data streaming configurations of an &lt;code&gt;AppInstance&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_PutMessagingStreamingConfigurations.html\&quot;&gt;PutMessagingStreamingConfigurations&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param putAppInstanceStreamingConfigurationsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putAppInstanceStreamingConfigurationsAsync(String appInstanceArn, PutAppInstanceStreamingConfigurationsRequest putAppInstanceStreamingConfigurationsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutAppInstanceStreamingConfigurationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putAppInstanceStreamingConfigurationsValidateBeforeCall(appInstanceArn, putAppInstanceStreamingConfigurationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutAppInstanceStreamingConfigurationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putEventsConfiguration
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param putEventsConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putEventsConfigurationCall(String accountId, String botId, PutEventsConfigurationRequest putEventsConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putEventsConfigurationRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/bots/{botId}/events-configuration"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "botId" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putEventsConfigurationValidateBeforeCall(String accountId, String botId, PutEventsConfigurationRequest putEventsConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling putEventsConfiguration(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling putEventsConfiguration(Async)");
        }

        // verify the required parameter 'putEventsConfigurationRequest' is set
        if (putEventsConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'putEventsConfigurationRequest' when calling putEventsConfiguration(Async)");
        }

        return putEventsConfigurationCall(accountId, botId, putEventsConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see &lt;a&gt;Bot&lt;/a&gt;.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param putEventsConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutEventsConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public PutEventsConfigurationResponse putEventsConfiguration(String accountId, String botId, PutEventsConfigurationRequest putEventsConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutEventsConfigurationResponse> localVarResp = putEventsConfigurationWithHttpInfo(accountId, botId, putEventsConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see &lt;a&gt;Bot&lt;/a&gt;.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param putEventsConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutEventsConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutEventsConfigurationResponse> putEventsConfigurationWithHttpInfo(String accountId, String botId, PutEventsConfigurationRequest putEventsConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putEventsConfigurationValidateBeforeCall(accountId, botId, putEventsConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutEventsConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates an events configuration that allows a bot to receive outgoing events sent by Amazon Chime. Choose either an HTTPS endpoint or a Lambda function ARN. For more information, see &lt;a&gt;Bot&lt;/a&gt;.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param putEventsConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> NotFoundException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putEventsConfigurationAsync(String accountId, String botId, PutEventsConfigurationRequest putEventsConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutEventsConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putEventsConfigurationValidateBeforeCall(accountId, botId, putEventsConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutEventsConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putRetentionSettings
     * @param accountId The Amazon Chime account ID. (required)
     * @param putRetentionSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRetentionSettingsCall(String accountId, PutRetentionSettingsRequest putRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putRetentionSettingsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/retention-settings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putRetentionSettingsValidateBeforeCall(String accountId, PutRetentionSettingsRequest putRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling putRetentionSettings(Async)");
        }

        // verify the required parameter 'putRetentionSettingsRequest' is set
        if (putRetentionSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'putRetentionSettingsRequest' when calling putRetentionSettings(Async)");
        }

        return putRetentionSettingsCall(accountId, putRetentionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt; Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/cloudtrail.html\&quot;&gt;Logging Amazon Chime API Calls with AWS CloudTrail&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; To turn off existing retention settings, remove the number of days from the corresponding &lt;b&gt;RetentionDays&lt;/b&gt; field in the &lt;b&gt;RetentionSettings&lt;/b&gt; object. For more information about retention settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html\&quot;&gt;Managing Chat Retention Policies&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param putRetentionSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutRetentionSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public PutRetentionSettingsResponse putRetentionSettings(String accountId, PutRetentionSettingsRequest putRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutRetentionSettingsResponse> localVarResp = putRetentionSettingsWithHttpInfo(accountId, putRetentionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt; Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/cloudtrail.html\&quot;&gt;Logging Amazon Chime API Calls with AWS CloudTrail&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; To turn off existing retention settings, remove the number of days from the corresponding &lt;b&gt;RetentionDays&lt;/b&gt; field in the &lt;b&gt;RetentionSettings&lt;/b&gt; object. For more information about retention settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html\&quot;&gt;Managing Chat Retention Policies&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param putRetentionSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutRetentionSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PutRetentionSettingsResponse> putRetentionSettingsWithHttpInfo(String accountId, PutRetentionSettingsRequest putRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putRetentionSettingsValidateBeforeCall(accountId, putRetentionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutRetentionSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt; Puts retention settings for the specified Amazon Chime Enterprise account. We recommend using AWS CloudTrail to monitor usage of this API for your account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/cloudtrail.html\&quot;&gt;Logging Amazon Chime API Calls with AWS CloudTrail&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; To turn off existing retention settings, remove the number of days from the corresponding &lt;b&gt;RetentionDays&lt;/b&gt; field in the &lt;b&gt;RetentionSettings&lt;/b&gt; object. For more information about retention settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/chat-retention.html\&quot;&gt;Managing Chat Retention Policies&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.&lt;/p&gt;
     * @param accountId The Amazon Chime account ID. (required)
     * @param putRetentionSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putRetentionSettingsAsync(String accountId, PutRetentionSettingsRequest putRetentionSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutRetentionSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putRetentionSettingsValidateBeforeCall(accountId, putRetentionSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutRetentionSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSipMediaApplicationLoggingConfiguration
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param putSipMediaApplicationLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putSipMediaApplicationLoggingConfigurationCall(String sipMediaApplicationId, PutSipMediaApplicationLoggingConfigurationRequest putSipMediaApplicationLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putSipMediaApplicationLoggingConfigurationRequest;

        // create path and map variables
        String localVarPath = "/sip-media-applications/{sipMediaApplicationId}/logging-configuration"
            .replace("{" + "sipMediaApplicationId" + "}", localVarApiClient.escapeString(sipMediaApplicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSipMediaApplicationLoggingConfigurationValidateBeforeCall(String sipMediaApplicationId, PutSipMediaApplicationLoggingConfigurationRequest putSipMediaApplicationLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipMediaApplicationId' is set
        if (sipMediaApplicationId == null) {
            throw new ApiException("Missing the required parameter 'sipMediaApplicationId' when calling putSipMediaApplicationLoggingConfiguration(Async)");
        }

        // verify the required parameter 'putSipMediaApplicationLoggingConfigurationRequest' is set
        if (putSipMediaApplicationLoggingConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'putSipMediaApplicationLoggingConfigurationRequest' when calling putSipMediaApplicationLoggingConfiguration(Async)");
        }

        return putSipMediaApplicationLoggingConfigurationCall(sipMediaApplicationId, putSipMediaApplicationLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the logging configuration for the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutSipMediaApplicationLoggingConfiguration.html\&quot;&gt;PutSipMediaApplicationLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param putSipMediaApplicationLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutSipMediaApplicationLoggingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutSipMediaApplicationLoggingConfigurationResponse putSipMediaApplicationLoggingConfiguration(String sipMediaApplicationId, PutSipMediaApplicationLoggingConfigurationRequest putSipMediaApplicationLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutSipMediaApplicationLoggingConfigurationResponse> localVarResp = putSipMediaApplicationLoggingConfigurationWithHttpInfo(sipMediaApplicationId, putSipMediaApplicationLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the logging configuration for the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutSipMediaApplicationLoggingConfiguration.html\&quot;&gt;PutSipMediaApplicationLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param putSipMediaApplicationLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutSipMediaApplicationLoggingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutSipMediaApplicationLoggingConfigurationResponse> putSipMediaApplicationLoggingConfigurationWithHttpInfo(String sipMediaApplicationId, PutSipMediaApplicationLoggingConfigurationRequest putSipMediaApplicationLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putSipMediaApplicationLoggingConfigurationValidateBeforeCall(sipMediaApplicationId, putSipMediaApplicationLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutSipMediaApplicationLoggingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the logging configuration for the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutSipMediaApplicationLoggingConfiguration.html\&quot;&gt;PutSipMediaApplicationLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param putSipMediaApplicationLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putSipMediaApplicationLoggingConfigurationAsync(String sipMediaApplicationId, PutSipMediaApplicationLoggingConfigurationRequest putSipMediaApplicationLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutSipMediaApplicationLoggingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSipMediaApplicationLoggingConfigurationValidateBeforeCall(sipMediaApplicationId, putSipMediaApplicationLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutSipMediaApplicationLoggingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVoiceConnectorEmergencyCallingConfiguration
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorEmergencyCallingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorEmergencyCallingConfigurationCall(String voiceConnectorId, PutVoiceConnectorEmergencyCallingConfigurationRequest putVoiceConnectorEmergencyCallingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putVoiceConnectorEmergencyCallingConfigurationRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/emergency-calling-configuration"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(String voiceConnectorId, PutVoiceConnectorEmergencyCallingConfigurationRequest putVoiceConnectorEmergencyCallingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling putVoiceConnectorEmergencyCallingConfiguration(Async)");
        }

        // verify the required parameter 'putVoiceConnectorEmergencyCallingConfigurationRequest' is set
        if (putVoiceConnectorEmergencyCallingConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'putVoiceConnectorEmergencyCallingConfigurationRequest' when calling putVoiceConnectorEmergencyCallingConfiguration(Async)");
        }

        return putVoiceConnectorEmergencyCallingConfigurationCall(voiceConnectorId, putVoiceConnectorEmergencyCallingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for the Amazon Chime Voice Connector before emergency calling can be configured.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;PutVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorEmergencyCallingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutVoiceConnectorEmergencyCallingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutVoiceConnectorEmergencyCallingConfigurationResponse putVoiceConnectorEmergencyCallingConfiguration(String voiceConnectorId, PutVoiceConnectorEmergencyCallingConfigurationRequest putVoiceConnectorEmergencyCallingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutVoiceConnectorEmergencyCallingConfigurationResponse> localVarResp = putVoiceConnectorEmergencyCallingConfigurationWithHttpInfo(voiceConnectorId, putVoiceConnectorEmergencyCallingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for the Amazon Chime Voice Connector before emergency calling can be configured.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;PutVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorEmergencyCallingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutVoiceConnectorEmergencyCallingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutVoiceConnectorEmergencyCallingConfigurationResponse> putVoiceConnectorEmergencyCallingConfigurationWithHttpInfo(String voiceConnectorId, PutVoiceConnectorEmergencyCallingConfigurationRequest putVoiceConnectorEmergencyCallingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(voiceConnectorId, putVoiceConnectorEmergencyCallingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorEmergencyCallingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Puts emergency calling configuration details to the specified Amazon Chime Voice Connector, such as emergency phone numbers and calling countries. Origination and termination settings must be enabled for the Amazon Chime Voice Connector before emergency calling can be configured.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorEmergencyCallingConfiguration.html\&quot;&gt;PutVoiceConnectorEmergencyCallingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorEmergencyCallingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorEmergencyCallingConfigurationAsync(String voiceConnectorId, PutVoiceConnectorEmergencyCallingConfigurationRequest putVoiceConnectorEmergencyCallingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutVoiceConnectorEmergencyCallingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVoiceConnectorEmergencyCallingConfigurationValidateBeforeCall(voiceConnectorId, putVoiceConnectorEmergencyCallingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorEmergencyCallingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVoiceConnectorLoggingConfiguration
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorLoggingConfigurationCall(String voiceConnectorId, PutVoiceConnectorLoggingConfigurationRequest putVoiceConnectorLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putVoiceConnectorLoggingConfigurationRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/logging-configuration"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVoiceConnectorLoggingConfigurationValidateBeforeCall(String voiceConnectorId, PutVoiceConnectorLoggingConfigurationRequest putVoiceConnectorLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling putVoiceConnectorLoggingConfiguration(Async)");
        }

        // verify the required parameter 'putVoiceConnectorLoggingConfigurationRequest' is set
        if (putVoiceConnectorLoggingConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'putVoiceConnectorLoggingConfigurationRequest' when calling putVoiceConnectorLoggingConfiguration(Async)");
        }

        return putVoiceConnectorLoggingConfigurationCall(voiceConnectorId, putVoiceConnectorLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorLoggingConfiguration.html\&quot;&gt;PutVoiceConnectorLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutVoiceConnectorLoggingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutVoiceConnectorLoggingConfigurationResponse putVoiceConnectorLoggingConfiguration(String voiceConnectorId, PutVoiceConnectorLoggingConfigurationRequest putVoiceConnectorLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutVoiceConnectorLoggingConfigurationResponse> localVarResp = putVoiceConnectorLoggingConfigurationWithHttpInfo(voiceConnectorId, putVoiceConnectorLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorLoggingConfiguration.html\&quot;&gt;PutVoiceConnectorLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutVoiceConnectorLoggingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutVoiceConnectorLoggingConfigurationResponse> putVoiceConnectorLoggingConfigurationWithHttpInfo(String voiceConnectorId, PutVoiceConnectorLoggingConfigurationRequest putVoiceConnectorLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putVoiceConnectorLoggingConfigurationValidateBeforeCall(voiceConnectorId, putVoiceConnectorLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorLoggingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a logging configuration for the specified Amazon Chime Voice Connector. The logging configuration specifies whether SIP message logs are enabled for sending to Amazon CloudWatch Logs.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorLoggingConfiguration.html\&quot;&gt;PutVoiceConnectorLoggingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorLoggingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorLoggingConfigurationAsync(String voiceConnectorId, PutVoiceConnectorLoggingConfigurationRequest putVoiceConnectorLoggingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutVoiceConnectorLoggingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVoiceConnectorLoggingConfigurationValidateBeforeCall(voiceConnectorId, putVoiceConnectorLoggingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorLoggingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVoiceConnectorOrigination
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorOriginationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorOriginationCall(String voiceConnectorId, PutVoiceConnectorOriginationRequest putVoiceConnectorOriginationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putVoiceConnectorOriginationRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/origination"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVoiceConnectorOriginationValidateBeforeCall(String voiceConnectorId, PutVoiceConnectorOriginationRequest putVoiceConnectorOriginationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling putVoiceConnectorOrigination(Async)");
        }

        // verify the required parameter 'putVoiceConnectorOriginationRequest' is set
        if (putVoiceConnectorOriginationRequest == null) {
            throw new ApiException("Missing the required parameter 'putVoiceConnectorOriginationRequest' when calling putVoiceConnectorOrigination(Async)");
        }

        return putVoiceConnectorOriginationCall(voiceConnectorId, putVoiceConnectorOriginationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds origination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorOrigination.html\&quot;&gt;PutVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorOriginationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutVoiceConnectorOriginationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutVoiceConnectorOriginationResponse putVoiceConnectorOrigination(String voiceConnectorId, PutVoiceConnectorOriginationRequest putVoiceConnectorOriginationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutVoiceConnectorOriginationResponse> localVarResp = putVoiceConnectorOriginationWithHttpInfo(voiceConnectorId, putVoiceConnectorOriginationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds origination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorOrigination.html\&quot;&gt;PutVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorOriginationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutVoiceConnectorOriginationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutVoiceConnectorOriginationResponse> putVoiceConnectorOriginationWithHttpInfo(String voiceConnectorId, PutVoiceConnectorOriginationRequest putVoiceConnectorOriginationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putVoiceConnectorOriginationValidateBeforeCall(voiceConnectorId, putVoiceConnectorOriginationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorOriginationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds origination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off origination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorOrigination.html\&quot;&gt;PutVoiceConnectorOrigination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorOriginationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorOriginationAsync(String voiceConnectorId, PutVoiceConnectorOriginationRequest putVoiceConnectorOriginationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutVoiceConnectorOriginationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVoiceConnectorOriginationValidateBeforeCall(voiceConnectorId, putVoiceConnectorOriginationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorOriginationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVoiceConnectorProxy
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param putVoiceConnectorProxyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorProxyCall(String voiceConnectorId, PutVoiceConnectorProxyRequest putVoiceConnectorProxyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putVoiceConnectorProxyRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/programmable-numbers/proxy"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVoiceConnectorProxyValidateBeforeCall(String voiceConnectorId, PutVoiceConnectorProxyRequest putVoiceConnectorProxyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling putVoiceConnectorProxy(Async)");
        }

        // verify the required parameter 'putVoiceConnectorProxyRequest' is set
        if (putVoiceConnectorProxyRequest == null) {
            throw new ApiException("Missing the required parameter 'putVoiceConnectorProxyRequest' when calling putVoiceConnectorProxy(Async)");
        }

        return putVoiceConnectorProxyCall(voiceConnectorId, putVoiceConnectorProxyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorProxy.html\&quot;&gt;PutVoiceConnectorProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param putVoiceConnectorProxyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutVoiceConnectorProxyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutVoiceConnectorProxyResponse putVoiceConnectorProxy(String voiceConnectorId, PutVoiceConnectorProxyRequest putVoiceConnectorProxyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutVoiceConnectorProxyResponse> localVarResp = putVoiceConnectorProxyWithHttpInfo(voiceConnectorId, putVoiceConnectorProxyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorProxy.html\&quot;&gt;PutVoiceConnectorProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param putVoiceConnectorProxyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutVoiceConnectorProxyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutVoiceConnectorProxyResponse> putVoiceConnectorProxyWithHttpInfo(String voiceConnectorId, PutVoiceConnectorProxyRequest putVoiceConnectorProxyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putVoiceConnectorProxyValidateBeforeCall(voiceConnectorId, putVoiceConnectorProxyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorProxyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Puts the specified proxy configuration to the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorProxy.html\&quot;&gt;PutVoiceConnectorProxy&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param putVoiceConnectorProxyRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorProxyAsync(String voiceConnectorId, PutVoiceConnectorProxyRequest putVoiceConnectorProxyRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutVoiceConnectorProxyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVoiceConnectorProxyValidateBeforeCall(voiceConnectorId, putVoiceConnectorProxyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorProxyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVoiceConnectorStreamingConfiguration
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorStreamingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorStreamingConfigurationCall(String voiceConnectorId, PutVoiceConnectorStreamingConfigurationRequest putVoiceConnectorStreamingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putVoiceConnectorStreamingConfigurationRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/streaming-configuration"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVoiceConnectorStreamingConfigurationValidateBeforeCall(String voiceConnectorId, PutVoiceConnectorStreamingConfigurationRequest putVoiceConnectorStreamingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling putVoiceConnectorStreamingConfiguration(Async)");
        }

        // verify the required parameter 'putVoiceConnectorStreamingConfigurationRequest' is set
        if (putVoiceConnectorStreamingConfigurationRequest == null) {
            throw new ApiException("Missing the required parameter 'putVoiceConnectorStreamingConfigurationRequest' when calling putVoiceConnectorStreamingConfiguration(Async)");
        }

        return putVoiceConnectorStreamingConfigurationCall(voiceConnectorId, putVoiceConnectorStreamingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorStreamingConfiguration.html\&quot;&gt;PutVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorStreamingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutVoiceConnectorStreamingConfigurationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutVoiceConnectorStreamingConfigurationResponse putVoiceConnectorStreamingConfiguration(String voiceConnectorId, PutVoiceConnectorStreamingConfigurationRequest putVoiceConnectorStreamingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutVoiceConnectorStreamingConfigurationResponse> localVarResp = putVoiceConnectorStreamingConfigurationWithHttpInfo(voiceConnectorId, putVoiceConnectorStreamingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorStreamingConfiguration.html\&quot;&gt;PutVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorStreamingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutVoiceConnectorStreamingConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutVoiceConnectorStreamingConfigurationResponse> putVoiceConnectorStreamingConfigurationWithHttpInfo(String voiceConnectorId, PutVoiceConnectorStreamingConfigurationRequest putVoiceConnectorStreamingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putVoiceConnectorStreamingConfigurationValidateBeforeCall(voiceConnectorId, putVoiceConnectorStreamingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorStreamingConfigurationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds a streaming configuration for the specified Amazon Chime Voice Connector. The streaming configuration specifies whether media streaming is enabled for sending to Kinesis. It also sets the retention period, in hours, for the Amazon Kinesis data.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorStreamingConfiguration.html\&quot;&gt;PutVoiceConnectorStreamingConfiguration&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorStreamingConfigurationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorStreamingConfigurationAsync(String voiceConnectorId, PutVoiceConnectorStreamingConfigurationRequest putVoiceConnectorStreamingConfigurationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutVoiceConnectorStreamingConfigurationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVoiceConnectorStreamingConfigurationValidateBeforeCall(voiceConnectorId, putVoiceConnectorStreamingConfigurationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorStreamingConfigurationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVoiceConnectorTermination
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorTerminationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorTerminationCall(String voiceConnectorId, PutVoiceConnectorTerminationRequest putVoiceConnectorTerminationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putVoiceConnectorTerminationRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/termination"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVoiceConnectorTerminationValidateBeforeCall(String voiceConnectorId, PutVoiceConnectorTerminationRequest putVoiceConnectorTerminationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling putVoiceConnectorTermination(Async)");
        }

        // verify the required parameter 'putVoiceConnectorTerminationRequest' is set
        if (putVoiceConnectorTerminationRequest == null) {
            throw new ApiException("Missing the required parameter 'putVoiceConnectorTerminationRequest' when calling putVoiceConnectorTermination(Async)");
        }

        return putVoiceConnectorTerminationCall(voiceConnectorId, putVoiceConnectorTerminationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds termination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorTermination.html\&quot;&gt;PutVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorTerminationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return PutVoiceConnectorTerminationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PutVoiceConnectorTerminationResponse putVoiceConnectorTermination(String voiceConnectorId, PutVoiceConnectorTerminationRequest putVoiceConnectorTerminationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<PutVoiceConnectorTerminationResponse> localVarResp = putVoiceConnectorTerminationWithHttpInfo(voiceConnectorId, putVoiceConnectorTerminationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Adds termination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorTermination.html\&quot;&gt;PutVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorTerminationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;PutVoiceConnectorTerminationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PutVoiceConnectorTerminationResponse> putVoiceConnectorTerminationWithHttpInfo(String voiceConnectorId, PutVoiceConnectorTerminationRequest putVoiceConnectorTerminationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putVoiceConnectorTerminationValidateBeforeCall(voiceConnectorId, putVoiceConnectorTerminationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorTerminationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds termination settings for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;note&gt; &lt;p&gt;If emergency calling is configured for the Amazon Chime Voice Connector, it must be deleted prior to turning off termination settings.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorTermination.html\&quot;&gt;PutVoiceConnectorTermination&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param putVoiceConnectorTerminationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorTerminationAsync(String voiceConnectorId, PutVoiceConnectorTerminationRequest putVoiceConnectorTerminationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<PutVoiceConnectorTerminationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVoiceConnectorTerminationValidateBeforeCall(voiceConnectorId, putVoiceConnectorTerminationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<PutVoiceConnectorTerminationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putVoiceConnectorTerminationCredentials
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param putVoiceConnectorTerminationCredentialsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorTerminationCredentialsCall(String voiceConnectorId, String operation, PutVoiceConnectorTerminationCredentialsRequest putVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = putVoiceConnectorTerminationCredentialsRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/termination/credentials#operation=put"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putVoiceConnectorTerminationCredentialsValidateBeforeCall(String voiceConnectorId, String operation, PutVoiceConnectorTerminationCredentialsRequest putVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling putVoiceConnectorTerminationCredentials(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling putVoiceConnectorTerminationCredentials(Async)");
        }

        // verify the required parameter 'putVoiceConnectorTerminationCredentialsRequest' is set
        if (putVoiceConnectorTerminationCredentialsRequest == null) {
            throw new ApiException("Missing the required parameter 'putVoiceConnectorTerminationCredentialsRequest' when calling putVoiceConnectorTerminationCredentials(Async)");
        }

        return putVoiceConnectorTerminationCredentialsCall(voiceConnectorId, operation, putVoiceConnectorTerminationCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Adds termination SIP credentials for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorTerminationCredentials.html\&quot;&gt;PutVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param putVoiceConnectorTerminationCredentialsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void putVoiceConnectorTerminationCredentials(String voiceConnectorId, String operation, PutVoiceConnectorTerminationCredentialsRequest putVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        putVoiceConnectorTerminationCredentialsWithHttpInfo(voiceConnectorId, operation, putVoiceConnectorTerminationCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Adds termination SIP credentials for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorTerminationCredentials.html\&quot;&gt;PutVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param putVoiceConnectorTerminationCredentialsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> putVoiceConnectorTerminationCredentialsWithHttpInfo(String voiceConnectorId, String operation, PutVoiceConnectorTerminationCredentialsRequest putVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = putVoiceConnectorTerminationCredentialsValidateBeforeCall(voiceConnectorId, operation, putVoiceConnectorTerminationCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Adds termination SIP credentials for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_PutVoiceConnectorTerminationCredentials.html\&quot;&gt;PutVoiceConnectorTerminationCredentials&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param operation  (required)
     * @param putVoiceConnectorTerminationCredentialsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call putVoiceConnectorTerminationCredentialsAsync(String voiceConnectorId, String operation, PutVoiceConnectorTerminationCredentialsRequest putVoiceConnectorTerminationCredentialsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = putVoiceConnectorTerminationCredentialsValidateBeforeCall(voiceConnectorId, operation, putVoiceConnectorTerminationCredentialsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for redactChannelMessage
     * @param channelArn The ARN of the channel containing the messages that you want to redact. (required)
     * @param messageId The ID of the message being redacted. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call redactChannelMessageCall(String channelArn, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}#operation=redact"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call redactChannelMessageValidateBeforeCall(String channelArn, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling redactChannelMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling redactChannelMessage(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling redactChannelMessage(Async)");
        }

        return redactChannelMessageCall(channelArn, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_RedactChannelMessage.html\&quot;&gt;RedactChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel containing the messages that you want to redact. (required)
     * @param messageId The ID of the message being redacted. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return RedactChannelMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public RedactChannelMessageResponse redactChannelMessage(String channelArn, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<RedactChannelMessageResponse> localVarResp = redactChannelMessageWithHttpInfo(channelArn, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_RedactChannelMessage.html\&quot;&gt;RedactChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel containing the messages that you want to redact. (required)
     * @param messageId The ID of the message being redacted. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;RedactChannelMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<RedactChannelMessageResponse> redactChannelMessageWithHttpInfo(String channelArn, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = redactChannelMessageValidateBeforeCall(channelArn, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<RedactChannelMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Redacts message content, but not metadata. The message exists in the back end, but the action returns null content, and the state shows as redacted.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_RedactChannelMessage.html\&quot;&gt;RedactChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel containing the messages that you want to redact. (required)
     * @param messageId The ID of the message being redacted. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call redactChannelMessageAsync(String channelArn, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<RedactChannelMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = redactChannelMessageValidateBeforeCall(channelArn, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<RedactChannelMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redactConversationMessage
     * @param accountId The Amazon Chime account ID. (required)
     * @param conversationId The conversation ID. (required)
     * @param messageId The message ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactConversationMessageCall(String accountId, String conversationId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/conversations/{conversationId}/messages/{messageId}#operation=redact"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "conversationId" + "}", localVarApiClient.escapeString(conversationId.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redactConversationMessageValidateBeforeCall(String accountId, String conversationId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling redactConversationMessage(Async)");
        }

        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling redactConversationMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling redactConversationMessage(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling redactConversationMessage(Async)");
        }

        return redactConversationMessageCall(accountId, conversationId, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Redacts the specified message from the specified Amazon Chime conversation.
     * @param accountId The Amazon Chime account ID. (required)
     * @param conversationId The conversation ID. (required)
     * @param messageId The message ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object redactConversationMessage(String accountId, String conversationId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = redactConversationMessageWithHttpInfo(accountId, conversationId, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Redacts the specified message from the specified Amazon Chime conversation.
     * @param accountId The Amazon Chime account ID. (required)
     * @param conversationId The conversation ID. (required)
     * @param messageId The message ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> redactConversationMessageWithHttpInfo(String accountId, String conversationId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = redactConversationMessageValidateBeforeCall(accountId, conversationId, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Redacts the specified message from the specified Amazon Chime conversation.
     * @param accountId The Amazon Chime account ID. (required)
     * @param conversationId The conversation ID. (required)
     * @param messageId The message ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactConversationMessageAsync(String accountId, String conversationId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = redactConversationMessageValidateBeforeCall(accountId, conversationId, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redactRoomMessage
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param messageId The message ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactRoomMessageCall(String accountId, String roomId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}/messages/{messageId}#operation=redact"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redactRoomMessageValidateBeforeCall(String accountId, String roomId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling redactRoomMessage(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling redactRoomMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling redactRoomMessage(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling redactRoomMessage(Async)");
        }

        return redactRoomMessageCall(accountId, roomId, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Redacts the specified message from the specified Amazon Chime channel.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param messageId The message ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object redactRoomMessage(String accountId, String roomId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = redactRoomMessageWithHttpInfo(accountId, roomId, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Redacts the specified message from the specified Amazon Chime channel.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param messageId The message ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> redactRoomMessageWithHttpInfo(String accountId, String roomId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = redactRoomMessageValidateBeforeCall(accountId, roomId, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Redacts the specified message from the specified Amazon Chime channel.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param messageId The message ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redactRoomMessageAsync(String accountId, String roomId, String messageId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = redactRoomMessageValidateBeforeCall(accountId, roomId, messageId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for regenerateSecurityToken
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateSecurityTokenCall(String accountId, String botId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/bots/{botId}#operation=regenerate-security-token"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "botId" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call regenerateSecurityTokenValidateBeforeCall(String accountId, String botId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling regenerateSecurityToken(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling regenerateSecurityToken(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling regenerateSecurityToken(Async)");
        }

        return regenerateSecurityTokenCall(accountId, botId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Regenerates the security token for a bot.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RegenerateSecurityTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public RegenerateSecurityTokenResponse regenerateSecurityToken(String accountId, String botId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RegenerateSecurityTokenResponse> localVarResp = regenerateSecurityTokenWithHttpInfo(accountId, botId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerates the security token for a bot.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RegenerateSecurityTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RegenerateSecurityTokenResponse> regenerateSecurityTokenWithHttpInfo(String accountId, String botId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = regenerateSecurityTokenValidateBeforeCall(accountId, botId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RegenerateSecurityTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerates the security token for a bot.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call regenerateSecurityTokenAsync(String accountId, String botId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RegenerateSecurityTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = regenerateSecurityTokenValidateBeforeCall(accountId, botId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RegenerateSecurityTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resetPersonalPIN
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPersonalPINCall(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users/{userId}#operation=reset-personal-pin"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetPersonalPINValidateBeforeCall(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling resetPersonalPIN(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling resetPersonalPIN(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling resetPersonalPIN(Async)");
        }

        return resetPersonalPINCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the &lt;a&gt;User&lt;/a&gt; object with the updated personal meeting PIN.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ResetPersonalPINResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ResetPersonalPINResponse resetPersonalPIN(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ResetPersonalPINResponse> localVarResp = resetPersonalPINWithHttpInfo(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the &lt;a&gt;User&lt;/a&gt; object with the updated personal meeting PIN.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ResetPersonalPINResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResetPersonalPINResponse> resetPersonalPINWithHttpInfo(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = resetPersonalPINValidateBeforeCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ResetPersonalPINResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Resets the personal meeting PIN for the specified user on an Amazon Chime account. Returns the &lt;a&gt;User&lt;/a&gt; object with the updated personal meeting PIN.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resetPersonalPINAsync(String accountId, String userId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ResetPersonalPINResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resetPersonalPINValidateBeforeCall(accountId, userId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ResetPersonalPINResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for restorePhoneNumber
     * @param phoneNumberId The phone number. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restorePhoneNumberCall(String phoneNumberId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone-numbers/{phoneNumberId}#operation=restore"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restorePhoneNumberValidateBeforeCall(String phoneNumberId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling restorePhoneNumber(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling restorePhoneNumber(Async)");
        }

        return restorePhoneNumberCall(phoneNumberId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Moves a phone number from the &lt;b&gt;Deletion queue&lt;/b&gt; back into the phone number &lt;b&gt;Inventory&lt;/b&gt;.
     * @param phoneNumberId The phone number. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return RestorePhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public RestorePhoneNumberResponse restorePhoneNumber(String phoneNumberId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<RestorePhoneNumberResponse> localVarResp = restorePhoneNumberWithHttpInfo(phoneNumberId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Moves a phone number from the &lt;b&gt;Deletion queue&lt;/b&gt; back into the phone number &lt;b&gt;Inventory&lt;/b&gt;.
     * @param phoneNumberId The phone number. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;RestorePhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestorePhoneNumberResponse> restorePhoneNumberWithHttpInfo(String phoneNumberId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = restorePhoneNumberValidateBeforeCall(phoneNumberId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<RestorePhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Moves a phone number from the &lt;b&gt;Deletion queue&lt;/b&gt; back into the phone number &lt;b&gt;Inventory&lt;/b&gt;.
     * @param phoneNumberId The phone number. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call restorePhoneNumberAsync(String phoneNumberId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<RestorePhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = restorePhoneNumberValidateBeforeCall(phoneNumberId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<RestorePhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchAvailablePhoneNumbers
     * @param type  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param areaCode The area code used to filter results. Only applies to the US. (optional)
     * @param city The city used to filter results. Only applies to the US. (optional)
     * @param country The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2. (optional)
     * @param state The state used to filter results. Required only if you provide &lt;code&gt;City&lt;/code&gt;. Only applies to the US. (optional)
     * @param tollFreePrefix The toll-free prefix that you use to filter results. Only applies to the US. (optional)
     * @param phoneNumberType The phone number type used to filter results. Required for non-US numbers. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token used to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAvailablePhoneNumbersCall(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String areaCode, String city, String country, String state, String tollFreePrefix, String phoneNumberType, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search#type=phone-numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (areaCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("area-code", areaCode));
        }

        if (city != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("city", city));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (state != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("state", state));
        }

        if (tollFreePrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toll-free-prefix", tollFreePrefix));
        }

        if (phoneNumberType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phone-number-type", phoneNumberType));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-results", maxResults));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("next-token", nextToken));
        }

        if (maxResults2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("MaxResults", maxResults2));
        }

        if (nextToken2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("NextToken", nextToken2));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAvailablePhoneNumbersValidateBeforeCall(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String areaCode, String city, String country, String state, String tollFreePrefix, String phoneNumberType, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling searchAvailablePhoneNumbers(Async)");
        }

        return searchAvailablePhoneNumbersCall(type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, areaCode, city, country, state, tollFreePrefix, phoneNumberType, maxResults, nextToken, maxResults2, nextToken2, _callback);

    }

    /**
     * 
     * Searches for phone numbers that can be ordered. For US numbers, provide at least one of the following search filters: &lt;code&gt;AreaCode&lt;/code&gt;, &lt;code&gt;City&lt;/code&gt;, &lt;code&gt;State&lt;/code&gt;, or &lt;code&gt;TollFreePrefix&lt;/code&gt;. If you provide &lt;code&gt;City&lt;/code&gt;, you must also provide &lt;code&gt;State&lt;/code&gt;. Numbers outside the US only support the &lt;code&gt;PhoneNumberType&lt;/code&gt; filter, which you must use.
     * @param type  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param areaCode The area code used to filter results. Only applies to the US. (optional)
     * @param city The city used to filter results. Only applies to the US. (optional)
     * @param country The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2. (optional)
     * @param state The state used to filter results. Required only if you provide &lt;code&gt;City&lt;/code&gt;. Only applies to the US. (optional)
     * @param tollFreePrefix The toll-free prefix that you use to filter results. Only applies to the US. (optional)
     * @param phoneNumberType The phone number type used to filter results. Required for non-US numbers. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token used to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return SearchAvailablePhoneNumbersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public SearchAvailablePhoneNumbersResponse searchAvailablePhoneNumbers(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String areaCode, String city, String country, String state, String tollFreePrefix, String phoneNumberType, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        ApiResponse<SearchAvailablePhoneNumbersResponse> localVarResp = searchAvailablePhoneNumbersWithHttpInfo(type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, areaCode, city, country, state, tollFreePrefix, phoneNumberType, maxResults, nextToken, maxResults2, nextToken2);
        return localVarResp.getData();
    }

    /**
     * 
     * Searches for phone numbers that can be ordered. For US numbers, provide at least one of the following search filters: &lt;code&gt;AreaCode&lt;/code&gt;, &lt;code&gt;City&lt;/code&gt;, &lt;code&gt;State&lt;/code&gt;, or &lt;code&gt;TollFreePrefix&lt;/code&gt;. If you provide &lt;code&gt;City&lt;/code&gt;, you must also provide &lt;code&gt;State&lt;/code&gt;. Numbers outside the US only support the &lt;code&gt;PhoneNumberType&lt;/code&gt; filter, which you must use.
     * @param type  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param areaCode The area code used to filter results. Only applies to the US. (optional)
     * @param city The city used to filter results. Only applies to the US. (optional)
     * @param country The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2. (optional)
     * @param state The state used to filter results. Required only if you provide &lt;code&gt;City&lt;/code&gt;. Only applies to the US. (optional)
     * @param tollFreePrefix The toll-free prefix that you use to filter results. Only applies to the US. (optional)
     * @param phoneNumberType The phone number type used to filter results. Required for non-US numbers. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token used to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @return ApiResponse&lt;SearchAvailablePhoneNumbersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchAvailablePhoneNumbersResponse> searchAvailablePhoneNumbersWithHttpInfo(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String areaCode, String city, String country, String state, String tollFreePrefix, String phoneNumberType, Integer maxResults, String nextToken, String maxResults2, String nextToken2) throws ApiException {
        okhttp3.Call localVarCall = searchAvailablePhoneNumbersValidateBeforeCall(type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, areaCode, city, country, state, tollFreePrefix, phoneNumberType, maxResults, nextToken, maxResults2, nextToken2, null);
        Type localVarReturnType = new TypeToken<SearchAvailablePhoneNumbersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Searches for phone numbers that can be ordered. For US numbers, provide at least one of the following search filters: &lt;code&gt;AreaCode&lt;/code&gt;, &lt;code&gt;City&lt;/code&gt;, &lt;code&gt;State&lt;/code&gt;, or &lt;code&gt;TollFreePrefix&lt;/code&gt;. If you provide &lt;code&gt;City&lt;/code&gt;, you must also provide &lt;code&gt;State&lt;/code&gt;. Numbers outside the US only support the &lt;code&gt;PhoneNumberType&lt;/code&gt; filter, which you must use.
     * @param type  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param areaCode The area code used to filter results. Only applies to the US. (optional)
     * @param city The city used to filter results. Only applies to the US. (optional)
     * @param country The country used to filter results. Defaults to the US Format: ISO 3166-1 alpha-2. (optional)
     * @param state The state used to filter results. Required only if you provide &lt;code&gt;City&lt;/code&gt;. Only applies to the US. (optional)
     * @param tollFreePrefix The toll-free prefix that you use to filter results. Only applies to the US. (optional)
     * @param phoneNumberType The phone number type used to filter results. Required for non-US numbers. (optional)
     * @param maxResults The maximum number of results to return in a single call. (optional)
     * @param nextToken The token used to retrieve the next page of results. (optional)
     * @param maxResults2 Pagination limit (optional)
     * @param nextToken2 Pagination token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> AccessDeniedException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAvailablePhoneNumbersAsync(String type, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String areaCode, String city, String country, String state, String tollFreePrefix, String phoneNumberType, Integer maxResults, String nextToken, String maxResults2, String nextToken2, final ApiCallback<SearchAvailablePhoneNumbersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAvailablePhoneNumbersValidateBeforeCall(type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, areaCode, city, country, state, tollFreePrefix, phoneNumberType, maxResults, nextToken, maxResults2, nextToken2, _callback);
        Type localVarReturnType = new TypeToken<SearchAvailablePhoneNumbersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendChannelMessage
     * @param channelArn The ARN of the channel. (required)
     * @param sendChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call sendChannelMessageCall(String channelArn, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendChannelMessageRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendChannelMessageValidateBeforeCall(String channelArn, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling sendChannelMessage(Async)");
        }

        // verify the required parameter 'sendChannelMessageRequest' is set
        if (sendChannelMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'sendChannelMessageRequest' when calling sendChannelMessage(Async)");
        }

        return sendChannelMessageCall(channelArn, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Sends a message to a particular channel that the member is a part of.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;p&gt;Also, &lt;code&gt;STANDARD&lt;/code&gt; messages can contain 4KB of data and the 1KB of metadata. &lt;code&gt;CONTROL&lt;/code&gt; messages can contain 30 bytes of data and no metadata.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_SendChannelMessage.html\&quot;&gt;SendChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param sendChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return SendChannelMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public SendChannelMessageResponse sendChannelMessage(String channelArn, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<SendChannelMessageResponse> localVarResp = sendChannelMessageWithHttpInfo(channelArn, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Sends a message to a particular channel that the member is a part of.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;p&gt;Also, &lt;code&gt;STANDARD&lt;/code&gt; messages can contain 4KB of data and the 1KB of metadata. &lt;code&gt;CONTROL&lt;/code&gt; messages can contain 30 bytes of data and no metadata.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_SendChannelMessage.html\&quot;&gt;SendChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param sendChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;SendChannelMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<SendChannelMessageResponse> sendChannelMessageWithHttpInfo(String channelArn, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = sendChannelMessageValidateBeforeCall(channelArn, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<SendChannelMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Sends a message to a particular channel that the member is a part of.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;p&gt;Also, &lt;code&gt;STANDARD&lt;/code&gt; messages can contain 4KB of data and the 1KB of metadata. &lt;code&gt;CONTROL&lt;/code&gt; messages can contain 30 bytes of data and no metadata.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_SendChannelMessage.html\&quot;&gt;SendChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param sendChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call sendChannelMessageAsync(String channelArn, SendChannelMessageRequest sendChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<SendChannelMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendChannelMessageValidateBeforeCall(channelArn, sendChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<SendChannelMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startMeetingTranscription
     * @param meetingId The unique ID of the meeting being transcribed. (required)
     * @param operation  (required)
     * @param startMeetingTranscriptionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call startMeetingTranscriptionCall(String meetingId, String operation, StartMeetingTranscriptionRequest startMeetingTranscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = startMeetingTranscriptionRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/transcription#operation=start"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call startMeetingTranscriptionValidateBeforeCall(String meetingId, String operation, StartMeetingTranscriptionRequest startMeetingTranscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling startMeetingTranscription(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling startMeetingTranscription(Async)");
        }

        // verify the required parameter 'startMeetingTranscriptionRequest' is set
        if (startMeetingTranscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'startMeetingTranscriptionRequest' when calling startMeetingTranscription(Async)");
        }

        return startMeetingTranscriptionCall(meetingId, operation, startMeetingTranscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Starts transcription for the specified &lt;code&gt;meetingId&lt;/code&gt;. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meeting-transcription.html\&quot;&gt; Using Amazon Chime SDK live transcription &lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify an invalid configuration, a &lt;code&gt;TranscriptFailed&lt;/code&gt; event will be sent with the contents of the &lt;code&gt;BadRequestException&lt;/code&gt; generated by Amazon Transcribe. For more information on each parameter and which combinations are valid, refer to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html\&quot;&gt;StartStreamTranscription&lt;/a&gt; API in the &lt;i&gt;Amazon Transcribe Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use of Amazon Transcribe is subject to the &lt;a href&#x3D;\&quot;https://aws.amazon.com/service-terms/\&quot;&gt;AWS Service Terms&lt;/a&gt;, including the terms specific to the AWS Machine Learning and Artificial Intelligence Services.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_StartMeetingTranscription.html\&quot;&gt;StartMeetingTranscription&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The unique ID of the meeting being transcribed. (required)
     * @param operation  (required)
     * @param startMeetingTranscriptionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Object startMeetingTranscription(String meetingId, String operation, StartMeetingTranscriptionRequest startMeetingTranscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = startMeetingTranscriptionWithHttpInfo(meetingId, operation, startMeetingTranscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Starts transcription for the specified &lt;code&gt;meetingId&lt;/code&gt;. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meeting-transcription.html\&quot;&gt; Using Amazon Chime SDK live transcription &lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify an invalid configuration, a &lt;code&gt;TranscriptFailed&lt;/code&gt; event will be sent with the contents of the &lt;code&gt;BadRequestException&lt;/code&gt; generated by Amazon Transcribe. For more information on each parameter and which combinations are valid, refer to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html\&quot;&gt;StartStreamTranscription&lt;/a&gt; API in the &lt;i&gt;Amazon Transcribe Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use of Amazon Transcribe is subject to the &lt;a href&#x3D;\&quot;https://aws.amazon.com/service-terms/\&quot;&gt;AWS Service Terms&lt;/a&gt;, including the terms specific to the AWS Machine Learning and Artificial Intelligence Services.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_StartMeetingTranscription.html\&quot;&gt;StartMeetingTranscription&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The unique ID of the meeting being transcribed. (required)
     * @param operation  (required)
     * @param startMeetingTranscriptionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> startMeetingTranscriptionWithHttpInfo(String meetingId, String operation, StartMeetingTranscriptionRequest startMeetingTranscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = startMeetingTranscriptionValidateBeforeCall(meetingId, operation, startMeetingTranscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Starts transcription for the specified &lt;code&gt;meetingId&lt;/code&gt;. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/meeting-transcription.html\&quot;&gt; Using Amazon Chime SDK live transcription &lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;If you specify an invalid configuration, a &lt;code&gt;TranscriptFailed&lt;/code&gt; event will be sent with the contents of the &lt;code&gt;BadRequestException&lt;/code&gt; generated by Amazon Transcribe. For more information on each parameter and which combinations are valid, refer to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html\&quot;&gt;StartStreamTranscription&lt;/a&gt; API in the &lt;i&gt;Amazon Transcribe Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon Chime SDK live transcription is powered by Amazon Transcribe. Use of Amazon Transcribe is subject to the &lt;a href&#x3D;\&quot;https://aws.amazon.com/service-terms/\&quot;&gt;AWS Service Terms&lt;/a&gt;, including the terms specific to the AWS Machine Learning and Artificial Intelligence Services.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_StartMeetingTranscription.html\&quot;&gt;StartMeetingTranscription&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The unique ID of the meeting being transcribed. (required)
     * @param operation  (required)
     * @param startMeetingTranscriptionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call startMeetingTranscriptionAsync(String meetingId, String operation, StartMeetingTranscriptionRequest startMeetingTranscriptionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = startMeetingTranscriptionValidateBeforeCall(meetingId, operation, startMeetingTranscriptionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for stopMeetingTranscription
     * @param meetingId The unique ID of the meeting for which you stop transcription. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call stopMeetingTranscriptionCall(String meetingId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/transcription#operation=stop"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call stopMeetingTranscriptionValidateBeforeCall(String meetingId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling stopMeetingTranscription(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling stopMeetingTranscription(Async)");
        }

        return stopMeetingTranscriptionCall(meetingId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Stops transcription for the specified &lt;code&gt;meetingId&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_StopMeetingTranscription.html\&quot;&gt;StopMeetingTranscription&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The unique ID of the meeting for which you stop transcription. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Object stopMeetingTranscription(String meetingId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = stopMeetingTranscriptionWithHttpInfo(meetingId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Stops transcription for the specified &lt;code&gt;meetingId&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_StopMeetingTranscription.html\&quot;&gt;StopMeetingTranscription&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The unique ID of the meeting for which you stop transcription. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Object> stopMeetingTranscriptionWithHttpInfo(String meetingId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = stopMeetingTranscriptionValidateBeforeCall(meetingId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Stops transcription for the specified &lt;code&gt;meetingId&lt;/code&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_StopMeetingTranscription.html\&quot;&gt;StopMeetingTranscription&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The unique ID of the meeting for which you stop transcription. (required)
     * @param operation  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnprocessableEntityException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call stopMeetingTranscriptionAsync(String meetingId, String operation, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = stopMeetingTranscriptionValidateBeforeCall(meetingId, operation, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagAttendee
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param operation  (required)
     * @param tagAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tagAttendeeCall(String meetingId, String attendeeId, String operation, TagAttendeeRequest tagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagAttendeeRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/attendees/{attendeeId}/tags#operation=add"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "attendeeId" + "}", localVarApiClient.escapeString(attendeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagAttendeeValidateBeforeCall(String meetingId, String attendeeId, String operation, TagAttendeeRequest tagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling tagAttendee(Async)");
        }

        // verify the required parameter 'attendeeId' is set
        if (attendeeId == null) {
            throw new ApiException("Missing the required parameter 'attendeeId' when calling tagAttendee(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling tagAttendee(Async)");
        }

        // verify the required parameter 'tagAttendeeRequest' is set
        if (tagAttendeeRequest == null) {
            throw new ApiException("Missing the required parameter 'tagAttendeeRequest' when calling tagAttendee(Async)");
        }

        return tagAttendeeCall(meetingId, attendeeId, operation, tagAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime attendee.&lt;/p&gt; &lt;important&gt; &lt;p&gt;TagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param operation  (required)
     * @param tagAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void tagAttendee(String meetingId, String attendeeId, String operation, TagAttendeeRequest tagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagAttendeeWithHttpInfo(meetingId, attendeeId, operation, tagAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime attendee.&lt;/p&gt; &lt;important&gt; &lt;p&gt;TagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param operation  (required)
     * @param tagAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> tagAttendeeWithHttpInfo(String meetingId, String attendeeId, String operation, TagAttendeeRequest tagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagAttendeeValidateBeforeCall(meetingId, attendeeId, operation, tagAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime attendee.&lt;/p&gt; &lt;important&gt; &lt;p&gt;TagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param operation  (required)
     * @param tagAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tagAttendeeAsync(String meetingId, String attendeeId, String operation, TagAttendeeRequest tagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagAttendeeValidateBeforeCall(meetingId, attendeeId, operation, tagAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagMeeting
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param tagMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tagMeetingCall(String meetingId, String operation, TagMeetingRequest tagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagMeetingRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/tags#operation=add"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagMeetingValidateBeforeCall(String meetingId, String operation, TagMeetingRequest tagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling tagMeeting(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling tagMeeting(Async)");
        }

        // verify the required parameter 'tagMeetingRequest' is set
        if (tagMeetingRequest == null) {
            throw new ApiException("Missing the required parameter 'tagMeetingRequest' when calling tagMeeting(Async)");
        }

        return tagMeetingCall(meetingId, operation, tagMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param tagMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void tagMeeting(String meetingId, String operation, TagMeetingRequest tagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagMeetingWithHttpInfo(meetingId, operation, tagMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param tagMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> tagMeetingWithHttpInfo(String meetingId, String operation, TagMeetingRequest tagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagMeetingValidateBeforeCall(meetingId, operation, tagMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param tagMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tagMeetingAsync(String meetingId, String operation, TagMeetingRequest tagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagMeetingValidateBeforeCall(meetingId, operation, tagMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tagResource
     * @param operation  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tagResourceCall(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagResourceRequest;

        // create path and map variables
        String localVarPath = "/tags#operation=tag-resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call tagResourceValidateBeforeCall(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling tagResource(Async)");
        }

        // verify the required parameter 'tagResourceRequest' is set
        if (tagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'tagResourceRequest' when calling tagResource(Async)");
        }

        return tagResourceCall(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void tagResource(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        tagResourceWithHttpInfo(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> tagResourceWithHttpInfo(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_TagResource.html\&quot;&gt;TagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param tagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call tagResourceAsync(String operation, TagResourceRequest tagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tagResourceValidateBeforeCall(operation, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagAttendee
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param operation  (required)
     * @param untagAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call untagAttendeeCall(String meetingId, String attendeeId, String operation, UntagAttendeeRequest untagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagAttendeeRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/attendees/{attendeeId}/tags#operation=delete"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()))
            .replace("{" + "attendeeId" + "}", localVarApiClient.escapeString(attendeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagAttendeeValidateBeforeCall(String meetingId, String attendeeId, String operation, UntagAttendeeRequest untagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling untagAttendee(Async)");
        }

        // verify the required parameter 'attendeeId' is set
        if (attendeeId == null) {
            throw new ApiException("Missing the required parameter 'attendeeId' when calling untagAttendee(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling untagAttendee(Async)");
        }

        // verify the required parameter 'untagAttendeeRequest' is set
        if (untagAttendeeRequest == null) {
            throw new ApiException("Missing the required parameter 'untagAttendeeRequest' when calling untagAttendee(Async)");
        }

        return untagAttendeeCall(meetingId, attendeeId, operation, untagAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK attendee.&lt;/p&gt; &lt;important&gt; &lt;p&gt;UntagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param operation  (required)
     * @param untagAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void untagAttendee(String meetingId, String attendeeId, String operation, UntagAttendeeRequest untagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagAttendeeWithHttpInfo(meetingId, attendeeId, operation, untagAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK attendee.&lt;/p&gt; &lt;important&gt; &lt;p&gt;UntagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param operation  (required)
     * @param untagAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> untagAttendeeWithHttpInfo(String meetingId, String attendeeId, String operation, UntagAttendeeRequest untagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagAttendeeValidateBeforeCall(meetingId, attendeeId, operation, untagAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK attendee.&lt;/p&gt; &lt;important&gt; &lt;p&gt;UntagAttendee is not supported in the Amazon Chime SDK Meetings Namespace. Update your application to remove calls to this API.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param attendeeId The Amazon Chime SDK attendee ID. (required)
     * @param operation  (required)
     * @param untagAttendeeRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call untagAttendeeAsync(String meetingId, String attendeeId, String operation, UntagAttendeeRequest untagAttendeeRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagAttendeeValidateBeforeCall(meetingId, attendeeId, operation, untagAttendeeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagMeeting
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param untagMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call untagMeetingCall(String meetingId, String operation, UntagMeetingRequest untagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagMeetingRequest;

        // create path and map variables
        String localVarPath = "/meetings/{meetingId}/tags#operation=delete"
            .replace("{" + "meetingId" + "}", localVarApiClient.escapeString(meetingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagMeetingValidateBeforeCall(String meetingId, String operation, UntagMeetingRequest untagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'meetingId' is set
        if (meetingId == null) {
            throw new ApiException("Missing the required parameter 'meetingId' when calling untagMeeting(Async)");
        }

        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling untagMeeting(Async)");
        }

        // verify the required parameter 'untagMeetingRequest' is set
        if (untagMeetingRequest == null) {
            throw new ApiException("Missing the required parameter 'untagMeetingRequest' when calling untagMeeting(Async)");
        }

        return untagMeetingCall(meetingId, operation, untagMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param untagMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void untagMeeting(String meetingId, String operation, UntagMeetingRequest untagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagMeetingWithHttpInfo(meetingId, operation, untagMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param untagMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> untagMeetingWithHttpInfo(String meetingId, String operation, UntagMeetingRequest untagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagMeetingValidateBeforeCall(meetingId, operation, untagMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK meeting.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param meetingId The Amazon Chime SDK meeting ID. (required)
     * @param operation  (required)
     * @param untagMeetingRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call untagMeetingAsync(String meetingId, String operation, UntagMeetingRequest untagMeetingRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagMeetingValidateBeforeCall(meetingId, operation, untagMeetingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for untagResource
     * @param operation  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call untagResourceCall(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = untagResourceRequest;

        // create path and map variables
        String localVarPath = "/tags#operation=untag-resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (operation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("operation", operation));
        }

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call untagResourceValidateBeforeCall(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'operation' is set
        if (operation == null) {
            throw new ApiException("Missing the required parameter 'operation' when calling untagResource(Async)");
        }

        // verify the required parameter 'untagResourceRequest' is set
        if (untagResourceRequest == null) {
            throw new ApiException("Missing the required parameter 'untagResourceRequest' when calling untagResource(Async)");
        }

        return untagResourceCall(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void untagResource(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        untagResourceWithHttpInfo(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> untagResourceWithHttpInfo(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Untags the specified tags from the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;p&gt;Applies the specified tags to the specified Amazon Chime SDK meeting resource.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_meeting-chime_UntagResource.html\&quot;&gt;UntagResource&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param operation  (required)
     * @param untagResourceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call untagResourceAsync(String operation, UntagResourceRequest untagResourceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = untagResourceValidateBeforeCall(operation, untagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccount
     * @param accountId The Amazon Chime account ID. (required)
     * @param updateAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountCall(String accountId, UpdateAccountRequest updateAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccountRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountValidateBeforeCall(String accountId, UpdateAccountRequest updateAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccount(Async)");
        }

        // verify the required parameter 'updateAccountRequest' is set
        if (updateAccountRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAccountRequest' when calling updateAccount(Async)");
        }

        return updateAccountCall(accountId, updateAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates account details for the specified Amazon Chime account. Currently, only account name and default license updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param updateAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateAccountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAccountResponse updateAccount(String accountId, UpdateAccountRequest updateAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateAccountResponse> localVarResp = updateAccountWithHttpInfo(accountId, updateAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates account details for the specified Amazon Chime account. Currently, only account name and default license updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param updateAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAccountResponse> updateAccountWithHttpInfo(String accountId, UpdateAccountRequest updateAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(accountId, updateAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates account details for the specified Amazon Chime account. Currently, only account name and default license updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param updateAccountRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAsync(String accountId, UpdateAccountRequest updateAccountRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(accountId, updateAccountRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountSettings
     * @param accountId The Amazon Chime account ID. (required)
     * @param updateAccountSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountSettingsCall(String accountId, UpdateAccountSettingsRequest updateAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAccountSettingsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/settings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountSettingsValidateBeforeCall(String accountId, UpdateAccountSettingsRequest updateAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccountSettings(Async)");
        }

        // verify the required parameter 'updateAccountSettingsRequest' is set
        if (updateAccountSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAccountSettingsRequest' when calling updateAccountSettings(Async)");
        }

        return updateAccountSettingsCall(accountId, updateAccountSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/policies.html\&quot;&gt;Use the Policies Page&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.
     * @param accountId The Amazon Chime account ID. (required)
     * @param updateAccountSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAccountSettings(String accountId, UpdateAccountSettingsRequest updateAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<Object> localVarResp = updateAccountSettingsWithHttpInfo(accountId, updateAccountSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/policies.html\&quot;&gt;Use the Policies Page&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.
     * @param accountId The Amazon Chime account ID. (required)
     * @param updateAccountSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAccountSettingsWithHttpInfo(String accountId, UpdateAccountSettingsRequest updateAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateAccountSettingsValidateBeforeCall(accountId, updateAccountSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the settings for the specified Amazon Chime account. You can update settings for remote control of shared screens, or for the dial-out option. For more information about these settings, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime/latest/ag/policies.html\&quot;&gt;Use the Policies Page&lt;/a&gt; in the &lt;i&gt;Amazon Chime Administration Guide&lt;/i&gt;.
     * @param accountId The Amazon Chime account ID. (required)
     * @param updateAccountSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountSettingsAsync(String accountId, UpdateAccountSettingsRequest updateAccountSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountSettingsValidateBeforeCall(accountId, updateAccountSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAppInstance
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param updateAppInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateAppInstanceCall(String appInstanceArn, UpdateAppInstanceRequest updateAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAppInstanceRequest;

        // create path and map variables
        String localVarPath = "/app-instances/{appInstanceArn}"
            .replace("{" + "appInstanceArn" + "}", localVarApiClient.escapeString(appInstanceArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAppInstanceValidateBeforeCall(String appInstanceArn, UpdateAppInstanceRequest updateAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceArn' is set
        if (appInstanceArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceArn' when calling updateAppInstance(Async)");
        }

        // verify the required parameter 'updateAppInstanceRequest' is set
        if (updateAppInstanceRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAppInstanceRequest' when calling updateAppInstance(Async)");
        }

        return updateAppInstanceCall(appInstanceArn, updateAppInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates &lt;code&gt;AppInstance&lt;/code&gt; metadata.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_UpdateAppInstance.html\&quot;&gt;UpdateAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param updateAppInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateAppInstanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateAppInstanceResponse updateAppInstance(String appInstanceArn, UpdateAppInstanceRequest updateAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateAppInstanceResponse> localVarResp = updateAppInstanceWithHttpInfo(appInstanceArn, updateAppInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates &lt;code&gt;AppInstance&lt;/code&gt; metadata.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_UpdateAppInstance.html\&quot;&gt;UpdateAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param updateAppInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateAppInstanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateAppInstanceResponse> updateAppInstanceWithHttpInfo(String appInstanceArn, UpdateAppInstanceRequest updateAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateAppInstanceValidateBeforeCall(appInstanceArn, updateAppInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateAppInstanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates &lt;code&gt;AppInstance&lt;/code&gt; metadata.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_UpdateAppInstance.html\&quot;&gt;UpdateAppInstance&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceArn The ARN of the &lt;code&gt;AppInstance&lt;/code&gt;. (required)
     * @param updateAppInstanceRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateAppInstanceAsync(String appInstanceArn, UpdateAppInstanceRequest updateAppInstanceRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateAppInstanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAppInstanceValidateBeforeCall(appInstanceArn, updateAppInstanceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateAppInstanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAppInstanceUser
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;. (required)
     * @param updateAppInstanceUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateAppInstanceUserCall(String appInstanceUserArn, UpdateAppInstanceUserRequest updateAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAppInstanceUserRequest;

        // create path and map variables
        String localVarPath = "/app-instance-users/{appInstanceUserArn}"
            .replace("{" + "appInstanceUserArn" + "}", localVarApiClient.escapeString(appInstanceUserArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAppInstanceUserValidateBeforeCall(String appInstanceUserArn, UpdateAppInstanceUserRequest updateAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appInstanceUserArn' is set
        if (appInstanceUserArn == null) {
            throw new ApiException("Missing the required parameter 'appInstanceUserArn' when calling updateAppInstanceUser(Async)");
        }

        // verify the required parameter 'updateAppInstanceUserRequest' is set
        if (updateAppInstanceUserRequest == null) {
            throw new ApiException("Missing the required parameter 'updateAppInstanceUserRequest' when calling updateAppInstanceUser(Async)");
        }

        return updateAppInstanceUserCall(appInstanceUserArn, updateAppInstanceUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the details of an &lt;code&gt;AppInstanceUser&lt;/code&gt;. You can update names and metadata.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_UpdateAppInstanceUser.html\&quot;&gt;UpdateAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;. (required)
     * @param updateAppInstanceUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateAppInstanceUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateAppInstanceUserResponse updateAppInstanceUser(String appInstanceUserArn, UpdateAppInstanceUserRequest updateAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateAppInstanceUserResponse> localVarResp = updateAppInstanceUserWithHttpInfo(appInstanceUserArn, updateAppInstanceUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the details of an &lt;code&gt;AppInstanceUser&lt;/code&gt;. You can update names and metadata.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_UpdateAppInstanceUser.html\&quot;&gt;UpdateAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;. (required)
     * @param updateAppInstanceUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateAppInstanceUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateAppInstanceUserResponse> updateAppInstanceUserWithHttpInfo(String appInstanceUserArn, UpdateAppInstanceUserRequest updateAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateAppInstanceUserValidateBeforeCall(appInstanceUserArn, updateAppInstanceUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateAppInstanceUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the details of an &lt;code&gt;AppInstanceUser&lt;/code&gt;. You can update names and metadata.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_identity-chime_UpdateAppInstanceUser.html\&quot;&gt;UpdateAppInstanceUser&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param appInstanceUserArn The ARN of the &lt;code&gt;AppInstanceUser&lt;/code&gt;. (required)
     * @param updateAppInstanceUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateAppInstanceUserAsync(String appInstanceUserArn, UpdateAppInstanceUserRequest updateAppInstanceUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateAppInstanceUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAppInstanceUserValidateBeforeCall(appInstanceUserArn, updateAppInstanceUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateAppInstanceUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateBot
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param updateBotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBotCall(String accountId, String botId, UpdateBotRequest updateBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateBotRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/bots/{botId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "botId" + "}", localVarApiClient.escapeString(botId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBotValidateBeforeCall(String accountId, String botId, UpdateBotRequest updateBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateBot(Async)");
        }

        // verify the required parameter 'botId' is set
        if (botId == null) {
            throw new ApiException("Missing the required parameter 'botId' when calling updateBot(Async)");
        }

        // verify the required parameter 'updateBotRequest' is set
        if (updateBotRequest == null) {
            throw new ApiException("Missing the required parameter 'updateBotRequest' when calling updateBot(Async)");
        }

        return updateBotCall(accountId, botId, updateBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param updateBotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateBotResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBotResponse updateBot(String accountId, String botId, UpdateBotRequest updateBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateBotResponse> localVarResp = updateBotWithHttpInfo(accountId, botId, updateBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param updateBotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateBotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateBotResponse> updateBotWithHttpInfo(String accountId, String botId, UpdateBotRequest updateBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateBotValidateBeforeCall(accountId, botId, updateBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateBotResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the status of the specified bot, such as starting or stopping the bot from running in your Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param botId The bot ID. (required)
     * @param updateBotRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ServiceFailureException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ThrottledClientException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateBotAsync(String accountId, String botId, UpdateBotRequest updateBotRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateBotResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBotValidateBeforeCall(accountId, botId, updateBotRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateBotResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannel
     * @param channelArn The ARN of the channel. (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateChannelCall(String channelArn, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateChannelRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelValidateBeforeCall(String channelArn, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling updateChannel(Async)");
        }

        // verify the required parameter 'updateChannelRequest' is set
        if (updateChannelRequest == null) {
            throw new ApiException("Missing the required parameter 'updateChannelRequest' when calling updateChannel(Async)");
        }

        return updateChannelCall(channelArn, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Update a channel&#39;s attributes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannel.html\&quot;&gt;UpdateChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return UpdateChannelResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateChannelResponse updateChannel(String channelArn, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<UpdateChannelResponse> localVarResp = updateChannelWithHttpInfo(channelArn, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Update a channel&#39;s attributes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannel.html\&quot;&gt;UpdateChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;UpdateChannelResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateChannelResponse> updateChannelWithHttpInfo(String channelArn, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(channelArn, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<UpdateChannelResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Update a channel&#39;s attributes.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Restriction&lt;/b&gt;: You can&#39;t change a channel&#39;s privacy. &lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannel.html\&quot;&gt;UpdateChannel&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param updateChannelRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateChannelAsync(String channelArn, UpdateChannelRequest updateChannelRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<UpdateChannelResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(channelArn, updateChannelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<UpdateChannelResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannelMessage
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID string of the message being updated. (required)
     * @param updateChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateChannelMessageCall(String channelArn, String messageId, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateChannelMessageRequest;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/messages/{messageId}"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()))
            .replace("{" + "messageId" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelMessageValidateBeforeCall(String channelArn, String messageId, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling updateChannelMessage(Async)");
        }

        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling updateChannelMessage(Async)");
        }

        // verify the required parameter 'updateChannelMessageRequest' is set
        if (updateChannelMessageRequest == null) {
            throw new ApiException("Missing the required parameter 'updateChannelMessageRequest' when calling updateChannelMessage(Async)");
        }

        return updateChannelMessageCall(channelArn, messageId, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the content of a message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannelMessage.html\&quot;&gt;UpdateChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID string of the message being updated. (required)
     * @param updateChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return UpdateChannelMessageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateChannelMessageResponse updateChannelMessage(String channelArn, String messageId, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<UpdateChannelMessageResponse> localVarResp = updateChannelMessageWithHttpInfo(channelArn, messageId, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the content of a message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannelMessage.html\&quot;&gt;UpdateChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID string of the message being updated. (required)
     * @param updateChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;UpdateChannelMessageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateChannelMessageResponse> updateChannelMessageWithHttpInfo(String channelArn, String messageId, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = updateChannelMessageValidateBeforeCall(channelArn, messageId, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<UpdateChannelMessageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the content of a message.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannelMessage.html\&quot;&gt;UpdateChannelMessage&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param messageId The ID string of the message being updated. (required)
     * @param updateChannelMessageRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateChannelMessageAsync(String channelArn, String messageId, UpdateChannelMessageRequest updateChannelMessageRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<UpdateChannelMessageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelMessageValidateBeforeCall(channelArn, messageId, updateChannelMessageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<UpdateChannelMessageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateChannelReadMarker
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateChannelReadMarkerCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channelArn}/readMarker"
            .replace("{" + "channelArn" + "}", localVarApiClient.escapeString(channelArn.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        if (xAmzChimeBearer != null) {
            localVarHeaderParams.put("x-amz-chime-bearer", localVarApiClient.parameterToString(xAmzChimeBearer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelReadMarkerValidateBeforeCall(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelArn' is set
        if (channelArn == null) {
            throw new ApiException("Missing the required parameter 'channelArn' when calling updateChannelReadMarker(Async)");
        }

        return updateChannelReadMarkerCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);

    }

    /**
     * 
     * &lt;p&gt;The details of the time when a user last read messages in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannelReadMarker.html\&quot;&gt;UpdateChannelReadMarker&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return UpdateChannelReadMarkerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateChannelReadMarkerResponse updateChannelReadMarker(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        ApiResponse<UpdateChannelReadMarkerResponse> localVarResp = updateChannelReadMarkerWithHttpInfo(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;The details of the time when a user last read messages in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannelReadMarker.html\&quot;&gt;UpdateChannelReadMarker&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @return ApiResponse&lt;UpdateChannelReadMarkerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateChannelReadMarkerResponse> updateChannelReadMarkerWithHttpInfo(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer) throws ApiException {
        okhttp3.Call localVarCall = updateChannelReadMarkerValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, null);
        Type localVarReturnType = new TypeToken<UpdateChannelReadMarkerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;The details of the time when a user last read messages in a channel.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The &lt;code&gt;x-amz-chime-bearer&lt;/code&gt; request header is mandatory. Use the &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call as the value in the header.&lt;/p&gt; &lt;/note&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_messaging-chime_UpdateChannelReadMarker.html\&quot;&gt;UpdateChannelReadMarker&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param channelArn The ARN of the channel. (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param xAmzChimeBearer The &lt;code&gt;AppInstanceUserArn&lt;/code&gt; of the user that makes the API call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateChannelReadMarkerAsync(String channelArn, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, String xAmzChimeBearer, final ApiCallback<UpdateChannelReadMarkerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelReadMarkerValidateBeforeCall(channelArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, xAmzChimeBearer, _callback);
        Type localVarReturnType = new TypeToken<UpdateChannelReadMarkerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalSettings
     * @param updateGlobalSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalSettingsCall(UpdateGlobalSettingsRequest updateGlobalSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateGlobalSettingsRequest;

        // create path and map variables
        String localVarPath = "/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalSettingsValidateBeforeCall(UpdateGlobalSettingsRequest updateGlobalSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateGlobalSettingsRequest' is set
        if (updateGlobalSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateGlobalSettingsRequest' when calling updateGlobalSettings(Async)");
        }

        return updateGlobalSettingsCall(updateGlobalSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates global settings for the administrator&#39;s AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
     * @param updateGlobalSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void updateGlobalSettings(UpdateGlobalSettingsRequest updateGlobalSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        updateGlobalSettingsWithHttpInfo(updateGlobalSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Updates global settings for the administrator&#39;s AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
     * @param updateGlobalSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGlobalSettingsWithHttpInfo(UpdateGlobalSettingsRequest updateGlobalSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalSettingsValidateBeforeCall(updateGlobalSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates global settings for the administrator&#39;s AWS account, such as Amazon Chime Business Calling and Amazon Chime Voice Connector settings.
     * @param updateGlobalSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalSettingsAsync(UpdateGlobalSettingsRequest updateGlobalSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalSettingsValidateBeforeCall(updateGlobalSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePhoneNumber
     * @param phoneNumberId The phone number ID. (required)
     * @param updatePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePhoneNumberCall(String phoneNumberId, UpdatePhoneNumberRequest updatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePhoneNumberRequest;

        // create path and map variables
        String localVarPath = "/phone-numbers/{phoneNumberId}"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePhoneNumberValidateBeforeCall(String phoneNumberId, UpdatePhoneNumberRequest updatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling updatePhoneNumber(Async)");
        }

        // verify the required parameter 'updatePhoneNumberRequest' is set
        if (updatePhoneNumberRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePhoneNumberRequest' when calling updatePhoneNumber(Async)");
        }

        return updatePhoneNumberCall(phoneNumberId, updatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.&lt;/p&gt; &lt;p&gt;For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.&lt;/p&gt; &lt;p&gt;Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.&lt;/p&gt;
     * @param phoneNumberId The phone number ID. (required)
     * @param updatePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdatePhoneNumberResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePhoneNumberResponse updatePhoneNumber(String phoneNumberId, UpdatePhoneNumberRequest updatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdatePhoneNumberResponse> localVarResp = updatePhoneNumberWithHttpInfo(phoneNumberId, updatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.&lt;/p&gt; &lt;p&gt;For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.&lt;/p&gt; &lt;p&gt;Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.&lt;/p&gt;
     * @param phoneNumberId The phone number ID. (required)
     * @param updatePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdatePhoneNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePhoneNumberResponse> updatePhoneNumberWithHttpInfo(String phoneNumberId, UpdatePhoneNumberRequest updatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updatePhoneNumberValidateBeforeCall(phoneNumberId, updatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdatePhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates phone number details, such as product type or calling name, for the specified phone number ID. You can update one phone number detail at a time. For example, you can update either the product type or the calling name in one action.&lt;/p&gt; &lt;p&gt;For toll-free numbers, you cannot use the Amazon Chime Business Calling product type. For numbers outside the U.S., you must use the Amazon Chime SIP Media Application Dial-In product type.&lt;/p&gt; &lt;p&gt;Updates to outbound calling names can take 72 hours to complete. Pending updates to outbound calling names must be complete before you can request another update.&lt;/p&gt;
     * @param phoneNumberId The phone number ID. (required)
     * @param updatePhoneNumberRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePhoneNumberAsync(String phoneNumberId, UpdatePhoneNumberRequest updatePhoneNumberRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdatePhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePhoneNumberValidateBeforeCall(phoneNumberId, updatePhoneNumberRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdatePhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePhoneNumberSettings
     * @param updatePhoneNumberSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePhoneNumberSettingsCall(UpdatePhoneNumberSettingsRequest updatePhoneNumberSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePhoneNumberSettingsRequest;

        // create path and map variables
        String localVarPath = "/settings/phone-number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePhoneNumberSettingsValidateBeforeCall(UpdatePhoneNumberSettingsRequest updatePhoneNumberSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updatePhoneNumberSettingsRequest' is set
        if (updatePhoneNumberSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePhoneNumberSettingsRequest' when calling updatePhoneNumberSettings(Async)");
        }

        return updatePhoneNumberSettingsCall(updatePhoneNumberSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the phone number settings for the administrator&#39;s AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
     * @param updatePhoneNumberSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void updatePhoneNumberSettings(UpdatePhoneNumberSettingsRequest updatePhoneNumberSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        updatePhoneNumberSettingsWithHttpInfo(updatePhoneNumberSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Updates the phone number settings for the administrator&#39;s AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
     * @param updatePhoneNumberSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updatePhoneNumberSettingsWithHttpInfo(UpdatePhoneNumberSettingsRequest updatePhoneNumberSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updatePhoneNumberSettingsValidateBeforeCall(updatePhoneNumberSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the phone number settings for the administrator&#39;s AWS account, such as the default outbound calling name. You can update the default outbound calling name once every seven days. Outbound calling names can take up to 72 hours to update.
     * @param updatePhoneNumberSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePhoneNumberSettingsAsync(UpdatePhoneNumberSettingsRequest updatePhoneNumberSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePhoneNumberSettingsValidateBeforeCall(updatePhoneNumberSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProxySession
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param updateProxySessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateProxySessionCall(String voiceConnectorId, String proxySessionId, UpdateProxySessionRequest updateProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateProxySessionRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}/proxy-sessions/{proxySessionId}"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()))
            .replace("{" + "proxySessionId" + "}", localVarApiClient.escapeString(proxySessionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProxySessionValidateBeforeCall(String voiceConnectorId, String proxySessionId, UpdateProxySessionRequest updateProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling updateProxySession(Async)");
        }

        // verify the required parameter 'proxySessionId' is set
        if (proxySessionId == null) {
            throw new ApiException("Missing the required parameter 'proxySessionId' when calling updateProxySession(Async)");
        }

        // verify the required parameter 'updateProxySessionRequest' is set
        if (updateProxySessionRequest == null) {
            throw new ApiException("Missing the required parameter 'updateProxySessionRequest' when calling updateProxySession(Async)");
        }

        return updateProxySessionCall(voiceConnectorId, proxySessionId, updateProxySessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the specified proxy session details, such as voice or SMS capabilities.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateProxySession.html\&quot;&gt;UpdateProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param updateProxySessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateProxySessionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateProxySessionResponse updateProxySession(String voiceConnectorId, String proxySessionId, UpdateProxySessionRequest updateProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateProxySessionResponse> localVarResp = updateProxySessionWithHttpInfo(voiceConnectorId, proxySessionId, updateProxySessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the specified proxy session details, such as voice or SMS capabilities.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateProxySession.html\&quot;&gt;UpdateProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param updateProxySessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateProxySessionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateProxySessionResponse> updateProxySessionWithHttpInfo(String voiceConnectorId, String proxySessionId, UpdateProxySessionRequest updateProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateProxySessionValidateBeforeCall(voiceConnectorId, proxySessionId, updateProxySessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateProxySessionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the specified proxy session details, such as voice or SMS capabilities.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateProxySession.html\&quot;&gt;UpdateProxySession&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime voice connector ID. (required)
     * @param proxySessionId The proxy session ID. (required)
     * @param updateProxySessionRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateProxySessionAsync(String voiceConnectorId, String proxySessionId, UpdateProxySessionRequest updateProxySessionRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateProxySessionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProxySessionValidateBeforeCall(voiceConnectorId, proxySessionId, updateProxySessionRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateProxySessionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRoom
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param updateRoomRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoomCall(String accountId, String roomId, UpdateRoomRequest updateRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRoomRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoomValidateBeforeCall(String accountId, String roomId, UpdateRoomRequest updateRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateRoom(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling updateRoom(Async)");
        }

        // verify the required parameter 'updateRoomRequest' is set
        if (updateRoomRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRoomRequest' when calling updateRoom(Async)");
        }

        return updateRoomCall(accountId, roomId, updateRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param updateRoomRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateRoomResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoomResponse updateRoom(String accountId, String roomId, UpdateRoomRequest updateRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateRoomResponse> localVarResp = updateRoomWithHttpInfo(accountId, roomId, updateRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param updateRoomRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateRoomResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRoomResponse> updateRoomWithHttpInfo(String accountId, String roomId, UpdateRoomRequest updateRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRoomValidateBeforeCall(accountId, roomId, updateRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateRoomResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates room details, such as the room name, for a room in an Amazon Chime Enterprise account.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param updateRoomRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoomAsync(String accountId, String roomId, UpdateRoomRequest updateRoomRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateRoomResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoomValidateBeforeCall(accountId, roomId, updateRoomRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateRoomResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRoomMembership
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param memberId The member ID. (required)
     * @param updateRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoomMembershipCall(String accountId, String roomId, String memberId, UpdateRoomMembershipRequest updateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateRoomMembershipRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/rooms/{roomId}/memberships/{memberId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "roomId" + "}", localVarApiClient.escapeString(roomId.toString()))
            .replace("{" + "memberId" + "}", localVarApiClient.escapeString(memberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoomMembershipValidateBeforeCall(String accountId, String roomId, String memberId, UpdateRoomMembershipRequest updateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateRoomMembership(Async)");
        }

        // verify the required parameter 'roomId' is set
        if (roomId == null) {
            throw new ApiException("Missing the required parameter 'roomId' when calling updateRoomMembership(Async)");
        }

        // verify the required parameter 'memberId' is set
        if (memberId == null) {
            throw new ApiException("Missing the required parameter 'memberId' when calling updateRoomMembership(Async)");
        }

        // verify the required parameter 'updateRoomMembershipRequest' is set
        if (updateRoomMembershipRequest == null) {
            throw new ApiException("Missing the required parameter 'updateRoomMembershipRequest' when calling updateRoomMembership(Async)");
        }

        return updateRoomMembershipCall(accountId, roomId, memberId, updateRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param memberId The member ID. (required)
     * @param updateRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateRoomMembershipResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoomMembershipResponse updateRoomMembership(String accountId, String roomId, String memberId, UpdateRoomMembershipRequest updateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateRoomMembershipResponse> localVarResp = updateRoomMembershipWithHttpInfo(accountId, roomId, memberId, updateRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param memberId The member ID. (required)
     * @param updateRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateRoomMembershipResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRoomMembershipResponse> updateRoomMembershipWithHttpInfo(String accountId, String roomId, String memberId, UpdateRoomMembershipRequest updateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateRoomMembershipValidateBeforeCall(accountId, roomId, memberId, updateRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateRoomMembershipResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates room membership details, such as the member role, for a room in an Amazon Chime Enterprise account. The member role designates whether the member is a chat room administrator or a general chat room member. The member role can be updated only for user IDs.
     * @param accountId The Amazon Chime account ID. (required)
     * @param roomId The room ID. (required)
     * @param memberId The member ID. (required)
     * @param updateRoomMembershipRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoomMembershipAsync(String accountId, String roomId, String memberId, UpdateRoomMembershipRequest updateRoomMembershipRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateRoomMembershipResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoomMembershipValidateBeforeCall(accountId, roomId, memberId, updateRoomMembershipRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateRoomMembershipResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSipMediaApplication
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param updateSipMediaApplicationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSipMediaApplicationCall(String sipMediaApplicationId, UpdateSipMediaApplicationRequest updateSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSipMediaApplicationRequest;

        // create path and map variables
        String localVarPath = "/sip-media-applications/{sipMediaApplicationId}"
            .replace("{" + "sipMediaApplicationId" + "}", localVarApiClient.escapeString(sipMediaApplicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSipMediaApplicationValidateBeforeCall(String sipMediaApplicationId, UpdateSipMediaApplicationRequest updateSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipMediaApplicationId' is set
        if (sipMediaApplicationId == null) {
            throw new ApiException("Missing the required parameter 'sipMediaApplicationId' when calling updateSipMediaApplication(Async)");
        }

        // verify the required parameter 'updateSipMediaApplicationRequest' is set
        if (updateSipMediaApplicationRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSipMediaApplicationRequest' when calling updateSipMediaApplication(Async)");
        }

        return updateSipMediaApplicationCall(sipMediaApplicationId, updateSipMediaApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the details of the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipMediaApplication.html\&quot;&gt;UpdateSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param updateSipMediaApplicationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSipMediaApplicationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateSipMediaApplicationResponse updateSipMediaApplication(String sipMediaApplicationId, UpdateSipMediaApplicationRequest updateSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSipMediaApplicationResponse> localVarResp = updateSipMediaApplicationWithHttpInfo(sipMediaApplicationId, updateSipMediaApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the details of the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipMediaApplication.html\&quot;&gt;UpdateSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param updateSipMediaApplicationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSipMediaApplicationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateSipMediaApplicationResponse> updateSipMediaApplicationWithHttpInfo(String sipMediaApplicationId, UpdateSipMediaApplicationRequest updateSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSipMediaApplicationValidateBeforeCall(sipMediaApplicationId, updateSipMediaApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSipMediaApplicationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the details of the specified SIP media application.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipMediaApplication.html\&quot;&gt;UpdateSipMediaApplication&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The SIP media application ID. (required)
     * @param updateSipMediaApplicationRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSipMediaApplicationAsync(String sipMediaApplicationId, UpdateSipMediaApplicationRequest updateSipMediaApplicationRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSipMediaApplicationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSipMediaApplicationValidateBeforeCall(sipMediaApplicationId, updateSipMediaApplicationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSipMediaApplicationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSipMediaApplicationCall
     * @param sipMediaApplicationId The ID of the SIP media application handling the call. (required)
     * @param transactionId The ID of the call transaction. (required)
     * @param updateSipMediaApplicationCallRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSipMediaApplicationCallCall(String sipMediaApplicationId, String transactionId, UpdateSipMediaApplicationCallRequest updateSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSipMediaApplicationCallRequest;

        // create path and map variables
        String localVarPath = "/sip-media-applications/{sipMediaApplicationId}/calls/{transactionId}"
            .replace("{" + "sipMediaApplicationId" + "}", localVarApiClient.escapeString(sipMediaApplicationId.toString()))
            .replace("{" + "transactionId" + "}", localVarApiClient.escapeString(transactionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSipMediaApplicationCallValidateBeforeCall(String sipMediaApplicationId, String transactionId, UpdateSipMediaApplicationCallRequest updateSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipMediaApplicationId' is set
        if (sipMediaApplicationId == null) {
            throw new ApiException("Missing the required parameter 'sipMediaApplicationId' when calling updateSipMediaApplicationCall(Async)");
        }

        // verify the required parameter 'transactionId' is set
        if (transactionId == null) {
            throw new ApiException("Missing the required parameter 'transactionId' when calling updateSipMediaApplicationCall(Async)");
        }

        // verify the required parameter 'updateSipMediaApplicationCallRequest' is set
        if (updateSipMediaApplicationCallRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSipMediaApplicationCallRequest' when calling updateSipMediaApplicationCall(Async)");
        }

        return updateSipMediaApplicationCallCall(sipMediaApplicationId, transactionId, updateSipMediaApplicationCallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Invokes the AWS Lambda function associated with the SIP media application and transaction ID in an update request. The Lambda function can then return a new set of actions.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipMediaApplicationCall.html\&quot;&gt;UpdateSipMediaApplicationCall&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The ID of the SIP media application handling the call. (required)
     * @param transactionId The ID of the call transaction. (required)
     * @param updateSipMediaApplicationCallRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSipMediaApplicationCallResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateSipMediaApplicationCallResponse updateSipMediaApplicationCall(String sipMediaApplicationId, String transactionId, UpdateSipMediaApplicationCallRequest updateSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSipMediaApplicationCallResponse> localVarResp = updateSipMediaApplicationCallWithHttpInfo(sipMediaApplicationId, transactionId, updateSipMediaApplicationCallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Invokes the AWS Lambda function associated with the SIP media application and transaction ID in an update request. The Lambda function can then return a new set of actions.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipMediaApplicationCall.html\&quot;&gt;UpdateSipMediaApplicationCall&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The ID of the SIP media application handling the call. (required)
     * @param transactionId The ID of the call transaction. (required)
     * @param updateSipMediaApplicationCallRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSipMediaApplicationCallResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateSipMediaApplicationCallResponse> updateSipMediaApplicationCallWithHttpInfo(String sipMediaApplicationId, String transactionId, UpdateSipMediaApplicationCallRequest updateSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSipMediaApplicationCallValidateBeforeCall(sipMediaApplicationId, transactionId, updateSipMediaApplicationCallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSipMediaApplicationCallResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Invokes the AWS Lambda function associated with the SIP media application and transaction ID in an update request. The Lambda function can then return a new set of actions.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipMediaApplicationCall.html\&quot;&gt;UpdateSipMediaApplicationCall&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipMediaApplicationId The ID of the SIP media application handling the call. (required)
     * @param transactionId The ID of the call transaction. (required)
     * @param updateSipMediaApplicationCallRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSipMediaApplicationCallAsync(String sipMediaApplicationId, String transactionId, UpdateSipMediaApplicationCallRequest updateSipMediaApplicationCallRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSipMediaApplicationCallResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSipMediaApplicationCallValidateBeforeCall(sipMediaApplicationId, transactionId, updateSipMediaApplicationCallRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSipMediaApplicationCallResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSipRule
     * @param sipRuleId The SIP rule ID. (required)
     * @param updateSipRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSipRuleCall(String sipRuleId, UpdateSipRuleRequest updateSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSipRuleRequest;

        // create path and map variables
        String localVarPath = "/sip-rules/{sipRuleId}"
            .replace("{" + "sipRuleId" + "}", localVarApiClient.escapeString(sipRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSipRuleValidateBeforeCall(String sipRuleId, UpdateSipRuleRequest updateSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sipRuleId' is set
        if (sipRuleId == null) {
            throw new ApiException("Missing the required parameter 'sipRuleId' when calling updateSipRule(Async)");
        }

        // verify the required parameter 'updateSipRuleRequest' is set
        if (updateSipRuleRequest == null) {
            throw new ApiException("Missing the required parameter 'updateSipRuleRequest' when calling updateSipRule(Async)");
        }

        return updateSipRuleCall(sipRuleId, updateSipRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates the details of the specified SIP rule.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipRule.html\&quot;&gt;UpdateSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param updateSipRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateSipRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateSipRuleResponse updateSipRule(String sipRuleId, UpdateSipRuleRequest updateSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateSipRuleResponse> localVarResp = updateSipRuleWithHttpInfo(sipRuleId, updateSipRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates the details of the specified SIP rule.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipRule.html\&quot;&gt;UpdateSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param updateSipRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateSipRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateSipRuleResponse> updateSipRuleWithHttpInfo(String sipRuleId, UpdateSipRuleRequest updateSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateSipRuleValidateBeforeCall(sipRuleId, updateSipRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateSipRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates the details of the specified SIP rule.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateSipRule.html\&quot;&gt;UpdateSipRule&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param sipRuleId The SIP rule ID. (required)
     * @param updateSipRuleRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ResourceLimitExceededException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 488 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateSipRuleAsync(String sipRuleId, UpdateSipRuleRequest updateSipRuleRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateSipRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSipRuleValidateBeforeCall(sipRuleId, updateSipRuleRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateSipRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param updateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(String accountId, String userId, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users/{userId}"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(String accountId, String userId, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateUser(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }

        // verify the required parameter 'updateUserRequest' is set
        if (updateUserRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserRequest' when calling updateUser(Async)");
        }

        return updateUserCall(accountId, userId, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates user details for a specified user ID. Currently, only &lt;code&gt;LicenseType&lt;/code&gt; updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param updateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public UpdateUserResponse updateUser(String accountId, String userId, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateUserResponse> localVarResp = updateUserWithHttpInfo(accountId, userId, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates user details for a specified user ID. Currently, only &lt;code&gt;LicenseType&lt;/code&gt; updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param updateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateUserResponse> updateUserWithHttpInfo(String accountId, String userId, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(accountId, userId, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates user details for a specified user ID. Currently, only &lt;code&gt;LicenseType&lt;/code&gt; updates are supported for this action.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param updateUserRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(String accountId, String userId, UpdateUserRequest updateUserRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(accountId, userId, updateUserRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserSettings
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param updateUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserSettingsCall(String accountId, String userId, UpdateUserSettingsRequest updateUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateUserSettingsRequest;

        // create path and map variables
        String localVarPath = "/accounts/{accountId}/users/{userId}/settings"
            .replace("{" + "accountId" + "}", localVarApiClient.escapeString(accountId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserSettingsValidateBeforeCall(String accountId, String userId, UpdateUserSettingsRequest updateUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateUserSettings(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUserSettings(Async)");
        }

        // verify the required parameter 'updateUserSettingsRequest' is set
        if (updateUserSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'updateUserSettingsRequest' when calling updateUserSettings(Async)");
        }

        return updateUserSettingsCall(accountId, userId, updateUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * Updates the settings for the specified user, such as phone number settings.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param updateUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public void updateUserSettings(String accountId, String userId, UpdateUserSettingsRequest updateUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        updateUserSettingsWithHttpInfo(accountId, userId, updateUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
    }

    /**
     * 
     * Updates the settings for the specified user, such as phone number settings.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param updateUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateUserSettingsWithHttpInfo(String accountId, String userId, UpdateUserSettingsRequest updateUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateUserSettingsValidateBeforeCall(accountId, userId, updateUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the settings for the specified user, such as phone number settings.
     * @param accountId The Amazon Chime account ID. (required)
     * @param userId The user ID. (required)
     * @param updateUserSettingsRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserSettingsAsync(String accountId, String userId, UpdateUserSettingsRequest updateUserSettingsRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserSettingsValidateBeforeCall(accountId, userId, updateUserSettingsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVoiceConnector
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param updateVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateVoiceConnectorCall(String voiceConnectorId, UpdateVoiceConnectorRequest updateVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVoiceConnectorRequest;

        // create path and map variables
        String localVarPath = "/voice-connectors/{voiceConnectorId}"
            .replace("{" + "voiceConnectorId" + "}", localVarApiClient.escapeString(voiceConnectorId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVoiceConnectorValidateBeforeCall(String voiceConnectorId, UpdateVoiceConnectorRequest updateVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorId' is set
        if (voiceConnectorId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorId' when calling updateVoiceConnector(Async)");
        }

        // verify the required parameter 'updateVoiceConnectorRequest' is set
        if (updateVoiceConnectorRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVoiceConnectorRequest' when calling updateVoiceConnector(Async)");
        }

        return updateVoiceConnectorCall(voiceConnectorId, updateVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateVoiceConnector.html\&quot;&gt;UpdateVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param updateVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateVoiceConnectorResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateVoiceConnectorResponse updateVoiceConnector(String voiceConnectorId, UpdateVoiceConnectorRequest updateVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateVoiceConnectorResponse> localVarResp = updateVoiceConnectorWithHttpInfo(voiceConnectorId, updateVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateVoiceConnector.html\&quot;&gt;UpdateVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param updateVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateVoiceConnectorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateVoiceConnectorResponse> updateVoiceConnectorWithHttpInfo(String voiceConnectorId, UpdateVoiceConnectorRequest updateVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateVoiceConnectorValidateBeforeCall(voiceConnectorId, updateVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateVoiceConnectorResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates details for the specified Amazon Chime Voice Connector.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateVoiceConnector.html\&quot;&gt;UpdateVoiceConnector&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorId The Amazon Chime Voice Connector ID. (required)
     * @param updateVoiceConnectorRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateVoiceConnectorAsync(String voiceConnectorId, UpdateVoiceConnectorRequest updateVoiceConnectorRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateVoiceConnectorResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVoiceConnectorValidateBeforeCall(voiceConnectorId, updateVoiceConnectorRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateVoiceConnectorResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVoiceConnectorGroup
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param updateVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateVoiceConnectorGroupCall(String voiceConnectorGroupId, UpdateVoiceConnectorGroupRequest updateVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateVoiceConnectorGroupRequest;

        // create path and map variables
        String localVarPath = "/voice-connector-groups/{voiceConnectorGroupId}"
            .replace("{" + "voiceConnectorGroupId" + "}", localVarApiClient.escapeString(voiceConnectorGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVoiceConnectorGroupValidateBeforeCall(String voiceConnectorGroupId, UpdateVoiceConnectorGroupRequest updateVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'voiceConnectorGroupId' is set
        if (voiceConnectorGroupId == null) {
            throw new ApiException("Missing the required parameter 'voiceConnectorGroupId' when calling updateVoiceConnectorGroup(Async)");
        }

        // verify the required parameter 'updateVoiceConnectorGroupRequest' is set
        if (updateVoiceConnectorGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'updateVoiceConnectorGroupRequest' when calling updateVoiceConnectorGroup(Async)");
        }

        return updateVoiceConnectorGroupCall(voiceConnectorGroupId, updateVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Updates details of the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateVoiceConnectorGroup.html\&quot;&gt;UpdateVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param updateVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return UpdateVoiceConnectorGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public UpdateVoiceConnectorGroupResponse updateVoiceConnectorGroup(String voiceConnectorGroupId, UpdateVoiceConnectorGroupRequest updateVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<UpdateVoiceConnectorGroupResponse> localVarResp = updateVoiceConnectorGroupWithHttpInfo(voiceConnectorGroupId, updateVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Updates details of the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateVoiceConnectorGroup.html\&quot;&gt;UpdateVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param updateVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;UpdateVoiceConnectorGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<UpdateVoiceConnectorGroupResponse> updateVoiceConnectorGroupWithHttpInfo(String voiceConnectorGroupId, UpdateVoiceConnectorGroupRequest updateVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, updateVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<UpdateVoiceConnectorGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Updates details of the specified Amazon Chime Voice Connector group, such as the name and Amazon Chime Voice Connector priority ranking.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_UpdateVoiceConnectorGroup.html\&quot;&gt;UpdateVoiceConnectorGroup&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param voiceConnectorGroupId The Amazon Chime Voice Connector group ID. (required)
     * @param updateVoiceConnectorGroupRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ConflictException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 487 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateVoiceConnectorGroupAsync(String voiceConnectorGroupId, UpdateVoiceConnectorGroupRequest updateVoiceConnectorGroupRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<UpdateVoiceConnectorGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVoiceConnectorGroupValidateBeforeCall(voiceConnectorGroupId, updateVoiceConnectorGroupRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<UpdateVoiceConnectorGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateE911Address
     * @param validateE911AddressRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call validateE911AddressCall(ValidateE911AddressRequest validateE911AddressRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validateE911AddressRequest;

        // create path and map variables
        String localVarPath = "/emergency-calling/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xAmzContentSha256 != null) {
            localVarHeaderParams.put("X-Amz-Content-Sha256", localVarApiClient.parameterToString(xAmzContentSha256));
        }

        if (xAmzDate != null) {
            localVarHeaderParams.put("X-Amz-Date", localVarApiClient.parameterToString(xAmzDate));
        }

        if (xAmzAlgorithm != null) {
            localVarHeaderParams.put("X-Amz-Algorithm", localVarApiClient.parameterToString(xAmzAlgorithm));
        }

        if (xAmzCredential != null) {
            localVarHeaderParams.put("X-Amz-Credential", localVarApiClient.parameterToString(xAmzCredential));
        }

        if (xAmzSecurityToken != null) {
            localVarHeaderParams.put("X-Amz-Security-Token", localVarApiClient.parameterToString(xAmzSecurityToken));
        }

        if (xAmzSignature != null) {
            localVarHeaderParams.put("X-Amz-Signature", localVarApiClient.parameterToString(xAmzSignature));
        }

        if (xAmzSignedHeaders != null) {
            localVarHeaderParams.put("X-Amz-SignedHeaders", localVarApiClient.parameterToString(xAmzSignedHeaders));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "hmac" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateE911AddressValidateBeforeCall(ValidateE911AddressRequest validateE911AddressRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validateE911AddressRequest' is set
        if (validateE911AddressRequest == null) {
            throw new ApiException("Missing the required parameter 'validateE911AddressRequest' when calling validateE911Address(Async)");
        }

        return validateE911AddressCall(validateE911AddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);

    }

    /**
     * 
     * &lt;p&gt;Validates an address to be used for 911 calls made with Amazon Chime Voice Connectors. You can use validated addresses in a Presence Information Data Format Location Object file that you include in SIP requests. That helps ensure that addresses are routed to the appropriate Public Safety Answering Point.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ValidateE911Address.html\&quot;&gt;ValidateE911Address&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param validateE911AddressRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ValidateE911AddressResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ValidateE911AddressResponse validateE911Address(ValidateE911AddressRequest validateE911AddressRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        ApiResponse<ValidateE911AddressResponse> localVarResp = validateE911AddressWithHttpInfo(validateE911AddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        return localVarResp.getData();
    }

    /**
     * 
     * &lt;p&gt;Validates an address to be used for 911 calls made with Amazon Chime Voice Connectors. You can use validated addresses in a Presence Information Data Format Location Object file that you include in SIP requests. That helps ensure that addresses are routed to the appropriate Public Safety Answering Point.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ValidateE911Address.html\&quot;&gt;ValidateE911Address&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param validateE911AddressRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @return ApiResponse&lt;ValidateE911AddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ValidateE911AddressResponse> validateE911AddressWithHttpInfo(ValidateE911AddressRequest validateE911AddressRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders) throws ApiException {
        okhttp3.Call localVarCall = validateE911AddressValidateBeforeCall(validateE911AddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, null);
        Type localVarReturnType = new TypeToken<ValidateE911AddressResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * &lt;p&gt;Validates an address to be used for 911 calls made with Amazon Chime Voice Connectors. You can use validated addresses in a Presence Information Data Format Location Object file that you include in SIP requests. That helps ensure that addresses are routed to the appropriate Public Safety Answering Point.&lt;/p&gt; &lt;important&gt; &lt;p&gt; &lt;b&gt;This API is is no longer supported and will not be updated.&lt;/b&gt; We recommend using the latest version, &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/APIReference/API_voice-chime_ValidateE911Address.html\&quot;&gt;ValidateE911Address&lt;/a&gt;, in the Amazon Chime SDK.&lt;/p&gt; &lt;p&gt;Using the latest version requires migrating to a dedicated namespace. For more information, refer to &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\&quot;&gt;Migrating from the Amazon Chime namespace&lt;/a&gt; in the &lt;i&gt;Amazon Chime SDK Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;/important&gt;
     * @param validateE911AddressRequest  (required)
     * @param xAmzContentSha256  (optional)
     * @param xAmzDate  (optional)
     * @param xAmzAlgorithm  (optional)
     * @param xAmzCredential  (optional)
     * @param xAmzSecurityToken  (optional)
     * @param xAmzSignature  (optional)
     * @param xAmzSignedHeaders  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 480 </td><td> UnauthorizedClientException </td><td>  -  </td></tr>
        <tr><td> 481 </td><td> NotFoundException </td><td>  -  </td></tr>
        <tr><td> 482 </td><td> ForbiddenException </td><td>  -  </td></tr>
        <tr><td> 483 </td><td> BadRequestException </td><td>  -  </td></tr>
        <tr><td> 484 </td><td> ThrottledClientException </td><td>  -  </td></tr>
        <tr><td> 485 </td><td> ServiceUnavailableException </td><td>  -  </td></tr>
        <tr><td> 486 </td><td> ServiceFailureException </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call validateE911AddressAsync(ValidateE911AddressRequest validateE911AddressRequest, String xAmzContentSha256, String xAmzDate, String xAmzAlgorithm, String xAmzCredential, String xAmzSecurityToken, String xAmzSignature, String xAmzSignedHeaders, final ApiCallback<ValidateE911AddressResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateE911AddressValidateBeforeCall(validateE911AddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, _callback);
        Type localVarReturnType = new TypeToken<ValidateE911AddressResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
