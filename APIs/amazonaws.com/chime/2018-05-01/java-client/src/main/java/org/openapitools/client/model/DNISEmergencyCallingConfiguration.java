/*
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Dialed Number Identification Service (DNIS) emergency calling configuration details associated with an Amazon Chime Voice Connector&#39;s emergency calling configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:22.248115-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DNISEmergencyCallingConfiguration {
  public static final String SERIALIZED_NAME_EMERGENCY_PHONE_NUMBER = "EmergencyPhoneNumber";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_PHONE_NUMBER)
  private String emergencyPhoneNumber;

  public static final String SERIALIZED_NAME_TEST_PHONE_NUMBER = "TestPhoneNumber";
  @SerializedName(SERIALIZED_NAME_TEST_PHONE_NUMBER)
  private String testPhoneNumber;

  public static final String SERIALIZED_NAME_CALLING_COUNTRY = "CallingCountry";
  @SerializedName(SERIALIZED_NAME_CALLING_COUNTRY)
  private String callingCountry;

  public DNISEmergencyCallingConfiguration() {
  }

  public DNISEmergencyCallingConfiguration emergencyPhoneNumber(String emergencyPhoneNumber) {
    this.emergencyPhoneNumber = emergencyPhoneNumber;
    return this;
  }

  /**
   * Get emergencyPhoneNumber
   * @return emergencyPhoneNumber
   */
  @javax.annotation.Nonnull
  public String getEmergencyPhoneNumber() {
    return emergencyPhoneNumber;
  }

  public void setEmergencyPhoneNumber(String emergencyPhoneNumber) {
    this.emergencyPhoneNumber = emergencyPhoneNumber;
  }


  public DNISEmergencyCallingConfiguration testPhoneNumber(String testPhoneNumber) {
    this.testPhoneNumber = testPhoneNumber;
    return this;
  }

  /**
   * Get testPhoneNumber
   * @return testPhoneNumber
   */
  @javax.annotation.Nullable
  public String getTestPhoneNumber() {
    return testPhoneNumber;
  }

  public void setTestPhoneNumber(String testPhoneNumber) {
    this.testPhoneNumber = testPhoneNumber;
  }


  public DNISEmergencyCallingConfiguration callingCountry(String callingCountry) {
    this.callingCountry = callingCountry;
    return this;
  }

  /**
   * Get callingCountry
   * @return callingCountry
   */
  @javax.annotation.Nonnull
  public String getCallingCountry() {
    return callingCountry;
  }

  public void setCallingCountry(String callingCountry) {
    this.callingCountry = callingCountry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DNISEmergencyCallingConfiguration dnISEmergencyCallingConfiguration = (DNISEmergencyCallingConfiguration) o;
    return Objects.equals(this.emergencyPhoneNumber, dnISEmergencyCallingConfiguration.emergencyPhoneNumber) &&
        Objects.equals(this.testPhoneNumber, dnISEmergencyCallingConfiguration.testPhoneNumber) &&
        Objects.equals(this.callingCountry, dnISEmergencyCallingConfiguration.callingCountry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emergencyPhoneNumber, testPhoneNumber, callingCountry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DNISEmergencyCallingConfiguration {\n");
    sb.append("    emergencyPhoneNumber: ").append(toIndentedString(emergencyPhoneNumber)).append("\n");
    sb.append("    testPhoneNumber: ").append(toIndentedString(testPhoneNumber)).append("\n");
    sb.append("    callingCountry: ").append(toIndentedString(callingCountry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EmergencyPhoneNumber");
    openapiFields.add("TestPhoneNumber");
    openapiFields.add("CallingCountry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EmergencyPhoneNumber");
    openapiRequiredFields.add("CallingCountry");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DNISEmergencyCallingConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DNISEmergencyCallingConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DNISEmergencyCallingConfiguration is not found in the empty JSON string", DNISEmergencyCallingConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DNISEmergencyCallingConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DNISEmergencyCallingConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DNISEmergencyCallingConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `EmergencyPhoneNumber`
      String.validateJsonElement(jsonObj.get("EmergencyPhoneNumber"));
      // validate the optional field `TestPhoneNumber`
      if (jsonObj.get("TestPhoneNumber") != null && !jsonObj.get("TestPhoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TestPhoneNumber"));
      }
      // validate the required field `CallingCountry`
      String.validateJsonElement(jsonObj.get("CallingCountry"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DNISEmergencyCallingConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DNISEmergencyCallingConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DNISEmergencyCallingConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DNISEmergencyCallingConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DNISEmergencyCallingConfiguration>() {
           @Override
           public void write(JsonWriter out, DNISEmergencyCallingConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DNISEmergencyCallingConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DNISEmergencyCallingConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DNISEmergencyCallingConfiguration
   * @throws IOException if the JSON string is invalid with respect to DNISEmergencyCallingConfiguration
   */
  public static DNISEmergencyCallingConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DNISEmergencyCallingConfiguration.class);
  }

  /**
   * Convert an instance of DNISEmergencyCallingConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

