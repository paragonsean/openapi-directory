/*
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CallingNameStatus;
import org.openapitools.client.model.PhoneNumberCapabilities;
import org.openapitools.client.model.PhoneNumberProductType;
import org.openapitools.client.model.PhoneNumberStatus;
import org.openapitools.client.model.PhoneNumberType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A phone number used for Amazon Chime Business Calling or an Amazon Chime Voice Connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:22.248115-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PhoneNumber {
  public static final String SERIALIZED_NAME_PHONE_NUMBER_ID = "PhoneNumberId";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_ID)
  private String phoneNumberId;

  public static final String SERIALIZED_NAME_E164_PHONE_NUMBER = "E164PhoneNumber";
  @SerializedName(SERIALIZED_NAME_E164_PHONE_NUMBER)
  private String e164PhoneNumber;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private PhoneNumberType type;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "ProductType";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private PhoneNumberProductType productType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PhoneNumberStatus status;

  public static final String SERIALIZED_NAME_CAPABILITIES = "Capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private PhoneNumberCapabilities capabilities;

  public static final String SERIALIZED_NAME_ASSOCIATIONS = "Associations";
  @SerializedName(SERIALIZED_NAME_ASSOCIATIONS)
  private List associations;

  public static final String SERIALIZED_NAME_CALLING_NAME = "CallingName";
  @SerializedName(SERIALIZED_NAME_CALLING_NAME)
  private String callingName;

  public static final String SERIALIZED_NAME_CALLING_NAME_STATUS = "CallingNameStatus";
  @SerializedName(SERIALIZED_NAME_CALLING_NAME_STATUS)
  private CallingNameStatus callingNameStatus;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_UPDATED_TIMESTAMP = "UpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIMESTAMP)
  private OffsetDateTime updatedTimestamp;

  public static final String SERIALIZED_NAME_DELETION_TIMESTAMP = "DeletionTimestamp";
  @SerializedName(SERIALIZED_NAME_DELETION_TIMESTAMP)
  private OffsetDateTime deletionTimestamp;

  public PhoneNumber() {
  }

  public PhoneNumber phoneNumberId(String phoneNumberId) {
    this.phoneNumberId = phoneNumberId;
    return this;
  }

  /**
   * Get phoneNumberId
   * @return phoneNumberId
   */
  @javax.annotation.Nullable
  public String getPhoneNumberId() {
    return phoneNumberId;
  }

  public void setPhoneNumberId(String phoneNumberId) {
    this.phoneNumberId = phoneNumberId;
  }


  public PhoneNumber e164PhoneNumber(String e164PhoneNumber) {
    this.e164PhoneNumber = e164PhoneNumber;
    return this;
  }

  /**
   * Get e164PhoneNumber
   * @return e164PhoneNumber
   */
  @javax.annotation.Nullable
  public String getE164PhoneNumber() {
    return e164PhoneNumber;
  }

  public void setE164PhoneNumber(String e164PhoneNumber) {
    this.e164PhoneNumber = e164PhoneNumber;
  }


  public PhoneNumber country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public PhoneNumber type(PhoneNumberType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public PhoneNumberType getType() {
    return type;
  }

  public void setType(PhoneNumberType type) {
    this.type = type;
  }


  public PhoneNumber productType(PhoneNumberProductType productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Get productType
   * @return productType
   */
  @javax.annotation.Nullable
  public PhoneNumberProductType getProductType() {
    return productType;
  }

  public void setProductType(PhoneNumberProductType productType) {
    this.productType = productType;
  }


  public PhoneNumber status(PhoneNumberStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public PhoneNumberStatus getStatus() {
    return status;
  }

  public void setStatus(PhoneNumberStatus status) {
    this.status = status;
  }


  public PhoneNumber capabilities(PhoneNumberCapabilities capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  /**
   * Get capabilities
   * @return capabilities
   */
  @javax.annotation.Nullable
  public PhoneNumberCapabilities getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(PhoneNumberCapabilities capabilities) {
    this.capabilities = capabilities;
  }


  public PhoneNumber associations(List associations) {
    this.associations = associations;
    return this;
  }

  /**
   * Get associations
   * @return associations
   */
  @javax.annotation.Nullable
  public List getAssociations() {
    return associations;
  }

  public void setAssociations(List associations) {
    this.associations = associations;
  }


  public PhoneNumber callingName(String callingName) {
    this.callingName = callingName;
    return this;
  }

  /**
   * Get callingName
   * @return callingName
   */
  @javax.annotation.Nullable
  public String getCallingName() {
    return callingName;
  }

  public void setCallingName(String callingName) {
    this.callingName = callingName;
  }


  public PhoneNumber callingNameStatus(CallingNameStatus callingNameStatus) {
    this.callingNameStatus = callingNameStatus;
    return this;
  }

  /**
   * Get callingNameStatus
   * @return callingNameStatus
   */
  @javax.annotation.Nullable
  public CallingNameStatus getCallingNameStatus() {
    return callingNameStatus;
  }

  public void setCallingNameStatus(CallingNameStatus callingNameStatus) {
    this.callingNameStatus = callingNameStatus;
  }


  public PhoneNumber createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public PhoneNumber updatedTimestamp(OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
    return this;
  }

  /**
   * Get updatedTimestamp
   * @return updatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTimestamp() {
    return updatedTimestamp;
  }

  public void setUpdatedTimestamp(OffsetDateTime updatedTimestamp) {
    this.updatedTimestamp = updatedTimestamp;
  }


  public PhoneNumber deletionTimestamp(OffsetDateTime deletionTimestamp) {
    this.deletionTimestamp = deletionTimestamp;
    return this;
  }

  /**
   * Get deletionTimestamp
   * @return deletionTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeletionTimestamp() {
    return deletionTimestamp;
  }

  public void setDeletionTimestamp(OffsetDateTime deletionTimestamp) {
    this.deletionTimestamp = deletionTimestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneNumber phoneNumber = (PhoneNumber) o;
    return Objects.equals(this.phoneNumberId, phoneNumber.phoneNumberId) &&
        Objects.equals(this.e164PhoneNumber, phoneNumber.e164PhoneNumber) &&
        Objects.equals(this.country, phoneNumber.country) &&
        Objects.equals(this.type, phoneNumber.type) &&
        Objects.equals(this.productType, phoneNumber.productType) &&
        Objects.equals(this.status, phoneNumber.status) &&
        Objects.equals(this.capabilities, phoneNumber.capabilities) &&
        Objects.equals(this.associations, phoneNumber.associations) &&
        Objects.equals(this.callingName, phoneNumber.callingName) &&
        Objects.equals(this.callingNameStatus, phoneNumber.callingNameStatus) &&
        Objects.equals(this.createdTimestamp, phoneNumber.createdTimestamp) &&
        Objects.equals(this.updatedTimestamp, phoneNumber.updatedTimestamp) &&
        Objects.equals(this.deletionTimestamp, phoneNumber.deletionTimestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNumberId, e164PhoneNumber, country, type, productType, status, capabilities, associations, callingName, callingNameStatus, createdTimestamp, updatedTimestamp, deletionTimestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneNumber {\n");
    sb.append("    phoneNumberId: ").append(toIndentedString(phoneNumberId)).append("\n");
    sb.append("    e164PhoneNumber: ").append(toIndentedString(e164PhoneNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    associations: ").append(toIndentedString(associations)).append("\n");
    sb.append("    callingName: ").append(toIndentedString(callingName)).append("\n");
    sb.append("    callingNameStatus: ").append(toIndentedString(callingNameStatus)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    updatedTimestamp: ").append(toIndentedString(updatedTimestamp)).append("\n");
    sb.append("    deletionTimestamp: ").append(toIndentedString(deletionTimestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PhoneNumberId");
    openapiFields.add("E164PhoneNumber");
    openapiFields.add("Country");
    openapiFields.add("Type");
    openapiFields.add("ProductType");
    openapiFields.add("Status");
    openapiFields.add("Capabilities");
    openapiFields.add("Associations");
    openapiFields.add("CallingName");
    openapiFields.add("CallingNameStatus");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("UpdatedTimestamp");
    openapiFields.add("DeletionTimestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneNumber
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PhoneNumber.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneNumber is not found in the empty JSON string", PhoneNumber.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneNumber.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneNumber` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PhoneNumberId`
      if (jsonObj.get("PhoneNumberId") != null && !jsonObj.get("PhoneNumberId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumberId"));
      }
      // validate the optional field `E164PhoneNumber`
      if (jsonObj.get("E164PhoneNumber") != null && !jsonObj.get("E164PhoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("E164PhoneNumber"));
      }
      // validate the optional field `Country`
      if (jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Country"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        PhoneNumberType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `ProductType`
      if (jsonObj.get("ProductType") != null && !jsonObj.get("ProductType").isJsonNull()) {
        PhoneNumberProductType.validateJsonElement(jsonObj.get("ProductType"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        PhoneNumberStatus.validateJsonElement(jsonObj.get("Status"));
      }
      // validate the optional field `Capabilities`
      if (jsonObj.get("Capabilities") != null && !jsonObj.get("Capabilities").isJsonNull()) {
        PhoneNumberCapabilities.validateJsonElement(jsonObj.get("Capabilities"));
      }
      // validate the optional field `Associations`
      if (jsonObj.get("Associations") != null && !jsonObj.get("Associations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Associations"));
      }
      // validate the optional field `CallingName`
      if (jsonObj.get("CallingName") != null && !jsonObj.get("CallingName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CallingName"));
      }
      // validate the optional field `CallingNameStatus`
      if (jsonObj.get("CallingNameStatus") != null && !jsonObj.get("CallingNameStatus").isJsonNull()) {
        CallingNameStatus.validateJsonElement(jsonObj.get("CallingNameStatus"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `UpdatedTimestamp`
      if (jsonObj.get("UpdatedTimestamp") != null && !jsonObj.get("UpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("UpdatedTimestamp"));
      }
      // validate the optional field `DeletionTimestamp`
      if (jsonObj.get("DeletionTimestamp") != null && !jsonObj.get("DeletionTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("DeletionTimestamp"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneNumber.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneNumber' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneNumber> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneNumber.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneNumber>() {
           @Override
           public void write(JsonWriter out, PhoneNumber value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneNumber read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneNumber given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneNumber
   * @throws IOException if the JSON string is invalid with respect to PhoneNumber
   */
  public static PhoneNumber fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneNumber.class);
  }

  /**
   * Convert an instance of PhoneNumber to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

