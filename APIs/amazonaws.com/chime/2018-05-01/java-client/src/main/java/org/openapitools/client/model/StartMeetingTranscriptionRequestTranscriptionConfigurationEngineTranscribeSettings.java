/*
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TranscribeContentIdentificationType;
import org.openapitools.client.model.TranscribeContentRedactionType;
import org.openapitools.client.model.TranscribeLanguageCode;
import org.openapitools.client.model.TranscribePartialResultsStability;
import org.openapitools.client.model.TranscribeRegion;
import org.openapitools.client.model.TranscribeVocabularyFilterMethod;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:22.248115-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings {
  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "LanguageCode";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private TranscribeLanguageCode languageCode;

  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_METHOD = "VocabularyFilterMethod";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_METHOD)
  private TranscribeVocabularyFilterMethod vocabularyFilterMethod;

  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_NAME = "VocabularyFilterName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_NAME)
  private String vocabularyFilterName;

  public static final String SERIALIZED_NAME_VOCABULARY_NAME = "VocabularyName";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_NAME)
  private String vocabularyName;

  public static final String SERIALIZED_NAME_REGION = "Region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private TranscribeRegion region;

  public static final String SERIALIZED_NAME_ENABLE_PARTIAL_RESULTS_STABILIZATION = "EnablePartialResultsStabilization";
  @SerializedName(SERIALIZED_NAME_ENABLE_PARTIAL_RESULTS_STABILIZATION)
  private Boolean enablePartialResultsStabilization;

  public static final String SERIALIZED_NAME_PARTIAL_RESULTS_STABILITY = "PartialResultsStability";
  @SerializedName(SERIALIZED_NAME_PARTIAL_RESULTS_STABILITY)
  private TranscribePartialResultsStability partialResultsStability;

  public static final String SERIALIZED_NAME_CONTENT_IDENTIFICATION_TYPE = "ContentIdentificationType";
  @SerializedName(SERIALIZED_NAME_CONTENT_IDENTIFICATION_TYPE)
  private TranscribeContentIdentificationType contentIdentificationType;

  public static final String SERIALIZED_NAME_CONTENT_REDACTION_TYPE = "ContentRedactionType";
  @SerializedName(SERIALIZED_NAME_CONTENT_REDACTION_TYPE)
  private TranscribeContentRedactionType contentRedactionType;

  public static final String SERIALIZED_NAME_PII_ENTITY_TYPES = "PiiEntityTypes";
  @SerializedName(SERIALIZED_NAME_PII_ENTITY_TYPES)
  private String piiEntityTypes;

  public static final String SERIALIZED_NAME_LANGUAGE_MODEL_NAME = "LanguageModelName";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_MODEL_NAME)
  private String languageModelName;

  public static final String SERIALIZED_NAME_IDENTIFY_LANGUAGE = "IdentifyLanguage";
  @SerializedName(SERIALIZED_NAME_IDENTIFY_LANGUAGE)
  private Boolean identifyLanguage;

  public static final String SERIALIZED_NAME_LANGUAGE_OPTIONS = "LanguageOptions";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_OPTIONS)
  private String languageOptions;

  public static final String SERIALIZED_NAME_PREFERRED_LANGUAGE = "PreferredLanguage";
  @SerializedName(SERIALIZED_NAME_PREFERRED_LANGUAGE)
  private TranscribeLanguageCode preferredLanguage;

  public static final String SERIALIZED_NAME_VOCABULARY_NAMES = "VocabularyNames";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_NAMES)
  private String vocabularyNames;

  public static final String SERIALIZED_NAME_VOCABULARY_FILTER_NAMES = "VocabularyFilterNames";
  @SerializedName(SERIALIZED_NAME_VOCABULARY_FILTER_NAMES)
  private String vocabularyFilterNames;

  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings() {
  }

  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings languageCode(TranscribeLanguageCode languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * Get languageCode
   * @return languageCode
   */
  @javax.annotation.Nullable
  public TranscribeLanguageCode getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(TranscribeLanguageCode languageCode) {
    this.languageCode = languageCode;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings vocabularyFilterMethod(TranscribeVocabularyFilterMethod vocabularyFilterMethod) {
    this.vocabularyFilterMethod = vocabularyFilterMethod;
    return this;
  }

  /**
   * Get vocabularyFilterMethod
   * @return vocabularyFilterMethod
   */
  @javax.annotation.Nullable
  public TranscribeVocabularyFilterMethod getVocabularyFilterMethod() {
    return vocabularyFilterMethod;
  }

  public void setVocabularyFilterMethod(TranscribeVocabularyFilterMethod vocabularyFilterMethod) {
    this.vocabularyFilterMethod = vocabularyFilterMethod;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings vocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
    return this;
  }

  /**
   * Get vocabularyFilterName
   * @return vocabularyFilterName
   */
  @javax.annotation.Nullable
  public String getVocabularyFilterName() {
    return vocabularyFilterName;
  }

  public void setVocabularyFilterName(String vocabularyFilterName) {
    this.vocabularyFilterName = vocabularyFilterName;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings vocabularyName(String vocabularyName) {
    this.vocabularyName = vocabularyName;
    return this;
  }

  /**
   * Get vocabularyName
   * @return vocabularyName
   */
  @javax.annotation.Nullable
  public String getVocabularyName() {
    return vocabularyName;
  }

  public void setVocabularyName(String vocabularyName) {
    this.vocabularyName = vocabularyName;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings region(TranscribeRegion region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nullable
  public TranscribeRegion getRegion() {
    return region;
  }

  public void setRegion(TranscribeRegion region) {
    this.region = region;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings enablePartialResultsStabilization(Boolean enablePartialResultsStabilization) {
    this.enablePartialResultsStabilization = enablePartialResultsStabilization;
    return this;
  }

  /**
   * Get enablePartialResultsStabilization
   * @return enablePartialResultsStabilization
   */
  @javax.annotation.Nullable
  public Boolean getEnablePartialResultsStabilization() {
    return enablePartialResultsStabilization;
  }

  public void setEnablePartialResultsStabilization(Boolean enablePartialResultsStabilization) {
    this.enablePartialResultsStabilization = enablePartialResultsStabilization;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings partialResultsStability(TranscribePartialResultsStability partialResultsStability) {
    this.partialResultsStability = partialResultsStability;
    return this;
  }

  /**
   * Get partialResultsStability
   * @return partialResultsStability
   */
  @javax.annotation.Nullable
  public TranscribePartialResultsStability getPartialResultsStability() {
    return partialResultsStability;
  }

  public void setPartialResultsStability(TranscribePartialResultsStability partialResultsStability) {
    this.partialResultsStability = partialResultsStability;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings contentIdentificationType(TranscribeContentIdentificationType contentIdentificationType) {
    this.contentIdentificationType = contentIdentificationType;
    return this;
  }

  /**
   * Get contentIdentificationType
   * @return contentIdentificationType
   */
  @javax.annotation.Nullable
  public TranscribeContentIdentificationType getContentIdentificationType() {
    return contentIdentificationType;
  }

  public void setContentIdentificationType(TranscribeContentIdentificationType contentIdentificationType) {
    this.contentIdentificationType = contentIdentificationType;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings contentRedactionType(TranscribeContentRedactionType contentRedactionType) {
    this.contentRedactionType = contentRedactionType;
    return this;
  }

  /**
   * Get contentRedactionType
   * @return contentRedactionType
   */
  @javax.annotation.Nullable
  public TranscribeContentRedactionType getContentRedactionType() {
    return contentRedactionType;
  }

  public void setContentRedactionType(TranscribeContentRedactionType contentRedactionType) {
    this.contentRedactionType = contentRedactionType;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings piiEntityTypes(String piiEntityTypes) {
    this.piiEntityTypes = piiEntityTypes;
    return this;
  }

  /**
   * Get piiEntityTypes
   * @return piiEntityTypes
   */
  @javax.annotation.Nullable
  public String getPiiEntityTypes() {
    return piiEntityTypes;
  }

  public void setPiiEntityTypes(String piiEntityTypes) {
    this.piiEntityTypes = piiEntityTypes;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings languageModelName(String languageModelName) {
    this.languageModelName = languageModelName;
    return this;
  }

  /**
   * Get languageModelName
   * @return languageModelName
   */
  @javax.annotation.Nullable
  public String getLanguageModelName() {
    return languageModelName;
  }

  public void setLanguageModelName(String languageModelName) {
    this.languageModelName = languageModelName;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings identifyLanguage(Boolean identifyLanguage) {
    this.identifyLanguage = identifyLanguage;
    return this;
  }

  /**
   * Get identifyLanguage
   * @return identifyLanguage
   */
  @javax.annotation.Nullable
  public Boolean getIdentifyLanguage() {
    return identifyLanguage;
  }

  public void setIdentifyLanguage(Boolean identifyLanguage) {
    this.identifyLanguage = identifyLanguage;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings languageOptions(String languageOptions) {
    this.languageOptions = languageOptions;
    return this;
  }

  /**
   * Get languageOptions
   * @return languageOptions
   */
  @javax.annotation.Nullable
  public String getLanguageOptions() {
    return languageOptions;
  }

  public void setLanguageOptions(String languageOptions) {
    this.languageOptions = languageOptions;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings preferredLanguage(TranscribeLanguageCode preferredLanguage) {
    this.preferredLanguage = preferredLanguage;
    return this;
  }

  /**
   * Get preferredLanguage
   * @return preferredLanguage
   */
  @javax.annotation.Nullable
  public TranscribeLanguageCode getPreferredLanguage() {
    return preferredLanguage;
  }

  public void setPreferredLanguage(TranscribeLanguageCode preferredLanguage) {
    this.preferredLanguage = preferredLanguage;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings vocabularyNames(String vocabularyNames) {
    this.vocabularyNames = vocabularyNames;
    return this;
  }

  /**
   * Get vocabularyNames
   * @return vocabularyNames
   */
  @javax.annotation.Nullable
  public String getVocabularyNames() {
    return vocabularyNames;
  }

  public void setVocabularyNames(String vocabularyNames) {
    this.vocabularyNames = vocabularyNames;
  }


  public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings vocabularyFilterNames(String vocabularyFilterNames) {
    this.vocabularyFilterNames = vocabularyFilterNames;
    return this;
  }

  /**
   * Get vocabularyFilterNames
   * @return vocabularyFilterNames
   */
  @javax.annotation.Nullable
  public String getVocabularyFilterNames() {
    return vocabularyFilterNames;
  }

  public void setVocabularyFilterNames(String vocabularyFilterNames) {
    this.vocabularyFilterNames = vocabularyFilterNames;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings = (StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings) o;
    return Objects.equals(this.languageCode, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.languageCode) &&
        Objects.equals(this.vocabularyFilterMethod, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.vocabularyFilterMethod) &&
        Objects.equals(this.vocabularyFilterName, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.vocabularyFilterName) &&
        Objects.equals(this.vocabularyName, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.vocabularyName) &&
        Objects.equals(this.region, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.region) &&
        Objects.equals(this.enablePartialResultsStabilization, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.enablePartialResultsStabilization) &&
        Objects.equals(this.partialResultsStability, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.partialResultsStability) &&
        Objects.equals(this.contentIdentificationType, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.contentIdentificationType) &&
        Objects.equals(this.contentRedactionType, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.contentRedactionType) &&
        Objects.equals(this.piiEntityTypes, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.piiEntityTypes) &&
        Objects.equals(this.languageModelName, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.languageModelName) &&
        Objects.equals(this.identifyLanguage, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.identifyLanguage) &&
        Objects.equals(this.languageOptions, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.languageOptions) &&
        Objects.equals(this.preferredLanguage, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.preferredLanguage) &&
        Objects.equals(this.vocabularyNames, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.vocabularyNames) &&
        Objects.equals(this.vocabularyFilterNames, startMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.vocabularyFilterNames);
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageCode, vocabularyFilterMethod, vocabularyFilterName, vocabularyName, region, enablePartialResultsStabilization, partialResultsStability, contentIdentificationType, contentRedactionType, piiEntityTypes, languageModelName, identifyLanguage, languageOptions, preferredLanguage, vocabularyNames, vocabularyFilterNames);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings {\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    vocabularyFilterMethod: ").append(toIndentedString(vocabularyFilterMethod)).append("\n");
    sb.append("    vocabularyFilterName: ").append(toIndentedString(vocabularyFilterName)).append("\n");
    sb.append("    vocabularyName: ").append(toIndentedString(vocabularyName)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    enablePartialResultsStabilization: ").append(toIndentedString(enablePartialResultsStabilization)).append("\n");
    sb.append("    partialResultsStability: ").append(toIndentedString(partialResultsStability)).append("\n");
    sb.append("    contentIdentificationType: ").append(toIndentedString(contentIdentificationType)).append("\n");
    sb.append("    contentRedactionType: ").append(toIndentedString(contentRedactionType)).append("\n");
    sb.append("    piiEntityTypes: ").append(toIndentedString(piiEntityTypes)).append("\n");
    sb.append("    languageModelName: ").append(toIndentedString(languageModelName)).append("\n");
    sb.append("    identifyLanguage: ").append(toIndentedString(identifyLanguage)).append("\n");
    sb.append("    languageOptions: ").append(toIndentedString(languageOptions)).append("\n");
    sb.append("    preferredLanguage: ").append(toIndentedString(preferredLanguage)).append("\n");
    sb.append("    vocabularyNames: ").append(toIndentedString(vocabularyNames)).append("\n");
    sb.append("    vocabularyFilterNames: ").append(toIndentedString(vocabularyFilterNames)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LanguageCode");
    openapiFields.add("VocabularyFilterMethod");
    openapiFields.add("VocabularyFilterName");
    openapiFields.add("VocabularyName");
    openapiFields.add("Region");
    openapiFields.add("EnablePartialResultsStabilization");
    openapiFields.add("PartialResultsStability");
    openapiFields.add("ContentIdentificationType");
    openapiFields.add("ContentRedactionType");
    openapiFields.add("PiiEntityTypes");
    openapiFields.add("LanguageModelName");
    openapiFields.add("IdentifyLanguage");
    openapiFields.add("LanguageOptions");
    openapiFields.add("PreferredLanguage");
    openapiFields.add("VocabularyNames");
    openapiFields.add("VocabularyFilterNames");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings is not found in the empty JSON string", StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LanguageCode`
      if (jsonObj.get("LanguageCode") != null && !jsonObj.get("LanguageCode").isJsonNull()) {
        TranscribeLanguageCode.validateJsonElement(jsonObj.get("LanguageCode"));
      }
      // validate the optional field `VocabularyFilterMethod`
      if (jsonObj.get("VocabularyFilterMethod") != null && !jsonObj.get("VocabularyFilterMethod").isJsonNull()) {
        TranscribeVocabularyFilterMethod.validateJsonElement(jsonObj.get("VocabularyFilterMethod"));
      }
      // validate the optional field `VocabularyFilterName`
      if (jsonObj.get("VocabularyFilterName") != null && !jsonObj.get("VocabularyFilterName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyFilterName"));
      }
      // validate the optional field `VocabularyName`
      if (jsonObj.get("VocabularyName") != null && !jsonObj.get("VocabularyName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyName"));
      }
      // validate the optional field `Region`
      if (jsonObj.get("Region") != null && !jsonObj.get("Region").isJsonNull()) {
        TranscribeRegion.validateJsonElement(jsonObj.get("Region"));
      }
      // validate the optional field `EnablePartialResultsStabilization`
      if (jsonObj.get("EnablePartialResultsStabilization") != null && !jsonObj.get("EnablePartialResultsStabilization").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnablePartialResultsStabilization"));
      }
      // validate the optional field `PartialResultsStability`
      if (jsonObj.get("PartialResultsStability") != null && !jsonObj.get("PartialResultsStability").isJsonNull()) {
        TranscribePartialResultsStability.validateJsonElement(jsonObj.get("PartialResultsStability"));
      }
      // validate the optional field `ContentIdentificationType`
      if (jsonObj.get("ContentIdentificationType") != null && !jsonObj.get("ContentIdentificationType").isJsonNull()) {
        TranscribeContentIdentificationType.validateJsonElement(jsonObj.get("ContentIdentificationType"));
      }
      // validate the optional field `ContentRedactionType`
      if (jsonObj.get("ContentRedactionType") != null && !jsonObj.get("ContentRedactionType").isJsonNull()) {
        TranscribeContentRedactionType.validateJsonElement(jsonObj.get("ContentRedactionType"));
      }
      // validate the optional field `PiiEntityTypes`
      if (jsonObj.get("PiiEntityTypes") != null && !jsonObj.get("PiiEntityTypes").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PiiEntityTypes"));
      }
      // validate the optional field `LanguageModelName`
      if (jsonObj.get("LanguageModelName") != null && !jsonObj.get("LanguageModelName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LanguageModelName"));
      }
      // validate the optional field `IdentifyLanguage`
      if (jsonObj.get("IdentifyLanguage") != null && !jsonObj.get("IdentifyLanguage").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IdentifyLanguage"));
      }
      // validate the optional field `LanguageOptions`
      if (jsonObj.get("LanguageOptions") != null && !jsonObj.get("LanguageOptions").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LanguageOptions"));
      }
      // validate the optional field `PreferredLanguage`
      if (jsonObj.get("PreferredLanguage") != null && !jsonObj.get("PreferredLanguage").isJsonNull()) {
        TranscribeLanguageCode.validateJsonElement(jsonObj.get("PreferredLanguage"));
      }
      // validate the optional field `VocabularyNames`
      if (jsonObj.get("VocabularyNames") != null && !jsonObj.get("VocabularyNames").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyNames"));
      }
      // validate the optional field `VocabularyFilterNames`
      if (jsonObj.get("VocabularyFilterNames") != null && !jsonObj.get("VocabularyFilterNames").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VocabularyFilterNames"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings>() {
           @Override
           public void write(JsonWriter out, StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings
   * @throws IOException if the JSON string is invalid with respect to StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings
   */
  public static StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings.class);
  }

  /**
   * Convert an instance of StartMeetingTranscriptionRequestTranscriptionConfigurationEngineTranscribeSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

