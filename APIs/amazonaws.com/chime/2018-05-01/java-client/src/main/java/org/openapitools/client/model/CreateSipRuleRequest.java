/*
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SipRuleTargetApplication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateSipRuleRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:03:22.248115-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateSipRuleRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type of trigger assigned to the SIP rule in &lt;code&gt;TriggerValue&lt;/code&gt;, currently &lt;code&gt;RequestUriHostname&lt;/code&gt; or &lt;code&gt;ToPhoneNumber&lt;/code&gt;.
   */
  @JsonAdapter(TriggerTypeEnum.Adapter.class)
  public enum TriggerTypeEnum {
    TO_PHONE_NUMBER("ToPhoneNumber"),
    
    REQUEST_URI_HOSTNAME("RequestUriHostname");

    private String value;

    TriggerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerTypeEnum fromValue(String value) {
      for (TriggerTypeEnum b : TriggerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER_TYPE = "TriggerType";
  @SerializedName(SERIALIZED_NAME_TRIGGER_TYPE)
  private TriggerTypeEnum triggerType;

  public static final String SERIALIZED_NAME_TRIGGER_VALUE = "TriggerValue";
  @SerializedName(SERIALIZED_NAME_TRIGGER_VALUE)
  private String triggerValue;

  public static final String SERIALIZED_NAME_DISABLED = "Disabled";
  @SerializedName(SERIALIZED_NAME_DISABLED)
  private Boolean disabled;

  public static final String SERIALIZED_NAME_TARGET_APPLICATIONS = "TargetApplications";
  @SerializedName(SERIALIZED_NAME_TARGET_APPLICATIONS)
  private List<SipRuleTargetApplication> targetApplications = new ArrayList<>();

  public CreateSipRuleRequest() {
  }

  public CreateSipRuleRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the SIP rule.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateSipRuleRequest triggerType(TriggerTypeEnum triggerType) {
    this.triggerType = triggerType;
    return this;
  }

  /**
   * The type of trigger assigned to the SIP rule in &lt;code&gt;TriggerValue&lt;/code&gt;, currently &lt;code&gt;RequestUriHostname&lt;/code&gt; or &lt;code&gt;ToPhoneNumber&lt;/code&gt;.
   * @return triggerType
   */
  @javax.annotation.Nonnull
  public TriggerTypeEnum getTriggerType() {
    return triggerType;
  }

  public void setTriggerType(TriggerTypeEnum triggerType) {
    this.triggerType = triggerType;
  }


  public CreateSipRuleRequest triggerValue(String triggerValue) {
    this.triggerValue = triggerValue;
    return this;
  }

  /**
   * If &lt;code&gt;TriggerType&lt;/code&gt; is &lt;code&gt;RequestUriHostname&lt;/code&gt;, the value can be the outbound host name of an Amazon Chime Voice Connector. If &lt;code&gt;TriggerType&lt;/code&gt; is &lt;code&gt;ToPhoneNumber&lt;/code&gt;, the value can be a customer-owned phone number in the E164 format. The &lt;code&gt;SipMediaApplication&lt;/code&gt; specified in the &lt;code&gt;SipRule&lt;/code&gt; is triggered if the request URI in an incoming SIP request matches the &lt;code&gt;RequestUriHostname&lt;/code&gt;, or if the &lt;code&gt;To&lt;/code&gt; header in the incoming SIP request matches the &lt;code&gt;ToPhoneNumber&lt;/code&gt; value.
   * @return triggerValue
   */
  @javax.annotation.Nonnull
  public String getTriggerValue() {
    return triggerValue;
  }

  public void setTriggerValue(String triggerValue) {
    this.triggerValue = triggerValue;
  }


  public CreateSipRuleRequest disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

  /**
   * Enables or disables a rule. You must disable rules before you can delete them.
   * @return disabled
   */
  @javax.annotation.Nullable
  public Boolean getDisabled() {
    return disabled;
  }

  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }


  public CreateSipRuleRequest targetApplications(List<SipRuleTargetApplication> targetApplications) {
    this.targetApplications = targetApplications;
    return this;
  }

  public CreateSipRuleRequest addTargetApplicationsItem(SipRuleTargetApplication targetApplicationsItem) {
    if (this.targetApplications == null) {
      this.targetApplications = new ArrayList<>();
    }
    this.targetApplications.add(targetApplicationsItem);
    return this;
  }

  /**
   * List of SIP media applications with priority and AWS Region. Only one SIP application per AWS Region can be used.
   * @return targetApplications
   */
  @javax.annotation.Nonnull
  public List<SipRuleTargetApplication> getTargetApplications() {
    return targetApplications;
  }

  public void setTargetApplications(List<SipRuleTargetApplication> targetApplications) {
    this.targetApplications = targetApplications;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSipRuleRequest createSipRuleRequest = (CreateSipRuleRequest) o;
    return Objects.equals(this.name, createSipRuleRequest.name) &&
        Objects.equals(this.triggerType, createSipRuleRequest.triggerType) &&
        Objects.equals(this.triggerValue, createSipRuleRequest.triggerValue) &&
        Objects.equals(this.disabled, createSipRuleRequest.disabled) &&
        Objects.equals(this.targetApplications, createSipRuleRequest.targetApplications);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, triggerType, triggerValue, disabled, targetApplications);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSipRuleRequest {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    triggerType: ").append(toIndentedString(triggerType)).append("\n");
    sb.append("    triggerValue: ").append(toIndentedString(triggerValue)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    targetApplications: ").append(toIndentedString(targetApplications)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("TriggerType");
    openapiFields.add("TriggerValue");
    openapiFields.add("Disabled");
    openapiFields.add("TargetApplications");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
    openapiRequiredFields.add("TriggerType");
    openapiRequiredFields.add("TriggerValue");
    openapiRequiredFields.add("TargetApplications");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateSipRuleRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateSipRuleRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSipRuleRequest is not found in the empty JSON string", CreateSipRuleRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateSipRuleRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSipRuleRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateSipRuleRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if (!jsonObj.get("TriggerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TriggerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TriggerType").toString()));
      }
      // validate the required field `TriggerType`
      TriggerTypeEnum.validateJsonElement(jsonObj.get("TriggerType"));
      if (!jsonObj.get("TriggerValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TriggerValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TriggerValue").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("TargetApplications").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TargetApplications` to be an array in the JSON string but got `%s`", jsonObj.get("TargetApplications").toString()));
      }

      JsonArray jsonArraytargetApplications = jsonObj.getAsJsonArray("TargetApplications");
      // validate the required field `TargetApplications` (array)
      for (int i = 0; i < jsonArraytargetApplications.size(); i++) {
        SipRuleTargetApplication.validateJsonElement(jsonArraytargetApplications.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSipRuleRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSipRuleRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSipRuleRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSipRuleRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSipRuleRequest>() {
           @Override
           public void write(JsonWriter out, CreateSipRuleRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSipRuleRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateSipRuleRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateSipRuleRequest
   * @throws IOException if the JSON string is invalid with respect to CreateSipRuleRequest
   */
  public static CreateSipRuleRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSipRuleRequest.class);
  }

  /**
   * Convert an instance of CreateSipRuleRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

