# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSipMediaApplicationCallRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments: Dict[str, str]=None):
        """UpdateSipMediaApplicationCallRequest - a model defined in OpenAPI

        :param arguments: The arguments of this UpdateSipMediaApplicationCallRequest.
        """
        self.openapi_types = {
            'arguments': Dict[str, str]
        }

        self.attribute_map = {
            'arguments': 'Arguments'
        }

        self._arguments = arguments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSipMediaApplicationCallRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSipMediaApplicationCall_request of this UpdateSipMediaApplicationCallRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self):
        """Gets the arguments of this UpdateSipMediaApplicationCallRequest.

        Arguments made available to the Lambda function as part of the <code>CALL_UPDATE_REQUESTED</code> event. Can contain 0-20 key-value pairs.

        :return: The arguments of this UpdateSipMediaApplicationCallRequest.
        :rtype: Dict[str, str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this UpdateSipMediaApplicationCallRequest.

        Arguments made available to the Lambda function as part of the <code>CALL_UPDATE_REQUESTED</code> event. Can contain 0-20 key-value pairs.

        :param arguments: The arguments of this UpdateSipMediaApplicationCallRequest.
        :type arguments: Dict[str, str]
        """
        if arguments is None:
            raise ValueError("Invalid value for `arguments`, must not be `None`")
        if arguments is not None and len(arguments) > 20:
            raise ValueError("Invalid value for `arguments`, number of items must be less than or equal to `20`")
        if arguments is not None and len(arguments) < 0:
            raise ValueError("Invalid value for `arguments`, number of items must be greater than or equal to `0`")

        self._arguments = arguments
