# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.membership_item import MembershipItem
from openapi_server import util


class BatchCreateRoomMembershipRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, membership_item_list: List[MembershipItem]=None):
        """BatchCreateRoomMembershipRequest - a model defined in OpenAPI

        :param membership_item_list: The membership_item_list of this BatchCreateRoomMembershipRequest.
        """
        self.openapi_types = {
            'membership_item_list': List[MembershipItem]
        }

        self.attribute_map = {
            'membership_item_list': 'MembershipItemList'
        }

        self._membership_item_list = membership_item_list

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateRoomMembershipRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateRoomMembership_request of this BatchCreateRoomMembershipRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def membership_item_list(self):
        """Gets the membership_item_list of this BatchCreateRoomMembershipRequest.

        The list of membership items.

        :return: The membership_item_list of this BatchCreateRoomMembershipRequest.
        :rtype: List[MembershipItem]
        """
        return self._membership_item_list

    @membership_item_list.setter
    def membership_item_list(self, membership_item_list):
        """Sets the membership_item_list of this BatchCreateRoomMembershipRequest.

        The list of membership items.

        :param membership_item_list: The membership_item_list of this BatchCreateRoomMembershipRequest.
        :type membership_item_list: List[MembershipItem]
        """
        if membership_item_list is None:
            raise ValueError("Invalid value for `membership_item_list`, must not be `None`")
        if membership_item_list is not None and len(membership_item_list) > 50:
            raise ValueError("Invalid value for `membership_item_list`, number of items must be less than or equal to `50`")

        self._membership_item_list = membership_item_list
