# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CandidateAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, street_info: str=None, street_number: str=None, city: str=None, state: str=None, postal_code: str=None, postal_code_plus4: str=None, country: str=None):
        """CandidateAddress - a model defined in OpenAPI

        :param street_info: The street_info of this CandidateAddress.
        :param street_number: The street_number of this CandidateAddress.
        :param city: The city of this CandidateAddress.
        :param state: The state of this CandidateAddress.
        :param postal_code: The postal_code of this CandidateAddress.
        :param postal_code_plus4: The postal_code_plus4 of this CandidateAddress.
        :param country: The country of this CandidateAddress.
        """
        self.openapi_types = {
            'street_info': str,
            'street_number': str,
            'city': str,
            'state': str,
            'postal_code': str,
            'postal_code_plus4': str,
            'country': str
        }

        self.attribute_map = {
            'street_info': 'streetInfo',
            'street_number': 'streetNumber',
            'city': 'city',
            'state': 'state',
            'postal_code': 'postalCode',
            'postal_code_plus4': 'postalCodePlus4',
            'country': 'country'
        }

        self._street_info = street_info
        self._street_number = street_number
        self._city = city
        self._state = state
        self._postal_code = postal_code
        self._postal_code_plus4 = postal_code_plus4
        self._country = country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CandidateAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CandidateAddress of this CandidateAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def street_info(self):
        """Gets the street_info of this CandidateAddress.


        :return: The street_info of this CandidateAddress.
        :rtype: str
        """
        return self._street_info

    @street_info.setter
    def street_info(self, street_info):
        """Sets the street_info of this CandidateAddress.


        :param street_info: The street_info of this CandidateAddress.
        :type street_info: str
        """

        self._street_info = street_info

    @property
    def street_number(self):
        """Gets the street_number of this CandidateAddress.


        :return: The street_number of this CandidateAddress.
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this CandidateAddress.


        :param street_number: The street_number of this CandidateAddress.
        :type street_number: str
        """

        self._street_number = street_number

    @property
    def city(self):
        """Gets the city of this CandidateAddress.


        :return: The city of this CandidateAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CandidateAddress.


        :param city: The city of this CandidateAddress.
        :type city: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this CandidateAddress.


        :return: The state of this CandidateAddress.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CandidateAddress.


        :param state: The state of this CandidateAddress.
        :type state: str
        """

        self._state = state

    @property
    def postal_code(self):
        """Gets the postal_code of this CandidateAddress.


        :return: The postal_code of this CandidateAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CandidateAddress.


        :param postal_code: The postal_code of this CandidateAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def postal_code_plus4(self):
        """Gets the postal_code_plus4 of this CandidateAddress.


        :return: The postal_code_plus4 of this CandidateAddress.
        :rtype: str
        """
        return self._postal_code_plus4

    @postal_code_plus4.setter
    def postal_code_plus4(self, postal_code_plus4):
        """Sets the postal_code_plus4 of this CandidateAddress.


        :param postal_code_plus4: The postal_code_plus4 of this CandidateAddress.
        :type postal_code_plus4: str
        """

        self._postal_code_plus4 = postal_code_plus4

    @property
    def country(self):
        """Gets the country of this CandidateAddress.


        :return: The country of this CandidateAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CandidateAddress.


        :param country: The country of this CandidateAddress.
        :type country: str
        """

        self._country = country
