# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateAppInstanceUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_instance_arn: str=None, app_instance_user_id: str=None, name: str=None, metadata: str=None, client_request_token: str=None, tags: List[Tag]=None):
        """CreateAppInstanceUserRequest - a model defined in OpenAPI

        :param app_instance_arn: The app_instance_arn of this CreateAppInstanceUserRequest.
        :param app_instance_user_id: The app_instance_user_id of this CreateAppInstanceUserRequest.
        :param name: The name of this CreateAppInstanceUserRequest.
        :param metadata: The metadata of this CreateAppInstanceUserRequest.
        :param client_request_token: The client_request_token of this CreateAppInstanceUserRequest.
        :param tags: The tags of this CreateAppInstanceUserRequest.
        """
        self.openapi_types = {
            'app_instance_arn': str,
            'app_instance_user_id': str,
            'name': str,
            'metadata': str,
            'client_request_token': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'app_instance_arn': 'AppInstanceArn',
            'app_instance_user_id': 'AppInstanceUserId',
            'name': 'Name',
            'metadata': 'Metadata',
            'client_request_token': 'ClientRequestToken',
            'tags': 'Tags'
        }

        self._app_instance_arn = app_instance_arn
        self._app_instance_user_id = app_instance_user_id
        self._name = name
        self._metadata = metadata
        self._client_request_token = client_request_token
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAppInstanceUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAppInstanceUser_request of this CreateAppInstanceUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_instance_arn(self):
        """Gets the app_instance_arn of this CreateAppInstanceUserRequest.

        The ARN of the <code>AppInstance</code> request.

        :return: The app_instance_arn of this CreateAppInstanceUserRequest.
        :rtype: str
        """
        return self._app_instance_arn

    @app_instance_arn.setter
    def app_instance_arn(self, app_instance_arn):
        """Sets the app_instance_arn of this CreateAppInstanceUserRequest.

        The ARN of the <code>AppInstance</code> request.

        :param app_instance_arn: The app_instance_arn of this CreateAppInstanceUserRequest.
        :type app_instance_arn: str
        """
        if app_instance_arn is None:
            raise ValueError("Invalid value for `app_instance_arn`, must not be `None`")
        if app_instance_arn is not None and len(app_instance_arn) > 1600:
            raise ValueError("Invalid value for `app_instance_arn`, length must be less than or equal to `1600`")
        if app_instance_arn is not None and len(app_instance_arn) < 5:
            raise ValueError("Invalid value for `app_instance_arn`, length must be greater than or equal to `5`")
        if app_instance_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', app_instance_arn):
            raise ValueError("Invalid value for `app_instance_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._app_instance_arn = app_instance_arn

    @property
    def app_instance_user_id(self):
        """Gets the app_instance_user_id of this CreateAppInstanceUserRequest.

        The user ID of the <code>AppInstance</code>.

        :return: The app_instance_user_id of this CreateAppInstanceUserRequest.
        :rtype: str
        """
        return self._app_instance_user_id

    @app_instance_user_id.setter
    def app_instance_user_id(self, app_instance_user_id):
        """Sets the app_instance_user_id of this CreateAppInstanceUserRequest.

        The user ID of the <code>AppInstance</code>.

        :param app_instance_user_id: The app_instance_user_id of this CreateAppInstanceUserRequest.
        :type app_instance_user_id: str
        """
        if app_instance_user_id is None:
            raise ValueError("Invalid value for `app_instance_user_id`, must not be `None`")
        if app_instance_user_id is not None and len(app_instance_user_id) > 64:
            raise ValueError("Invalid value for `app_instance_user_id`, length must be less than or equal to `64`")
        if app_instance_user_id is not None and len(app_instance_user_id) < 1:
            raise ValueError("Invalid value for `app_instance_user_id`, length must be greater than or equal to `1`")
        if app_instance_user_id is not None and not re.search(r'[A-Za-z0-9]([A-Za-z0-9\:\-\_\.\@]{0,62}[A-Za-z0-9])?', app_instance_user_id):
            raise ValueError("Invalid value for `app_instance_user_id`, must be a follow pattern or equal to `/[A-Za-z0-9]([A-Za-z0-9\:\-\_\.\@]{0,62}[A-Za-z0-9])?/`")

        self._app_instance_user_id = app_instance_user_id

    @property
    def name(self):
        """Gets the name of this CreateAppInstanceUserRequest.

        The user's name.

        :return: The name of this CreateAppInstanceUserRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAppInstanceUserRequest.

        The user's name.

        :param name: The name of this CreateAppInstanceUserRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'.*\S.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*\S.*/`")

        self._name = name

    @property
    def metadata(self):
        """Gets the metadata of this CreateAppInstanceUserRequest.

        The request's metadata. Limited to a 1KB string in UTF-8.

        :return: The metadata of this CreateAppInstanceUserRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateAppInstanceUserRequest.

        The request's metadata. Limited to a 1KB string in UTF-8.

        :param metadata: The metadata of this CreateAppInstanceUserRequest.
        :type metadata: str
        """
        if metadata is not None and len(metadata) > 1024:
            raise ValueError("Invalid value for `metadata`, length must be less than or equal to `1024`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, length must be greater than or equal to `0`")
        if metadata is not None and not re.search(r'.*', metadata):
            raise ValueError("Invalid value for `metadata`, must be a follow pattern or equal to `/.*/`")

        self._metadata = metadata

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateAppInstanceUserRequest.

        The token assigned to the user requesting an <code>AppInstance</code>.

        :return: The client_request_token of this CreateAppInstanceUserRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateAppInstanceUserRequest.

        The token assigned to the user requesting an <code>AppInstance</code>.

        :param client_request_token: The client_request_token of this CreateAppInstanceUserRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token

    @property
    def tags(self):
        """Gets the tags of this CreateAppInstanceUserRequest.

        Tags assigned to the <code>AppInstanceUser</code>.

        :return: The tags of this CreateAppInstanceUserRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAppInstanceUserRequest.

        Tags assigned to the <code>AppInstanceUser</code>.

        :param tags: The tags of this CreateAppInstanceUserRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
