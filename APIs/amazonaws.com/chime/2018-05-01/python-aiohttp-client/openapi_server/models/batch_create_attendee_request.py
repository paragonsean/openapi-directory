# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_attendee_request_item import CreateAttendeeRequestItem
from openapi_server import util


class BatchCreateAttendeeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attendees: List[CreateAttendeeRequestItem]=None):
        """BatchCreateAttendeeRequest - a model defined in OpenAPI

        :param attendees: The attendees of this BatchCreateAttendeeRequest.
        """
        self.openapi_types = {
            'attendees': List[CreateAttendeeRequestItem]
        }

        self.attribute_map = {
            'attendees': 'Attendees'
        }

        self._attendees = attendees

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateAttendeeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateAttendee_request of this BatchCreateAttendeeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attendees(self):
        """Gets the attendees of this BatchCreateAttendeeRequest.

        The request containing the attendees to create.

        :return: The attendees of this BatchCreateAttendeeRequest.
        :rtype: List[CreateAttendeeRequestItem]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this BatchCreateAttendeeRequest.

        The request containing the attendees to create.

        :param attendees: The attendees of this BatchCreateAttendeeRequest.
        :type attendees: List[CreateAttendeeRequestItem]
        """
        if attendees is None:
            raise ValueError("Invalid value for `attendees`, must not be `None`")

        self._attendees = attendees
