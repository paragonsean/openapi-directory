# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability import Capability
from openapi_server.models.create_proxy_session_request_geo_match_params import CreateProxySessionRequestGeoMatchParams
import re
from openapi_server import util


class CreateProxySessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, participant_phone_numbers: List[str]=None, name: str=None, expiry_minutes: int=None, capabilities: List[Capability]=None, number_selection_behavior: str=None, geo_match_level: str=None, geo_match_params: CreateProxySessionRequestGeoMatchParams=None):
        """CreateProxySessionRequest - a model defined in OpenAPI

        :param participant_phone_numbers: The participant_phone_numbers of this CreateProxySessionRequest.
        :param name: The name of this CreateProxySessionRequest.
        :param expiry_minutes: The expiry_minutes of this CreateProxySessionRequest.
        :param capabilities: The capabilities of this CreateProxySessionRequest.
        :param number_selection_behavior: The number_selection_behavior of this CreateProxySessionRequest.
        :param geo_match_level: The geo_match_level of this CreateProxySessionRequest.
        :param geo_match_params: The geo_match_params of this CreateProxySessionRequest.
        """
        self.openapi_types = {
            'participant_phone_numbers': List[str],
            'name': str,
            'expiry_minutes': int,
            'capabilities': List[Capability],
            'number_selection_behavior': str,
            'geo_match_level': str,
            'geo_match_params': CreateProxySessionRequestGeoMatchParams
        }

        self.attribute_map = {
            'participant_phone_numbers': 'ParticipantPhoneNumbers',
            'name': 'Name',
            'expiry_minutes': 'ExpiryMinutes',
            'capabilities': 'Capabilities',
            'number_selection_behavior': 'NumberSelectionBehavior',
            'geo_match_level': 'GeoMatchLevel',
            'geo_match_params': 'GeoMatchParams'
        }

        self._participant_phone_numbers = participant_phone_numbers
        self._name = name
        self._expiry_minutes = expiry_minutes
        self._capabilities = capabilities
        self._number_selection_behavior = number_selection_behavior
        self._geo_match_level = geo_match_level
        self._geo_match_params = geo_match_params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProxySessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProxySession_request of this CreateProxySessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def participant_phone_numbers(self):
        """Gets the participant_phone_numbers of this CreateProxySessionRequest.

        The participant phone numbers.

        :return: The participant_phone_numbers of this CreateProxySessionRequest.
        :rtype: List[str]
        """
        return self._participant_phone_numbers

    @participant_phone_numbers.setter
    def participant_phone_numbers(self, participant_phone_numbers):
        """Sets the participant_phone_numbers of this CreateProxySessionRequest.

        The participant phone numbers.

        :param participant_phone_numbers: The participant_phone_numbers of this CreateProxySessionRequest.
        :type participant_phone_numbers: List[str]
        """
        if participant_phone_numbers is None:
            raise ValueError("Invalid value for `participant_phone_numbers`, must not be `None`")
        if participant_phone_numbers is not None and len(participant_phone_numbers) > 2:
            raise ValueError("Invalid value for `participant_phone_numbers`, number of items must be less than or equal to `2`")
        if participant_phone_numbers is not None and len(participant_phone_numbers) < 2:
            raise ValueError("Invalid value for `participant_phone_numbers`, number of items must be greater than or equal to `2`")

        self._participant_phone_numbers = participant_phone_numbers

    @property
    def name(self):
        """Gets the name of this CreateProxySessionRequest.

        The name of the proxy session.

        :return: The name of this CreateProxySessionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateProxySessionRequest.

        The name of the proxy session.

        :param name: The name of this CreateProxySessionRequest.
        :type name: str
        """
        if name is not None and not re.search(r'^$|^[a-zA-Z0-9 ]{0,30}$', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/^$|^[a-zA-Z0-9 ]{0,30}$/`")

        self._name = name

    @property
    def expiry_minutes(self):
        """Gets the expiry_minutes of this CreateProxySessionRequest.

        The number of minutes allowed for the proxy session.

        :return: The expiry_minutes of this CreateProxySessionRequest.
        :rtype: int
        """
        return self._expiry_minutes

    @expiry_minutes.setter
    def expiry_minutes(self, expiry_minutes):
        """Sets the expiry_minutes of this CreateProxySessionRequest.

        The number of minutes allowed for the proxy session.

        :param expiry_minutes: The expiry_minutes of this CreateProxySessionRequest.
        :type expiry_minutes: int
        """
        if expiry_minutes is not None and expiry_minutes < 1:
            raise ValueError("Invalid value for `expiry_minutes`, must be a value greater than or equal to `1`")

        self._expiry_minutes = expiry_minutes

    @property
    def capabilities(self):
        """Gets the capabilities of this CreateProxySessionRequest.

        The proxy session capabilities.

        :return: The capabilities of this CreateProxySessionRequest.
        :rtype: List[Capability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this CreateProxySessionRequest.

        The proxy session capabilities.

        :param capabilities: The capabilities of this CreateProxySessionRequest.
        :type capabilities: List[Capability]
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")

        self._capabilities = capabilities

    @property
    def number_selection_behavior(self):
        """Gets the number_selection_behavior of this CreateProxySessionRequest.

        The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.

        :return: The number_selection_behavior of this CreateProxySessionRequest.
        :rtype: str
        """
        return self._number_selection_behavior

    @number_selection_behavior.setter
    def number_selection_behavior(self, number_selection_behavior):
        """Sets the number_selection_behavior of this CreateProxySessionRequest.

        The preference for proxy phone number reuse, or stickiness, between the same participants across sessions.

        :param number_selection_behavior: The number_selection_behavior of this CreateProxySessionRequest.
        :type number_selection_behavior: str
        """
        allowed_values = ["PreferSticky", "AvoidSticky"]  # noqa: E501
        if number_selection_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `number_selection_behavior` ({0}), must be one of {1}"
                .format(number_selection_behavior, allowed_values)
            )

        self._number_selection_behavior = number_selection_behavior

    @property
    def geo_match_level(self):
        """Gets the geo_match_level of this CreateProxySessionRequest.

        The preference for matching the country or area code of the proxy phone number with that of the first participant.

        :return: The geo_match_level of this CreateProxySessionRequest.
        :rtype: str
        """
        return self._geo_match_level

    @geo_match_level.setter
    def geo_match_level(self, geo_match_level):
        """Sets the geo_match_level of this CreateProxySessionRequest.

        The preference for matching the country or area code of the proxy phone number with that of the first participant.

        :param geo_match_level: The geo_match_level of this CreateProxySessionRequest.
        :type geo_match_level: str
        """
        allowed_values = ["Country", "AreaCode"]  # noqa: E501
        if geo_match_level not in allowed_values:
            raise ValueError(
                "Invalid value for `geo_match_level` ({0}), must be one of {1}"
                .format(geo_match_level, allowed_values)
            )

        self._geo_match_level = geo_match_level

    @property
    def geo_match_params(self):
        """Gets the geo_match_params of this CreateProxySessionRequest.


        :return: The geo_match_params of this CreateProxySessionRequest.
        :rtype: CreateProxySessionRequestGeoMatchParams
        """
        return self._geo_match_params

    @geo_match_params.setter
    def geo_match_params(self, geo_match_params):
        """Sets the geo_match_params of this CreateProxySessionRequest.


        :param geo_match_params: The geo_match_params of this CreateProxySessionRequest.
        :type geo_match_params: CreateProxySessionRequestGeoMatchParams
        """

        self._geo_match_params = geo_match_params
