# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transcribe_medical_content_identification_type import TranscribeMedicalContentIdentificationType
from openapi_server.models.transcribe_medical_language_code import TranscribeMedicalLanguageCode
from openapi_server.models.transcribe_medical_region import TranscribeMedicalRegion
from openapi_server.models.transcribe_medical_specialty import TranscribeMedicalSpecialty
from openapi_server.models.transcribe_medical_type import TranscribeMedicalType
from openapi_server import util


class EngineTranscribeMedicalSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language_code: TranscribeMedicalLanguageCode=None, specialty: TranscribeMedicalSpecialty=None, type: TranscribeMedicalType=None, vocabulary_name: str=None, region: TranscribeMedicalRegion=None, content_identification_type: TranscribeMedicalContentIdentificationType=None):
        """EngineTranscribeMedicalSettings - a model defined in OpenAPI

        :param language_code: The language_code of this EngineTranscribeMedicalSettings.
        :param specialty: The specialty of this EngineTranscribeMedicalSettings.
        :param type: The type of this EngineTranscribeMedicalSettings.
        :param vocabulary_name: The vocabulary_name of this EngineTranscribeMedicalSettings.
        :param region: The region of this EngineTranscribeMedicalSettings.
        :param content_identification_type: The content_identification_type of this EngineTranscribeMedicalSettings.
        """
        self.openapi_types = {
            'language_code': TranscribeMedicalLanguageCode,
            'specialty': TranscribeMedicalSpecialty,
            'type': TranscribeMedicalType,
            'vocabulary_name': str,
            'region': TranscribeMedicalRegion,
            'content_identification_type': TranscribeMedicalContentIdentificationType
        }

        self.attribute_map = {
            'language_code': 'LanguageCode',
            'specialty': 'Specialty',
            'type': 'Type',
            'vocabulary_name': 'VocabularyName',
            'region': 'Region',
            'content_identification_type': 'ContentIdentificationType'
        }

        self._language_code = language_code
        self._specialty = specialty
        self._type = type
        self._vocabulary_name = vocabulary_name
        self._region = region
        self._content_identification_type = content_identification_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EngineTranscribeMedicalSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EngineTranscribeMedicalSettings of this EngineTranscribeMedicalSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language_code(self):
        """Gets the language_code of this EngineTranscribeMedicalSettings.


        :return: The language_code of this EngineTranscribeMedicalSettings.
        :rtype: TranscribeMedicalLanguageCode
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this EngineTranscribeMedicalSettings.


        :param language_code: The language_code of this EngineTranscribeMedicalSettings.
        :type language_code: TranscribeMedicalLanguageCode
        """
        if language_code is None:
            raise ValueError("Invalid value for `language_code`, must not be `None`")

        self._language_code = language_code

    @property
    def specialty(self):
        """Gets the specialty of this EngineTranscribeMedicalSettings.


        :return: The specialty of this EngineTranscribeMedicalSettings.
        :rtype: TranscribeMedicalSpecialty
        """
        return self._specialty

    @specialty.setter
    def specialty(self, specialty):
        """Sets the specialty of this EngineTranscribeMedicalSettings.


        :param specialty: The specialty of this EngineTranscribeMedicalSettings.
        :type specialty: TranscribeMedicalSpecialty
        """
        if specialty is None:
            raise ValueError("Invalid value for `specialty`, must not be `None`")

        self._specialty = specialty

    @property
    def type(self):
        """Gets the type of this EngineTranscribeMedicalSettings.


        :return: The type of this EngineTranscribeMedicalSettings.
        :rtype: TranscribeMedicalType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EngineTranscribeMedicalSettings.


        :param type: The type of this EngineTranscribeMedicalSettings.
        :type type: TranscribeMedicalType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vocabulary_name(self):
        """Gets the vocabulary_name of this EngineTranscribeMedicalSettings.


        :return: The vocabulary_name of this EngineTranscribeMedicalSettings.
        :rtype: str
        """
        return self._vocabulary_name

    @vocabulary_name.setter
    def vocabulary_name(self, vocabulary_name):
        """Sets the vocabulary_name of this EngineTranscribeMedicalSettings.


        :param vocabulary_name: The vocabulary_name of this EngineTranscribeMedicalSettings.
        :type vocabulary_name: str
        """

        self._vocabulary_name = vocabulary_name

    @property
    def region(self):
        """Gets the region of this EngineTranscribeMedicalSettings.


        :return: The region of this EngineTranscribeMedicalSettings.
        :rtype: TranscribeMedicalRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this EngineTranscribeMedicalSettings.


        :param region: The region of this EngineTranscribeMedicalSettings.
        :type region: TranscribeMedicalRegion
        """

        self._region = region

    @property
    def content_identification_type(self):
        """Gets the content_identification_type of this EngineTranscribeMedicalSettings.


        :return: The content_identification_type of this EngineTranscribeMedicalSettings.
        :rtype: TranscribeMedicalContentIdentificationType
        """
        return self._content_identification_type

    @content_identification_type.setter
    def content_identification_type(self, content_identification_type):
        """Sets the content_identification_type of this EngineTranscribeMedicalSettings.


        :param content_identification_type: The content_identification_type of this EngineTranscribeMedicalSettings.
        :type content_identification_type: TranscribeMedicalContentIdentificationType
        """

        self._content_identification_type = content_identification_type
