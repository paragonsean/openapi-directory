# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, email: str=None, user_type: str=None):
        """CreateUserRequest - a model defined in OpenAPI

        :param username: The username of this CreateUserRequest.
        :param email: The email of this CreateUserRequest.
        :param user_type: The user_type of this CreateUserRequest.
        """
        self.openapi_types = {
            'username': str,
            'email': str,
            'user_type': str
        }

        self.attribute_map = {
            'username': 'Username',
            'email': 'Email',
            'user_type': 'UserType'
        }

        self._username = username
        self._email = email
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUser_request of this CreateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self):
        """Gets the username of this CreateUserRequest.

        The user name.

        :return: The username of this CreateUserRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateUserRequest.

        The user name.

        :param username: The username of this CreateUserRequest.
        :type username: str
        """

        self._username = username

    @property
    def email(self):
        """Gets the email of this CreateUserRequest.

        The user's email address.

        :return: The email of this CreateUserRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateUserRequest.

        The user's email address.

        :param email: The email of this CreateUserRequest.
        :type email: str
        """
        if email is not None and not re.search(r'.+@.+\..+', email):
            raise ValueError("Invalid value for `email`, must be a follow pattern or equal to `/.+@.+\..+/`")

        self._email = email

    @property
    def user_type(self):
        """Gets the user_type of this CreateUserRequest.

        The user type.

        :return: The user_type of this CreateUserRequest.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this CreateUserRequest.

        The user type.

        :param user_type: The user_type of this CreateUserRequest.
        :type user_type: str
        """
        allowed_values = ["PrivateUser", "SharedDevice"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"
                .format(user_type, allowed_values)
            )

        self._user_type = user_type
