# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InviteUsersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_email_list: List[str]=None, user_type: str=None):
        """InviteUsersRequest - a model defined in OpenAPI

        :param user_email_list: The user_email_list of this InviteUsersRequest.
        :param user_type: The user_type of this InviteUsersRequest.
        """
        self.openapi_types = {
            'user_email_list': List[str],
            'user_type': str
        }

        self.attribute_map = {
            'user_email_list': 'UserEmailList',
            'user_type': 'UserType'
        }

        self._user_email_list = user_email_list
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InviteUsersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InviteUsers_request of this InviteUsersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_email_list(self):
        """Gets the user_email_list of this InviteUsersRequest.

        The user email addresses to which to send the email invitation.

        :return: The user_email_list of this InviteUsersRequest.
        :rtype: List[str]
        """
        return self._user_email_list

    @user_email_list.setter
    def user_email_list(self, user_email_list):
        """Sets the user_email_list of this InviteUsersRequest.

        The user email addresses to which to send the email invitation.

        :param user_email_list: The user_email_list of this InviteUsersRequest.
        :type user_email_list: List[str]
        """
        if user_email_list is None:
            raise ValueError("Invalid value for `user_email_list`, must not be `None`")
        if user_email_list is not None and len(user_email_list) > 50:
            raise ValueError("Invalid value for `user_email_list`, number of items must be less than or equal to `50`")

        self._user_email_list = user_email_list

    @property
    def user_type(self):
        """Gets the user_type of this InviteUsersRequest.

        The user type.

        :return: The user_type of this InviteUsersRequest.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this InviteUsersRequest.

        The user type.

        :param user_type: The user_type of this InviteUsersRequest.
        :type user_type: str
        """
        allowed_values = ["PrivateUser", "SharedDevice"]  # noqa: E501
        if user_type not in allowed_values:
            raise ValueError(
                "Invalid value for `user_type` ({0}), must be one of {1}"
                .format(user_type, allowed_values)
            )

        self._user_type = user_type
