# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchCreateChannelMembershipRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, member_arns: List[str]=None):
        """BatchCreateChannelMembershipRequest - a model defined in OpenAPI

        :param type: The type of this BatchCreateChannelMembershipRequest.
        :param member_arns: The member_arns of this BatchCreateChannelMembershipRequest.
        """
        self.openapi_types = {
            'type': str,
            'member_arns': List[str]
        }

        self.attribute_map = {
            'type': 'Type',
            'member_arns': 'MemberArns'
        }

        self._type = type
        self._member_arns = member_arns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchCreateChannelMembershipRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchCreateChannelMembership_request of this BatchCreateChannelMembershipRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this BatchCreateChannelMembershipRequest.

        The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.

        :return: The type of this BatchCreateChannelMembershipRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BatchCreateChannelMembershipRequest.

        The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.

        :param type: The type of this BatchCreateChannelMembershipRequest.
        :type type: str
        """
        allowed_values = ["DEFAULT", "HIDDEN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def member_arns(self):
        """Gets the member_arns of this BatchCreateChannelMembershipRequest.

        The ARNs of the members you want to add to the channel.

        :return: The member_arns of this BatchCreateChannelMembershipRequest.
        :rtype: List[str]
        """
        return self._member_arns

    @member_arns.setter
    def member_arns(self, member_arns):
        """Sets the member_arns of this BatchCreateChannelMembershipRequest.

        The ARNs of the members you want to add to the channel.

        :param member_arns: The member_arns of this BatchCreateChannelMembershipRequest.
        :type member_arns: List[str]
        """
        if member_arns is None:
            raise ValueError("Invalid value for `member_arns`, must not be `None`")
        if member_arns is not None and len(member_arns) > 100:
            raise ValueError("Invalid value for `member_arns`, number of items must be less than or equal to `100`")
        if member_arns is not None and len(member_arns) < 1:
            raise ValueError("Invalid value for `member_arns`, number of items must be greater than or equal to `1`")

        self._member_arns = member_arns
