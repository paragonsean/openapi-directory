# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateAppInstanceAdminRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_instance_admin_arn: str=None):
        """CreateAppInstanceAdminRequest - a model defined in OpenAPI

        :param app_instance_admin_arn: The app_instance_admin_arn of this CreateAppInstanceAdminRequest.
        """
        self.openapi_types = {
            'app_instance_admin_arn': str
        }

        self.attribute_map = {
            'app_instance_admin_arn': 'AppInstanceAdminArn'
        }

        self._app_instance_admin_arn = app_instance_admin_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAppInstanceAdminRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAppInstanceAdmin_request of this CreateAppInstanceAdminRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_instance_admin_arn(self):
        """Gets the app_instance_admin_arn of this CreateAppInstanceAdminRequest.

        The ARN of the administrator of the current <code>AppInstance</code>.

        :return: The app_instance_admin_arn of this CreateAppInstanceAdminRequest.
        :rtype: str
        """
        return self._app_instance_admin_arn

    @app_instance_admin_arn.setter
    def app_instance_admin_arn(self, app_instance_admin_arn):
        """Sets the app_instance_admin_arn of this CreateAppInstanceAdminRequest.

        The ARN of the administrator of the current <code>AppInstance</code>.

        :param app_instance_admin_arn: The app_instance_admin_arn of this CreateAppInstanceAdminRequest.
        :type app_instance_admin_arn: str
        """
        if app_instance_admin_arn is None:
            raise ValueError("Invalid value for `app_instance_admin_arn`, must not be `None`")
        if app_instance_admin_arn is not None and len(app_instance_admin_arn) > 1600:
            raise ValueError("Invalid value for `app_instance_admin_arn`, length must be less than or equal to `1600`")
        if app_instance_admin_arn is not None and len(app_instance_admin_arn) < 5:
            raise ValueError("Invalid value for `app_instance_admin_arn`, length must be greater than or equal to `5`")
        if app_instance_admin_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', app_instance_admin_arn):
            raise ValueError("Invalid value for `app_instance_admin_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._app_instance_admin_arn = app_instance_admin_arn
