# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, default_license: str=None):
        """UpdateAccountRequest - a model defined in OpenAPI

        :param name: The name of this UpdateAccountRequest.
        :param default_license: The default_license of this UpdateAccountRequest.
        """
        self.openapi_types = {
            'name': str,
            'default_license': str
        }

        self.attribute_map = {
            'name': 'Name',
            'default_license': 'DefaultLicense'
        }

        self._name = name
        self._default_license = default_license

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccount_request of this UpdateAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateAccountRequest.

        The new name for the specified Amazon Chime account.

        :return: The name of this UpdateAccountRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAccountRequest.

        The new name for the specified Amazon Chime account.

        :param name: The name of this UpdateAccountRequest.
        :type name: str
        """
        if name is not None and len(name) > 100:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")
        if name is not None and not re.search(r'.*\S.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*\S.*/`")

        self._name = name

    @property
    def default_license(self):
        """Gets the default_license of this UpdateAccountRequest.

        The default license applied when you add users to an Amazon Chime account.

        :return: The default_license of this UpdateAccountRequest.
        :rtype: str
        """
        return self._default_license

    @default_license.setter
    def default_license(self, default_license):
        """Sets the default_license of this UpdateAccountRequest.

        The default license applied when you add users to an Amazon Chime account.

        :param default_license: The default_license of this UpdateAccountRequest.
        :type default_license: str
        """
        allowed_values = ["Basic", "Plus", "Pro", "ProTrial"]  # noqa: E501
        if default_license not in allowed_values:
            raise ValueError(
                "Invalid value for `default_license` ({0}), must be one of {1}"
                .format(default_license, allowed_values)
            )

        self._default_license = default_license
