# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sip_rule_target_application import SipRuleTargetApplication
import re
from openapi_server import util


class CreateSipRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, trigger_type: str=None, trigger_value: str=None, disabled: bool=None, target_applications: List[SipRuleTargetApplication]=None):
        """CreateSipRuleRequest - a model defined in OpenAPI

        :param name: The name of this CreateSipRuleRequest.
        :param trigger_type: The trigger_type of this CreateSipRuleRequest.
        :param trigger_value: The trigger_value of this CreateSipRuleRequest.
        :param disabled: The disabled of this CreateSipRuleRequest.
        :param target_applications: The target_applications of this CreateSipRuleRequest.
        """
        self.openapi_types = {
            'name': str,
            'trigger_type': str,
            'trigger_value': str,
            'disabled': bool,
            'target_applications': List[SipRuleTargetApplication]
        }

        self.attribute_map = {
            'name': 'Name',
            'trigger_type': 'TriggerType',
            'trigger_value': 'TriggerValue',
            'disabled': 'Disabled',
            'target_applications': 'TargetApplications'
        }

        self._name = name
        self._trigger_type = trigger_type
        self._trigger_value = trigger_value
        self._disabled = disabled
        self._target_applications = target_applications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSipRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSipRule_request of this CreateSipRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateSipRuleRequest.

        The name of the SIP rule.

        :return: The name of this CreateSipRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSipRuleRequest.

        The name of the SIP rule.

        :param name: The name of this CreateSipRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def trigger_type(self):
        """Gets the trigger_type of this CreateSipRuleRequest.

        The type of trigger assigned to the SIP rule in <code>TriggerValue</code>, currently <code>RequestUriHostname</code> or <code>ToPhoneNumber</code>.

        :return: The trigger_type of this CreateSipRuleRequest.
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this CreateSipRuleRequest.

        The type of trigger assigned to the SIP rule in <code>TriggerValue</code>, currently <code>RequestUriHostname</code> or <code>ToPhoneNumber</code>.

        :param trigger_type: The trigger_type of this CreateSipRuleRequest.
        :type trigger_type: str
        """
        allowed_values = ["ToPhoneNumber", "RequestUriHostname"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def trigger_value(self):
        """Gets the trigger_value of this CreateSipRuleRequest.

        If <code>TriggerType</code> is <code>RequestUriHostname</code>, the value can be the outbound host name of an Amazon Chime Voice Connector. If <code>TriggerType</code> is <code>ToPhoneNumber</code>, the value can be a customer-owned phone number in the E164 format. The <code>SipMediaApplication</code> specified in the <code>SipRule</code> is triggered if the request URI in an incoming SIP request matches the <code>RequestUriHostname</code>, or if the <code>To</code> header in the incoming SIP request matches the <code>ToPhoneNumber</code> value.

        :return: The trigger_value of this CreateSipRuleRequest.
        :rtype: str
        """
        return self._trigger_value

    @trigger_value.setter
    def trigger_value(self, trigger_value):
        """Sets the trigger_value of this CreateSipRuleRequest.

        If <code>TriggerType</code> is <code>RequestUriHostname</code>, the value can be the outbound host name of an Amazon Chime Voice Connector. If <code>TriggerType</code> is <code>ToPhoneNumber</code>, the value can be a customer-owned phone number in the E164 format. The <code>SipMediaApplication</code> specified in the <code>SipRule</code> is triggered if the request URI in an incoming SIP request matches the <code>RequestUriHostname</code>, or if the <code>To</code> header in the incoming SIP request matches the <code>ToPhoneNumber</code> value.

        :param trigger_value: The trigger_value of this CreateSipRuleRequest.
        :type trigger_value: str
        """
        if trigger_value is None:
            raise ValueError("Invalid value for `trigger_value`, must not be `None`")
        if trigger_value is not None and not re.search(r'.*\S.*', trigger_value):
            raise ValueError("Invalid value for `trigger_value`, must be a follow pattern or equal to `/.*\S.*/`")

        self._trigger_value = trigger_value

    @property
    def disabled(self):
        """Gets the disabled of this CreateSipRuleRequest.

        Enables or disables a rule. You must disable rules before you can delete them.

        :return: The disabled of this CreateSipRuleRequest.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this CreateSipRuleRequest.

        Enables or disables a rule. You must disable rules before you can delete them.

        :param disabled: The disabled of this CreateSipRuleRequest.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def target_applications(self):
        """Gets the target_applications of this CreateSipRuleRequest.

        List of SIP media applications with priority and AWS Region. Only one SIP application per AWS Region can be used.

        :return: The target_applications of this CreateSipRuleRequest.
        :rtype: List[SipRuleTargetApplication]
        """
        return self._target_applications

    @target_applications.setter
    def target_applications(self, target_applications):
        """Sets the target_applications of this CreateSipRuleRequest.

        List of SIP media applications with priority and AWS Region. Only one SIP application per AWS Region can be used.

        :param target_applications: The target_applications of this CreateSipRuleRequest.
        :type target_applications: List[SipRuleTargetApplication]
        """
        if target_applications is None:
            raise ValueError("Invalid value for `target_applications`, must not be `None`")
        if target_applications is not None and len(target_applications) > 25:
            raise ValueError("Invalid value for `target_applications`, number of items must be less than or equal to `25`")
        if target_applications is not None and len(target_applications) < 1:
            raise ValueError("Invalid value for `target_applications`, number of items must be greater than or equal to `1`")

        self._target_applications = target_applications
