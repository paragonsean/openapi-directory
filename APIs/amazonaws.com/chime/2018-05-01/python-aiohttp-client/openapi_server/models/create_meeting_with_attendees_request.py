# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_attendee_request_item import CreateAttendeeRequestItem
from openapi_server.models.create_meeting_request_notifications_configuration import CreateMeetingRequestNotificationsConfiguration
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class CreateMeetingWithAttendeesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_request_token: str=None, external_meeting_id: str=None, meeting_host_id: str=None, media_region: str=None, tags: List[Tag]=None, notifications_configuration: CreateMeetingRequestNotificationsConfiguration=None, attendees: List[CreateAttendeeRequestItem]=None):
        """CreateMeetingWithAttendeesRequest - a model defined in OpenAPI

        :param client_request_token: The client_request_token of this CreateMeetingWithAttendeesRequest.
        :param external_meeting_id: The external_meeting_id of this CreateMeetingWithAttendeesRequest.
        :param meeting_host_id: The meeting_host_id of this CreateMeetingWithAttendeesRequest.
        :param media_region: The media_region of this CreateMeetingWithAttendeesRequest.
        :param tags: The tags of this CreateMeetingWithAttendeesRequest.
        :param notifications_configuration: The notifications_configuration of this CreateMeetingWithAttendeesRequest.
        :param attendees: The attendees of this CreateMeetingWithAttendeesRequest.
        """
        self.openapi_types = {
            'client_request_token': str,
            'external_meeting_id': str,
            'meeting_host_id': str,
            'media_region': str,
            'tags': List[Tag],
            'notifications_configuration': CreateMeetingRequestNotificationsConfiguration,
            'attendees': List[CreateAttendeeRequestItem]
        }

        self.attribute_map = {
            'client_request_token': 'ClientRequestToken',
            'external_meeting_id': 'ExternalMeetingId',
            'meeting_host_id': 'MeetingHostId',
            'media_region': 'MediaRegion',
            'tags': 'Tags',
            'notifications_configuration': 'NotificationsConfiguration',
            'attendees': 'Attendees'
        }

        self._client_request_token = client_request_token
        self._external_meeting_id = external_meeting_id
        self._meeting_host_id = meeting_host_id
        self._media_region = media_region
        self._tags = tags
        self._notifications_configuration = notifications_configuration
        self._attendees = attendees

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMeetingWithAttendeesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMeetingWithAttendees_request of this CreateMeetingWithAttendeesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateMeetingWithAttendeesRequest.

        The unique identifier for the client request. Use a different token for different meetings.

        :return: The client_request_token of this CreateMeetingWithAttendeesRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateMeetingWithAttendeesRequest.

        The unique identifier for the client request. Use a different token for different meetings.

        :param client_request_token: The client_request_token of this CreateMeetingWithAttendeesRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token

    @property
    def external_meeting_id(self):
        """Gets the external_meeting_id of this CreateMeetingWithAttendeesRequest.

        The external meeting ID.

        :return: The external_meeting_id of this CreateMeetingWithAttendeesRequest.
        :rtype: str
        """
        return self._external_meeting_id

    @external_meeting_id.setter
    def external_meeting_id(self, external_meeting_id):
        """Sets the external_meeting_id of this CreateMeetingWithAttendeesRequest.

        The external meeting ID.

        :param external_meeting_id: The external_meeting_id of this CreateMeetingWithAttendeesRequest.
        :type external_meeting_id: str
        """
        if external_meeting_id is not None and len(external_meeting_id) > 64:
            raise ValueError("Invalid value for `external_meeting_id`, length must be less than or equal to `64`")
        if external_meeting_id is not None and len(external_meeting_id) < 2:
            raise ValueError("Invalid value for `external_meeting_id`, length must be greater than or equal to `2`")

        self._external_meeting_id = external_meeting_id

    @property
    def meeting_host_id(self):
        """Gets the meeting_host_id of this CreateMeetingWithAttendeesRequest.

        Reserved.

        :return: The meeting_host_id of this CreateMeetingWithAttendeesRequest.
        :rtype: str
        """
        return self._meeting_host_id

    @meeting_host_id.setter
    def meeting_host_id(self, meeting_host_id):
        """Sets the meeting_host_id of this CreateMeetingWithAttendeesRequest.

        Reserved.

        :param meeting_host_id: The meeting_host_id of this CreateMeetingWithAttendeesRequest.
        :type meeting_host_id: str
        """
        if meeting_host_id is not None and len(meeting_host_id) > 64:
            raise ValueError("Invalid value for `meeting_host_id`, length must be less than or equal to `64`")
        if meeting_host_id is not None and len(meeting_host_id) < 2:
            raise ValueError("Invalid value for `meeting_host_id`, length must be greater than or equal to `2`")

        self._meeting_host_id = meeting_host_id

    @property
    def media_region(self):
        """Gets the media_region of this CreateMeetingWithAttendeesRequest.

        <p> The Region in which to create the meeting. Default: <code>us-east-1</code> . </p> <p> Available values: <code>af-south-1</code> , <code>ap-northeast-1</code> , <code>ap-northeast-2</code> , <code>ap-south-1</code> , <code>ap-southeast-1</code> , <code>ap-southeast-2</code> , <code>ca-central-1</code> , <code>eu-central-1</code> , <code>eu-north-1</code> , <code>eu-south-1</code> , <code>eu-west-1</code> , <code>eu-west-2</code> , <code>eu-west-3</code> , <code>sa-east-1</code> , <code>us-east-1</code> , <code>us-east-2</code> , <code>us-west-1</code> , <code>us-west-2</code> . </p>

        :return: The media_region of this CreateMeetingWithAttendeesRequest.
        :rtype: str
        """
        return self._media_region

    @media_region.setter
    def media_region(self, media_region):
        """Sets the media_region of this CreateMeetingWithAttendeesRequest.

        <p> The Region in which to create the meeting. Default: <code>us-east-1</code> . </p> <p> Available values: <code>af-south-1</code> , <code>ap-northeast-1</code> , <code>ap-northeast-2</code> , <code>ap-south-1</code> , <code>ap-southeast-1</code> , <code>ap-southeast-2</code> , <code>ca-central-1</code> , <code>eu-central-1</code> , <code>eu-north-1</code> , <code>eu-south-1</code> , <code>eu-west-1</code> , <code>eu-west-2</code> , <code>eu-west-3</code> , <code>sa-east-1</code> , <code>us-east-1</code> , <code>us-east-2</code> , <code>us-west-1</code> , <code>us-west-2</code> . </p>

        :param media_region: The media_region of this CreateMeetingWithAttendeesRequest.
        :type media_region: str
        """

        self._media_region = media_region

    @property
    def tags(self):
        """Gets the tags of this CreateMeetingWithAttendeesRequest.

        The tag key-value pairs.

        :return: The tags of this CreateMeetingWithAttendeesRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateMeetingWithAttendeesRequest.

        The tag key-value pairs.

        :param tags: The tags of this CreateMeetingWithAttendeesRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags

    @property
    def notifications_configuration(self):
        """Gets the notifications_configuration of this CreateMeetingWithAttendeesRequest.


        :return: The notifications_configuration of this CreateMeetingWithAttendeesRequest.
        :rtype: CreateMeetingRequestNotificationsConfiguration
        """
        return self._notifications_configuration

    @notifications_configuration.setter
    def notifications_configuration(self, notifications_configuration):
        """Sets the notifications_configuration of this CreateMeetingWithAttendeesRequest.


        :param notifications_configuration: The notifications_configuration of this CreateMeetingWithAttendeesRequest.
        :type notifications_configuration: CreateMeetingRequestNotificationsConfiguration
        """

        self._notifications_configuration = notifications_configuration

    @property
    def attendees(self):
        """Gets the attendees of this CreateMeetingWithAttendeesRequest.

        The request containing the attendees to create.

        :return: The attendees of this CreateMeetingWithAttendeesRequest.
        :rtype: List[CreateAttendeeRequestItem]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this CreateMeetingWithAttendeesRequest.

        The request containing the attendees to create.

        :param attendees: The attendees of this CreateMeetingWithAttendeesRequest.
        :type attendees: List[CreateAttendeeRequestItem]
        """
        if attendees is not None and len(attendees) > 10:
            raise ValueError("Invalid value for `attendees`, number of items must be less than or equal to `10`")
        if attendees is not None and len(attendees) < 1:
            raise ValueError("Invalid value for `attendees`, number of items must be greater than or equal to `1`")

        self._attendees = attendees
