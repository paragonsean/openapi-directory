# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateProxySessionRequestGeoMatchParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, area_code: str=None):
        """CreateProxySessionRequestGeoMatchParams - a model defined in OpenAPI

        :param country: The country of this CreateProxySessionRequestGeoMatchParams.
        :param area_code: The area_code of this CreateProxySessionRequestGeoMatchParams.
        """
        self.openapi_types = {
            'country': str,
            'area_code': str
        }

        self.attribute_map = {
            'country': 'Country',
            'area_code': 'AreaCode'
        }

        self._country = country
        self._area_code = area_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateProxySessionRequestGeoMatchParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateProxySessionRequest_GeoMatchParams of this CreateProxySessionRequestGeoMatchParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this CreateProxySessionRequestGeoMatchParams.


        :return: The country of this CreateProxySessionRequestGeoMatchParams.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CreateProxySessionRequestGeoMatchParams.


        :param country: The country of this CreateProxySessionRequestGeoMatchParams.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def area_code(self):
        """Gets the area_code of this CreateProxySessionRequestGeoMatchParams.


        :return: The area_code of this CreateProxySessionRequestGeoMatchParams.
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this CreateProxySessionRequestGeoMatchParams.


        :param area_code: The area_code of this CreateProxySessionRequestGeoMatchParams.
        :type area_code: str
        """
        if area_code is None:
            raise ValueError("Invalid value for `area_code`, must not be `None`")

        self._area_code = area_code
