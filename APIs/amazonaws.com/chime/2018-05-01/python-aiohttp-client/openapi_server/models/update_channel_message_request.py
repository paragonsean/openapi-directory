# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateChannelMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, metadata: str=None):
        """UpdateChannelMessageRequest - a model defined in OpenAPI

        :param content: The content of this UpdateChannelMessageRequest.
        :param metadata: The metadata of this UpdateChannelMessageRequest.
        """
        self.openapi_types = {
            'content': str,
            'metadata': str
        }

        self.attribute_map = {
            'content': 'Content',
            'metadata': 'Metadata'
        }

        self._content = content
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateChannelMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateChannelMessage_request of this UpdateChannelMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this UpdateChannelMessageRequest.

        The content of the message being updated.

        :return: The content of this UpdateChannelMessageRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this UpdateChannelMessageRequest.

        The content of the message being updated.

        :param content: The content of this UpdateChannelMessageRequest.
        :type content: str
        """
        if content is not None and len(content) > 4096:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `4096`")
        if content is not None and len(content) < 0:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `0`")
        if content is not None and not re.search(r'[\s\S]*', content):
            raise ValueError("Invalid value for `content`, must be a follow pattern or equal to `/[\s\S]*/`")

        self._content = content

    @property
    def metadata(self):
        """Gets the metadata of this UpdateChannelMessageRequest.

        The metadata of the message being updated.

        :return: The metadata of this UpdateChannelMessageRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateChannelMessageRequest.

        The metadata of the message being updated.

        :param metadata: The metadata of this UpdateChannelMessageRequest.
        :type metadata: str
        """
        if metadata is not None and len(metadata) > 1024:
            raise ValueError("Invalid value for `metadata`, length must be less than or equal to `1024`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, length must be greater than or equal to `0`")
        if metadata is not None and not re.search(r'.*', metadata):
            raise ValueError("Invalid value for `metadata`, must be a follow pattern or equal to `/.*/`")

        self._metadata = metadata
