# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
from openapi_server import util


class CreateAttendeeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, external_user_id: str=None, tags: List[Tag]=None):
        """CreateAttendeeRequest - a model defined in OpenAPI

        :param external_user_id: The external_user_id of this CreateAttendeeRequest.
        :param tags: The tags of this CreateAttendeeRequest.
        """
        self.openapi_types = {
            'external_user_id': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'external_user_id': 'ExternalUserId',
            'tags': 'Tags'
        }

        self._external_user_id = external_user_id
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAttendeeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAttendee_request of this CreateAttendeeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def external_user_id(self):
        """Gets the external_user_id of this CreateAttendeeRequest.

        The Amazon Chime SDK external user ID. An idempotency token. Links the attendee to an identity managed by a builder application.

        :return: The external_user_id of this CreateAttendeeRequest.
        :rtype: str
        """
        return self._external_user_id

    @external_user_id.setter
    def external_user_id(self, external_user_id):
        """Sets the external_user_id of this CreateAttendeeRequest.

        The Amazon Chime SDK external user ID. An idempotency token. Links the attendee to an identity managed by a builder application.

        :param external_user_id: The external_user_id of this CreateAttendeeRequest.
        :type external_user_id: str
        """
        if external_user_id is None:
            raise ValueError("Invalid value for `external_user_id`, must not be `None`")
        if external_user_id is not None and len(external_user_id) > 64:
            raise ValueError("Invalid value for `external_user_id`, length must be less than or equal to `64`")
        if external_user_id is not None and len(external_user_id) < 2:
            raise ValueError("Invalid value for `external_user_id`, length must be greater than or equal to `2`")

        self._external_user_id = external_user_id

    @property
    def tags(self):
        """Gets the tags of this CreateAttendeeRequest.

        The tag key-value pairs.

        :return: The tags of this CreateAttendeeRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateAttendeeRequest.

        The tag key-value pairs.

        :param tags: The tags of this CreateAttendeeRequest.
        :type tags: List[Tag]
        """
        if tags is not None and len(tags) > 10:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `10`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
