# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.voice_connector_item import VoiceConnectorItem
from openapi_server import util


class CreateVoiceConnectorGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, voice_connector_items: List[VoiceConnectorItem]=None):
        """CreateVoiceConnectorGroupRequest - a model defined in OpenAPI

        :param name: The name of this CreateVoiceConnectorGroupRequest.
        :param voice_connector_items: The voice_connector_items of this CreateVoiceConnectorGroupRequest.
        """
        self.openapi_types = {
            'name': str,
            'voice_connector_items': List[VoiceConnectorItem]
        }

        self.attribute_map = {
            'name': 'Name',
            'voice_connector_items': 'VoiceConnectorItems'
        }

        self._name = name
        self._voice_connector_items = voice_connector_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateVoiceConnectorGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateVoiceConnectorGroup_request of this CreateVoiceConnectorGroupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CreateVoiceConnectorGroupRequest.

        The name of the Amazon Chime Voice Connector group.

        :return: The name of this CreateVoiceConnectorGroupRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateVoiceConnectorGroupRequest.

        The name of the Amazon Chime Voice Connector group.

        :param name: The name of this CreateVoiceConnectorGroupRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def voice_connector_items(self):
        """Gets the voice_connector_items of this CreateVoiceConnectorGroupRequest.

        The Amazon Chime Voice Connectors to route inbound calls to.

        :return: The voice_connector_items of this CreateVoiceConnectorGroupRequest.
        :rtype: List[VoiceConnectorItem]
        """
        return self._voice_connector_items

    @voice_connector_items.setter
    def voice_connector_items(self, voice_connector_items):
        """Sets the voice_connector_items of this CreateVoiceConnectorGroupRequest.

        The Amazon Chime Voice Connectors to route inbound calls to.

        :param voice_connector_items: The voice_connector_items of this CreateVoiceConnectorGroupRequest.
        :type voice_connector_items: List[VoiceConnectorItem]
        """

        self._voice_connector_items = voice_connector_items
