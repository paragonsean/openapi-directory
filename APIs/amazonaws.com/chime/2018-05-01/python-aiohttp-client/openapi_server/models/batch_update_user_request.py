# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_user_request_item import UpdateUserRequestItem
from openapi_server import util


class BatchUpdateUserRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, update_user_request_items: List[UpdateUserRequestItem]=None):
        """BatchUpdateUserRequest - a model defined in OpenAPI

        :param update_user_request_items: The update_user_request_items of this BatchUpdateUserRequest.
        """
        self.openapi_types = {
            'update_user_request_items': List[UpdateUserRequestItem]
        }

        self.attribute_map = {
            'update_user_request_items': 'UpdateUserRequestItems'
        }

        self._update_user_request_items = update_user_request_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchUpdateUserRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchUpdateUser_request of this BatchUpdateUserRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def update_user_request_items(self):
        """Gets the update_user_request_items of this BatchUpdateUserRequest.

        The request containing the user IDs and details to update.

        :return: The update_user_request_items of this BatchUpdateUserRequest.
        :rtype: List[UpdateUserRequestItem]
        """
        return self._update_user_request_items

    @update_user_request_items.setter
    def update_user_request_items(self, update_user_request_items):
        """Sets the update_user_request_items of this BatchUpdateUserRequest.

        The request containing the user IDs and details to update.

        :param update_user_request_items: The update_user_request_items of this BatchUpdateUserRequest.
        :type update_user_request_items: List[UpdateUserRequestItem]
        """
        if update_user_request_items is None:
            raise ValueError("Invalid value for `update_user_request_items`, must not be `None`")
        if update_user_request_items is not None and len(update_user_request_items) > 20:
            raise ValueError("Invalid value for `update_user_request_items`, number of items must be less than or equal to `20`")

        self._update_user_request_items = update_user_request_items
