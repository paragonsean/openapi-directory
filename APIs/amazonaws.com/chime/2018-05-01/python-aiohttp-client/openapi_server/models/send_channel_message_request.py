# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SendChannelMessageRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, type: str=None, persistence: str=None, metadata: str=None, client_request_token: str=None):
        """SendChannelMessageRequest - a model defined in OpenAPI

        :param content: The content of this SendChannelMessageRequest.
        :param type: The type of this SendChannelMessageRequest.
        :param persistence: The persistence of this SendChannelMessageRequest.
        :param metadata: The metadata of this SendChannelMessageRequest.
        :param client_request_token: The client_request_token of this SendChannelMessageRequest.
        """
        self.openapi_types = {
            'content': str,
            'type': str,
            'persistence': str,
            'metadata': str,
            'client_request_token': str
        }

        self.attribute_map = {
            'content': 'Content',
            'type': 'Type',
            'persistence': 'Persistence',
            'metadata': 'Metadata',
            'client_request_token': 'ClientRequestToken'
        }

        self._content = content
        self._type = type
        self._persistence = persistence
        self._metadata = metadata
        self._client_request_token = client_request_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SendChannelMessageRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SendChannelMessage_request of this SendChannelMessageRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this SendChannelMessageRequest.

        The content of the message.

        :return: The content of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this SendChannelMessageRequest.

        The content of the message.

        :param content: The content of this SendChannelMessageRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")
        if content is not None and not re.search(r'[\s\S]*', content):
            raise ValueError("Invalid value for `content`, must be a follow pattern or equal to `/[\s\S]*/`")

        self._content = content

    @property
    def type(self):
        """Gets the type of this SendChannelMessageRequest.

        The type of message, <code>STANDARD</code> or <code>CONTROL</code>.

        :return: The type of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SendChannelMessageRequest.

        The type of message, <code>STANDARD</code> or <code>CONTROL</code>.

        :param type: The type of this SendChannelMessageRequest.
        :type type: str
        """
        allowed_values = ["STANDARD", "CONTROL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def persistence(self):
        """Gets the persistence of this SendChannelMessageRequest.

        Boolean that controls whether the message is persisted on the back end. Required.

        :return: The persistence of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._persistence

    @persistence.setter
    def persistence(self, persistence):
        """Sets the persistence of this SendChannelMessageRequest.

        Boolean that controls whether the message is persisted on the back end. Required.

        :param persistence: The persistence of this SendChannelMessageRequest.
        :type persistence: str
        """
        allowed_values = ["PERSISTENT", "NON_PERSISTENT"]  # noqa: E501
        if persistence not in allowed_values:
            raise ValueError(
                "Invalid value for `persistence` ({0}), must be one of {1}"
                .format(persistence, allowed_values)
            )

        self._persistence = persistence

    @property
    def metadata(self):
        """Gets the metadata of this SendChannelMessageRequest.

        The optional metadata for each message.

        :return: The metadata of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SendChannelMessageRequest.

        The optional metadata for each message.

        :param metadata: The metadata of this SendChannelMessageRequest.
        :type metadata: str
        """
        if metadata is not None and len(metadata) > 1024:
            raise ValueError("Invalid value for `metadata`, length must be less than or equal to `1024`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, length must be greater than or equal to `0`")
        if metadata is not None and not re.search(r'.*', metadata):
            raise ValueError("Invalid value for `metadata`, must be a follow pattern or equal to `/.*/`")

        self._metadata = metadata

    @property
    def client_request_token(self):
        """Gets the client_request_token of this SendChannelMessageRequest.

        The <code>Idempotency</code> token for each client request.

        :return: The client_request_token of this SendChannelMessageRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this SendChannelMessageRequest.

        The <code>Idempotency</code> token for each client request.

        :param client_request_token: The client_request_token of this SendChannelMessageRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token
