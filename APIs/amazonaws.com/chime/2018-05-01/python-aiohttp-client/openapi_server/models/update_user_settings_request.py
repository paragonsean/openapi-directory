# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_user_settings_request_user_settings import UpdateUserSettingsRequestUserSettings
from openapi_server import util


class UpdateUserSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_settings: UpdateUserSettingsRequestUserSettings=None):
        """UpdateUserSettingsRequest - a model defined in OpenAPI

        :param user_settings: The user_settings of this UpdateUserSettingsRequest.
        """
        self.openapi_types = {
            'user_settings': UpdateUserSettingsRequestUserSettings
        }

        self.attribute_map = {
            'user_settings': 'UserSettings'
        }

        self._user_settings = user_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateUserSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateUserSettings_request of this UpdateUserSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_settings(self):
        """Gets the user_settings of this UpdateUserSettingsRequest.


        :return: The user_settings of this UpdateUserSettingsRequest.
        :rtype: UpdateUserSettingsRequestUserSettings
        """
        return self._user_settings

    @user_settings.setter
    def user_settings(self, user_settings):
        """Sets the user_settings of this UpdateUserSettingsRequest.


        :param user_settings: The user_settings of this UpdateUserSettingsRequest.
        :type user_settings: UpdateUserSettingsRequestUserSettings
        """
        if user_settings is None:
            raise ValueError("Invalid value for `user_settings`, must not be `None`")

        self._user_settings = user_settings
