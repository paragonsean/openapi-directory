# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.capability import Capability
from openapi_server import util


class UpdateProxySessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capabilities: List[Capability]=None, expiry_minutes: int=None):
        """UpdateProxySessionRequest - a model defined in OpenAPI

        :param capabilities: The capabilities of this UpdateProxySessionRequest.
        :param expiry_minutes: The expiry_minutes of this UpdateProxySessionRequest.
        """
        self.openapi_types = {
            'capabilities': List[Capability],
            'expiry_minutes': int
        }

        self.attribute_map = {
            'capabilities': 'Capabilities',
            'expiry_minutes': 'ExpiryMinutes'
        }

        self._capabilities = capabilities
        self._expiry_minutes = expiry_minutes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateProxySessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateProxySession_request of this UpdateProxySessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capabilities(self):
        """Gets the capabilities of this UpdateProxySessionRequest.

        The proxy session capabilities.

        :return: The capabilities of this UpdateProxySessionRequest.
        :rtype: List[Capability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this UpdateProxySessionRequest.

        The proxy session capabilities.

        :param capabilities: The capabilities of this UpdateProxySessionRequest.
        :type capabilities: List[Capability]
        """
        if capabilities is None:
            raise ValueError("Invalid value for `capabilities`, must not be `None`")

        self._capabilities = capabilities

    @property
    def expiry_minutes(self):
        """Gets the expiry_minutes of this UpdateProxySessionRequest.

        The number of minutes allowed for the proxy session.

        :return: The expiry_minutes of this UpdateProxySessionRequest.
        :rtype: int
        """
        return self._expiry_minutes

    @expiry_minutes.setter
    def expiry_minutes(self, expiry_minutes):
        """Sets the expiry_minutes of this UpdateProxySessionRequest.

        The number of minutes allowed for the proxy session.

        :param expiry_minutes: The expiry_minutes of this UpdateProxySessionRequest.
        :type expiry_minutes: int
        """
        if expiry_minutes is not None and expiry_minutes < 1:
            raise ValueError("Invalid value for `expiry_minutes`, must be a value greater than or equal to `1`")

        self._expiry_minutes = expiry_minutes
