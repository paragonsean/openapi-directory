# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateSipMediaApplicationCallRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, from_phone_number: str=None, to_phone_number: str=None, sip_headers: Dict[str, str]=None):
        """CreateSipMediaApplicationCallRequest - a model defined in OpenAPI

        :param from_phone_number: The from_phone_number of this CreateSipMediaApplicationCallRequest.
        :param to_phone_number: The to_phone_number of this CreateSipMediaApplicationCallRequest.
        :param sip_headers: The sip_headers of this CreateSipMediaApplicationCallRequest.
        """
        self.openapi_types = {
            'from_phone_number': str,
            'to_phone_number': str,
            'sip_headers': Dict[str, str]
        }

        self.attribute_map = {
            'from_phone_number': 'FromPhoneNumber',
            'to_phone_number': 'ToPhoneNumber',
            'sip_headers': 'SipHeaders'
        }

        self._from_phone_number = from_phone_number
        self._to_phone_number = to_phone_number
        self._sip_headers = sip_headers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSipMediaApplicationCallRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSipMediaApplicationCall_request of this CreateSipMediaApplicationCallRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def from_phone_number(self):
        """Gets the from_phone_number of this CreateSipMediaApplicationCallRequest.

        The phone number that a user calls from. This is a phone number in your Amazon Chime phone number inventory.

        :return: The from_phone_number of this CreateSipMediaApplicationCallRequest.
        :rtype: str
        """
        return self._from_phone_number

    @from_phone_number.setter
    def from_phone_number(self, from_phone_number):
        """Sets the from_phone_number of this CreateSipMediaApplicationCallRequest.

        The phone number that a user calls from. This is a phone number in your Amazon Chime phone number inventory.

        :param from_phone_number: The from_phone_number of this CreateSipMediaApplicationCallRequest.
        :type from_phone_number: str
        """
        if from_phone_number is None:
            raise ValueError("Invalid value for `from_phone_number`, must not be `None`")
        if from_phone_number is not None and not re.search(r'^\+?[1-9]\d{1,14}$', from_phone_number):
            raise ValueError("Invalid value for `from_phone_number`, must be a follow pattern or equal to `/^\+?[1-9]\d{1,14}$/`")

        self._from_phone_number = from_phone_number

    @property
    def to_phone_number(self):
        """Gets the to_phone_number of this CreateSipMediaApplicationCallRequest.

        The phone number that the service should call.

        :return: The to_phone_number of this CreateSipMediaApplicationCallRequest.
        :rtype: str
        """
        return self._to_phone_number

    @to_phone_number.setter
    def to_phone_number(self, to_phone_number):
        """Sets the to_phone_number of this CreateSipMediaApplicationCallRequest.

        The phone number that the service should call.

        :param to_phone_number: The to_phone_number of this CreateSipMediaApplicationCallRequest.
        :type to_phone_number: str
        """
        if to_phone_number is None:
            raise ValueError("Invalid value for `to_phone_number`, must not be `None`")
        if to_phone_number is not None and not re.search(r'^\+?[1-9]\d{1,14}$', to_phone_number):
            raise ValueError("Invalid value for `to_phone_number`, must be a follow pattern or equal to `/^\+?[1-9]\d{1,14}$/`")

        self._to_phone_number = to_phone_number

    @property
    def sip_headers(self):
        """Gets the sip_headers of this CreateSipMediaApplicationCallRequest.

        The SIP headers added to an outbound call leg.

        :return: The sip_headers of this CreateSipMediaApplicationCallRequest.
        :rtype: Dict[str, str]
        """
        return self._sip_headers

    @sip_headers.setter
    def sip_headers(self, sip_headers):
        """Sets the sip_headers of this CreateSipMediaApplicationCallRequest.

        The SIP headers added to an outbound call leg.

        :param sip_headers: The sip_headers of this CreateSipMediaApplicationCallRequest.
        :type sip_headers: Dict[str, str]
        """
        if sip_headers is not None and len(sip_headers) > 20:
            raise ValueError("Invalid value for `sip_headers`, number of items must be less than or equal to `20`")
        if sip_headers is not None and len(sip_headers) < 0:
            raise ValueError("Invalid value for `sip_headers`, number of items must be greater than or equal to `0`")

        self._sip_headers = sip_headers
