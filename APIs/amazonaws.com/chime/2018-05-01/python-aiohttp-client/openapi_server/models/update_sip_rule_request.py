# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sip_rule_target_application import SipRuleTargetApplication
from openapi_server import util


class UpdateSipRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, disabled: bool=None, target_applications: List[SipRuleTargetApplication]=None):
        """UpdateSipRuleRequest - a model defined in OpenAPI

        :param name: The name of this UpdateSipRuleRequest.
        :param disabled: The disabled of this UpdateSipRuleRequest.
        :param target_applications: The target_applications of this UpdateSipRuleRequest.
        """
        self.openapi_types = {
            'name': str,
            'disabled': bool,
            'target_applications': List[SipRuleTargetApplication]
        }

        self.attribute_map = {
            'name': 'Name',
            'disabled': 'Disabled',
            'target_applications': 'TargetApplications'
        }

        self._name = name
        self._disabled = disabled
        self._target_applications = target_applications

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSipRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSipRule_request of this UpdateSipRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateSipRuleRequest.

        The new name for the specified SIP rule.

        :return: The name of this UpdateSipRuleRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSipRuleRequest.

        The new name for the specified SIP rule.

        :param name: The name of this UpdateSipRuleRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def disabled(self):
        """Gets the disabled of this UpdateSipRuleRequest.

        The new value specified to indicate whether the rule is disabled.

        :return: The disabled of this UpdateSipRuleRequest.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this UpdateSipRuleRequest.

        The new value specified to indicate whether the rule is disabled.

        :param disabled: The disabled of this UpdateSipRuleRequest.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def target_applications(self):
        """Gets the target_applications of this UpdateSipRuleRequest.

        The new value of the list of target applications.

        :return: The target_applications of this UpdateSipRuleRequest.
        :rtype: List[SipRuleTargetApplication]
        """
        return self._target_applications

    @target_applications.setter
    def target_applications(self, target_applications):
        """Sets the target_applications of this UpdateSipRuleRequest.

        The new value of the list of target applications.

        :param target_applications: The target_applications of this UpdateSipRuleRequest.
        :type target_applications: List[SipRuleTargetApplication]
        """
        if target_applications is not None and len(target_applications) > 25:
            raise ValueError("Invalid value for `target_applications`, number of items must be less than or equal to `25`")
        if target_applications is not None and len(target_applications) < 1:
            raise ValueError("Invalid value for `target_applications`, number of items must be greater than or equal to `1`")

        self._target_applications = target_applications
