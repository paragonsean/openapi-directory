# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sip_media_application_endpoint import SipMediaApplicationEndpoint
from openapi_server import util


class CreateSipMediaApplicationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aws_region: str=None, name: str=None, endpoints: List[SipMediaApplicationEndpoint]=None):
        """CreateSipMediaApplicationRequest - a model defined in OpenAPI

        :param aws_region: The aws_region of this CreateSipMediaApplicationRequest.
        :param name: The name of this CreateSipMediaApplicationRequest.
        :param endpoints: The endpoints of this CreateSipMediaApplicationRequest.
        """
        self.openapi_types = {
            'aws_region': str,
            'name': str,
            'endpoints': List[SipMediaApplicationEndpoint]
        }

        self.attribute_map = {
            'aws_region': 'AwsRegion',
            'name': 'Name',
            'endpoints': 'Endpoints'
        }

        self._aws_region = aws_region
        self._name = name
        self._endpoints = endpoints

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSipMediaApplicationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSipMediaApplication_request of this CreateSipMediaApplicationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aws_region(self):
        """Gets the aws_region of this CreateSipMediaApplicationRequest.

        The AWS Region assigned to the SIP media application.

        :return: The aws_region of this CreateSipMediaApplicationRequest.
        :rtype: str
        """
        return self._aws_region

    @aws_region.setter
    def aws_region(self, aws_region):
        """Sets the aws_region of this CreateSipMediaApplicationRequest.

        The AWS Region assigned to the SIP media application.

        :param aws_region: The aws_region of this CreateSipMediaApplicationRequest.
        :type aws_region: str
        """
        if aws_region is None:
            raise ValueError("Invalid value for `aws_region`, must not be `None`")

        self._aws_region = aws_region

    @property
    def name(self):
        """Gets the name of this CreateSipMediaApplicationRequest.

        The SIP media application name.

        :return: The name of this CreateSipMediaApplicationRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSipMediaApplicationRequest.

        The SIP media application name.

        :param name: The name of this CreateSipMediaApplicationRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def endpoints(self):
        """Gets the endpoints of this CreateSipMediaApplicationRequest.

        List of endpoints (Lambda Amazon Resource Names) specified for the SIP media application. Currently, only one endpoint is supported.

        :return: The endpoints of this CreateSipMediaApplicationRequest.
        :rtype: List[SipMediaApplicationEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this CreateSipMediaApplicationRequest.

        List of endpoints (Lambda Amazon Resource Names) specified for the SIP media application. Currently, only one endpoint is supported.

        :param endpoints: The endpoints of this CreateSipMediaApplicationRequest.
        :type endpoints: List[SipMediaApplicationEndpoint]
        """
        if endpoints is None:
            raise ValueError("Invalid value for `endpoints`, must not be `None`")
        if endpoints is not None and len(endpoints) > 1:
            raise ValueError("Invalid value for `endpoints`, number of items must be less than or equal to `1`")
        if endpoints is not None and len(endpoints) < 1:
            raise ValueError("Invalid value for `endpoints`, number of items must be greater than or equal to `1`")

        self._endpoints = endpoints
