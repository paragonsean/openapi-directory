# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.notification_target import NotificationTarget
from openapi_server import util


class StreamingNotificationTarget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, notification_target: NotificationTarget=None):
        """StreamingNotificationTarget - a model defined in OpenAPI

        :param notification_target: The notification_target of this StreamingNotificationTarget.
        """
        self.openapi_types = {
            'notification_target': NotificationTarget
        }

        self.attribute_map = {
            'notification_target': 'NotificationTarget'
        }

        self._notification_target = notification_target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StreamingNotificationTarget':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StreamingNotificationTarget of this StreamingNotificationTarget.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_target(self):
        """Gets the notification_target of this StreamingNotificationTarget.


        :return: The notification_target of this StreamingNotificationTarget.
        :rtype: NotificationTarget
        """
        return self._notification_target

    @notification_target.setter
    def notification_target(self, notification_target):
        """Sets the notification_target of this StreamingNotificationTarget.


        :param notification_target: The notification_target of this StreamingNotificationTarget.
        :type notification_target: NotificationTarget
        """
        if notification_target is None:
            raise ValueError("Invalid value for `notification_target`, must not be `None`")

        self._notification_target = notification_target
