# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ValidateE911AddressRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aws_account_id: str=None, street_number: str=None, street_info: str=None, city: str=None, state: str=None, country: str=None, postal_code: str=None):
        """ValidateE911AddressRequest - a model defined in OpenAPI

        :param aws_account_id: The aws_account_id of this ValidateE911AddressRequest.
        :param street_number: The street_number of this ValidateE911AddressRequest.
        :param street_info: The street_info of this ValidateE911AddressRequest.
        :param city: The city of this ValidateE911AddressRequest.
        :param state: The state of this ValidateE911AddressRequest.
        :param country: The country of this ValidateE911AddressRequest.
        :param postal_code: The postal_code of this ValidateE911AddressRequest.
        """
        self.openapi_types = {
            'aws_account_id': str,
            'street_number': str,
            'street_info': str,
            'city': str,
            'state': str,
            'country': str,
            'postal_code': str
        }

        self.attribute_map = {
            'aws_account_id': 'AwsAccountId',
            'street_number': 'StreetNumber',
            'street_info': 'StreetInfo',
            'city': 'City',
            'state': 'State',
            'country': 'Country',
            'postal_code': 'PostalCode'
        }

        self._aws_account_id = aws_account_id
        self._street_number = street_number
        self._street_info = street_info
        self._city = city
        self._state = state
        self._country = country
        self._postal_code = postal_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateE911AddressRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidateE911Address_request of this ValidateE911AddressRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aws_account_id(self):
        """Gets the aws_account_id of this ValidateE911AddressRequest.

        The AWS account ID.

        :return: The aws_account_id of this ValidateE911AddressRequest.
        :rtype: str
        """
        return self._aws_account_id

    @aws_account_id.setter
    def aws_account_id(self, aws_account_id):
        """Sets the aws_account_id of this ValidateE911AddressRequest.

        The AWS account ID.

        :param aws_account_id: The aws_account_id of this ValidateE911AddressRequest.
        :type aws_account_id: str
        """
        if aws_account_id is None:
            raise ValueError("Invalid value for `aws_account_id`, must not be `None`")
        if aws_account_id is not None and not re.search(r'.*\S.*', aws_account_id):
            raise ValueError("Invalid value for `aws_account_id`, must be a follow pattern or equal to `/.*\S.*/`")

        self._aws_account_id = aws_account_id

    @property
    def street_number(self):
        """Gets the street_number of this ValidateE911AddressRequest.

        The address street number, such as <code>200</code> or <code>2121</code>.

        :return: The street_number of this ValidateE911AddressRequest.
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this ValidateE911AddressRequest.

        The address street number, such as <code>200</code> or <code>2121</code>.

        :param street_number: The street_number of this ValidateE911AddressRequest.
        :type street_number: str
        """
        if street_number is None:
            raise ValueError("Invalid value for `street_number`, must not be `None`")
        if street_number is not None and not re.search(r'.*\S.*', street_number):
            raise ValueError("Invalid value for `street_number`, must be a follow pattern or equal to `/.*\S.*/`")

        self._street_number = street_number

    @property
    def street_info(self):
        """Gets the street_info of this ValidateE911AddressRequest.

        The address street information, such as <code>8th Avenue</code>.

        :return: The street_info of this ValidateE911AddressRequest.
        :rtype: str
        """
        return self._street_info

    @street_info.setter
    def street_info(self, street_info):
        """Sets the street_info of this ValidateE911AddressRequest.

        The address street information, such as <code>8th Avenue</code>.

        :param street_info: The street_info of this ValidateE911AddressRequest.
        :type street_info: str
        """
        if street_info is None:
            raise ValueError("Invalid value for `street_info`, must not be `None`")
        if street_info is not None and not re.search(r'.*\S.*', street_info):
            raise ValueError("Invalid value for `street_info`, must be a follow pattern or equal to `/.*\S.*/`")

        self._street_info = street_info

    @property
    def city(self):
        """Gets the city of this ValidateE911AddressRequest.

        The address city, such as <code>Portland</code>.

        :return: The city of this ValidateE911AddressRequest.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ValidateE911AddressRequest.

        The address city, such as <code>Portland</code>.

        :param city: The city of this ValidateE911AddressRequest.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and not re.search(r'.*\S.*', city):
            raise ValueError("Invalid value for `city`, must be a follow pattern or equal to `/.*\S.*/`")

        self._city = city

    @property
    def state(self):
        """Gets the state of this ValidateE911AddressRequest.

        The address state, such as <code>ME</code>.

        :return: The state of this ValidateE911AddressRequest.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ValidateE911AddressRequest.

        The address state, such as <code>ME</code>.

        :param state: The state of this ValidateE911AddressRequest.
        :type state: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")
        if state is not None and not re.search(r'.*\S.*', state):
            raise ValueError("Invalid value for `state`, must be a follow pattern or equal to `/.*\S.*/`")

        self._state = state

    @property
    def country(self):
        """Gets the country of this ValidateE911AddressRequest.

        The address country, such as <code>US</code>. 

        :return: The country of this ValidateE911AddressRequest.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ValidateE911AddressRequest.

        The address country, such as <code>US</code>. 

        :param country: The country of this ValidateE911AddressRequest.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and not re.search(r'.*\S.*', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/.*\S.*/`")

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this ValidateE911AddressRequest.

        The address postal code, such as <code>04352</code>.

        :return: The postal_code of this ValidateE911AddressRequest.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ValidateE911AddressRequest.

        The address postal code, such as <code>04352</code>.

        :param postal_code: The postal_code of this ValidateE911AddressRequest.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")
        if postal_code is not None and not re.search(r'.*\S.*', postal_code):
            raise ValueError("Invalid value for `postal_code`, must be a follow pattern or equal to `/.*\S.*/`")

        self._postal_code = postal_code
