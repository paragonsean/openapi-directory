# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DNISEmergencyCallingConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emergency_phone_number: str=None, test_phone_number: str=None, calling_country: str=None):
        """DNISEmergencyCallingConfiguration - a model defined in OpenAPI

        :param emergency_phone_number: The emergency_phone_number of this DNISEmergencyCallingConfiguration.
        :param test_phone_number: The test_phone_number of this DNISEmergencyCallingConfiguration.
        :param calling_country: The calling_country of this DNISEmergencyCallingConfiguration.
        """
        self.openapi_types = {
            'emergency_phone_number': str,
            'test_phone_number': str,
            'calling_country': str
        }

        self.attribute_map = {
            'emergency_phone_number': 'EmergencyPhoneNumber',
            'test_phone_number': 'TestPhoneNumber',
            'calling_country': 'CallingCountry'
        }

        self._emergency_phone_number = emergency_phone_number
        self._test_phone_number = test_phone_number
        self._calling_country = calling_country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DNISEmergencyCallingConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DNISEmergencyCallingConfiguration of this DNISEmergencyCallingConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emergency_phone_number(self):
        """Gets the emergency_phone_number of this DNISEmergencyCallingConfiguration.


        :return: The emergency_phone_number of this DNISEmergencyCallingConfiguration.
        :rtype: str
        """
        return self._emergency_phone_number

    @emergency_phone_number.setter
    def emergency_phone_number(self, emergency_phone_number):
        """Sets the emergency_phone_number of this DNISEmergencyCallingConfiguration.


        :param emergency_phone_number: The emergency_phone_number of this DNISEmergencyCallingConfiguration.
        :type emergency_phone_number: str
        """
        if emergency_phone_number is None:
            raise ValueError("Invalid value for `emergency_phone_number`, must not be `None`")

        self._emergency_phone_number = emergency_phone_number

    @property
    def test_phone_number(self):
        """Gets the test_phone_number of this DNISEmergencyCallingConfiguration.


        :return: The test_phone_number of this DNISEmergencyCallingConfiguration.
        :rtype: str
        """
        return self._test_phone_number

    @test_phone_number.setter
    def test_phone_number(self, test_phone_number):
        """Sets the test_phone_number of this DNISEmergencyCallingConfiguration.


        :param test_phone_number: The test_phone_number of this DNISEmergencyCallingConfiguration.
        :type test_phone_number: str
        """

        self._test_phone_number = test_phone_number

    @property
    def calling_country(self):
        """Gets the calling_country of this DNISEmergencyCallingConfiguration.


        :return: The calling_country of this DNISEmergencyCallingConfiguration.
        :rtype: str
        """
        return self._calling_country

    @calling_country.setter
    def calling_country(self, calling_country):
        """Sets the calling_country of this DNISEmergencyCallingConfiguration.


        :param calling_country: The calling_country of this DNISEmergencyCallingConfiguration.
        :type calling_country: str
        """
        if calling_country is None:
            raise ValueError("Invalid value for `calling_country`, must not be `None`")

        self._calling_country = calling_country
