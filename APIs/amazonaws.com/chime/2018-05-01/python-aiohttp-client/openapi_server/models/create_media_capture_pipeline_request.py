# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_media_capture_pipeline_request_chime_sdk_meeting_configuration import CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration
import re
from openapi_server import util


class CreateMediaCapturePipelineRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, source_type: str=None, source_arn: str=None, sink_type: str=None, sink_arn: str=None, client_request_token: str=None, chime_sdk_meeting_configuration: CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration=None):
        """CreateMediaCapturePipelineRequest - a model defined in OpenAPI

        :param source_type: The source_type of this CreateMediaCapturePipelineRequest.
        :param source_arn: The source_arn of this CreateMediaCapturePipelineRequest.
        :param sink_type: The sink_type of this CreateMediaCapturePipelineRequest.
        :param sink_arn: The sink_arn of this CreateMediaCapturePipelineRequest.
        :param client_request_token: The client_request_token of this CreateMediaCapturePipelineRequest.
        :param chime_sdk_meeting_configuration: The chime_sdk_meeting_configuration of this CreateMediaCapturePipelineRequest.
        """
        self.openapi_types = {
            'source_type': str,
            'source_arn': str,
            'sink_type': str,
            'sink_arn': str,
            'client_request_token': str,
            'chime_sdk_meeting_configuration': CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration
        }

        self.attribute_map = {
            'source_type': 'SourceType',
            'source_arn': 'SourceArn',
            'sink_type': 'SinkType',
            'sink_arn': 'SinkArn',
            'client_request_token': 'ClientRequestToken',
            'chime_sdk_meeting_configuration': 'ChimeSdkMeetingConfiguration'
        }

        self._source_type = source_type
        self._source_arn = source_arn
        self._sink_type = sink_type
        self._sink_arn = sink_arn
        self._client_request_token = client_request_token
        self._chime_sdk_meeting_configuration = chime_sdk_meeting_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMediaCapturePipelineRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMediaCapturePipeline_request of this CreateMediaCapturePipelineRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def source_type(self):
        """Gets the source_type of this CreateMediaCapturePipelineRequest.

        Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.

        :return: The source_type of this CreateMediaCapturePipelineRequest.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CreateMediaCapturePipelineRequest.

        Source type from which the media artifacts will be captured. A Chime SDK Meeting is the only supported source.

        :param source_type: The source_type of this CreateMediaCapturePipelineRequest.
        :type source_type: str
        """
        allowed_values = ["ChimeSdkMeeting"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def source_arn(self):
        """Gets the source_arn of this CreateMediaCapturePipelineRequest.

        ARN of the source from which the media artifacts are captured.

        :return: The source_arn of this CreateMediaCapturePipelineRequest.
        :rtype: str
        """
        return self._source_arn

    @source_arn.setter
    def source_arn(self, source_arn):
        """Sets the source_arn of this CreateMediaCapturePipelineRequest.

        ARN of the source from which the media artifacts are captured.

        :param source_arn: The source_arn of this CreateMediaCapturePipelineRequest.
        :type source_arn: str
        """
        if source_arn is None:
            raise ValueError("Invalid value for `source_arn`, must not be `None`")
        if source_arn is not None and len(source_arn) > 1024:
            raise ValueError("Invalid value for `source_arn`, length must be less than or equal to `1024`")
        if source_arn is not None and len(source_arn) < 1:
            raise ValueError("Invalid value for `source_arn`, length must be greater than or equal to `1`")
        if source_arn is not None and not re.search(r'^arn[\/\:\-\_\.a-zA-Z0-9]+$', source_arn):
            raise ValueError("Invalid value for `source_arn`, must be a follow pattern or equal to `/^arn[\/\:\-\_\.a-zA-Z0-9]+$/`")

        self._source_arn = source_arn

    @property
    def sink_type(self):
        """Gets the sink_type of this CreateMediaCapturePipelineRequest.

        Destination type to which the media artifacts are saved. You must use an S3 bucket. 

        :return: The sink_type of this CreateMediaCapturePipelineRequest.
        :rtype: str
        """
        return self._sink_type

    @sink_type.setter
    def sink_type(self, sink_type):
        """Sets the sink_type of this CreateMediaCapturePipelineRequest.

        Destination type to which the media artifacts are saved. You must use an S3 bucket. 

        :param sink_type: The sink_type of this CreateMediaCapturePipelineRequest.
        :type sink_type: str
        """
        allowed_values = ["S3Bucket"]  # noqa: E501
        if sink_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sink_type` ({0}), must be one of {1}"
                .format(sink_type, allowed_values)
            )

        self._sink_type = sink_type

    @property
    def sink_arn(self):
        """Gets the sink_arn of this CreateMediaCapturePipelineRequest.

        The ARN of the sink type.

        :return: The sink_arn of this CreateMediaCapturePipelineRequest.
        :rtype: str
        """
        return self._sink_arn

    @sink_arn.setter
    def sink_arn(self, sink_arn):
        """Sets the sink_arn of this CreateMediaCapturePipelineRequest.

        The ARN of the sink type.

        :param sink_arn: The sink_arn of this CreateMediaCapturePipelineRequest.
        :type sink_arn: str
        """
        if sink_arn is None:
            raise ValueError("Invalid value for `sink_arn`, must not be `None`")
        if sink_arn is not None and len(sink_arn) > 1024:
            raise ValueError("Invalid value for `sink_arn`, length must be less than or equal to `1024`")
        if sink_arn is not None and len(sink_arn) < 1:
            raise ValueError("Invalid value for `sink_arn`, length must be greater than or equal to `1`")
        if sink_arn is not None and not re.search(r'^arn[\/\:\-\_\.a-zA-Z0-9]+$', sink_arn):
            raise ValueError("Invalid value for `sink_arn`, must be a follow pattern or equal to `/^arn[\/\:\-\_\.a-zA-Z0-9]+$/`")

        self._sink_arn = sink_arn

    @property
    def client_request_token(self):
        """Gets the client_request_token of this CreateMediaCapturePipelineRequest.

        The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.

        :return: The client_request_token of this CreateMediaCapturePipelineRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this CreateMediaCapturePipelineRequest.

        The unique identifier for the client request. The token makes the API request idempotent. Use a different token for different media pipeline requests.

        :param client_request_token: The client_request_token of this CreateMediaCapturePipelineRequest.
        :type client_request_token: str
        """
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token

    @property
    def chime_sdk_meeting_configuration(self):
        """Gets the chime_sdk_meeting_configuration of this CreateMediaCapturePipelineRequest.


        :return: The chime_sdk_meeting_configuration of this CreateMediaCapturePipelineRequest.
        :rtype: CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration
        """
        return self._chime_sdk_meeting_configuration

    @chime_sdk_meeting_configuration.setter
    def chime_sdk_meeting_configuration(self, chime_sdk_meeting_configuration):
        """Sets the chime_sdk_meeting_configuration of this CreateMediaCapturePipelineRequest.


        :param chime_sdk_meeting_configuration: The chime_sdk_meeting_configuration of this CreateMediaCapturePipelineRequest.
        :type chime_sdk_meeting_configuration: CreateMediaCapturePipelineRequestChimeSdkMeetingConfiguration
        """

        self._chime_sdk_meeting_configuration = chime_sdk_meeting_configuration
