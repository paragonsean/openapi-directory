# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisassociateSigninDelegateGroupsFromAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_names: List[str]=None):
        """DisassociateSigninDelegateGroupsFromAccountRequest - a model defined in OpenAPI

        :param group_names: The group_names of this DisassociateSigninDelegateGroupsFromAccountRequest.
        """
        self.openapi_types = {
            'group_names': List[str]
        }

        self.attribute_map = {
            'group_names': 'GroupNames'
        }

        self._group_names = group_names

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisassociateSigninDelegateGroupsFromAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisassociateSigninDelegateGroupsFromAccount_request of this DisassociateSigninDelegateGroupsFromAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_names(self):
        """Gets the group_names of this DisassociateSigninDelegateGroupsFromAccountRequest.

        The sign-in delegate group names.

        :return: The group_names of this DisassociateSigninDelegateGroupsFromAccountRequest.
        :rtype: List[str]
        """
        return self._group_names

    @group_names.setter
    def group_names(self, group_names):
        """Sets the group_names of this DisassociateSigninDelegateGroupsFromAccountRequest.

        The sign-in delegate group names.

        :param group_names: The group_names of this DisassociateSigninDelegateGroupsFromAccountRequest.
        :type group_names: List[str]
        """
        if group_names is None:
            raise ValueError("Invalid value for `group_names`, must not be `None`")
        if group_names is not None and len(group_names) < 1:
            raise ValueError("Invalid value for `group_names`, number of items must be greater than or equal to `1`")

        self._group_names = group_names
