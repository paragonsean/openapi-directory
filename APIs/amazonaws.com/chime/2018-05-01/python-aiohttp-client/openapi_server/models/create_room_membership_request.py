# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CreateRoomMembershipRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member_id: str=None, role: str=None):
        """CreateRoomMembershipRequest - a model defined in OpenAPI

        :param member_id: The member_id of this CreateRoomMembershipRequest.
        :param role: The role of this CreateRoomMembershipRequest.
        """
        self.openapi_types = {
            'member_id': str,
            'role': str
        }

        self.attribute_map = {
            'member_id': 'MemberId',
            'role': 'Role'
        }

        self._member_id = member_id
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRoomMembershipRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRoomMembership_request of this CreateRoomMembershipRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member_id(self):
        """Gets the member_id of this CreateRoomMembershipRequest.

        The Amazon Chime member ID (user ID or bot ID).

        :return: The member_id of this CreateRoomMembershipRequest.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this CreateRoomMembershipRequest.

        The Amazon Chime member ID (user ID or bot ID).

        :param member_id: The member_id of this CreateRoomMembershipRequest.
        :type member_id: str
        """
        if member_id is None:
            raise ValueError("Invalid value for `member_id`, must not be `None`")
        if member_id is not None and not re.search(r'.*\S.*', member_id):
            raise ValueError("Invalid value for `member_id`, must be a follow pattern or equal to `/.*\S.*/`")

        self._member_id = member_id

    @property
    def role(self):
        """Gets the role of this CreateRoomMembershipRequest.

        The role of the member.

        :return: The role of this CreateRoomMembershipRequest.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CreateRoomMembershipRequest.

        The role of the member.

        :param role: The role of this CreateRoomMembershipRequest.
        :type role: str
        """
        allowed_values = ["Administrator", "Member"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
