/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssociatePhoneNumberWithUser_request.h"
#include "OAIAssociatePhoneNumbersWithVoiceConnectorGroupResponse.h"
#include "OAIAssociatePhoneNumbersWithVoiceConnectorGroup_request.h"
#include "OAIAssociatePhoneNumbersWithVoiceConnectorResponse.h"
#include "OAIAssociatePhoneNumbersWithVoiceConnector_request.h"
#include "OAIAssociateSigninDelegateGroupsWithAccount_request.h"
#include "OAIBatchCreateAttendeeResponse.h"
#include "OAIBatchCreateAttendee_request.h"
#include "OAIBatchCreateChannelMembershipResponse.h"
#include "OAIBatchCreateChannelMembership_request.h"
#include "OAIBatchCreateRoomMembershipResponse.h"
#include "OAIBatchCreateRoomMembership_request.h"
#include "OAIBatchDeletePhoneNumberResponse.h"
#include "OAIBatchDeletePhoneNumber_request.h"
#include "OAIBatchSuspendUserResponse.h"
#include "OAIBatchSuspendUser_request.h"
#include "OAIBatchUnsuspendUserResponse.h"
#include "OAIBatchUnsuspendUser_request.h"
#include "OAIBatchUpdatePhoneNumberResponse.h"
#include "OAIBatchUpdatePhoneNumber_request.h"
#include "OAIBatchUpdateUserResponse.h"
#include "OAIBatchUpdateUser_request.h"
#include "OAICreateAccountResponse.h"
#include "OAICreateAccount_request.h"
#include "OAICreateAppInstanceAdminResponse.h"
#include "OAICreateAppInstanceAdmin_request.h"
#include "OAICreateAppInstanceResponse.h"
#include "OAICreateAppInstanceUserResponse.h"
#include "OAICreateAppInstanceUser_request.h"
#include "OAICreateAppInstance_request.h"
#include "OAICreateAttendeeResponse.h"
#include "OAICreateAttendee_request.h"
#include "OAICreateBotResponse.h"
#include "OAICreateBot_request.h"
#include "OAICreateChannelBanResponse.h"
#include "OAICreateChannelBan_request.h"
#include "OAICreateChannelMembershipResponse.h"
#include "OAICreateChannelMembership_request.h"
#include "OAICreateChannelModeratorResponse.h"
#include "OAICreateChannelModerator_request.h"
#include "OAICreateChannelResponse.h"
#include "OAICreateChannel_request.h"
#include "OAICreateMediaCapturePipelineResponse.h"
#include "OAICreateMediaCapturePipeline_request.h"
#include "OAICreateMeetingDialOutResponse.h"
#include "OAICreateMeetingDialOut_request.h"
#include "OAICreateMeetingResponse.h"
#include "OAICreateMeetingWithAttendeesResponse.h"
#include "OAICreateMeetingWithAttendees_request.h"
#include "OAICreateMeeting_request.h"
#include "OAICreatePhoneNumberOrderResponse.h"
#include "OAICreatePhoneNumberOrder_request.h"
#include "OAICreateProxySessionResponse.h"
#include "OAICreateProxySession_request.h"
#include "OAICreateRoomMembershipResponse.h"
#include "OAICreateRoomMembership_request.h"
#include "OAICreateRoomResponse.h"
#include "OAICreateRoom_request.h"
#include "OAICreateSipMediaApplicationCallResponse.h"
#include "OAICreateSipMediaApplicationCall_request.h"
#include "OAICreateSipMediaApplicationResponse.h"
#include "OAICreateSipMediaApplication_request.h"
#include "OAICreateSipRuleResponse.h"
#include "OAICreateSipRule_request.h"
#include "OAICreateUserResponse.h"
#include "OAICreateUser_request.h"
#include "OAICreateVoiceConnectorGroupResponse.h"
#include "OAICreateVoiceConnectorGroup_request.h"
#include "OAICreateVoiceConnectorResponse.h"
#include "OAICreateVoiceConnector_request.h"
#include "OAIDeleteVoiceConnectorTerminationCredentials_request.h"
#include "OAIDescribeAppInstanceAdminResponse.h"
#include "OAIDescribeAppInstanceResponse.h"
#include "OAIDescribeAppInstanceUserResponse.h"
#include "OAIDescribeChannelBanResponse.h"
#include "OAIDescribeChannelMembershipForAppInstanceUserResponse.h"
#include "OAIDescribeChannelMembershipResponse.h"
#include "OAIDescribeChannelModeratedByAppInstanceUserResponse.h"
#include "OAIDescribeChannelModeratorResponse.h"
#include "OAIDescribeChannelResponse.h"
#include "OAIDisassociatePhoneNumbersFromVoiceConnectorGroupResponse.h"
#include "OAIDisassociatePhoneNumbersFromVoiceConnectorResponse.h"
#include "OAIDisassociatePhoneNumbersFromVoiceConnector_request.h"
#include "OAIDisassociateSigninDelegateGroupsFromAccount_request.h"
#include "OAIGetAccountResponse.h"
#include "OAIGetAccountSettingsResponse.h"
#include "OAIGetAppInstanceRetentionSettingsResponse.h"
#include "OAIGetAppInstanceStreamingConfigurationsResponse.h"
#include "OAIGetAttendeeResponse.h"
#include "OAIGetBotResponse.h"
#include "OAIGetChannelMessageResponse.h"
#include "OAIGetEventsConfigurationResponse.h"
#include "OAIGetGlobalSettingsResponse.h"
#include "OAIGetMediaCapturePipelineResponse.h"
#include "OAIGetMeetingResponse.h"
#include "OAIGetMessagingSessionEndpointResponse.h"
#include "OAIGetPhoneNumberOrderResponse.h"
#include "OAIGetPhoneNumberResponse.h"
#include "OAIGetPhoneNumberSettingsResponse.h"
#include "OAIGetProxySessionResponse.h"
#include "OAIGetRetentionSettingsResponse.h"
#include "OAIGetRoomResponse.h"
#include "OAIGetSipMediaApplicationLoggingConfigurationResponse.h"
#include "OAIGetSipMediaApplicationResponse.h"
#include "OAIGetSipRuleResponse.h"
#include "OAIGetUserResponse.h"
#include "OAIGetUserSettingsResponse.h"
#include "OAIGetVoiceConnectorEmergencyCallingConfigurationResponse.h"
#include "OAIGetVoiceConnectorGroupResponse.h"
#include "OAIGetVoiceConnectorLoggingConfigurationResponse.h"
#include "OAIGetVoiceConnectorOriginationResponse.h"
#include "OAIGetVoiceConnectorProxyResponse.h"
#include "OAIGetVoiceConnectorResponse.h"
#include "OAIGetVoiceConnectorStreamingConfigurationResponse.h"
#include "OAIGetVoiceConnectorTerminationHealthResponse.h"
#include "OAIGetVoiceConnectorTerminationResponse.h"
#include "OAIInviteUsersResponse.h"
#include "OAIInviteUsers_request.h"
#include "OAIListAccountsResponse.h"
#include "OAIListAppInstanceAdminsResponse.h"
#include "OAIListAppInstanceUsersResponse.h"
#include "OAIListAppInstancesResponse.h"
#include "OAIListAttendeeTagsResponse.h"
#include "OAIListAttendeesResponse.h"
#include "OAIListBotsResponse.h"
#include "OAIListChannelBansResponse.h"
#include "OAIListChannelMembershipsForAppInstanceUserResponse.h"
#include "OAIListChannelMembershipsResponse.h"
#include "OAIListChannelMessagesResponse.h"
#include "OAIListChannelModeratorsResponse.h"
#include "OAIListChannelsModeratedByAppInstanceUserResponse.h"
#include "OAIListChannelsResponse.h"
#include "OAIListMediaCapturePipelinesResponse.h"
#include "OAIListMeetingTagsResponse.h"
#include "OAIListMeetingsResponse.h"
#include "OAIListPhoneNumberOrdersResponse.h"
#include "OAIListPhoneNumbersResponse.h"
#include "OAIListProxySessionsResponse.h"
#include "OAIListRoomMembershipsResponse.h"
#include "OAIListRoomsResponse.h"
#include "OAIListSipMediaApplicationsResponse.h"
#include "OAIListSipRulesResponse.h"
#include "OAIListSupportedPhoneNumberCountriesResponse.h"
#include "OAIListTagsForResourceResponse.h"
#include "OAIListUsersResponse.h"
#include "OAIListVoiceConnectorGroupsResponse.h"
#include "OAIListVoiceConnectorTerminationCredentialsResponse.h"
#include "OAIListVoiceConnectorsResponse.h"
#include "OAIObject.h"
#include "OAIPutAppInstanceRetentionSettingsResponse.h"
#include "OAIPutAppInstanceRetentionSettings_request.h"
#include "OAIPutAppInstanceStreamingConfigurationsResponse.h"
#include "OAIPutAppInstanceStreamingConfigurations_request.h"
#include "OAIPutEventsConfigurationResponse.h"
#include "OAIPutEventsConfiguration_request.h"
#include "OAIPutRetentionSettingsResponse.h"
#include "OAIPutRetentionSettings_request.h"
#include "OAIPutSipMediaApplicationLoggingConfigurationResponse.h"
#include "OAIPutSipMediaApplicationLoggingConfiguration_request.h"
#include "OAIPutVoiceConnectorEmergencyCallingConfigurationResponse.h"
#include "OAIPutVoiceConnectorEmergencyCallingConfiguration_request.h"
#include "OAIPutVoiceConnectorLoggingConfigurationResponse.h"
#include "OAIPutVoiceConnectorLoggingConfiguration_request.h"
#include "OAIPutVoiceConnectorOriginationResponse.h"
#include "OAIPutVoiceConnectorOrigination_request.h"
#include "OAIPutVoiceConnectorProxyResponse.h"
#include "OAIPutVoiceConnectorProxy_request.h"
#include "OAIPutVoiceConnectorStreamingConfigurationResponse.h"
#include "OAIPutVoiceConnectorStreamingConfiguration_request.h"
#include "OAIPutVoiceConnectorTerminationCredentials_request.h"
#include "OAIPutVoiceConnectorTerminationResponse.h"
#include "OAIPutVoiceConnectorTermination_request.h"
#include "OAIRedactChannelMessageResponse.h"
#include "OAIRegenerateSecurityTokenResponse.h"
#include "OAIResetPersonalPINResponse.h"
#include "OAIRestorePhoneNumberResponse.h"
#include "OAISearchAvailablePhoneNumbersResponse.h"
#include "OAISendChannelMessageResponse.h"
#include "OAISendChannelMessage_request.h"
#include "OAIStartMeetingTranscription_request.h"
#include "OAITagAttendee_request.h"
#include "OAITagMeeting_request.h"
#include "OAITagResource_request.h"
#include "OAIUntagAttendee_request.h"
#include "OAIUntagMeeting_request.h"
#include "OAIUntagResource_request.h"
#include "OAIUpdateAccountResponse.h"
#include "OAIUpdateAccountSettings_request.h"
#include "OAIUpdateAccount_request.h"
#include "OAIUpdateAppInstanceResponse.h"
#include "OAIUpdateAppInstanceUserResponse.h"
#include "OAIUpdateAppInstanceUser_request.h"
#include "OAIUpdateAppInstance_request.h"
#include "OAIUpdateBotResponse.h"
#include "OAIUpdateBot_request.h"
#include "OAIUpdateChannelMessageResponse.h"
#include "OAIUpdateChannelMessage_request.h"
#include "OAIUpdateChannelReadMarkerResponse.h"
#include "OAIUpdateChannelResponse.h"
#include "OAIUpdateChannel_request.h"
#include "OAIUpdateGlobalSettings_request.h"
#include "OAIUpdatePhoneNumberResponse.h"
#include "OAIUpdatePhoneNumberSettings_request.h"
#include "OAIUpdatePhoneNumber_request.h"
#include "OAIUpdateProxySessionResponse.h"
#include "OAIUpdateProxySession_request.h"
#include "OAIUpdateRoomMembershipResponse.h"
#include "OAIUpdateRoomMembership_request.h"
#include "OAIUpdateRoomResponse.h"
#include "OAIUpdateRoom_request.h"
#include "OAIUpdateSipMediaApplicationCallResponse.h"
#include "OAIUpdateSipMediaApplicationCall_request.h"
#include "OAIUpdateSipMediaApplicationResponse.h"
#include "OAIUpdateSipMediaApplication_request.h"
#include "OAIUpdateSipRuleResponse.h"
#include "OAIUpdateSipRule_request.h"
#include "OAIUpdateUserResponse.h"
#include "OAIUpdateUserSettings_request.h"
#include "OAIUpdateUser_request.h"
#include "OAIUpdateVoiceConnectorGroupResponse.h"
#include "OAIUpdateVoiceConnectorGroup_request.h"
#include "OAIUpdateVoiceConnectorResponse.h"
#include "OAIUpdateVoiceConnector_request.h"
#include "OAIValidateE911AddressResponse.h"
#include "OAIValidateE911Address_request.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_associate_phone_number_with_user_request OAIAssociatePhoneNumberWithUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associatePhoneNumberWithUser(const QString &account_id, const QString &user_id, const QString &operation, const OAIAssociatePhoneNumberWithUser_request &oai_associate_phone_number_with_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_associate_phone_numbers_with_voice_connector_request OAIAssociatePhoneNumbersWithVoiceConnector_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void associatePhoneNumbersWithVoiceConnector(const QString &voice_connector_id, const QString &operation, const OAIAssociatePhoneNumbersWithVoiceConnector_request &oai_associate_phone_numbers_with_voice_connector_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_group_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_associate_phone_numbers_with_voice_connector_group_request OAIAssociatePhoneNumbersWithVoiceConnectorGroup_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void associatePhoneNumbersWithVoiceConnectorGroup(const QString &voice_connector_group_id, const QString &operation, const OAIAssociatePhoneNumbersWithVoiceConnectorGroup_request &oai_associate_phone_numbers_with_voice_connector_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_associate_signin_delegate_groups_with_account_request OAIAssociateSigninDelegateGroupsWithAccount_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void associateSigninDelegateGroupsWithAccount(const QString &account_id, const QString &operation, const OAIAssociateSigninDelegateGroupsWithAccount_request &oai_associate_signin_delegate_groups_with_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_batch_create_attendee_request OAIBatchCreateAttendee_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void batchCreateAttendee(const QString &meeting_id, const QString &operation, const OAIBatchCreateAttendee_request &oai_batch_create_attendee_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_batch_create_channel_membership_request OAIBatchCreateChannelMembership_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void batchCreateChannelMembership(const QString &channel_arn, const QString &operation, const OAIBatchCreateChannelMembership_request &oai_batch_create_channel_membership_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_batch_create_room_membership_request OAIBatchCreateRoomMembership_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchCreateRoomMembership(const QString &account_id, const QString &room_id, const QString &operation, const OAIBatchCreateRoomMembership_request &oai_batch_create_room_membership_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  operation QString [required]
    * @param[in]  oai_batch_delete_phone_number_request OAIBatchDeletePhoneNumber_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchDeletePhoneNumber(const QString &operation, const OAIBatchDeletePhoneNumber_request &oai_batch_delete_phone_number_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_batch_suspend_user_request OAIBatchSuspendUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchSuspendUser(const QString &account_id, const QString &operation, const OAIBatchSuspendUser_request &oai_batch_suspend_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_batch_unsuspend_user_request OAIBatchUnsuspendUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchUnsuspendUser(const QString &account_id, const QString &operation, const OAIBatchUnsuspendUser_request &oai_batch_unsuspend_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  operation QString [required]
    * @param[in]  oai_batch_update_phone_number_request OAIBatchUpdatePhoneNumber_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchUpdatePhoneNumber(const QString &operation, const OAIBatchUpdatePhoneNumber_request &oai_batch_update_phone_number_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_batch_update_user_request OAIBatchUpdateUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void batchUpdateUser(const QString &account_id, const OAIBatchUpdateUser_request &oai_batch_update_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_account_request OAICreateAccount_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createAccount(const OAICreateAccount_request &oai_create_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_app_instance_request OAICreateAppInstance_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createAppInstance(const OAICreateAppInstance_request &oai_create_app_instance_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  oai_create_app_instance_admin_request OAICreateAppInstanceAdmin_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createAppInstanceAdmin(const QString &app_instance_arn, const OAICreateAppInstanceAdmin_request &oai_create_app_instance_admin_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_app_instance_user_request OAICreateAppInstanceUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createAppInstanceUser(const OAICreateAppInstanceUser_request &oai_create_app_instance_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  oai_create_attendee_request OAICreateAttendee_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createAttendee(const QString &meeting_id, const OAICreateAttendee_request &oai_create_attendee_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_create_bot_request OAICreateBot_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createBot(const QString &account_id, const OAICreateBot_request &oai_create_bot_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_channel_request OAICreateChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createChannel(const OAICreateChannel_request &oai_create_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  oai_create_channel_ban_request OAICreateChannelBan_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createChannelBan(const QString &channel_arn, const OAICreateChannelBan_request &oai_create_channel_ban_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  oai_create_channel_membership_request OAICreateChannelMembership_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createChannelMembership(const QString &channel_arn, const OAICreateChannelMembership_request &oai_create_channel_membership_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  oai_create_channel_moderator_request OAICreateChannelModerator_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createChannelModerator(const QString &channel_arn, const OAICreateChannelModerator_request &oai_create_channel_moderator_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_media_capture_pipeline_request OAICreateMediaCapturePipeline_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createMediaCapturePipeline(const OAICreateMediaCapturePipeline_request &oai_create_media_capture_pipeline_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_meeting_request OAICreateMeeting_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createMeeting(const OAICreateMeeting_request &oai_create_meeting_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  oai_create_meeting_dial_out_request OAICreateMeetingDialOut_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createMeetingDialOut(const QString &meeting_id, const OAICreateMeetingDialOut_request &oai_create_meeting_dial_out_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  operation QString [required]
    * @param[in]  oai_create_meeting_with_attendees_request OAICreateMeetingWithAttendees_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createMeetingWithAttendees(const QString &operation, const OAICreateMeetingWithAttendees_request &oai_create_meeting_with_attendees_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_phone_number_order_request OAICreatePhoneNumberOrder_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createPhoneNumberOrder(const OAICreatePhoneNumberOrder_request &oai_create_phone_number_order_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  oai_create_proxy_session_request OAICreateProxySession_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createProxySession(const QString &voice_connector_id, const OAICreateProxySession_request &oai_create_proxy_session_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_create_room_request OAICreateRoom_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRoom(const QString &account_id, const OAICreateRoom_request &oai_create_room_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  oai_create_room_membership_request OAICreateRoomMembership_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createRoomMembership(const QString &account_id, const QString &room_id, const OAICreateRoomMembership_request &oai_create_room_membership_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_sip_media_application_request OAICreateSipMediaApplication_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createSipMediaApplication(const OAICreateSipMediaApplication_request &oai_create_sip_media_application_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_media_application_id QString [required]
    * @param[in]  oai_create_sip_media_application_call_request OAICreateSipMediaApplicationCall_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createSipMediaApplicationCall(const QString &sip_media_application_id, const OAICreateSipMediaApplicationCall_request &oai_create_sip_media_application_call_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_sip_rule_request OAICreateSipRule_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createSipRule(const OAICreateSipRule_request &oai_create_sip_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_create_user_request OAICreateUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void createUser(const QString &account_id, const QString &operation, const OAICreateUser_request &oai_create_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_voice_connector_request OAICreateVoiceConnector_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createVoiceConnector(const OAICreateVoiceConnector_request &oai_create_voice_connector_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_voice_connector_group_request OAICreateVoiceConnectorGroup_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void createVoiceConnectorGroup(const OAICreateVoiceConnectorGroup_request &oai_create_voice_connector_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteAccount(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteAppInstance(const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_admin_arn QString [required]
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteAppInstanceAdmin(const QString &app_instance_admin_arn, const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteAppInstanceStreamingConfigurations(const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_user_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteAppInstanceUser(const QString &app_instance_user_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  attendee_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteAttendee(const QString &meeting_id, const QString &attendee_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteChannel(const QString &channel_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  member_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteChannelBan(const QString &channel_arn, const QString &member_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  member_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteChannelMembership(const QString &channel_arn, const QString &member_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  message_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteChannelMessage(const QString &channel_arn, const QString &message_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  channel_moderator_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteChannelModerator(const QString &channel_arn, const QString &channel_moderator_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  bot_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteEventsConfiguration(const QString &account_id, const QString &bot_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  media_pipeline_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteMediaCapturePipeline(const QString &media_pipeline_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteMeeting(const QString &meeting_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  phone_number_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deletePhoneNumber(const QString &phone_number_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  proxy_session_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteProxySession(const QString &voice_connector_id, const QString &proxy_session_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRoom(const QString &account_id, const QString &room_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void deleteRoomMembership(const QString &account_id, const QString &room_id, const QString &member_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_media_application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteSipMediaApplication(const QString &sip_media_application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_rule_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteSipRule(const QString &sip_rule_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVoiceConnector(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVoiceConnectorEmergencyCallingConfiguration(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_group_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVoiceConnectorGroup(const QString &voice_connector_group_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVoiceConnectorOrigination(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVoiceConnectorProxy(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVoiceConnectorStreamingConfiguration(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVoiceConnectorTermination(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_delete_voice_connector_termination_credentials_request OAIDeleteVoiceConnectorTerminationCredentials_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void deleteVoiceConnectorTerminationCredentials(const QString &voice_connector_id, const QString &operation, const OAIDeleteVoiceConnectorTerminationCredentials_request &oai_delete_voice_connector_termination_credentials_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeAppInstance(const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_admin_arn QString [required]
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeAppInstanceAdmin(const QString &app_instance_admin_arn, const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_user_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeAppInstanceUser(const QString &app_instance_user_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeChannel(const QString &channel_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  member_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeChannelBan(const QString &channel_arn, const QString &member_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  member_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeChannelMembership(const QString &channel_arn, const QString &member_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  app_instance_user_arn QString [required]
    * @param[in]  scope QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeChannelMembershipForAppInstanceUser(const QString &channel_arn, const QString &app_instance_user_arn, const QString &scope, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  app_instance_user_arn QString [required]
    * @param[in]  scope QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeChannelModeratedByAppInstanceUser(const QString &channel_arn, const QString &app_instance_user_arn, const QString &scope, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  channel_moderator_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void describeChannelModerator(const QString &channel_arn, const QString &channel_moderator_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociatePhoneNumberFromUser(const QString &account_id, const QString &user_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_disassociate_phone_numbers_from_voice_connector_request OAIDisassociatePhoneNumbersFromVoiceConnector_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void disassociatePhoneNumbersFromVoiceConnector(const QString &voice_connector_id, const QString &operation, const OAIDisassociatePhoneNumbersFromVoiceConnector_request &oai_disassociate_phone_numbers_from_voice_connector_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_group_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_disassociate_phone_numbers_from_voice_connector_request OAIDisassociatePhoneNumbersFromVoiceConnector_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void disassociatePhoneNumbersFromVoiceConnectorGroup(const QString &voice_connector_group_id, const QString &operation, const OAIDisassociatePhoneNumbersFromVoiceConnector_request &oai_disassociate_phone_numbers_from_voice_connector_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_disassociate_signin_delegate_groups_from_account_request OAIDisassociateSigninDelegateGroupsFromAccount_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void disassociateSigninDelegateGroupsFromAccount(const QString &account_id, const QString &operation, const OAIDisassociateSigninDelegateGroupsFromAccount_request &oai_disassociate_signin_delegate_groups_from_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccount(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getAccountSettings(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getAppInstanceRetentionSettings(const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getAppInstanceStreamingConfigurations(const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  attendee_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getAttendee(const QString &meeting_id, const QString &attendee_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  bot_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getBot(const QString &account_id, const QString &bot_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  message_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getChannelMessage(const QString &channel_arn, const QString &message_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  bot_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getEventsConfiguration(const QString &account_id, const QString &bot_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getGlobalSettings(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  media_pipeline_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getMediaCapturePipeline(const QString &media_pipeline_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getMeeting(const QString &meeting_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getMessagingSessionEndpoint(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  phone_number_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPhoneNumber(const QString &phone_number_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  phone_number_order_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPhoneNumberOrder(const QString &phone_number_order_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getPhoneNumberSettings(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  proxy_session_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getProxySession(const QString &voice_connector_id, const QString &proxy_session_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRetentionSettings(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getRoom(const QString &account_id, const QString &room_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_media_application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getSipMediaApplication(const QString &sip_media_application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_media_application_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getSipMediaApplicationLoggingConfiguration(const QString &sip_media_application_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_rule_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getSipRule(const QString &sip_rule_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getUser(const QString &account_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void getUserSettings(const QString &account_id, const QString &user_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnector(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnectorEmergencyCallingConfiguration(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_group_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnectorGroup(const QString &voice_connector_group_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnectorLoggingConfiguration(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnectorOrigination(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnectorProxy(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnectorStreamingConfiguration(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnectorTermination(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void getVoiceConnectorTerminationHealth(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_invite_users_request OAIInviteUsers_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void inviteUsers(const QString &account_id, const QString &operation, const OAIInviteUsers_request &oai_invite_users_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  user_email QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listAccounts(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listAppInstanceAdmins(const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listAppInstanceUsers(const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listAppInstances(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  attendee_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listAttendeeTags(const QString &meeting_id, const QString &attendee_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listAttendees(const QString &meeting_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listBots(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listChannelBans(const QString &channel_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listChannelMemberships(const QString &channel_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scope QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  app_instance_user_arn QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listChannelMembershipsForAppInstanceUser(const QString &scope, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_instance_user_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  not_before QDateTime [optional]
    * @param[in]  not_after QDateTime [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listChannelMessages(const QString &channel_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &not_before = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &not_after = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listChannelModerators(const QString &channel_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  privacy QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listChannels(const QString &app_instance_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &privacy = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scope QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  app_instance_user_arn QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listChannelsModeratedByAppInstanceUser(const QString &scope, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &app_instance_user_arn = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listMediaCapturePipelines(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listMeetingTags(const QString &meeting_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listMeetings(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listPhoneNumberOrders(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  product_type QString [optional]
    * @param[in]  filter_name QString [optional]
    * @param[in]  filter_value QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listPhoneNumbers(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &product_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listProxySessions(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listRoomMemberships(const QString &account_id, const QString &room_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  member_id QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listRooms(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &member_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listSipMediaApplications(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  sip_media_application QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listSipRules(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sip_media_application = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  product_type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void listSupportedPhoneNumberCountries(const QString &product_type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listTagsForResource(const QString &arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  user_email QString [optional]
    * @param[in]  user_type QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void listUsers(const QString &account_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_email = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listVoiceConnectorGroups(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listVoiceConnectorTerminationCredentials(const QString &voice_connector_id, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    Q_DECL_DEPRECATED virtual void listVoiceConnectors(const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void logoutUser(const QString &account_id, const QString &user_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  oai_put_app_instance_retention_settings_request OAIPutAppInstanceRetentionSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putAppInstanceRetentionSettings(const QString &app_instance_arn, const OAIPutAppInstanceRetentionSettings_request &oai_put_app_instance_retention_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  oai_put_app_instance_streaming_configurations_request OAIPutAppInstanceStreamingConfigurations_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putAppInstanceStreamingConfigurations(const QString &app_instance_arn, const OAIPutAppInstanceStreamingConfigurations_request &oai_put_app_instance_streaming_configurations_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  bot_id QString [required]
    * @param[in]  oai_put_events_configuration_request OAIPutEventsConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putEventsConfiguration(const QString &account_id, const QString &bot_id, const OAIPutEventsConfiguration_request &oai_put_events_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_put_retention_settings_request OAIPutRetentionSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void putRetentionSettings(const QString &account_id, const OAIPutRetentionSettings_request &oai_put_retention_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_media_application_id QString [required]
    * @param[in]  oai_put_sip_media_application_logging_configuration_request OAIPutSipMediaApplicationLoggingConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putSipMediaApplicationLoggingConfiguration(const QString &sip_media_application_id, const OAIPutSipMediaApplicationLoggingConfiguration_request &oai_put_sip_media_application_logging_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  oai_put_voice_connector_emergency_calling_configuration_request OAIPutVoiceConnectorEmergencyCallingConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putVoiceConnectorEmergencyCallingConfiguration(const QString &voice_connector_id, const OAIPutVoiceConnectorEmergencyCallingConfiguration_request &oai_put_voice_connector_emergency_calling_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  oai_put_voice_connector_logging_configuration_request OAIPutVoiceConnectorLoggingConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putVoiceConnectorLoggingConfiguration(const QString &voice_connector_id, const OAIPutVoiceConnectorLoggingConfiguration_request &oai_put_voice_connector_logging_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  oai_put_voice_connector_origination_request OAIPutVoiceConnectorOrigination_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putVoiceConnectorOrigination(const QString &voice_connector_id, const OAIPutVoiceConnectorOrigination_request &oai_put_voice_connector_origination_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  oai_put_voice_connector_proxy_request OAIPutVoiceConnectorProxy_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putVoiceConnectorProxy(const QString &voice_connector_id, const OAIPutVoiceConnectorProxy_request &oai_put_voice_connector_proxy_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  oai_put_voice_connector_streaming_configuration_request OAIPutVoiceConnectorStreamingConfiguration_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putVoiceConnectorStreamingConfiguration(const QString &voice_connector_id, const OAIPutVoiceConnectorStreamingConfiguration_request &oai_put_voice_connector_streaming_configuration_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  oai_put_voice_connector_termination_request OAIPutVoiceConnectorTermination_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putVoiceConnectorTermination(const QString &voice_connector_id, const OAIPutVoiceConnectorTermination_request &oai_put_voice_connector_termination_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_put_voice_connector_termination_credentials_request OAIPutVoiceConnectorTerminationCredentials_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void putVoiceConnectorTerminationCredentials(const QString &voice_connector_id, const QString &operation, const OAIPutVoiceConnectorTerminationCredentials_request &oai_put_voice_connector_termination_credentials_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  message_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void redactChannelMessage(const QString &channel_arn, const QString &message_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  conversation_id QString [required]
    * @param[in]  message_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void redactConversationMessage(const QString &account_id, const QString &conversation_id, const QString &message_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  message_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void redactRoomMessage(const QString &account_id, const QString &room_id, const QString &message_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  bot_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void regenerateSecurityToken(const QString &account_id, const QString &bot_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void resetPersonalPIN(const QString &account_id, const QString &user_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  phone_number_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void restorePhoneNumber(const QString &phone_number_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  area_code QString [optional]
    * @param[in]  city QString [optional]
    * @param[in]  country QString [optional]
    * @param[in]  state QString [optional]
    * @param[in]  toll_free_prefix QString [optional]
    * @param[in]  phone_number_type QString [optional]
    * @param[in]  max_results qint32 [optional]
    * @param[in]  next_token QString [optional]
    * @param[in]  max_results2 QString [optional]
    * @param[in]  next_token2 QString [optional]
    */
    virtual void searchAvailablePhoneNumbers(const QString &type, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &area_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &city = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &toll_free_prefix = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &phone_number_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &max_results = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &next_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max_results2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &next_token2 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  oai_send_channel_message_request OAISendChannelMessage_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void sendChannelMessage(const QString &channel_arn, const OAISendChannelMessage_request &oai_send_channel_message_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_start_meeting_transcription_request OAIStartMeetingTranscription_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void startMeetingTranscription(const QString &meeting_id, const QString &operation, const OAIStartMeetingTranscription_request &oai_start_meeting_transcription_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void stopMeetingTranscription(const QString &meeting_id, const QString &operation, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  attendee_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_tag_attendee_request OAITagAttendee_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void tagAttendee(const QString &meeting_id, const QString &attendee_id, const QString &operation, const OAITagAttendee_request &oai_tag_attendee_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_tag_meeting_request OAITagMeeting_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void tagMeeting(const QString &meeting_id, const QString &operation, const OAITagMeeting_request &oai_tag_meeting_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  operation QString [required]
    * @param[in]  oai_tag_resource_request OAITagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void tagResource(const QString &operation, const OAITagResource_request &oai_tag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  attendee_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_untag_attendee_request OAIUntagAttendee_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void untagAttendee(const QString &meeting_id, const QString &attendee_id, const QString &operation, const OAIUntagAttendee_request &oai_untag_attendee_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  meeting_id QString [required]
    * @param[in]  operation QString [required]
    * @param[in]  oai_untag_meeting_request OAIUntagMeeting_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void untagMeeting(const QString &meeting_id, const QString &operation, const OAIUntagMeeting_request &oai_untag_meeting_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  operation QString [required]
    * @param[in]  oai_untag_resource_request OAIUntagResource_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void untagResource(const QString &operation, const OAIUntagResource_request &oai_untag_resource_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_update_account_request OAIUpdateAccount_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAccount(const QString &account_id, const OAIUpdateAccount_request &oai_update_account_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  oai_update_account_settings_request OAIUpdateAccountSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateAccountSettings(const QString &account_id, const OAIUpdateAccountSettings_request &oai_update_account_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_arn QString [required]
    * @param[in]  oai_update_app_instance_request OAIUpdateAppInstance_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateAppInstance(const QString &app_instance_arn, const OAIUpdateAppInstance_request &oai_update_app_instance_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  app_instance_user_arn QString [required]
    * @param[in]  oai_update_app_instance_user_request OAIUpdateAppInstanceUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateAppInstanceUser(const QString &app_instance_user_arn, const OAIUpdateAppInstanceUser_request &oai_update_app_instance_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  bot_id QString [required]
    * @param[in]  oai_update_bot_request OAIUpdateBot_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateBot(const QString &account_id, const QString &bot_id, const OAIUpdateBot_request &oai_update_bot_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  oai_update_channel_request OAIUpdateChannel_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateChannel(const QString &channel_arn, const OAIUpdateChannel_request &oai_update_channel_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  message_id QString [required]
    * @param[in]  oai_update_channel_message_request OAIUpdateChannelMessage_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateChannelMessage(const QString &channel_arn, const QString &message_id, const OAIUpdateChannelMessage_request &oai_update_channel_message_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  channel_arn QString [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    * @param[in]  x_amz_chime_bearer QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateChannelReadMarker(const QString &channel_arn, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_chime_bearer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_global_settings_request OAIUpdateGlobalSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateGlobalSettings(const OAIUpdateGlobalSettings_request &oai_update_global_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  phone_number_id QString [required]
    * @param[in]  oai_update_phone_number_request OAIUpdatePhoneNumber_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updatePhoneNumber(const QString &phone_number_id, const OAIUpdatePhoneNumber_request &oai_update_phone_number_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_update_phone_number_settings_request OAIUpdatePhoneNumberSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updatePhoneNumberSettings(const OAIUpdatePhoneNumberSettings_request &oai_update_phone_number_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  proxy_session_id QString [required]
    * @param[in]  oai_update_proxy_session_request OAIUpdateProxySession_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateProxySession(const QString &voice_connector_id, const QString &proxy_session_id, const OAIUpdateProxySession_request &oai_update_proxy_session_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  oai_update_room_request OAIUpdateRoom_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRoom(const QString &account_id, const QString &room_id, const OAIUpdateRoom_request &oai_update_room_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  room_id QString [required]
    * @param[in]  member_id QString [required]
    * @param[in]  oai_update_room_membership_request OAIUpdateRoomMembership_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateRoomMembership(const QString &account_id, const QString &room_id, const QString &member_id, const OAIUpdateRoomMembership_request &oai_update_room_membership_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_media_application_id QString [required]
    * @param[in]  oai_update_sip_media_application_request OAIUpdateSipMediaApplication_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateSipMediaApplication(const QString &sip_media_application_id, const OAIUpdateSipMediaApplication_request &oai_update_sip_media_application_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_media_application_id QString [required]
    * @param[in]  transaction_id QString [required]
    * @param[in]  oai_update_sip_media_application_call_request OAIUpdateSipMediaApplicationCall_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateSipMediaApplicationCall(const QString &sip_media_application_id, const QString &transaction_id, const OAIUpdateSipMediaApplicationCall_request &oai_update_sip_media_application_call_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sip_rule_id QString [required]
    * @param[in]  oai_update_sip_rule_request OAIUpdateSipRule_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateSipRule(const QString &sip_rule_id, const OAIUpdateSipRule_request &oai_update_sip_rule_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_update_user_request OAIUpdateUser_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateUser(const QString &account_id, const QString &user_id, const OAIUpdateUser_request &oai_update_user_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account_id QString [required]
    * @param[in]  user_id QString [required]
    * @param[in]  oai_update_user_settings_request OAIUpdateUserSettings_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    virtual void updateUserSettings(const QString &account_id, const QString &user_id, const OAIUpdateUserSettings_request &oai_update_user_settings_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_id QString [required]
    * @param[in]  oai_update_voice_connector_request OAIUpdateVoiceConnector_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateVoiceConnector(const QString &voice_connector_id, const OAIUpdateVoiceConnector_request &oai_update_voice_connector_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  voice_connector_group_id QString [required]
    * @param[in]  oai_update_voice_connector_group_request OAIUpdateVoiceConnectorGroup_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void updateVoiceConnectorGroup(const QString &voice_connector_group_id, const OAIUpdateVoiceConnectorGroup_request &oai_update_voice_connector_group_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_validate_e911_address_request OAIValidateE911Address_request [required]
    * @param[in]  x_amz_content_sha256 QString [optional]
    * @param[in]  x_amz_date QString [optional]
    * @param[in]  x_amz_algorithm QString [optional]
    * @param[in]  x_amz_credential QString [optional]
    * @param[in]  x_amz_security_token QString [optional]
    * @param[in]  x_amz_signature QString [optional]
    * @param[in]  x_amz_signed_headers QString [optional]
    */
    Q_DECL_DEPRECATED virtual void validateE911Address(const OAIValidateE911Address_request &oai_validate_e911_address_request, const ::OpenAPI::OptionalParam<QString> &x_amz_content_sha256 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_date = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_algorithm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_credential = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_security_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signature = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &x_amz_signed_headers = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void associatePhoneNumberWithUserCallback(OAIHttpRequestWorker *worker);
    void associatePhoneNumbersWithVoiceConnectorCallback(OAIHttpRequestWorker *worker);
    void associatePhoneNumbersWithVoiceConnectorGroupCallback(OAIHttpRequestWorker *worker);
    void associateSigninDelegateGroupsWithAccountCallback(OAIHttpRequestWorker *worker);
    void batchCreateAttendeeCallback(OAIHttpRequestWorker *worker);
    void batchCreateChannelMembershipCallback(OAIHttpRequestWorker *worker);
    void batchCreateRoomMembershipCallback(OAIHttpRequestWorker *worker);
    void batchDeletePhoneNumberCallback(OAIHttpRequestWorker *worker);
    void batchSuspendUserCallback(OAIHttpRequestWorker *worker);
    void batchUnsuspendUserCallback(OAIHttpRequestWorker *worker);
    void batchUpdatePhoneNumberCallback(OAIHttpRequestWorker *worker);
    void batchUpdateUserCallback(OAIHttpRequestWorker *worker);
    void createAccountCallback(OAIHttpRequestWorker *worker);
    void createAppInstanceCallback(OAIHttpRequestWorker *worker);
    void createAppInstanceAdminCallback(OAIHttpRequestWorker *worker);
    void createAppInstanceUserCallback(OAIHttpRequestWorker *worker);
    void createAttendeeCallback(OAIHttpRequestWorker *worker);
    void createBotCallback(OAIHttpRequestWorker *worker);
    void createChannelCallback(OAIHttpRequestWorker *worker);
    void createChannelBanCallback(OAIHttpRequestWorker *worker);
    void createChannelMembershipCallback(OAIHttpRequestWorker *worker);
    void createChannelModeratorCallback(OAIHttpRequestWorker *worker);
    void createMediaCapturePipelineCallback(OAIHttpRequestWorker *worker);
    void createMeetingCallback(OAIHttpRequestWorker *worker);
    void createMeetingDialOutCallback(OAIHttpRequestWorker *worker);
    void createMeetingWithAttendeesCallback(OAIHttpRequestWorker *worker);
    void createPhoneNumberOrderCallback(OAIHttpRequestWorker *worker);
    void createProxySessionCallback(OAIHttpRequestWorker *worker);
    void createRoomCallback(OAIHttpRequestWorker *worker);
    void createRoomMembershipCallback(OAIHttpRequestWorker *worker);
    void createSipMediaApplicationCallback(OAIHttpRequestWorker *worker);
    void createSipMediaApplicationCallCallback(OAIHttpRequestWorker *worker);
    void createSipRuleCallback(OAIHttpRequestWorker *worker);
    void createUserCallback(OAIHttpRequestWorker *worker);
    void createVoiceConnectorCallback(OAIHttpRequestWorker *worker);
    void createVoiceConnectorGroupCallback(OAIHttpRequestWorker *worker);
    void deleteAccountCallback(OAIHttpRequestWorker *worker);
    void deleteAppInstanceCallback(OAIHttpRequestWorker *worker);
    void deleteAppInstanceAdminCallback(OAIHttpRequestWorker *worker);
    void deleteAppInstanceStreamingConfigurationsCallback(OAIHttpRequestWorker *worker);
    void deleteAppInstanceUserCallback(OAIHttpRequestWorker *worker);
    void deleteAttendeeCallback(OAIHttpRequestWorker *worker);
    void deleteChannelCallback(OAIHttpRequestWorker *worker);
    void deleteChannelBanCallback(OAIHttpRequestWorker *worker);
    void deleteChannelMembershipCallback(OAIHttpRequestWorker *worker);
    void deleteChannelMessageCallback(OAIHttpRequestWorker *worker);
    void deleteChannelModeratorCallback(OAIHttpRequestWorker *worker);
    void deleteEventsConfigurationCallback(OAIHttpRequestWorker *worker);
    void deleteMediaCapturePipelineCallback(OAIHttpRequestWorker *worker);
    void deleteMeetingCallback(OAIHttpRequestWorker *worker);
    void deletePhoneNumberCallback(OAIHttpRequestWorker *worker);
    void deleteProxySessionCallback(OAIHttpRequestWorker *worker);
    void deleteRoomCallback(OAIHttpRequestWorker *worker);
    void deleteRoomMembershipCallback(OAIHttpRequestWorker *worker);
    void deleteSipMediaApplicationCallback(OAIHttpRequestWorker *worker);
    void deleteSipRuleCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorEmergencyCallingConfigurationCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorGroupCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorOriginationCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorProxyCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorStreamingConfigurationCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorTerminationCallback(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorTerminationCredentialsCallback(OAIHttpRequestWorker *worker);
    void describeAppInstanceCallback(OAIHttpRequestWorker *worker);
    void describeAppInstanceAdminCallback(OAIHttpRequestWorker *worker);
    void describeAppInstanceUserCallback(OAIHttpRequestWorker *worker);
    void describeChannelCallback(OAIHttpRequestWorker *worker);
    void describeChannelBanCallback(OAIHttpRequestWorker *worker);
    void describeChannelMembershipCallback(OAIHttpRequestWorker *worker);
    void describeChannelMembershipForAppInstanceUserCallback(OAIHttpRequestWorker *worker);
    void describeChannelModeratedByAppInstanceUserCallback(OAIHttpRequestWorker *worker);
    void describeChannelModeratorCallback(OAIHttpRequestWorker *worker);
    void disassociatePhoneNumberFromUserCallback(OAIHttpRequestWorker *worker);
    void disassociatePhoneNumbersFromVoiceConnectorCallback(OAIHttpRequestWorker *worker);
    void disassociatePhoneNumbersFromVoiceConnectorGroupCallback(OAIHttpRequestWorker *worker);
    void disassociateSigninDelegateGroupsFromAccountCallback(OAIHttpRequestWorker *worker);
    void getAccountCallback(OAIHttpRequestWorker *worker);
    void getAccountSettingsCallback(OAIHttpRequestWorker *worker);
    void getAppInstanceRetentionSettingsCallback(OAIHttpRequestWorker *worker);
    void getAppInstanceStreamingConfigurationsCallback(OAIHttpRequestWorker *worker);
    void getAttendeeCallback(OAIHttpRequestWorker *worker);
    void getBotCallback(OAIHttpRequestWorker *worker);
    void getChannelMessageCallback(OAIHttpRequestWorker *worker);
    void getEventsConfigurationCallback(OAIHttpRequestWorker *worker);
    void getGlobalSettingsCallback(OAIHttpRequestWorker *worker);
    void getMediaCapturePipelineCallback(OAIHttpRequestWorker *worker);
    void getMeetingCallback(OAIHttpRequestWorker *worker);
    void getMessagingSessionEndpointCallback(OAIHttpRequestWorker *worker);
    void getPhoneNumberCallback(OAIHttpRequestWorker *worker);
    void getPhoneNumberOrderCallback(OAIHttpRequestWorker *worker);
    void getPhoneNumberSettingsCallback(OAIHttpRequestWorker *worker);
    void getProxySessionCallback(OAIHttpRequestWorker *worker);
    void getRetentionSettingsCallback(OAIHttpRequestWorker *worker);
    void getRoomCallback(OAIHttpRequestWorker *worker);
    void getSipMediaApplicationCallback(OAIHttpRequestWorker *worker);
    void getSipMediaApplicationLoggingConfigurationCallback(OAIHttpRequestWorker *worker);
    void getSipRuleCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserSettingsCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorEmergencyCallingConfigurationCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorGroupCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorLoggingConfigurationCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorOriginationCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorProxyCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorStreamingConfigurationCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorTerminationCallback(OAIHttpRequestWorker *worker);
    void getVoiceConnectorTerminationHealthCallback(OAIHttpRequestWorker *worker);
    void inviteUsersCallback(OAIHttpRequestWorker *worker);
    void listAccountsCallback(OAIHttpRequestWorker *worker);
    void listAppInstanceAdminsCallback(OAIHttpRequestWorker *worker);
    void listAppInstanceUsersCallback(OAIHttpRequestWorker *worker);
    void listAppInstancesCallback(OAIHttpRequestWorker *worker);
    void listAttendeeTagsCallback(OAIHttpRequestWorker *worker);
    void listAttendeesCallback(OAIHttpRequestWorker *worker);
    void listBotsCallback(OAIHttpRequestWorker *worker);
    void listChannelBansCallback(OAIHttpRequestWorker *worker);
    void listChannelMembershipsCallback(OAIHttpRequestWorker *worker);
    void listChannelMembershipsForAppInstanceUserCallback(OAIHttpRequestWorker *worker);
    void listChannelMessagesCallback(OAIHttpRequestWorker *worker);
    void listChannelModeratorsCallback(OAIHttpRequestWorker *worker);
    void listChannelsCallback(OAIHttpRequestWorker *worker);
    void listChannelsModeratedByAppInstanceUserCallback(OAIHttpRequestWorker *worker);
    void listMediaCapturePipelinesCallback(OAIHttpRequestWorker *worker);
    void listMeetingTagsCallback(OAIHttpRequestWorker *worker);
    void listMeetingsCallback(OAIHttpRequestWorker *worker);
    void listPhoneNumberOrdersCallback(OAIHttpRequestWorker *worker);
    void listPhoneNumbersCallback(OAIHttpRequestWorker *worker);
    void listProxySessionsCallback(OAIHttpRequestWorker *worker);
    void listRoomMembershipsCallback(OAIHttpRequestWorker *worker);
    void listRoomsCallback(OAIHttpRequestWorker *worker);
    void listSipMediaApplicationsCallback(OAIHttpRequestWorker *worker);
    void listSipRulesCallback(OAIHttpRequestWorker *worker);
    void listSupportedPhoneNumberCountriesCallback(OAIHttpRequestWorker *worker);
    void listTagsForResourceCallback(OAIHttpRequestWorker *worker);
    void listUsersCallback(OAIHttpRequestWorker *worker);
    void listVoiceConnectorGroupsCallback(OAIHttpRequestWorker *worker);
    void listVoiceConnectorTerminationCredentialsCallback(OAIHttpRequestWorker *worker);
    void listVoiceConnectorsCallback(OAIHttpRequestWorker *worker);
    void logoutUserCallback(OAIHttpRequestWorker *worker);
    void putAppInstanceRetentionSettingsCallback(OAIHttpRequestWorker *worker);
    void putAppInstanceStreamingConfigurationsCallback(OAIHttpRequestWorker *worker);
    void putEventsConfigurationCallback(OAIHttpRequestWorker *worker);
    void putRetentionSettingsCallback(OAIHttpRequestWorker *worker);
    void putSipMediaApplicationLoggingConfigurationCallback(OAIHttpRequestWorker *worker);
    void putVoiceConnectorEmergencyCallingConfigurationCallback(OAIHttpRequestWorker *worker);
    void putVoiceConnectorLoggingConfigurationCallback(OAIHttpRequestWorker *worker);
    void putVoiceConnectorOriginationCallback(OAIHttpRequestWorker *worker);
    void putVoiceConnectorProxyCallback(OAIHttpRequestWorker *worker);
    void putVoiceConnectorStreamingConfigurationCallback(OAIHttpRequestWorker *worker);
    void putVoiceConnectorTerminationCallback(OAIHttpRequestWorker *worker);
    void putVoiceConnectorTerminationCredentialsCallback(OAIHttpRequestWorker *worker);
    void redactChannelMessageCallback(OAIHttpRequestWorker *worker);
    void redactConversationMessageCallback(OAIHttpRequestWorker *worker);
    void redactRoomMessageCallback(OAIHttpRequestWorker *worker);
    void regenerateSecurityTokenCallback(OAIHttpRequestWorker *worker);
    void resetPersonalPINCallback(OAIHttpRequestWorker *worker);
    void restorePhoneNumberCallback(OAIHttpRequestWorker *worker);
    void searchAvailablePhoneNumbersCallback(OAIHttpRequestWorker *worker);
    void sendChannelMessageCallback(OAIHttpRequestWorker *worker);
    void startMeetingTranscriptionCallback(OAIHttpRequestWorker *worker);
    void stopMeetingTranscriptionCallback(OAIHttpRequestWorker *worker);
    void tagAttendeeCallback(OAIHttpRequestWorker *worker);
    void tagMeetingCallback(OAIHttpRequestWorker *worker);
    void tagResourceCallback(OAIHttpRequestWorker *worker);
    void untagAttendeeCallback(OAIHttpRequestWorker *worker);
    void untagMeetingCallback(OAIHttpRequestWorker *worker);
    void untagResourceCallback(OAIHttpRequestWorker *worker);
    void updateAccountCallback(OAIHttpRequestWorker *worker);
    void updateAccountSettingsCallback(OAIHttpRequestWorker *worker);
    void updateAppInstanceCallback(OAIHttpRequestWorker *worker);
    void updateAppInstanceUserCallback(OAIHttpRequestWorker *worker);
    void updateBotCallback(OAIHttpRequestWorker *worker);
    void updateChannelCallback(OAIHttpRequestWorker *worker);
    void updateChannelMessageCallback(OAIHttpRequestWorker *worker);
    void updateChannelReadMarkerCallback(OAIHttpRequestWorker *worker);
    void updateGlobalSettingsCallback(OAIHttpRequestWorker *worker);
    void updatePhoneNumberCallback(OAIHttpRequestWorker *worker);
    void updatePhoneNumberSettingsCallback(OAIHttpRequestWorker *worker);
    void updateProxySessionCallback(OAIHttpRequestWorker *worker);
    void updateRoomCallback(OAIHttpRequestWorker *worker);
    void updateRoomMembershipCallback(OAIHttpRequestWorker *worker);
    void updateSipMediaApplicationCallback(OAIHttpRequestWorker *worker);
    void updateSipMediaApplicationCallCallback(OAIHttpRequestWorker *worker);
    void updateSipRuleCallback(OAIHttpRequestWorker *worker);
    void updateUserCallback(OAIHttpRequestWorker *worker);
    void updateUserSettingsCallback(OAIHttpRequestWorker *worker);
    void updateVoiceConnectorCallback(OAIHttpRequestWorker *worker);
    void updateVoiceConnectorGroupCallback(OAIHttpRequestWorker *worker);
    void validateE911AddressCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void associatePhoneNumberWithUserSignal(OAIObject summary);
    void associatePhoneNumbersWithVoiceConnectorSignal(OAIAssociatePhoneNumbersWithVoiceConnectorResponse summary);
    void associatePhoneNumbersWithVoiceConnectorGroupSignal(OAIAssociatePhoneNumbersWithVoiceConnectorGroupResponse summary);
    void associateSigninDelegateGroupsWithAccountSignal(OAIObject summary);
    void batchCreateAttendeeSignal(OAIBatchCreateAttendeeResponse summary);
    void batchCreateChannelMembershipSignal(OAIBatchCreateChannelMembershipResponse summary);
    void batchCreateRoomMembershipSignal(OAIBatchCreateRoomMembershipResponse summary);
    void batchDeletePhoneNumberSignal(OAIBatchDeletePhoneNumberResponse summary);
    void batchSuspendUserSignal(OAIBatchSuspendUserResponse summary);
    void batchUnsuspendUserSignal(OAIBatchUnsuspendUserResponse summary);
    void batchUpdatePhoneNumberSignal(OAIBatchUpdatePhoneNumberResponse summary);
    void batchUpdateUserSignal(OAIBatchUpdateUserResponse summary);
    void createAccountSignal(OAICreateAccountResponse summary);
    void createAppInstanceSignal(OAICreateAppInstanceResponse summary);
    void createAppInstanceAdminSignal(OAICreateAppInstanceAdminResponse summary);
    void createAppInstanceUserSignal(OAICreateAppInstanceUserResponse summary);
    void createAttendeeSignal(OAICreateAttendeeResponse summary);
    void createBotSignal(OAICreateBotResponse summary);
    void createChannelSignal(OAICreateChannelResponse summary);
    void createChannelBanSignal(OAICreateChannelBanResponse summary);
    void createChannelMembershipSignal(OAICreateChannelMembershipResponse summary);
    void createChannelModeratorSignal(OAICreateChannelModeratorResponse summary);
    void createMediaCapturePipelineSignal(OAICreateMediaCapturePipelineResponse summary);
    void createMeetingSignal(OAICreateMeetingResponse summary);
    void createMeetingDialOutSignal(OAICreateMeetingDialOutResponse summary);
    void createMeetingWithAttendeesSignal(OAICreateMeetingWithAttendeesResponse summary);
    void createPhoneNumberOrderSignal(OAICreatePhoneNumberOrderResponse summary);
    void createProxySessionSignal(OAICreateProxySessionResponse summary);
    void createRoomSignal(OAICreateRoomResponse summary);
    void createRoomMembershipSignal(OAICreateRoomMembershipResponse summary);
    void createSipMediaApplicationSignal(OAICreateSipMediaApplicationResponse summary);
    void createSipMediaApplicationCallSignal(OAICreateSipMediaApplicationCallResponse summary);
    void createSipRuleSignal(OAICreateSipRuleResponse summary);
    void createUserSignal(OAICreateUserResponse summary);
    void createVoiceConnectorSignal(OAICreateVoiceConnectorResponse summary);
    void createVoiceConnectorGroupSignal(OAICreateVoiceConnectorGroupResponse summary);
    void deleteAccountSignal(OAIObject summary);
    void deleteAppInstanceSignal();
    void deleteAppInstanceAdminSignal();
    void deleteAppInstanceStreamingConfigurationsSignal();
    void deleteAppInstanceUserSignal();
    void deleteAttendeeSignal();
    void deleteChannelSignal();
    void deleteChannelBanSignal();
    void deleteChannelMembershipSignal();
    void deleteChannelMessageSignal();
    void deleteChannelModeratorSignal();
    void deleteEventsConfigurationSignal();
    void deleteMediaCapturePipelineSignal();
    void deleteMeetingSignal();
    void deletePhoneNumberSignal();
    void deleteProxySessionSignal();
    void deleteRoomSignal();
    void deleteRoomMembershipSignal();
    void deleteSipMediaApplicationSignal();
    void deleteSipRuleSignal();
    void deleteVoiceConnectorSignal();
    void deleteVoiceConnectorEmergencyCallingConfigurationSignal();
    void deleteVoiceConnectorGroupSignal();
    void deleteVoiceConnectorOriginationSignal();
    void deleteVoiceConnectorProxySignal();
    void deleteVoiceConnectorStreamingConfigurationSignal();
    void deleteVoiceConnectorTerminationSignal();
    void deleteVoiceConnectorTerminationCredentialsSignal();
    void describeAppInstanceSignal(OAIDescribeAppInstanceResponse summary);
    void describeAppInstanceAdminSignal(OAIDescribeAppInstanceAdminResponse summary);
    void describeAppInstanceUserSignal(OAIDescribeAppInstanceUserResponse summary);
    void describeChannelSignal(OAIDescribeChannelResponse summary);
    void describeChannelBanSignal(OAIDescribeChannelBanResponse summary);
    void describeChannelMembershipSignal(OAIDescribeChannelMembershipResponse summary);
    void describeChannelMembershipForAppInstanceUserSignal(OAIDescribeChannelMembershipForAppInstanceUserResponse summary);
    void describeChannelModeratedByAppInstanceUserSignal(OAIDescribeChannelModeratedByAppInstanceUserResponse summary);
    void describeChannelModeratorSignal(OAIDescribeChannelModeratorResponse summary);
    void disassociatePhoneNumberFromUserSignal(OAIObject summary);
    void disassociatePhoneNumbersFromVoiceConnectorSignal(OAIDisassociatePhoneNumbersFromVoiceConnectorResponse summary);
    void disassociatePhoneNumbersFromVoiceConnectorGroupSignal(OAIDisassociatePhoneNumbersFromVoiceConnectorGroupResponse summary);
    void disassociateSigninDelegateGroupsFromAccountSignal(OAIObject summary);
    void getAccountSignal(OAIGetAccountResponse summary);
    void getAccountSettingsSignal(OAIGetAccountSettingsResponse summary);
    void getAppInstanceRetentionSettingsSignal(OAIGetAppInstanceRetentionSettingsResponse summary);
    void getAppInstanceStreamingConfigurationsSignal(OAIGetAppInstanceStreamingConfigurationsResponse summary);
    void getAttendeeSignal(OAIGetAttendeeResponse summary);
    void getBotSignal(OAIGetBotResponse summary);
    void getChannelMessageSignal(OAIGetChannelMessageResponse summary);
    void getEventsConfigurationSignal(OAIGetEventsConfigurationResponse summary);
    void getGlobalSettingsSignal(OAIGetGlobalSettingsResponse summary);
    void getMediaCapturePipelineSignal(OAIGetMediaCapturePipelineResponse summary);
    void getMeetingSignal(OAIGetMeetingResponse summary);
    void getMessagingSessionEndpointSignal(OAIGetMessagingSessionEndpointResponse summary);
    void getPhoneNumberSignal(OAIGetPhoneNumberResponse summary);
    void getPhoneNumberOrderSignal(OAIGetPhoneNumberOrderResponse summary);
    void getPhoneNumberSettingsSignal(OAIGetPhoneNumberSettingsResponse summary);
    void getProxySessionSignal(OAIGetProxySessionResponse summary);
    void getRetentionSettingsSignal(OAIGetRetentionSettingsResponse summary);
    void getRoomSignal(OAIGetRoomResponse summary);
    void getSipMediaApplicationSignal(OAIGetSipMediaApplicationResponse summary);
    void getSipMediaApplicationLoggingConfigurationSignal(OAIGetSipMediaApplicationLoggingConfigurationResponse summary);
    void getSipRuleSignal(OAIGetSipRuleResponse summary);
    void getUserSignal(OAIGetUserResponse summary);
    void getUserSettingsSignal(OAIGetUserSettingsResponse summary);
    void getVoiceConnectorSignal(OAIGetVoiceConnectorResponse summary);
    void getVoiceConnectorEmergencyCallingConfigurationSignal(OAIGetVoiceConnectorEmergencyCallingConfigurationResponse summary);
    void getVoiceConnectorGroupSignal(OAIGetVoiceConnectorGroupResponse summary);
    void getVoiceConnectorLoggingConfigurationSignal(OAIGetVoiceConnectorLoggingConfigurationResponse summary);
    void getVoiceConnectorOriginationSignal(OAIGetVoiceConnectorOriginationResponse summary);
    void getVoiceConnectorProxySignal(OAIGetVoiceConnectorProxyResponse summary);
    void getVoiceConnectorStreamingConfigurationSignal(OAIGetVoiceConnectorStreamingConfigurationResponse summary);
    void getVoiceConnectorTerminationSignal(OAIGetVoiceConnectorTerminationResponse summary);
    void getVoiceConnectorTerminationHealthSignal(OAIGetVoiceConnectorTerminationHealthResponse summary);
    void inviteUsersSignal(OAIInviteUsersResponse summary);
    void listAccountsSignal(OAIListAccountsResponse summary);
    void listAppInstanceAdminsSignal(OAIListAppInstanceAdminsResponse summary);
    void listAppInstanceUsersSignal(OAIListAppInstanceUsersResponse summary);
    void listAppInstancesSignal(OAIListAppInstancesResponse summary);
    void listAttendeeTagsSignal(OAIListAttendeeTagsResponse summary);
    void listAttendeesSignal(OAIListAttendeesResponse summary);
    void listBotsSignal(OAIListBotsResponse summary);
    void listChannelBansSignal(OAIListChannelBansResponse summary);
    void listChannelMembershipsSignal(OAIListChannelMembershipsResponse summary);
    void listChannelMembershipsForAppInstanceUserSignal(OAIListChannelMembershipsForAppInstanceUserResponse summary);
    void listChannelMessagesSignal(OAIListChannelMessagesResponse summary);
    void listChannelModeratorsSignal(OAIListChannelModeratorsResponse summary);
    void listChannelsSignal(OAIListChannelsResponse summary);
    void listChannelsModeratedByAppInstanceUserSignal(OAIListChannelsModeratedByAppInstanceUserResponse summary);
    void listMediaCapturePipelinesSignal(OAIListMediaCapturePipelinesResponse summary);
    void listMeetingTagsSignal(OAIListMeetingTagsResponse summary);
    void listMeetingsSignal(OAIListMeetingsResponse summary);
    void listPhoneNumberOrdersSignal(OAIListPhoneNumberOrdersResponse summary);
    void listPhoneNumbersSignal(OAIListPhoneNumbersResponse summary);
    void listProxySessionsSignal(OAIListProxySessionsResponse summary);
    void listRoomMembershipsSignal(OAIListRoomMembershipsResponse summary);
    void listRoomsSignal(OAIListRoomsResponse summary);
    void listSipMediaApplicationsSignal(OAIListSipMediaApplicationsResponse summary);
    void listSipRulesSignal(OAIListSipRulesResponse summary);
    void listSupportedPhoneNumberCountriesSignal(OAIListSupportedPhoneNumberCountriesResponse summary);
    void listTagsForResourceSignal(OAIListTagsForResourceResponse summary);
    void listUsersSignal(OAIListUsersResponse summary);
    void listVoiceConnectorGroupsSignal(OAIListVoiceConnectorGroupsResponse summary);
    void listVoiceConnectorTerminationCredentialsSignal(OAIListVoiceConnectorTerminationCredentialsResponse summary);
    void listVoiceConnectorsSignal(OAIListVoiceConnectorsResponse summary);
    void logoutUserSignal(OAIObject summary);
    void putAppInstanceRetentionSettingsSignal(OAIPutAppInstanceRetentionSettingsResponse summary);
    void putAppInstanceStreamingConfigurationsSignal(OAIPutAppInstanceStreamingConfigurationsResponse summary);
    void putEventsConfigurationSignal(OAIPutEventsConfigurationResponse summary);
    void putRetentionSettingsSignal(OAIPutRetentionSettingsResponse summary);
    void putSipMediaApplicationLoggingConfigurationSignal(OAIPutSipMediaApplicationLoggingConfigurationResponse summary);
    void putVoiceConnectorEmergencyCallingConfigurationSignal(OAIPutVoiceConnectorEmergencyCallingConfigurationResponse summary);
    void putVoiceConnectorLoggingConfigurationSignal(OAIPutVoiceConnectorLoggingConfigurationResponse summary);
    void putVoiceConnectorOriginationSignal(OAIPutVoiceConnectorOriginationResponse summary);
    void putVoiceConnectorProxySignal(OAIPutVoiceConnectorProxyResponse summary);
    void putVoiceConnectorStreamingConfigurationSignal(OAIPutVoiceConnectorStreamingConfigurationResponse summary);
    void putVoiceConnectorTerminationSignal(OAIPutVoiceConnectorTerminationResponse summary);
    void putVoiceConnectorTerminationCredentialsSignal();
    void redactChannelMessageSignal(OAIRedactChannelMessageResponse summary);
    void redactConversationMessageSignal(OAIObject summary);
    void redactRoomMessageSignal(OAIObject summary);
    void regenerateSecurityTokenSignal(OAIRegenerateSecurityTokenResponse summary);
    void resetPersonalPINSignal(OAIResetPersonalPINResponse summary);
    void restorePhoneNumberSignal(OAIRestorePhoneNumberResponse summary);
    void searchAvailablePhoneNumbersSignal(OAISearchAvailablePhoneNumbersResponse summary);
    void sendChannelMessageSignal(OAISendChannelMessageResponse summary);
    void startMeetingTranscriptionSignal(OAIObject summary);
    void stopMeetingTranscriptionSignal(OAIObject summary);
    void tagAttendeeSignal();
    void tagMeetingSignal();
    void tagResourceSignal();
    void untagAttendeeSignal();
    void untagMeetingSignal();
    void untagResourceSignal();
    void updateAccountSignal(OAIUpdateAccountResponse summary);
    void updateAccountSettingsSignal(OAIObject summary);
    void updateAppInstanceSignal(OAIUpdateAppInstanceResponse summary);
    void updateAppInstanceUserSignal(OAIUpdateAppInstanceUserResponse summary);
    void updateBotSignal(OAIUpdateBotResponse summary);
    void updateChannelSignal(OAIUpdateChannelResponse summary);
    void updateChannelMessageSignal(OAIUpdateChannelMessageResponse summary);
    void updateChannelReadMarkerSignal(OAIUpdateChannelReadMarkerResponse summary);
    void updateGlobalSettingsSignal();
    void updatePhoneNumberSignal(OAIUpdatePhoneNumberResponse summary);
    void updatePhoneNumberSettingsSignal();
    void updateProxySessionSignal(OAIUpdateProxySessionResponse summary);
    void updateRoomSignal(OAIUpdateRoomResponse summary);
    void updateRoomMembershipSignal(OAIUpdateRoomMembershipResponse summary);
    void updateSipMediaApplicationSignal(OAIUpdateSipMediaApplicationResponse summary);
    void updateSipMediaApplicationCallSignal(OAIUpdateSipMediaApplicationCallResponse summary);
    void updateSipRuleSignal(OAIUpdateSipRuleResponse summary);
    void updateUserSignal(OAIUpdateUserResponse summary);
    void updateUserSettingsSignal();
    void updateVoiceConnectorSignal(OAIUpdateVoiceConnectorResponse summary);
    void updateVoiceConnectorGroupSignal(OAIUpdateVoiceConnectorGroupResponse summary);
    void validateE911AddressSignal(OAIValidateE911AddressResponse summary);


    void associatePhoneNumberWithUserSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void associatePhoneNumbersWithVoiceConnectorSignalFull(OAIHttpRequestWorker *worker, OAIAssociatePhoneNumbersWithVoiceConnectorResponse summary);
    void associatePhoneNumbersWithVoiceConnectorGroupSignalFull(OAIHttpRequestWorker *worker, OAIAssociatePhoneNumbersWithVoiceConnectorGroupResponse summary);
    void associateSigninDelegateGroupsWithAccountSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void batchCreateAttendeeSignalFull(OAIHttpRequestWorker *worker, OAIBatchCreateAttendeeResponse summary);
    void batchCreateChannelMembershipSignalFull(OAIHttpRequestWorker *worker, OAIBatchCreateChannelMembershipResponse summary);
    void batchCreateRoomMembershipSignalFull(OAIHttpRequestWorker *worker, OAIBatchCreateRoomMembershipResponse summary);
    void batchDeletePhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIBatchDeletePhoneNumberResponse summary);
    void batchSuspendUserSignalFull(OAIHttpRequestWorker *worker, OAIBatchSuspendUserResponse summary);
    void batchUnsuspendUserSignalFull(OAIHttpRequestWorker *worker, OAIBatchUnsuspendUserResponse summary);
    void batchUpdatePhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdatePhoneNumberResponse summary);
    void batchUpdateUserSignalFull(OAIHttpRequestWorker *worker, OAIBatchUpdateUserResponse summary);
    void createAccountSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountResponse summary);
    void createAppInstanceSignalFull(OAIHttpRequestWorker *worker, OAICreateAppInstanceResponse summary);
    void createAppInstanceAdminSignalFull(OAIHttpRequestWorker *worker, OAICreateAppInstanceAdminResponse summary);
    void createAppInstanceUserSignalFull(OAIHttpRequestWorker *worker, OAICreateAppInstanceUserResponse summary);
    void createAttendeeSignalFull(OAIHttpRequestWorker *worker, OAICreateAttendeeResponse summary);
    void createBotSignalFull(OAIHttpRequestWorker *worker, OAICreateBotResponse summary);
    void createChannelSignalFull(OAIHttpRequestWorker *worker, OAICreateChannelResponse summary);
    void createChannelBanSignalFull(OAIHttpRequestWorker *worker, OAICreateChannelBanResponse summary);
    void createChannelMembershipSignalFull(OAIHttpRequestWorker *worker, OAICreateChannelMembershipResponse summary);
    void createChannelModeratorSignalFull(OAIHttpRequestWorker *worker, OAICreateChannelModeratorResponse summary);
    void createMediaCapturePipelineSignalFull(OAIHttpRequestWorker *worker, OAICreateMediaCapturePipelineResponse summary);
    void createMeetingSignalFull(OAIHttpRequestWorker *worker, OAICreateMeetingResponse summary);
    void createMeetingDialOutSignalFull(OAIHttpRequestWorker *worker, OAICreateMeetingDialOutResponse summary);
    void createMeetingWithAttendeesSignalFull(OAIHttpRequestWorker *worker, OAICreateMeetingWithAttendeesResponse summary);
    void createPhoneNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAICreatePhoneNumberOrderResponse summary);
    void createProxySessionSignalFull(OAIHttpRequestWorker *worker, OAICreateProxySessionResponse summary);
    void createRoomSignalFull(OAIHttpRequestWorker *worker, OAICreateRoomResponse summary);
    void createRoomMembershipSignalFull(OAIHttpRequestWorker *worker, OAICreateRoomMembershipResponse summary);
    void createSipMediaApplicationSignalFull(OAIHttpRequestWorker *worker, OAICreateSipMediaApplicationResponse summary);
    void createSipMediaApplicationCallSignalFull(OAIHttpRequestWorker *worker, OAICreateSipMediaApplicationCallResponse summary);
    void createSipRuleSignalFull(OAIHttpRequestWorker *worker, OAICreateSipRuleResponse summary);
    void createUserSignalFull(OAIHttpRequestWorker *worker, OAICreateUserResponse summary);
    void createVoiceConnectorSignalFull(OAIHttpRequestWorker *worker, OAICreateVoiceConnectorResponse summary);
    void createVoiceConnectorGroupSignalFull(OAIHttpRequestWorker *worker, OAICreateVoiceConnectorGroupResponse summary);
    void deleteAccountSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void deleteAppInstanceSignalFull(OAIHttpRequestWorker *worker);
    void deleteAppInstanceAdminSignalFull(OAIHttpRequestWorker *worker);
    void deleteAppInstanceStreamingConfigurationsSignalFull(OAIHttpRequestWorker *worker);
    void deleteAppInstanceUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteAttendeeSignalFull(OAIHttpRequestWorker *worker);
    void deleteChannelSignalFull(OAIHttpRequestWorker *worker);
    void deleteChannelBanSignalFull(OAIHttpRequestWorker *worker);
    void deleteChannelMembershipSignalFull(OAIHttpRequestWorker *worker);
    void deleteChannelMessageSignalFull(OAIHttpRequestWorker *worker);
    void deleteChannelModeratorSignalFull(OAIHttpRequestWorker *worker);
    void deleteEventsConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void deleteMediaCapturePipelineSignalFull(OAIHttpRequestWorker *worker);
    void deleteMeetingSignalFull(OAIHttpRequestWorker *worker);
    void deletePhoneNumberSignalFull(OAIHttpRequestWorker *worker);
    void deleteProxySessionSignalFull(OAIHttpRequestWorker *worker);
    void deleteRoomSignalFull(OAIHttpRequestWorker *worker);
    void deleteRoomMembershipSignalFull(OAIHttpRequestWorker *worker);
    void deleteSipMediaApplicationSignalFull(OAIHttpRequestWorker *worker);
    void deleteSipRuleSignalFull(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorSignalFull(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorEmergencyCallingConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorOriginationSignalFull(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorProxySignalFull(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorStreamingConfigurationSignalFull(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorTerminationSignalFull(OAIHttpRequestWorker *worker);
    void deleteVoiceConnectorTerminationCredentialsSignalFull(OAIHttpRequestWorker *worker);
    void describeAppInstanceSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppInstanceResponse summary);
    void describeAppInstanceAdminSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppInstanceAdminResponse summary);
    void describeAppInstanceUserSignalFull(OAIHttpRequestWorker *worker, OAIDescribeAppInstanceUserResponse summary);
    void describeChannelSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChannelResponse summary);
    void describeChannelBanSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChannelBanResponse summary);
    void describeChannelMembershipSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChannelMembershipResponse summary);
    void describeChannelMembershipForAppInstanceUserSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChannelMembershipForAppInstanceUserResponse summary);
    void describeChannelModeratedByAppInstanceUserSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChannelModeratedByAppInstanceUserResponse summary);
    void describeChannelModeratorSignalFull(OAIHttpRequestWorker *worker, OAIDescribeChannelModeratorResponse summary);
    void disassociatePhoneNumberFromUserSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void disassociatePhoneNumbersFromVoiceConnectorSignalFull(OAIHttpRequestWorker *worker, OAIDisassociatePhoneNumbersFromVoiceConnectorResponse summary);
    void disassociatePhoneNumbersFromVoiceConnectorGroupSignalFull(OAIHttpRequestWorker *worker, OAIDisassociatePhoneNumbersFromVoiceConnectorGroupResponse summary);
    void disassociateSigninDelegateGroupsFromAccountSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void getAccountSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountResponse summary);
    void getAccountSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountSettingsResponse summary);
    void getAppInstanceRetentionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetAppInstanceRetentionSettingsResponse summary);
    void getAppInstanceStreamingConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIGetAppInstanceStreamingConfigurationsResponse summary);
    void getAttendeeSignalFull(OAIHttpRequestWorker *worker, OAIGetAttendeeResponse summary);
    void getBotSignalFull(OAIHttpRequestWorker *worker, OAIGetBotResponse summary);
    void getChannelMessageSignalFull(OAIHttpRequestWorker *worker, OAIGetChannelMessageResponse summary);
    void getEventsConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetEventsConfigurationResponse summary);
    void getGlobalSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetGlobalSettingsResponse summary);
    void getMediaCapturePipelineSignalFull(OAIHttpRequestWorker *worker, OAIGetMediaCapturePipelineResponse summary);
    void getMeetingSignalFull(OAIHttpRequestWorker *worker, OAIGetMeetingResponse summary);
    void getMessagingSessionEndpointSignalFull(OAIHttpRequestWorker *worker, OAIGetMessagingSessionEndpointResponse summary);
    void getPhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIGetPhoneNumberResponse summary);
    void getPhoneNumberOrderSignalFull(OAIHttpRequestWorker *worker, OAIGetPhoneNumberOrderResponse summary);
    void getPhoneNumberSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetPhoneNumberSettingsResponse summary);
    void getProxySessionSignalFull(OAIHttpRequestWorker *worker, OAIGetProxySessionResponse summary);
    void getRetentionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetRetentionSettingsResponse summary);
    void getRoomSignalFull(OAIHttpRequestWorker *worker, OAIGetRoomResponse summary);
    void getSipMediaApplicationSignalFull(OAIHttpRequestWorker *worker, OAIGetSipMediaApplicationResponse summary);
    void getSipMediaApplicationLoggingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetSipMediaApplicationLoggingConfigurationResponse summary);
    void getSipRuleSignalFull(OAIHttpRequestWorker *worker, OAIGetSipRuleResponse summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIGetUserResponse summary);
    void getUserSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGetUserSettingsResponse summary);
    void getVoiceConnectorSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorResponse summary);
    void getVoiceConnectorEmergencyCallingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorEmergencyCallingConfigurationResponse summary);
    void getVoiceConnectorGroupSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorGroupResponse summary);
    void getVoiceConnectorLoggingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorLoggingConfigurationResponse summary);
    void getVoiceConnectorOriginationSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorOriginationResponse summary);
    void getVoiceConnectorProxySignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorProxyResponse summary);
    void getVoiceConnectorStreamingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorStreamingConfigurationResponse summary);
    void getVoiceConnectorTerminationSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorTerminationResponse summary);
    void getVoiceConnectorTerminationHealthSignalFull(OAIHttpRequestWorker *worker, OAIGetVoiceConnectorTerminationHealthResponse summary);
    void inviteUsersSignalFull(OAIHttpRequestWorker *worker, OAIInviteUsersResponse summary);
    void listAccountsSignalFull(OAIHttpRequestWorker *worker, OAIListAccountsResponse summary);
    void listAppInstanceAdminsSignalFull(OAIHttpRequestWorker *worker, OAIListAppInstanceAdminsResponse summary);
    void listAppInstanceUsersSignalFull(OAIHttpRequestWorker *worker, OAIListAppInstanceUsersResponse summary);
    void listAppInstancesSignalFull(OAIHttpRequestWorker *worker, OAIListAppInstancesResponse summary);
    void listAttendeeTagsSignalFull(OAIHttpRequestWorker *worker, OAIListAttendeeTagsResponse summary);
    void listAttendeesSignalFull(OAIHttpRequestWorker *worker, OAIListAttendeesResponse summary);
    void listBotsSignalFull(OAIHttpRequestWorker *worker, OAIListBotsResponse summary);
    void listChannelBansSignalFull(OAIHttpRequestWorker *worker, OAIListChannelBansResponse summary);
    void listChannelMembershipsSignalFull(OAIHttpRequestWorker *worker, OAIListChannelMembershipsResponse summary);
    void listChannelMembershipsForAppInstanceUserSignalFull(OAIHttpRequestWorker *worker, OAIListChannelMembershipsForAppInstanceUserResponse summary);
    void listChannelMessagesSignalFull(OAIHttpRequestWorker *worker, OAIListChannelMessagesResponse summary);
    void listChannelModeratorsSignalFull(OAIHttpRequestWorker *worker, OAIListChannelModeratorsResponse summary);
    void listChannelsSignalFull(OAIHttpRequestWorker *worker, OAIListChannelsResponse summary);
    void listChannelsModeratedByAppInstanceUserSignalFull(OAIHttpRequestWorker *worker, OAIListChannelsModeratedByAppInstanceUserResponse summary);
    void listMediaCapturePipelinesSignalFull(OAIHttpRequestWorker *worker, OAIListMediaCapturePipelinesResponse summary);
    void listMeetingTagsSignalFull(OAIHttpRequestWorker *worker, OAIListMeetingTagsResponse summary);
    void listMeetingsSignalFull(OAIHttpRequestWorker *worker, OAIListMeetingsResponse summary);
    void listPhoneNumberOrdersSignalFull(OAIHttpRequestWorker *worker, OAIListPhoneNumberOrdersResponse summary);
    void listPhoneNumbersSignalFull(OAIHttpRequestWorker *worker, OAIListPhoneNumbersResponse summary);
    void listProxySessionsSignalFull(OAIHttpRequestWorker *worker, OAIListProxySessionsResponse summary);
    void listRoomMembershipsSignalFull(OAIHttpRequestWorker *worker, OAIListRoomMembershipsResponse summary);
    void listRoomsSignalFull(OAIHttpRequestWorker *worker, OAIListRoomsResponse summary);
    void listSipMediaApplicationsSignalFull(OAIHttpRequestWorker *worker, OAIListSipMediaApplicationsResponse summary);
    void listSipRulesSignalFull(OAIHttpRequestWorker *worker, OAIListSipRulesResponse summary);
    void listSupportedPhoneNumberCountriesSignalFull(OAIHttpRequestWorker *worker, OAIListSupportedPhoneNumberCountriesResponse summary);
    void listTagsForResourceSignalFull(OAIHttpRequestWorker *worker, OAIListTagsForResourceResponse summary);
    void listUsersSignalFull(OAIHttpRequestWorker *worker, OAIListUsersResponse summary);
    void listVoiceConnectorGroupsSignalFull(OAIHttpRequestWorker *worker, OAIListVoiceConnectorGroupsResponse summary);
    void listVoiceConnectorTerminationCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIListVoiceConnectorTerminationCredentialsResponse summary);
    void listVoiceConnectorsSignalFull(OAIHttpRequestWorker *worker, OAIListVoiceConnectorsResponse summary);
    void logoutUserSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void putAppInstanceRetentionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIPutAppInstanceRetentionSettingsResponse summary);
    void putAppInstanceStreamingConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAIPutAppInstanceStreamingConfigurationsResponse summary);
    void putEventsConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIPutEventsConfigurationResponse summary);
    void putRetentionSettingsSignalFull(OAIHttpRequestWorker *worker, OAIPutRetentionSettingsResponse summary);
    void putSipMediaApplicationLoggingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIPutSipMediaApplicationLoggingConfigurationResponse summary);
    void putVoiceConnectorEmergencyCallingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIPutVoiceConnectorEmergencyCallingConfigurationResponse summary);
    void putVoiceConnectorLoggingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIPutVoiceConnectorLoggingConfigurationResponse summary);
    void putVoiceConnectorOriginationSignalFull(OAIHttpRequestWorker *worker, OAIPutVoiceConnectorOriginationResponse summary);
    void putVoiceConnectorProxySignalFull(OAIHttpRequestWorker *worker, OAIPutVoiceConnectorProxyResponse summary);
    void putVoiceConnectorStreamingConfigurationSignalFull(OAIHttpRequestWorker *worker, OAIPutVoiceConnectorStreamingConfigurationResponse summary);
    void putVoiceConnectorTerminationSignalFull(OAIHttpRequestWorker *worker, OAIPutVoiceConnectorTerminationResponse summary);
    void putVoiceConnectorTerminationCredentialsSignalFull(OAIHttpRequestWorker *worker);
    void redactChannelMessageSignalFull(OAIHttpRequestWorker *worker, OAIRedactChannelMessageResponse summary);
    void redactConversationMessageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void redactRoomMessageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void regenerateSecurityTokenSignalFull(OAIHttpRequestWorker *worker, OAIRegenerateSecurityTokenResponse summary);
    void resetPersonalPINSignalFull(OAIHttpRequestWorker *worker, OAIResetPersonalPINResponse summary);
    void restorePhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIRestorePhoneNumberResponse summary);
    void searchAvailablePhoneNumbersSignalFull(OAIHttpRequestWorker *worker, OAISearchAvailablePhoneNumbersResponse summary);
    void sendChannelMessageSignalFull(OAIHttpRequestWorker *worker, OAISendChannelMessageResponse summary);
    void startMeetingTranscriptionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void stopMeetingTranscriptionSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void tagAttendeeSignalFull(OAIHttpRequestWorker *worker);
    void tagMeetingSignalFull(OAIHttpRequestWorker *worker);
    void tagResourceSignalFull(OAIHttpRequestWorker *worker);
    void untagAttendeeSignalFull(OAIHttpRequestWorker *worker);
    void untagMeetingSignalFull(OAIHttpRequestWorker *worker);
    void untagResourceSignalFull(OAIHttpRequestWorker *worker);
    void updateAccountSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAccountResponse summary);
    void updateAccountSettingsSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void updateAppInstanceSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAppInstanceResponse summary);
    void updateAppInstanceUserSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAppInstanceUserResponse summary);
    void updateBotSignalFull(OAIHttpRequestWorker *worker, OAIUpdateBotResponse summary);
    void updateChannelSignalFull(OAIHttpRequestWorker *worker, OAIUpdateChannelResponse summary);
    void updateChannelMessageSignalFull(OAIHttpRequestWorker *worker, OAIUpdateChannelMessageResponse summary);
    void updateChannelReadMarkerSignalFull(OAIHttpRequestWorker *worker, OAIUpdateChannelReadMarkerResponse summary);
    void updateGlobalSettingsSignalFull(OAIHttpRequestWorker *worker);
    void updatePhoneNumberSignalFull(OAIHttpRequestWorker *worker, OAIUpdatePhoneNumberResponse summary);
    void updatePhoneNumberSettingsSignalFull(OAIHttpRequestWorker *worker);
    void updateProxySessionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateProxySessionResponse summary);
    void updateRoomSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRoomResponse summary);
    void updateRoomMembershipSignalFull(OAIHttpRequestWorker *worker, OAIUpdateRoomMembershipResponse summary);
    void updateSipMediaApplicationSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSipMediaApplicationResponse summary);
    void updateSipMediaApplicationCallSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSipMediaApplicationCallResponse summary);
    void updateSipRuleSignalFull(OAIHttpRequestWorker *worker, OAIUpdateSipRuleResponse summary);
    void updateUserSignalFull(OAIHttpRequestWorker *worker, OAIUpdateUserResponse summary);
    void updateUserSettingsSignalFull(OAIHttpRequestWorker *worker);
    void updateVoiceConnectorSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVoiceConnectorResponse summary);
    void updateVoiceConnectorGroupSignalFull(OAIHttpRequestWorker *worker, OAIUpdateVoiceConnectorGroupResponse summary);
    void validateE911AddressSignalFull(OAIHttpRequestWorker *worker, OAIValidateE911AddressResponse summary);

    Q_DECL_DEPRECATED_X("Use associatePhoneNumberWithUserSignalError() instead")
    void associatePhoneNumberWithUserSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePhoneNumberWithUserSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associatePhoneNumbersWithVoiceConnectorSignalError() instead")
    void associatePhoneNumbersWithVoiceConnectorSignalE(OAIAssociatePhoneNumbersWithVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePhoneNumbersWithVoiceConnectorSignalError(OAIAssociatePhoneNumbersWithVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associatePhoneNumbersWithVoiceConnectorGroupSignalError() instead")
    void associatePhoneNumbersWithVoiceConnectorGroupSignalE(OAIAssociatePhoneNumbersWithVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePhoneNumbersWithVoiceConnectorGroupSignalError(OAIAssociatePhoneNumbersWithVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateSigninDelegateGroupsWithAccountSignalError() instead")
    void associateSigninDelegateGroupsWithAccountSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void associateSigninDelegateGroupsWithAccountSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateAttendeeSignalError() instead")
    void batchCreateAttendeeSignalE(OAIBatchCreateAttendeeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateAttendeeSignalError(OAIBatchCreateAttendeeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateChannelMembershipSignalError() instead")
    void batchCreateChannelMembershipSignalE(OAIBatchCreateChannelMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateChannelMembershipSignalError(OAIBatchCreateChannelMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateRoomMembershipSignalError() instead")
    void batchCreateRoomMembershipSignalE(OAIBatchCreateRoomMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateRoomMembershipSignalError(OAIBatchCreateRoomMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchDeletePhoneNumberSignalError() instead")
    void batchDeletePhoneNumberSignalE(OAIBatchDeletePhoneNumberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDeletePhoneNumberSignalError(OAIBatchDeletePhoneNumberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchSuspendUserSignalError() instead")
    void batchSuspendUserSignalE(OAIBatchSuspendUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchSuspendUserSignalError(OAIBatchSuspendUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUnsuspendUserSignalError() instead")
    void batchUnsuspendUserSignalE(OAIBatchUnsuspendUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUnsuspendUserSignalError(OAIBatchUnsuspendUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUpdatePhoneNumberSignalError() instead")
    void batchUpdatePhoneNumberSignalE(OAIBatchUpdatePhoneNumberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUpdatePhoneNumberSignalError(OAIBatchUpdatePhoneNumberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUpdateUserSignalError() instead")
    void batchUpdateUserSignalE(OAIBatchUpdateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUpdateUserSignalError(OAIBatchUpdateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountSignalError() instead")
    void createAccountSignalE(OAICreateAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalError(OAICreateAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppInstanceSignalError() instead")
    void createAppInstanceSignalE(OAICreateAppInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppInstanceSignalError(OAICreateAppInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppInstanceAdminSignalError() instead")
    void createAppInstanceAdminSignalE(OAICreateAppInstanceAdminResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppInstanceAdminSignalError(OAICreateAppInstanceAdminResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppInstanceUserSignalError() instead")
    void createAppInstanceUserSignalE(OAICreateAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppInstanceUserSignalError(OAICreateAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAttendeeSignalError() instead")
    void createAttendeeSignalE(OAICreateAttendeeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAttendeeSignalError(OAICreateAttendeeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBotSignalError() instead")
    void createBotSignalE(OAICreateBotResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createBotSignalError(OAICreateBotResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelSignalError() instead")
    void createChannelSignalE(OAICreateChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelSignalError(OAICreateChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelBanSignalError() instead")
    void createChannelBanSignalE(OAICreateChannelBanResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelBanSignalError(OAICreateChannelBanResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelMembershipSignalError() instead")
    void createChannelMembershipSignalE(OAICreateChannelMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelMembershipSignalError(OAICreateChannelMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelModeratorSignalError() instead")
    void createChannelModeratorSignalE(OAICreateChannelModeratorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelModeratorSignalError(OAICreateChannelModeratorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMediaCapturePipelineSignalError() instead")
    void createMediaCapturePipelineSignalE(OAICreateMediaCapturePipelineResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMediaCapturePipelineSignalError(OAICreateMediaCapturePipelineResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMeetingSignalError() instead")
    void createMeetingSignalE(OAICreateMeetingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMeetingSignalError(OAICreateMeetingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMeetingDialOutSignalError() instead")
    void createMeetingDialOutSignalE(OAICreateMeetingDialOutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMeetingDialOutSignalError(OAICreateMeetingDialOutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMeetingWithAttendeesSignalError() instead")
    void createMeetingWithAttendeesSignalE(OAICreateMeetingWithAttendeesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createMeetingWithAttendeesSignalError(OAICreateMeetingWithAttendeesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPhoneNumberOrderSignalError() instead")
    void createPhoneNumberOrderSignalE(OAICreatePhoneNumberOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPhoneNumberOrderSignalError(OAICreatePhoneNumberOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProxySessionSignalError() instead")
    void createProxySessionSignalE(OAICreateProxySessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createProxySessionSignalError(OAICreateProxySessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRoomSignalError() instead")
    void createRoomSignalE(OAICreateRoomResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoomSignalError(OAICreateRoomResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRoomMembershipSignalError() instead")
    void createRoomMembershipSignalE(OAICreateRoomMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoomMembershipSignalError(OAICreateRoomMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSipMediaApplicationSignalError() instead")
    void createSipMediaApplicationSignalE(OAICreateSipMediaApplicationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipMediaApplicationSignalError(OAICreateSipMediaApplicationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSipMediaApplicationCallSignalError() instead")
    void createSipMediaApplicationCallSignalE(OAICreateSipMediaApplicationCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipMediaApplicationCallSignalError(OAICreateSipMediaApplicationCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSipRuleSignalError() instead")
    void createSipRuleSignalE(OAICreateSipRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipRuleSignalError(OAICreateSipRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalError() instead")
    void createUserSignalE(OAICreateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalError(OAICreateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVoiceConnectorSignalError() instead")
    void createVoiceConnectorSignalE(OAICreateVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVoiceConnectorSignalError(OAICreateVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVoiceConnectorGroupSignalError() instead")
    void createVoiceConnectorGroupSignalE(OAICreateVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVoiceConnectorGroupSignalError(OAICreateVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalError() instead")
    void deleteAccountSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInstanceSignalError() instead")
    void deleteAppInstanceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInstanceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInstanceAdminSignalError() instead")
    void deleteAppInstanceAdminSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInstanceAdminSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInstanceStreamingConfigurationsSignalError() instead")
    void deleteAppInstanceStreamingConfigurationsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInstanceStreamingConfigurationsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInstanceUserSignalError() instead")
    void deleteAppInstanceUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInstanceUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAttendeeSignalError() instead")
    void deleteAttendeeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAttendeeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelSignalError() instead")
    void deleteChannelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelBanSignalError() instead")
    void deleteChannelBanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelBanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelMembershipSignalError() instead")
    void deleteChannelMembershipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelMembershipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelMessageSignalError() instead")
    void deleteChannelMessageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelMessageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelModeratorSignalError() instead")
    void deleteChannelModeratorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelModeratorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventsConfigurationSignalError() instead")
    void deleteEventsConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventsConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMediaCapturePipelineSignalError() instead")
    void deleteMediaCapturePipelineSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMediaCapturePipelineSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMeetingSignalError() instead")
    void deleteMeetingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMeetingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePhoneNumberSignalError() instead")
    void deletePhoneNumberSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePhoneNumberSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProxySessionSignalError() instead")
    void deleteProxySessionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProxySessionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoomSignalError() instead")
    void deleteRoomSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoomSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoomMembershipSignalError() instead")
    void deleteRoomMembershipSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoomMembershipSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipMediaApplicationSignalError() instead")
    void deleteSipMediaApplicationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipMediaApplicationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipRuleSignalError() instead")
    void deleteSipRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorSignalError() instead")
    void deleteVoiceConnectorSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorEmergencyCallingConfigurationSignalError() instead")
    void deleteVoiceConnectorEmergencyCallingConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorEmergencyCallingConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorGroupSignalError() instead")
    void deleteVoiceConnectorGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorOriginationSignalError() instead")
    void deleteVoiceConnectorOriginationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorOriginationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorProxySignalError() instead")
    void deleteVoiceConnectorProxySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorProxySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorStreamingConfigurationSignalError() instead")
    void deleteVoiceConnectorStreamingConfigurationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorStreamingConfigurationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorTerminationSignalError() instead")
    void deleteVoiceConnectorTerminationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorTerminationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorTerminationCredentialsSignalError() instead")
    void deleteVoiceConnectorTerminationCredentialsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorTerminationCredentialsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppInstanceSignalError() instead")
    void describeAppInstanceSignalE(OAIDescribeAppInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppInstanceSignalError(OAIDescribeAppInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppInstanceAdminSignalError() instead")
    void describeAppInstanceAdminSignalE(OAIDescribeAppInstanceAdminResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppInstanceAdminSignalError(OAIDescribeAppInstanceAdminResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppInstanceUserSignalError() instead")
    void describeAppInstanceUserSignalE(OAIDescribeAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppInstanceUserSignalError(OAIDescribeAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelSignalError() instead")
    void describeChannelSignalE(OAIDescribeChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelSignalError(OAIDescribeChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelBanSignalError() instead")
    void describeChannelBanSignalE(OAIDescribeChannelBanResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelBanSignalError(OAIDescribeChannelBanResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelMembershipSignalError() instead")
    void describeChannelMembershipSignalE(OAIDescribeChannelMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelMembershipSignalError(OAIDescribeChannelMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelMembershipForAppInstanceUserSignalError() instead")
    void describeChannelMembershipForAppInstanceUserSignalE(OAIDescribeChannelMembershipForAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelMembershipForAppInstanceUserSignalError(OAIDescribeChannelMembershipForAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelModeratedByAppInstanceUserSignalError() instead")
    void describeChannelModeratedByAppInstanceUserSignalE(OAIDescribeChannelModeratedByAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelModeratedByAppInstanceUserSignalError(OAIDescribeChannelModeratedByAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelModeratorSignalError() instead")
    void describeChannelModeratorSignalE(OAIDescribeChannelModeratorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelModeratorSignalError(OAIDescribeChannelModeratorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociatePhoneNumberFromUserSignalError() instead")
    void disassociatePhoneNumberFromUserSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociatePhoneNumberFromUserSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociatePhoneNumbersFromVoiceConnectorSignalError() instead")
    void disassociatePhoneNumbersFromVoiceConnectorSignalE(OAIDisassociatePhoneNumbersFromVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociatePhoneNumbersFromVoiceConnectorSignalError(OAIDisassociatePhoneNumbersFromVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociatePhoneNumbersFromVoiceConnectorGroupSignalError() instead")
    void disassociatePhoneNumbersFromVoiceConnectorGroupSignalE(OAIDisassociatePhoneNumbersFromVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociatePhoneNumbersFromVoiceConnectorGroupSignalError(OAIDisassociatePhoneNumbersFromVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateSigninDelegateGroupsFromAccountSignalError() instead")
    void disassociateSigninDelegateGroupsFromAccountSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateSigninDelegateGroupsFromAccountSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalError() instead")
    void getAccountSignalE(OAIGetAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalError(OAIGetAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSettingsSignalError() instead")
    void getAccountSettingsSignalE(OAIGetAccountSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSettingsSignalError(OAIGetAccountSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppInstanceRetentionSettingsSignalError() instead")
    void getAppInstanceRetentionSettingsSignalE(OAIGetAppInstanceRetentionSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppInstanceRetentionSettingsSignalError(OAIGetAppInstanceRetentionSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppInstanceStreamingConfigurationsSignalError() instead")
    void getAppInstanceStreamingConfigurationsSignalE(OAIGetAppInstanceStreamingConfigurationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppInstanceStreamingConfigurationsSignalError(OAIGetAppInstanceStreamingConfigurationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttendeeSignalError() instead")
    void getAttendeeSignalE(OAIGetAttendeeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttendeeSignalError(OAIGetAttendeeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBotSignalError() instead")
    void getBotSignalE(OAIGetBotResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBotSignalError(OAIGetBotResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelMessageSignalError() instead")
    void getChannelMessageSignalE(OAIGetChannelMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelMessageSignalError(OAIGetChannelMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsConfigurationSignalError() instead")
    void getEventsConfigurationSignalE(OAIGetEventsConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsConfigurationSignalError(OAIGetEventsConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlobalSettingsSignalError() instead")
    void getGlobalSettingsSignalE(OAIGetGlobalSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlobalSettingsSignalError(OAIGetGlobalSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaCapturePipelineSignalError() instead")
    void getMediaCapturePipelineSignalE(OAIGetMediaCapturePipelineResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaCapturePipelineSignalError(OAIGetMediaCapturePipelineResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeetingSignalError() instead")
    void getMeetingSignalE(OAIGetMeetingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeetingSignalError(OAIGetMeetingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessagingSessionEndpointSignalError() instead")
    void getMessagingSessionEndpointSignalE(OAIGetMessagingSessionEndpointResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagingSessionEndpointSignalError(OAIGetMessagingSessionEndpointResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhoneNumberSignalError() instead")
    void getPhoneNumberSignalE(OAIGetPhoneNumberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhoneNumberSignalError(OAIGetPhoneNumberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhoneNumberOrderSignalError() instead")
    void getPhoneNumberOrderSignalE(OAIGetPhoneNumberOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhoneNumberOrderSignalError(OAIGetPhoneNumberOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhoneNumberSettingsSignalError() instead")
    void getPhoneNumberSettingsSignalE(OAIGetPhoneNumberSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhoneNumberSettingsSignalError(OAIGetPhoneNumberSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProxySessionSignalError() instead")
    void getProxySessionSignalE(OAIGetProxySessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProxySessionSignalError(OAIGetProxySessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRetentionSettingsSignalError() instead")
    void getRetentionSettingsSignalE(OAIGetRetentionSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRetentionSettingsSignalError(OAIGetRetentionSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRoomSignalError() instead")
    void getRoomSignalE(OAIGetRoomResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoomSignalError(OAIGetRoomResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSipMediaApplicationSignalError() instead")
    void getSipMediaApplicationSignalE(OAIGetSipMediaApplicationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSipMediaApplicationSignalError(OAIGetSipMediaApplicationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSipMediaApplicationLoggingConfigurationSignalError() instead")
    void getSipMediaApplicationLoggingConfigurationSignalE(OAIGetSipMediaApplicationLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSipMediaApplicationLoggingConfigurationSignalError(OAIGetSipMediaApplicationLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSipRuleSignalError() instead")
    void getSipRuleSignalE(OAIGetSipRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSipRuleSignalError(OAIGetSipRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIGetUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIGetUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSettingsSignalError() instead")
    void getUserSettingsSignalE(OAIGetUserSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSettingsSignalError(OAIGetUserSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorSignalError() instead")
    void getVoiceConnectorSignalE(OAIGetVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorSignalError(OAIGetVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorEmergencyCallingConfigurationSignalError() instead")
    void getVoiceConnectorEmergencyCallingConfigurationSignalE(OAIGetVoiceConnectorEmergencyCallingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorEmergencyCallingConfigurationSignalError(OAIGetVoiceConnectorEmergencyCallingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorGroupSignalError() instead")
    void getVoiceConnectorGroupSignalE(OAIGetVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorGroupSignalError(OAIGetVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorLoggingConfigurationSignalError() instead")
    void getVoiceConnectorLoggingConfigurationSignalE(OAIGetVoiceConnectorLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorLoggingConfigurationSignalError(OAIGetVoiceConnectorLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorOriginationSignalError() instead")
    void getVoiceConnectorOriginationSignalE(OAIGetVoiceConnectorOriginationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorOriginationSignalError(OAIGetVoiceConnectorOriginationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorProxySignalError() instead")
    void getVoiceConnectorProxySignalE(OAIGetVoiceConnectorProxyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorProxySignalError(OAIGetVoiceConnectorProxyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorStreamingConfigurationSignalError() instead")
    void getVoiceConnectorStreamingConfigurationSignalE(OAIGetVoiceConnectorStreamingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorStreamingConfigurationSignalError(OAIGetVoiceConnectorStreamingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorTerminationSignalError() instead")
    void getVoiceConnectorTerminationSignalE(OAIGetVoiceConnectorTerminationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorTerminationSignalError(OAIGetVoiceConnectorTerminationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorTerminationHealthSignalError() instead")
    void getVoiceConnectorTerminationHealthSignalE(OAIGetVoiceConnectorTerminationHealthResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorTerminationHealthSignalError(OAIGetVoiceConnectorTerminationHealthResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteUsersSignalError() instead")
    void inviteUsersSignalE(OAIInviteUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteUsersSignalError(OAIInviteUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsSignalError() instead")
    void listAccountsSignalE(OAIListAccountsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsSignalError(OAIListAccountsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppInstanceAdminsSignalError() instead")
    void listAppInstanceAdminsSignalE(OAIListAppInstanceAdminsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppInstanceAdminsSignalError(OAIListAppInstanceAdminsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppInstanceUsersSignalError() instead")
    void listAppInstanceUsersSignalE(OAIListAppInstanceUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppInstanceUsersSignalError(OAIListAppInstanceUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppInstancesSignalError() instead")
    void listAppInstancesSignalE(OAIListAppInstancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppInstancesSignalError(OAIListAppInstancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttendeeTagsSignalError() instead")
    void listAttendeeTagsSignalE(OAIListAttendeeTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttendeeTagsSignalError(OAIListAttendeeTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttendeesSignalError() instead")
    void listAttendeesSignalE(OAIListAttendeesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttendeesSignalError(OAIListAttendeesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBotsSignalError() instead")
    void listBotsSignalE(OAIListBotsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listBotsSignalError(OAIListBotsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelBansSignalError() instead")
    void listChannelBansSignalE(OAIListChannelBansResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelBansSignalError(OAIListChannelBansResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelMembershipsSignalError() instead")
    void listChannelMembershipsSignalE(OAIListChannelMembershipsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelMembershipsSignalError(OAIListChannelMembershipsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelMembershipsForAppInstanceUserSignalError() instead")
    void listChannelMembershipsForAppInstanceUserSignalE(OAIListChannelMembershipsForAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelMembershipsForAppInstanceUserSignalError(OAIListChannelMembershipsForAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelMessagesSignalError() instead")
    void listChannelMessagesSignalE(OAIListChannelMessagesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelMessagesSignalError(OAIListChannelMessagesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelModeratorsSignalError() instead")
    void listChannelModeratorsSignalE(OAIListChannelModeratorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelModeratorsSignalError(OAIListChannelModeratorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelsSignalError() instead")
    void listChannelsSignalE(OAIListChannelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelsSignalError(OAIListChannelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelsModeratedByAppInstanceUserSignalError() instead")
    void listChannelsModeratedByAppInstanceUserSignalE(OAIListChannelsModeratedByAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelsModeratedByAppInstanceUserSignalError(OAIListChannelsModeratedByAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMediaCapturePipelinesSignalError() instead")
    void listMediaCapturePipelinesSignalE(OAIListMediaCapturePipelinesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMediaCapturePipelinesSignalError(OAIListMediaCapturePipelinesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMeetingTagsSignalError() instead")
    void listMeetingTagsSignalE(OAIListMeetingTagsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMeetingTagsSignalError(OAIListMeetingTagsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMeetingsSignalError() instead")
    void listMeetingsSignalE(OAIListMeetingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMeetingsSignalError(OAIListMeetingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPhoneNumberOrdersSignalError() instead")
    void listPhoneNumberOrdersSignalE(OAIListPhoneNumberOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPhoneNumberOrdersSignalError(OAIListPhoneNumberOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPhoneNumbersSignalError() instead")
    void listPhoneNumbersSignalE(OAIListPhoneNumbersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listPhoneNumbersSignalError(OAIListPhoneNumbersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProxySessionsSignalError() instead")
    void listProxySessionsSignalE(OAIListProxySessionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listProxySessionsSignalError(OAIListProxySessionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoomMembershipsSignalError() instead")
    void listRoomMembershipsSignalE(OAIListRoomMembershipsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoomMembershipsSignalError(OAIListRoomMembershipsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoomsSignalError() instead")
    void listRoomsSignalE(OAIListRoomsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoomsSignalError(OAIListRoomsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipMediaApplicationsSignalError() instead")
    void listSipMediaApplicationsSignalE(OAIListSipMediaApplicationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipMediaApplicationsSignalError(OAIListSipMediaApplicationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipRulesSignalError() instead")
    void listSipRulesSignalE(OAIListSipRulesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipRulesSignalError(OAIListSipRulesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSupportedPhoneNumberCountriesSignalError() instead")
    void listSupportedPhoneNumberCountriesSignalE(OAIListSupportedPhoneNumberCountriesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSupportedPhoneNumberCountriesSignalError(OAIListSupportedPhoneNumberCountriesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalError() instead")
    void listTagsForResourceSignalE(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalError(OAIListTagsForResourceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersSignalError() instead")
    void listUsersSignalE(OAIListUsersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalError(OAIListUsersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVoiceConnectorGroupsSignalError() instead")
    void listVoiceConnectorGroupsSignalE(OAIListVoiceConnectorGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVoiceConnectorGroupsSignalError(OAIListVoiceConnectorGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVoiceConnectorTerminationCredentialsSignalError() instead")
    void listVoiceConnectorTerminationCredentialsSignalE(OAIListVoiceConnectorTerminationCredentialsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVoiceConnectorTerminationCredentialsSignalError(OAIListVoiceConnectorTerminationCredentialsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVoiceConnectorsSignalError() instead")
    void listVoiceConnectorsSignalE(OAIListVoiceConnectorsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVoiceConnectorsSignalError(OAIListVoiceConnectorsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutUserSignalError() instead")
    void logoutUserSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutUserSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAppInstanceRetentionSettingsSignalError() instead")
    void putAppInstanceRetentionSettingsSignalE(OAIPutAppInstanceRetentionSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putAppInstanceRetentionSettingsSignalError(OAIPutAppInstanceRetentionSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAppInstanceStreamingConfigurationsSignalError() instead")
    void putAppInstanceStreamingConfigurationsSignalE(OAIPutAppInstanceStreamingConfigurationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putAppInstanceStreamingConfigurationsSignalError(OAIPutAppInstanceStreamingConfigurationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEventsConfigurationSignalError() instead")
    void putEventsConfigurationSignalE(OAIPutEventsConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putEventsConfigurationSignalError(OAIPutEventsConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putRetentionSettingsSignalError() instead")
    void putRetentionSettingsSignalE(OAIPutRetentionSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putRetentionSettingsSignalError(OAIPutRetentionSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSipMediaApplicationLoggingConfigurationSignalError() instead")
    void putSipMediaApplicationLoggingConfigurationSignalE(OAIPutSipMediaApplicationLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putSipMediaApplicationLoggingConfigurationSignalError(OAIPutSipMediaApplicationLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorEmergencyCallingConfigurationSignalError() instead")
    void putVoiceConnectorEmergencyCallingConfigurationSignalE(OAIPutVoiceConnectorEmergencyCallingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorEmergencyCallingConfigurationSignalError(OAIPutVoiceConnectorEmergencyCallingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorLoggingConfigurationSignalError() instead")
    void putVoiceConnectorLoggingConfigurationSignalE(OAIPutVoiceConnectorLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorLoggingConfigurationSignalError(OAIPutVoiceConnectorLoggingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorOriginationSignalError() instead")
    void putVoiceConnectorOriginationSignalE(OAIPutVoiceConnectorOriginationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorOriginationSignalError(OAIPutVoiceConnectorOriginationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorProxySignalError() instead")
    void putVoiceConnectorProxySignalE(OAIPutVoiceConnectorProxyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorProxySignalError(OAIPutVoiceConnectorProxyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorStreamingConfigurationSignalError() instead")
    void putVoiceConnectorStreamingConfigurationSignalE(OAIPutVoiceConnectorStreamingConfigurationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorStreamingConfigurationSignalError(OAIPutVoiceConnectorStreamingConfigurationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorTerminationSignalError() instead")
    void putVoiceConnectorTerminationSignalE(OAIPutVoiceConnectorTerminationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorTerminationSignalError(OAIPutVoiceConnectorTerminationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorTerminationCredentialsSignalError() instead")
    void putVoiceConnectorTerminationCredentialsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorTerminationCredentialsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redactChannelMessageSignalError() instead")
    void redactChannelMessageSignalE(OAIRedactChannelMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redactChannelMessageSignalError(OAIRedactChannelMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redactConversationMessageSignalError() instead")
    void redactConversationMessageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redactConversationMessageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redactRoomMessageSignalError() instead")
    void redactRoomMessageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void redactRoomMessageSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regenerateSecurityTokenSignalError() instead")
    void regenerateSecurityTokenSignalE(OAIRegenerateSecurityTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void regenerateSecurityTokenSignalError(OAIRegenerateSecurityTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPersonalPINSignalError() instead")
    void resetPersonalPINSignalE(OAIResetPersonalPINResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPersonalPINSignalError(OAIResetPersonalPINResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restorePhoneNumberSignalError() instead")
    void restorePhoneNumberSignalE(OAIRestorePhoneNumberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void restorePhoneNumberSignalError(OAIRestorePhoneNumberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAvailablePhoneNumbersSignalError() instead")
    void searchAvailablePhoneNumbersSignalE(OAISearchAvailablePhoneNumbersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAvailablePhoneNumbersSignalError(OAISearchAvailablePhoneNumbersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendChannelMessageSignalError() instead")
    void sendChannelMessageSignalE(OAISendChannelMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sendChannelMessageSignalError(OAISendChannelMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startMeetingTranscriptionSignalError() instead")
    void startMeetingTranscriptionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startMeetingTranscriptionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopMeetingTranscriptionSignalError() instead")
    void stopMeetingTranscriptionSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stopMeetingTranscriptionSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagAttendeeSignalError() instead")
    void tagAttendeeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagAttendeeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagMeetingSignalError() instead")
    void tagMeetingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagMeetingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalError() instead")
    void tagResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagAttendeeSignalError() instead")
    void untagAttendeeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagAttendeeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagMeetingSignalError() instead")
    void untagMeetingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagMeetingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalError() instead")
    void untagResourceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalError() instead")
    void updateAccountSignalE(OAIUpdateAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalError(OAIUpdateAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSettingsSignalError() instead")
    void updateAccountSettingsSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSettingsSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppInstanceSignalError() instead")
    void updateAppInstanceSignalE(OAIUpdateAppInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppInstanceSignalError(OAIUpdateAppInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppInstanceUserSignalError() instead")
    void updateAppInstanceUserSignalE(OAIUpdateAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppInstanceUserSignalError(OAIUpdateAppInstanceUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBotSignalError() instead")
    void updateBotSignalE(OAIUpdateBotResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBotSignalError(OAIUpdateBotResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelSignalError() instead")
    void updateChannelSignalE(OAIUpdateChannelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelSignalError(OAIUpdateChannelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelMessageSignalError() instead")
    void updateChannelMessageSignalE(OAIUpdateChannelMessageResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelMessageSignalError(OAIUpdateChannelMessageResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelReadMarkerSignalError() instead")
    void updateChannelReadMarkerSignalE(OAIUpdateChannelReadMarkerResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelReadMarkerSignalError(OAIUpdateChannelReadMarkerResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalSettingsSignalError() instead")
    void updateGlobalSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePhoneNumberSignalError() instead")
    void updatePhoneNumberSignalE(OAIUpdatePhoneNumberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePhoneNumberSignalError(OAIUpdatePhoneNumberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePhoneNumberSettingsSignalError() instead")
    void updatePhoneNumberSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePhoneNumberSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProxySessionSignalError() instead")
    void updateProxySessionSignalE(OAIUpdateProxySessionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProxySessionSignalError(OAIUpdateProxySessionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomSignalError() instead")
    void updateRoomSignalE(OAIUpdateRoomResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomSignalError(OAIUpdateRoomResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomMembershipSignalError() instead")
    void updateRoomMembershipSignalE(OAIUpdateRoomMembershipResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomMembershipSignalError(OAIUpdateRoomMembershipResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipMediaApplicationSignalError() instead")
    void updateSipMediaApplicationSignalE(OAIUpdateSipMediaApplicationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipMediaApplicationSignalError(OAIUpdateSipMediaApplicationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipMediaApplicationCallSignalError() instead")
    void updateSipMediaApplicationCallSignalE(OAIUpdateSipMediaApplicationCallResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipMediaApplicationCallSignalError(OAIUpdateSipMediaApplicationCallResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipRuleSignalError() instead")
    void updateSipRuleSignalE(OAIUpdateSipRuleResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipRuleSignalError(OAIUpdateSipRuleResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalError() instead")
    void updateUserSignalE(OAIUpdateUserResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalError(OAIUpdateUserResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSettingsSignalError() instead")
    void updateUserSettingsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSettingsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVoiceConnectorSignalError() instead")
    void updateVoiceConnectorSignalE(OAIUpdateVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVoiceConnectorSignalError(OAIUpdateVoiceConnectorResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVoiceConnectorGroupSignalError() instead")
    void updateVoiceConnectorGroupSignalE(OAIUpdateVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVoiceConnectorGroupSignalError(OAIUpdateVoiceConnectorGroupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateE911AddressSignalError() instead")
    void validateE911AddressSignalE(OAIValidateE911AddressResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void validateE911AddressSignalError(OAIValidateE911AddressResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use associatePhoneNumberWithUserSignalErrorFull() instead")
    void associatePhoneNumberWithUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePhoneNumberWithUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associatePhoneNumbersWithVoiceConnectorSignalErrorFull() instead")
    void associatePhoneNumbersWithVoiceConnectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePhoneNumbersWithVoiceConnectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associatePhoneNumbersWithVoiceConnectorGroupSignalErrorFull() instead")
    void associatePhoneNumbersWithVoiceConnectorGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associatePhoneNumbersWithVoiceConnectorGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use associateSigninDelegateGroupsWithAccountSignalErrorFull() instead")
    void associateSigninDelegateGroupsWithAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void associateSigninDelegateGroupsWithAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateAttendeeSignalErrorFull() instead")
    void batchCreateAttendeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateAttendeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateChannelMembershipSignalErrorFull() instead")
    void batchCreateChannelMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateChannelMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchCreateRoomMembershipSignalErrorFull() instead")
    void batchCreateRoomMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchCreateRoomMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchDeletePhoneNumberSignalErrorFull() instead")
    void batchDeletePhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchDeletePhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchSuspendUserSignalErrorFull() instead")
    void batchSuspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchSuspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUnsuspendUserSignalErrorFull() instead")
    void batchUnsuspendUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUnsuspendUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUpdatePhoneNumberSignalErrorFull() instead")
    void batchUpdatePhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUpdatePhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use batchUpdateUserSignalErrorFull() instead")
    void batchUpdateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void batchUpdateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccountSignalErrorFull() instead")
    void createAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppInstanceSignalErrorFull() instead")
    void createAppInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppInstanceAdminSignalErrorFull() instead")
    void createAppInstanceAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppInstanceAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAppInstanceUserSignalErrorFull() instead")
    void createAppInstanceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAppInstanceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAttendeeSignalErrorFull() instead")
    void createAttendeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAttendeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createBotSignalErrorFull() instead")
    void createBotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createBotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelSignalErrorFull() instead")
    void createChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelBanSignalErrorFull() instead")
    void createChannelBanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelBanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelMembershipSignalErrorFull() instead")
    void createChannelMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createChannelModeratorSignalErrorFull() instead")
    void createChannelModeratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createChannelModeratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMediaCapturePipelineSignalErrorFull() instead")
    void createMediaCapturePipelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMediaCapturePipelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMeetingSignalErrorFull() instead")
    void createMeetingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMeetingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMeetingDialOutSignalErrorFull() instead")
    void createMeetingDialOutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMeetingDialOutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createMeetingWithAttendeesSignalErrorFull() instead")
    void createMeetingWithAttendeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createMeetingWithAttendeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPhoneNumberOrderSignalErrorFull() instead")
    void createPhoneNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPhoneNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createProxySessionSignalErrorFull() instead")
    void createProxySessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createProxySessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRoomSignalErrorFull() instead")
    void createRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createRoomMembershipSignalErrorFull() instead")
    void createRoomMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createRoomMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSipMediaApplicationSignalErrorFull() instead")
    void createSipMediaApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipMediaApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSipMediaApplicationCallSignalErrorFull() instead")
    void createSipMediaApplicationCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipMediaApplicationCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSipRuleSignalErrorFull() instead")
    void createSipRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSipRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createUserSignalErrorFull() instead")
    void createUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVoiceConnectorSignalErrorFull() instead")
    void createVoiceConnectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVoiceConnectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVoiceConnectorGroupSignalErrorFull() instead")
    void createVoiceConnectorGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVoiceConnectorGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAccountSignalErrorFull() instead")
    void deleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInstanceSignalErrorFull() instead")
    void deleteAppInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInstanceAdminSignalErrorFull() instead")
    void deleteAppInstanceAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInstanceAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInstanceStreamingConfigurationsSignalErrorFull() instead")
    void deleteAppInstanceStreamingConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInstanceStreamingConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAppInstanceUserSignalErrorFull() instead")
    void deleteAppInstanceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAppInstanceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAttendeeSignalErrorFull() instead")
    void deleteAttendeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAttendeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelSignalErrorFull() instead")
    void deleteChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelBanSignalErrorFull() instead")
    void deleteChannelBanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelBanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelMembershipSignalErrorFull() instead")
    void deleteChannelMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelMessageSignalErrorFull() instead")
    void deleteChannelMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteChannelModeratorSignalErrorFull() instead")
    void deleteChannelModeratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteChannelModeratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteEventsConfigurationSignalErrorFull() instead")
    void deleteEventsConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteEventsConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMediaCapturePipelineSignalErrorFull() instead")
    void deleteMediaCapturePipelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMediaCapturePipelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMeetingSignalErrorFull() instead")
    void deleteMeetingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMeetingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePhoneNumberSignalErrorFull() instead")
    void deletePhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProxySessionSignalErrorFull() instead")
    void deleteProxySessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProxySessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoomSignalErrorFull() instead")
    void deleteRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRoomMembershipSignalErrorFull() instead")
    void deleteRoomMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRoomMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipMediaApplicationSignalErrorFull() instead")
    void deleteSipMediaApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipMediaApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSipRuleSignalErrorFull() instead")
    void deleteSipRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSipRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorSignalErrorFull() instead")
    void deleteVoiceConnectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorEmergencyCallingConfigurationSignalErrorFull() instead")
    void deleteVoiceConnectorEmergencyCallingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorEmergencyCallingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorGroupSignalErrorFull() instead")
    void deleteVoiceConnectorGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorOriginationSignalErrorFull() instead")
    void deleteVoiceConnectorOriginationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorOriginationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorProxySignalErrorFull() instead")
    void deleteVoiceConnectorProxySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorProxySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorStreamingConfigurationSignalErrorFull() instead")
    void deleteVoiceConnectorStreamingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorStreamingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorTerminationSignalErrorFull() instead")
    void deleteVoiceConnectorTerminationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorTerminationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVoiceConnectorTerminationCredentialsSignalErrorFull() instead")
    void deleteVoiceConnectorTerminationCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVoiceConnectorTerminationCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppInstanceSignalErrorFull() instead")
    void describeAppInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppInstanceAdminSignalErrorFull() instead")
    void describeAppInstanceAdminSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppInstanceAdminSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeAppInstanceUserSignalErrorFull() instead")
    void describeAppInstanceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeAppInstanceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelSignalErrorFull() instead")
    void describeChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelBanSignalErrorFull() instead")
    void describeChannelBanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelBanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelMembershipSignalErrorFull() instead")
    void describeChannelMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelMembershipForAppInstanceUserSignalErrorFull() instead")
    void describeChannelMembershipForAppInstanceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelMembershipForAppInstanceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelModeratedByAppInstanceUserSignalErrorFull() instead")
    void describeChannelModeratedByAppInstanceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelModeratedByAppInstanceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use describeChannelModeratorSignalErrorFull() instead")
    void describeChannelModeratorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void describeChannelModeratorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociatePhoneNumberFromUserSignalErrorFull() instead")
    void disassociatePhoneNumberFromUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociatePhoneNumberFromUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociatePhoneNumbersFromVoiceConnectorSignalErrorFull() instead")
    void disassociatePhoneNumbersFromVoiceConnectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociatePhoneNumbersFromVoiceConnectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociatePhoneNumbersFromVoiceConnectorGroupSignalErrorFull() instead")
    void disassociatePhoneNumbersFromVoiceConnectorGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociatePhoneNumbersFromVoiceConnectorGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disassociateSigninDelegateGroupsFromAccountSignalErrorFull() instead")
    void disassociateSigninDelegateGroupsFromAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disassociateSigninDelegateGroupsFromAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalErrorFull() instead")
    void getAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSettingsSignalErrorFull() instead")
    void getAccountSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppInstanceRetentionSettingsSignalErrorFull() instead")
    void getAppInstanceRetentionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppInstanceRetentionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAppInstanceStreamingConfigurationsSignalErrorFull() instead")
    void getAppInstanceStreamingConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAppInstanceStreamingConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAttendeeSignalErrorFull() instead")
    void getAttendeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttendeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBotSignalErrorFull() instead")
    void getBotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getChannelMessageSignalErrorFull() instead")
    void getChannelMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChannelMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEventsConfigurationSignalErrorFull() instead")
    void getEventsConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEventsConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlobalSettingsSignalErrorFull() instead")
    void getGlobalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlobalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMediaCapturePipelineSignalErrorFull() instead")
    void getMediaCapturePipelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMediaCapturePipelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeetingSignalErrorFull() instead")
    void getMeetingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeetingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMessagingSessionEndpointSignalErrorFull() instead")
    void getMessagingSessionEndpointSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMessagingSessionEndpointSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhoneNumberSignalErrorFull() instead")
    void getPhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhoneNumberOrderSignalErrorFull() instead")
    void getPhoneNumberOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhoneNumberOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPhoneNumberSettingsSignalErrorFull() instead")
    void getPhoneNumberSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPhoneNumberSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProxySessionSignalErrorFull() instead")
    void getProxySessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProxySessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRetentionSettingsSignalErrorFull() instead")
    void getRetentionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRetentionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRoomSignalErrorFull() instead")
    void getRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSipMediaApplicationSignalErrorFull() instead")
    void getSipMediaApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSipMediaApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSipMediaApplicationLoggingConfigurationSignalErrorFull() instead")
    void getSipMediaApplicationLoggingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSipMediaApplicationLoggingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSipRuleSignalErrorFull() instead")
    void getSipRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSipRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSettingsSignalErrorFull() instead")
    void getUserSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorSignalErrorFull() instead")
    void getVoiceConnectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorEmergencyCallingConfigurationSignalErrorFull() instead")
    void getVoiceConnectorEmergencyCallingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorEmergencyCallingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorGroupSignalErrorFull() instead")
    void getVoiceConnectorGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorLoggingConfigurationSignalErrorFull() instead")
    void getVoiceConnectorLoggingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorLoggingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorOriginationSignalErrorFull() instead")
    void getVoiceConnectorOriginationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorOriginationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorProxySignalErrorFull() instead")
    void getVoiceConnectorProxySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorProxySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorStreamingConfigurationSignalErrorFull() instead")
    void getVoiceConnectorStreamingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorStreamingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorTerminationSignalErrorFull() instead")
    void getVoiceConnectorTerminationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorTerminationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVoiceConnectorTerminationHealthSignalErrorFull() instead")
    void getVoiceConnectorTerminationHealthSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVoiceConnectorTerminationHealthSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inviteUsersSignalErrorFull() instead")
    void inviteUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inviteUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAccountsSignalErrorFull() instead")
    void listAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppInstanceAdminsSignalErrorFull() instead")
    void listAppInstanceAdminsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppInstanceAdminsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppInstanceUsersSignalErrorFull() instead")
    void listAppInstanceUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppInstanceUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAppInstancesSignalErrorFull() instead")
    void listAppInstancesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAppInstancesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttendeeTagsSignalErrorFull() instead")
    void listAttendeeTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttendeeTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAttendeesSignalErrorFull() instead")
    void listAttendeesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAttendeesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listBotsSignalErrorFull() instead")
    void listBotsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listBotsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelBansSignalErrorFull() instead")
    void listChannelBansSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelBansSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelMembershipsSignalErrorFull() instead")
    void listChannelMembershipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelMembershipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelMembershipsForAppInstanceUserSignalErrorFull() instead")
    void listChannelMembershipsForAppInstanceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelMembershipsForAppInstanceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelMessagesSignalErrorFull() instead")
    void listChannelMessagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelMessagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelModeratorsSignalErrorFull() instead")
    void listChannelModeratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelModeratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelsSignalErrorFull() instead")
    void listChannelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listChannelsModeratedByAppInstanceUserSignalErrorFull() instead")
    void listChannelsModeratedByAppInstanceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listChannelsModeratedByAppInstanceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMediaCapturePipelinesSignalErrorFull() instead")
    void listMediaCapturePipelinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMediaCapturePipelinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMeetingTagsSignalErrorFull() instead")
    void listMeetingTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMeetingTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMeetingsSignalErrorFull() instead")
    void listMeetingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMeetingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPhoneNumberOrdersSignalErrorFull() instead")
    void listPhoneNumberOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPhoneNumberOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listPhoneNumbersSignalErrorFull() instead")
    void listPhoneNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listPhoneNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProxySessionsSignalErrorFull() instead")
    void listProxySessionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProxySessionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoomMembershipsSignalErrorFull() instead")
    void listRoomMembershipsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoomMembershipsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRoomsSignalErrorFull() instead")
    void listRoomsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRoomsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipMediaApplicationsSignalErrorFull() instead")
    void listSipMediaApplicationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipMediaApplicationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSipRulesSignalErrorFull() instead")
    void listSipRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSipRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSupportedPhoneNumberCountriesSignalErrorFull() instead")
    void listSupportedPhoneNumberCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSupportedPhoneNumberCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTagsForResourceSignalErrorFull() instead")
    void listTagsForResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTagsForResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUsersSignalErrorFull() instead")
    void listUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVoiceConnectorGroupsSignalErrorFull() instead")
    void listVoiceConnectorGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVoiceConnectorGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVoiceConnectorTerminationCredentialsSignalErrorFull() instead")
    void listVoiceConnectorTerminationCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVoiceConnectorTerminationCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVoiceConnectorsSignalErrorFull() instead")
    void listVoiceConnectorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVoiceConnectorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutUserSignalErrorFull() instead")
    void logoutUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAppInstanceRetentionSettingsSignalErrorFull() instead")
    void putAppInstanceRetentionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putAppInstanceRetentionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putAppInstanceStreamingConfigurationsSignalErrorFull() instead")
    void putAppInstanceStreamingConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putAppInstanceStreamingConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putEventsConfigurationSignalErrorFull() instead")
    void putEventsConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putEventsConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putRetentionSettingsSignalErrorFull() instead")
    void putRetentionSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putRetentionSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSipMediaApplicationLoggingConfigurationSignalErrorFull() instead")
    void putSipMediaApplicationLoggingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSipMediaApplicationLoggingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorEmergencyCallingConfigurationSignalErrorFull() instead")
    void putVoiceConnectorEmergencyCallingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorEmergencyCallingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorLoggingConfigurationSignalErrorFull() instead")
    void putVoiceConnectorLoggingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorLoggingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorOriginationSignalErrorFull() instead")
    void putVoiceConnectorOriginationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorOriginationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorProxySignalErrorFull() instead")
    void putVoiceConnectorProxySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorProxySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorStreamingConfigurationSignalErrorFull() instead")
    void putVoiceConnectorStreamingConfigurationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorStreamingConfigurationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorTerminationSignalErrorFull() instead")
    void putVoiceConnectorTerminationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorTerminationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putVoiceConnectorTerminationCredentialsSignalErrorFull() instead")
    void putVoiceConnectorTerminationCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putVoiceConnectorTerminationCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redactChannelMessageSignalErrorFull() instead")
    void redactChannelMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redactChannelMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redactConversationMessageSignalErrorFull() instead")
    void redactConversationMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redactConversationMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use redactRoomMessageSignalErrorFull() instead")
    void redactRoomMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void redactRoomMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use regenerateSecurityTokenSignalErrorFull() instead")
    void regenerateSecurityTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void regenerateSecurityTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resetPersonalPINSignalErrorFull() instead")
    void resetPersonalPINSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resetPersonalPINSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restorePhoneNumberSignalErrorFull() instead")
    void restorePhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restorePhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAvailablePhoneNumbersSignalErrorFull() instead")
    void searchAvailablePhoneNumbersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAvailablePhoneNumbersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sendChannelMessageSignalErrorFull() instead")
    void sendChannelMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sendChannelMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startMeetingTranscriptionSignalErrorFull() instead")
    void startMeetingTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startMeetingTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopMeetingTranscriptionSignalErrorFull() instead")
    void stopMeetingTranscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopMeetingTranscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagAttendeeSignalErrorFull() instead")
    void tagAttendeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagAttendeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagMeetingSignalErrorFull() instead")
    void tagMeetingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagMeetingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagResourceSignalErrorFull() instead")
    void tagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagAttendeeSignalErrorFull() instead")
    void untagAttendeeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagAttendeeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagMeetingSignalErrorFull() instead")
    void untagMeetingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagMeetingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use untagResourceSignalErrorFull() instead")
    void untagResourceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void untagResourceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalErrorFull() instead")
    void updateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSettingsSignalErrorFull() instead")
    void updateAccountSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppInstanceSignalErrorFull() instead")
    void updateAppInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAppInstanceUserSignalErrorFull() instead")
    void updateAppInstanceUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAppInstanceUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateBotSignalErrorFull() instead")
    void updateBotSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateBotSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelSignalErrorFull() instead")
    void updateChannelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelMessageSignalErrorFull() instead")
    void updateChannelMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateChannelReadMarkerSignalErrorFull() instead")
    void updateChannelReadMarkerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateChannelReadMarkerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalSettingsSignalErrorFull() instead")
    void updateGlobalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePhoneNumberSignalErrorFull() instead")
    void updatePhoneNumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePhoneNumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePhoneNumberSettingsSignalErrorFull() instead")
    void updatePhoneNumberSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePhoneNumberSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProxySessionSignalErrorFull() instead")
    void updateProxySessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProxySessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomSignalErrorFull() instead")
    void updateRoomSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRoomMembershipSignalErrorFull() instead")
    void updateRoomMembershipSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRoomMembershipSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipMediaApplicationSignalErrorFull() instead")
    void updateSipMediaApplicationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipMediaApplicationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipMediaApplicationCallSignalErrorFull() instead")
    void updateSipMediaApplicationCallSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipMediaApplicationCallSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSipRuleSignalErrorFull() instead")
    void updateSipRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSipRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSignalErrorFull() instead")
    void updateUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserSettingsSignalErrorFull() instead")
    void updateUserSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVoiceConnectorSignalErrorFull() instead")
    void updateVoiceConnectorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVoiceConnectorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateVoiceConnectorGroupSignalErrorFull() instead")
    void updateVoiceConnectorGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateVoiceConnectorGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use validateE911AddressSignalErrorFull() instead")
    void validateE911AddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void validateE911AddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
