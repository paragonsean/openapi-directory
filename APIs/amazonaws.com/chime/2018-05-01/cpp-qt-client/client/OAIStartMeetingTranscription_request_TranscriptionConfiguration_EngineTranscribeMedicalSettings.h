/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings.h
 *
 * 
 */

#ifndef OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings_H
#define OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings_H

#include <QJsonObject>

#include "OAITranscribeMedicalContentIdentificationType.h"
#include "OAITranscribeMedicalLanguageCode.h"
#include "OAITranscribeMedicalRegion.h"
#include "OAITranscribeMedicalSpecialty.h"
#include "OAITranscribeMedicalType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings : public OAIObject {
public:
    OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings();
    OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings(QString json);
    ~OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITranscribeMedicalLanguageCode getLanguageCode() const;
    void setLanguageCode(const OAITranscribeMedicalLanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAITranscribeMedicalSpecialty getSpecialty() const;
    void setSpecialty(const OAITranscribeMedicalSpecialty &specialty);
    bool is_specialty_Set() const;
    bool is_specialty_Valid() const;

    OAITranscribeMedicalType getType() const;
    void setType(const OAITranscribeMedicalType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getVocabularyName() const;
    void setVocabularyName(const QString &vocabulary_name);
    bool is_vocabulary_name_Set() const;
    bool is_vocabulary_name_Valid() const;

    OAITranscribeMedicalRegion getRegion() const;
    void setRegion(const OAITranscribeMedicalRegion &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    OAITranscribeMedicalContentIdentificationType getContentIdentificationType() const;
    void setContentIdentificationType(const OAITranscribeMedicalContentIdentificationType &content_identification_type);
    bool is_content_identification_type_Set() const;
    bool is_content_identification_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITranscribeMedicalLanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAITranscribeMedicalSpecialty m_specialty;
    bool m_specialty_isSet;
    bool m_specialty_isValid;

    OAITranscribeMedicalType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_vocabulary_name;
    bool m_vocabulary_name_isSet;
    bool m_vocabulary_name_isValid;

    OAITranscribeMedicalRegion m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    OAITranscribeMedicalContentIdentificationType m_content_identification_type;
    bool m_content_identification_type_isSet;
    bool m_content_identification_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings)

#endif // OAIStartMeetingTranscription_request_TranscriptionConfiguration_EngineTranscribeMedicalSettings_H
