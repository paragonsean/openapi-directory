/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetUserResponse_User.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetUserResponse_User::OAIGetUserResponse_User(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetUserResponse_User::OAIGetUserResponse_User() {
    this->initializeModel();
}

OAIGetUserResponse_User::~OAIGetUserResponse_User() {}

void OAIGetUserResponse_User::initializeModel() {

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_primary_email_isSet = false;
    m_primary_email_isValid = false;

    m_primary_provisioned_number_isSet = false;
    m_primary_provisioned_number_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_license_type_isSet = false;
    m_license_type_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_user_registration_status_isSet = false;
    m_user_registration_status_isValid = false;

    m_user_invitation_status_isSet = false;
    m_user_invitation_status_isValid = false;

    m_registered_on_isSet = false;
    m_registered_on_isValid = false;

    m_invited_on_isSet = false;
    m_invited_on_isValid = false;

    m_alexa_for_business_metadata_isSet = false;
    m_alexa_for_business_metadata_isValid = false;

    m_personal_pin_isSet = false;
    m_personal_pin_isValid = false;
}

void OAIGetUserResponse_User::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetUserResponse_User::fromJsonObject(QJsonObject json) {

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("UserId")]);
    m_user_id_isSet = !json[QString("UserId")].isNull() && m_user_id_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("AccountId")]);
    m_account_id_isSet = !json[QString("AccountId")].isNull() && m_account_id_isValid;

    m_primary_email_isValid = ::OpenAPI::fromJsonValue(m_primary_email, json[QString("PrimaryEmail")]);
    m_primary_email_isSet = !json[QString("PrimaryEmail")].isNull() && m_primary_email_isValid;

    m_primary_provisioned_number_isValid = ::OpenAPI::fromJsonValue(m_primary_provisioned_number, json[QString("PrimaryProvisionedNumber")]);
    m_primary_provisioned_number_isSet = !json[QString("PrimaryProvisionedNumber")].isNull() && m_primary_provisioned_number_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("DisplayName")]);
    m_display_name_isSet = !json[QString("DisplayName")].isNull() && m_display_name_isValid;

    m_license_type_isValid = ::OpenAPI::fromJsonValue(m_license_type, json[QString("LicenseType")]);
    m_license_type_isSet = !json[QString("LicenseType")].isNull() && m_license_type_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("UserType")]);
    m_user_type_isSet = !json[QString("UserType")].isNull() && m_user_type_isValid;

    m_user_registration_status_isValid = ::OpenAPI::fromJsonValue(m_user_registration_status, json[QString("UserRegistrationStatus")]);
    m_user_registration_status_isSet = !json[QString("UserRegistrationStatus")].isNull() && m_user_registration_status_isValid;

    m_user_invitation_status_isValid = ::OpenAPI::fromJsonValue(m_user_invitation_status, json[QString("UserInvitationStatus")]);
    m_user_invitation_status_isSet = !json[QString("UserInvitationStatus")].isNull() && m_user_invitation_status_isValid;

    m_registered_on_isValid = ::OpenAPI::fromJsonValue(m_registered_on, json[QString("RegisteredOn")]);
    m_registered_on_isSet = !json[QString("RegisteredOn")].isNull() && m_registered_on_isValid;

    m_invited_on_isValid = ::OpenAPI::fromJsonValue(m_invited_on, json[QString("InvitedOn")]);
    m_invited_on_isSet = !json[QString("InvitedOn")].isNull() && m_invited_on_isValid;

    m_alexa_for_business_metadata_isValid = ::OpenAPI::fromJsonValue(m_alexa_for_business_metadata, json[QString("AlexaForBusinessMetadata")]);
    m_alexa_for_business_metadata_isSet = !json[QString("AlexaForBusinessMetadata")].isNull() && m_alexa_for_business_metadata_isValid;

    m_personal_pin_isValid = ::OpenAPI::fromJsonValue(m_personal_pin, json[QString("PersonalPIN")]);
    m_personal_pin_isSet = !json[QString("PersonalPIN")].isNull() && m_personal_pin_isValid;
}

QString OAIGetUserResponse_User::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetUserResponse_User::asJsonObject() const {
    QJsonObject obj;
    if (m_user_id_isSet) {
        obj.insert(QString("UserId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("AccountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_primary_email_isSet) {
        obj.insert(QString("PrimaryEmail"), ::OpenAPI::toJsonValue(m_primary_email));
    }
    if (m_primary_provisioned_number_isSet) {
        obj.insert(QString("PrimaryProvisionedNumber"), ::OpenAPI::toJsonValue(m_primary_provisioned_number));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("DisplayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_license_type.isSet()) {
        obj.insert(QString("LicenseType"), ::OpenAPI::toJsonValue(m_license_type));
    }
    if (m_user_type.isSet()) {
        obj.insert(QString("UserType"), ::OpenAPI::toJsonValue(m_user_type));
    }
    if (m_user_registration_status.isSet()) {
        obj.insert(QString("UserRegistrationStatus"), ::OpenAPI::toJsonValue(m_user_registration_status));
    }
    if (m_user_invitation_status.isSet()) {
        obj.insert(QString("UserInvitationStatus"), ::OpenAPI::toJsonValue(m_user_invitation_status));
    }
    if (m_registered_on_isSet) {
        obj.insert(QString("RegisteredOn"), ::OpenAPI::toJsonValue(m_registered_on));
    }
    if (m_invited_on_isSet) {
        obj.insert(QString("InvitedOn"), ::OpenAPI::toJsonValue(m_invited_on));
    }
    if (m_alexa_for_business_metadata.isSet()) {
        obj.insert(QString("AlexaForBusinessMetadata"), ::OpenAPI::toJsonValue(m_alexa_for_business_metadata));
    }
    if (m_personal_pin_isSet) {
        obj.insert(QString("PersonalPIN"), ::OpenAPI::toJsonValue(m_personal_pin));
    }
    return obj;
}

QString OAIGetUserResponse_User::getUserId() const {
    return m_user_id;
}
void OAIGetUserResponse_User::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIGetUserResponse_User::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIGetUserResponse_User::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIGetUserResponse_User::getAccountId() const {
    return m_account_id;
}
void OAIGetUserResponse_User::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIGetUserResponse_User::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIGetUserResponse_User::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIGetUserResponse_User::getPrimaryEmail() const {
    return m_primary_email;
}
void OAIGetUserResponse_User::setPrimaryEmail(const QString &primary_email) {
    m_primary_email = primary_email;
    m_primary_email_isSet = true;
}

bool OAIGetUserResponse_User::is_primary_email_Set() const{
    return m_primary_email_isSet;
}

bool OAIGetUserResponse_User::is_primary_email_Valid() const{
    return m_primary_email_isValid;
}

QString OAIGetUserResponse_User::getPrimaryProvisionedNumber() const {
    return m_primary_provisioned_number;
}
void OAIGetUserResponse_User::setPrimaryProvisionedNumber(const QString &primary_provisioned_number) {
    m_primary_provisioned_number = primary_provisioned_number;
    m_primary_provisioned_number_isSet = true;
}

bool OAIGetUserResponse_User::is_primary_provisioned_number_Set() const{
    return m_primary_provisioned_number_isSet;
}

bool OAIGetUserResponse_User::is_primary_provisioned_number_Valid() const{
    return m_primary_provisioned_number_isValid;
}

QString OAIGetUserResponse_User::getDisplayName() const {
    return m_display_name;
}
void OAIGetUserResponse_User::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGetUserResponse_User::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGetUserResponse_User::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAILicense OAIGetUserResponse_User::getLicenseType() const {
    return m_license_type;
}
void OAIGetUserResponse_User::setLicenseType(const OAILicense &license_type) {
    m_license_type = license_type;
    m_license_type_isSet = true;
}

bool OAIGetUserResponse_User::is_license_type_Set() const{
    return m_license_type_isSet;
}

bool OAIGetUserResponse_User::is_license_type_Valid() const{
    return m_license_type_isValid;
}

OAIUserType OAIGetUserResponse_User::getUserType() const {
    return m_user_type;
}
void OAIGetUserResponse_User::setUserType(const OAIUserType &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIGetUserResponse_User::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIGetUserResponse_User::is_user_type_Valid() const{
    return m_user_type_isValid;
}

OAIRegistrationStatus OAIGetUserResponse_User::getUserRegistrationStatus() const {
    return m_user_registration_status;
}
void OAIGetUserResponse_User::setUserRegistrationStatus(const OAIRegistrationStatus &user_registration_status) {
    m_user_registration_status = user_registration_status;
    m_user_registration_status_isSet = true;
}

bool OAIGetUserResponse_User::is_user_registration_status_Set() const{
    return m_user_registration_status_isSet;
}

bool OAIGetUserResponse_User::is_user_registration_status_Valid() const{
    return m_user_registration_status_isValid;
}

OAIInviteStatus OAIGetUserResponse_User::getUserInvitationStatus() const {
    return m_user_invitation_status;
}
void OAIGetUserResponse_User::setUserInvitationStatus(const OAIInviteStatus &user_invitation_status) {
    m_user_invitation_status = user_invitation_status;
    m_user_invitation_status_isSet = true;
}

bool OAIGetUserResponse_User::is_user_invitation_status_Set() const{
    return m_user_invitation_status_isSet;
}

bool OAIGetUserResponse_User::is_user_invitation_status_Valid() const{
    return m_user_invitation_status_isValid;
}

QDateTime OAIGetUserResponse_User::getRegisteredOn() const {
    return m_registered_on;
}
void OAIGetUserResponse_User::setRegisteredOn(const QDateTime &registered_on) {
    m_registered_on = registered_on;
    m_registered_on_isSet = true;
}

bool OAIGetUserResponse_User::is_registered_on_Set() const{
    return m_registered_on_isSet;
}

bool OAIGetUserResponse_User::is_registered_on_Valid() const{
    return m_registered_on_isValid;
}

QDateTime OAIGetUserResponse_User::getInvitedOn() const {
    return m_invited_on;
}
void OAIGetUserResponse_User::setInvitedOn(const QDateTime &invited_on) {
    m_invited_on = invited_on;
    m_invited_on_isSet = true;
}

bool OAIGetUserResponse_User::is_invited_on_Set() const{
    return m_invited_on_isSet;
}

bool OAIGetUserResponse_User::is_invited_on_Valid() const{
    return m_invited_on_isValid;
}

OAIUpdateUserRequestItem_AlexaForBusinessMetadata OAIGetUserResponse_User::getAlexaForBusinessMetadata() const {
    return m_alexa_for_business_metadata;
}
void OAIGetUserResponse_User::setAlexaForBusinessMetadata(const OAIUpdateUserRequestItem_AlexaForBusinessMetadata &alexa_for_business_metadata) {
    m_alexa_for_business_metadata = alexa_for_business_metadata;
    m_alexa_for_business_metadata_isSet = true;
}

bool OAIGetUserResponse_User::is_alexa_for_business_metadata_Set() const{
    return m_alexa_for_business_metadata_isSet;
}

bool OAIGetUserResponse_User::is_alexa_for_business_metadata_Valid() const{
    return m_alexa_for_business_metadata_isValid;
}

QString OAIGetUserResponse_User::getPersonalPin() const {
    return m_personal_pin;
}
void OAIGetUserResponse_User::setPersonalPin(const QString &personal_pin) {
    m_personal_pin = personal_pin;
    m_personal_pin_isSet = true;
}

bool OAIGetUserResponse_User::is_personal_pin_Set() const{
    return m_personal_pin_isSet;
}

bool OAIGetUserResponse_User::is_personal_pin_Valid() const{
    return m_personal_pin_isValid;
}

bool OAIGetUserResponse_User::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_provisioned_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_registration_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_invitation_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registered_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alexa_for_business_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_pin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetUserResponse_User::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_user_id_isValid && true;
}

} // namespace OpenAPI
