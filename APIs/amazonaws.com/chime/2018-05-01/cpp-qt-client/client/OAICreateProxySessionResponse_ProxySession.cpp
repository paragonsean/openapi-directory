/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProxySessionResponse_ProxySession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProxySessionResponse_ProxySession::OAICreateProxySessionResponse_ProxySession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProxySessionResponse_ProxySession::OAICreateProxySessionResponse_ProxySession() {
    this->initializeModel();
}

OAICreateProxySessionResponse_ProxySession::~OAICreateProxySessionResponse_ProxySession() {}

void OAICreateProxySessionResponse_ProxySession::initializeModel() {

    m_voice_connector_id_isSet = false;
    m_voice_connector_id_isValid = false;

    m_proxy_session_id_isSet = false;
    m_proxy_session_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_expiry_minutes_isSet = false;
    m_expiry_minutes_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;

    m_ended_timestamp_isSet = false;
    m_ended_timestamp_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_number_selection_behavior_isSet = false;
    m_number_selection_behavior_isValid = false;

    m_geo_match_level_isSet = false;
    m_geo_match_level_isValid = false;

    m_geo_match_params_isSet = false;
    m_geo_match_params_isValid = false;
}

void OAICreateProxySessionResponse_ProxySession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProxySessionResponse_ProxySession::fromJsonObject(QJsonObject json) {

    m_voice_connector_id_isValid = ::OpenAPI::fromJsonValue(m_voice_connector_id, json[QString("VoiceConnectorId")]);
    m_voice_connector_id_isSet = !json[QString("VoiceConnectorId")].isNull() && m_voice_connector_id_isValid;

    m_proxy_session_id_isValid = ::OpenAPI::fromJsonValue(m_proxy_session_id, json[QString("ProxySessionId")]);
    m_proxy_session_id_isSet = !json[QString("ProxySessionId")].isNull() && m_proxy_session_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_expiry_minutes_isValid = ::OpenAPI::fromJsonValue(m_expiry_minutes, json[QString("ExpiryMinutes")]);
    m_expiry_minutes_isSet = !json[QString("ExpiryMinutes")].isNull() && m_expiry_minutes_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("UpdatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("UpdatedTimestamp")].isNull() && m_updated_timestamp_isValid;

    m_ended_timestamp_isValid = ::OpenAPI::fromJsonValue(m_ended_timestamp, json[QString("EndedTimestamp")]);
    m_ended_timestamp_isSet = !json[QString("EndedTimestamp")].isNull() && m_ended_timestamp_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("Participants")]);
    m_participants_isSet = !json[QString("Participants")].isNull() && m_participants_isValid;

    m_number_selection_behavior_isValid = ::OpenAPI::fromJsonValue(m_number_selection_behavior, json[QString("NumberSelectionBehavior")]);
    m_number_selection_behavior_isSet = !json[QString("NumberSelectionBehavior")].isNull() && m_number_selection_behavior_isValid;

    m_geo_match_level_isValid = ::OpenAPI::fromJsonValue(m_geo_match_level, json[QString("GeoMatchLevel")]);
    m_geo_match_level_isSet = !json[QString("GeoMatchLevel")].isNull() && m_geo_match_level_isValid;

    m_geo_match_params_isValid = ::OpenAPI::fromJsonValue(m_geo_match_params, json[QString("GeoMatchParams")]);
    m_geo_match_params_isSet = !json[QString("GeoMatchParams")].isNull() && m_geo_match_params_isValid;
}

QString OAICreateProxySessionResponse_ProxySession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProxySessionResponse_ProxySession::asJsonObject() const {
    QJsonObject obj;
    if (m_voice_connector_id_isSet) {
        obj.insert(QString("VoiceConnectorId"), ::OpenAPI::toJsonValue(m_voice_connector_id));
    }
    if (m_proxy_session_id_isSet) {
        obj.insert(QString("ProxySessionId"), ::OpenAPI::toJsonValue(m_proxy_session_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_expiry_minutes_isSet) {
        obj.insert(QString("ExpiryMinutes"), ::OpenAPI::toJsonValue(m_expiry_minutes));
    }
    if (m_capabilities.isSet()) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("UpdatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    if (m_ended_timestamp_isSet) {
        obj.insert(QString("EndedTimestamp"), ::OpenAPI::toJsonValue(m_ended_timestamp));
    }
    if (m_participants.isSet()) {
        obj.insert(QString("Participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_number_selection_behavior.isSet()) {
        obj.insert(QString("NumberSelectionBehavior"), ::OpenAPI::toJsonValue(m_number_selection_behavior));
    }
    if (m_geo_match_level.isSet()) {
        obj.insert(QString("GeoMatchLevel"), ::OpenAPI::toJsonValue(m_geo_match_level));
    }
    if (m_geo_match_params.isSet()) {
        obj.insert(QString("GeoMatchParams"), ::OpenAPI::toJsonValue(m_geo_match_params));
    }
    return obj;
}

QString OAICreateProxySessionResponse_ProxySession::getVoiceConnectorId() const {
    return m_voice_connector_id;
}
void OAICreateProxySessionResponse_ProxySession::setVoiceConnectorId(const QString &voice_connector_id) {
    m_voice_connector_id = voice_connector_id;
    m_voice_connector_id_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_voice_connector_id_Set() const{
    return m_voice_connector_id_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_voice_connector_id_Valid() const{
    return m_voice_connector_id_isValid;
}

QString OAICreateProxySessionResponse_ProxySession::getProxySessionId() const {
    return m_proxy_session_id;
}
void OAICreateProxySessionResponse_ProxySession::setProxySessionId(const QString &proxy_session_id) {
    m_proxy_session_id = proxy_session_id;
    m_proxy_session_id_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_proxy_session_id_Set() const{
    return m_proxy_session_id_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_proxy_session_id_Valid() const{
    return m_proxy_session_id_isValid;
}

QString OAICreateProxySessionResponse_ProxySession::getName() const {
    return m_name;
}
void OAICreateProxySessionResponse_ProxySession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_name_Valid() const{
    return m_name_isValid;
}

OAIProxySessionStatus OAICreateProxySessionResponse_ProxySession::getStatus() const {
    return m_status;
}
void OAICreateProxySessionResponse_ProxySession::setStatus(const OAIProxySessionStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_status_Set() const{
    return m_status_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAICreateProxySessionResponse_ProxySession::getExpiryMinutes() const {
    return m_expiry_minutes;
}
void OAICreateProxySessionResponse_ProxySession::setExpiryMinutes(const qint32 &expiry_minutes) {
    m_expiry_minutes = expiry_minutes;
    m_expiry_minutes_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_expiry_minutes_Set() const{
    return m_expiry_minutes_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_expiry_minutes_Valid() const{
    return m_expiry_minutes_isValid;
}

QList OAICreateProxySessionResponse_ProxySession::getCapabilities() const {
    return m_capabilities;
}
void OAICreateProxySessionResponse_ProxySession::setCapabilities(const QList &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QDateTime OAICreateProxySessionResponse_ProxySession::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAICreateProxySessionResponse_ProxySession::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAICreateProxySessionResponse_ProxySession::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAICreateProxySessionResponse_ProxySession::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

QDateTime OAICreateProxySessionResponse_ProxySession::getEndedTimestamp() const {
    return m_ended_timestamp;
}
void OAICreateProxySessionResponse_ProxySession::setEndedTimestamp(const QDateTime &ended_timestamp) {
    m_ended_timestamp = ended_timestamp;
    m_ended_timestamp_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_ended_timestamp_Set() const{
    return m_ended_timestamp_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_ended_timestamp_Valid() const{
    return m_ended_timestamp_isValid;
}

QList OAICreateProxySessionResponse_ProxySession::getParticipants() const {
    return m_participants;
}
void OAICreateProxySessionResponse_ProxySession::setParticipants(const QList &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_participants_Valid() const{
    return m_participants_isValid;
}

OAINumberSelectionBehavior OAICreateProxySessionResponse_ProxySession::getNumberSelectionBehavior() const {
    return m_number_selection_behavior;
}
void OAICreateProxySessionResponse_ProxySession::setNumberSelectionBehavior(const OAINumberSelectionBehavior &number_selection_behavior) {
    m_number_selection_behavior = number_selection_behavior;
    m_number_selection_behavior_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_number_selection_behavior_Set() const{
    return m_number_selection_behavior_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_number_selection_behavior_Valid() const{
    return m_number_selection_behavior_isValid;
}

OAIGeoMatchLevel OAICreateProxySessionResponse_ProxySession::getGeoMatchLevel() const {
    return m_geo_match_level;
}
void OAICreateProxySessionResponse_ProxySession::setGeoMatchLevel(const OAIGeoMatchLevel &geo_match_level) {
    m_geo_match_level = geo_match_level;
    m_geo_match_level_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_geo_match_level_Set() const{
    return m_geo_match_level_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_geo_match_level_Valid() const{
    return m_geo_match_level_isValid;
}

OAICreateProxySessionRequest_GeoMatchParams OAICreateProxySessionResponse_ProxySession::getGeoMatchParams() const {
    return m_geo_match_params;
}
void OAICreateProxySessionResponse_ProxySession::setGeoMatchParams(const OAICreateProxySessionRequest_GeoMatchParams &geo_match_params) {
    m_geo_match_params = geo_match_params;
    m_geo_match_params_isSet = true;
}

bool OAICreateProxySessionResponse_ProxySession::is_geo_match_params_Set() const{
    return m_geo_match_params_isSet;
}

bool OAICreateProxySessionResponse_ProxySession::is_geo_match_params_Valid() const{
    return m_geo_match_params_isValid;
}

bool OAICreateProxySessionResponse_ProxySession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_voice_connector_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ended_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_selection_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_match_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_match_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProxySessionResponse_ProxySession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
