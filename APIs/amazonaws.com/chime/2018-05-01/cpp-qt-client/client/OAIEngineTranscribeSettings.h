/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEngineTranscribeSettings.h
 *
 * &lt;p&gt;Settings specific for Amazon Transcribe as the live transcription engine.&lt;/p&gt; &lt;p&gt;If you specify an invalid combination of parameters, a &lt;code&gt;TranscriptFailed&lt;/code&gt; event will be sent with the contents of the &lt;code&gt;BadRequestException&lt;/code&gt; generated by Amazon Transcribe. For more information on each parameter and which combinations are valid, refer to the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/transcribe/latest/APIReference/API_streaming_StartStreamTranscription.html\&quot;&gt;StartStreamTranscription&lt;/a&gt; API in the &lt;i&gt;Amazon Transcribe Developer Guide&lt;/i&gt;.&lt;/p&gt;
 */

#ifndef OAIEngineTranscribeSettings_H
#define OAIEngineTranscribeSettings_H

#include <QJsonObject>

#include "OAITranscribeContentIdentificationType.h"
#include "OAITranscribeContentRedactionType.h"
#include "OAITranscribeLanguageCode.h"
#include "OAITranscribePartialResultsStability.h"
#include "OAITranscribeRegion.h"
#include "OAITranscribeVocabularyFilterMethod.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEngineTranscribeSettings : public OAIObject {
public:
    OAIEngineTranscribeSettings();
    OAIEngineTranscribeSettings(QString json);
    ~OAIEngineTranscribeSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITranscribeLanguageCode getLanguageCode() const;
    void setLanguageCode(const OAITranscribeLanguageCode &language_code);
    bool is_language_code_Set() const;
    bool is_language_code_Valid() const;

    OAITranscribeVocabularyFilterMethod getVocabularyFilterMethod() const;
    void setVocabularyFilterMethod(const OAITranscribeVocabularyFilterMethod &vocabulary_filter_method);
    bool is_vocabulary_filter_method_Set() const;
    bool is_vocabulary_filter_method_Valid() const;

    QString getVocabularyFilterName() const;
    void setVocabularyFilterName(const QString &vocabulary_filter_name);
    bool is_vocabulary_filter_name_Set() const;
    bool is_vocabulary_filter_name_Valid() const;

    QString getVocabularyName() const;
    void setVocabularyName(const QString &vocabulary_name);
    bool is_vocabulary_name_Set() const;
    bool is_vocabulary_name_Valid() const;

    OAITranscribeRegion getRegion() const;
    void setRegion(const OAITranscribeRegion &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    bool getEnablePartialResultsStabilization() const;
    void setEnablePartialResultsStabilization(const bool &enable_partial_results_stabilization);
    bool is_enable_partial_results_stabilization_Set() const;
    bool is_enable_partial_results_stabilization_Valid() const;

    OAITranscribePartialResultsStability getPartialResultsStability() const;
    void setPartialResultsStability(const OAITranscribePartialResultsStability &partial_results_stability);
    bool is_partial_results_stability_Set() const;
    bool is_partial_results_stability_Valid() const;

    OAITranscribeContentIdentificationType getContentIdentificationType() const;
    void setContentIdentificationType(const OAITranscribeContentIdentificationType &content_identification_type);
    bool is_content_identification_type_Set() const;
    bool is_content_identification_type_Valid() const;

    OAITranscribeContentRedactionType getContentRedactionType() const;
    void setContentRedactionType(const OAITranscribeContentRedactionType &content_redaction_type);
    bool is_content_redaction_type_Set() const;
    bool is_content_redaction_type_Valid() const;

    QString getPiiEntityTypes() const;
    void setPiiEntityTypes(const QString &pii_entity_types);
    bool is_pii_entity_types_Set() const;
    bool is_pii_entity_types_Valid() const;

    QString getLanguageModelName() const;
    void setLanguageModelName(const QString &language_model_name);
    bool is_language_model_name_Set() const;
    bool is_language_model_name_Valid() const;

    bool getIdentifyLanguage() const;
    void setIdentifyLanguage(const bool &identify_language);
    bool is_identify_language_Set() const;
    bool is_identify_language_Valid() const;

    QString getLanguageOptions() const;
    void setLanguageOptions(const QString &language_options);
    bool is_language_options_Set() const;
    bool is_language_options_Valid() const;

    OAITranscribeLanguageCode getPreferredLanguage() const;
    void setPreferredLanguage(const OAITranscribeLanguageCode &preferred_language);
    bool is_preferred_language_Set() const;
    bool is_preferred_language_Valid() const;

    QString getVocabularyNames() const;
    void setVocabularyNames(const QString &vocabulary_names);
    bool is_vocabulary_names_Set() const;
    bool is_vocabulary_names_Valid() const;

    QString getVocabularyFilterNames() const;
    void setVocabularyFilterNames(const QString &vocabulary_filter_names);
    bool is_vocabulary_filter_names_Set() const;
    bool is_vocabulary_filter_names_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITranscribeLanguageCode m_language_code;
    bool m_language_code_isSet;
    bool m_language_code_isValid;

    OAITranscribeVocabularyFilterMethod m_vocabulary_filter_method;
    bool m_vocabulary_filter_method_isSet;
    bool m_vocabulary_filter_method_isValid;

    QString m_vocabulary_filter_name;
    bool m_vocabulary_filter_name_isSet;
    bool m_vocabulary_filter_name_isValid;

    QString m_vocabulary_name;
    bool m_vocabulary_name_isSet;
    bool m_vocabulary_name_isValid;

    OAITranscribeRegion m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    bool m_enable_partial_results_stabilization;
    bool m_enable_partial_results_stabilization_isSet;
    bool m_enable_partial_results_stabilization_isValid;

    OAITranscribePartialResultsStability m_partial_results_stability;
    bool m_partial_results_stability_isSet;
    bool m_partial_results_stability_isValid;

    OAITranscribeContentIdentificationType m_content_identification_type;
    bool m_content_identification_type_isSet;
    bool m_content_identification_type_isValid;

    OAITranscribeContentRedactionType m_content_redaction_type;
    bool m_content_redaction_type_isSet;
    bool m_content_redaction_type_isValid;

    QString m_pii_entity_types;
    bool m_pii_entity_types_isSet;
    bool m_pii_entity_types_isValid;

    QString m_language_model_name;
    bool m_language_model_name_isSet;
    bool m_language_model_name_isValid;

    bool m_identify_language;
    bool m_identify_language_isSet;
    bool m_identify_language_isValid;

    QString m_language_options;
    bool m_language_options_isSet;
    bool m_language_options_isValid;

    OAITranscribeLanguageCode m_preferred_language;
    bool m_preferred_language_isSet;
    bool m_preferred_language_isValid;

    QString m_vocabulary_names;
    bool m_vocabulary_names_isSet;
    bool m_vocabulary_names_isValid;

    QString m_vocabulary_filter_names;
    bool m_vocabulary_filter_names_isSet;
    bool m_vocabulary_filter_names_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEngineTranscribeSettings)

#endif // OAIEngineTranscribeSettings_H
