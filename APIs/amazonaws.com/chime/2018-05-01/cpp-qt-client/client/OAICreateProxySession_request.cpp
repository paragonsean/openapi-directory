/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateProxySession_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateProxySession_request::OAICreateProxySession_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateProxySession_request::OAICreateProxySession_request() {
    this->initializeModel();
}

OAICreateProxySession_request::~OAICreateProxySession_request() {}

void OAICreateProxySession_request::initializeModel() {

    m_participant_phone_numbers_isSet = false;
    m_participant_phone_numbers_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_expiry_minutes_isSet = false;
    m_expiry_minutes_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_number_selection_behavior_isSet = false;
    m_number_selection_behavior_isValid = false;

    m_geo_match_level_isSet = false;
    m_geo_match_level_isValid = false;

    m_geo_match_params_isSet = false;
    m_geo_match_params_isValid = false;
}

void OAICreateProxySession_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateProxySession_request::fromJsonObject(QJsonObject json) {

    m_participant_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_participant_phone_numbers, json[QString("ParticipantPhoneNumbers")]);
    m_participant_phone_numbers_isSet = !json[QString("ParticipantPhoneNumbers")].isNull() && m_participant_phone_numbers_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_expiry_minutes_isValid = ::OpenAPI::fromJsonValue(m_expiry_minutes, json[QString("ExpiryMinutes")]);
    m_expiry_minutes_isSet = !json[QString("ExpiryMinutes")].isNull() && m_expiry_minutes_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("Capabilities")]);
    m_capabilities_isSet = !json[QString("Capabilities")].isNull() && m_capabilities_isValid;

    m_number_selection_behavior_isValid = ::OpenAPI::fromJsonValue(m_number_selection_behavior, json[QString("NumberSelectionBehavior")]);
    m_number_selection_behavior_isSet = !json[QString("NumberSelectionBehavior")].isNull() && m_number_selection_behavior_isValid;

    m_geo_match_level_isValid = ::OpenAPI::fromJsonValue(m_geo_match_level, json[QString("GeoMatchLevel")]);
    m_geo_match_level_isSet = !json[QString("GeoMatchLevel")].isNull() && m_geo_match_level_isValid;

    m_geo_match_params_isValid = ::OpenAPI::fromJsonValue(m_geo_match_params, json[QString("GeoMatchParams")]);
    m_geo_match_params_isSet = !json[QString("GeoMatchParams")].isNull() && m_geo_match_params_isValid;
}

QString OAICreateProxySession_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateProxySession_request::asJsonObject() const {
    QJsonObject obj;
    if (m_participant_phone_numbers.size() > 0) {
        obj.insert(QString("ParticipantPhoneNumbers"), ::OpenAPI::toJsonValue(m_participant_phone_numbers));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_expiry_minutes_isSet) {
        obj.insert(QString("ExpiryMinutes"), ::OpenAPI::toJsonValue(m_expiry_minutes));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("Capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_number_selection_behavior_isSet) {
        obj.insert(QString("NumberSelectionBehavior"), ::OpenAPI::toJsonValue(m_number_selection_behavior));
    }
    if (m_geo_match_level_isSet) {
        obj.insert(QString("GeoMatchLevel"), ::OpenAPI::toJsonValue(m_geo_match_level));
    }
    if (m_geo_match_params.isSet()) {
        obj.insert(QString("GeoMatchParams"), ::OpenAPI::toJsonValue(m_geo_match_params));
    }
    return obj;
}

QList<QString> OAICreateProxySession_request::getParticipantPhoneNumbers() const {
    return m_participant_phone_numbers;
}
void OAICreateProxySession_request::setParticipantPhoneNumbers(const QList<QString> &participant_phone_numbers) {
    m_participant_phone_numbers = participant_phone_numbers;
    m_participant_phone_numbers_isSet = true;
}

bool OAICreateProxySession_request::is_participant_phone_numbers_Set() const{
    return m_participant_phone_numbers_isSet;
}

bool OAICreateProxySession_request::is_participant_phone_numbers_Valid() const{
    return m_participant_phone_numbers_isValid;
}

QString OAICreateProxySession_request::getName() const {
    return m_name;
}
void OAICreateProxySession_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateProxySession_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateProxySession_request::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAICreateProxySession_request::getExpiryMinutes() const {
    return m_expiry_minutes;
}
void OAICreateProxySession_request::setExpiryMinutes(const qint32 &expiry_minutes) {
    m_expiry_minutes = expiry_minutes;
    m_expiry_minutes_isSet = true;
}

bool OAICreateProxySession_request::is_expiry_minutes_Set() const{
    return m_expiry_minutes_isSet;
}

bool OAICreateProxySession_request::is_expiry_minutes_Valid() const{
    return m_expiry_minutes_isValid;
}

QList<OAICapability> OAICreateProxySession_request::getCapabilities() const {
    return m_capabilities;
}
void OAICreateProxySession_request::setCapabilities(const QList<OAICapability> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAICreateProxySession_request::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAICreateProxySession_request::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

QString OAICreateProxySession_request::getNumberSelectionBehavior() const {
    return m_number_selection_behavior;
}
void OAICreateProxySession_request::setNumberSelectionBehavior(const QString &number_selection_behavior) {
    m_number_selection_behavior = number_selection_behavior;
    m_number_selection_behavior_isSet = true;
}

bool OAICreateProxySession_request::is_number_selection_behavior_Set() const{
    return m_number_selection_behavior_isSet;
}

bool OAICreateProxySession_request::is_number_selection_behavior_Valid() const{
    return m_number_selection_behavior_isValid;
}

QString OAICreateProxySession_request::getGeoMatchLevel() const {
    return m_geo_match_level;
}
void OAICreateProxySession_request::setGeoMatchLevel(const QString &geo_match_level) {
    m_geo_match_level = geo_match_level;
    m_geo_match_level_isSet = true;
}

bool OAICreateProxySession_request::is_geo_match_level_Set() const{
    return m_geo_match_level_isSet;
}

bool OAICreateProxySession_request::is_geo_match_level_Valid() const{
    return m_geo_match_level_isValid;
}

OAICreateProxySession_request_GeoMatchParams OAICreateProxySession_request::getGeoMatchParams() const {
    return m_geo_match_params;
}
void OAICreateProxySession_request::setGeoMatchParams(const OAICreateProxySession_request_GeoMatchParams &geo_match_params) {
    m_geo_match_params = geo_match_params;
    m_geo_match_params_isSet = true;
}

bool OAICreateProxySession_request::is_geo_match_params_Set() const{
    return m_geo_match_params_isSet;
}

bool OAICreateProxySession_request::is_geo_match_params_Valid() const{
    return m_geo_match_params_isValid;
}

bool OAICreateProxySession_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_participant_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_minutes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_selection_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_match_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_match_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateProxySession_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_participant_phone_numbers_isValid && m_capabilities_isValid && true;
}

} // namespace OpenAPI
