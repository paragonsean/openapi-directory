/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProxySession.h
 *
 * The proxy session for an Amazon Chime Voice Connector.
 */

#ifndef OAIProxySession_H
#define OAIProxySession_H

#include <QJsonObject>

#include "OAICreateProxySessionRequest_GeoMatchParams.h"
#include "OAIGeoMatchLevel.h"
#include "OAINumberSelectionBehavior.h"
#include "OAIProxySessionStatus.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateProxySessionRequest_GeoMatchParams;

class OAIProxySession : public OAIObject {
public:
    OAIProxySession();
    OAIProxySession(QString json);
    ~OAIProxySession() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getVoiceConnectorId() const;
    void setVoiceConnectorId(const QString &voice_connector_id);
    bool is_voice_connector_id_Set() const;
    bool is_voice_connector_id_Valid() const;

    QString getProxySessionId() const;
    void setProxySessionId(const QString &proxy_session_id);
    bool is_proxy_session_id_Set() const;
    bool is_proxy_session_id_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIProxySessionStatus getStatus() const;
    void setStatus(const OAIProxySessionStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint32 getExpiryMinutes() const;
    void setExpiryMinutes(const qint32 &expiry_minutes);
    bool is_expiry_minutes_Set() const;
    bool is_expiry_minutes_Valid() const;

    QList getCapabilities() const;
    void setCapabilities(const QList &capabilities);
    bool is_capabilities_Set() const;
    bool is_capabilities_Valid() const;

    QDateTime getCreatedTimestamp() const;
    void setCreatedTimestamp(const QDateTime &created_timestamp);
    bool is_created_timestamp_Set() const;
    bool is_created_timestamp_Valid() const;

    QDateTime getUpdatedTimestamp() const;
    void setUpdatedTimestamp(const QDateTime &updated_timestamp);
    bool is_updated_timestamp_Set() const;
    bool is_updated_timestamp_Valid() const;

    QDateTime getEndedTimestamp() const;
    void setEndedTimestamp(const QDateTime &ended_timestamp);
    bool is_ended_timestamp_Set() const;
    bool is_ended_timestamp_Valid() const;

    QList getParticipants() const;
    void setParticipants(const QList &participants);
    bool is_participants_Set() const;
    bool is_participants_Valid() const;

    OAINumberSelectionBehavior getNumberSelectionBehavior() const;
    void setNumberSelectionBehavior(const OAINumberSelectionBehavior &number_selection_behavior);
    bool is_number_selection_behavior_Set() const;
    bool is_number_selection_behavior_Valid() const;

    OAIGeoMatchLevel getGeoMatchLevel() const;
    void setGeoMatchLevel(const OAIGeoMatchLevel &geo_match_level);
    bool is_geo_match_level_Set() const;
    bool is_geo_match_level_Valid() const;

    OAICreateProxySessionRequest_GeoMatchParams getGeoMatchParams() const;
    void setGeoMatchParams(const OAICreateProxySessionRequest_GeoMatchParams &geo_match_params);
    bool is_geo_match_params_Set() const;
    bool is_geo_match_params_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_voice_connector_id;
    bool m_voice_connector_id_isSet;
    bool m_voice_connector_id_isValid;

    QString m_proxy_session_id;
    bool m_proxy_session_id_isSet;
    bool m_proxy_session_id_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIProxySessionStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint32 m_expiry_minutes;
    bool m_expiry_minutes_isSet;
    bool m_expiry_minutes_isValid;

    QList m_capabilities;
    bool m_capabilities_isSet;
    bool m_capabilities_isValid;

    QDateTime m_created_timestamp;
    bool m_created_timestamp_isSet;
    bool m_created_timestamp_isValid;

    QDateTime m_updated_timestamp;
    bool m_updated_timestamp_isSet;
    bool m_updated_timestamp_isValid;

    QDateTime m_ended_timestamp;
    bool m_ended_timestamp_isSet;
    bool m_ended_timestamp_isValid;

    QList m_participants;
    bool m_participants_isSet;
    bool m_participants_isValid;

    OAINumberSelectionBehavior m_number_selection_behavior;
    bool m_number_selection_behavior_isSet;
    bool m_number_selection_behavior_isValid;

    OAIGeoMatchLevel m_geo_match_level;
    bool m_geo_match_level_isSet;
    bool m_geo_match_level_isValid;

    OAICreateProxySessionRequest_GeoMatchParams m_geo_match_params;
    bool m_geo_match_params_isSet;
    bool m_geo_match_params_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProxySession)

#endif // OAIProxySession_H
