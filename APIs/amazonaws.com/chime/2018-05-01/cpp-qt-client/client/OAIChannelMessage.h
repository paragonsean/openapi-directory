/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIChannelMessage.h
 *
 * The details of a message in a channel.
 */

#ifndef OAIChannelMessage_H
#define OAIChannelMessage_H

#include <QJsonObject>

#include "OAIChannelMessagePersistenceType.h"
#include "OAIChannelMessageType.h"
#include "OAIChannelMessage_Sender.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIChannelMessage_Sender;

class OAIChannelMessage : public OAIObject {
public:
    OAIChannelMessage();
    OAIChannelMessage(QString json);
    ~OAIChannelMessage() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getChannelArn() const;
    void setChannelArn(const QString &channel_arn);
    bool is_channel_arn_Set() const;
    bool is_channel_arn_Valid() const;

    QString getMessageId() const;
    void setMessageId(const QString &message_id);
    bool is_message_id_Set() const;
    bool is_message_id_Valid() const;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getMetadata() const;
    void setMetadata(const QString &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    OAIChannelMessageType getType() const;
    void setType(const OAIChannelMessageType &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getCreatedTimestamp() const;
    void setCreatedTimestamp(const QDateTime &created_timestamp);
    bool is_created_timestamp_Set() const;
    bool is_created_timestamp_Valid() const;

    QDateTime getLastEditedTimestamp() const;
    void setLastEditedTimestamp(const QDateTime &last_edited_timestamp);
    bool is_last_edited_timestamp_Set() const;
    bool is_last_edited_timestamp_Valid() const;

    QDateTime getLastUpdatedTimestamp() const;
    void setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp);
    bool is_last_updated_timestamp_Set() const;
    bool is_last_updated_timestamp_Valid() const;

    OAIChannelMessage_Sender getSender() const;
    void setSender(const OAIChannelMessage_Sender &sender);
    bool is_sender_Set() const;
    bool is_sender_Valid() const;

    bool getRedacted() const;
    void setRedacted(const bool &redacted);
    bool is_redacted_Set() const;
    bool is_redacted_Valid() const;

    OAIChannelMessagePersistenceType getPersistence() const;
    void setPersistence(const OAIChannelMessagePersistenceType &persistence);
    bool is_persistence_Set() const;
    bool is_persistence_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_channel_arn;
    bool m_channel_arn_isSet;
    bool m_channel_arn_isValid;

    QString m_message_id;
    bool m_message_id_isSet;
    bool m_message_id_isValid;

    QString m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    OAIChannelMessageType m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime m_created_timestamp;
    bool m_created_timestamp_isSet;
    bool m_created_timestamp_isValid;

    QDateTime m_last_edited_timestamp;
    bool m_last_edited_timestamp_isSet;
    bool m_last_edited_timestamp_isValid;

    QDateTime m_last_updated_timestamp;
    bool m_last_updated_timestamp_isSet;
    bool m_last_updated_timestamp_isValid;

    OAIChannelMessage_Sender m_sender;
    bool m_sender_isSet;
    bool m_sender_isValid;

    bool m_redacted;
    bool m_redacted_isSet;
    bool m_redacted_isValid;

    OAIChannelMessagePersistenceType m_persistence;
    bool m_persistence_isSet;
    bool m_persistence_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIChannelMessage)

#endif // OAIChannelMessage_H
