/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdateUserResponse_User.h
 *
 * 
 */

#ifndef OAIUpdateUserResponse_User_H
#define OAIUpdateUserResponse_User_H

#include <QJsonObject>

#include "OAIInviteStatus.h"
#include "OAILicense.h"
#include "OAIRegistrationStatus.h"
#include "OAIUpdateUserRequestItem_AlexaForBusinessMetadata.h"
#include "OAIUserType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUpdateUserRequestItem_AlexaForBusinessMetadata;

class OAIUpdateUserResponse_User : public OAIObject {
public:
    OAIUpdateUserResponse_User();
    OAIUpdateUserResponse_User(QString json);
    ~OAIUpdateUserResponse_User() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getUserId() const;
    void setUserId(const QString &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getAccountId() const;
    void setAccountId(const QString &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    QString getPrimaryEmail() const;
    void setPrimaryEmail(const QString &primary_email);
    bool is_primary_email_Set() const;
    bool is_primary_email_Valid() const;

    QString getPrimaryProvisionedNumber() const;
    void setPrimaryProvisionedNumber(const QString &primary_provisioned_number);
    bool is_primary_provisioned_number_Set() const;
    bool is_primary_provisioned_number_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    OAILicense getLicenseType() const;
    void setLicenseType(const OAILicense &license_type);
    bool is_license_type_Set() const;
    bool is_license_type_Valid() const;

    OAIUserType getUserType() const;
    void setUserType(const OAIUserType &user_type);
    bool is_user_type_Set() const;
    bool is_user_type_Valid() const;

    OAIRegistrationStatus getUserRegistrationStatus() const;
    void setUserRegistrationStatus(const OAIRegistrationStatus &user_registration_status);
    bool is_user_registration_status_Set() const;
    bool is_user_registration_status_Valid() const;

    OAIInviteStatus getUserInvitationStatus() const;
    void setUserInvitationStatus(const OAIInviteStatus &user_invitation_status);
    bool is_user_invitation_status_Set() const;
    bool is_user_invitation_status_Valid() const;

    QDateTime getRegisteredOn() const;
    void setRegisteredOn(const QDateTime &registered_on);
    bool is_registered_on_Set() const;
    bool is_registered_on_Valid() const;

    QDateTime getInvitedOn() const;
    void setInvitedOn(const QDateTime &invited_on);
    bool is_invited_on_Set() const;
    bool is_invited_on_Valid() const;

    OAIUpdateUserRequestItem_AlexaForBusinessMetadata getAlexaForBusinessMetadata() const;
    void setAlexaForBusinessMetadata(const OAIUpdateUserRequestItem_AlexaForBusinessMetadata &alexa_for_business_metadata);
    bool is_alexa_for_business_metadata_Set() const;
    bool is_alexa_for_business_metadata_Valid() const;

    QString getPersonalPin() const;
    void setPersonalPin(const QString &personal_pin);
    bool is_personal_pin_Set() const;
    bool is_personal_pin_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    QString m_primary_email;
    bool m_primary_email_isSet;
    bool m_primary_email_isValid;

    QString m_primary_provisioned_number;
    bool m_primary_provisioned_number_isSet;
    bool m_primary_provisioned_number_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    OAILicense m_license_type;
    bool m_license_type_isSet;
    bool m_license_type_isValid;

    OAIUserType m_user_type;
    bool m_user_type_isSet;
    bool m_user_type_isValid;

    OAIRegistrationStatus m_user_registration_status;
    bool m_user_registration_status_isSet;
    bool m_user_registration_status_isValid;

    OAIInviteStatus m_user_invitation_status;
    bool m_user_invitation_status_isSet;
    bool m_user_invitation_status_isValid;

    QDateTime m_registered_on;
    bool m_registered_on_isSet;
    bool m_registered_on_isValid;

    QDateTime m_invited_on;
    bool m_invited_on_isSet;
    bool m_invited_on_isValid;

    OAIUpdateUserRequestItem_AlexaForBusinessMetadata m_alexa_for_business_metadata;
    bool m_alexa_for_business_metadata_isSet;
    bool m_alexa_for_business_metadata_isValid;

    QString m_personal_pin;
    bool m_personal_pin_isSet;
    bool m_personal_pin_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdateUserResponse_User)

#endif // OAIUpdateUserResponse_User_H
