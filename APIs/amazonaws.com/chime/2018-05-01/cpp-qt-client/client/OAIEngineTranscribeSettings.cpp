/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEngineTranscribeSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEngineTranscribeSettings::OAIEngineTranscribeSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEngineTranscribeSettings::OAIEngineTranscribeSettings() {
    this->initializeModel();
}

OAIEngineTranscribeSettings::~OAIEngineTranscribeSettings() {}

void OAIEngineTranscribeSettings::initializeModel() {

    m_language_code_isSet = false;
    m_language_code_isValid = false;

    m_vocabulary_filter_method_isSet = false;
    m_vocabulary_filter_method_isValid = false;

    m_vocabulary_filter_name_isSet = false;
    m_vocabulary_filter_name_isValid = false;

    m_vocabulary_name_isSet = false;
    m_vocabulary_name_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_enable_partial_results_stabilization_isSet = false;
    m_enable_partial_results_stabilization_isValid = false;

    m_partial_results_stability_isSet = false;
    m_partial_results_stability_isValid = false;

    m_content_identification_type_isSet = false;
    m_content_identification_type_isValid = false;

    m_content_redaction_type_isSet = false;
    m_content_redaction_type_isValid = false;

    m_pii_entity_types_isSet = false;
    m_pii_entity_types_isValid = false;

    m_language_model_name_isSet = false;
    m_language_model_name_isValid = false;

    m_identify_language_isSet = false;
    m_identify_language_isValid = false;

    m_language_options_isSet = false;
    m_language_options_isValid = false;

    m_preferred_language_isSet = false;
    m_preferred_language_isValid = false;

    m_vocabulary_names_isSet = false;
    m_vocabulary_names_isValid = false;

    m_vocabulary_filter_names_isSet = false;
    m_vocabulary_filter_names_isValid = false;
}

void OAIEngineTranscribeSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEngineTranscribeSettings::fromJsonObject(QJsonObject json) {

    m_language_code_isValid = ::OpenAPI::fromJsonValue(m_language_code, json[QString("LanguageCode")]);
    m_language_code_isSet = !json[QString("LanguageCode")].isNull() && m_language_code_isValid;

    m_vocabulary_filter_method_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_filter_method, json[QString("VocabularyFilterMethod")]);
    m_vocabulary_filter_method_isSet = !json[QString("VocabularyFilterMethod")].isNull() && m_vocabulary_filter_method_isValid;

    m_vocabulary_filter_name_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_filter_name, json[QString("VocabularyFilterName")]);
    m_vocabulary_filter_name_isSet = !json[QString("VocabularyFilterName")].isNull() && m_vocabulary_filter_name_isValid;

    m_vocabulary_name_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_name, json[QString("VocabularyName")]);
    m_vocabulary_name_isSet = !json[QString("VocabularyName")].isNull() && m_vocabulary_name_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("Region")]);
    m_region_isSet = !json[QString("Region")].isNull() && m_region_isValid;

    m_enable_partial_results_stabilization_isValid = ::OpenAPI::fromJsonValue(m_enable_partial_results_stabilization, json[QString("EnablePartialResultsStabilization")]);
    m_enable_partial_results_stabilization_isSet = !json[QString("EnablePartialResultsStabilization")].isNull() && m_enable_partial_results_stabilization_isValid;

    m_partial_results_stability_isValid = ::OpenAPI::fromJsonValue(m_partial_results_stability, json[QString("PartialResultsStability")]);
    m_partial_results_stability_isSet = !json[QString("PartialResultsStability")].isNull() && m_partial_results_stability_isValid;

    m_content_identification_type_isValid = ::OpenAPI::fromJsonValue(m_content_identification_type, json[QString("ContentIdentificationType")]);
    m_content_identification_type_isSet = !json[QString("ContentIdentificationType")].isNull() && m_content_identification_type_isValid;

    m_content_redaction_type_isValid = ::OpenAPI::fromJsonValue(m_content_redaction_type, json[QString("ContentRedactionType")]);
    m_content_redaction_type_isSet = !json[QString("ContentRedactionType")].isNull() && m_content_redaction_type_isValid;

    m_pii_entity_types_isValid = ::OpenAPI::fromJsonValue(m_pii_entity_types, json[QString("PiiEntityTypes")]);
    m_pii_entity_types_isSet = !json[QString("PiiEntityTypes")].isNull() && m_pii_entity_types_isValid;

    m_language_model_name_isValid = ::OpenAPI::fromJsonValue(m_language_model_name, json[QString("LanguageModelName")]);
    m_language_model_name_isSet = !json[QString("LanguageModelName")].isNull() && m_language_model_name_isValid;

    m_identify_language_isValid = ::OpenAPI::fromJsonValue(m_identify_language, json[QString("IdentifyLanguage")]);
    m_identify_language_isSet = !json[QString("IdentifyLanguage")].isNull() && m_identify_language_isValid;

    m_language_options_isValid = ::OpenAPI::fromJsonValue(m_language_options, json[QString("LanguageOptions")]);
    m_language_options_isSet = !json[QString("LanguageOptions")].isNull() && m_language_options_isValid;

    m_preferred_language_isValid = ::OpenAPI::fromJsonValue(m_preferred_language, json[QString("PreferredLanguage")]);
    m_preferred_language_isSet = !json[QString("PreferredLanguage")].isNull() && m_preferred_language_isValid;

    m_vocabulary_names_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_names, json[QString("VocabularyNames")]);
    m_vocabulary_names_isSet = !json[QString("VocabularyNames")].isNull() && m_vocabulary_names_isValid;

    m_vocabulary_filter_names_isValid = ::OpenAPI::fromJsonValue(m_vocabulary_filter_names, json[QString("VocabularyFilterNames")]);
    m_vocabulary_filter_names_isSet = !json[QString("VocabularyFilterNames")].isNull() && m_vocabulary_filter_names_isValid;
}

QString OAIEngineTranscribeSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEngineTranscribeSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_language_code.isSet()) {
        obj.insert(QString("LanguageCode"), ::OpenAPI::toJsonValue(m_language_code));
    }
    if (m_vocabulary_filter_method.isSet()) {
        obj.insert(QString("VocabularyFilterMethod"), ::OpenAPI::toJsonValue(m_vocabulary_filter_method));
    }
    if (m_vocabulary_filter_name_isSet) {
        obj.insert(QString("VocabularyFilterName"), ::OpenAPI::toJsonValue(m_vocabulary_filter_name));
    }
    if (m_vocabulary_name_isSet) {
        obj.insert(QString("VocabularyName"), ::OpenAPI::toJsonValue(m_vocabulary_name));
    }
    if (m_region.isSet()) {
        obj.insert(QString("Region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_enable_partial_results_stabilization_isSet) {
        obj.insert(QString("EnablePartialResultsStabilization"), ::OpenAPI::toJsonValue(m_enable_partial_results_stabilization));
    }
    if (m_partial_results_stability.isSet()) {
        obj.insert(QString("PartialResultsStability"), ::OpenAPI::toJsonValue(m_partial_results_stability));
    }
    if (m_content_identification_type.isSet()) {
        obj.insert(QString("ContentIdentificationType"), ::OpenAPI::toJsonValue(m_content_identification_type));
    }
    if (m_content_redaction_type.isSet()) {
        obj.insert(QString("ContentRedactionType"), ::OpenAPI::toJsonValue(m_content_redaction_type));
    }
    if (m_pii_entity_types_isSet) {
        obj.insert(QString("PiiEntityTypes"), ::OpenAPI::toJsonValue(m_pii_entity_types));
    }
    if (m_language_model_name_isSet) {
        obj.insert(QString("LanguageModelName"), ::OpenAPI::toJsonValue(m_language_model_name));
    }
    if (m_identify_language_isSet) {
        obj.insert(QString("IdentifyLanguage"), ::OpenAPI::toJsonValue(m_identify_language));
    }
    if (m_language_options_isSet) {
        obj.insert(QString("LanguageOptions"), ::OpenAPI::toJsonValue(m_language_options));
    }
    if (m_preferred_language.isSet()) {
        obj.insert(QString("PreferredLanguage"), ::OpenAPI::toJsonValue(m_preferred_language));
    }
    if (m_vocabulary_names_isSet) {
        obj.insert(QString("VocabularyNames"), ::OpenAPI::toJsonValue(m_vocabulary_names));
    }
    if (m_vocabulary_filter_names_isSet) {
        obj.insert(QString("VocabularyFilterNames"), ::OpenAPI::toJsonValue(m_vocabulary_filter_names));
    }
    return obj;
}

OAITranscribeLanguageCode OAIEngineTranscribeSettings::getLanguageCode() const {
    return m_language_code;
}
void OAIEngineTranscribeSettings::setLanguageCode(const OAITranscribeLanguageCode &language_code) {
    m_language_code = language_code;
    m_language_code_isSet = true;
}

bool OAIEngineTranscribeSettings::is_language_code_Set() const{
    return m_language_code_isSet;
}

bool OAIEngineTranscribeSettings::is_language_code_Valid() const{
    return m_language_code_isValid;
}

OAITranscribeVocabularyFilterMethod OAIEngineTranscribeSettings::getVocabularyFilterMethod() const {
    return m_vocabulary_filter_method;
}
void OAIEngineTranscribeSettings::setVocabularyFilterMethod(const OAITranscribeVocabularyFilterMethod &vocabulary_filter_method) {
    m_vocabulary_filter_method = vocabulary_filter_method;
    m_vocabulary_filter_method_isSet = true;
}

bool OAIEngineTranscribeSettings::is_vocabulary_filter_method_Set() const{
    return m_vocabulary_filter_method_isSet;
}

bool OAIEngineTranscribeSettings::is_vocabulary_filter_method_Valid() const{
    return m_vocabulary_filter_method_isValid;
}

QString OAIEngineTranscribeSettings::getVocabularyFilterName() const {
    return m_vocabulary_filter_name;
}
void OAIEngineTranscribeSettings::setVocabularyFilterName(const QString &vocabulary_filter_name) {
    m_vocabulary_filter_name = vocabulary_filter_name;
    m_vocabulary_filter_name_isSet = true;
}

bool OAIEngineTranscribeSettings::is_vocabulary_filter_name_Set() const{
    return m_vocabulary_filter_name_isSet;
}

bool OAIEngineTranscribeSettings::is_vocabulary_filter_name_Valid() const{
    return m_vocabulary_filter_name_isValid;
}

QString OAIEngineTranscribeSettings::getVocabularyName() const {
    return m_vocabulary_name;
}
void OAIEngineTranscribeSettings::setVocabularyName(const QString &vocabulary_name) {
    m_vocabulary_name = vocabulary_name;
    m_vocabulary_name_isSet = true;
}

bool OAIEngineTranscribeSettings::is_vocabulary_name_Set() const{
    return m_vocabulary_name_isSet;
}

bool OAIEngineTranscribeSettings::is_vocabulary_name_Valid() const{
    return m_vocabulary_name_isValid;
}

OAITranscribeRegion OAIEngineTranscribeSettings::getRegion() const {
    return m_region;
}
void OAIEngineTranscribeSettings::setRegion(const OAITranscribeRegion &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIEngineTranscribeSettings::is_region_Set() const{
    return m_region_isSet;
}

bool OAIEngineTranscribeSettings::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIEngineTranscribeSettings::getEnablePartialResultsStabilization() const {
    return m_enable_partial_results_stabilization;
}
void OAIEngineTranscribeSettings::setEnablePartialResultsStabilization(const bool &enable_partial_results_stabilization) {
    m_enable_partial_results_stabilization = enable_partial_results_stabilization;
    m_enable_partial_results_stabilization_isSet = true;
}

bool OAIEngineTranscribeSettings::is_enable_partial_results_stabilization_Set() const{
    return m_enable_partial_results_stabilization_isSet;
}

bool OAIEngineTranscribeSettings::is_enable_partial_results_stabilization_Valid() const{
    return m_enable_partial_results_stabilization_isValid;
}

OAITranscribePartialResultsStability OAIEngineTranscribeSettings::getPartialResultsStability() const {
    return m_partial_results_stability;
}
void OAIEngineTranscribeSettings::setPartialResultsStability(const OAITranscribePartialResultsStability &partial_results_stability) {
    m_partial_results_stability = partial_results_stability;
    m_partial_results_stability_isSet = true;
}

bool OAIEngineTranscribeSettings::is_partial_results_stability_Set() const{
    return m_partial_results_stability_isSet;
}

bool OAIEngineTranscribeSettings::is_partial_results_stability_Valid() const{
    return m_partial_results_stability_isValid;
}

OAITranscribeContentIdentificationType OAIEngineTranscribeSettings::getContentIdentificationType() const {
    return m_content_identification_type;
}
void OAIEngineTranscribeSettings::setContentIdentificationType(const OAITranscribeContentIdentificationType &content_identification_type) {
    m_content_identification_type = content_identification_type;
    m_content_identification_type_isSet = true;
}

bool OAIEngineTranscribeSettings::is_content_identification_type_Set() const{
    return m_content_identification_type_isSet;
}

bool OAIEngineTranscribeSettings::is_content_identification_type_Valid() const{
    return m_content_identification_type_isValid;
}

OAITranscribeContentRedactionType OAIEngineTranscribeSettings::getContentRedactionType() const {
    return m_content_redaction_type;
}
void OAIEngineTranscribeSettings::setContentRedactionType(const OAITranscribeContentRedactionType &content_redaction_type) {
    m_content_redaction_type = content_redaction_type;
    m_content_redaction_type_isSet = true;
}

bool OAIEngineTranscribeSettings::is_content_redaction_type_Set() const{
    return m_content_redaction_type_isSet;
}

bool OAIEngineTranscribeSettings::is_content_redaction_type_Valid() const{
    return m_content_redaction_type_isValid;
}

QString OAIEngineTranscribeSettings::getPiiEntityTypes() const {
    return m_pii_entity_types;
}
void OAIEngineTranscribeSettings::setPiiEntityTypes(const QString &pii_entity_types) {
    m_pii_entity_types = pii_entity_types;
    m_pii_entity_types_isSet = true;
}

bool OAIEngineTranscribeSettings::is_pii_entity_types_Set() const{
    return m_pii_entity_types_isSet;
}

bool OAIEngineTranscribeSettings::is_pii_entity_types_Valid() const{
    return m_pii_entity_types_isValid;
}

QString OAIEngineTranscribeSettings::getLanguageModelName() const {
    return m_language_model_name;
}
void OAIEngineTranscribeSettings::setLanguageModelName(const QString &language_model_name) {
    m_language_model_name = language_model_name;
    m_language_model_name_isSet = true;
}

bool OAIEngineTranscribeSettings::is_language_model_name_Set() const{
    return m_language_model_name_isSet;
}

bool OAIEngineTranscribeSettings::is_language_model_name_Valid() const{
    return m_language_model_name_isValid;
}

bool OAIEngineTranscribeSettings::getIdentifyLanguage() const {
    return m_identify_language;
}
void OAIEngineTranscribeSettings::setIdentifyLanguage(const bool &identify_language) {
    m_identify_language = identify_language;
    m_identify_language_isSet = true;
}

bool OAIEngineTranscribeSettings::is_identify_language_Set() const{
    return m_identify_language_isSet;
}

bool OAIEngineTranscribeSettings::is_identify_language_Valid() const{
    return m_identify_language_isValid;
}

QString OAIEngineTranscribeSettings::getLanguageOptions() const {
    return m_language_options;
}
void OAIEngineTranscribeSettings::setLanguageOptions(const QString &language_options) {
    m_language_options = language_options;
    m_language_options_isSet = true;
}

bool OAIEngineTranscribeSettings::is_language_options_Set() const{
    return m_language_options_isSet;
}

bool OAIEngineTranscribeSettings::is_language_options_Valid() const{
    return m_language_options_isValid;
}

OAITranscribeLanguageCode OAIEngineTranscribeSettings::getPreferredLanguage() const {
    return m_preferred_language;
}
void OAIEngineTranscribeSettings::setPreferredLanguage(const OAITranscribeLanguageCode &preferred_language) {
    m_preferred_language = preferred_language;
    m_preferred_language_isSet = true;
}

bool OAIEngineTranscribeSettings::is_preferred_language_Set() const{
    return m_preferred_language_isSet;
}

bool OAIEngineTranscribeSettings::is_preferred_language_Valid() const{
    return m_preferred_language_isValid;
}

QString OAIEngineTranscribeSettings::getVocabularyNames() const {
    return m_vocabulary_names;
}
void OAIEngineTranscribeSettings::setVocabularyNames(const QString &vocabulary_names) {
    m_vocabulary_names = vocabulary_names;
    m_vocabulary_names_isSet = true;
}

bool OAIEngineTranscribeSettings::is_vocabulary_names_Set() const{
    return m_vocabulary_names_isSet;
}

bool OAIEngineTranscribeSettings::is_vocabulary_names_Valid() const{
    return m_vocabulary_names_isValid;
}

QString OAIEngineTranscribeSettings::getVocabularyFilterNames() const {
    return m_vocabulary_filter_names;
}
void OAIEngineTranscribeSettings::setVocabularyFilterNames(const QString &vocabulary_filter_names) {
    m_vocabulary_filter_names = vocabulary_filter_names;
    m_vocabulary_filter_names_isSet = true;
}

bool OAIEngineTranscribeSettings::is_vocabulary_filter_names_Set() const{
    return m_vocabulary_filter_names_isSet;
}

bool OAIEngineTranscribeSettings::is_vocabulary_filter_names_Valid() const{
    return m_vocabulary_filter_names_isValid;
}

bool OAIEngineTranscribeSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_code.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_filter_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_filter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_partial_results_stabilization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_results_stability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_identification_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_redaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pii_entity_types_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_model_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identify_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_options_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_names_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocabulary_filter_names_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEngineTranscribeSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
