/**
 * Amazon Chime
 * <important> <p> <b>Most of these APIs are no longer supported and will not be updated.</b> We recommend using the latest versions in the <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/APIReference/welcome.html\">Amazon Chime SDK API reference</a>, in the Amazon Chime SDK.</p> <p>Using the latest versions requires migrating to dedicated namespaces. For more information, refer to <a href=\"https://docs.aws.amazon.com/chime-sdk/latest/dg/migrate-from-chm-namespace.html\">Migrating from the Amazon Chime namespace</a> in the <i>Amazon Chime SDK Developer Guide</i>.</p> </important> <p>The Amazon Chime application programming interface (API) is designed so administrators can perform key tasks, such as creating and managing Amazon Chime accounts, users, and Voice Connectors. This guide provides detailed information about the Amazon Chime API, including operations, types, inputs and outputs, and error codes.</p> <p>You can use an AWS SDK, the AWS Command Line Interface (AWS CLI), or the REST API to make API calls for Amazon Chime. We recommend using an AWS SDK or the AWS CLI. The page for each API action contains a <i>See Also</i> section that includes links to information about using the action with a language-specific AWS SDK or the AWS CLI.</p> <dl> <dt>Using an AWS SDK</dt> <dd> <p> You don't need to write code to calculate a signature for request authentication. The SDK clients authenticate your requests by using access keys that you provide. For more information about AWS SDKs, see the <a href=\"http://aws.amazon.com/developer/\">AWS Developer Center</a>. </p> </dd> <dt>Using the AWS CLI</dt> <dd> <p>Use your access keys with the AWS CLI to make API calls. For information about setting up the AWS CLI, see <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/installing.html\">Installing the AWS Command Line Interface</a> in the <i>AWS Command Line Interface User Guide</i>. For a list of available Amazon Chime commands, see the <a href=\"https://docs.aws.amazon.com/cli/latest/reference/chime/index.html\">Amazon Chime commands</a> in the <i>AWS CLI Command Reference</i>. </p> </dd> <dt>Using REST APIs</dt> <dd> <p>If you use REST to make API calls, you must authenticate your request by providing a signature. Amazon Chime supports Signature Version 4. For more information, see <a href=\"https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html\">Signature Version 4 Signing Process</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>When making REST API calls, use the service name <code>chime</code> and REST endpoint <code>https://service.chime.aws.amazon.com</code>.</p> </dd> </dl> <p>Administrative permissions are controlled using AWS Identity and Access Management (IAM). For more information, see <a href=\"https://docs.aws.amazon.com/chime/latest/ag/security-iam.html\">Identity and Access Management for Amazon Chime</a> in the <i>Amazon Chime Administration Guide</i>.</p>
 *
 * The version of the OpenAPI document: 2018-05-01
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetMediaCapturePipelineResponse_MediaCapturePipeline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::OAIGetMediaCapturePipelineResponse_MediaCapturePipeline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::OAIGetMediaCapturePipelineResponse_MediaCapturePipeline() {
    this->initializeModel();
}

OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::~OAIGetMediaCapturePipelineResponse_MediaCapturePipeline() {}

void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::initializeModel() {

    m_media_pipeline_id_isSet = false;
    m_media_pipeline_id_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sink_type_isSet = false;
    m_sink_type_isValid = false;

    m_sink_arn_isSet = false;
    m_sink_arn_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_updated_timestamp_isSet = false;
    m_updated_timestamp_isValid = false;

    m_chime_sdk_meeting_configuration_isSet = false;
    m_chime_sdk_meeting_configuration_isValid = false;
}

void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::fromJsonObject(QJsonObject json) {

    m_media_pipeline_id_isValid = ::OpenAPI::fromJsonValue(m_media_pipeline_id, json[QString("MediaPipelineId")]);
    m_media_pipeline_id_isSet = !json[QString("MediaPipelineId")].isNull() && m_media_pipeline_id_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("SourceType")]);
    m_source_type_isSet = !json[QString("SourceType")].isNull() && m_source_type_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sink_type_isValid = ::OpenAPI::fromJsonValue(m_sink_type, json[QString("SinkType")]);
    m_sink_type_isSet = !json[QString("SinkType")].isNull() && m_sink_type_isValid;

    m_sink_arn_isValid = ::OpenAPI::fromJsonValue(m_sink_arn, json[QString("SinkArn")]);
    m_sink_arn_isSet = !json[QString("SinkArn")].isNull() && m_sink_arn_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_updated_timestamp, json[QString("UpdatedTimestamp")]);
    m_updated_timestamp_isSet = !json[QString("UpdatedTimestamp")].isNull() && m_updated_timestamp_isValid;

    m_chime_sdk_meeting_configuration_isValid = ::OpenAPI::fromJsonValue(m_chime_sdk_meeting_configuration, json[QString("ChimeSdkMeetingConfiguration")]);
    m_chime_sdk_meeting_configuration_isSet = !json[QString("ChimeSdkMeetingConfiguration")].isNull() && m_chime_sdk_meeting_configuration_isValid;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::asJsonObject() const {
    QJsonObject obj;
    if (m_media_pipeline_id_isSet) {
        obj.insert(QString("MediaPipelineId"), ::OpenAPI::toJsonValue(m_media_pipeline_id));
    }
    if (m_source_type.isSet()) {
        obj.insert(QString("SourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sink_type.isSet()) {
        obj.insert(QString("SinkType"), ::OpenAPI::toJsonValue(m_sink_type));
    }
    if (m_sink_arn_isSet) {
        obj.insert(QString("SinkArn"), ::OpenAPI::toJsonValue(m_sink_arn));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_updated_timestamp_isSet) {
        obj.insert(QString("UpdatedTimestamp"), ::OpenAPI::toJsonValue(m_updated_timestamp));
    }
    if (m_chime_sdk_meeting_configuration.isSet()) {
        obj.insert(QString("ChimeSdkMeetingConfiguration"), ::OpenAPI::toJsonValue(m_chime_sdk_meeting_configuration));
    }
    return obj;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getMediaPipelineId() const {
    return m_media_pipeline_id;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setMediaPipelineId(const QString &media_pipeline_id) {
    m_media_pipeline_id = media_pipeline_id;
    m_media_pipeline_id_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_media_pipeline_id_Set() const{
    return m_media_pipeline_id_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_media_pipeline_id_Valid() const{
    return m_media_pipeline_id_isValid;
}

OAIMediaPipelineSourceType OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getSourceType() const {
    return m_source_type;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setSourceType(const OAIMediaPipelineSourceType &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_source_type_Valid() const{
    return m_source_type_isValid;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getSourceArn() const {
    return m_source_arn;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

OAIMediaPipelineStatus OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getStatus() const {
    return m_status;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setStatus(const OAIMediaPipelineStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_status_Valid() const{
    return m_status_isValid;
}

OAIMediaPipelineSinkType OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getSinkType() const {
    return m_sink_type;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setSinkType(const OAIMediaPipelineSinkType &sink_type) {
    m_sink_type = sink_type;
    m_sink_type_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_sink_type_Set() const{
    return m_sink_type_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_sink_type_Valid() const{
    return m_sink_type_isValid;
}

QString OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getSinkArn() const {
    return m_sink_arn;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setSinkArn(const QString &sink_arn) {
    m_sink_arn = sink_arn;
    m_sink_arn_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_sink_arn_Set() const{
    return m_sink_arn_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_sink_arn_Valid() const{
    return m_sink_arn_isValid;
}

QDateTime OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getUpdatedTimestamp() const {
    return m_updated_timestamp;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setUpdatedTimestamp(const QDateTime &updated_timestamp) {
    m_updated_timestamp = updated_timestamp;
    m_updated_timestamp_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_updated_timestamp_Set() const{
    return m_updated_timestamp_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_updated_timestamp_Valid() const{
    return m_updated_timestamp_isValid;
}

OAICreateMediaCapturePipelineRequest_ChimeSdkMeetingConfiguration OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::getChimeSdkMeetingConfiguration() const {
    return m_chime_sdk_meeting_configuration;
}
void OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::setChimeSdkMeetingConfiguration(const OAICreateMediaCapturePipelineRequest_ChimeSdkMeetingConfiguration &chime_sdk_meeting_configuration) {
    m_chime_sdk_meeting_configuration = chime_sdk_meeting_configuration;
    m_chime_sdk_meeting_configuration_isSet = true;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_chime_sdk_meeting_configuration_Set() const{
    return m_chime_sdk_meeting_configuration_isSet;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::is_chime_sdk_meeting_configuration_Valid() const{
    return m_chime_sdk_meeting_configuration_isValid;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_media_pipeline_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sink_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chime_sdk_meeting_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetMediaCapturePipelineResponse_MediaCapturePipeline::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
