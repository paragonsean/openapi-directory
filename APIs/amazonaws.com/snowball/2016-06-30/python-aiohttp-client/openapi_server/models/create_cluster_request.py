# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_cluster_request_notification import CreateClusterRequestNotification
from openapi_server.models.create_cluster_request_on_device_service_configuration import CreateClusterRequestOnDeviceServiceConfiguration
from openapi_server.models.create_cluster_request_resources import CreateClusterRequestResources
from openapi_server.models.create_cluster_request_tax_documents import CreateClusterRequestTaxDocuments
from openapi_server.models.job_type import JobType
from openapi_server.models.remote_management import RemoteManagement
from openapi_server.models.shipping_option import ShippingOption
from openapi_server.models.snowball_capacity import SnowballCapacity
from openapi_server.models.snowball_type import SnowballType
from openapi_server import util


class CreateClusterRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_type: JobType=None, resources: CreateClusterRequestResources=None, on_device_service_configuration: CreateClusterRequestOnDeviceServiceConfiguration=None, description: str=None, address_id: str=None, kms_key_arn: str=None, role_arn: str=None, snowball_type: SnowballType=None, shipping_option: ShippingOption=None, notification: CreateClusterRequestNotification=None, forwarding_address_id: str=None, tax_documents: CreateClusterRequestTaxDocuments=None, remote_management: RemoteManagement=None, initial_cluster_size: int=None, force_create_jobs: bool=None, long_term_pricing_ids: List=None, snowball_capacity_preference: SnowballCapacity=None):
        """CreateClusterRequest - a model defined in OpenAPI

        :param job_type: The job_type of this CreateClusterRequest.
        :param resources: The resources of this CreateClusterRequest.
        :param on_device_service_configuration: The on_device_service_configuration of this CreateClusterRequest.
        :param description: The description of this CreateClusterRequest.
        :param address_id: The address_id of this CreateClusterRequest.
        :param kms_key_arn: The kms_key_arn of this CreateClusterRequest.
        :param role_arn: The role_arn of this CreateClusterRequest.
        :param snowball_type: The snowball_type of this CreateClusterRequest.
        :param shipping_option: The shipping_option of this CreateClusterRequest.
        :param notification: The notification of this CreateClusterRequest.
        :param forwarding_address_id: The forwarding_address_id of this CreateClusterRequest.
        :param tax_documents: The tax_documents of this CreateClusterRequest.
        :param remote_management: The remote_management of this CreateClusterRequest.
        :param initial_cluster_size: The initial_cluster_size of this CreateClusterRequest.
        :param force_create_jobs: The force_create_jobs of this CreateClusterRequest.
        :param long_term_pricing_ids: The long_term_pricing_ids of this CreateClusterRequest.
        :param snowball_capacity_preference: The snowball_capacity_preference of this CreateClusterRequest.
        """
        self.openapi_types = {
            'job_type': JobType,
            'resources': CreateClusterRequestResources,
            'on_device_service_configuration': CreateClusterRequestOnDeviceServiceConfiguration,
            'description': str,
            'address_id': str,
            'kms_key_arn': str,
            'role_arn': str,
            'snowball_type': SnowballType,
            'shipping_option': ShippingOption,
            'notification': CreateClusterRequestNotification,
            'forwarding_address_id': str,
            'tax_documents': CreateClusterRequestTaxDocuments,
            'remote_management': RemoteManagement,
            'initial_cluster_size': int,
            'force_create_jobs': bool,
            'long_term_pricing_ids': List,
            'snowball_capacity_preference': SnowballCapacity
        }

        self.attribute_map = {
            'job_type': 'JobType',
            'resources': 'Resources',
            'on_device_service_configuration': 'OnDeviceServiceConfiguration',
            'description': 'Description',
            'address_id': 'AddressId',
            'kms_key_arn': 'KmsKeyARN',
            'role_arn': 'RoleARN',
            'snowball_type': 'SnowballType',
            'shipping_option': 'ShippingOption',
            'notification': 'Notification',
            'forwarding_address_id': 'ForwardingAddressId',
            'tax_documents': 'TaxDocuments',
            'remote_management': 'RemoteManagement',
            'initial_cluster_size': 'InitialClusterSize',
            'force_create_jobs': 'ForceCreateJobs',
            'long_term_pricing_ids': 'LongTermPricingIds',
            'snowball_capacity_preference': 'SnowballCapacityPreference'
        }

        self._job_type = job_type
        self._resources = resources
        self._on_device_service_configuration = on_device_service_configuration
        self._description = description
        self._address_id = address_id
        self._kms_key_arn = kms_key_arn
        self._role_arn = role_arn
        self._snowball_type = snowball_type
        self._shipping_option = shipping_option
        self._notification = notification
        self._forwarding_address_id = forwarding_address_id
        self._tax_documents = tax_documents
        self._remote_management = remote_management
        self._initial_cluster_size = initial_cluster_size
        self._force_create_jobs = force_create_jobs
        self._long_term_pricing_ids = long_term_pricing_ids
        self._snowball_capacity_preference = snowball_capacity_preference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateClusterRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateClusterRequest of this CreateClusterRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_type(self):
        """Gets the job_type of this CreateClusterRequest.


        :return: The job_type of this CreateClusterRequest.
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this CreateClusterRequest.


        :param job_type: The job_type of this CreateClusterRequest.
        :type job_type: JobType
        """
        if job_type is None:
            raise ValueError("Invalid value for `job_type`, must not be `None`")

        self._job_type = job_type

    @property
    def resources(self):
        """Gets the resources of this CreateClusterRequest.


        :return: The resources of this CreateClusterRequest.
        :rtype: CreateClusterRequestResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this CreateClusterRequest.


        :param resources: The resources of this CreateClusterRequest.
        :type resources: CreateClusterRequestResources
        """

        self._resources = resources

    @property
    def on_device_service_configuration(self):
        """Gets the on_device_service_configuration of this CreateClusterRequest.


        :return: The on_device_service_configuration of this CreateClusterRequest.
        :rtype: CreateClusterRequestOnDeviceServiceConfiguration
        """
        return self._on_device_service_configuration

    @on_device_service_configuration.setter
    def on_device_service_configuration(self, on_device_service_configuration):
        """Sets the on_device_service_configuration of this CreateClusterRequest.


        :param on_device_service_configuration: The on_device_service_configuration of this CreateClusterRequest.
        :type on_device_service_configuration: CreateClusterRequestOnDeviceServiceConfiguration
        """

        self._on_device_service_configuration = on_device_service_configuration

    @property
    def description(self):
        """Gets the description of this CreateClusterRequest.


        :return: The description of this CreateClusterRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateClusterRequest.


        :param description: The description of this CreateClusterRequest.
        :type description: str
        """

        self._description = description

    @property
    def address_id(self):
        """Gets the address_id of this CreateClusterRequest.


        :return: The address_id of this CreateClusterRequest.
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this CreateClusterRequest.


        :param address_id: The address_id of this CreateClusterRequest.
        :type address_id: str
        """
        if address_id is None:
            raise ValueError("Invalid value for `address_id`, must not be `None`")

        self._address_id = address_id

    @property
    def kms_key_arn(self):
        """Gets the kms_key_arn of this CreateClusterRequest.


        :return: The kms_key_arn of this CreateClusterRequest.
        :rtype: str
        """
        return self._kms_key_arn

    @kms_key_arn.setter
    def kms_key_arn(self, kms_key_arn):
        """Sets the kms_key_arn of this CreateClusterRequest.


        :param kms_key_arn: The kms_key_arn of this CreateClusterRequest.
        :type kms_key_arn: str
        """

        self._kms_key_arn = kms_key_arn

    @property
    def role_arn(self):
        """Gets the role_arn of this CreateClusterRequest.


        :return: The role_arn of this CreateClusterRequest.
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this CreateClusterRequest.


        :param role_arn: The role_arn of this CreateClusterRequest.
        :type role_arn: str
        """

        self._role_arn = role_arn

    @property
    def snowball_type(self):
        """Gets the snowball_type of this CreateClusterRequest.


        :return: The snowball_type of this CreateClusterRequest.
        :rtype: SnowballType
        """
        return self._snowball_type

    @snowball_type.setter
    def snowball_type(self, snowball_type):
        """Sets the snowball_type of this CreateClusterRequest.


        :param snowball_type: The snowball_type of this CreateClusterRequest.
        :type snowball_type: SnowballType
        """
        if snowball_type is None:
            raise ValueError("Invalid value for `snowball_type`, must not be `None`")

        self._snowball_type = snowball_type

    @property
    def shipping_option(self):
        """Gets the shipping_option of this CreateClusterRequest.


        :return: The shipping_option of this CreateClusterRequest.
        :rtype: ShippingOption
        """
        return self._shipping_option

    @shipping_option.setter
    def shipping_option(self, shipping_option):
        """Sets the shipping_option of this CreateClusterRequest.


        :param shipping_option: The shipping_option of this CreateClusterRequest.
        :type shipping_option: ShippingOption
        """
        if shipping_option is None:
            raise ValueError("Invalid value for `shipping_option`, must not be `None`")

        self._shipping_option = shipping_option

    @property
    def notification(self):
        """Gets the notification of this CreateClusterRequest.


        :return: The notification of this CreateClusterRequest.
        :rtype: CreateClusterRequestNotification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this CreateClusterRequest.


        :param notification: The notification of this CreateClusterRequest.
        :type notification: CreateClusterRequestNotification
        """

        self._notification = notification

    @property
    def forwarding_address_id(self):
        """Gets the forwarding_address_id of this CreateClusterRequest.


        :return: The forwarding_address_id of this CreateClusterRequest.
        :rtype: str
        """
        return self._forwarding_address_id

    @forwarding_address_id.setter
    def forwarding_address_id(self, forwarding_address_id):
        """Sets the forwarding_address_id of this CreateClusterRequest.


        :param forwarding_address_id: The forwarding_address_id of this CreateClusterRequest.
        :type forwarding_address_id: str
        """

        self._forwarding_address_id = forwarding_address_id

    @property
    def tax_documents(self):
        """Gets the tax_documents of this CreateClusterRequest.


        :return: The tax_documents of this CreateClusterRequest.
        :rtype: CreateClusterRequestTaxDocuments
        """
        return self._tax_documents

    @tax_documents.setter
    def tax_documents(self, tax_documents):
        """Sets the tax_documents of this CreateClusterRequest.


        :param tax_documents: The tax_documents of this CreateClusterRequest.
        :type tax_documents: CreateClusterRequestTaxDocuments
        """

        self._tax_documents = tax_documents

    @property
    def remote_management(self):
        """Gets the remote_management of this CreateClusterRequest.


        :return: The remote_management of this CreateClusterRequest.
        :rtype: RemoteManagement
        """
        return self._remote_management

    @remote_management.setter
    def remote_management(self, remote_management):
        """Sets the remote_management of this CreateClusterRequest.


        :param remote_management: The remote_management of this CreateClusterRequest.
        :type remote_management: RemoteManagement
        """

        self._remote_management = remote_management

    @property
    def initial_cluster_size(self):
        """Gets the initial_cluster_size of this CreateClusterRequest.


        :return: The initial_cluster_size of this CreateClusterRequest.
        :rtype: int
        """
        return self._initial_cluster_size

    @initial_cluster_size.setter
    def initial_cluster_size(self, initial_cluster_size):
        """Sets the initial_cluster_size of this CreateClusterRequest.


        :param initial_cluster_size: The initial_cluster_size of this CreateClusterRequest.
        :type initial_cluster_size: int
        """

        self._initial_cluster_size = initial_cluster_size

    @property
    def force_create_jobs(self):
        """Gets the force_create_jobs of this CreateClusterRequest.


        :return: The force_create_jobs of this CreateClusterRequest.
        :rtype: bool
        """
        return self._force_create_jobs

    @force_create_jobs.setter
    def force_create_jobs(self, force_create_jobs):
        """Sets the force_create_jobs of this CreateClusterRequest.


        :param force_create_jobs: The force_create_jobs of this CreateClusterRequest.
        :type force_create_jobs: bool
        """

        self._force_create_jobs = force_create_jobs

    @property
    def long_term_pricing_ids(self):
        """Gets the long_term_pricing_ids of this CreateClusterRequest.


        :return: The long_term_pricing_ids of this CreateClusterRequest.
        :rtype: List
        """
        return self._long_term_pricing_ids

    @long_term_pricing_ids.setter
    def long_term_pricing_ids(self, long_term_pricing_ids):
        """Sets the long_term_pricing_ids of this CreateClusterRequest.


        :param long_term_pricing_ids: The long_term_pricing_ids of this CreateClusterRequest.
        :type long_term_pricing_ids: List
        """

        self._long_term_pricing_ids = long_term_pricing_ids

    @property
    def snowball_capacity_preference(self):
        """Gets the snowball_capacity_preference of this CreateClusterRequest.


        :return: The snowball_capacity_preference of this CreateClusterRequest.
        :rtype: SnowballCapacity
        """
        return self._snowball_capacity_preference

    @snowball_capacity_preference.setter
    def snowball_capacity_preference(self, snowball_capacity_preference):
        """Sets the snowball_capacity_preference of this CreateClusterRequest.


        :param snowball_capacity_preference: The snowball_capacity_preference of this CreateClusterRequest.
        :type snowball_capacity_preference: SnowballCapacity
        """

        self._snowball_capacity_preference = snowball_capacity_preference
