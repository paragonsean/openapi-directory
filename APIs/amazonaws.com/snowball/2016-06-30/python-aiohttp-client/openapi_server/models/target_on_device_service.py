# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_service_name import DeviceServiceName
from openapi_server.models.transfer_option import TransferOption
from openapi_server import util


class TargetOnDeviceService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_name: DeviceServiceName=None, transfer_option: TransferOption=None):
        """TargetOnDeviceService - a model defined in OpenAPI

        :param service_name: The service_name of this TargetOnDeviceService.
        :param transfer_option: The transfer_option of this TargetOnDeviceService.
        """
        self.openapi_types = {
            'service_name': DeviceServiceName,
            'transfer_option': TransferOption
        }

        self.attribute_map = {
            'service_name': 'ServiceName',
            'transfer_option': 'TransferOption'
        }

        self._service_name = service_name
        self._transfer_option = transfer_option

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TargetOnDeviceService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TargetOnDeviceService of this TargetOnDeviceService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self):
        """Gets the service_name of this TargetOnDeviceService.


        :return: The service_name of this TargetOnDeviceService.
        :rtype: DeviceServiceName
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this TargetOnDeviceService.


        :param service_name: The service_name of this TargetOnDeviceService.
        :type service_name: DeviceServiceName
        """

        self._service_name = service_name

    @property
    def transfer_option(self):
        """Gets the transfer_option of this TargetOnDeviceService.


        :return: The transfer_option of this TargetOnDeviceService.
        :rtype: TransferOption
        """
        return self._transfer_option

    @transfer_option.setter
    def transfer_option(self, transfer_option):
        """Sets the transfer_option of this TargetOnDeviceService.


        :param transfer_option: The transfer_option of this TargetOnDeviceService.
        :type transfer_option: TransferOption
        """

        self._transfer_option = transfer_option
