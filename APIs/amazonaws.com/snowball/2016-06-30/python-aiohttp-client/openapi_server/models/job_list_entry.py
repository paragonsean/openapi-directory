# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_state import JobState
from openapi_server.models.job_type import JobType
from openapi_server.models.snowball_type import SnowballType
from openapi_server import util


class JobListEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_id: str=None, job_state: JobState=None, is_master: bool=None, job_type: JobType=None, snowball_type: SnowballType=None, creation_date: datetime=None, description: str=None):
        """JobListEntry - a model defined in OpenAPI

        :param job_id: The job_id of this JobListEntry.
        :param job_state: The job_state of this JobListEntry.
        :param is_master: The is_master of this JobListEntry.
        :param job_type: The job_type of this JobListEntry.
        :param snowball_type: The snowball_type of this JobListEntry.
        :param creation_date: The creation_date of this JobListEntry.
        :param description: The description of this JobListEntry.
        """
        self.openapi_types = {
            'job_id': str,
            'job_state': JobState,
            'is_master': bool,
            'job_type': JobType,
            'snowball_type': SnowballType,
            'creation_date': datetime,
            'description': str
        }

        self.attribute_map = {
            'job_id': 'JobId',
            'job_state': 'JobState',
            'is_master': 'IsMaster',
            'job_type': 'JobType',
            'snowball_type': 'SnowballType',
            'creation_date': 'CreationDate',
            'description': 'Description'
        }

        self._job_id = job_id
        self._job_state = job_state
        self._is_master = is_master
        self._job_type = job_type
        self._snowball_type = snowball_type
        self._creation_date = creation_date
        self._description = description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobListEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobListEntry of this JobListEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_id(self):
        """Gets the job_id of this JobListEntry.


        :return: The job_id of this JobListEntry.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobListEntry.


        :param job_id: The job_id of this JobListEntry.
        :type job_id: str
        """

        self._job_id = job_id

    @property
    def job_state(self):
        """Gets the job_state of this JobListEntry.


        :return: The job_state of this JobListEntry.
        :rtype: JobState
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this JobListEntry.


        :param job_state: The job_state of this JobListEntry.
        :type job_state: JobState
        """

        self._job_state = job_state

    @property
    def is_master(self):
        """Gets the is_master of this JobListEntry.


        :return: The is_master of this JobListEntry.
        :rtype: bool
        """
        return self._is_master

    @is_master.setter
    def is_master(self, is_master):
        """Sets the is_master of this JobListEntry.


        :param is_master: The is_master of this JobListEntry.
        :type is_master: bool
        """

        self._is_master = is_master

    @property
    def job_type(self):
        """Gets the job_type of this JobListEntry.


        :return: The job_type of this JobListEntry.
        :rtype: JobType
        """
        return self._job_type

    @job_type.setter
    def job_type(self, job_type):
        """Sets the job_type of this JobListEntry.


        :param job_type: The job_type of this JobListEntry.
        :type job_type: JobType
        """

        self._job_type = job_type

    @property
    def snowball_type(self):
        """Gets the snowball_type of this JobListEntry.


        :return: The snowball_type of this JobListEntry.
        :rtype: SnowballType
        """
        return self._snowball_type

    @snowball_type.setter
    def snowball_type(self, snowball_type):
        """Sets the snowball_type of this JobListEntry.


        :param snowball_type: The snowball_type of this JobListEntry.
        :type snowball_type: SnowballType
        """

        self._snowball_type = snowball_type

    @property
    def creation_date(self):
        """Gets the creation_date of this JobListEntry.


        :return: The creation_date of this JobListEntry.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this JobListEntry.


        :param creation_date: The creation_date of this JobListEntry.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this JobListEntry.


        :return: The description of this JobListEntry.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this JobListEntry.


        :param description: The description of this JobListEntry.
        :type description: str
        """

        self._description = description
