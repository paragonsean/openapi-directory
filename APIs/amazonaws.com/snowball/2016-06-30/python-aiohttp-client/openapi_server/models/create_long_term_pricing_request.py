# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.long_term_pricing_type import LongTermPricingType
from openapi_server.models.snowball_type import SnowballType
from openapi_server import util


class CreateLongTermPricingRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, long_term_pricing_type: LongTermPricingType=None, is_long_term_pricing_auto_renew: bool=None, snowball_type: SnowballType=None):
        """CreateLongTermPricingRequest - a model defined in OpenAPI

        :param long_term_pricing_type: The long_term_pricing_type of this CreateLongTermPricingRequest.
        :param is_long_term_pricing_auto_renew: The is_long_term_pricing_auto_renew of this CreateLongTermPricingRequest.
        :param snowball_type: The snowball_type of this CreateLongTermPricingRequest.
        """
        self.openapi_types = {
            'long_term_pricing_type': LongTermPricingType,
            'is_long_term_pricing_auto_renew': bool,
            'snowball_type': SnowballType
        }

        self.attribute_map = {
            'long_term_pricing_type': 'LongTermPricingType',
            'is_long_term_pricing_auto_renew': 'IsLongTermPricingAutoRenew',
            'snowball_type': 'SnowballType'
        }

        self._long_term_pricing_type = long_term_pricing_type
        self._is_long_term_pricing_auto_renew = is_long_term_pricing_auto_renew
        self._snowball_type = snowball_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateLongTermPricingRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateLongTermPricingRequest of this CreateLongTermPricingRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def long_term_pricing_type(self):
        """Gets the long_term_pricing_type of this CreateLongTermPricingRequest.


        :return: The long_term_pricing_type of this CreateLongTermPricingRequest.
        :rtype: LongTermPricingType
        """
        return self._long_term_pricing_type

    @long_term_pricing_type.setter
    def long_term_pricing_type(self, long_term_pricing_type):
        """Sets the long_term_pricing_type of this CreateLongTermPricingRequest.


        :param long_term_pricing_type: The long_term_pricing_type of this CreateLongTermPricingRequest.
        :type long_term_pricing_type: LongTermPricingType
        """
        if long_term_pricing_type is None:
            raise ValueError("Invalid value for `long_term_pricing_type`, must not be `None`")

        self._long_term_pricing_type = long_term_pricing_type

    @property
    def is_long_term_pricing_auto_renew(self):
        """Gets the is_long_term_pricing_auto_renew of this CreateLongTermPricingRequest.


        :return: The is_long_term_pricing_auto_renew of this CreateLongTermPricingRequest.
        :rtype: bool
        """
        return self._is_long_term_pricing_auto_renew

    @is_long_term_pricing_auto_renew.setter
    def is_long_term_pricing_auto_renew(self, is_long_term_pricing_auto_renew):
        """Sets the is_long_term_pricing_auto_renew of this CreateLongTermPricingRequest.


        :param is_long_term_pricing_auto_renew: The is_long_term_pricing_auto_renew of this CreateLongTermPricingRequest.
        :type is_long_term_pricing_auto_renew: bool
        """

        self._is_long_term_pricing_auto_renew = is_long_term_pricing_auto_renew

    @property
    def snowball_type(self):
        """Gets the snowball_type of this CreateLongTermPricingRequest.


        :return: The snowball_type of this CreateLongTermPricingRequest.
        :rtype: SnowballType
        """
        return self._snowball_type

    @snowball_type.setter
    def snowball_type(self, snowball_type):
        """Sets the snowball_type of this CreateLongTermPricingRequest.


        :param snowball_type: The snowball_type of this CreateLongTermPricingRequest.
        :type snowball_type: SnowballType
        """
        if snowball_type is None:
            raise ValueError("Invalid value for `snowball_type`, must not be `None`")

        self._snowball_type = snowball_type
