# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_name import ServiceName
from openapi_server import util


class ListServiceVersionsResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_versions: List=None, service_name: ServiceName=None, dependent_services: List=None, next_token: str=None):
        """ListServiceVersionsResult - a model defined in OpenAPI

        :param service_versions: The service_versions of this ListServiceVersionsResult.
        :param service_name: The service_name of this ListServiceVersionsResult.
        :param dependent_services: The dependent_services of this ListServiceVersionsResult.
        :param next_token: The next_token of this ListServiceVersionsResult.
        """
        self.openapi_types = {
            'service_versions': List,
            'service_name': ServiceName,
            'dependent_services': List,
            'next_token': str
        }

        self.attribute_map = {
            'service_versions': 'ServiceVersions',
            'service_name': 'ServiceName',
            'dependent_services': 'DependentServices',
            'next_token': 'NextToken'
        }

        self._service_versions = service_versions
        self._service_name = service_name
        self._dependent_services = dependent_services
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListServiceVersionsResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListServiceVersionsResult of this ListServiceVersionsResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_versions(self):
        """Gets the service_versions of this ListServiceVersionsResult.


        :return: The service_versions of this ListServiceVersionsResult.
        :rtype: List
        """
        return self._service_versions

    @service_versions.setter
    def service_versions(self, service_versions):
        """Sets the service_versions of this ListServiceVersionsResult.


        :param service_versions: The service_versions of this ListServiceVersionsResult.
        :type service_versions: List
        """
        if service_versions is None:
            raise ValueError("Invalid value for `service_versions`, must not be `None`")

        self._service_versions = service_versions

    @property
    def service_name(self):
        """Gets the service_name of this ListServiceVersionsResult.


        :return: The service_name of this ListServiceVersionsResult.
        :rtype: ServiceName
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this ListServiceVersionsResult.


        :param service_name: The service_name of this ListServiceVersionsResult.
        :type service_name: ServiceName
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")

        self._service_name = service_name

    @property
    def dependent_services(self):
        """Gets the dependent_services of this ListServiceVersionsResult.


        :return: The dependent_services of this ListServiceVersionsResult.
        :rtype: List
        """
        return self._dependent_services

    @dependent_services.setter
    def dependent_services(self, dependent_services):
        """Sets the dependent_services of this ListServiceVersionsResult.


        :param dependent_services: The dependent_services of this ListServiceVersionsResult.
        :type dependent_services: List
        """

        self._dependent_services = dependent_services

    @property
    def next_token(self):
        """Gets the next_token of this ListServiceVersionsResult.


        :return: The next_token of this ListServiceVersionsResult.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListServiceVersionsResult.


        :param next_token: The next_token of this ListServiceVersionsResult.
        :type next_token: str
        """

        self._next_token = next_token
