# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dependent_service_service_version import DependentServiceServiceVersion
from openapi_server.models.service_name import ServiceName
from openapi_server import util


class DependentService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_name: ServiceName=None, service_version: DependentServiceServiceVersion=None):
        """DependentService - a model defined in OpenAPI

        :param service_name: The service_name of this DependentService.
        :param service_version: The service_version of this DependentService.
        """
        self.openapi_types = {
            'service_name': ServiceName,
            'service_version': DependentServiceServiceVersion
        }

        self.attribute_map = {
            'service_name': 'ServiceName',
            'service_version': 'ServiceVersion'
        }

        self._service_name = service_name
        self._service_version = service_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DependentService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DependentService of this DependentService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_name(self):
        """Gets the service_name of this DependentService.


        :return: The service_name of this DependentService.
        :rtype: ServiceName
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this DependentService.


        :param service_name: The service_name of this DependentService.
        :type service_name: ServiceName
        """

        self._service_name = service_name

    @property
    def service_version(self):
        """Gets the service_version of this DependentService.


        :return: The service_version of this DependentService.
        :rtype: DependentServiceServiceVersion
        """
        return self._service_version

    @service_version.setter
    def service_version(self, service_version):
        """Sets the service_version of this DependentService.


        :param service_version: The service_version of this DependentService.
        :type service_version: DependentServiceServiceVersion
        """

        self._service_version = service_version
