# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataTransfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_transferred: int=None, objects_transferred: int=None, total_bytes: int=None, total_objects: int=None):
        """DataTransfer - a model defined in OpenAPI

        :param bytes_transferred: The bytes_transferred of this DataTransfer.
        :param objects_transferred: The objects_transferred of this DataTransfer.
        :param total_bytes: The total_bytes of this DataTransfer.
        :param total_objects: The total_objects of this DataTransfer.
        """
        self.openapi_types = {
            'bytes_transferred': int,
            'objects_transferred': int,
            'total_bytes': int,
            'total_objects': int
        }

        self.attribute_map = {
            'bytes_transferred': 'BytesTransferred',
            'objects_transferred': 'ObjectsTransferred',
            'total_bytes': 'TotalBytes',
            'total_objects': 'TotalObjects'
        }

        self._bytes_transferred = bytes_transferred
        self._objects_transferred = objects_transferred
        self._total_bytes = total_bytes
        self._total_objects = total_objects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataTransfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataTransfer of this DataTransfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_transferred(self):
        """Gets the bytes_transferred of this DataTransfer.


        :return: The bytes_transferred of this DataTransfer.
        :rtype: int
        """
        return self._bytes_transferred

    @bytes_transferred.setter
    def bytes_transferred(self, bytes_transferred):
        """Sets the bytes_transferred of this DataTransfer.


        :param bytes_transferred: The bytes_transferred of this DataTransfer.
        :type bytes_transferred: int
        """

        self._bytes_transferred = bytes_transferred

    @property
    def objects_transferred(self):
        """Gets the objects_transferred of this DataTransfer.


        :return: The objects_transferred of this DataTransfer.
        :rtype: int
        """
        return self._objects_transferred

    @objects_transferred.setter
    def objects_transferred(self, objects_transferred):
        """Sets the objects_transferred of this DataTransfer.


        :param objects_transferred: The objects_transferred of this DataTransfer.
        :type objects_transferred: int
        """

        self._objects_transferred = objects_transferred

    @property
    def total_bytes(self):
        """Gets the total_bytes of this DataTransfer.


        :return: The total_bytes of this DataTransfer.
        :rtype: int
        """
        return self._total_bytes

    @total_bytes.setter
    def total_bytes(self, total_bytes):
        """Sets the total_bytes of this DataTransfer.


        :param total_bytes: The total_bytes of this DataTransfer.
        :type total_bytes: int
        """

        self._total_bytes = total_bytes

    @property
    def total_objects(self):
        """Gets the total_objects of this DataTransfer.


        :return: The total_objects of this DataTransfer.
        :rtype: int
        """
        return self._total_objects

    @total_objects.setter
    def total_objects(self, total_objects):
        """Sets the total_objects of this DataTransfer.


        :param total_objects: The total_objects of this DataTransfer.
        :type total_objects: int
        """

        self._total_objects = total_objects
