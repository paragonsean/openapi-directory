# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_type import AddressType
from openapi_server import util


class DescribeAddressResultAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_id: str=None, name: str=None, company: str=None, street1: str=None, street2: str=None, street3: str=None, city: str=None, state_or_province: str=None, prefecture_or_district: str=None, landmark: str=None, country: str=None, postal_code: str=None, phone_number: str=None, is_restricted: bool=None, type: AddressType=None):
        """DescribeAddressResultAddress - a model defined in OpenAPI

        :param address_id: The address_id of this DescribeAddressResultAddress.
        :param name: The name of this DescribeAddressResultAddress.
        :param company: The company of this DescribeAddressResultAddress.
        :param street1: The street1 of this DescribeAddressResultAddress.
        :param street2: The street2 of this DescribeAddressResultAddress.
        :param street3: The street3 of this DescribeAddressResultAddress.
        :param city: The city of this DescribeAddressResultAddress.
        :param state_or_province: The state_or_province of this DescribeAddressResultAddress.
        :param prefecture_or_district: The prefecture_or_district of this DescribeAddressResultAddress.
        :param landmark: The landmark of this DescribeAddressResultAddress.
        :param country: The country of this DescribeAddressResultAddress.
        :param postal_code: The postal_code of this DescribeAddressResultAddress.
        :param phone_number: The phone_number of this DescribeAddressResultAddress.
        :param is_restricted: The is_restricted of this DescribeAddressResultAddress.
        :param type: The type of this DescribeAddressResultAddress.
        """
        self.openapi_types = {
            'address_id': str,
            'name': str,
            'company': str,
            'street1': str,
            'street2': str,
            'street3': str,
            'city': str,
            'state_or_province': str,
            'prefecture_or_district': str,
            'landmark': str,
            'country': str,
            'postal_code': str,
            'phone_number': str,
            'is_restricted': bool,
            'type': AddressType
        }

        self.attribute_map = {
            'address_id': 'AddressId',
            'name': 'Name',
            'company': 'Company',
            'street1': 'Street1',
            'street2': 'Street2',
            'street3': 'Street3',
            'city': 'City',
            'state_or_province': 'StateOrProvince',
            'prefecture_or_district': 'PrefectureOrDistrict',
            'landmark': 'Landmark',
            'country': 'Country',
            'postal_code': 'PostalCode',
            'phone_number': 'PhoneNumber',
            'is_restricted': 'IsRestricted',
            'type': 'Type'
        }

        self._address_id = address_id
        self._name = name
        self._company = company
        self._street1 = street1
        self._street2 = street2
        self._street3 = street3
        self._city = city
        self._state_or_province = state_or_province
        self._prefecture_or_district = prefecture_or_district
        self._landmark = landmark
        self._country = country
        self._postal_code = postal_code
        self._phone_number = phone_number
        self._is_restricted = is_restricted
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAddressResultAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAddressResult_Address of this DescribeAddressResultAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_id(self):
        """Gets the address_id of this DescribeAddressResultAddress.


        :return: The address_id of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._address_id

    @address_id.setter
    def address_id(self, address_id):
        """Sets the address_id of this DescribeAddressResultAddress.


        :param address_id: The address_id of this DescribeAddressResultAddress.
        :type address_id: str
        """

        self._address_id = address_id

    @property
    def name(self):
        """Gets the name of this DescribeAddressResultAddress.


        :return: The name of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DescribeAddressResultAddress.


        :param name: The name of this DescribeAddressResultAddress.
        :type name: str
        """

        self._name = name

    @property
    def company(self):
        """Gets the company of this DescribeAddressResultAddress.


        :return: The company of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this DescribeAddressResultAddress.


        :param company: The company of this DescribeAddressResultAddress.
        :type company: str
        """

        self._company = company

    @property
    def street1(self):
        """Gets the street1 of this DescribeAddressResultAddress.


        :return: The street1 of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._street1

    @street1.setter
    def street1(self, street1):
        """Sets the street1 of this DescribeAddressResultAddress.


        :param street1: The street1 of this DescribeAddressResultAddress.
        :type street1: str
        """

        self._street1 = street1

    @property
    def street2(self):
        """Gets the street2 of this DescribeAddressResultAddress.


        :return: The street2 of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this DescribeAddressResultAddress.


        :param street2: The street2 of this DescribeAddressResultAddress.
        :type street2: str
        """

        self._street2 = street2

    @property
    def street3(self):
        """Gets the street3 of this DescribeAddressResultAddress.


        :return: The street3 of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._street3

    @street3.setter
    def street3(self, street3):
        """Sets the street3 of this DescribeAddressResultAddress.


        :param street3: The street3 of this DescribeAddressResultAddress.
        :type street3: str
        """

        self._street3 = street3

    @property
    def city(self):
        """Gets the city of this DescribeAddressResultAddress.


        :return: The city of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this DescribeAddressResultAddress.


        :param city: The city of this DescribeAddressResultAddress.
        :type city: str
        """

        self._city = city

    @property
    def state_or_province(self):
        """Gets the state_or_province of this DescribeAddressResultAddress.


        :return: The state_or_province of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this DescribeAddressResultAddress.


        :param state_or_province: The state_or_province of this DescribeAddressResultAddress.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def prefecture_or_district(self):
        """Gets the prefecture_or_district of this DescribeAddressResultAddress.


        :return: The prefecture_or_district of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._prefecture_or_district

    @prefecture_or_district.setter
    def prefecture_or_district(self, prefecture_or_district):
        """Sets the prefecture_or_district of this DescribeAddressResultAddress.


        :param prefecture_or_district: The prefecture_or_district of this DescribeAddressResultAddress.
        :type prefecture_or_district: str
        """

        self._prefecture_or_district = prefecture_or_district

    @property
    def landmark(self):
        """Gets the landmark of this DescribeAddressResultAddress.


        :return: The landmark of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._landmark

    @landmark.setter
    def landmark(self, landmark):
        """Sets the landmark of this DescribeAddressResultAddress.


        :param landmark: The landmark of this DescribeAddressResultAddress.
        :type landmark: str
        """

        self._landmark = landmark

    @property
    def country(self):
        """Gets the country of this DescribeAddressResultAddress.


        :return: The country of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DescribeAddressResultAddress.


        :param country: The country of this DescribeAddressResultAddress.
        :type country: str
        """

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this DescribeAddressResultAddress.


        :return: The postal_code of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this DescribeAddressResultAddress.


        :param postal_code: The postal_code of this DescribeAddressResultAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def phone_number(self):
        """Gets the phone_number of this DescribeAddressResultAddress.


        :return: The phone_number of this DescribeAddressResultAddress.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this DescribeAddressResultAddress.


        :param phone_number: The phone_number of this DescribeAddressResultAddress.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def is_restricted(self):
        """Gets the is_restricted of this DescribeAddressResultAddress.


        :return: The is_restricted of this DescribeAddressResultAddress.
        :rtype: bool
        """
        return self._is_restricted

    @is_restricted.setter
    def is_restricted(self, is_restricted):
        """Sets the is_restricted of this DescribeAddressResultAddress.


        :param is_restricted: The is_restricted of this DescribeAddressResultAddress.
        :type is_restricted: bool
        """

        self._is_restricted = is_restricted

    @property
    def type(self):
        """Gets the type of this DescribeAddressResultAddress.


        :return: The type of this DescribeAddressResultAddress.
        :rtype: AddressType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DescribeAddressResultAddress.


        :param type: The type of this DescribeAddressResultAddress.
        :type type: AddressType
        """

        self._type = type
