/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonImportExportSnowball);
  }
}(this, function(expect, AmazonImportExportSnowball) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonImportExportSnowball.Address();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Address', function() {
    it('should create an instance of Address', function() {
      // uncomment below and update the code to test Address
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be.a(AmazonImportExportSnowball.Address);
    });

    it('should have the property addressId (base name: "AddressId")', function() {
      // uncomment below and update the code to test the property addressId
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property company (base name: "Company")', function() {
      // uncomment below and update the code to test the property company
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property street1 (base name: "Street1")', function() {
      // uncomment below and update the code to test the property street1
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property street2 (base name: "Street2")', function() {
      // uncomment below and update the code to test the property street2
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property street3 (base name: "Street3")', function() {
      // uncomment below and update the code to test the property street3
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "City")', function() {
      // uncomment below and update the code to test the property city
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property stateOrProvince (base name: "StateOrProvince")', function() {
      // uncomment below and update the code to test the property stateOrProvince
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property prefectureOrDistrict (base name: "PrefectureOrDistrict")', function() {
      // uncomment below and update the code to test the property prefectureOrDistrict
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property landmark (base name: "Landmark")', function() {
      // uncomment below and update the code to test the property landmark
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "Country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property postalCode (base name: "PostalCode")', function() {
      // uncomment below and update the code to test the property postalCode
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "PhoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property isRestricted (base name: "IsRestricted")', function() {
      // uncomment below and update the code to test the property isRestricted
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new AmazonImportExportSnowball.Address();
      //expect(instance).to.be();
    });

  });

}));
