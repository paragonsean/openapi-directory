/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonImportExportSnowball);
  }
}(this, function(expect, AmazonImportExportSnowball) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonImportExportSnowball.PickupDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PickupDetails', function() {
    it('should create an instance of PickupDetails', function() {
      // uncomment below and update the code to test PickupDetails
      //var instance = new AmazonImportExportSnowball.PickupDetails();
      //expect(instance).to.be.a(AmazonImportExportSnowball.PickupDetails);
    });

    it('should have the property name (base name: "Name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new AmazonImportExportSnowball.PickupDetails();
      //expect(instance).to.be();
    });

    it('should have the property phoneNumber (base name: "PhoneNumber")', function() {
      // uncomment below and update the code to test the property phoneNumber
      //var instance = new AmazonImportExportSnowball.PickupDetails();
      //expect(instance).to.be();
    });

    it('should have the property email (base name: "Email")', function() {
      // uncomment below and update the code to test the property email
      //var instance = new AmazonImportExportSnowball.PickupDetails();
      //expect(instance).to.be();
    });

    it('should have the property identificationNumber (base name: "IdentificationNumber")', function() {
      // uncomment below and update the code to test the property identificationNumber
      //var instance = new AmazonImportExportSnowball.PickupDetails();
      //expect(instance).to.be();
    });

    it('should have the property identificationExpirationDate (base name: "IdentificationExpirationDate")', function() {
      // uncomment below and update the code to test the property identificationExpirationDate
      //var instance = new AmazonImportExportSnowball.PickupDetails();
      //expect(instance).to.be();
    });

    it('should have the property identificationIssuingOrg (base name: "IdentificationIssuingOrg")', function() {
      // uncomment below and update the code to test the property identificationIssuingOrg
      //var instance = new AmazonImportExportSnowball.PickupDetails();
      //expect(instance).to.be();
    });

    it('should have the property devicePickupId (base name: "DevicePickupId")', function() {
      // uncomment below and update the code to test the property devicePickupId
      //var instance = new AmazonImportExportSnowball.PickupDetails();
      //expect(instance).to.be();
    });

  });

}));
