/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LongTermPricingType from './LongTermPricingType';
import SnowballType from './SnowballType';

/**
 * The LongTermPricingListEntry model module.
 * @module model/LongTermPricingListEntry
 * @version 2016-06-30
 */
class LongTermPricingListEntry {
    /**
     * Constructs a new <code>LongTermPricingListEntry</code>.
     * Each &lt;code&gt;LongTermPricingListEntry&lt;/code&gt; object contains information about a long-term pricing type.
     * @alias module:model/LongTermPricingListEntry
     */
    constructor() { 
        
        LongTermPricingListEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LongTermPricingListEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LongTermPricingListEntry} obj Optional instance to populate.
     * @return {module:model/LongTermPricingListEntry} The populated <code>LongTermPricingListEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LongTermPricingListEntry();

            if (data.hasOwnProperty('LongTermPricingId')) {
                obj['LongTermPricingId'] = ApiClient.convertToType(data['LongTermPricingId'], 'String');
            }
            if (data.hasOwnProperty('LongTermPricingEndDate')) {
                obj['LongTermPricingEndDate'] = ApiClient.convertToType(data['LongTermPricingEndDate'], 'Date');
            }
            if (data.hasOwnProperty('LongTermPricingStartDate')) {
                obj['LongTermPricingStartDate'] = ApiClient.convertToType(data['LongTermPricingStartDate'], 'Date');
            }
            if (data.hasOwnProperty('LongTermPricingType')) {
                obj['LongTermPricingType'] = ApiClient.convertToType(data['LongTermPricingType'], LongTermPricingType);
            }
            if (data.hasOwnProperty('CurrentActiveJob')) {
                obj['CurrentActiveJob'] = ApiClient.convertToType(data['CurrentActiveJob'], 'String');
            }
            if (data.hasOwnProperty('ReplacementJob')) {
                obj['ReplacementJob'] = ApiClient.convertToType(data['ReplacementJob'], 'String');
            }
            if (data.hasOwnProperty('IsLongTermPricingAutoRenew')) {
                obj['IsLongTermPricingAutoRenew'] = ApiClient.convertToType(data['IsLongTermPricingAutoRenew'], 'Boolean');
            }
            if (data.hasOwnProperty('LongTermPricingStatus')) {
                obj['LongTermPricingStatus'] = ApiClient.convertToType(data['LongTermPricingStatus'], 'String');
            }
            if (data.hasOwnProperty('SnowballType')) {
                obj['SnowballType'] = ApiClient.convertToType(data['SnowballType'], SnowballType);
            }
            if (data.hasOwnProperty('JobIds')) {
                obj['JobIds'] = ApiClient.convertToType(data['JobIds'], Array);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LongTermPricingListEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LongTermPricingListEntry</code>.
     */
    static validateJSON(data) {
        // validate the optional field `LongTermPricingId`
        if (data['LongTermPricingId']) { // data not null
          String.validateJSON(data['LongTermPricingId']);
        }
        // validate the optional field `LongTermPricingEndDate`
        if (data['LongTermPricingEndDate']) { // data not null
          Date.validateJSON(data['LongTermPricingEndDate']);
        }
        // validate the optional field `LongTermPricingStartDate`
        if (data['LongTermPricingStartDate']) { // data not null
          Date.validateJSON(data['LongTermPricingStartDate']);
        }
        // validate the optional field `LongTermPricingType`
        if (data['LongTermPricingType']) { // data not null
          LongTermPricingType.validateJSON(data['LongTermPricingType']);
        }
        // validate the optional field `CurrentActiveJob`
        if (data['CurrentActiveJob']) { // data not null
          String.validateJSON(data['CurrentActiveJob']);
        }
        // validate the optional field `ReplacementJob`
        if (data['ReplacementJob']) { // data not null
          String.validateJSON(data['ReplacementJob']);
        }
        // validate the optional field `IsLongTermPricingAutoRenew`
        if (data['IsLongTermPricingAutoRenew']) { // data not null
          Boolean.validateJSON(data['IsLongTermPricingAutoRenew']);
        }
        // validate the optional field `LongTermPricingStatus`
        if (data['LongTermPricingStatus']) { // data not null
          String.validateJSON(data['LongTermPricingStatus']);
        }
        // validate the optional field `SnowballType`
        if (data['SnowballType']) { // data not null
          SnowballType.validateJSON(data['SnowballType']);
        }
        // validate the optional field `JobIds`
        if (data['JobIds']) { // data not null
          Array.validateJSON(data['JobIds']);
        }

        return true;
    }


}



/**
 * @member {String} LongTermPricingId
 */
LongTermPricingListEntry.prototype['LongTermPricingId'] = undefined;

/**
 * @member {Date} LongTermPricingEndDate
 */
LongTermPricingListEntry.prototype['LongTermPricingEndDate'] = undefined;

/**
 * @member {Date} LongTermPricingStartDate
 */
LongTermPricingListEntry.prototype['LongTermPricingStartDate'] = undefined;

/**
 * @member {module:model/LongTermPricingType} LongTermPricingType
 */
LongTermPricingListEntry.prototype['LongTermPricingType'] = undefined;

/**
 * @member {String} CurrentActiveJob
 */
LongTermPricingListEntry.prototype['CurrentActiveJob'] = undefined;

/**
 * @member {String} ReplacementJob
 */
LongTermPricingListEntry.prototype['ReplacementJob'] = undefined;

/**
 * @member {Boolean} IsLongTermPricingAutoRenew
 */
LongTermPricingListEntry.prototype['IsLongTermPricingAutoRenew'] = undefined;

/**
 * @member {String} LongTermPricingStatus
 */
LongTermPricingListEntry.prototype['LongTermPricingStatus'] = undefined;

/**
 * @member {module:model/SnowballType} SnowballType
 */
LongTermPricingListEntry.prototype['SnowballType'] = undefined;

/**
 * @member {Array} JobIds
 */
LongTermPricingListEntry.prototype['JobIds'] = undefined;






export default LongTermPricingListEntry;

