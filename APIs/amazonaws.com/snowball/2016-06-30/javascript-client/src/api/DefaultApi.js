/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelClusterRequest from '../model/CancelClusterRequest';
import CancelJobRequest from '../model/CancelJobRequest';
import CreateAddressRequest from '../model/CreateAddressRequest';
import CreateAddressResult from '../model/CreateAddressResult';
import CreateClusterRequest from '../model/CreateClusterRequest';
import CreateClusterResult from '../model/CreateClusterResult';
import CreateJobRequest from '../model/CreateJobRequest';
import CreateJobResult from '../model/CreateJobResult';
import CreateLongTermPricingRequest from '../model/CreateLongTermPricingRequest';
import CreateLongTermPricingResult from '../model/CreateLongTermPricingResult';
import CreateReturnShippingLabelRequest from '../model/CreateReturnShippingLabelRequest';
import CreateReturnShippingLabelResult from '../model/CreateReturnShippingLabelResult';
import DescribeAddressRequest from '../model/DescribeAddressRequest';
import DescribeAddressResult from '../model/DescribeAddressResult';
import DescribeAddressesRequest from '../model/DescribeAddressesRequest';
import DescribeAddressesResult from '../model/DescribeAddressesResult';
import DescribeClusterRequest from '../model/DescribeClusterRequest';
import DescribeClusterResult from '../model/DescribeClusterResult';
import DescribeJobRequest from '../model/DescribeJobRequest';
import DescribeJobResult from '../model/DescribeJobResult';
import DescribeReturnShippingLabelRequest from '../model/DescribeReturnShippingLabelRequest';
import DescribeReturnShippingLabelResult from '../model/DescribeReturnShippingLabelResult';
import GetJobManifestRequest from '../model/GetJobManifestRequest';
import GetJobManifestResult from '../model/GetJobManifestResult';
import GetJobUnlockCodeRequest from '../model/GetJobUnlockCodeRequest';
import GetJobUnlockCodeResult from '../model/GetJobUnlockCodeResult';
import GetSnowballUsageResult from '../model/GetSnowballUsageResult';
import GetSoftwareUpdatesRequest from '../model/GetSoftwareUpdatesRequest';
import GetSoftwareUpdatesResult from '../model/GetSoftwareUpdatesResult';
import ListClusterJobsRequest from '../model/ListClusterJobsRequest';
import ListClusterJobsResult from '../model/ListClusterJobsResult';
import ListClustersRequest from '../model/ListClustersRequest';
import ListClustersResult from '../model/ListClustersResult';
import ListCompatibleImagesRequest from '../model/ListCompatibleImagesRequest';
import ListCompatibleImagesResult from '../model/ListCompatibleImagesResult';
import ListJobsRequest from '../model/ListJobsRequest';
import ListJobsResult from '../model/ListJobsResult';
import ListLongTermPricingRequest from '../model/ListLongTermPricingRequest';
import ListLongTermPricingResult from '../model/ListLongTermPricingResult';
import ListPickupLocationsRequest from '../model/ListPickupLocationsRequest';
import ListPickupLocationsResult from '../model/ListPickupLocationsResult';
import ListServiceVersionsRequest from '../model/ListServiceVersionsRequest';
import ListServiceVersionsResult from '../model/ListServiceVersionsResult';
import UpdateClusterRequest from '../model/UpdateClusterRequest';
import UpdateJobRequest from '../model/UpdateJobRequest';
import UpdateJobShipmentStateRequest from '../model/UpdateJobShipmentStateRequest';
import UpdateLongTermPricingRequest from '../model/UpdateLongTermPricingRequest';

/**
* Default service.
* @module api/DefaultApi
* @version 2016-06-30
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelCluster operation.
     * @callback module:api/DefaultApi~cancelClusterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a cluster job. You can only cancel a cluster job while it's in the <code>AwaitingQuorum</code> status. You'll have at least an hour after creating a cluster job to cancel it.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CancelClusterRequest} cancelClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelCluster(xAmzTarget, cancelClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelClusterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling cancelCluster");
      }
      // verify the required parameter 'cancelClusterRequest' is set
      if (cancelClusterRequest === undefined || cancelClusterRequest === null) {
        throw new Error("Missing the required parameter 'cancelClusterRequest' when calling cancelCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.CancelCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelJob operation.
     * @callback module:api/DefaultApi~cancelJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the specified job. You can only cancel a job before its <code>JobState</code> value changes to <code>PreparingAppliance</code>. Requesting the <code>ListJobs</code> or <code>DescribeJob</code> action returns a job's <code>JobState</code> as part of the response element data returned.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CancelJobRequest} cancelJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~cancelJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    cancelJob(xAmzTarget, cancelJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = cancelJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling cancelJob");
      }
      // verify the required parameter 'cancelJobRequest' is set
      if (cancelJobRequest === undefined || cancelJobRequest === null) {
        throw new Error("Missing the required parameter 'cancelJobRequest' when calling cancelJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.CancelJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAddress operation.
     * @callback module:api/DefaultApi~createAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAddressResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an address for a Snow device to be shipped to. In most regions, addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. If the address is invalid or unsupported, then an exception is thrown.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateAddressRequest} createAddressRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAddressResult}
     */
    createAddress(xAmzTarget, createAddressRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAddressRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createAddress");
      }
      // verify the required parameter 'createAddressRequest' is set
      if (createAddressRequest === undefined || createAddressRequest === null) {
        throw new Error("Missing the required parameter 'createAddressRequest' when calling createAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAddressResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.CreateAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCluster operation.
     * @callback module:api/DefaultApi~createClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an empty cluster. Each cluster supports five nodes. You use the <a>CreateJob</a> action separately to create the jobs for each of these nodes. The cluster does not ship until these five node jobs have been created.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateClusterRequest} createClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateClusterResult}
     */
    createCluster(xAmzTarget, createClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = createClusterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createCluster");
      }
      // verify the required parameter 'createClusterRequest' is set
      if (createClusterRequest === undefined || createClusterRequest === null) {
        throw new Error("Missing the required parameter 'createClusterRequest' when calling createCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateClusterResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.CreateCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createJob operation.
     * @callback module:api/DefaultApi~createJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a job to import or export data between Amazon S3 and your on-premises data center. Your Amazon Web Services account must have the right trust policies and permissions in place to create a job for a Snow device. If you're creating a job for a node in a cluster, you only need to provide the <code>clusterId</code> value; the other job attributes are inherited from the cluster. </p> <note> <p>Only the Snowball; Edge device type is supported when ordering clustered jobs.</p> <p>The device capacity is optional.</p> <p>Availability of device types differ by Amazon Web Services Region. For more information about Region availability, see <a href=\"https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p=ngi&amp;loc=4\">Amazon Web Services Regional Services</a>.</p> </note> <p/> <p class=\"title\"> <b>Snow Family devices and their capacities.</b> </p> <ul> <li> <p>Device type: <b>SNC1_SSD</b> </p> <ul> <li> <p>Capacity: T14</p> </li> <li> <p>Description: Snowcone </p> </li> </ul> <p/> </li> <li> <p>Device type: <b>SNC1_HDD</b> </p> <ul> <li> <p>Capacity: T8</p> </li> <li> <p>Description: Snowcone </p> </li> </ul> <p/> </li> <li> <p>Device type: <b>EDGE_S</b> </p> <ul> <li> <p>Capacity: T98</p> </li> <li> <p>Description: Snowball Edge Storage Optimized for data transfer only </p> </li> </ul> <p/> </li> <li> <p>Device type: <b>EDGE_CG</b> </p> <ul> <li> <p>Capacity: T42</p> </li> <li> <p>Description: Snowball Edge Compute Optimized with GPU</p> </li> </ul> <p/> </li> <li> <p>Device type: <b>EDGE_C</b> </p> <ul> <li> <p>Capacity: T42</p> </li> <li> <p>Description: Snowball Edge Compute Optimized without GPU</p> </li> </ul> <p/> </li> <li> <p>Device type: <b>EDGE</b> </p> <ul> <li> <p>Capacity: T100</p> </li> <li> <p>Description: Snowball Edge Storage Optimized with EC2 Compute</p> </li> </ul> <note> <p>This device is replaced with T98.</p> </note> <p/> </li> <li> <p>Device type: <b>STANDARD</b> </p> <ul> <li> <p>Capacity: T50</p> </li> <li> <p>Description: Original Snowball device</p> <note> <p>This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region </p> </note> </li> </ul> <p/> </li> <li> <p>Device type: <b>STANDARD</b> </p> <ul> <li> <p>Capacity: T80</p> </li> <li> <p>Description: Original Snowball device</p> <note> <p>This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region. </p> </note> </li> </ul> <p/> </li> <li> <p>Snow Family device type: <b>RACK_5U_C</b> </p> <ul> <li> <p>Capacity: T13 </p> </li> <li> <p>Description: Snowblade.</p> </li> </ul> </li> <li> <p>Device type: <b>V3_5S</b> </p> <ul> <li> <p>Capacity: T240</p> </li> <li> <p>Description: Snowball Edge Storage Optimized 210TB</p> </li> </ul> </li> </ul>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateJobRequest} createJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateJobResult}
     */
    createJob(xAmzTarget, createJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = createJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createJob");
      }
      // verify the required parameter 'createJobRequest' is set
      if (createJobRequest === undefined || createJobRequest === null) {
        throw new Error("Missing the required parameter 'createJobRequest' when calling createJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateJobResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.CreateJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createLongTermPricing operation.
     * @callback module:api/DefaultApi~createLongTermPricingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateLongTermPricingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a job with the long-term usage option for a device. The long-term usage is a 1-year or 3-year long-term pricing type for the device. You are billed upfront, and Amazon Web Services provides discounts for long-term pricing. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateLongTermPricingRequest} createLongTermPricingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createLongTermPricingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateLongTermPricingResult}
     */
    createLongTermPricing(xAmzTarget, createLongTermPricingRequest, opts, callback) {
      opts = opts || {};
      let postBody = createLongTermPricingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createLongTermPricing");
      }
      // verify the required parameter 'createLongTermPricingRequest' is set
      if (createLongTermPricingRequest === undefined || createLongTermPricingRequest === null) {
        throw new Error("Missing the required parameter 'createLongTermPricingRequest' when calling createLongTermPricing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateLongTermPricingResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.CreateLongTermPricing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReturnShippingLabel operation.
     * @callback module:api/DefaultApi~createReturnShippingLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReturnShippingLabelResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a shipping label that will be used to return the Snow device to Amazon Web Services.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/CreateReturnShippingLabelRequest} createReturnShippingLabelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createReturnShippingLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReturnShippingLabelResult}
     */
    createReturnShippingLabel(xAmzTarget, createReturnShippingLabelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createReturnShippingLabelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling createReturnShippingLabel");
      }
      // verify the required parameter 'createReturnShippingLabelRequest' is set
      if (createReturnShippingLabelRequest === undefined || createReturnShippingLabelRequest === null) {
        throw new Error("Missing the required parameter 'createReturnShippingLabelRequest' when calling createReturnShippingLabel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReturnShippingLabelResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.CreateReturnShippingLabel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAddress operation.
     * @callback module:api/DefaultApi~describeAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAddressResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Takes an <code>AddressId</code> and returns specific details about that address in the form of an <code>Address</code> object.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAddressRequest} describeAddressRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAddressResult}
     */
    describeAddress(xAmzTarget, describeAddressRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAddressRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAddress");
      }
      // verify the required parameter 'describeAddressRequest' is set
      if (describeAddressRequest === undefined || describeAddressRequest === null) {
        throw new Error("Missing the required parameter 'describeAddressRequest' when calling describeAddress");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAddressResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddress', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAddresses operation.
     * @callback module:api/DefaultApi~describeAddressesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAddressesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a specified number of <code>ADDRESS</code> objects. Calling this API in one of the US regions will return addresses from the list of all addresses associated with this account in all US regions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeAddressesRequest} describeAddressesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~describeAddressesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAddressesResult}
     */
    describeAddresses(xAmzTarget, describeAddressesRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeAddressesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeAddresses");
      }
      // verify the required parameter 'describeAddressesRequest' is set
      if (describeAddressesRequest === undefined || describeAddressesRequest === null) {
        throw new Error("Missing the required parameter 'describeAddressesRequest' when calling describeAddresses");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeAddressesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeAddresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCluster operation.
     * @callback module:api/DefaultApi~describeClusterCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeClusterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific cluster including shipping information, cluster status, and other important metadata.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeClusterRequest} describeClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeClusterResult}
     */
    describeCluster(xAmzTarget, describeClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeClusterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeCluster");
      }
      // verify the required parameter 'describeClusterRequest' is set
      if (describeClusterRequest === undefined || describeClusterRequest === null) {
        throw new Error("Missing the required parameter 'describeClusterRequest' when calling describeCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeClusterResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeJob operation.
     * @callback module:api/DefaultApi~describeJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeJobResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about a specific job including shipping information, job status, and other important metadata. 
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeJobRequest} describeJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeJobResult}
     */
    describeJob(xAmzTarget, describeJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeJob");
      }
      // verify the required parameter 'describeJobRequest' is set
      if (describeJobRequest === undefined || describeJobRequest === null) {
        throw new Error("Missing the required parameter 'describeJobRequest' when calling describeJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeJobResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeReturnShippingLabel operation.
     * @callback module:api/DefaultApi~describeReturnShippingLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeReturnShippingLabelResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Information on the shipping label of a Snow device that is being returned to Amazon Web Services.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/DescribeReturnShippingLabelRequest} describeReturnShippingLabelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeReturnShippingLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeReturnShippingLabelResult}
     */
    describeReturnShippingLabel(xAmzTarget, describeReturnShippingLabelRequest, opts, callback) {
      opts = opts || {};
      let postBody = describeReturnShippingLabelRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling describeReturnShippingLabel");
      }
      // verify the required parameter 'describeReturnShippingLabelRequest' is set
      if (describeReturnShippingLabelRequest === undefined || describeReturnShippingLabelRequest === null) {
        throw new Error("Missing the required parameter 'describeReturnShippingLabelRequest' when calling describeReturnShippingLabel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DescribeReturnShippingLabelResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.DescribeReturnShippingLabel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobManifest operation.
     * @callback module:api/DefaultApi~getJobManifestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJobManifestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns a link to an Amazon S3 presigned URL for the manifest file associated with the specified <code>JobId</code> value. You can access the manifest file for up to 60 minutes after this request has been made. To access the manifest file after 60 minutes have passed, you'll have to make another call to the <code>GetJobManifest</code> action.</p> <p>The manifest is an encrypted file that you can download after your job enters the <code>WithCustomer</code> status. This is the only valid status for calling this API as the manifest and <code>UnlockCode</code> code value are used for securing your device and should only be used when you have the device. The manifest is decrypted by using the <code>UnlockCode</code> code value, when you pass both values to the Snow device through the Snowball client when the client is started for the first time. </p> <p>As a best practice, we recommend that you don't save a copy of an <code>UnlockCode</code> value in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snow device associated with that job.</p> <p>The credentials of a given job, including its manifest file and unlock code, expire 360 days after the job is created.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetJobManifestRequest} getJobManifestRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getJobManifestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJobManifestResult}
     */
    getJobManifest(xAmzTarget, getJobManifestRequest, opts, callback) {
      opts = opts || {};
      let postBody = getJobManifestRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getJobManifest");
      }
      // verify the required parameter 'getJobManifestRequest' is set
      if (getJobManifestRequest === undefined || getJobManifestRequest === null) {
        throw new Error("Missing the required parameter 'getJobManifestRequest' when calling getJobManifest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetJobManifestResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.GetJobManifest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobUnlockCode operation.
     * @callback module:api/DefaultApi~getJobUnlockCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetJobUnlockCodeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns the <code>UnlockCode</code> code value for the specified job. A particular <code>UnlockCode</code> value can be accessed for up to 360 days after the associated job has been created.</p> <p>The <code>UnlockCode</code> value is a 29-character code with 25 alphanumeric characters and 4 hyphens. This code is used to decrypt the manifest file when it is passed along with the manifest to the Snow device through the Snowball client when the client is started for the first time. The only valid status for calling this API is <code>WithCustomer</code> as the manifest and <code>Unlock</code> code values are used for securing your device and should only be used when you have the device.</p> <p>As a best practice, we recommend that you don't save a copy of the <code>UnlockCode</code> in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snow device associated with that job.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetJobUnlockCodeRequest} getJobUnlockCodeRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getJobUnlockCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetJobUnlockCodeResult}
     */
    getJobUnlockCode(xAmzTarget, getJobUnlockCodeRequest, opts, callback) {
      opts = opts || {};
      let postBody = getJobUnlockCodeRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getJobUnlockCode");
      }
      // verify the required parameter 'getJobUnlockCodeRequest' is set
      if (getJobUnlockCodeRequest === undefined || getJobUnlockCodeRequest === null) {
        throw new Error("Missing the required parameter 'getJobUnlockCodeRequest' when calling getJobUnlockCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetJobUnlockCodeResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.GetJobUnlockCode', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSnowballUsage operation.
     * @callback module:api/DefaultApi~getSnowballUsageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSnowballUsageResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Returns information about the Snow Family service limit for your account, and also the number of Snow devices your account has in use.</p> <p>The default service limit for the number of Snow devices that you can have at one time is 1. If you want to increase your service limit, contact Amazon Web Services Support.</p>
     * @param {module:model/String} xAmzTarget 
     * @param {Object.<String, Object>} body 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSnowballUsageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSnowballUsageResult}
     */
    getSnowballUsage(xAmzTarget, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSnowballUsage");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling getSnowballUsage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSnowballUsageResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.GetSnowballUsage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSoftwareUpdates operation.
     * @callback module:api/DefaultApi~getSoftwareUpdatesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSoftwareUpdatesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an Amazon S3 presigned URL for an update file associated with a specified <code>JobId</code>.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/GetSoftwareUpdatesRequest} getSoftwareUpdatesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getSoftwareUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSoftwareUpdatesResult}
     */
    getSoftwareUpdates(xAmzTarget, getSoftwareUpdatesRequest, opts, callback) {
      opts = opts || {};
      let postBody = getSoftwareUpdatesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling getSoftwareUpdates");
      }
      // verify the required parameter 'getSoftwareUpdatesRequest' is set
      if (getSoftwareUpdatesRequest === undefined || getSoftwareUpdatesRequest === null) {
        throw new Error("Missing the required parameter 'getSoftwareUpdatesRequest' when calling getSoftwareUpdates");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetSoftwareUpdatesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.GetSoftwareUpdates', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusterJobs operation.
     * @callback module:api/DefaultApi~listClusterJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClusterJobsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of <code>JobListEntry</code> objects of the specified length. Each <code>JobListEntry</code> object is for a job in the specified cluster and contains a job's state, a job's ID, and other information.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListClusterJobsRequest} listClusterJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listClusterJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClusterJobsResult}
     */
    listClusterJobs(xAmzTarget, listClusterJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listClusterJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listClusterJobs");
      }
      // verify the required parameter 'listClusterJobsRequest' is set
      if (listClusterJobsRequest === undefined || listClusterJobsRequest === null) {
        throw new Error("Missing the required parameter 'listClusterJobsRequest' when calling listClusterJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListClusterJobsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.ListClusterJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listClusters operation.
     * @callback module:api/DefaultApi~listClustersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListClustersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of <code>ClusterListEntry</code> objects of the specified length. Each <code>ClusterListEntry</code> object contains a cluster's state, a cluster's ID, and other important status information.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListClustersRequest} listClustersRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listClustersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListClustersResult}
     */
    listClusters(xAmzTarget, listClustersRequest, opts, callback) {
      opts = opts || {};
      let postBody = listClustersRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listClusters");
      }
      // verify the required parameter 'listClustersRequest' is set
      if (listClustersRequest === undefined || listClustersRequest === null) {
        throw new Error("Missing the required parameter 'listClustersRequest' when calling listClusters");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListClustersResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.ListClusters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCompatibleImages operation.
     * @callback module:api/DefaultApi~listCompatibleImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCompatibleImagesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This action returns a list of the different Amazon EC2-compatible Amazon Machine Images (AMIs) that are owned by your Amazon Web Services accountthat would be supported for use on a Snow device. Currently, supported AMIs are based on the Amazon Linux-2, Ubuntu 20.04 LTS - Focal, or Ubuntu 22.04 LTS - Jammy images, available on the Amazon Web Services Marketplace. Ubuntu 16.04 LTS - Xenial (HVM) images are no longer supported in the Market, but still supported for use on devices through Amazon EC2 VM Import/Export and running locally in AMIs.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListCompatibleImagesRequest} listCompatibleImagesRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listCompatibleImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCompatibleImagesResult}
     */
    listCompatibleImages(xAmzTarget, listCompatibleImagesRequest, opts, callback) {
      opts = opts || {};
      let postBody = listCompatibleImagesRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listCompatibleImages");
      }
      // verify the required parameter 'listCompatibleImagesRequest' is set
      if (listCompatibleImagesRequest === undefined || listCompatibleImagesRequest === null) {
        throw new Error("Missing the required parameter 'listCompatibleImagesRequest' when calling listCompatibleImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListCompatibleImagesResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.ListCompatibleImages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listJobs operation.
     * @callback module:api/DefaultApi~listJobsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListJobsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of <code>JobListEntry</code> objects of the specified length. Each <code>JobListEntry</code> object contains a job's state, a job's ID, and a value that indicates whether the job is a job part, in the case of export jobs. Calling this API action in one of the US regions will return jobs from the list of all jobs associated with this account in all US regions.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListJobsRequest} listJobsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listJobsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListJobsResult}
     */
    listJobs(xAmzTarget, listJobsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listJobsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listJobs");
      }
      // verify the required parameter 'listJobsRequest' is set
      if (listJobsRequest === undefined || listJobsRequest === null) {
        throw new Error("Missing the required parameter 'listJobsRequest' when calling listJobs");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListJobsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.ListJobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLongTermPricing operation.
     * @callback module:api/DefaultApi~listLongTermPricingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListLongTermPricingResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all long-term pricing types.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListLongTermPricingRequest} listLongTermPricingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listLongTermPricingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListLongTermPricingResult}
     */
    listLongTermPricing(xAmzTarget, listLongTermPricingRequest, opts, callback) {
      opts = opts || {};
      let postBody = listLongTermPricingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listLongTermPricing");
      }
      // verify the required parameter 'listLongTermPricingRequest' is set
      if (listLongTermPricingRequest === undefined || listLongTermPricingRequest === null) {
        throw new Error("Missing the required parameter 'listLongTermPricingRequest' when calling listLongTermPricing");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListLongTermPricingResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.ListLongTermPricing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPickupLocations operation.
     * @callback module:api/DefaultApi~listPickupLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPickupLocationsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A list of locations from which the customer can choose to pickup a device.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListPickupLocationsRequest} listPickupLocationsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] Pagination limit
     * @param {String} [nextToken] Pagination token
     * @param {module:api/DefaultApi~listPickupLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPickupLocationsResult}
     */
    listPickupLocations(xAmzTarget, listPickupLocationsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listPickupLocationsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listPickupLocations");
      }
      // verify the required parameter 'listPickupLocationsRequest' is set
      if (listPickupLocationsRequest === undefined || listPickupLocationsRequest === null) {
        throw new Error("Missing the required parameter 'listPickupLocationsRequest' when calling listPickupLocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'MaxResults': opts['maxResults'],
        'NextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListPickupLocationsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.ListPickupLocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listServiceVersions operation.
     * @callback module:api/DefaultApi~listServiceVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListServiceVersionsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all supported versions for Snow on-device services. Returns an array of <code>ServiceVersion</code> object containing the supported versions for a particular service.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/ListServiceVersionsRequest} listServiceVersionsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listServiceVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListServiceVersionsResult}
     */
    listServiceVersions(xAmzTarget, listServiceVersionsRequest, opts, callback) {
      opts = opts || {};
      let postBody = listServiceVersionsRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling listServiceVersions");
      }
      // verify the required parameter 'listServiceVersionsRequest' is set
      if (listServiceVersionsRequest === undefined || listServiceVersionsRequest === null) {
        throw new Error("Missing the required parameter 'listServiceVersionsRequest' when calling listServiceVersions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ListServiceVersionsResult;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.ListServiceVersions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCluster operation.
     * @callback module:api/DefaultApi~updateClusterCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * While a cluster's <code>ClusterState</code> value is in the <code>AwaitingQuorum</code> state, you can update some of the information associated with a cluster. Once the cluster changes to a different job state, usually 60 minutes after the cluster being created, this action is no longer available.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateClusterRequest} updateClusterRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateClusterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateCluster(xAmzTarget, updateClusterRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateClusterRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateCluster");
      }
      // verify the required parameter 'updateClusterRequest' is set
      if (updateClusterRequest === undefined || updateClusterRequest === null) {
        throw new Error("Missing the required parameter 'updateClusterRequest' when calling updateCluster");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.UpdateCluster', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJob operation.
     * @callback module:api/DefaultApi~updateJobCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * While a job's <code>JobState</code> value is <code>New</code>, you can update some of the information associated with a job. Once the job changes to a different job state, usually within 60 minutes of the job being created, this action is no longer available.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateJobRequest} updateJobRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateJob(xAmzTarget, updateJobRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateJobRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateJob");
      }
      // verify the required parameter 'updateJobRequest' is set
      if (updateJobRequest === undefined || updateJobRequest === null) {
        throw new Error("Missing the required parameter 'updateJobRequest' when calling updateJob");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.UpdateJob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateJobShipmentState operation.
     * @callback module:api/DefaultApi~updateJobShipmentStateCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the state when a shipment state changes to a different state.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateJobShipmentStateRequest} updateJobShipmentStateRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateJobShipmentStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateJobShipmentState(xAmzTarget, updateJobShipmentStateRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateJobShipmentStateRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateJobShipmentState");
      }
      // verify the required parameter 'updateJobShipmentStateRequest' is set
      if (updateJobShipmentStateRequest === undefined || updateJobShipmentStateRequest === null) {
        throw new Error("Missing the required parameter 'updateJobShipmentStateRequest' when calling updateJobShipmentState");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.UpdateJobShipmentState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateLongTermPricing operation.
     * @callback module:api/DefaultApi~updateLongTermPricingCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the long-term pricing type.
     * @param {module:model/String} xAmzTarget 
     * @param {module:model/UpdateLongTermPricingRequest} updateLongTermPricingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateLongTermPricingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateLongTermPricing(xAmzTarget, updateLongTermPricingRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateLongTermPricingRequest;
      // verify the required parameter 'xAmzTarget' is set
      if (xAmzTarget === undefined || xAmzTarget === null) {
        throw new Error("Missing the required parameter 'xAmzTarget' when calling updateLongTermPricing");
      }
      // verify the required parameter 'updateLongTermPricingRequest' is set
      if (updateLongTermPricingRequest === undefined || updateLongTermPricingRequest === null) {
        throw new Error("Missing the required parameter 'updateLongTermPricingRequest' when calling updateLongTermPricing");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders'],
        'X-Amz-Target': xAmzTarget
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/#X-Amz-Target=AWSIESnowballJobManagementService.UpdateLongTermPricing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
