/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelClusterRequest;
import org.openapitools.client.model.CancelJobRequest;
import org.openapitools.client.model.CreateAddressRequest;
import org.openapitools.client.model.CreateAddressResult;
import org.openapitools.client.model.CreateClusterRequest;
import org.openapitools.client.model.CreateClusterResult;
import org.openapitools.client.model.CreateJobRequest;
import org.openapitools.client.model.CreateJobResult;
import org.openapitools.client.model.CreateLongTermPricingRequest;
import org.openapitools.client.model.CreateLongTermPricingResult;
import org.openapitools.client.model.CreateReturnShippingLabelRequest;
import org.openapitools.client.model.CreateReturnShippingLabelResult;
import org.openapitools.client.model.DescribeAddressRequest;
import org.openapitools.client.model.DescribeAddressResult;
import org.openapitools.client.model.DescribeAddressesRequest;
import org.openapitools.client.model.DescribeAddressesResult;
import org.openapitools.client.model.DescribeClusterRequest;
import org.openapitools.client.model.DescribeClusterResult;
import org.openapitools.client.model.DescribeJobRequest;
import org.openapitools.client.model.DescribeJobResult;
import org.openapitools.client.model.DescribeReturnShippingLabelRequest;
import org.openapitools.client.model.DescribeReturnShippingLabelResult;
import org.openapitools.client.model.GetJobManifestRequest;
import org.openapitools.client.model.GetJobManifestResult;
import org.openapitools.client.model.GetJobUnlockCodeRequest;
import org.openapitools.client.model.GetJobUnlockCodeResult;
import org.openapitools.client.model.GetSnowballUsageResult;
import org.openapitools.client.model.GetSoftwareUpdatesRequest;
import org.openapitools.client.model.GetSoftwareUpdatesResult;
import org.openapitools.client.model.ListClusterJobsRequest;
import org.openapitools.client.model.ListClusterJobsResult;
import org.openapitools.client.model.ListClustersRequest;
import org.openapitools.client.model.ListClustersResult;
import org.openapitools.client.model.ListCompatibleImagesRequest;
import org.openapitools.client.model.ListCompatibleImagesResult;
import org.openapitools.client.model.ListJobsRequest;
import org.openapitools.client.model.ListJobsResult;
import org.openapitools.client.model.ListLongTermPricingRequest;
import org.openapitools.client.model.ListLongTermPricingResult;
import org.openapitools.client.model.ListPickupLocationsRequest;
import org.openapitools.client.model.ListPickupLocationsResult;
import org.openapitools.client.model.ListServiceVersionsRequest;
import org.openapitools.client.model.ListServiceVersionsResult;
import org.openapitools.client.model.UpdateClusterRequest;
import org.openapitools.client.model.UpdateJobRequest;
import org.openapitools.client.model.UpdateJobShipmentStateRequest;
import org.openapitools.client.model.UpdateLongTermPricingRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Cancels a cluster job. You can only cancel a cluster job while it&#39;s in the &lt;code&gt;AwaitingQuorum&lt;/code&gt; status. You&#39;ll have at least an hour after creating a cluster job to cancel it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelClusterTest() throws ApiException {
        String xAmzTarget = null;
        CancelClusterRequest cancelClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelCluster(xAmzTarget, cancelClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Cancels the specified job. You can only cancel a job before its &lt;code&gt;JobState&lt;/code&gt; value changes to &lt;code&gt;PreparingAppliance&lt;/code&gt;. Requesting the &lt;code&gt;ListJobs&lt;/code&gt; or &lt;code&gt;DescribeJob&lt;/code&gt; action returns a job&#39;s &lt;code&gt;JobState&lt;/code&gt; as part of the response element data returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelJobTest() throws ApiException {
        String xAmzTarget = null;
        CancelJobRequest cancelJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.cancelJob(xAmzTarget, cancelJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an address for a Snow device to be shipped to. In most regions, addresses are validated at the time of creation. The address you provide must be located within the serviceable area of your region. If the address is invalid or unsupported, then an exception is thrown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAddressTest() throws ApiException {
        String xAmzTarget = null;
        CreateAddressRequest createAddressRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAddressResult response = api.createAddress(xAmzTarget, createAddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an empty cluster. Each cluster supports five nodes. You use the &lt;a&gt;CreateJob&lt;/a&gt; action separately to create the jobs for each of these nodes. The cluster does not ship until these five node jobs have been created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createClusterTest() throws ApiException {
        String xAmzTarget = null;
        CreateClusterRequest createClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateClusterResult response = api.createCluster(xAmzTarget, createClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a job to import or export data between Amazon S3 and your on-premises data center. Your Amazon Web Services account must have the right trust policies and permissions in place to create a job for a Snow device. If you&#39;re creating a job for a node in a cluster, you only need to provide the &lt;code&gt;clusterId&lt;/code&gt; value; the other job attributes are inherited from the cluster. &lt;/p&gt; &lt;note&gt; &lt;p&gt;Only the Snowball; Edge device type is supported when ordering clustered jobs.&lt;/p&gt; &lt;p&gt;The device capacity is optional.&lt;/p&gt; &lt;p&gt;Availability of device types differ by Amazon Web Services Region. For more information about Region availability, see &lt;a href&#x3D;\&quot;https://aws.amazon.com/about-aws/global-infrastructure/regional-product-services/?p&#x3D;ngi&amp;amp;loc&#x3D;4\&quot;&gt;Amazon Web Services Regional Services&lt;/a&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt; &lt;p class&#x3D;\&quot;title\&quot;&gt; &lt;b&gt;Snow Family devices and their capacities.&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;SNC1_SSD&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T14&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Snowcone &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;SNC1_HDD&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T8&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Snowcone &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;EDGE_S&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T98&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Snowball Edge Storage Optimized for data transfer only &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;EDGE_CG&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T42&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Snowball Edge Compute Optimized with GPU&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;EDGE_C&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T42&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Snowball Edge Compute Optimized without GPU&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;EDGE&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T100&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Snowball Edge Storage Optimized with EC2 Compute&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;note&gt; &lt;p&gt;This device is replaced with T98.&lt;/p&gt; &lt;/note&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;STANDARD&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T50&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Original Snowball device&lt;/p&gt; &lt;note&gt; &lt;p&gt;This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;STANDARD&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T80&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Original Snowball device&lt;/p&gt; &lt;note&gt; &lt;p&gt;This device is only available in the Ningxia, Beijing, and Singapore Amazon Web Services Region. &lt;/p&gt; &lt;/note&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p/&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Snow Family device type: &lt;b&gt;RACK_5U_C&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T13 &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Snowblade.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Device type: &lt;b&gt;V3_5S&lt;/b&gt; &lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Capacity: T240&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Description: Snowball Edge Storage Optimized 210TB&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createJobTest() throws ApiException {
        String xAmzTarget = null;
        CreateJobRequest createJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateJobResult response = api.createJob(xAmzTarget, createJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a job with the long-term usage option for a device. The long-term usage is a 1-year or 3-year long-term pricing type for the device. You are billed upfront, and Amazon Web Services provides discounts for long-term pricing. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createLongTermPricingTest() throws ApiException {
        String xAmzTarget = null;
        CreateLongTermPricingRequest createLongTermPricingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateLongTermPricingResult response = api.createLongTermPricing(xAmzTarget, createLongTermPricingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a shipping label that will be used to return the Snow device to Amazon Web Services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReturnShippingLabelTest() throws ApiException {
        String xAmzTarget = null;
        CreateReturnShippingLabelRequest createReturnShippingLabelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateReturnShippingLabelResult response = api.createReturnShippingLabel(xAmzTarget, createReturnShippingLabelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Takes an &lt;code&gt;AddressId&lt;/code&gt; and returns specific details about that address in the form of an &lt;code&gt;Address&lt;/code&gt; object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAddressTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAddressRequest describeAddressRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeAddressResult response = api.describeAddress(xAmzTarget, describeAddressRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns a specified number of &lt;code&gt;ADDRESS&lt;/code&gt; objects. Calling this API in one of the US regions will return addresses from the list of all addresses associated with this account in all US regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeAddressesTest() throws ApiException {
        String xAmzTarget = null;
        DescribeAddressesRequest describeAddressesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        DescribeAddressesResult response = api.describeAddresses(xAmzTarget, describeAddressesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns information about a specific cluster including shipping information, cluster status, and other important metadata.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeClusterTest() throws ApiException {
        String xAmzTarget = null;
        DescribeClusterRequest describeClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeClusterResult response = api.describeCluster(xAmzTarget, describeClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns information about a specific job including shipping information, job status, and other important metadata. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeJobTest() throws ApiException {
        String xAmzTarget = null;
        DescribeJobRequest describeJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeJobResult response = api.describeJob(xAmzTarget, describeJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Information on the shipping label of a Snow device that is being returned to Amazon Web Services.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeReturnShippingLabelTest() throws ApiException {
        String xAmzTarget = null;
        DescribeReturnShippingLabelRequest describeReturnShippingLabelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeReturnShippingLabelResult response = api.describeReturnShippingLabel(xAmzTarget, describeReturnShippingLabelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns a link to an Amazon S3 presigned URL for the manifest file associated with the specified &lt;code&gt;JobId&lt;/code&gt; value. You can access the manifest file for up to 60 minutes after this request has been made. To access the manifest file after 60 minutes have passed, you&#39;ll have to make another call to the &lt;code&gt;GetJobManifest&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt;The manifest is an encrypted file that you can download after your job enters the &lt;code&gt;WithCustomer&lt;/code&gt; status. This is the only valid status for calling this API as the manifest and &lt;code&gt;UnlockCode&lt;/code&gt; code value are used for securing your device and should only be used when you have the device. The manifest is decrypted by using the &lt;code&gt;UnlockCode&lt;/code&gt; code value, when you pass both values to the Snow device through the Snowball client when the client is started for the first time. &lt;/p&gt; &lt;p&gt;As a best practice, we recommend that you don&#39;t save a copy of an &lt;code&gt;UnlockCode&lt;/code&gt; value in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snow device associated with that job.&lt;/p&gt; &lt;p&gt;The credentials of a given job, including its manifest file and unlock code, expire 360 days after the job is created.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobManifestTest() throws ApiException {
        String xAmzTarget = null;
        GetJobManifestRequest getJobManifestRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetJobManifestResult response = api.getJobManifest(xAmzTarget, getJobManifestRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns the &lt;code&gt;UnlockCode&lt;/code&gt; code value for the specified job. A particular &lt;code&gt;UnlockCode&lt;/code&gt; value can be accessed for up to 360 days after the associated job has been created.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;UnlockCode&lt;/code&gt; value is a 29-character code with 25 alphanumeric characters and 4 hyphens. This code is used to decrypt the manifest file when it is passed along with the manifest to the Snow device through the Snowball client when the client is started for the first time. The only valid status for calling this API is &lt;code&gt;WithCustomer&lt;/code&gt; as the manifest and &lt;code&gt;Unlock&lt;/code&gt; code values are used for securing your device and should only be used when you have the device.&lt;/p&gt; &lt;p&gt;As a best practice, we recommend that you don&#39;t save a copy of the &lt;code&gt;UnlockCode&lt;/code&gt; in the same location as the manifest file for that job. Saving these separately helps prevent unauthorized parties from gaining access to the Snow device associated with that job.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJobUnlockCodeTest() throws ApiException {
        String xAmzTarget = null;
        GetJobUnlockCodeRequest getJobUnlockCodeRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetJobUnlockCodeResult response = api.getJobUnlockCode(xAmzTarget, getJobUnlockCodeRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Returns information about the Snow Family service limit for your account, and also the number of Snow devices your account has in use.&lt;/p&gt; &lt;p&gt;The default service limit for the number of Snow devices that you can have at one time is 1. If you want to increase your service limit, contact Amazon Web Services Support.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSnowballUsageTest() throws ApiException {
        String xAmzTarget = null;
        Object body = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSnowballUsageResult response = api.getSnowballUsage(xAmzTarget, body, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns an Amazon S3 presigned URL for an update file associated with a specified &lt;code&gt;JobId&lt;/code&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSoftwareUpdatesTest() throws ApiException {
        String xAmzTarget = null;
        GetSoftwareUpdatesRequest getSoftwareUpdatesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetSoftwareUpdatesResult response = api.getSoftwareUpdates(xAmzTarget, getSoftwareUpdatesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Returns an array of &lt;code&gt;JobListEntry&lt;/code&gt; objects of the specified length. Each &lt;code&gt;JobListEntry&lt;/code&gt; object is for a job in the specified cluster and contains a job&#39;s state, a job&#39;s ID, and other information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClusterJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListClusterJobsRequest listClusterJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListClusterJobsResult response = api.listClusterJobs(xAmzTarget, listClusterJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns an array of &lt;code&gt;ClusterListEntry&lt;/code&gt; objects of the specified length. Each &lt;code&gt;ClusterListEntry&lt;/code&gt; object contains a cluster&#39;s state, a cluster&#39;s ID, and other important status information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listClustersTest() throws ApiException {
        String xAmzTarget = null;
        ListClustersRequest listClustersRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListClustersResult response = api.listClusters(xAmzTarget, listClustersRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * This action returns a list of the different Amazon EC2-compatible Amazon Machine Images (AMIs) that are owned by your Amazon Web Services accountthat would be supported for use on a Snow device. Currently, supported AMIs are based on the Amazon Linux-2, Ubuntu 20.04 LTS - Focal, or Ubuntu 22.04 LTS - Jammy images, available on the Amazon Web Services Marketplace. Ubuntu 16.04 LTS - Xenial (HVM) images are no longer supported in the Market, but still supported for use on devices through Amazon EC2 VM Import/Export and running locally in AMIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCompatibleImagesTest() throws ApiException {
        String xAmzTarget = null;
        ListCompatibleImagesRequest listCompatibleImagesRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListCompatibleImagesResult response = api.listCompatibleImages(xAmzTarget, listCompatibleImagesRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Returns an array of &lt;code&gt;JobListEntry&lt;/code&gt; objects of the specified length. Each &lt;code&gt;JobListEntry&lt;/code&gt; object contains a job&#39;s state, a job&#39;s ID, and a value that indicates whether the job is a job part, in the case of export jobs. Calling this API action in one of the US regions will return jobs from the list of all jobs associated with this account in all US regions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listJobsTest() throws ApiException {
        String xAmzTarget = null;
        ListJobsRequest listJobsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListJobsResult response = api.listJobs(xAmzTarget, listJobsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all long-term pricing types.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLongTermPricingTest() throws ApiException {
        String xAmzTarget = null;
        ListLongTermPricingRequest listLongTermPricingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListLongTermPricingResult response = api.listLongTermPricing(xAmzTarget, listLongTermPricingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * A list of locations from which the customer can choose to pickup a device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPickupLocationsTest() throws ApiException {
        String xAmzTarget = null;
        ListPickupLocationsRequest listPickupLocationsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        ListPickupLocationsResult response = api.listPickupLocations(xAmzTarget, listPickupLocationsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Lists all supported versions for Snow on-device services. Returns an array of &lt;code&gt;ServiceVersion&lt;/code&gt; object containing the supported versions for a particular service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listServiceVersionsTest() throws ApiException {
        String xAmzTarget = null;
        ListServiceVersionsRequest listServiceVersionsRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListServiceVersionsResult response = api.listServiceVersions(xAmzTarget, listServiceVersionsRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * While a cluster&#39;s &lt;code&gt;ClusterState&lt;/code&gt; value is in the &lt;code&gt;AwaitingQuorum&lt;/code&gt; state, you can update some of the information associated with a cluster. Once the cluster changes to a different job state, usually 60 minutes after the cluster being created, this action is no longer available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClusterTest() throws ApiException {
        String xAmzTarget = null;
        UpdateClusterRequest updateClusterRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateCluster(xAmzTarget, updateClusterRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * While a job&#39;s &lt;code&gt;JobState&lt;/code&gt; value is &lt;code&gt;New&lt;/code&gt;, you can update some of the information associated with a job. Once the job changes to a different job state, usually within 60 minutes of the job being created, this action is no longer available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobTest() throws ApiException {
        String xAmzTarget = null;
        UpdateJobRequest updateJobRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateJob(xAmzTarget, updateJobRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the state when a shipment state changes to a different state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateJobShipmentStateTest() throws ApiException {
        String xAmzTarget = null;
        UpdateJobShipmentStateRequest updateJobShipmentStateRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateJobShipmentState(xAmzTarget, updateJobShipmentStateRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the long-term pricing type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateLongTermPricingTest() throws ApiException {
        String xAmzTarget = null;
        UpdateLongTermPricingRequest updateLongTermPricingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.updateLongTermPricing(xAmzTarget, updateLongTermPricingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
