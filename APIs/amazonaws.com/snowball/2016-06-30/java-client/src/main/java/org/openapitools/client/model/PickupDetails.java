/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information identifying the person picking up the device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PickupDetails {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "PhoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private String phoneNumber;

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_IDENTIFICATION_NUMBER = "IdentificationNumber";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_NUMBER)
  private String identificationNumber;

  public static final String SERIALIZED_NAME_IDENTIFICATION_EXPIRATION_DATE = "IdentificationExpirationDate";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_EXPIRATION_DATE)
  private OffsetDateTime identificationExpirationDate;

  public static final String SERIALIZED_NAME_IDENTIFICATION_ISSUING_ORG = "IdentificationIssuingOrg";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_ISSUING_ORG)
  private String identificationIssuingOrg;

  public static final String SERIALIZED_NAME_DEVICE_PICKUP_ID = "DevicePickupId";
  @SerializedName(SERIALIZED_NAME_DEVICE_PICKUP_ID)
  private String devicePickupId;

  public PickupDetails() {
  }

  public PickupDetails name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PickupDetails phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public PickupDetails email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public PickupDetails identificationNumber(String identificationNumber) {
    this.identificationNumber = identificationNumber;
    return this;
  }

  /**
   * Get identificationNumber
   * @return identificationNumber
   */
  @javax.annotation.Nullable
  public String getIdentificationNumber() {
    return identificationNumber;
  }

  public void setIdentificationNumber(String identificationNumber) {
    this.identificationNumber = identificationNumber;
  }


  public PickupDetails identificationExpirationDate(OffsetDateTime identificationExpirationDate) {
    this.identificationExpirationDate = identificationExpirationDate;
    return this;
  }

  /**
   * Get identificationExpirationDate
   * @return identificationExpirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getIdentificationExpirationDate() {
    return identificationExpirationDate;
  }

  public void setIdentificationExpirationDate(OffsetDateTime identificationExpirationDate) {
    this.identificationExpirationDate = identificationExpirationDate;
  }


  public PickupDetails identificationIssuingOrg(String identificationIssuingOrg) {
    this.identificationIssuingOrg = identificationIssuingOrg;
    return this;
  }

  /**
   * Get identificationIssuingOrg
   * @return identificationIssuingOrg
   */
  @javax.annotation.Nullable
  public String getIdentificationIssuingOrg() {
    return identificationIssuingOrg;
  }

  public void setIdentificationIssuingOrg(String identificationIssuingOrg) {
    this.identificationIssuingOrg = identificationIssuingOrg;
  }


  public PickupDetails devicePickupId(String devicePickupId) {
    this.devicePickupId = devicePickupId;
    return this;
  }

  /**
   * Get devicePickupId
   * @return devicePickupId
   */
  @javax.annotation.Nullable
  public String getDevicePickupId() {
    return devicePickupId;
  }

  public void setDevicePickupId(String devicePickupId) {
    this.devicePickupId = devicePickupId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PickupDetails pickupDetails = (PickupDetails) o;
    return Objects.equals(this.name, pickupDetails.name) &&
        Objects.equals(this.phoneNumber, pickupDetails.phoneNumber) &&
        Objects.equals(this.email, pickupDetails.email) &&
        Objects.equals(this.identificationNumber, pickupDetails.identificationNumber) &&
        Objects.equals(this.identificationExpirationDate, pickupDetails.identificationExpirationDate) &&
        Objects.equals(this.identificationIssuingOrg, pickupDetails.identificationIssuingOrg) &&
        Objects.equals(this.devicePickupId, pickupDetails.devicePickupId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, phoneNumber, email, identificationNumber, identificationExpirationDate, identificationIssuingOrg, devicePickupId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PickupDetails {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    identificationNumber: ").append(toIndentedString(identificationNumber)).append("\n");
    sb.append("    identificationExpirationDate: ").append(toIndentedString(identificationExpirationDate)).append("\n");
    sb.append("    identificationIssuingOrg: ").append(toIndentedString(identificationIssuingOrg)).append("\n");
    sb.append("    devicePickupId: ").append(toIndentedString(devicePickupId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("PhoneNumber");
    openapiFields.add("Email");
    openapiFields.add("IdentificationNumber");
    openapiFields.add("IdentificationExpirationDate");
    openapiFields.add("IdentificationIssuingOrg");
    openapiFields.add("DevicePickupId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PickupDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PickupDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PickupDetails is not found in the empty JSON string", PickupDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PickupDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PickupDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `PhoneNumber`
      if (jsonObj.get("PhoneNumber") != null && !jsonObj.get("PhoneNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PhoneNumber"));
      }
      // validate the optional field `Email`
      if (jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Email"));
      }
      // validate the optional field `IdentificationNumber`
      if (jsonObj.get("IdentificationNumber") != null && !jsonObj.get("IdentificationNumber").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdentificationNumber"));
      }
      // validate the optional field `IdentificationExpirationDate`
      if (jsonObj.get("IdentificationExpirationDate") != null && !jsonObj.get("IdentificationExpirationDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("IdentificationExpirationDate"));
      }
      // validate the optional field `IdentificationIssuingOrg`
      if (jsonObj.get("IdentificationIssuingOrg") != null && !jsonObj.get("IdentificationIssuingOrg").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdentificationIssuingOrg"));
      }
      // validate the optional field `DevicePickupId`
      if (jsonObj.get("DevicePickupId") != null && !jsonObj.get("DevicePickupId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DevicePickupId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PickupDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PickupDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PickupDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PickupDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PickupDetails>() {
           @Override
           public void write(JsonWriter out, PickupDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PickupDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PickupDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PickupDetails
   * @throws IOException if the JSON string is invalid with respect to PickupDetails
   */
  public static PickupDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PickupDetails.class);
  }

  /**
   * Convert an instance of PickupDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

