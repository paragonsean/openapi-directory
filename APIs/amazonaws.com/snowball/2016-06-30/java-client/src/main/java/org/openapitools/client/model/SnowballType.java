/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets SnowballType
 */
@JsonAdapter(SnowballType.Adapter.class)
public enum SnowballType {
  
  STANDARD("STANDARD"),
  
  EDGE("EDGE"),
  
  EDGE_C("EDGE_C"),
  
  EDGE_CG("EDGE_CG"),
  
  EDGE_S("EDGE_S"),
  
  SNC1_HDD("SNC1_HDD"),
  
  SNC1_SSD("SNC1_SSD"),
  
  V3_5_C("V3_5C"),
  
  V3_5_S("V3_5S"),
  
  RACK_5_U_C("RACK_5U_C");

  private String value;

  SnowballType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static SnowballType fromValue(String value) {
    for (SnowballType b : SnowballType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<SnowballType> {
    @Override
    public void write(final JsonWriter jsonWriter, final SnowballType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public SnowballType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return SnowballType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    SnowballType.fromValue(value);
  }
}

