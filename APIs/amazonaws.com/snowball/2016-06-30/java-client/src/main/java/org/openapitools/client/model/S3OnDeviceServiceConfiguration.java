/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StorageUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Amazon S3 compatible storage on Snow family devices configuration items.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3OnDeviceServiceConfiguration {
  public static final String SERIALIZED_NAME_STORAGE_LIMIT = "StorageLimit";
  @SerializedName(SERIALIZED_NAME_STORAGE_LIMIT)
  private Double storageLimit;

  public static final String SERIALIZED_NAME_STORAGE_UNIT = "StorageUnit";
  @SerializedName(SERIALIZED_NAME_STORAGE_UNIT)
  private StorageUnit storageUnit;

  public static final String SERIALIZED_NAME_SERVICE_SIZE = "ServiceSize";
  @SerializedName(SERIALIZED_NAME_SERVICE_SIZE)
  private Integer serviceSize;

  public static final String SERIALIZED_NAME_FAULT_TOLERANCE = "FaultTolerance";
  @SerializedName(SERIALIZED_NAME_FAULT_TOLERANCE)
  private Integer faultTolerance;

  public S3OnDeviceServiceConfiguration() {
  }

  public S3OnDeviceServiceConfiguration storageLimit(Double storageLimit) {
    this.storageLimit = storageLimit;
    return this;
  }

  /**
   * Get storageLimit
   * @return storageLimit
   */
  @javax.annotation.Nullable
  public Double getStorageLimit() {
    return storageLimit;
  }

  public void setStorageLimit(Double storageLimit) {
    this.storageLimit = storageLimit;
  }


  public S3OnDeviceServiceConfiguration storageUnit(StorageUnit storageUnit) {
    this.storageUnit = storageUnit;
    return this;
  }

  /**
   * Get storageUnit
   * @return storageUnit
   */
  @javax.annotation.Nullable
  public StorageUnit getStorageUnit() {
    return storageUnit;
  }

  public void setStorageUnit(StorageUnit storageUnit) {
    this.storageUnit = storageUnit;
  }


  public S3OnDeviceServiceConfiguration serviceSize(Integer serviceSize) {
    this.serviceSize = serviceSize;
    return this;
  }

  /**
   * Get serviceSize
   * @return serviceSize
   */
  @javax.annotation.Nullable
  public Integer getServiceSize() {
    return serviceSize;
  }

  public void setServiceSize(Integer serviceSize) {
    this.serviceSize = serviceSize;
  }


  public S3OnDeviceServiceConfiguration faultTolerance(Integer faultTolerance) {
    this.faultTolerance = faultTolerance;
    return this;
  }

  /**
   * Get faultTolerance
   * @return faultTolerance
   */
  @javax.annotation.Nullable
  public Integer getFaultTolerance() {
    return faultTolerance;
  }

  public void setFaultTolerance(Integer faultTolerance) {
    this.faultTolerance = faultTolerance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3OnDeviceServiceConfiguration s3OnDeviceServiceConfiguration = (S3OnDeviceServiceConfiguration) o;
    return Objects.equals(this.storageLimit, s3OnDeviceServiceConfiguration.storageLimit) &&
        Objects.equals(this.storageUnit, s3OnDeviceServiceConfiguration.storageUnit) &&
        Objects.equals(this.serviceSize, s3OnDeviceServiceConfiguration.serviceSize) &&
        Objects.equals(this.faultTolerance, s3OnDeviceServiceConfiguration.faultTolerance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageLimit, storageUnit, serviceSize, faultTolerance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3OnDeviceServiceConfiguration {\n");
    sb.append("    storageLimit: ").append(toIndentedString(storageLimit)).append("\n");
    sb.append("    storageUnit: ").append(toIndentedString(storageUnit)).append("\n");
    sb.append("    serviceSize: ").append(toIndentedString(serviceSize)).append("\n");
    sb.append("    faultTolerance: ").append(toIndentedString(faultTolerance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("StorageLimit");
    openapiFields.add("StorageUnit");
    openapiFields.add("ServiceSize");
    openapiFields.add("FaultTolerance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3OnDeviceServiceConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3OnDeviceServiceConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3OnDeviceServiceConfiguration is not found in the empty JSON string", S3OnDeviceServiceConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3OnDeviceServiceConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3OnDeviceServiceConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `StorageLimit`
      if (jsonObj.get("StorageLimit") != null && !jsonObj.get("StorageLimit").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("StorageLimit"));
      }
      // validate the optional field `StorageUnit`
      if (jsonObj.get("StorageUnit") != null && !jsonObj.get("StorageUnit").isJsonNull()) {
        StorageUnit.validateJsonElement(jsonObj.get("StorageUnit"));
      }
      // validate the optional field `ServiceSize`
      if (jsonObj.get("ServiceSize") != null && !jsonObj.get("ServiceSize").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ServiceSize"));
      }
      // validate the optional field `FaultTolerance`
      if (jsonObj.get("FaultTolerance") != null && !jsonObj.get("FaultTolerance").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("FaultTolerance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3OnDeviceServiceConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3OnDeviceServiceConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3OnDeviceServiceConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3OnDeviceServiceConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<S3OnDeviceServiceConfiguration>() {
           @Override
           public void write(JsonWriter out, S3OnDeviceServiceConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3OnDeviceServiceConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3OnDeviceServiceConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3OnDeviceServiceConfiguration
   * @throws IOException if the JSON string is invalid with respect to S3OnDeviceServiceConfiguration
   */
  public static S3OnDeviceServiceConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3OnDeviceServiceConfiguration.class);
  }

  /**
   * Convert an instance of S3OnDeviceServiceConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

