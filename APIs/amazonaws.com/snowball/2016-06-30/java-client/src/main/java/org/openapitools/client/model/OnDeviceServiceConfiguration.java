/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.OnDeviceServiceConfigurationEKSOnDeviceService;
import org.openapitools.client.model.OnDeviceServiceConfigurationNFSOnDeviceService;
import org.openapitools.client.model.OnDeviceServiceConfigurationS3OnDeviceService;
import org.openapitools.client.model.OnDeviceServiceConfigurationTGWOnDeviceService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that represents the metadata and configuration settings for services on an Amazon Web Services Snow Family device.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnDeviceServiceConfiguration {
  public static final String SERIALIZED_NAME_NF_S_ON_DEVICE_SERVICE = "NFSOnDeviceService";
  @SerializedName(SERIALIZED_NAME_NF_S_ON_DEVICE_SERVICE)
  private OnDeviceServiceConfigurationNFSOnDeviceService nfSOnDeviceService;

  public static final String SERIALIZED_NAME_TG_W_ON_DEVICE_SERVICE = "TGWOnDeviceService";
  @SerializedName(SERIALIZED_NAME_TG_W_ON_DEVICE_SERVICE)
  private OnDeviceServiceConfigurationTGWOnDeviceService tgWOnDeviceService;

  public static final String SERIALIZED_NAME_EK_S_ON_DEVICE_SERVICE = "EKSOnDeviceService";
  @SerializedName(SERIALIZED_NAME_EK_S_ON_DEVICE_SERVICE)
  private OnDeviceServiceConfigurationEKSOnDeviceService ekSOnDeviceService;

  public static final String SERIALIZED_NAME_S3_ON_DEVICE_SERVICE = "S3OnDeviceService";
  @SerializedName(SERIALIZED_NAME_S3_ON_DEVICE_SERVICE)
  private OnDeviceServiceConfigurationS3OnDeviceService s3OnDeviceService;

  public OnDeviceServiceConfiguration() {
  }

  public OnDeviceServiceConfiguration nfSOnDeviceService(OnDeviceServiceConfigurationNFSOnDeviceService nfSOnDeviceService) {
    this.nfSOnDeviceService = nfSOnDeviceService;
    return this;
  }

  /**
   * Get nfSOnDeviceService
   * @return nfSOnDeviceService
   */
  @javax.annotation.Nullable
  public OnDeviceServiceConfigurationNFSOnDeviceService getNfSOnDeviceService() {
    return nfSOnDeviceService;
  }

  public void setNfSOnDeviceService(OnDeviceServiceConfigurationNFSOnDeviceService nfSOnDeviceService) {
    this.nfSOnDeviceService = nfSOnDeviceService;
  }


  public OnDeviceServiceConfiguration tgWOnDeviceService(OnDeviceServiceConfigurationTGWOnDeviceService tgWOnDeviceService) {
    this.tgWOnDeviceService = tgWOnDeviceService;
    return this;
  }

  /**
   * Get tgWOnDeviceService
   * @return tgWOnDeviceService
   */
  @javax.annotation.Nullable
  public OnDeviceServiceConfigurationTGWOnDeviceService getTgWOnDeviceService() {
    return tgWOnDeviceService;
  }

  public void setTgWOnDeviceService(OnDeviceServiceConfigurationTGWOnDeviceService tgWOnDeviceService) {
    this.tgWOnDeviceService = tgWOnDeviceService;
  }


  public OnDeviceServiceConfiguration ekSOnDeviceService(OnDeviceServiceConfigurationEKSOnDeviceService ekSOnDeviceService) {
    this.ekSOnDeviceService = ekSOnDeviceService;
    return this;
  }

  /**
   * Get ekSOnDeviceService
   * @return ekSOnDeviceService
   */
  @javax.annotation.Nullable
  public OnDeviceServiceConfigurationEKSOnDeviceService getEkSOnDeviceService() {
    return ekSOnDeviceService;
  }

  public void setEkSOnDeviceService(OnDeviceServiceConfigurationEKSOnDeviceService ekSOnDeviceService) {
    this.ekSOnDeviceService = ekSOnDeviceService;
  }


  public OnDeviceServiceConfiguration s3OnDeviceService(OnDeviceServiceConfigurationS3OnDeviceService s3OnDeviceService) {
    this.s3OnDeviceService = s3OnDeviceService;
    return this;
  }

  /**
   * Get s3OnDeviceService
   * @return s3OnDeviceService
   */
  @javax.annotation.Nullable
  public OnDeviceServiceConfigurationS3OnDeviceService getS3OnDeviceService() {
    return s3OnDeviceService;
  }

  public void setS3OnDeviceService(OnDeviceServiceConfigurationS3OnDeviceService s3OnDeviceService) {
    this.s3OnDeviceService = s3OnDeviceService;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnDeviceServiceConfiguration onDeviceServiceConfiguration = (OnDeviceServiceConfiguration) o;
    return Objects.equals(this.nfSOnDeviceService, onDeviceServiceConfiguration.nfSOnDeviceService) &&
        Objects.equals(this.tgWOnDeviceService, onDeviceServiceConfiguration.tgWOnDeviceService) &&
        Objects.equals(this.ekSOnDeviceService, onDeviceServiceConfiguration.ekSOnDeviceService) &&
        Objects.equals(this.s3OnDeviceService, onDeviceServiceConfiguration.s3OnDeviceService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nfSOnDeviceService, tgWOnDeviceService, ekSOnDeviceService, s3OnDeviceService);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnDeviceServiceConfiguration {\n");
    sb.append("    nfSOnDeviceService: ").append(toIndentedString(nfSOnDeviceService)).append("\n");
    sb.append("    tgWOnDeviceService: ").append(toIndentedString(tgWOnDeviceService)).append("\n");
    sb.append("    ekSOnDeviceService: ").append(toIndentedString(ekSOnDeviceService)).append("\n");
    sb.append("    s3OnDeviceService: ").append(toIndentedString(s3OnDeviceService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("NFSOnDeviceService");
    openapiFields.add("TGWOnDeviceService");
    openapiFields.add("EKSOnDeviceService");
    openapiFields.add("S3OnDeviceService");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnDeviceServiceConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnDeviceServiceConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnDeviceServiceConfiguration is not found in the empty JSON string", OnDeviceServiceConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnDeviceServiceConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnDeviceServiceConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `NFSOnDeviceService`
      if (jsonObj.get("NFSOnDeviceService") != null && !jsonObj.get("NFSOnDeviceService").isJsonNull()) {
        OnDeviceServiceConfigurationNFSOnDeviceService.validateJsonElement(jsonObj.get("NFSOnDeviceService"));
      }
      // validate the optional field `TGWOnDeviceService`
      if (jsonObj.get("TGWOnDeviceService") != null && !jsonObj.get("TGWOnDeviceService").isJsonNull()) {
        OnDeviceServiceConfigurationTGWOnDeviceService.validateJsonElement(jsonObj.get("TGWOnDeviceService"));
      }
      // validate the optional field `EKSOnDeviceService`
      if (jsonObj.get("EKSOnDeviceService") != null && !jsonObj.get("EKSOnDeviceService").isJsonNull()) {
        OnDeviceServiceConfigurationEKSOnDeviceService.validateJsonElement(jsonObj.get("EKSOnDeviceService"));
      }
      // validate the optional field `S3OnDeviceService`
      if (jsonObj.get("S3OnDeviceService") != null && !jsonObj.get("S3OnDeviceService").isJsonNull()) {
        OnDeviceServiceConfigurationS3OnDeviceService.validateJsonElement(jsonObj.get("S3OnDeviceService"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnDeviceServiceConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnDeviceServiceConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnDeviceServiceConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnDeviceServiceConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<OnDeviceServiceConfiguration>() {
           @Override
           public void write(JsonWriter out, OnDeviceServiceConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnDeviceServiceConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnDeviceServiceConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnDeviceServiceConfiguration
   * @throws IOException if the JSON string is invalid with respect to OnDeviceServiceConfiguration
   */
  public static OnDeviceServiceConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnDeviceServiceConfiguration.class);
  }

  /**
   * Convert an instance of OnDeviceServiceConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

