/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateJobRequestOnDeviceServiceConfiguration;
import org.openapitools.client.model.PickupDetails;
import org.openapitools.client.model.ShippingOption;
import org.openapitools.client.model.SnowballCapacity;
import org.openapitools.client.model.UpdateClusterRequestNotification;
import org.openapitools.client.model.UpdateJobRequestResources;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateJobRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateJobRequest {
  public static final String SERIALIZED_NAME_JOB_ID = "JobId";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_NOTIFICATION = "Notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  private UpdateClusterRequestNotification notification;

  public static final String SERIALIZED_NAME_RESOURCES = "Resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private UpdateJobRequestResources resources;

  public static final String SERIALIZED_NAME_ON_DEVICE_SERVICE_CONFIGURATION = "OnDeviceServiceConfiguration";
  @SerializedName(SERIALIZED_NAME_ON_DEVICE_SERVICE_CONFIGURATION)
  private CreateJobRequestOnDeviceServiceConfiguration onDeviceServiceConfiguration;

  public static final String SERIALIZED_NAME_ADDRESS_ID = "AddressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_SHIPPING_OPTION = "ShippingOption";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTION)
  private ShippingOption shippingOption;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SNOWBALL_CAPACITY_PREFERENCE = "SnowballCapacityPreference";
  @SerializedName(SERIALIZED_NAME_SNOWBALL_CAPACITY_PREFERENCE)
  private SnowballCapacity snowballCapacityPreference;

  public static final String SERIALIZED_NAME_FORWARDING_ADDRESS_ID = "ForwardingAddressId";
  @SerializedName(SERIALIZED_NAME_FORWARDING_ADDRESS_ID)
  private String forwardingAddressId;

  public static final String SERIALIZED_NAME_PICKUP_DETAILS = "PickupDetails";
  @SerializedName(SERIALIZED_NAME_PICKUP_DETAILS)
  private PickupDetails pickupDetails;

  public UpdateJobRequest() {
  }

  public UpdateJobRequest jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * Get jobId
   * @return jobId
   */
  @javax.annotation.Nonnull
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public UpdateJobRequest roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public UpdateJobRequest notification(UpdateClusterRequestNotification notification) {
    this.notification = notification;
    return this;
  }

  /**
   * Get notification
   * @return notification
   */
  @javax.annotation.Nullable
  public UpdateClusterRequestNotification getNotification() {
    return notification;
  }

  public void setNotification(UpdateClusterRequestNotification notification) {
    this.notification = notification;
  }


  public UpdateJobRequest resources(UpdateJobRequestResources resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public UpdateJobRequestResources getResources() {
    return resources;
  }

  public void setResources(UpdateJobRequestResources resources) {
    this.resources = resources;
  }


  public UpdateJobRequest onDeviceServiceConfiguration(CreateJobRequestOnDeviceServiceConfiguration onDeviceServiceConfiguration) {
    this.onDeviceServiceConfiguration = onDeviceServiceConfiguration;
    return this;
  }

  /**
   * Get onDeviceServiceConfiguration
   * @return onDeviceServiceConfiguration
   */
  @javax.annotation.Nullable
  public CreateJobRequestOnDeviceServiceConfiguration getOnDeviceServiceConfiguration() {
    return onDeviceServiceConfiguration;
  }

  public void setOnDeviceServiceConfiguration(CreateJobRequestOnDeviceServiceConfiguration onDeviceServiceConfiguration) {
    this.onDeviceServiceConfiguration = onDeviceServiceConfiguration;
  }


  public UpdateJobRequest addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Get addressId
   * @return addressId
   */
  @javax.annotation.Nullable
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public UpdateJobRequest shippingOption(ShippingOption shippingOption) {
    this.shippingOption = shippingOption;
    return this;
  }

  /**
   * Get shippingOption
   * @return shippingOption
   */
  @javax.annotation.Nullable
  public ShippingOption getShippingOption() {
    return shippingOption;
  }

  public void setShippingOption(ShippingOption shippingOption) {
    this.shippingOption = shippingOption;
  }


  public UpdateJobRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateJobRequest snowballCapacityPreference(SnowballCapacity snowballCapacityPreference) {
    this.snowballCapacityPreference = snowballCapacityPreference;
    return this;
  }

  /**
   * Get snowballCapacityPreference
   * @return snowballCapacityPreference
   */
  @javax.annotation.Nullable
  public SnowballCapacity getSnowballCapacityPreference() {
    return snowballCapacityPreference;
  }

  public void setSnowballCapacityPreference(SnowballCapacity snowballCapacityPreference) {
    this.snowballCapacityPreference = snowballCapacityPreference;
  }


  public UpdateJobRequest forwardingAddressId(String forwardingAddressId) {
    this.forwardingAddressId = forwardingAddressId;
    return this;
  }

  /**
   * Get forwardingAddressId
   * @return forwardingAddressId
   */
  @javax.annotation.Nullable
  public String getForwardingAddressId() {
    return forwardingAddressId;
  }

  public void setForwardingAddressId(String forwardingAddressId) {
    this.forwardingAddressId = forwardingAddressId;
  }


  public UpdateJobRequest pickupDetails(PickupDetails pickupDetails) {
    this.pickupDetails = pickupDetails;
    return this;
  }

  /**
   * Get pickupDetails
   * @return pickupDetails
   */
  @javax.annotation.Nullable
  public PickupDetails getPickupDetails() {
    return pickupDetails;
  }

  public void setPickupDetails(PickupDetails pickupDetails) {
    this.pickupDetails = pickupDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateJobRequest updateJobRequest = (UpdateJobRequest) o;
    return Objects.equals(this.jobId, updateJobRequest.jobId) &&
        Objects.equals(this.roleARN, updateJobRequest.roleARN) &&
        Objects.equals(this.notification, updateJobRequest.notification) &&
        Objects.equals(this.resources, updateJobRequest.resources) &&
        Objects.equals(this.onDeviceServiceConfiguration, updateJobRequest.onDeviceServiceConfiguration) &&
        Objects.equals(this.addressId, updateJobRequest.addressId) &&
        Objects.equals(this.shippingOption, updateJobRequest.shippingOption) &&
        Objects.equals(this.description, updateJobRequest.description) &&
        Objects.equals(this.snowballCapacityPreference, updateJobRequest.snowballCapacityPreference) &&
        Objects.equals(this.forwardingAddressId, updateJobRequest.forwardingAddressId) &&
        Objects.equals(this.pickupDetails, updateJobRequest.pickupDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, roleARN, notification, resources, onDeviceServiceConfiguration, addressId, shippingOption, description, snowballCapacityPreference, forwardingAddressId, pickupDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateJobRequest {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    onDeviceServiceConfiguration: ").append(toIndentedString(onDeviceServiceConfiguration)).append("\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    shippingOption: ").append(toIndentedString(shippingOption)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    snowballCapacityPreference: ").append(toIndentedString(snowballCapacityPreference)).append("\n");
    sb.append("    forwardingAddressId: ").append(toIndentedString(forwardingAddressId)).append("\n");
    sb.append("    pickupDetails: ").append(toIndentedString(pickupDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobId");
    openapiFields.add("RoleARN");
    openapiFields.add("Notification");
    openapiFields.add("Resources");
    openapiFields.add("OnDeviceServiceConfiguration");
    openapiFields.add("AddressId");
    openapiFields.add("ShippingOption");
    openapiFields.add("Description");
    openapiFields.add("SnowballCapacityPreference");
    openapiFields.add("ForwardingAddressId");
    openapiFields.add("PickupDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("JobId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateJobRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateJobRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateJobRequest is not found in the empty JSON string", UpdateJobRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateJobRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateJobRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateJobRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `JobId`
      String.validateJsonElement(jsonObj.get("JobId"));
      // validate the optional field `RoleARN`
      if (jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleARN"));
      }
      // validate the optional field `Notification`
      if (jsonObj.get("Notification") != null && !jsonObj.get("Notification").isJsonNull()) {
        UpdateClusterRequestNotification.validateJsonElement(jsonObj.get("Notification"));
      }
      // validate the optional field `Resources`
      if (jsonObj.get("Resources") != null && !jsonObj.get("Resources").isJsonNull()) {
        UpdateJobRequestResources.validateJsonElement(jsonObj.get("Resources"));
      }
      // validate the optional field `OnDeviceServiceConfiguration`
      if (jsonObj.get("OnDeviceServiceConfiguration") != null && !jsonObj.get("OnDeviceServiceConfiguration").isJsonNull()) {
        CreateJobRequestOnDeviceServiceConfiguration.validateJsonElement(jsonObj.get("OnDeviceServiceConfiguration"));
      }
      // validate the optional field `AddressId`
      if (jsonObj.get("AddressId") != null && !jsonObj.get("AddressId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AddressId"));
      }
      // validate the optional field `ShippingOption`
      if (jsonObj.get("ShippingOption") != null && !jsonObj.get("ShippingOption").isJsonNull()) {
        ShippingOption.validateJsonElement(jsonObj.get("ShippingOption"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `SnowballCapacityPreference`
      if (jsonObj.get("SnowballCapacityPreference") != null && !jsonObj.get("SnowballCapacityPreference").isJsonNull()) {
        SnowballCapacity.validateJsonElement(jsonObj.get("SnowballCapacityPreference"));
      }
      // validate the optional field `ForwardingAddressId`
      if (jsonObj.get("ForwardingAddressId") != null && !jsonObj.get("ForwardingAddressId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ForwardingAddressId"));
      }
      // validate the optional field `PickupDetails`
      if (jsonObj.get("PickupDetails") != null && !jsonObj.get("PickupDetails").isJsonNull()) {
        PickupDetails.validateJsonElement(jsonObj.get("PickupDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateJobRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateJobRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateJobRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateJobRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateJobRequest>() {
           @Override
           public void write(JsonWriter out, UpdateJobRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateJobRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateJobRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateJobRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateJobRequest
   */
  public static UpdateJobRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateJobRequest.class);
  }

  /**
   * Convert an instance of UpdateJobRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

