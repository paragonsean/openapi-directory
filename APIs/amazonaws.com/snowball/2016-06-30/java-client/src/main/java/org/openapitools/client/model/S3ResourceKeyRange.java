/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * S3ResourceKeyRange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class S3ResourceKeyRange {
  public static final String SERIALIZED_NAME_BEGIN_MARKER = "BeginMarker";
  @SerializedName(SERIALIZED_NAME_BEGIN_MARKER)
  private String beginMarker;

  public static final String SERIALIZED_NAME_END_MARKER = "EndMarker";
  @SerializedName(SERIALIZED_NAME_END_MARKER)
  private String endMarker;

  public S3ResourceKeyRange() {
  }

  public S3ResourceKeyRange beginMarker(String beginMarker) {
    this.beginMarker = beginMarker;
    return this;
  }

  /**
   * Get beginMarker
   * @return beginMarker
   */
  @javax.annotation.Nullable
  public String getBeginMarker() {
    return beginMarker;
  }

  public void setBeginMarker(String beginMarker) {
    this.beginMarker = beginMarker;
  }


  public S3ResourceKeyRange endMarker(String endMarker) {
    this.endMarker = endMarker;
    return this;
  }

  /**
   * Get endMarker
   * @return endMarker
   */
  @javax.annotation.Nullable
  public String getEndMarker() {
    return endMarker;
  }

  public void setEndMarker(String endMarker) {
    this.endMarker = endMarker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3ResourceKeyRange s3ResourceKeyRange = (S3ResourceKeyRange) o;
    return Objects.equals(this.beginMarker, s3ResourceKeyRange.beginMarker) &&
        Objects.equals(this.endMarker, s3ResourceKeyRange.endMarker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beginMarker, endMarker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3ResourceKeyRange {\n");
    sb.append("    beginMarker: ").append(toIndentedString(beginMarker)).append("\n");
    sb.append("    endMarker: ").append(toIndentedString(endMarker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BeginMarker");
    openapiFields.add("EndMarker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to S3ResourceKeyRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!S3ResourceKeyRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in S3ResourceKeyRange is not found in the empty JSON string", S3ResourceKeyRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!S3ResourceKeyRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `S3ResourceKeyRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `BeginMarker`
      if (jsonObj.get("BeginMarker") != null && !jsonObj.get("BeginMarker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("BeginMarker"));
      }
      // validate the optional field `EndMarker`
      if (jsonObj.get("EndMarker") != null && !jsonObj.get("EndMarker").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndMarker"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!S3ResourceKeyRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'S3ResourceKeyRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<S3ResourceKeyRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(S3ResourceKeyRange.class));

       return (TypeAdapter<T>) new TypeAdapter<S3ResourceKeyRange>() {
           @Override
           public void write(JsonWriter out, S3ResourceKeyRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public S3ResourceKeyRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of S3ResourceKeyRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of S3ResourceKeyRange
   * @throws IOException if the JSON string is invalid with respect to S3ResourceKeyRange
   */
  public static S3ResourceKeyRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, S3ResourceKeyRange.class);
  }

  /**
   * Convert an instance of S3ResourceKeyRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

