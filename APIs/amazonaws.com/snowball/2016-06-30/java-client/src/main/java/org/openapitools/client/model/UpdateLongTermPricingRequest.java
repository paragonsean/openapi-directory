/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateLongTermPricingRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateLongTermPricingRequest {
  public static final String SERIALIZED_NAME_LONG_TERM_PRICING_ID = "LongTermPricingId";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_PRICING_ID)
  private String longTermPricingId;

  public static final String SERIALIZED_NAME_REPLACEMENT_JOB = "ReplacementJob";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_JOB)
  private String replacementJob;

  public static final String SERIALIZED_NAME_IS_LONG_TERM_PRICING_AUTO_RENEW = "IsLongTermPricingAutoRenew";
  @SerializedName(SERIALIZED_NAME_IS_LONG_TERM_PRICING_AUTO_RENEW)
  private Boolean isLongTermPricingAutoRenew;

  public UpdateLongTermPricingRequest() {
  }

  public UpdateLongTermPricingRequest longTermPricingId(String longTermPricingId) {
    this.longTermPricingId = longTermPricingId;
    return this;
  }

  /**
   * Get longTermPricingId
   * @return longTermPricingId
   */
  @javax.annotation.Nonnull
  public String getLongTermPricingId() {
    return longTermPricingId;
  }

  public void setLongTermPricingId(String longTermPricingId) {
    this.longTermPricingId = longTermPricingId;
  }


  public UpdateLongTermPricingRequest replacementJob(String replacementJob) {
    this.replacementJob = replacementJob;
    return this;
  }

  /**
   * Get replacementJob
   * @return replacementJob
   */
  @javax.annotation.Nullable
  public String getReplacementJob() {
    return replacementJob;
  }

  public void setReplacementJob(String replacementJob) {
    this.replacementJob = replacementJob;
  }


  public UpdateLongTermPricingRequest isLongTermPricingAutoRenew(Boolean isLongTermPricingAutoRenew) {
    this.isLongTermPricingAutoRenew = isLongTermPricingAutoRenew;
    return this;
  }

  /**
   * Get isLongTermPricingAutoRenew
   * @return isLongTermPricingAutoRenew
   */
  @javax.annotation.Nullable
  public Boolean getIsLongTermPricingAutoRenew() {
    return isLongTermPricingAutoRenew;
  }

  public void setIsLongTermPricingAutoRenew(Boolean isLongTermPricingAutoRenew) {
    this.isLongTermPricingAutoRenew = isLongTermPricingAutoRenew;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateLongTermPricingRequest updateLongTermPricingRequest = (UpdateLongTermPricingRequest) o;
    return Objects.equals(this.longTermPricingId, updateLongTermPricingRequest.longTermPricingId) &&
        Objects.equals(this.replacementJob, updateLongTermPricingRequest.replacementJob) &&
        Objects.equals(this.isLongTermPricingAutoRenew, updateLongTermPricingRequest.isLongTermPricingAutoRenew);
  }

  @Override
  public int hashCode() {
    return Objects.hash(longTermPricingId, replacementJob, isLongTermPricingAutoRenew);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateLongTermPricingRequest {\n");
    sb.append("    longTermPricingId: ").append(toIndentedString(longTermPricingId)).append("\n");
    sb.append("    replacementJob: ").append(toIndentedString(replacementJob)).append("\n");
    sb.append("    isLongTermPricingAutoRenew: ").append(toIndentedString(isLongTermPricingAutoRenew)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LongTermPricingId");
    openapiFields.add("ReplacementJob");
    openapiFields.add("IsLongTermPricingAutoRenew");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LongTermPricingId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateLongTermPricingRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateLongTermPricingRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateLongTermPricingRequest is not found in the empty JSON string", UpdateLongTermPricingRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateLongTermPricingRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateLongTermPricingRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateLongTermPricingRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LongTermPricingId`
      String.validateJsonElement(jsonObj.get("LongTermPricingId"));
      // validate the optional field `ReplacementJob`
      if (jsonObj.get("ReplacementJob") != null && !jsonObj.get("ReplacementJob").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplacementJob"));
      }
      // validate the optional field `IsLongTermPricingAutoRenew`
      if (jsonObj.get("IsLongTermPricingAutoRenew") != null && !jsonObj.get("IsLongTermPricingAutoRenew").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsLongTermPricingAutoRenew"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateLongTermPricingRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateLongTermPricingRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateLongTermPricingRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateLongTermPricingRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateLongTermPricingRequest>() {
           @Override
           public void write(JsonWriter out, UpdateLongTermPricingRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateLongTermPricingRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateLongTermPricingRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateLongTermPricingRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateLongTermPricingRequest
   */
  public static UpdateLongTermPricingRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateLongTermPricingRequest.class);
  }

  /**
   * Convert an instance of UpdateLongTermPricingRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

