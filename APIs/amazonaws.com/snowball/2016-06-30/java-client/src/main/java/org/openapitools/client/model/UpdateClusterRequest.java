/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateClusterRequestOnDeviceServiceConfiguration;
import org.openapitools.client.model.ShippingOption;
import org.openapitools.client.model.UpdateClusterRequestNotification;
import org.openapitools.client.model.UpdateClusterRequestResources;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateClusterRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateClusterRequest {
  public static final String SERIALIZED_NAME_CLUSTER_ID = "ClusterId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ID)
  private String clusterId;

  public static final String SERIALIZED_NAME_ROLE_A_R_N = "RoleARN";
  @SerializedName(SERIALIZED_NAME_ROLE_A_R_N)
  private String roleARN;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RESOURCES = "Resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private UpdateClusterRequestResources resources;

  public static final String SERIALIZED_NAME_ON_DEVICE_SERVICE_CONFIGURATION = "OnDeviceServiceConfiguration";
  @SerializedName(SERIALIZED_NAME_ON_DEVICE_SERVICE_CONFIGURATION)
  private CreateClusterRequestOnDeviceServiceConfiguration onDeviceServiceConfiguration;

  public static final String SERIALIZED_NAME_ADDRESS_ID = "AddressId";
  @SerializedName(SERIALIZED_NAME_ADDRESS_ID)
  private String addressId;

  public static final String SERIALIZED_NAME_SHIPPING_OPTION = "ShippingOption";
  @SerializedName(SERIALIZED_NAME_SHIPPING_OPTION)
  private ShippingOption shippingOption;

  public static final String SERIALIZED_NAME_NOTIFICATION = "Notification";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION)
  private UpdateClusterRequestNotification notification;

  public static final String SERIALIZED_NAME_FORWARDING_ADDRESS_ID = "ForwardingAddressId";
  @SerializedName(SERIALIZED_NAME_FORWARDING_ADDRESS_ID)
  private String forwardingAddressId;

  public UpdateClusterRequest() {
  }

  public UpdateClusterRequest clusterId(String clusterId) {
    this.clusterId = clusterId;
    return this;
  }

  /**
   * Get clusterId
   * @return clusterId
   */
  @javax.annotation.Nonnull
  public String getClusterId() {
    return clusterId;
  }

  public void setClusterId(String clusterId) {
    this.clusterId = clusterId;
  }


  public UpdateClusterRequest roleARN(String roleARN) {
    this.roleARN = roleARN;
    return this;
  }

  /**
   * Get roleARN
   * @return roleARN
   */
  @javax.annotation.Nullable
  public String getRoleARN() {
    return roleARN;
  }

  public void setRoleARN(String roleARN) {
    this.roleARN = roleARN;
  }


  public UpdateClusterRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateClusterRequest resources(UpdateClusterRequestResources resources) {
    this.resources = resources;
    return this;
  }

  /**
   * Get resources
   * @return resources
   */
  @javax.annotation.Nullable
  public UpdateClusterRequestResources getResources() {
    return resources;
  }

  public void setResources(UpdateClusterRequestResources resources) {
    this.resources = resources;
  }


  public UpdateClusterRequest onDeviceServiceConfiguration(CreateClusterRequestOnDeviceServiceConfiguration onDeviceServiceConfiguration) {
    this.onDeviceServiceConfiguration = onDeviceServiceConfiguration;
    return this;
  }

  /**
   * Get onDeviceServiceConfiguration
   * @return onDeviceServiceConfiguration
   */
  @javax.annotation.Nullable
  public CreateClusterRequestOnDeviceServiceConfiguration getOnDeviceServiceConfiguration() {
    return onDeviceServiceConfiguration;
  }

  public void setOnDeviceServiceConfiguration(CreateClusterRequestOnDeviceServiceConfiguration onDeviceServiceConfiguration) {
    this.onDeviceServiceConfiguration = onDeviceServiceConfiguration;
  }


  public UpdateClusterRequest addressId(String addressId) {
    this.addressId = addressId;
    return this;
  }

  /**
   * Get addressId
   * @return addressId
   */
  @javax.annotation.Nullable
  public String getAddressId() {
    return addressId;
  }

  public void setAddressId(String addressId) {
    this.addressId = addressId;
  }


  public UpdateClusterRequest shippingOption(ShippingOption shippingOption) {
    this.shippingOption = shippingOption;
    return this;
  }

  /**
   * Get shippingOption
   * @return shippingOption
   */
  @javax.annotation.Nullable
  public ShippingOption getShippingOption() {
    return shippingOption;
  }

  public void setShippingOption(ShippingOption shippingOption) {
    this.shippingOption = shippingOption;
  }


  public UpdateClusterRequest notification(UpdateClusterRequestNotification notification) {
    this.notification = notification;
    return this;
  }

  /**
   * Get notification
   * @return notification
   */
  @javax.annotation.Nullable
  public UpdateClusterRequestNotification getNotification() {
    return notification;
  }

  public void setNotification(UpdateClusterRequestNotification notification) {
    this.notification = notification;
  }


  public UpdateClusterRequest forwardingAddressId(String forwardingAddressId) {
    this.forwardingAddressId = forwardingAddressId;
    return this;
  }

  /**
   * Get forwardingAddressId
   * @return forwardingAddressId
   */
  @javax.annotation.Nullable
  public String getForwardingAddressId() {
    return forwardingAddressId;
  }

  public void setForwardingAddressId(String forwardingAddressId) {
    this.forwardingAddressId = forwardingAddressId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateClusterRequest updateClusterRequest = (UpdateClusterRequest) o;
    return Objects.equals(this.clusterId, updateClusterRequest.clusterId) &&
        Objects.equals(this.roleARN, updateClusterRequest.roleARN) &&
        Objects.equals(this.description, updateClusterRequest.description) &&
        Objects.equals(this.resources, updateClusterRequest.resources) &&
        Objects.equals(this.onDeviceServiceConfiguration, updateClusterRequest.onDeviceServiceConfiguration) &&
        Objects.equals(this.addressId, updateClusterRequest.addressId) &&
        Objects.equals(this.shippingOption, updateClusterRequest.shippingOption) &&
        Objects.equals(this.notification, updateClusterRequest.notification) &&
        Objects.equals(this.forwardingAddressId, updateClusterRequest.forwardingAddressId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterId, roleARN, description, resources, onDeviceServiceConfiguration, addressId, shippingOption, notification, forwardingAddressId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateClusterRequest {\n");
    sb.append("    clusterId: ").append(toIndentedString(clusterId)).append("\n");
    sb.append("    roleARN: ").append(toIndentedString(roleARN)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    onDeviceServiceConfiguration: ").append(toIndentedString(onDeviceServiceConfiguration)).append("\n");
    sb.append("    addressId: ").append(toIndentedString(addressId)).append("\n");
    sb.append("    shippingOption: ").append(toIndentedString(shippingOption)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    forwardingAddressId: ").append(toIndentedString(forwardingAddressId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ClusterId");
    openapiFields.add("RoleARN");
    openapiFields.add("Description");
    openapiFields.add("Resources");
    openapiFields.add("OnDeviceServiceConfiguration");
    openapiFields.add("AddressId");
    openapiFields.add("ShippingOption");
    openapiFields.add("Notification");
    openapiFields.add("ForwardingAddressId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ClusterId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateClusterRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateClusterRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateClusterRequest is not found in the empty JSON string", UpdateClusterRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateClusterRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateClusterRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateClusterRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ClusterId`
      String.validateJsonElement(jsonObj.get("ClusterId"));
      // validate the optional field `RoleARN`
      if (jsonObj.get("RoleARN") != null && !jsonObj.get("RoleARN").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RoleARN"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `Resources`
      if (jsonObj.get("Resources") != null && !jsonObj.get("Resources").isJsonNull()) {
        UpdateClusterRequestResources.validateJsonElement(jsonObj.get("Resources"));
      }
      // validate the optional field `OnDeviceServiceConfiguration`
      if (jsonObj.get("OnDeviceServiceConfiguration") != null && !jsonObj.get("OnDeviceServiceConfiguration").isJsonNull()) {
        CreateClusterRequestOnDeviceServiceConfiguration.validateJsonElement(jsonObj.get("OnDeviceServiceConfiguration"));
      }
      // validate the optional field `AddressId`
      if (jsonObj.get("AddressId") != null && !jsonObj.get("AddressId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AddressId"));
      }
      // validate the optional field `ShippingOption`
      if (jsonObj.get("ShippingOption") != null && !jsonObj.get("ShippingOption").isJsonNull()) {
        ShippingOption.validateJsonElement(jsonObj.get("ShippingOption"));
      }
      // validate the optional field `Notification`
      if (jsonObj.get("Notification") != null && !jsonObj.get("Notification").isJsonNull()) {
        UpdateClusterRequestNotification.validateJsonElement(jsonObj.get("Notification"));
      }
      // validate the optional field `ForwardingAddressId`
      if (jsonObj.get("ForwardingAddressId") != null && !jsonObj.get("ForwardingAddressId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ForwardingAddressId"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateClusterRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateClusterRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateClusterRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateClusterRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateClusterRequest>() {
           @Override
           public void write(JsonWriter out, UpdateClusterRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateClusterRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateClusterRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateClusterRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateClusterRequest
   */
  public static UpdateClusterRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateClusterRequest.class);
  }

  /**
   * Convert an instance of UpdateClusterRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

