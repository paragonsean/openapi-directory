/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &lt;p&gt;Contains job logs. Whenever a Snow device is used to import data into or export data out of Amazon S3, you&#39;ll have the option of downloading a PDF job report. Job logs are returned as a part of the response syntax of the &lt;code&gt;DescribeJob&lt;/code&gt; action in the &lt;code&gt;JobMetadata&lt;/code&gt; data type. The job logs can be accessed for up to 60 minutes after this request has been made. To access any of the job logs after 60 minutes have passed, you&#39;ll have to make another call to the &lt;code&gt;DescribeJob&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt;For import jobs, the PDF job report becomes available at the end of the import process. For export jobs, your job report typically becomes available while the Snow device for your job part is being delivered to you.&lt;/p&gt; &lt;p&gt;The job report provides you insight into the state of your Amazon S3 data transfer. The report includes details about your job or job part for your records.&lt;/p&gt; &lt;p&gt;For deeper visibility into the status of your transferred objects, you can look at the two associated logs: a success log and a failure log. The logs are saved in comma-separated value (CSV) format, and the name of each log includes the ID of the job or job part that the log describes.&lt;/p&gt;
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobLogs {
  public static final String SERIALIZED_NAME_JOB_COMPLETION_REPORT_U_R_I = "JobCompletionReportURI";
  @SerializedName(SERIALIZED_NAME_JOB_COMPLETION_REPORT_U_R_I)
  private String jobCompletionReportURI;

  public static final String SERIALIZED_NAME_JOB_SUCCESS_LOG_U_R_I = "JobSuccessLogURI";
  @SerializedName(SERIALIZED_NAME_JOB_SUCCESS_LOG_U_R_I)
  private String jobSuccessLogURI;

  public static final String SERIALIZED_NAME_JOB_FAILURE_LOG_U_R_I = "JobFailureLogURI";
  @SerializedName(SERIALIZED_NAME_JOB_FAILURE_LOG_U_R_I)
  private String jobFailureLogURI;

  public JobLogs() {
  }

  public JobLogs jobCompletionReportURI(String jobCompletionReportURI) {
    this.jobCompletionReportURI = jobCompletionReportURI;
    return this;
  }

  /**
   * Get jobCompletionReportURI
   * @return jobCompletionReportURI
   */
  @javax.annotation.Nullable
  public String getJobCompletionReportURI() {
    return jobCompletionReportURI;
  }

  public void setJobCompletionReportURI(String jobCompletionReportURI) {
    this.jobCompletionReportURI = jobCompletionReportURI;
  }


  public JobLogs jobSuccessLogURI(String jobSuccessLogURI) {
    this.jobSuccessLogURI = jobSuccessLogURI;
    return this;
  }

  /**
   * Get jobSuccessLogURI
   * @return jobSuccessLogURI
   */
  @javax.annotation.Nullable
  public String getJobSuccessLogURI() {
    return jobSuccessLogURI;
  }

  public void setJobSuccessLogURI(String jobSuccessLogURI) {
    this.jobSuccessLogURI = jobSuccessLogURI;
  }


  public JobLogs jobFailureLogURI(String jobFailureLogURI) {
    this.jobFailureLogURI = jobFailureLogURI;
    return this;
  }

  /**
   * Get jobFailureLogURI
   * @return jobFailureLogURI
   */
  @javax.annotation.Nullable
  public String getJobFailureLogURI() {
    return jobFailureLogURI;
  }

  public void setJobFailureLogURI(String jobFailureLogURI) {
    this.jobFailureLogURI = jobFailureLogURI;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobLogs jobLogs = (JobLogs) o;
    return Objects.equals(this.jobCompletionReportURI, jobLogs.jobCompletionReportURI) &&
        Objects.equals(this.jobSuccessLogURI, jobLogs.jobSuccessLogURI) &&
        Objects.equals(this.jobFailureLogURI, jobLogs.jobFailureLogURI);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobCompletionReportURI, jobSuccessLogURI, jobFailureLogURI);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobLogs {\n");
    sb.append("    jobCompletionReportURI: ").append(toIndentedString(jobCompletionReportURI)).append("\n");
    sb.append("    jobSuccessLogURI: ").append(toIndentedString(jobSuccessLogURI)).append("\n");
    sb.append("    jobFailureLogURI: ").append(toIndentedString(jobFailureLogURI)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("JobCompletionReportURI");
    openapiFields.add("JobSuccessLogURI");
    openapiFields.add("JobFailureLogURI");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobLogs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobLogs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobLogs is not found in the empty JSON string", JobLogs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobLogs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobLogs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `JobCompletionReportURI`
      if (jsonObj.get("JobCompletionReportURI") != null && !jsonObj.get("JobCompletionReportURI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobCompletionReportURI"));
      }
      // validate the optional field `JobSuccessLogURI`
      if (jsonObj.get("JobSuccessLogURI") != null && !jsonObj.get("JobSuccessLogURI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobSuccessLogURI"));
      }
      // validate the optional field `JobFailureLogURI`
      if (jsonObj.get("JobFailureLogURI") != null && !jsonObj.get("JobFailureLogURI").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("JobFailureLogURI"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobLogs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobLogs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobLogs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobLogs.class));

       return (TypeAdapter<T>) new TypeAdapter<JobLogs>() {
           @Override
           public void write(JsonWriter out, JobLogs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobLogs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobLogs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobLogs
   * @throws IOException if the JSON string is invalid with respect to JobLogs
   */
  public static JobLogs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobLogs.class);
  }

  /**
   * Convert an instance of JobLogs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

