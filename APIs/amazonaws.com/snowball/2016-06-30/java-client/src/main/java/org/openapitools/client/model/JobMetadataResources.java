/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * JobMetadataResources
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobMetadataResources {
  public static final String SERIALIZED_NAME_S3_RESOURCES = "S3Resources";
  @SerializedName(SERIALIZED_NAME_S3_RESOURCES)
  private List s3Resources;

  public static final String SERIALIZED_NAME_LAMBDA_RESOURCES = "LambdaResources";
  @SerializedName(SERIALIZED_NAME_LAMBDA_RESOURCES)
  private List lambdaResources;

  public static final String SERIALIZED_NAME_EC2_AMI_RESOURCES = "Ec2AmiResources";
  @SerializedName(SERIALIZED_NAME_EC2_AMI_RESOURCES)
  private List ec2AmiResources;

  public JobMetadataResources() {
  }

  public JobMetadataResources s3Resources(List s3Resources) {
    this.s3Resources = s3Resources;
    return this;
  }

  /**
   * Get s3Resources
   * @return s3Resources
   */
  @javax.annotation.Nullable
  public List getS3Resources() {
    return s3Resources;
  }

  public void setS3Resources(List s3Resources) {
    this.s3Resources = s3Resources;
  }


  public JobMetadataResources lambdaResources(List lambdaResources) {
    this.lambdaResources = lambdaResources;
    return this;
  }

  /**
   * Get lambdaResources
   * @return lambdaResources
   */
  @javax.annotation.Nullable
  public List getLambdaResources() {
    return lambdaResources;
  }

  public void setLambdaResources(List lambdaResources) {
    this.lambdaResources = lambdaResources;
  }


  public JobMetadataResources ec2AmiResources(List ec2AmiResources) {
    this.ec2AmiResources = ec2AmiResources;
    return this;
  }

  /**
   * Get ec2AmiResources
   * @return ec2AmiResources
   */
  @javax.annotation.Nullable
  public List getEc2AmiResources() {
    return ec2AmiResources;
  }

  public void setEc2AmiResources(List ec2AmiResources) {
    this.ec2AmiResources = ec2AmiResources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobMetadataResources jobMetadataResources = (JobMetadataResources) o;
    return Objects.equals(this.s3Resources, jobMetadataResources.s3Resources) &&
        Objects.equals(this.lambdaResources, jobMetadataResources.lambdaResources) &&
        Objects.equals(this.ec2AmiResources, jobMetadataResources.ec2AmiResources);
  }

  @Override
  public int hashCode() {
    return Objects.hash(s3Resources, lambdaResources, ec2AmiResources);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobMetadataResources {\n");
    sb.append("    s3Resources: ").append(toIndentedString(s3Resources)).append("\n");
    sb.append("    lambdaResources: ").append(toIndentedString(lambdaResources)).append("\n");
    sb.append("    ec2AmiResources: ").append(toIndentedString(ec2AmiResources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("S3Resources");
    openapiFields.add("LambdaResources");
    openapiFields.add("Ec2AmiResources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobMetadataResources
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobMetadataResources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobMetadataResources is not found in the empty JSON string", JobMetadataResources.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobMetadataResources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobMetadataResources` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `S3Resources`
      if (jsonObj.get("S3Resources") != null && !jsonObj.get("S3Resources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("S3Resources"));
      }
      // validate the optional field `LambdaResources`
      if (jsonObj.get("LambdaResources") != null && !jsonObj.get("LambdaResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("LambdaResources"));
      }
      // validate the optional field `Ec2AmiResources`
      if (jsonObj.get("Ec2AmiResources") != null && !jsonObj.get("Ec2AmiResources").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Ec2AmiResources"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobMetadataResources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobMetadataResources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobMetadataResources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobMetadataResources.class));

       return (TypeAdapter<T>) new TypeAdapter<JobMetadataResources>() {
           @Override
           public void write(JsonWriter out, JobMetadataResources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobMetadataResources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobMetadataResources given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobMetadataResources
   * @throws IOException if the JSON string is invalid with respect to JobMetadataResources
   */
  public static JobMetadataResources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobMetadataResources.class);
  }

  /**
   * Convert an instance of JobMetadataResources to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

