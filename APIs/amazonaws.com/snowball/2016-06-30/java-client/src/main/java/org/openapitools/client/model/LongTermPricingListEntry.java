/*
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LongTermPricingType;
import org.openapitools.client.model.SnowballType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Each &lt;code&gt;LongTermPricingListEntry&lt;/code&gt; object contains information about a long-term pricing type.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:27:55.026961-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LongTermPricingListEntry {
  public static final String SERIALIZED_NAME_LONG_TERM_PRICING_ID = "LongTermPricingId";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_PRICING_ID)
  private String longTermPricingId;

  public static final String SERIALIZED_NAME_LONG_TERM_PRICING_END_DATE = "LongTermPricingEndDate";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_PRICING_END_DATE)
  private OffsetDateTime longTermPricingEndDate;

  public static final String SERIALIZED_NAME_LONG_TERM_PRICING_START_DATE = "LongTermPricingStartDate";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_PRICING_START_DATE)
  private OffsetDateTime longTermPricingStartDate;

  public static final String SERIALIZED_NAME_LONG_TERM_PRICING_TYPE = "LongTermPricingType";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_PRICING_TYPE)
  private LongTermPricingType longTermPricingType;

  public static final String SERIALIZED_NAME_CURRENT_ACTIVE_JOB = "CurrentActiveJob";
  @SerializedName(SERIALIZED_NAME_CURRENT_ACTIVE_JOB)
  private String currentActiveJob;

  public static final String SERIALIZED_NAME_REPLACEMENT_JOB = "ReplacementJob";
  @SerializedName(SERIALIZED_NAME_REPLACEMENT_JOB)
  private String replacementJob;

  public static final String SERIALIZED_NAME_IS_LONG_TERM_PRICING_AUTO_RENEW = "IsLongTermPricingAutoRenew";
  @SerializedName(SERIALIZED_NAME_IS_LONG_TERM_PRICING_AUTO_RENEW)
  private Boolean isLongTermPricingAutoRenew;

  public static final String SERIALIZED_NAME_LONG_TERM_PRICING_STATUS = "LongTermPricingStatus";
  @SerializedName(SERIALIZED_NAME_LONG_TERM_PRICING_STATUS)
  private String longTermPricingStatus;

  public static final String SERIALIZED_NAME_SNOWBALL_TYPE = "SnowballType";
  @SerializedName(SERIALIZED_NAME_SNOWBALL_TYPE)
  private SnowballType snowballType;

  public static final String SERIALIZED_NAME_JOB_IDS = "JobIds";
  @SerializedName(SERIALIZED_NAME_JOB_IDS)
  private List jobIds;

  public LongTermPricingListEntry() {
  }

  public LongTermPricingListEntry longTermPricingId(String longTermPricingId) {
    this.longTermPricingId = longTermPricingId;
    return this;
  }

  /**
   * Get longTermPricingId
   * @return longTermPricingId
   */
  @javax.annotation.Nullable
  public String getLongTermPricingId() {
    return longTermPricingId;
  }

  public void setLongTermPricingId(String longTermPricingId) {
    this.longTermPricingId = longTermPricingId;
  }


  public LongTermPricingListEntry longTermPricingEndDate(OffsetDateTime longTermPricingEndDate) {
    this.longTermPricingEndDate = longTermPricingEndDate;
    return this;
  }

  /**
   * Get longTermPricingEndDate
   * @return longTermPricingEndDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLongTermPricingEndDate() {
    return longTermPricingEndDate;
  }

  public void setLongTermPricingEndDate(OffsetDateTime longTermPricingEndDate) {
    this.longTermPricingEndDate = longTermPricingEndDate;
  }


  public LongTermPricingListEntry longTermPricingStartDate(OffsetDateTime longTermPricingStartDate) {
    this.longTermPricingStartDate = longTermPricingStartDate;
    return this;
  }

  /**
   * Get longTermPricingStartDate
   * @return longTermPricingStartDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLongTermPricingStartDate() {
    return longTermPricingStartDate;
  }

  public void setLongTermPricingStartDate(OffsetDateTime longTermPricingStartDate) {
    this.longTermPricingStartDate = longTermPricingStartDate;
  }


  public LongTermPricingListEntry longTermPricingType(LongTermPricingType longTermPricingType) {
    this.longTermPricingType = longTermPricingType;
    return this;
  }

  /**
   * Get longTermPricingType
   * @return longTermPricingType
   */
  @javax.annotation.Nullable
  public LongTermPricingType getLongTermPricingType() {
    return longTermPricingType;
  }

  public void setLongTermPricingType(LongTermPricingType longTermPricingType) {
    this.longTermPricingType = longTermPricingType;
  }


  public LongTermPricingListEntry currentActiveJob(String currentActiveJob) {
    this.currentActiveJob = currentActiveJob;
    return this;
  }

  /**
   * Get currentActiveJob
   * @return currentActiveJob
   */
  @javax.annotation.Nullable
  public String getCurrentActiveJob() {
    return currentActiveJob;
  }

  public void setCurrentActiveJob(String currentActiveJob) {
    this.currentActiveJob = currentActiveJob;
  }


  public LongTermPricingListEntry replacementJob(String replacementJob) {
    this.replacementJob = replacementJob;
    return this;
  }

  /**
   * Get replacementJob
   * @return replacementJob
   */
  @javax.annotation.Nullable
  public String getReplacementJob() {
    return replacementJob;
  }

  public void setReplacementJob(String replacementJob) {
    this.replacementJob = replacementJob;
  }


  public LongTermPricingListEntry isLongTermPricingAutoRenew(Boolean isLongTermPricingAutoRenew) {
    this.isLongTermPricingAutoRenew = isLongTermPricingAutoRenew;
    return this;
  }

  /**
   * Get isLongTermPricingAutoRenew
   * @return isLongTermPricingAutoRenew
   */
  @javax.annotation.Nullable
  public Boolean getIsLongTermPricingAutoRenew() {
    return isLongTermPricingAutoRenew;
  }

  public void setIsLongTermPricingAutoRenew(Boolean isLongTermPricingAutoRenew) {
    this.isLongTermPricingAutoRenew = isLongTermPricingAutoRenew;
  }


  public LongTermPricingListEntry longTermPricingStatus(String longTermPricingStatus) {
    this.longTermPricingStatus = longTermPricingStatus;
    return this;
  }

  /**
   * Get longTermPricingStatus
   * @return longTermPricingStatus
   */
  @javax.annotation.Nullable
  public String getLongTermPricingStatus() {
    return longTermPricingStatus;
  }

  public void setLongTermPricingStatus(String longTermPricingStatus) {
    this.longTermPricingStatus = longTermPricingStatus;
  }


  public LongTermPricingListEntry snowballType(SnowballType snowballType) {
    this.snowballType = snowballType;
    return this;
  }

  /**
   * Get snowballType
   * @return snowballType
   */
  @javax.annotation.Nullable
  public SnowballType getSnowballType() {
    return snowballType;
  }

  public void setSnowballType(SnowballType snowballType) {
    this.snowballType = snowballType;
  }


  public LongTermPricingListEntry jobIds(List jobIds) {
    this.jobIds = jobIds;
    return this;
  }

  /**
   * Get jobIds
   * @return jobIds
   */
  @javax.annotation.Nullable
  public List getJobIds() {
    return jobIds;
  }

  public void setJobIds(List jobIds) {
    this.jobIds = jobIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LongTermPricingListEntry longTermPricingListEntry = (LongTermPricingListEntry) o;
    return Objects.equals(this.longTermPricingId, longTermPricingListEntry.longTermPricingId) &&
        Objects.equals(this.longTermPricingEndDate, longTermPricingListEntry.longTermPricingEndDate) &&
        Objects.equals(this.longTermPricingStartDate, longTermPricingListEntry.longTermPricingStartDate) &&
        Objects.equals(this.longTermPricingType, longTermPricingListEntry.longTermPricingType) &&
        Objects.equals(this.currentActiveJob, longTermPricingListEntry.currentActiveJob) &&
        Objects.equals(this.replacementJob, longTermPricingListEntry.replacementJob) &&
        Objects.equals(this.isLongTermPricingAutoRenew, longTermPricingListEntry.isLongTermPricingAutoRenew) &&
        Objects.equals(this.longTermPricingStatus, longTermPricingListEntry.longTermPricingStatus) &&
        Objects.equals(this.snowballType, longTermPricingListEntry.snowballType) &&
        Objects.equals(this.jobIds, longTermPricingListEntry.jobIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(longTermPricingId, longTermPricingEndDate, longTermPricingStartDate, longTermPricingType, currentActiveJob, replacementJob, isLongTermPricingAutoRenew, longTermPricingStatus, snowballType, jobIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LongTermPricingListEntry {\n");
    sb.append("    longTermPricingId: ").append(toIndentedString(longTermPricingId)).append("\n");
    sb.append("    longTermPricingEndDate: ").append(toIndentedString(longTermPricingEndDate)).append("\n");
    sb.append("    longTermPricingStartDate: ").append(toIndentedString(longTermPricingStartDate)).append("\n");
    sb.append("    longTermPricingType: ").append(toIndentedString(longTermPricingType)).append("\n");
    sb.append("    currentActiveJob: ").append(toIndentedString(currentActiveJob)).append("\n");
    sb.append("    replacementJob: ").append(toIndentedString(replacementJob)).append("\n");
    sb.append("    isLongTermPricingAutoRenew: ").append(toIndentedString(isLongTermPricingAutoRenew)).append("\n");
    sb.append("    longTermPricingStatus: ").append(toIndentedString(longTermPricingStatus)).append("\n");
    sb.append("    snowballType: ").append(toIndentedString(snowballType)).append("\n");
    sb.append("    jobIds: ").append(toIndentedString(jobIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LongTermPricingId");
    openapiFields.add("LongTermPricingEndDate");
    openapiFields.add("LongTermPricingStartDate");
    openapiFields.add("LongTermPricingType");
    openapiFields.add("CurrentActiveJob");
    openapiFields.add("ReplacementJob");
    openapiFields.add("IsLongTermPricingAutoRenew");
    openapiFields.add("LongTermPricingStatus");
    openapiFields.add("SnowballType");
    openapiFields.add("JobIds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LongTermPricingListEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LongTermPricingListEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LongTermPricingListEntry is not found in the empty JSON string", LongTermPricingListEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LongTermPricingListEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LongTermPricingListEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `LongTermPricingId`
      if (jsonObj.get("LongTermPricingId") != null && !jsonObj.get("LongTermPricingId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LongTermPricingId"));
      }
      // validate the optional field `LongTermPricingEndDate`
      if (jsonObj.get("LongTermPricingEndDate") != null && !jsonObj.get("LongTermPricingEndDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LongTermPricingEndDate"));
      }
      // validate the optional field `LongTermPricingStartDate`
      if (jsonObj.get("LongTermPricingStartDate") != null && !jsonObj.get("LongTermPricingStartDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LongTermPricingStartDate"));
      }
      // validate the optional field `LongTermPricingType`
      if (jsonObj.get("LongTermPricingType") != null && !jsonObj.get("LongTermPricingType").isJsonNull()) {
        LongTermPricingType.validateJsonElement(jsonObj.get("LongTermPricingType"));
      }
      // validate the optional field `CurrentActiveJob`
      if (jsonObj.get("CurrentActiveJob") != null && !jsonObj.get("CurrentActiveJob").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CurrentActiveJob"));
      }
      // validate the optional field `ReplacementJob`
      if (jsonObj.get("ReplacementJob") != null && !jsonObj.get("ReplacementJob").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReplacementJob"));
      }
      // validate the optional field `IsLongTermPricingAutoRenew`
      if (jsonObj.get("IsLongTermPricingAutoRenew") != null && !jsonObj.get("IsLongTermPricingAutoRenew").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("IsLongTermPricingAutoRenew"));
      }
      // validate the optional field `LongTermPricingStatus`
      if (jsonObj.get("LongTermPricingStatus") != null && !jsonObj.get("LongTermPricingStatus").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("LongTermPricingStatus"));
      }
      // validate the optional field `SnowballType`
      if (jsonObj.get("SnowballType") != null && !jsonObj.get("SnowballType").isJsonNull()) {
        SnowballType.validateJsonElement(jsonObj.get("SnowballType"));
      }
      // validate the optional field `JobIds`
      if (jsonObj.get("JobIds") != null && !jsonObj.get("JobIds").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("JobIds"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LongTermPricingListEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LongTermPricingListEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LongTermPricingListEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LongTermPricingListEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<LongTermPricingListEntry>() {
           @Override
           public void write(JsonWriter out, LongTermPricingListEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LongTermPricingListEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LongTermPricingListEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LongTermPricingListEntry
   * @throws IOException if the JSON string is invalid with respect to LongTermPricingListEntry
   */
  public static LongTermPricingListEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LongTermPricingListEntry.class);
  }

  /**
   * Convert an instance of LongTermPricingListEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

