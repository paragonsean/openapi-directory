/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShippingDetails_InboundShipment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShippingDetails_InboundShipment::OAIShippingDetails_InboundShipment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShippingDetails_InboundShipment::OAIShippingDetails_InboundShipment() {
    this->initializeModel();
}

OAIShippingDetails_InboundShipment::~OAIShippingDetails_InboundShipment() {}

void OAIShippingDetails_InboundShipment::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;
}

void OAIShippingDetails_InboundShipment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShippingDetails_InboundShipment::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("TrackingNumber")]);
    m_tracking_number_isSet = !json[QString("TrackingNumber")].isNull() && m_tracking_number_isValid;
}

QString OAIShippingDetails_InboundShipment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShippingDetails_InboundShipment::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("TrackingNumber"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    return obj;
}

QString OAIShippingDetails_InboundShipment::getStatus() const {
    return m_status;
}
void OAIShippingDetails_InboundShipment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIShippingDetails_InboundShipment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIShippingDetails_InboundShipment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIShippingDetails_InboundShipment::getTrackingNumber() const {
    return m_tracking_number;
}
void OAIShippingDetails_InboundShipment::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAIShippingDetails_InboundShipment::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAIShippingDetails_InboundShipment::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

bool OAIShippingDetails_InboundShipment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShippingDetails_InboundShipment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
