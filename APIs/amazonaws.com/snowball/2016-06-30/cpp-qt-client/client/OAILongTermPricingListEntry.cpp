/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILongTermPricingListEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILongTermPricingListEntry::OAILongTermPricingListEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILongTermPricingListEntry::OAILongTermPricingListEntry() {
    this->initializeModel();
}

OAILongTermPricingListEntry::~OAILongTermPricingListEntry() {}

void OAILongTermPricingListEntry::initializeModel() {

    m_long_term_pricing_id_isSet = false;
    m_long_term_pricing_id_isValid = false;

    m_long_term_pricing_end_date_isSet = false;
    m_long_term_pricing_end_date_isValid = false;

    m_long_term_pricing_start_date_isSet = false;
    m_long_term_pricing_start_date_isValid = false;

    m_long_term_pricing_type_isSet = false;
    m_long_term_pricing_type_isValid = false;

    m_current_active_job_isSet = false;
    m_current_active_job_isValid = false;

    m_replacement_job_isSet = false;
    m_replacement_job_isValid = false;

    m_is_long_term_pricing_auto_renew_isSet = false;
    m_is_long_term_pricing_auto_renew_isValid = false;

    m_long_term_pricing_status_isSet = false;
    m_long_term_pricing_status_isValid = false;

    m_snowball_type_isSet = false;
    m_snowball_type_isValid = false;

    m_job_ids_isSet = false;
    m_job_ids_isValid = false;
}

void OAILongTermPricingListEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILongTermPricingListEntry::fromJsonObject(QJsonObject json) {

    m_long_term_pricing_id_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_id, json[QString("LongTermPricingId")]);
    m_long_term_pricing_id_isSet = !json[QString("LongTermPricingId")].isNull() && m_long_term_pricing_id_isValid;

    m_long_term_pricing_end_date_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_end_date, json[QString("LongTermPricingEndDate")]);
    m_long_term_pricing_end_date_isSet = !json[QString("LongTermPricingEndDate")].isNull() && m_long_term_pricing_end_date_isValid;

    m_long_term_pricing_start_date_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_start_date, json[QString("LongTermPricingStartDate")]);
    m_long_term_pricing_start_date_isSet = !json[QString("LongTermPricingStartDate")].isNull() && m_long_term_pricing_start_date_isValid;

    m_long_term_pricing_type_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_type, json[QString("LongTermPricingType")]);
    m_long_term_pricing_type_isSet = !json[QString("LongTermPricingType")].isNull() && m_long_term_pricing_type_isValid;

    m_current_active_job_isValid = ::OpenAPI::fromJsonValue(m_current_active_job, json[QString("CurrentActiveJob")]);
    m_current_active_job_isSet = !json[QString("CurrentActiveJob")].isNull() && m_current_active_job_isValid;

    m_replacement_job_isValid = ::OpenAPI::fromJsonValue(m_replacement_job, json[QString("ReplacementJob")]);
    m_replacement_job_isSet = !json[QString("ReplacementJob")].isNull() && m_replacement_job_isValid;

    m_is_long_term_pricing_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_is_long_term_pricing_auto_renew, json[QString("IsLongTermPricingAutoRenew")]);
    m_is_long_term_pricing_auto_renew_isSet = !json[QString("IsLongTermPricingAutoRenew")].isNull() && m_is_long_term_pricing_auto_renew_isValid;

    m_long_term_pricing_status_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_status, json[QString("LongTermPricingStatus")]);
    m_long_term_pricing_status_isSet = !json[QString("LongTermPricingStatus")].isNull() && m_long_term_pricing_status_isValid;

    m_snowball_type_isValid = ::OpenAPI::fromJsonValue(m_snowball_type, json[QString("SnowballType")]);
    m_snowball_type_isSet = !json[QString("SnowballType")].isNull() && m_snowball_type_isValid;

    m_job_ids_isValid = ::OpenAPI::fromJsonValue(m_job_ids, json[QString("JobIds")]);
    m_job_ids_isSet = !json[QString("JobIds")].isNull() && m_job_ids_isValid;
}

QString OAILongTermPricingListEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILongTermPricingListEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_long_term_pricing_id_isSet) {
        obj.insert(QString("LongTermPricingId"), ::OpenAPI::toJsonValue(m_long_term_pricing_id));
    }
    if (m_long_term_pricing_end_date_isSet) {
        obj.insert(QString("LongTermPricingEndDate"), ::OpenAPI::toJsonValue(m_long_term_pricing_end_date));
    }
    if (m_long_term_pricing_start_date_isSet) {
        obj.insert(QString("LongTermPricingStartDate"), ::OpenAPI::toJsonValue(m_long_term_pricing_start_date));
    }
    if (m_long_term_pricing_type.isSet()) {
        obj.insert(QString("LongTermPricingType"), ::OpenAPI::toJsonValue(m_long_term_pricing_type));
    }
    if (m_current_active_job_isSet) {
        obj.insert(QString("CurrentActiveJob"), ::OpenAPI::toJsonValue(m_current_active_job));
    }
    if (m_replacement_job_isSet) {
        obj.insert(QString("ReplacementJob"), ::OpenAPI::toJsonValue(m_replacement_job));
    }
    if (m_is_long_term_pricing_auto_renew_isSet) {
        obj.insert(QString("IsLongTermPricingAutoRenew"), ::OpenAPI::toJsonValue(m_is_long_term_pricing_auto_renew));
    }
    if (m_long_term_pricing_status_isSet) {
        obj.insert(QString("LongTermPricingStatus"), ::OpenAPI::toJsonValue(m_long_term_pricing_status));
    }
    if (m_snowball_type.isSet()) {
        obj.insert(QString("SnowballType"), ::OpenAPI::toJsonValue(m_snowball_type));
    }
    if (m_job_ids.isSet()) {
        obj.insert(QString("JobIds"), ::OpenAPI::toJsonValue(m_job_ids));
    }
    return obj;
}

QString OAILongTermPricingListEntry::getLongTermPricingId() const {
    return m_long_term_pricing_id;
}
void OAILongTermPricingListEntry::setLongTermPricingId(const QString &long_term_pricing_id) {
    m_long_term_pricing_id = long_term_pricing_id;
    m_long_term_pricing_id_isSet = true;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_id_Set() const{
    return m_long_term_pricing_id_isSet;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_id_Valid() const{
    return m_long_term_pricing_id_isValid;
}

QDateTime OAILongTermPricingListEntry::getLongTermPricingEndDate() const {
    return m_long_term_pricing_end_date;
}
void OAILongTermPricingListEntry::setLongTermPricingEndDate(const QDateTime &long_term_pricing_end_date) {
    m_long_term_pricing_end_date = long_term_pricing_end_date;
    m_long_term_pricing_end_date_isSet = true;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_end_date_Set() const{
    return m_long_term_pricing_end_date_isSet;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_end_date_Valid() const{
    return m_long_term_pricing_end_date_isValid;
}

QDateTime OAILongTermPricingListEntry::getLongTermPricingStartDate() const {
    return m_long_term_pricing_start_date;
}
void OAILongTermPricingListEntry::setLongTermPricingStartDate(const QDateTime &long_term_pricing_start_date) {
    m_long_term_pricing_start_date = long_term_pricing_start_date;
    m_long_term_pricing_start_date_isSet = true;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_start_date_Set() const{
    return m_long_term_pricing_start_date_isSet;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_start_date_Valid() const{
    return m_long_term_pricing_start_date_isValid;
}

OAILongTermPricingType OAILongTermPricingListEntry::getLongTermPricingType() const {
    return m_long_term_pricing_type;
}
void OAILongTermPricingListEntry::setLongTermPricingType(const OAILongTermPricingType &long_term_pricing_type) {
    m_long_term_pricing_type = long_term_pricing_type;
    m_long_term_pricing_type_isSet = true;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_type_Set() const{
    return m_long_term_pricing_type_isSet;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_type_Valid() const{
    return m_long_term_pricing_type_isValid;
}

QString OAILongTermPricingListEntry::getCurrentActiveJob() const {
    return m_current_active_job;
}
void OAILongTermPricingListEntry::setCurrentActiveJob(const QString &current_active_job) {
    m_current_active_job = current_active_job;
    m_current_active_job_isSet = true;
}

bool OAILongTermPricingListEntry::is_current_active_job_Set() const{
    return m_current_active_job_isSet;
}

bool OAILongTermPricingListEntry::is_current_active_job_Valid() const{
    return m_current_active_job_isValid;
}

QString OAILongTermPricingListEntry::getReplacementJob() const {
    return m_replacement_job;
}
void OAILongTermPricingListEntry::setReplacementJob(const QString &replacement_job) {
    m_replacement_job = replacement_job;
    m_replacement_job_isSet = true;
}

bool OAILongTermPricingListEntry::is_replacement_job_Set() const{
    return m_replacement_job_isSet;
}

bool OAILongTermPricingListEntry::is_replacement_job_Valid() const{
    return m_replacement_job_isValid;
}

bool OAILongTermPricingListEntry::getIsLongTermPricingAutoRenew() const {
    return m_is_long_term_pricing_auto_renew;
}
void OAILongTermPricingListEntry::setIsLongTermPricingAutoRenew(const bool &is_long_term_pricing_auto_renew) {
    m_is_long_term_pricing_auto_renew = is_long_term_pricing_auto_renew;
    m_is_long_term_pricing_auto_renew_isSet = true;
}

bool OAILongTermPricingListEntry::is_is_long_term_pricing_auto_renew_Set() const{
    return m_is_long_term_pricing_auto_renew_isSet;
}

bool OAILongTermPricingListEntry::is_is_long_term_pricing_auto_renew_Valid() const{
    return m_is_long_term_pricing_auto_renew_isValid;
}

QString OAILongTermPricingListEntry::getLongTermPricingStatus() const {
    return m_long_term_pricing_status;
}
void OAILongTermPricingListEntry::setLongTermPricingStatus(const QString &long_term_pricing_status) {
    m_long_term_pricing_status = long_term_pricing_status;
    m_long_term_pricing_status_isSet = true;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_status_Set() const{
    return m_long_term_pricing_status_isSet;
}

bool OAILongTermPricingListEntry::is_long_term_pricing_status_Valid() const{
    return m_long_term_pricing_status_isValid;
}

OAISnowballType OAILongTermPricingListEntry::getSnowballType() const {
    return m_snowball_type;
}
void OAILongTermPricingListEntry::setSnowballType(const OAISnowballType &snowball_type) {
    m_snowball_type = snowball_type;
    m_snowball_type_isSet = true;
}

bool OAILongTermPricingListEntry::is_snowball_type_Set() const{
    return m_snowball_type_isSet;
}

bool OAILongTermPricingListEntry::is_snowball_type_Valid() const{
    return m_snowball_type_isValid;
}

QList OAILongTermPricingListEntry::getJobIds() const {
    return m_job_ids;
}
void OAILongTermPricingListEntry::setJobIds(const QList &job_ids) {
    m_job_ids = job_ids;
    m_job_ids_isSet = true;
}

bool OAILongTermPricingListEntry::is_job_ids_Set() const{
    return m_job_ids_isSet;
}

bool OAILongTermPricingListEntry::is_job_ids_Valid() const{
    return m_job_ids_isValid;
}

bool OAILongTermPricingListEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_long_term_pricing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_pricing_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_pricing_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_pricing_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_active_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_long_term_pricing_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_pricing_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILongTermPricingListEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
