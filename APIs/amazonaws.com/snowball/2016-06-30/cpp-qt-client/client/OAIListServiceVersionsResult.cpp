/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListServiceVersionsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListServiceVersionsResult::OAIListServiceVersionsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListServiceVersionsResult::OAIListServiceVersionsResult() {
    this->initializeModel();
}

OAIListServiceVersionsResult::~OAIListServiceVersionsResult() {}

void OAIListServiceVersionsResult::initializeModel() {

    m_service_versions_isSet = false;
    m_service_versions_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_dependent_services_isSet = false;
    m_dependent_services_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListServiceVersionsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListServiceVersionsResult::fromJsonObject(QJsonObject json) {

    m_service_versions_isValid = ::OpenAPI::fromJsonValue(m_service_versions, json[QString("ServiceVersions")]);
    m_service_versions_isSet = !json[QString("ServiceVersions")].isNull() && m_service_versions_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_dependent_services_isValid = ::OpenAPI::fromJsonValue(m_dependent_services, json[QString("DependentServices")]);
    m_dependent_services_isSet = !json[QString("DependentServices")].isNull() && m_dependent_services_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListServiceVersionsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListServiceVersionsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_service_versions.isSet()) {
        obj.insert(QString("ServiceVersions"), ::OpenAPI::toJsonValue(m_service_versions));
    }
    if (m_service_name.isSet()) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_dependent_services.isSet()) {
        obj.insert(QString("DependentServices"), ::OpenAPI::toJsonValue(m_dependent_services));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListServiceVersionsResult::getServiceVersions() const {
    return m_service_versions;
}
void OAIListServiceVersionsResult::setServiceVersions(const QList &service_versions) {
    m_service_versions = service_versions;
    m_service_versions_isSet = true;
}

bool OAIListServiceVersionsResult::is_service_versions_Set() const{
    return m_service_versions_isSet;
}

bool OAIListServiceVersionsResult::is_service_versions_Valid() const{
    return m_service_versions_isValid;
}

OAIServiceName OAIListServiceVersionsResult::getServiceName() const {
    return m_service_name;
}
void OAIListServiceVersionsResult::setServiceName(const OAIServiceName &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIListServiceVersionsResult::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIListServiceVersionsResult::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QList OAIListServiceVersionsResult::getDependentServices() const {
    return m_dependent_services;
}
void OAIListServiceVersionsResult::setDependentServices(const QList &dependent_services) {
    m_dependent_services = dependent_services;
    m_dependent_services_isSet = true;
}

bool OAIListServiceVersionsResult::is_dependent_services_Set() const{
    return m_dependent_services_isSet;
}

bool OAIListServiceVersionsResult::is_dependent_services_Valid() const{
    return m_dependent_services_isValid;
}

QString OAIListServiceVersionsResult::getNextToken() const {
    return m_next_token;
}
void OAIListServiceVersionsResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListServiceVersionsResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListServiceVersionsResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListServiceVersionsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dependent_services.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListServiceVersionsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_versions_isValid && m_service_name_isValid && true;
}

} // namespace OpenAPI
