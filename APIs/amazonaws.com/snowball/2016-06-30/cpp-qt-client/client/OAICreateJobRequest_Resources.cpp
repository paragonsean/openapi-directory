/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJobRequest_Resources.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJobRequest_Resources::OAICreateJobRequest_Resources(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJobRequest_Resources::OAICreateJobRequest_Resources() {
    this->initializeModel();
}

OAICreateJobRequest_Resources::~OAICreateJobRequest_Resources() {}

void OAICreateJobRequest_Resources::initializeModel() {

    m_s3_resources_isSet = false;
    m_s3_resources_isValid = false;

    m_lambda_resources_isSet = false;
    m_lambda_resources_isValid = false;

    m_ec2_ami_resources_isSet = false;
    m_ec2_ami_resources_isValid = false;
}

void OAICreateJobRequest_Resources::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJobRequest_Resources::fromJsonObject(QJsonObject json) {

    m_s3_resources_isValid = ::OpenAPI::fromJsonValue(m_s3_resources, json[QString("S3Resources")]);
    m_s3_resources_isSet = !json[QString("S3Resources")].isNull() && m_s3_resources_isValid;

    m_lambda_resources_isValid = ::OpenAPI::fromJsonValue(m_lambda_resources, json[QString("LambdaResources")]);
    m_lambda_resources_isSet = !json[QString("LambdaResources")].isNull() && m_lambda_resources_isValid;

    m_ec2_ami_resources_isValid = ::OpenAPI::fromJsonValue(m_ec2_ami_resources, json[QString("Ec2AmiResources")]);
    m_ec2_ami_resources_isSet = !json[QString("Ec2AmiResources")].isNull() && m_ec2_ami_resources_isValid;
}

QString OAICreateJobRequest_Resources::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJobRequest_Resources::asJsonObject() const {
    QJsonObject obj;
    if (m_s3_resources.isSet()) {
        obj.insert(QString("S3Resources"), ::OpenAPI::toJsonValue(m_s3_resources));
    }
    if (m_lambda_resources.isSet()) {
        obj.insert(QString("LambdaResources"), ::OpenAPI::toJsonValue(m_lambda_resources));
    }
    if (m_ec2_ami_resources.isSet()) {
        obj.insert(QString("Ec2AmiResources"), ::OpenAPI::toJsonValue(m_ec2_ami_resources));
    }
    return obj;
}

QList OAICreateJobRequest_Resources::getS3Resources() const {
    return m_s3_resources;
}
void OAICreateJobRequest_Resources::setS3Resources(const QList &s3_resources) {
    m_s3_resources = s3_resources;
    m_s3_resources_isSet = true;
}

bool OAICreateJobRequest_Resources::is_s3_resources_Set() const{
    return m_s3_resources_isSet;
}

bool OAICreateJobRequest_Resources::is_s3_resources_Valid() const{
    return m_s3_resources_isValid;
}

QList OAICreateJobRequest_Resources::getLambdaResources() const {
    return m_lambda_resources;
}
void OAICreateJobRequest_Resources::setLambdaResources(const QList &lambda_resources) {
    m_lambda_resources = lambda_resources;
    m_lambda_resources_isSet = true;
}

bool OAICreateJobRequest_Resources::is_lambda_resources_Set() const{
    return m_lambda_resources_isSet;
}

bool OAICreateJobRequest_Resources::is_lambda_resources_Valid() const{
    return m_lambda_resources_isValid;
}

QList OAICreateJobRequest_Resources::getEc2AmiResources() const {
    return m_ec2_ami_resources;
}
void OAICreateJobRequest_Resources::setEc2AmiResources(const QList &ec2_ami_resources) {
    m_ec2_ami_resources = ec2_ami_resources;
    m_ec2_ami_resources_isSet = true;
}

bool OAICreateJobRequest_Resources::is_ec2_ami_resources_Set() const{
    return m_ec2_ami_resources_isSet;
}

bool OAICreateJobRequest_Resources::is_ec2_ami_resources_Valid() const{
    return m_ec2_ami_resources_isValid;
}

bool OAICreateJobRequest_Resources::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_s3_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lambda_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ec2_ami_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJobRequest_Resources::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
