/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobState::OAIJobState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobState::OAIJobState() {
    this->initializeModel();
}

OAIJobState::~OAIJobState() {}

void OAIJobState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIJobState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIJobState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("New", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::NEW;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreparingAppliance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::PREPARINGAPPLIANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PreparingShipment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::PREPARINGSHIPMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InTransitToCustomer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::INTRANSITTOCUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WithCustomer", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::WITHCUSTOMER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InTransitToAWS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::INTRANSITTOAWS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WithAWSSortingFacility", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::WITHAWSSORTINGFACILITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WithAWS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::WITHAWS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Complete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::COMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Listing", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::LISTING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIJobState::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIJobState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIJobState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIJobState::NEW:
            val = "New";
            break;
        case eOAIJobState::PREPARINGAPPLIANCE:
            val = "PreparingAppliance";
            break;
        case eOAIJobState::PREPARINGSHIPMENT:
            val = "PreparingShipment";
            break;
        case eOAIJobState::INTRANSITTOCUSTOMER:
            val = "InTransitToCustomer";
            break;
        case eOAIJobState::WITHCUSTOMER:
            val = "WithCustomer";
            break;
        case eOAIJobState::INTRANSITTOAWS:
            val = "InTransitToAWS";
            break;
        case eOAIJobState::WITHAWSSORTINGFACILITY:
            val = "WithAWSSortingFacility";
            break;
        case eOAIJobState::WITHAWS:
            val = "WithAWS";
            break;
        case eOAIJobState::INPROGRESS:
            val = "InProgress";
            break;
        case eOAIJobState::COMPLETE:
            val = "Complete";
            break;
        case eOAIJobState::CANCELLED:
            val = "Cancelled";
            break;
        case eOAIJobState::LISTING:
            val = "Listing";
            break;
        case eOAIJobState::PENDING:
            val = "Pending";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIJobState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIJobState::eOAIJobState OAIJobState::getValue() const {
    return m_value;
}

void OAIJobState::setValue(const OAIJobState::eOAIJobState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIJobState::isSet() const {
    
    return m_value_isSet;
}

bool OAIJobState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
