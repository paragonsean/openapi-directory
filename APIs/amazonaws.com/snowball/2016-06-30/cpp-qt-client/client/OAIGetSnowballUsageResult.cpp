/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSnowballUsageResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSnowballUsageResult::OAIGetSnowballUsageResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSnowballUsageResult::OAIGetSnowballUsageResult() {
    this->initializeModel();
}

OAIGetSnowballUsageResult::~OAIGetSnowballUsageResult() {}

void OAIGetSnowballUsageResult::initializeModel() {

    m_snowball_limit_isSet = false;
    m_snowball_limit_isValid = false;

    m_snowballs_in_use_isSet = false;
    m_snowballs_in_use_isValid = false;
}

void OAIGetSnowballUsageResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSnowballUsageResult::fromJsonObject(QJsonObject json) {

    m_snowball_limit_isValid = ::OpenAPI::fromJsonValue(m_snowball_limit, json[QString("SnowballLimit")]);
    m_snowball_limit_isSet = !json[QString("SnowballLimit")].isNull() && m_snowball_limit_isValid;

    m_snowballs_in_use_isValid = ::OpenAPI::fromJsonValue(m_snowballs_in_use, json[QString("SnowballsInUse")]);
    m_snowballs_in_use_isSet = !json[QString("SnowballsInUse")].isNull() && m_snowballs_in_use_isValid;
}

QString OAIGetSnowballUsageResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSnowballUsageResult::asJsonObject() const {
    QJsonObject obj;
    if (m_snowball_limit_isSet) {
        obj.insert(QString("SnowballLimit"), ::OpenAPI::toJsonValue(m_snowball_limit));
    }
    if (m_snowballs_in_use_isSet) {
        obj.insert(QString("SnowballsInUse"), ::OpenAPI::toJsonValue(m_snowballs_in_use));
    }
    return obj;
}

qint32 OAIGetSnowballUsageResult::getSnowballLimit() const {
    return m_snowball_limit;
}
void OAIGetSnowballUsageResult::setSnowballLimit(const qint32 &snowball_limit) {
    m_snowball_limit = snowball_limit;
    m_snowball_limit_isSet = true;
}

bool OAIGetSnowballUsageResult::is_snowball_limit_Set() const{
    return m_snowball_limit_isSet;
}

bool OAIGetSnowballUsageResult::is_snowball_limit_Valid() const{
    return m_snowball_limit_isValid;
}

qint32 OAIGetSnowballUsageResult::getSnowballsInUse() const {
    return m_snowballs_in_use;
}
void OAIGetSnowballUsageResult::setSnowballsInUse(const qint32 &snowballs_in_use) {
    m_snowballs_in_use = snowballs_in_use;
    m_snowballs_in_use_isSet = true;
}

bool OAIGetSnowballUsageResult::is_snowballs_in_use_Set() const{
    return m_snowballs_in_use_isSet;
}

bool OAIGetSnowballUsageResult::is_snowballs_in_use_Valid() const{
    return m_snowballs_in_use_isValid;
}

bool OAIGetSnowballUsageResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_snowball_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowballs_in_use_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSnowballUsageResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
