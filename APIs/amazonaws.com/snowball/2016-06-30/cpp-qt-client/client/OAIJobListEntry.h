/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobListEntry.h
 *
 * Each &lt;code&gt;JobListEntry&lt;/code&gt; object contains a job&#39;s state, a job&#39;s ID, and a value that indicates whether the job is a job part, in the case of an export job.
 */

#ifndef OAIJobListEntry_H
#define OAIJobListEntry_H

#include <QJsonObject>

#include "OAIJobState.h"
#include "OAIJobType.h"
#include "OAISnowballType.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIJobListEntry : public OAIObject {
public:
    OAIJobListEntry();
    OAIJobListEntry(QString json);
    ~OAIJobListEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getJobId() const;
    void setJobId(const QString &job_id);
    bool is_job_id_Set() const;
    bool is_job_id_Valid() const;

    OAIJobState getJobState() const;
    void setJobState(const OAIJobState &job_state);
    bool is_job_state_Set() const;
    bool is_job_state_Valid() const;

    bool getIsMaster() const;
    void setIsMaster(const bool &is_master);
    bool is_is_master_Set() const;
    bool is_is_master_Valid() const;

    OAIJobType getJobType() const;
    void setJobType(const OAIJobType &job_type);
    bool is_job_type_Set() const;
    bool is_job_type_Valid() const;

    OAISnowballType getSnowballType() const;
    void setSnowballType(const OAISnowballType &snowball_type);
    bool is_snowball_type_Set() const;
    bool is_snowball_type_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_job_id;
    bool m_job_id_isSet;
    bool m_job_id_isValid;

    OAIJobState m_job_state;
    bool m_job_state_isSet;
    bool m_job_state_isValid;

    bool m_is_master;
    bool m_is_master_isSet;
    bool m_is_master_isValid;

    OAIJobType m_job_type;
    bool m_job_type_isSet;
    bool m_job_type_isValid;

    OAISnowballType m_snowball_type;
    bool m_snowball_type_isSet;
    bool m_snowball_type_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobListEntry)

#endif // OAIJobListEntry_H
