/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDependentService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDependentService::OAIDependentService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDependentService::OAIDependentService() {
    this->initializeModel();
}

OAIDependentService::~OAIDependentService() {}

void OAIDependentService::initializeModel() {

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_service_version_isSet = false;
    m_service_version_isValid = false;
}

void OAIDependentService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDependentService::fromJsonObject(QJsonObject json) {

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("ServiceName")]);
    m_service_name_isSet = !json[QString("ServiceName")].isNull() && m_service_name_isValid;

    m_service_version_isValid = ::OpenAPI::fromJsonValue(m_service_version, json[QString("ServiceVersion")]);
    m_service_version_isSet = !json[QString("ServiceVersion")].isNull() && m_service_version_isValid;
}

QString OAIDependentService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDependentService::asJsonObject() const {
    QJsonObject obj;
    if (m_service_name.isSet()) {
        obj.insert(QString("ServiceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_service_version.isSet()) {
        obj.insert(QString("ServiceVersion"), ::OpenAPI::toJsonValue(m_service_version));
    }
    return obj;
}

OAIServiceName OAIDependentService::getServiceName() const {
    return m_service_name;
}
void OAIDependentService::setServiceName(const OAIServiceName &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIDependentService::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIDependentService::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIDependentService_ServiceVersion OAIDependentService::getServiceVersion() const {
    return m_service_version;
}
void OAIDependentService::setServiceVersion(const OAIDependentService_ServiceVersion &service_version) {
    m_service_version = service_version;
    m_service_version_isSet = true;
}

bool OAIDependentService::is_service_version_Set() const{
    return m_service_version_isSet;
}

bool OAIDependentService::is_service_version_Valid() const{
    return m_service_version_isValid;
}

bool OAIDependentService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDependentService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
