/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateClusterRequest::OAICreateClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateClusterRequest::OAICreateClusterRequest() {
    this->initializeModel();
}

OAICreateClusterRequest::~OAICreateClusterRequest() {}

void OAICreateClusterRequest::initializeModel() {

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_on_device_service_configuration_isSet = false;
    m_on_device_service_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_snowball_type_isSet = false;
    m_snowball_type_isValid = false;

    m_shipping_option_isSet = false;
    m_shipping_option_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_forwarding_address_id_isSet = false;
    m_forwarding_address_id_isValid = false;

    m_tax_documents_isSet = false;
    m_tax_documents_isValid = false;

    m_remote_management_isSet = false;
    m_remote_management_isValid = false;

    m_initial_cluster_size_isSet = false;
    m_initial_cluster_size_isValid = false;

    m_force_create_jobs_isSet = false;
    m_force_create_jobs_isValid = false;

    m_long_term_pricing_ids_isSet = false;
    m_long_term_pricing_ids_isValid = false;

    m_snowball_capacity_preference_isSet = false;
    m_snowball_capacity_preference_isValid = false;
}

void OAICreateClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateClusterRequest::fromJsonObject(QJsonObject json) {

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_on_device_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_on_device_service_configuration, json[QString("OnDeviceServiceConfiguration")]);
    m_on_device_service_configuration_isSet = !json[QString("OnDeviceServiceConfiguration")].isNull() && m_on_device_service_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("AddressId")]);
    m_address_id_isSet = !json[QString("AddressId")].isNull() && m_address_id_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyARN")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyARN")].isNull() && m_kms_key_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_snowball_type_isValid = ::OpenAPI::fromJsonValue(m_snowball_type, json[QString("SnowballType")]);
    m_snowball_type_isSet = !json[QString("SnowballType")].isNull() && m_snowball_type_isValid;

    m_shipping_option_isValid = ::OpenAPI::fromJsonValue(m_shipping_option, json[QString("ShippingOption")]);
    m_shipping_option_isSet = !json[QString("ShippingOption")].isNull() && m_shipping_option_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("Notification")]);
    m_notification_isSet = !json[QString("Notification")].isNull() && m_notification_isValid;

    m_forwarding_address_id_isValid = ::OpenAPI::fromJsonValue(m_forwarding_address_id, json[QString("ForwardingAddressId")]);
    m_forwarding_address_id_isSet = !json[QString("ForwardingAddressId")].isNull() && m_forwarding_address_id_isValid;

    m_tax_documents_isValid = ::OpenAPI::fromJsonValue(m_tax_documents, json[QString("TaxDocuments")]);
    m_tax_documents_isSet = !json[QString("TaxDocuments")].isNull() && m_tax_documents_isValid;

    m_remote_management_isValid = ::OpenAPI::fromJsonValue(m_remote_management, json[QString("RemoteManagement")]);
    m_remote_management_isSet = !json[QString("RemoteManagement")].isNull() && m_remote_management_isValid;

    m_initial_cluster_size_isValid = ::OpenAPI::fromJsonValue(m_initial_cluster_size, json[QString("InitialClusterSize")]);
    m_initial_cluster_size_isSet = !json[QString("InitialClusterSize")].isNull() && m_initial_cluster_size_isValid;

    m_force_create_jobs_isValid = ::OpenAPI::fromJsonValue(m_force_create_jobs, json[QString("ForceCreateJobs")]);
    m_force_create_jobs_isSet = !json[QString("ForceCreateJobs")].isNull() && m_force_create_jobs_isValid;

    m_long_term_pricing_ids_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_ids, json[QString("LongTermPricingIds")]);
    m_long_term_pricing_ids_isSet = !json[QString("LongTermPricingIds")].isNull() && m_long_term_pricing_ids_isValid;

    m_snowball_capacity_preference_isValid = ::OpenAPI::fromJsonValue(m_snowball_capacity_preference, json[QString("SnowballCapacityPreference")]);
    m_snowball_capacity_preference_isSet = !json[QString("SnowballCapacityPreference")].isNull() && m_snowball_capacity_preference_isValid;
}

QString OAICreateClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_on_device_service_configuration.isSet()) {
        obj.insert(QString("OnDeviceServiceConfiguration"), ::OpenAPI::toJsonValue(m_on_device_service_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_address_id_isSet) {
        obj.insert(QString("AddressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyARN"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_snowball_type.isSet()) {
        obj.insert(QString("SnowballType"), ::OpenAPI::toJsonValue(m_snowball_type));
    }
    if (m_shipping_option.isSet()) {
        obj.insert(QString("ShippingOption"), ::OpenAPI::toJsonValue(m_shipping_option));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("Notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_forwarding_address_id_isSet) {
        obj.insert(QString("ForwardingAddressId"), ::OpenAPI::toJsonValue(m_forwarding_address_id));
    }
    if (m_tax_documents.isSet()) {
        obj.insert(QString("TaxDocuments"), ::OpenAPI::toJsonValue(m_tax_documents));
    }
    if (m_remote_management.isSet()) {
        obj.insert(QString("RemoteManagement"), ::OpenAPI::toJsonValue(m_remote_management));
    }
    if (m_initial_cluster_size_isSet) {
        obj.insert(QString("InitialClusterSize"), ::OpenAPI::toJsonValue(m_initial_cluster_size));
    }
    if (m_force_create_jobs_isSet) {
        obj.insert(QString("ForceCreateJobs"), ::OpenAPI::toJsonValue(m_force_create_jobs));
    }
    if (m_long_term_pricing_ids.isSet()) {
        obj.insert(QString("LongTermPricingIds"), ::OpenAPI::toJsonValue(m_long_term_pricing_ids));
    }
    if (m_snowball_capacity_preference.isSet()) {
        obj.insert(QString("SnowballCapacityPreference"), ::OpenAPI::toJsonValue(m_snowball_capacity_preference));
    }
    return obj;
}

OAIJobType OAICreateClusterRequest::getJobType() const {
    return m_job_type;
}
void OAICreateClusterRequest::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAICreateClusterRequest::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAICreateClusterRequest::is_job_type_Valid() const{
    return m_job_type_isValid;
}

OAICreateClusterRequest_Resources OAICreateClusterRequest::getResources() const {
    return m_resources;
}
void OAICreateClusterRequest::setResources(const OAICreateClusterRequest_Resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAICreateClusterRequest::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAICreateClusterRequest::is_resources_Valid() const{
    return m_resources_isValid;
}

OAICreateClusterRequest_OnDeviceServiceConfiguration OAICreateClusterRequest::getOnDeviceServiceConfiguration() const {
    return m_on_device_service_configuration;
}
void OAICreateClusterRequest::setOnDeviceServiceConfiguration(const OAICreateClusterRequest_OnDeviceServiceConfiguration &on_device_service_configuration) {
    m_on_device_service_configuration = on_device_service_configuration;
    m_on_device_service_configuration_isSet = true;
}

bool OAICreateClusterRequest::is_on_device_service_configuration_Set() const{
    return m_on_device_service_configuration_isSet;
}

bool OAICreateClusterRequest::is_on_device_service_configuration_Valid() const{
    return m_on_device_service_configuration_isValid;
}

QString OAICreateClusterRequest::getDescription() const {
    return m_description;
}
void OAICreateClusterRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateClusterRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateClusterRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateClusterRequest::getAddressId() const {
    return m_address_id;
}
void OAICreateClusterRequest::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAICreateClusterRequest::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAICreateClusterRequest::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAICreateClusterRequest::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAICreateClusterRequest::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAICreateClusterRequest::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAICreateClusterRequest::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAICreateClusterRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateClusterRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateClusterRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateClusterRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAISnowballType OAICreateClusterRequest::getSnowballType() const {
    return m_snowball_type;
}
void OAICreateClusterRequest::setSnowballType(const OAISnowballType &snowball_type) {
    m_snowball_type = snowball_type;
    m_snowball_type_isSet = true;
}

bool OAICreateClusterRequest::is_snowball_type_Set() const{
    return m_snowball_type_isSet;
}

bool OAICreateClusterRequest::is_snowball_type_Valid() const{
    return m_snowball_type_isValid;
}

OAIShippingOption OAICreateClusterRequest::getShippingOption() const {
    return m_shipping_option;
}
void OAICreateClusterRequest::setShippingOption(const OAIShippingOption &shipping_option) {
    m_shipping_option = shipping_option;
    m_shipping_option_isSet = true;
}

bool OAICreateClusterRequest::is_shipping_option_Set() const{
    return m_shipping_option_isSet;
}

bool OAICreateClusterRequest::is_shipping_option_Valid() const{
    return m_shipping_option_isValid;
}

OAICreateClusterRequest_Notification OAICreateClusterRequest::getNotification() const {
    return m_notification;
}
void OAICreateClusterRequest::setNotification(const OAICreateClusterRequest_Notification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAICreateClusterRequest::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAICreateClusterRequest::is_notification_Valid() const{
    return m_notification_isValid;
}

QString OAICreateClusterRequest::getForwardingAddressId() const {
    return m_forwarding_address_id;
}
void OAICreateClusterRequest::setForwardingAddressId(const QString &forwarding_address_id) {
    m_forwarding_address_id = forwarding_address_id;
    m_forwarding_address_id_isSet = true;
}

bool OAICreateClusterRequest::is_forwarding_address_id_Set() const{
    return m_forwarding_address_id_isSet;
}

bool OAICreateClusterRequest::is_forwarding_address_id_Valid() const{
    return m_forwarding_address_id_isValid;
}

OAICreateClusterRequest_TaxDocuments OAICreateClusterRequest::getTaxDocuments() const {
    return m_tax_documents;
}
void OAICreateClusterRequest::setTaxDocuments(const OAICreateClusterRequest_TaxDocuments &tax_documents) {
    m_tax_documents = tax_documents;
    m_tax_documents_isSet = true;
}

bool OAICreateClusterRequest::is_tax_documents_Set() const{
    return m_tax_documents_isSet;
}

bool OAICreateClusterRequest::is_tax_documents_Valid() const{
    return m_tax_documents_isValid;
}

OAIRemoteManagement OAICreateClusterRequest::getRemoteManagement() const {
    return m_remote_management;
}
void OAICreateClusterRequest::setRemoteManagement(const OAIRemoteManagement &remote_management) {
    m_remote_management = remote_management;
    m_remote_management_isSet = true;
}

bool OAICreateClusterRequest::is_remote_management_Set() const{
    return m_remote_management_isSet;
}

bool OAICreateClusterRequest::is_remote_management_Valid() const{
    return m_remote_management_isValid;
}

qint32 OAICreateClusterRequest::getInitialClusterSize() const {
    return m_initial_cluster_size;
}
void OAICreateClusterRequest::setInitialClusterSize(const qint32 &initial_cluster_size) {
    m_initial_cluster_size = initial_cluster_size;
    m_initial_cluster_size_isSet = true;
}

bool OAICreateClusterRequest::is_initial_cluster_size_Set() const{
    return m_initial_cluster_size_isSet;
}

bool OAICreateClusterRequest::is_initial_cluster_size_Valid() const{
    return m_initial_cluster_size_isValid;
}

bool OAICreateClusterRequest::getForceCreateJobs() const {
    return m_force_create_jobs;
}
void OAICreateClusterRequest::setForceCreateJobs(const bool &force_create_jobs) {
    m_force_create_jobs = force_create_jobs;
    m_force_create_jobs_isSet = true;
}

bool OAICreateClusterRequest::is_force_create_jobs_Set() const{
    return m_force_create_jobs_isSet;
}

bool OAICreateClusterRequest::is_force_create_jobs_Valid() const{
    return m_force_create_jobs_isValid;
}

QList OAICreateClusterRequest::getLongTermPricingIds() const {
    return m_long_term_pricing_ids;
}
void OAICreateClusterRequest::setLongTermPricingIds(const QList &long_term_pricing_ids) {
    m_long_term_pricing_ids = long_term_pricing_ids;
    m_long_term_pricing_ids_isSet = true;
}

bool OAICreateClusterRequest::is_long_term_pricing_ids_Set() const{
    return m_long_term_pricing_ids_isSet;
}

bool OAICreateClusterRequest::is_long_term_pricing_ids_Valid() const{
    return m_long_term_pricing_ids_isValid;
}

OAISnowballCapacity OAICreateClusterRequest::getSnowballCapacityPreference() const {
    return m_snowball_capacity_preference;
}
void OAICreateClusterRequest::setSnowballCapacityPreference(const OAISnowballCapacity &snowball_capacity_preference) {
    m_snowball_capacity_preference = snowball_capacity_preference;
    m_snowball_capacity_preference_isSet = true;
}

bool OAICreateClusterRequest::is_snowball_capacity_preference_Set() const{
    return m_snowball_capacity_preference_isSet;
}

bool OAICreateClusterRequest::is_snowball_capacity_preference_Valid() const{
    return m_snowball_capacity_preference_isValid;
}

bool OAICreateClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_device_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_management.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_cluster_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_create_jobs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_pricing_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_capacity_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_type_isValid && m_address_id_isValid && m_snowball_type_isValid && m_shipping_option_isValid && true;
}

} // namespace OpenAPI
