/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobMetadata_Notification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobMetadata_Notification::OAIJobMetadata_Notification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobMetadata_Notification::OAIJobMetadata_Notification() {
    this->initializeModel();
}

OAIJobMetadata_Notification::~OAIJobMetadata_Notification() {}

void OAIJobMetadata_Notification::initializeModel() {

    m_sns_topic_arn_isSet = false;
    m_sns_topic_arn_isValid = false;

    m_job_states_to_notify_isSet = false;
    m_job_states_to_notify_isValid = false;

    m_notify_all_isSet = false;
    m_notify_all_isValid = false;

    m_device_pickup_sns_topic_arn_isSet = false;
    m_device_pickup_sns_topic_arn_isValid = false;
}

void OAIJobMetadata_Notification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobMetadata_Notification::fromJsonObject(QJsonObject json) {

    m_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_sns_topic_arn, json[QString("SnsTopicARN")]);
    m_sns_topic_arn_isSet = !json[QString("SnsTopicARN")].isNull() && m_sns_topic_arn_isValid;

    m_job_states_to_notify_isValid = ::OpenAPI::fromJsonValue(m_job_states_to_notify, json[QString("JobStatesToNotify")]);
    m_job_states_to_notify_isSet = !json[QString("JobStatesToNotify")].isNull() && m_job_states_to_notify_isValid;

    m_notify_all_isValid = ::OpenAPI::fromJsonValue(m_notify_all, json[QString("NotifyAll")]);
    m_notify_all_isSet = !json[QString("NotifyAll")].isNull() && m_notify_all_isValid;

    m_device_pickup_sns_topic_arn_isValid = ::OpenAPI::fromJsonValue(m_device_pickup_sns_topic_arn, json[QString("DevicePickupSnsTopicARN")]);
    m_device_pickup_sns_topic_arn_isSet = !json[QString("DevicePickupSnsTopicARN")].isNull() && m_device_pickup_sns_topic_arn_isValid;
}

QString OAIJobMetadata_Notification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobMetadata_Notification::asJsonObject() const {
    QJsonObject obj;
    if (m_sns_topic_arn_isSet) {
        obj.insert(QString("SnsTopicARN"), ::OpenAPI::toJsonValue(m_sns_topic_arn));
    }
    if (m_job_states_to_notify.isSet()) {
        obj.insert(QString("JobStatesToNotify"), ::OpenAPI::toJsonValue(m_job_states_to_notify));
    }
    if (m_notify_all_isSet) {
        obj.insert(QString("NotifyAll"), ::OpenAPI::toJsonValue(m_notify_all));
    }
    if (m_device_pickup_sns_topic_arn_isSet) {
        obj.insert(QString("DevicePickupSnsTopicARN"), ::OpenAPI::toJsonValue(m_device_pickup_sns_topic_arn));
    }
    return obj;
}

QString OAIJobMetadata_Notification::getSnsTopicArn() const {
    return m_sns_topic_arn;
}
void OAIJobMetadata_Notification::setSnsTopicArn(const QString &sns_topic_arn) {
    m_sns_topic_arn = sns_topic_arn;
    m_sns_topic_arn_isSet = true;
}

bool OAIJobMetadata_Notification::is_sns_topic_arn_Set() const{
    return m_sns_topic_arn_isSet;
}

bool OAIJobMetadata_Notification::is_sns_topic_arn_Valid() const{
    return m_sns_topic_arn_isValid;
}

QList OAIJobMetadata_Notification::getJobStatesToNotify() const {
    return m_job_states_to_notify;
}
void OAIJobMetadata_Notification::setJobStatesToNotify(const QList &job_states_to_notify) {
    m_job_states_to_notify = job_states_to_notify;
    m_job_states_to_notify_isSet = true;
}

bool OAIJobMetadata_Notification::is_job_states_to_notify_Set() const{
    return m_job_states_to_notify_isSet;
}

bool OAIJobMetadata_Notification::is_job_states_to_notify_Valid() const{
    return m_job_states_to_notify_isValid;
}

bool OAIJobMetadata_Notification::getNotifyAll() const {
    return m_notify_all;
}
void OAIJobMetadata_Notification::setNotifyAll(const bool &notify_all) {
    m_notify_all = notify_all;
    m_notify_all_isSet = true;
}

bool OAIJobMetadata_Notification::is_notify_all_Set() const{
    return m_notify_all_isSet;
}

bool OAIJobMetadata_Notification::is_notify_all_Valid() const{
    return m_notify_all_isValid;
}

QString OAIJobMetadata_Notification::getDevicePickupSnsTopicArn() const {
    return m_device_pickup_sns_topic_arn;
}
void OAIJobMetadata_Notification::setDevicePickupSnsTopicArn(const QString &device_pickup_sns_topic_arn) {
    m_device_pickup_sns_topic_arn = device_pickup_sns_topic_arn;
    m_device_pickup_sns_topic_arn_isSet = true;
}

bool OAIJobMetadata_Notification::is_device_pickup_sns_topic_arn_Set() const{
    return m_device_pickup_sns_topic_arn_isSet;
}

bool OAIJobMetadata_Notification::is_device_pickup_sns_topic_arn_Valid() const{
    return m_device_pickup_sns_topic_arn_isValid;
}

bool OAIJobMetadata_Notification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_states_to_notify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_all_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_pickup_sns_topic_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobMetadata_Notification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
