/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateLongTermPricingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateLongTermPricingRequest::OAIUpdateLongTermPricingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateLongTermPricingRequest::OAIUpdateLongTermPricingRequest() {
    this->initializeModel();
}

OAIUpdateLongTermPricingRequest::~OAIUpdateLongTermPricingRequest() {}

void OAIUpdateLongTermPricingRequest::initializeModel() {

    m_long_term_pricing_id_isSet = false;
    m_long_term_pricing_id_isValid = false;

    m_replacement_job_isSet = false;
    m_replacement_job_isValid = false;

    m_is_long_term_pricing_auto_renew_isSet = false;
    m_is_long_term_pricing_auto_renew_isValid = false;
}

void OAIUpdateLongTermPricingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateLongTermPricingRequest::fromJsonObject(QJsonObject json) {

    m_long_term_pricing_id_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_id, json[QString("LongTermPricingId")]);
    m_long_term_pricing_id_isSet = !json[QString("LongTermPricingId")].isNull() && m_long_term_pricing_id_isValid;

    m_replacement_job_isValid = ::OpenAPI::fromJsonValue(m_replacement_job, json[QString("ReplacementJob")]);
    m_replacement_job_isSet = !json[QString("ReplacementJob")].isNull() && m_replacement_job_isValid;

    m_is_long_term_pricing_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_is_long_term_pricing_auto_renew, json[QString("IsLongTermPricingAutoRenew")]);
    m_is_long_term_pricing_auto_renew_isSet = !json[QString("IsLongTermPricingAutoRenew")].isNull() && m_is_long_term_pricing_auto_renew_isValid;
}

QString OAIUpdateLongTermPricingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateLongTermPricingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_long_term_pricing_id_isSet) {
        obj.insert(QString("LongTermPricingId"), ::OpenAPI::toJsonValue(m_long_term_pricing_id));
    }
    if (m_replacement_job_isSet) {
        obj.insert(QString("ReplacementJob"), ::OpenAPI::toJsonValue(m_replacement_job));
    }
    if (m_is_long_term_pricing_auto_renew_isSet) {
        obj.insert(QString("IsLongTermPricingAutoRenew"), ::OpenAPI::toJsonValue(m_is_long_term_pricing_auto_renew));
    }
    return obj;
}

QString OAIUpdateLongTermPricingRequest::getLongTermPricingId() const {
    return m_long_term_pricing_id;
}
void OAIUpdateLongTermPricingRequest::setLongTermPricingId(const QString &long_term_pricing_id) {
    m_long_term_pricing_id = long_term_pricing_id;
    m_long_term_pricing_id_isSet = true;
}

bool OAIUpdateLongTermPricingRequest::is_long_term_pricing_id_Set() const{
    return m_long_term_pricing_id_isSet;
}

bool OAIUpdateLongTermPricingRequest::is_long_term_pricing_id_Valid() const{
    return m_long_term_pricing_id_isValid;
}

QString OAIUpdateLongTermPricingRequest::getReplacementJob() const {
    return m_replacement_job;
}
void OAIUpdateLongTermPricingRequest::setReplacementJob(const QString &replacement_job) {
    m_replacement_job = replacement_job;
    m_replacement_job_isSet = true;
}

bool OAIUpdateLongTermPricingRequest::is_replacement_job_Set() const{
    return m_replacement_job_isSet;
}

bool OAIUpdateLongTermPricingRequest::is_replacement_job_Valid() const{
    return m_replacement_job_isValid;
}

bool OAIUpdateLongTermPricingRequest::getIsLongTermPricingAutoRenew() const {
    return m_is_long_term_pricing_auto_renew;
}
void OAIUpdateLongTermPricingRequest::setIsLongTermPricingAutoRenew(const bool &is_long_term_pricing_auto_renew) {
    m_is_long_term_pricing_auto_renew = is_long_term_pricing_auto_renew;
    m_is_long_term_pricing_auto_renew_isSet = true;
}

bool OAIUpdateLongTermPricingRequest::is_is_long_term_pricing_auto_renew_Set() const{
    return m_is_long_term_pricing_auto_renew_isSet;
}

bool OAIUpdateLongTermPricingRequest::is_is_long_term_pricing_auto_renew_Valid() const{
    return m_is_long_term_pricing_auto_renew_isValid;
}

bool OAIUpdateLongTermPricingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_long_term_pricing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replacement_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_long_term_pricing_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateLongTermPricingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_long_term_pricing_id_isValid && true;
}

} // namespace OpenAPI
