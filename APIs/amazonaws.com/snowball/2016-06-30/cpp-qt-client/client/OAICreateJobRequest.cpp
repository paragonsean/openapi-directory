/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJobRequest::OAICreateJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJobRequest::OAICreateJobRequest() {
    this->initializeModel();
}

OAICreateJobRequest::~OAICreateJobRequest() {}

void OAICreateJobRequest::initializeModel() {

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_on_device_service_configuration_isSet = false;
    m_on_device_service_configuration_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_snowball_capacity_preference_isSet = false;
    m_snowball_capacity_preference_isValid = false;

    m_shipping_option_isSet = false;
    m_shipping_option_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_snowball_type_isSet = false;
    m_snowball_type_isValid = false;

    m_forwarding_address_id_isSet = false;
    m_forwarding_address_id_isValid = false;

    m_tax_documents_isSet = false;
    m_tax_documents_isValid = false;

    m_device_configuration_isSet = false;
    m_device_configuration_isValid = false;

    m_remote_management_isSet = false;
    m_remote_management_isValid = false;

    m_long_term_pricing_id_isSet = false;
    m_long_term_pricing_id_isValid = false;

    m_impact_level_isSet = false;
    m_impact_level_isValid = false;

    m_pickup_details_isSet = false;
    m_pickup_details_isValid = false;
}

void OAICreateJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJobRequest::fromJsonObject(QJsonObject json) {

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_on_device_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_on_device_service_configuration, json[QString("OnDeviceServiceConfiguration")]);
    m_on_device_service_configuration_isSet = !json[QString("OnDeviceServiceConfiguration")].isNull() && m_on_device_service_configuration_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("AddressId")]);
    m_address_id_isSet = !json[QString("AddressId")].isNull() && m_address_id_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyARN")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyARN")].isNull() && m_kms_key_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_snowball_capacity_preference_isValid = ::OpenAPI::fromJsonValue(m_snowball_capacity_preference, json[QString("SnowballCapacityPreference")]);
    m_snowball_capacity_preference_isSet = !json[QString("SnowballCapacityPreference")].isNull() && m_snowball_capacity_preference_isValid;

    m_shipping_option_isValid = ::OpenAPI::fromJsonValue(m_shipping_option, json[QString("ShippingOption")]);
    m_shipping_option_isSet = !json[QString("ShippingOption")].isNull() && m_shipping_option_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("Notification")]);
    m_notification_isSet = !json[QString("Notification")].isNull() && m_notification_isValid;

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("ClusterId")]);
    m_cluster_id_isSet = !json[QString("ClusterId")].isNull() && m_cluster_id_isValid;

    m_snowball_type_isValid = ::OpenAPI::fromJsonValue(m_snowball_type, json[QString("SnowballType")]);
    m_snowball_type_isSet = !json[QString("SnowballType")].isNull() && m_snowball_type_isValid;

    m_forwarding_address_id_isValid = ::OpenAPI::fromJsonValue(m_forwarding_address_id, json[QString("ForwardingAddressId")]);
    m_forwarding_address_id_isSet = !json[QString("ForwardingAddressId")].isNull() && m_forwarding_address_id_isValid;

    m_tax_documents_isValid = ::OpenAPI::fromJsonValue(m_tax_documents, json[QString("TaxDocuments")]);
    m_tax_documents_isSet = !json[QString("TaxDocuments")].isNull() && m_tax_documents_isValid;

    m_device_configuration_isValid = ::OpenAPI::fromJsonValue(m_device_configuration, json[QString("DeviceConfiguration")]);
    m_device_configuration_isSet = !json[QString("DeviceConfiguration")].isNull() && m_device_configuration_isValid;

    m_remote_management_isValid = ::OpenAPI::fromJsonValue(m_remote_management, json[QString("RemoteManagement")]);
    m_remote_management_isSet = !json[QString("RemoteManagement")].isNull() && m_remote_management_isValid;

    m_long_term_pricing_id_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_id, json[QString("LongTermPricingId")]);
    m_long_term_pricing_id_isSet = !json[QString("LongTermPricingId")].isNull() && m_long_term_pricing_id_isValid;

    m_impact_level_isValid = ::OpenAPI::fromJsonValue(m_impact_level, json[QString("ImpactLevel")]);
    m_impact_level_isSet = !json[QString("ImpactLevel")].isNull() && m_impact_level_isValid;

    m_pickup_details_isValid = ::OpenAPI::fromJsonValue(m_pickup_details, json[QString("PickupDetails")]);
    m_pickup_details_isSet = !json[QString("PickupDetails")].isNull() && m_pickup_details_isValid;
}

QString OAICreateJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_on_device_service_configuration.isSet()) {
        obj.insert(QString("OnDeviceServiceConfiguration"), ::OpenAPI::toJsonValue(m_on_device_service_configuration));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_address_id_isSet) {
        obj.insert(QString("AddressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyARN"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_snowball_capacity_preference.isSet()) {
        obj.insert(QString("SnowballCapacityPreference"), ::OpenAPI::toJsonValue(m_snowball_capacity_preference));
    }
    if (m_shipping_option.isSet()) {
        obj.insert(QString("ShippingOption"), ::OpenAPI::toJsonValue(m_shipping_option));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("Notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_cluster_id_isSet) {
        obj.insert(QString("ClusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_snowball_type.isSet()) {
        obj.insert(QString("SnowballType"), ::OpenAPI::toJsonValue(m_snowball_type));
    }
    if (m_forwarding_address_id_isSet) {
        obj.insert(QString("ForwardingAddressId"), ::OpenAPI::toJsonValue(m_forwarding_address_id));
    }
    if (m_tax_documents.isSet()) {
        obj.insert(QString("TaxDocuments"), ::OpenAPI::toJsonValue(m_tax_documents));
    }
    if (m_device_configuration.isSet()) {
        obj.insert(QString("DeviceConfiguration"), ::OpenAPI::toJsonValue(m_device_configuration));
    }
    if (m_remote_management.isSet()) {
        obj.insert(QString("RemoteManagement"), ::OpenAPI::toJsonValue(m_remote_management));
    }
    if (m_long_term_pricing_id_isSet) {
        obj.insert(QString("LongTermPricingId"), ::OpenAPI::toJsonValue(m_long_term_pricing_id));
    }
    if (m_impact_level.isSet()) {
        obj.insert(QString("ImpactLevel"), ::OpenAPI::toJsonValue(m_impact_level));
    }
    if (m_pickup_details.isSet()) {
        obj.insert(QString("PickupDetails"), ::OpenAPI::toJsonValue(m_pickup_details));
    }
    return obj;
}

OAIJobType OAICreateJobRequest::getJobType() const {
    return m_job_type;
}
void OAICreateJobRequest::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAICreateJobRequest::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAICreateJobRequest::is_job_type_Valid() const{
    return m_job_type_isValid;
}

OAICreateJobRequest_Resources OAICreateJobRequest::getResources() const {
    return m_resources;
}
void OAICreateJobRequest::setResources(const OAICreateJobRequest_Resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAICreateJobRequest::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAICreateJobRequest::is_resources_Valid() const{
    return m_resources_isValid;
}

OAICreateJobRequest_OnDeviceServiceConfiguration OAICreateJobRequest::getOnDeviceServiceConfiguration() const {
    return m_on_device_service_configuration;
}
void OAICreateJobRequest::setOnDeviceServiceConfiguration(const OAICreateJobRequest_OnDeviceServiceConfiguration &on_device_service_configuration) {
    m_on_device_service_configuration = on_device_service_configuration;
    m_on_device_service_configuration_isSet = true;
}

bool OAICreateJobRequest::is_on_device_service_configuration_Set() const{
    return m_on_device_service_configuration_isSet;
}

bool OAICreateJobRequest::is_on_device_service_configuration_Valid() const{
    return m_on_device_service_configuration_isValid;
}

QString OAICreateJobRequest::getDescription() const {
    return m_description;
}
void OAICreateJobRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateJobRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateJobRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateJobRequest::getAddressId() const {
    return m_address_id;
}
void OAICreateJobRequest::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAICreateJobRequest::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAICreateJobRequest::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAICreateJobRequest::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAICreateJobRequest::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAICreateJobRequest::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAICreateJobRequest::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAICreateJobRequest::getRoleArn() const {
    return m_role_arn;
}
void OAICreateJobRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAICreateJobRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAICreateJobRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAISnowballCapacity OAICreateJobRequest::getSnowballCapacityPreference() const {
    return m_snowball_capacity_preference;
}
void OAICreateJobRequest::setSnowballCapacityPreference(const OAISnowballCapacity &snowball_capacity_preference) {
    m_snowball_capacity_preference = snowball_capacity_preference;
    m_snowball_capacity_preference_isSet = true;
}

bool OAICreateJobRequest::is_snowball_capacity_preference_Set() const{
    return m_snowball_capacity_preference_isSet;
}

bool OAICreateJobRequest::is_snowball_capacity_preference_Valid() const{
    return m_snowball_capacity_preference_isValid;
}

OAIShippingOption OAICreateJobRequest::getShippingOption() const {
    return m_shipping_option;
}
void OAICreateJobRequest::setShippingOption(const OAIShippingOption &shipping_option) {
    m_shipping_option = shipping_option;
    m_shipping_option_isSet = true;
}

bool OAICreateJobRequest::is_shipping_option_Set() const{
    return m_shipping_option_isSet;
}

bool OAICreateJobRequest::is_shipping_option_Valid() const{
    return m_shipping_option_isValid;
}

OAICreateJobRequest_Notification OAICreateJobRequest::getNotification() const {
    return m_notification;
}
void OAICreateJobRequest::setNotification(const OAICreateJobRequest_Notification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAICreateJobRequest::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAICreateJobRequest::is_notification_Valid() const{
    return m_notification_isValid;
}

QString OAICreateJobRequest::getClusterId() const {
    return m_cluster_id;
}
void OAICreateJobRequest::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAICreateJobRequest::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAICreateJobRequest::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

OAISnowballType OAICreateJobRequest::getSnowballType() const {
    return m_snowball_type;
}
void OAICreateJobRequest::setSnowballType(const OAISnowballType &snowball_type) {
    m_snowball_type = snowball_type;
    m_snowball_type_isSet = true;
}

bool OAICreateJobRequest::is_snowball_type_Set() const{
    return m_snowball_type_isSet;
}

bool OAICreateJobRequest::is_snowball_type_Valid() const{
    return m_snowball_type_isValid;
}

QString OAICreateJobRequest::getForwardingAddressId() const {
    return m_forwarding_address_id;
}
void OAICreateJobRequest::setForwardingAddressId(const QString &forwarding_address_id) {
    m_forwarding_address_id = forwarding_address_id;
    m_forwarding_address_id_isSet = true;
}

bool OAICreateJobRequest::is_forwarding_address_id_Set() const{
    return m_forwarding_address_id_isSet;
}

bool OAICreateJobRequest::is_forwarding_address_id_Valid() const{
    return m_forwarding_address_id_isValid;
}

OAICreateClusterRequest_TaxDocuments OAICreateJobRequest::getTaxDocuments() const {
    return m_tax_documents;
}
void OAICreateJobRequest::setTaxDocuments(const OAICreateClusterRequest_TaxDocuments &tax_documents) {
    m_tax_documents = tax_documents;
    m_tax_documents_isSet = true;
}

bool OAICreateJobRequest::is_tax_documents_Set() const{
    return m_tax_documents_isSet;
}

bool OAICreateJobRequest::is_tax_documents_Valid() const{
    return m_tax_documents_isValid;
}

OAICreateJobRequest_DeviceConfiguration OAICreateJobRequest::getDeviceConfiguration() const {
    return m_device_configuration;
}
void OAICreateJobRequest::setDeviceConfiguration(const OAICreateJobRequest_DeviceConfiguration &device_configuration) {
    m_device_configuration = device_configuration;
    m_device_configuration_isSet = true;
}

bool OAICreateJobRequest::is_device_configuration_Set() const{
    return m_device_configuration_isSet;
}

bool OAICreateJobRequest::is_device_configuration_Valid() const{
    return m_device_configuration_isValid;
}

OAIRemoteManagement OAICreateJobRequest::getRemoteManagement() const {
    return m_remote_management;
}
void OAICreateJobRequest::setRemoteManagement(const OAIRemoteManagement &remote_management) {
    m_remote_management = remote_management;
    m_remote_management_isSet = true;
}

bool OAICreateJobRequest::is_remote_management_Set() const{
    return m_remote_management_isSet;
}

bool OAICreateJobRequest::is_remote_management_Valid() const{
    return m_remote_management_isValid;
}

QString OAICreateJobRequest::getLongTermPricingId() const {
    return m_long_term_pricing_id;
}
void OAICreateJobRequest::setLongTermPricingId(const QString &long_term_pricing_id) {
    m_long_term_pricing_id = long_term_pricing_id;
    m_long_term_pricing_id_isSet = true;
}

bool OAICreateJobRequest::is_long_term_pricing_id_Set() const{
    return m_long_term_pricing_id_isSet;
}

bool OAICreateJobRequest::is_long_term_pricing_id_Valid() const{
    return m_long_term_pricing_id_isValid;
}

OAIImpactLevel OAICreateJobRequest::getImpactLevel() const {
    return m_impact_level;
}
void OAICreateJobRequest::setImpactLevel(const OAIImpactLevel &impact_level) {
    m_impact_level = impact_level;
    m_impact_level_isSet = true;
}

bool OAICreateJobRequest::is_impact_level_Set() const{
    return m_impact_level_isSet;
}

bool OAICreateJobRequest::is_impact_level_Valid() const{
    return m_impact_level_isValid;
}

OAICreateJobRequest_PickupDetails OAICreateJobRequest::getPickupDetails() const {
    return m_pickup_details;
}
void OAICreateJobRequest::setPickupDetails(const OAICreateJobRequest_PickupDetails &pickup_details) {
    m_pickup_details = pickup_details;
    m_pickup_details_isSet = true;
}

bool OAICreateJobRequest::is_pickup_details_Set() const{
    return m_pickup_details_isSet;
}

bool OAICreateJobRequest::is_pickup_details_Valid() const{
    return m_pickup_details_isValid;
}

bool OAICreateJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_device_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_capacity_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_management.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_pricing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
