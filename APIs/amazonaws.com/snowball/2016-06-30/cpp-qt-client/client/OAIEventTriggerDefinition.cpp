/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventTriggerDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventTriggerDefinition::OAIEventTriggerDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventTriggerDefinition::OAIEventTriggerDefinition() {
    this->initializeModel();
}

OAIEventTriggerDefinition::~OAIEventTriggerDefinition() {}

void OAIEventTriggerDefinition::initializeModel() {

    m_event_resource_arn_isSet = false;
    m_event_resource_arn_isValid = false;
}

void OAIEventTriggerDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventTriggerDefinition::fromJsonObject(QJsonObject json) {

    m_event_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_event_resource_arn, json[QString("EventResourceARN")]);
    m_event_resource_arn_isSet = !json[QString("EventResourceARN")].isNull() && m_event_resource_arn_isValid;
}

QString OAIEventTriggerDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventTriggerDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_event_resource_arn_isSet) {
        obj.insert(QString("EventResourceARN"), ::OpenAPI::toJsonValue(m_event_resource_arn));
    }
    return obj;
}

QString OAIEventTriggerDefinition::getEventResourceArn() const {
    return m_event_resource_arn;
}
void OAIEventTriggerDefinition::setEventResourceArn(const QString &event_resource_arn) {
    m_event_resource_arn = event_resource_arn;
    m_event_resource_arn_isSet = true;
}

bool OAIEventTriggerDefinition::is_event_resource_arn_Set() const{
    return m_event_resource_arn_isSet;
}

bool OAIEventTriggerDefinition::is_event_resource_arn_Valid() const{
    return m_event_resource_arn_isValid;
}

bool OAIEventTriggerDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventTriggerDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
