/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDependentService_ServiceVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDependentService_ServiceVersion::OAIDependentService_ServiceVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDependentService_ServiceVersion::OAIDependentService_ServiceVersion() {
    this->initializeModel();
}

OAIDependentService_ServiceVersion::~OAIDependentService_ServiceVersion() {}

void OAIDependentService_ServiceVersion::initializeModel() {

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIDependentService_ServiceVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDependentService_ServiceVersion::fromJsonObject(QJsonObject json) {

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAIDependentService_ServiceVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDependentService_ServiceVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIDependentService_ServiceVersion::getVersion() const {
    return m_version;
}
void OAIDependentService_ServiceVersion::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIDependentService_ServiceVersion::is_version_Set() const{
    return m_version_isSet;
}

bool OAIDependentService_ServiceVersion::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIDependentService_ServiceVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDependentService_ServiceVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
