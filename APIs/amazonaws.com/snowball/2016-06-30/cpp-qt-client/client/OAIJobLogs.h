/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJobLogs.h
 *
 * &lt;p&gt;Contains job logs. Whenever a Snow device is used to import data into or export data out of Amazon S3, you&#39;ll have the option of downloading a PDF job report. Job logs are returned as a part of the response syntax of the &lt;code&gt;DescribeJob&lt;/code&gt; action in the &lt;code&gt;JobMetadata&lt;/code&gt; data type. The job logs can be accessed for up to 60 minutes after this request has been made. To access any of the job logs after 60 minutes have passed, you&#39;ll have to make another call to the &lt;code&gt;DescribeJob&lt;/code&gt; action.&lt;/p&gt; &lt;p&gt;For import jobs, the PDF job report becomes available at the end of the import process. For export jobs, your job report typically becomes available while the Snow device for your job part is being delivered to you.&lt;/p&gt; &lt;p&gt;The job report provides you insight into the state of your Amazon S3 data transfer. The report includes details about your job or job part for your records.&lt;/p&gt; &lt;p&gt;For deeper visibility into the status of your transferred objects, you can look at the two associated logs: a success log and a failure log. The logs are saved in comma-separated value (CSV) format, and the name of each log includes the ID of the job or job part that the log describes.&lt;/p&gt;
 */

#ifndef OAIJobLogs_H
#define OAIJobLogs_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIJobLogs : public OAIObject {
public:
    OAIJobLogs();
    OAIJobLogs(QString json);
    ~OAIJobLogs() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getJobCompletionReportUri() const;
    void setJobCompletionReportUri(const QString &job_completion_report_uri);
    bool is_job_completion_report_uri_Set() const;
    bool is_job_completion_report_uri_Valid() const;

    QString getJobSuccessLogUri() const;
    void setJobSuccessLogUri(const QString &job_success_log_uri);
    bool is_job_success_log_uri_Set() const;
    bool is_job_success_log_uri_Valid() const;

    QString getJobFailureLogUri() const;
    void setJobFailureLogUri(const QString &job_failure_log_uri);
    bool is_job_failure_log_uri_Set() const;
    bool is_job_failure_log_uri_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_job_completion_report_uri;
    bool m_job_completion_report_uri_isSet;
    bool m_job_completion_report_uri_isValid;

    QString m_job_success_log_uri;
    bool m_job_success_log_uri_isSet;
    bool m_job_success_log_uri_isValid;

    QString m_job_failure_log_uri;
    bool m_job_failure_log_uri_isSet;
    bool m_job_failure_log_uri_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJobLogs)

#endif // OAIJobLogs_H
