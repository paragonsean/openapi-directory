/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetJobUnlockCodeResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetJobUnlockCodeResult::OAIGetJobUnlockCodeResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetJobUnlockCodeResult::OAIGetJobUnlockCodeResult() {
    this->initializeModel();
}

OAIGetJobUnlockCodeResult::~OAIGetJobUnlockCodeResult() {}

void OAIGetJobUnlockCodeResult::initializeModel() {

    m_unlock_code_isSet = false;
    m_unlock_code_isValid = false;
}

void OAIGetJobUnlockCodeResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetJobUnlockCodeResult::fromJsonObject(QJsonObject json) {

    m_unlock_code_isValid = ::OpenAPI::fromJsonValue(m_unlock_code, json[QString("UnlockCode")]);
    m_unlock_code_isSet = !json[QString("UnlockCode")].isNull() && m_unlock_code_isValid;
}

QString OAIGetJobUnlockCodeResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetJobUnlockCodeResult::asJsonObject() const {
    QJsonObject obj;
    if (m_unlock_code_isSet) {
        obj.insert(QString("UnlockCode"), ::OpenAPI::toJsonValue(m_unlock_code));
    }
    return obj;
}

QString OAIGetJobUnlockCodeResult::getUnlockCode() const {
    return m_unlock_code;
}
void OAIGetJobUnlockCodeResult::setUnlockCode(const QString &unlock_code) {
    m_unlock_code = unlock_code;
    m_unlock_code_isSet = true;
}

bool OAIGetJobUnlockCodeResult::is_unlock_code_Set() const{
    return m_unlock_code_isSet;
}

bool OAIGetJobUnlockCodeResult::is_unlock_code_Valid() const{
    return m_unlock_code_isValid;
}

bool OAIGetJobUnlockCodeResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unlock_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetJobUnlockCodeResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
