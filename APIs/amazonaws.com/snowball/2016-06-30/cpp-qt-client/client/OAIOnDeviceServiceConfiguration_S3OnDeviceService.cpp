/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnDeviceServiceConfiguration_S3OnDeviceService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnDeviceServiceConfiguration_S3OnDeviceService::OAIOnDeviceServiceConfiguration_S3OnDeviceService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnDeviceServiceConfiguration_S3OnDeviceService::OAIOnDeviceServiceConfiguration_S3OnDeviceService() {
    this->initializeModel();
}

OAIOnDeviceServiceConfiguration_S3OnDeviceService::~OAIOnDeviceServiceConfiguration_S3OnDeviceService() {}

void OAIOnDeviceServiceConfiguration_S3OnDeviceService::initializeModel() {

    m_storage_limit_isSet = false;
    m_storage_limit_isValid = false;

    m_storage_unit_isSet = false;
    m_storage_unit_isValid = false;

    m_service_size_isSet = false;
    m_service_size_isValid = false;

    m_fault_tolerance_isSet = false;
    m_fault_tolerance_isValid = false;
}

void OAIOnDeviceServiceConfiguration_S3OnDeviceService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnDeviceServiceConfiguration_S3OnDeviceService::fromJsonObject(QJsonObject json) {

    m_storage_limit_isValid = ::OpenAPI::fromJsonValue(m_storage_limit, json[QString("StorageLimit")]);
    m_storage_limit_isSet = !json[QString("StorageLimit")].isNull() && m_storage_limit_isValid;

    m_storage_unit_isValid = ::OpenAPI::fromJsonValue(m_storage_unit, json[QString("StorageUnit")]);
    m_storage_unit_isSet = !json[QString("StorageUnit")].isNull() && m_storage_unit_isValid;

    m_service_size_isValid = ::OpenAPI::fromJsonValue(m_service_size, json[QString("ServiceSize")]);
    m_service_size_isSet = !json[QString("ServiceSize")].isNull() && m_service_size_isValid;

    m_fault_tolerance_isValid = ::OpenAPI::fromJsonValue(m_fault_tolerance, json[QString("FaultTolerance")]);
    m_fault_tolerance_isSet = !json[QString("FaultTolerance")].isNull() && m_fault_tolerance_isValid;
}

QString OAIOnDeviceServiceConfiguration_S3OnDeviceService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnDeviceServiceConfiguration_S3OnDeviceService::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_limit_isSet) {
        obj.insert(QString("StorageLimit"), ::OpenAPI::toJsonValue(m_storage_limit));
    }
    if (m_storage_unit.isSet()) {
        obj.insert(QString("StorageUnit"), ::OpenAPI::toJsonValue(m_storage_unit));
    }
    if (m_service_size_isSet) {
        obj.insert(QString("ServiceSize"), ::OpenAPI::toJsonValue(m_service_size));
    }
    if (m_fault_tolerance_isSet) {
        obj.insert(QString("FaultTolerance"), ::OpenAPI::toJsonValue(m_fault_tolerance));
    }
    return obj;
}

double OAIOnDeviceServiceConfiguration_S3OnDeviceService::getStorageLimit() const {
    return m_storage_limit;
}
void OAIOnDeviceServiceConfiguration_S3OnDeviceService::setStorageLimit(const double &storage_limit) {
    m_storage_limit = storage_limit;
    m_storage_limit_isSet = true;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::is_storage_limit_Set() const{
    return m_storage_limit_isSet;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::is_storage_limit_Valid() const{
    return m_storage_limit_isValid;
}

OAIStorageUnit OAIOnDeviceServiceConfiguration_S3OnDeviceService::getStorageUnit() const {
    return m_storage_unit;
}
void OAIOnDeviceServiceConfiguration_S3OnDeviceService::setStorageUnit(const OAIStorageUnit &storage_unit) {
    m_storage_unit = storage_unit;
    m_storage_unit_isSet = true;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::is_storage_unit_Set() const{
    return m_storage_unit_isSet;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::is_storage_unit_Valid() const{
    return m_storage_unit_isValid;
}

qint32 OAIOnDeviceServiceConfiguration_S3OnDeviceService::getServiceSize() const {
    return m_service_size;
}
void OAIOnDeviceServiceConfiguration_S3OnDeviceService::setServiceSize(const qint32 &service_size) {
    m_service_size = service_size;
    m_service_size_isSet = true;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::is_service_size_Set() const{
    return m_service_size_isSet;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::is_service_size_Valid() const{
    return m_service_size_isValid;
}

qint32 OAIOnDeviceServiceConfiguration_S3OnDeviceService::getFaultTolerance() const {
    return m_fault_tolerance;
}
void OAIOnDeviceServiceConfiguration_S3OnDeviceService::setFaultTolerance(const qint32 &fault_tolerance) {
    m_fault_tolerance = fault_tolerance;
    m_fault_tolerance_isSet = true;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::is_fault_tolerance_Set() const{
    return m_fault_tolerance_isSet;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::is_fault_tolerance_Valid() const{
    return m_fault_tolerance_isValid;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fault_tolerance_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnDeviceServiceConfiguration_S3OnDeviceService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
