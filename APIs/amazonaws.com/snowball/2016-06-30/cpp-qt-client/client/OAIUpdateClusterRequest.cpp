/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateClusterRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateClusterRequest::OAIUpdateClusterRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateClusterRequest::OAIUpdateClusterRequest() {
    this->initializeModel();
}

OAIUpdateClusterRequest::~OAIUpdateClusterRequest() {}

void OAIUpdateClusterRequest::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_on_device_service_configuration_isSet = false;
    m_on_device_service_configuration_isValid = false;

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_shipping_option_isSet = false;
    m_shipping_option_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_forwarding_address_id_isSet = false;
    m_forwarding_address_id_isValid = false;
}

void OAIUpdateClusterRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateClusterRequest::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("ClusterId")]);
    m_cluster_id_isSet = !json[QString("ClusterId")].isNull() && m_cluster_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_on_device_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_on_device_service_configuration, json[QString("OnDeviceServiceConfiguration")]);
    m_on_device_service_configuration_isSet = !json[QString("OnDeviceServiceConfiguration")].isNull() && m_on_device_service_configuration_isValid;

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("AddressId")]);
    m_address_id_isSet = !json[QString("AddressId")].isNull() && m_address_id_isValid;

    m_shipping_option_isValid = ::OpenAPI::fromJsonValue(m_shipping_option, json[QString("ShippingOption")]);
    m_shipping_option_isSet = !json[QString("ShippingOption")].isNull() && m_shipping_option_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("Notification")]);
    m_notification_isSet = !json[QString("Notification")].isNull() && m_notification_isValid;

    m_forwarding_address_id_isValid = ::OpenAPI::fromJsonValue(m_forwarding_address_id, json[QString("ForwardingAddressId")]);
    m_forwarding_address_id_isSet = !json[QString("ForwardingAddressId")].isNull() && m_forwarding_address_id_isValid;
}

QString OAIUpdateClusterRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateClusterRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("ClusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_on_device_service_configuration.isSet()) {
        obj.insert(QString("OnDeviceServiceConfiguration"), ::OpenAPI::toJsonValue(m_on_device_service_configuration));
    }
    if (m_address_id_isSet) {
        obj.insert(QString("AddressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_shipping_option.isSet()) {
        obj.insert(QString("ShippingOption"), ::OpenAPI::toJsonValue(m_shipping_option));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("Notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_forwarding_address_id_isSet) {
        obj.insert(QString("ForwardingAddressId"), ::OpenAPI::toJsonValue(m_forwarding_address_id));
    }
    return obj;
}

QString OAIUpdateClusterRequest::getClusterId() const {
    return m_cluster_id;
}
void OAIUpdateClusterRequest::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIUpdateClusterRequest::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIUpdateClusterRequest::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAIUpdateClusterRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateClusterRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateClusterRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateClusterRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIUpdateClusterRequest::getDescription() const {
    return m_description;
}
void OAIUpdateClusterRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateClusterRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateClusterRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAIUpdateClusterRequest_Resources OAIUpdateClusterRequest::getResources() const {
    return m_resources;
}
void OAIUpdateClusterRequest::setResources(const OAIUpdateClusterRequest_Resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIUpdateClusterRequest::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIUpdateClusterRequest::is_resources_Valid() const{
    return m_resources_isValid;
}

OAICreateClusterRequest_OnDeviceServiceConfiguration OAIUpdateClusterRequest::getOnDeviceServiceConfiguration() const {
    return m_on_device_service_configuration;
}
void OAIUpdateClusterRequest::setOnDeviceServiceConfiguration(const OAICreateClusterRequest_OnDeviceServiceConfiguration &on_device_service_configuration) {
    m_on_device_service_configuration = on_device_service_configuration;
    m_on_device_service_configuration_isSet = true;
}

bool OAIUpdateClusterRequest::is_on_device_service_configuration_Set() const{
    return m_on_device_service_configuration_isSet;
}

bool OAIUpdateClusterRequest::is_on_device_service_configuration_Valid() const{
    return m_on_device_service_configuration_isValid;
}

QString OAIUpdateClusterRequest::getAddressId() const {
    return m_address_id;
}
void OAIUpdateClusterRequest::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIUpdateClusterRequest::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIUpdateClusterRequest::is_address_id_Valid() const{
    return m_address_id_isValid;
}

OAIShippingOption OAIUpdateClusterRequest::getShippingOption() const {
    return m_shipping_option;
}
void OAIUpdateClusterRequest::setShippingOption(const OAIShippingOption &shipping_option) {
    m_shipping_option = shipping_option;
    m_shipping_option_isSet = true;
}

bool OAIUpdateClusterRequest::is_shipping_option_Set() const{
    return m_shipping_option_isSet;
}

bool OAIUpdateClusterRequest::is_shipping_option_Valid() const{
    return m_shipping_option_isValid;
}

OAIUpdateClusterRequest_Notification OAIUpdateClusterRequest::getNotification() const {
    return m_notification;
}
void OAIUpdateClusterRequest::setNotification(const OAIUpdateClusterRequest_Notification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIUpdateClusterRequest::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIUpdateClusterRequest::is_notification_Valid() const{
    return m_notification_isValid;
}

QString OAIUpdateClusterRequest::getForwardingAddressId() const {
    return m_forwarding_address_id;
}
void OAIUpdateClusterRequest::setForwardingAddressId(const QString &forwarding_address_id) {
    m_forwarding_address_id = forwarding_address_id;
    m_forwarding_address_id_isSet = true;
}

bool OAIUpdateClusterRequest::is_forwarding_address_id_Set() const{
    return m_forwarding_address_id_isSet;
}

bool OAIUpdateClusterRequest::is_forwarding_address_id_Valid() const{
    return m_forwarding_address_id_isValid;
}

bool OAIUpdateClusterRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_device_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateClusterRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cluster_id_isValid && true;
}

} // namespace OpenAPI
