/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeJobResult_JobMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeJobResult_JobMetadata::OAIDescribeJobResult_JobMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeJobResult_JobMetadata::OAIDescribeJobResult_JobMetadata() {
    this->initializeModel();
}

OAIDescribeJobResult_JobMetadata::~OAIDescribeJobResult_JobMetadata() {}

void OAIDescribeJobResult_JobMetadata::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_state_isSet = false;
    m_job_state_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_snowball_type_isSet = false;
    m_snowball_type_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_shipping_details_isSet = false;
    m_shipping_details_isValid = false;

    m_snowball_capacity_preference_isSet = false;
    m_snowball_capacity_preference_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_data_transfer_progress_isSet = false;
    m_data_transfer_progress_isValid = false;

    m_job_log_info_isSet = false;
    m_job_log_info_isValid = false;

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_forwarding_address_id_isSet = false;
    m_forwarding_address_id_isValid = false;

    m_tax_documents_isSet = false;
    m_tax_documents_isValid = false;

    m_device_configuration_isSet = false;
    m_device_configuration_isValid = false;

    m_remote_management_isSet = false;
    m_remote_management_isValid = false;

    m_long_term_pricing_id_isSet = false;
    m_long_term_pricing_id_isValid = false;

    m_on_device_service_configuration_isSet = false;
    m_on_device_service_configuration_isValid = false;

    m_impact_level_isSet = false;
    m_impact_level_isValid = false;

    m_pickup_details_isSet = false;
    m_pickup_details_isValid = false;

    m_snowball_id_isSet = false;
    m_snowball_id_isValid = false;
}

void OAIDescribeJobResult_JobMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeJobResult_JobMetadata::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_state_isValid = ::OpenAPI::fromJsonValue(m_job_state, json[QString("JobState")]);
    m_job_state_isSet = !json[QString("JobState")].isNull() && m_job_state_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_snowball_type_isValid = ::OpenAPI::fromJsonValue(m_snowball_type, json[QString("SnowballType")]);
    m_snowball_type_isSet = !json[QString("SnowballType")].isNull() && m_snowball_type_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyARN")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyARN")].isNull() && m_kms_key_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("AddressId")]);
    m_address_id_isSet = !json[QString("AddressId")].isNull() && m_address_id_isValid;

    m_shipping_details_isValid = ::OpenAPI::fromJsonValue(m_shipping_details, json[QString("ShippingDetails")]);
    m_shipping_details_isSet = !json[QString("ShippingDetails")].isNull() && m_shipping_details_isValid;

    m_snowball_capacity_preference_isValid = ::OpenAPI::fromJsonValue(m_snowball_capacity_preference, json[QString("SnowballCapacityPreference")]);
    m_snowball_capacity_preference_isSet = !json[QString("SnowballCapacityPreference")].isNull() && m_snowball_capacity_preference_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("Notification")]);
    m_notification_isSet = !json[QString("Notification")].isNull() && m_notification_isValid;

    m_data_transfer_progress_isValid = ::OpenAPI::fromJsonValue(m_data_transfer_progress, json[QString("DataTransferProgress")]);
    m_data_transfer_progress_isSet = !json[QString("DataTransferProgress")].isNull() && m_data_transfer_progress_isValid;

    m_job_log_info_isValid = ::OpenAPI::fromJsonValue(m_job_log_info, json[QString("JobLogInfo")]);
    m_job_log_info_isSet = !json[QString("JobLogInfo")].isNull() && m_job_log_info_isValid;

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("ClusterId")]);
    m_cluster_id_isSet = !json[QString("ClusterId")].isNull() && m_cluster_id_isValid;

    m_forwarding_address_id_isValid = ::OpenAPI::fromJsonValue(m_forwarding_address_id, json[QString("ForwardingAddressId")]);
    m_forwarding_address_id_isSet = !json[QString("ForwardingAddressId")].isNull() && m_forwarding_address_id_isValid;

    m_tax_documents_isValid = ::OpenAPI::fromJsonValue(m_tax_documents, json[QString("TaxDocuments")]);
    m_tax_documents_isSet = !json[QString("TaxDocuments")].isNull() && m_tax_documents_isValid;

    m_device_configuration_isValid = ::OpenAPI::fromJsonValue(m_device_configuration, json[QString("DeviceConfiguration")]);
    m_device_configuration_isSet = !json[QString("DeviceConfiguration")].isNull() && m_device_configuration_isValid;

    m_remote_management_isValid = ::OpenAPI::fromJsonValue(m_remote_management, json[QString("RemoteManagement")]);
    m_remote_management_isSet = !json[QString("RemoteManagement")].isNull() && m_remote_management_isValid;

    m_long_term_pricing_id_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_id, json[QString("LongTermPricingId")]);
    m_long_term_pricing_id_isSet = !json[QString("LongTermPricingId")].isNull() && m_long_term_pricing_id_isValid;

    m_on_device_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_on_device_service_configuration, json[QString("OnDeviceServiceConfiguration")]);
    m_on_device_service_configuration_isSet = !json[QString("OnDeviceServiceConfiguration")].isNull() && m_on_device_service_configuration_isValid;

    m_impact_level_isValid = ::OpenAPI::fromJsonValue(m_impact_level, json[QString("ImpactLevel")]);
    m_impact_level_isSet = !json[QString("ImpactLevel")].isNull() && m_impact_level_isValid;

    m_pickup_details_isValid = ::OpenAPI::fromJsonValue(m_pickup_details, json[QString("PickupDetails")]);
    m_pickup_details_isSet = !json[QString("PickupDetails")].isNull() && m_pickup_details_isValid;

    m_snowball_id_isValid = ::OpenAPI::fromJsonValue(m_snowball_id, json[QString("SnowballId")]);
    m_snowball_id_isSet = !json[QString("SnowballId")].isNull() && m_snowball_id_isValid;
}

QString OAIDescribeJobResult_JobMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeJobResult_JobMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_state.isSet()) {
        obj.insert(QString("JobState"), ::OpenAPI::toJsonValue(m_job_state));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_snowball_type.isSet()) {
        obj.insert(QString("SnowballType"), ::OpenAPI::toJsonValue(m_snowball_type));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyARN"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_address_id_isSet) {
        obj.insert(QString("AddressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_shipping_details.isSet()) {
        obj.insert(QString("ShippingDetails"), ::OpenAPI::toJsonValue(m_shipping_details));
    }
    if (m_snowball_capacity_preference.isSet()) {
        obj.insert(QString("SnowballCapacityPreference"), ::OpenAPI::toJsonValue(m_snowball_capacity_preference));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("Notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_data_transfer_progress.isSet()) {
        obj.insert(QString("DataTransferProgress"), ::OpenAPI::toJsonValue(m_data_transfer_progress));
    }
    if (m_job_log_info.isSet()) {
        obj.insert(QString("JobLogInfo"), ::OpenAPI::toJsonValue(m_job_log_info));
    }
    if (m_cluster_id_isSet) {
        obj.insert(QString("ClusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_forwarding_address_id_isSet) {
        obj.insert(QString("ForwardingAddressId"), ::OpenAPI::toJsonValue(m_forwarding_address_id));
    }
    if (m_tax_documents.isSet()) {
        obj.insert(QString("TaxDocuments"), ::OpenAPI::toJsonValue(m_tax_documents));
    }
    if (m_device_configuration.isSet()) {
        obj.insert(QString("DeviceConfiguration"), ::OpenAPI::toJsonValue(m_device_configuration));
    }
    if (m_remote_management.isSet()) {
        obj.insert(QString("RemoteManagement"), ::OpenAPI::toJsonValue(m_remote_management));
    }
    if (m_long_term_pricing_id_isSet) {
        obj.insert(QString("LongTermPricingId"), ::OpenAPI::toJsonValue(m_long_term_pricing_id));
    }
    if (m_on_device_service_configuration.isSet()) {
        obj.insert(QString("OnDeviceServiceConfiguration"), ::OpenAPI::toJsonValue(m_on_device_service_configuration));
    }
    if (m_impact_level.isSet()) {
        obj.insert(QString("ImpactLevel"), ::OpenAPI::toJsonValue(m_impact_level));
    }
    if (m_pickup_details.isSet()) {
        obj.insert(QString("PickupDetails"), ::OpenAPI::toJsonValue(m_pickup_details));
    }
    if (m_snowball_id_isSet) {
        obj.insert(QString("SnowballId"), ::OpenAPI::toJsonValue(m_snowball_id));
    }
    return obj;
}

QString OAIDescribeJobResult_JobMetadata::getJobId() const {
    return m_job_id;
}
void OAIDescribeJobResult_JobMetadata::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIJobState OAIDescribeJobResult_JobMetadata::getJobState() const {
    return m_job_state;
}
void OAIDescribeJobResult_JobMetadata::setJobState(const OAIJobState &job_state) {
    m_job_state = job_state;
    m_job_state_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_job_state_Set() const{
    return m_job_state_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_job_state_Valid() const{
    return m_job_state_isValid;
}

OAIJobType OAIDescribeJobResult_JobMetadata::getJobType() const {
    return m_job_type;
}
void OAIDescribeJobResult_JobMetadata::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_job_type_Valid() const{
    return m_job_type_isValid;
}

OAISnowballType OAIDescribeJobResult_JobMetadata::getSnowballType() const {
    return m_snowball_type;
}
void OAIDescribeJobResult_JobMetadata::setSnowballType(const OAISnowballType &snowball_type) {
    m_snowball_type = snowball_type;
    m_snowball_type_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_snowball_type_Set() const{
    return m_snowball_type_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_snowball_type_Valid() const{
    return m_snowball_type_isValid;
}

QDateTime OAIDescribeJobResult_JobMetadata::getCreationDate() const {
    return m_creation_date;
}
void OAIDescribeJobResult_JobMetadata::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIJobMetadata_Resources OAIDescribeJobResult_JobMetadata::getResources() const {
    return m_resources;
}
void OAIDescribeJobResult_JobMetadata::setResources(const OAIJobMetadata_Resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIDescribeJobResult_JobMetadata::getDescription() const {
    return m_description;
}
void OAIDescribeJobResult_JobMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeJobResult_JobMetadata::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIDescribeJobResult_JobMetadata::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAIDescribeJobResult_JobMetadata::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeJobResult_JobMetadata::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

QString OAIDescribeJobResult_JobMetadata::getAddressId() const {
    return m_address_id;
}
void OAIDescribeJobResult_JobMetadata::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_address_id_Valid() const{
    return m_address_id_isValid;
}

OAIJobMetadata_ShippingDetails OAIDescribeJobResult_JobMetadata::getShippingDetails() const {
    return m_shipping_details;
}
void OAIDescribeJobResult_JobMetadata::setShippingDetails(const OAIJobMetadata_ShippingDetails &shipping_details) {
    m_shipping_details = shipping_details;
    m_shipping_details_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_shipping_details_Set() const{
    return m_shipping_details_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_shipping_details_Valid() const{
    return m_shipping_details_isValid;
}

OAISnowballCapacity OAIDescribeJobResult_JobMetadata::getSnowballCapacityPreference() const {
    return m_snowball_capacity_preference;
}
void OAIDescribeJobResult_JobMetadata::setSnowballCapacityPreference(const OAISnowballCapacity &snowball_capacity_preference) {
    m_snowball_capacity_preference = snowball_capacity_preference;
    m_snowball_capacity_preference_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_snowball_capacity_preference_Set() const{
    return m_snowball_capacity_preference_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_snowball_capacity_preference_Valid() const{
    return m_snowball_capacity_preference_isValid;
}

OAIJobMetadata_Notification OAIDescribeJobResult_JobMetadata::getNotification() const {
    return m_notification;
}
void OAIDescribeJobResult_JobMetadata::setNotification(const OAIJobMetadata_Notification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_notification_Valid() const{
    return m_notification_isValid;
}

OAIJobMetadata_DataTransferProgress OAIDescribeJobResult_JobMetadata::getDataTransferProgress() const {
    return m_data_transfer_progress;
}
void OAIDescribeJobResult_JobMetadata::setDataTransferProgress(const OAIJobMetadata_DataTransferProgress &data_transfer_progress) {
    m_data_transfer_progress = data_transfer_progress;
    m_data_transfer_progress_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_data_transfer_progress_Set() const{
    return m_data_transfer_progress_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_data_transfer_progress_Valid() const{
    return m_data_transfer_progress_isValid;
}

OAIJobMetadata_JobLogInfo OAIDescribeJobResult_JobMetadata::getJobLogInfo() const {
    return m_job_log_info;
}
void OAIDescribeJobResult_JobMetadata::setJobLogInfo(const OAIJobMetadata_JobLogInfo &job_log_info) {
    m_job_log_info = job_log_info;
    m_job_log_info_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_job_log_info_Set() const{
    return m_job_log_info_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_job_log_info_Valid() const{
    return m_job_log_info_isValid;
}

QString OAIDescribeJobResult_JobMetadata::getClusterId() const {
    return m_cluster_id;
}
void OAIDescribeJobResult_JobMetadata::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAIDescribeJobResult_JobMetadata::getForwardingAddressId() const {
    return m_forwarding_address_id;
}
void OAIDescribeJobResult_JobMetadata::setForwardingAddressId(const QString &forwarding_address_id) {
    m_forwarding_address_id = forwarding_address_id;
    m_forwarding_address_id_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_forwarding_address_id_Set() const{
    return m_forwarding_address_id_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_forwarding_address_id_Valid() const{
    return m_forwarding_address_id_isValid;
}

OAIJobMetadata_TaxDocuments OAIDescribeJobResult_JobMetadata::getTaxDocuments() const {
    return m_tax_documents;
}
void OAIDescribeJobResult_JobMetadata::setTaxDocuments(const OAIJobMetadata_TaxDocuments &tax_documents) {
    m_tax_documents = tax_documents;
    m_tax_documents_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_tax_documents_Set() const{
    return m_tax_documents_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_tax_documents_Valid() const{
    return m_tax_documents_isValid;
}

OAIDeviceConfiguration OAIDescribeJobResult_JobMetadata::getDeviceConfiguration() const {
    return m_device_configuration;
}
void OAIDescribeJobResult_JobMetadata::setDeviceConfiguration(const OAIDeviceConfiguration &device_configuration) {
    m_device_configuration = device_configuration;
    m_device_configuration_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_device_configuration_Set() const{
    return m_device_configuration_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_device_configuration_Valid() const{
    return m_device_configuration_isValid;
}

OAIRemoteManagement OAIDescribeJobResult_JobMetadata::getRemoteManagement() const {
    return m_remote_management;
}
void OAIDescribeJobResult_JobMetadata::setRemoteManagement(const OAIRemoteManagement &remote_management) {
    m_remote_management = remote_management;
    m_remote_management_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_remote_management_Set() const{
    return m_remote_management_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_remote_management_Valid() const{
    return m_remote_management_isValid;
}

QString OAIDescribeJobResult_JobMetadata::getLongTermPricingId() const {
    return m_long_term_pricing_id;
}
void OAIDescribeJobResult_JobMetadata::setLongTermPricingId(const QString &long_term_pricing_id) {
    m_long_term_pricing_id = long_term_pricing_id;
    m_long_term_pricing_id_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_long_term_pricing_id_Set() const{
    return m_long_term_pricing_id_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_long_term_pricing_id_Valid() const{
    return m_long_term_pricing_id_isValid;
}

OAIClusterMetadata_OnDeviceServiceConfiguration OAIDescribeJobResult_JobMetadata::getOnDeviceServiceConfiguration() const {
    return m_on_device_service_configuration;
}
void OAIDescribeJobResult_JobMetadata::setOnDeviceServiceConfiguration(const OAIClusterMetadata_OnDeviceServiceConfiguration &on_device_service_configuration) {
    m_on_device_service_configuration = on_device_service_configuration;
    m_on_device_service_configuration_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_on_device_service_configuration_Set() const{
    return m_on_device_service_configuration_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_on_device_service_configuration_Valid() const{
    return m_on_device_service_configuration_isValid;
}

OAIImpactLevel OAIDescribeJobResult_JobMetadata::getImpactLevel() const {
    return m_impact_level;
}
void OAIDescribeJobResult_JobMetadata::setImpactLevel(const OAIImpactLevel &impact_level) {
    m_impact_level = impact_level;
    m_impact_level_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_impact_level_Set() const{
    return m_impact_level_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_impact_level_Valid() const{
    return m_impact_level_isValid;
}

OAICreateJobRequest_PickupDetails OAIDescribeJobResult_JobMetadata::getPickupDetails() const {
    return m_pickup_details;
}
void OAIDescribeJobResult_JobMetadata::setPickupDetails(const OAICreateJobRequest_PickupDetails &pickup_details) {
    m_pickup_details = pickup_details;
    m_pickup_details_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_pickup_details_Set() const{
    return m_pickup_details_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_pickup_details_Valid() const{
    return m_pickup_details_isValid;
}

QString OAIDescribeJobResult_JobMetadata::getSnowballId() const {
    return m_snowball_id;
}
void OAIDescribeJobResult_JobMetadata::setSnowballId(const QString &snowball_id) {
    m_snowball_id = snowball_id;
    m_snowball_id_isSet = true;
}

bool OAIDescribeJobResult_JobMetadata::is_snowball_id_Set() const{
    return m_snowball_id_isSet;
}

bool OAIDescribeJobResult_JobMetadata::is_snowball_id_Valid() const{
    return m_snowball_id_isValid;
}

bool OAIDescribeJobResult_JobMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_capacity_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_transfer_progress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_log_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_management.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_long_term_pricing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_device_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_impact_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeJobResult_JobMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
