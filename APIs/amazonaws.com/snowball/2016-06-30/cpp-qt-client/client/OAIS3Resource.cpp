/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIS3Resource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIS3Resource::OAIS3Resource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIS3Resource::OAIS3Resource() {
    this->initializeModel();
}

OAIS3Resource::~OAIS3Resource() {}

void OAIS3Resource::initializeModel() {

    m_bucket_arn_isSet = false;
    m_bucket_arn_isValid = false;

    m_key_range_isSet = false;
    m_key_range_isValid = false;

    m_target_on_device_services_isSet = false;
    m_target_on_device_services_isValid = false;
}

void OAIS3Resource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIS3Resource::fromJsonObject(QJsonObject json) {

    m_bucket_arn_isValid = ::OpenAPI::fromJsonValue(m_bucket_arn, json[QString("BucketArn")]);
    m_bucket_arn_isSet = !json[QString("BucketArn")].isNull() && m_bucket_arn_isValid;

    m_key_range_isValid = ::OpenAPI::fromJsonValue(m_key_range, json[QString("KeyRange")]);
    m_key_range_isSet = !json[QString("KeyRange")].isNull() && m_key_range_isValid;

    m_target_on_device_services_isValid = ::OpenAPI::fromJsonValue(m_target_on_device_services, json[QString("TargetOnDeviceServices")]);
    m_target_on_device_services_isSet = !json[QString("TargetOnDeviceServices")].isNull() && m_target_on_device_services_isValid;
}

QString OAIS3Resource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIS3Resource::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_arn_isSet) {
        obj.insert(QString("BucketArn"), ::OpenAPI::toJsonValue(m_bucket_arn));
    }
    if (m_key_range.isSet()) {
        obj.insert(QString("KeyRange"), ::OpenAPI::toJsonValue(m_key_range));
    }
    if (m_target_on_device_services.isSet()) {
        obj.insert(QString("TargetOnDeviceServices"), ::OpenAPI::toJsonValue(m_target_on_device_services));
    }
    return obj;
}

QString OAIS3Resource::getBucketArn() const {
    return m_bucket_arn;
}
void OAIS3Resource::setBucketArn(const QString &bucket_arn) {
    m_bucket_arn = bucket_arn;
    m_bucket_arn_isSet = true;
}

bool OAIS3Resource::is_bucket_arn_Set() const{
    return m_bucket_arn_isSet;
}

bool OAIS3Resource::is_bucket_arn_Valid() const{
    return m_bucket_arn_isValid;
}

OAIS3Resource_KeyRange OAIS3Resource::getKeyRange() const {
    return m_key_range;
}
void OAIS3Resource::setKeyRange(const OAIS3Resource_KeyRange &key_range) {
    m_key_range = key_range;
    m_key_range_isSet = true;
}

bool OAIS3Resource::is_key_range_Set() const{
    return m_key_range_isSet;
}

bool OAIS3Resource::is_key_range_Valid() const{
    return m_key_range_isValid;
}

QList OAIS3Resource::getTargetOnDeviceServices() const {
    return m_target_on_device_services;
}
void OAIS3Resource::setTargetOnDeviceServices(const QList &target_on_device_services) {
    m_target_on_device_services = target_on_device_services;
    m_target_on_device_services_isSet = true;
}

bool OAIS3Resource::is_target_on_device_services_Set() const{
    return m_target_on_device_services_isSet;
}

bool OAIS3Resource::is_target_on_device_services_Valid() const{
    return m_target_on_device_services_isValid;
}

bool OAIS3Resource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_on_device_services.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIS3Resource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
