/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterListEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterListEntry::OAIClusterListEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterListEntry::OAIClusterListEntry() {
    this->initializeModel();
}

OAIClusterListEntry::~OAIClusterListEntry() {}

void OAIClusterListEntry::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_cluster_state_isSet = false;
    m_cluster_state_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIClusterListEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterListEntry::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("ClusterId")]);
    m_cluster_id_isSet = !json[QString("ClusterId")].isNull() && m_cluster_id_isValid;

    m_cluster_state_isValid = ::OpenAPI::fromJsonValue(m_cluster_state, json[QString("ClusterState")]);
    m_cluster_state_isSet = !json[QString("ClusterState")].isNull() && m_cluster_state_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIClusterListEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterListEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("ClusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_cluster_state.isSet()) {
        obj.insert(QString("ClusterState"), ::OpenAPI::toJsonValue(m_cluster_state));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIClusterListEntry::getClusterId() const {
    return m_cluster_id;
}
void OAIClusterListEntry::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIClusterListEntry::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIClusterListEntry::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

OAIClusterState OAIClusterListEntry::getClusterState() const {
    return m_cluster_state;
}
void OAIClusterListEntry::setClusterState(const OAIClusterState &cluster_state) {
    m_cluster_state = cluster_state;
    m_cluster_state_isSet = true;
}

bool OAIClusterListEntry::is_cluster_state_Set() const{
    return m_cluster_state_isSet;
}

bool OAIClusterListEntry::is_cluster_state_Valid() const{
    return m_cluster_state_isValid;
}

QDateTime OAIClusterListEntry::getCreationDate() const {
    return m_creation_date;
}
void OAIClusterListEntry::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIClusterListEntry::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIClusterListEntry::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIClusterListEntry::getDescription() const {
    return m_description;
}
void OAIClusterListEntry::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIClusterListEntry::is_description_Set() const{
    return m_description_isSet;
}

bool OAIClusterListEntry::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIClusterListEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterListEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
