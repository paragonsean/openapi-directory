/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobMetadata_JobLogInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobMetadata_JobLogInfo::OAIJobMetadata_JobLogInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobMetadata_JobLogInfo::OAIJobMetadata_JobLogInfo() {
    this->initializeModel();
}

OAIJobMetadata_JobLogInfo::~OAIJobMetadata_JobLogInfo() {}

void OAIJobMetadata_JobLogInfo::initializeModel() {

    m_job_completion_report_uri_isSet = false;
    m_job_completion_report_uri_isValid = false;

    m_job_success_log_uri_isSet = false;
    m_job_success_log_uri_isValid = false;

    m_job_failure_log_uri_isSet = false;
    m_job_failure_log_uri_isValid = false;
}

void OAIJobMetadata_JobLogInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobMetadata_JobLogInfo::fromJsonObject(QJsonObject json) {

    m_job_completion_report_uri_isValid = ::OpenAPI::fromJsonValue(m_job_completion_report_uri, json[QString("JobCompletionReportURI")]);
    m_job_completion_report_uri_isSet = !json[QString("JobCompletionReportURI")].isNull() && m_job_completion_report_uri_isValid;

    m_job_success_log_uri_isValid = ::OpenAPI::fromJsonValue(m_job_success_log_uri, json[QString("JobSuccessLogURI")]);
    m_job_success_log_uri_isSet = !json[QString("JobSuccessLogURI")].isNull() && m_job_success_log_uri_isValid;

    m_job_failure_log_uri_isValid = ::OpenAPI::fromJsonValue(m_job_failure_log_uri, json[QString("JobFailureLogURI")]);
    m_job_failure_log_uri_isSet = !json[QString("JobFailureLogURI")].isNull() && m_job_failure_log_uri_isValid;
}

QString OAIJobMetadata_JobLogInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobMetadata_JobLogInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_job_completion_report_uri_isSet) {
        obj.insert(QString("JobCompletionReportURI"), ::OpenAPI::toJsonValue(m_job_completion_report_uri));
    }
    if (m_job_success_log_uri_isSet) {
        obj.insert(QString("JobSuccessLogURI"), ::OpenAPI::toJsonValue(m_job_success_log_uri));
    }
    if (m_job_failure_log_uri_isSet) {
        obj.insert(QString("JobFailureLogURI"), ::OpenAPI::toJsonValue(m_job_failure_log_uri));
    }
    return obj;
}

QString OAIJobMetadata_JobLogInfo::getJobCompletionReportUri() const {
    return m_job_completion_report_uri;
}
void OAIJobMetadata_JobLogInfo::setJobCompletionReportUri(const QString &job_completion_report_uri) {
    m_job_completion_report_uri = job_completion_report_uri;
    m_job_completion_report_uri_isSet = true;
}

bool OAIJobMetadata_JobLogInfo::is_job_completion_report_uri_Set() const{
    return m_job_completion_report_uri_isSet;
}

bool OAIJobMetadata_JobLogInfo::is_job_completion_report_uri_Valid() const{
    return m_job_completion_report_uri_isValid;
}

QString OAIJobMetadata_JobLogInfo::getJobSuccessLogUri() const {
    return m_job_success_log_uri;
}
void OAIJobMetadata_JobLogInfo::setJobSuccessLogUri(const QString &job_success_log_uri) {
    m_job_success_log_uri = job_success_log_uri;
    m_job_success_log_uri_isSet = true;
}

bool OAIJobMetadata_JobLogInfo::is_job_success_log_uri_Set() const{
    return m_job_success_log_uri_isSet;
}

bool OAIJobMetadata_JobLogInfo::is_job_success_log_uri_Valid() const{
    return m_job_success_log_uri_isValid;
}

QString OAIJobMetadata_JobLogInfo::getJobFailureLogUri() const {
    return m_job_failure_log_uri;
}
void OAIJobMetadata_JobLogInfo::setJobFailureLogUri(const QString &job_failure_log_uri) {
    m_job_failure_log_uri = job_failure_log_uri;
    m_job_failure_log_uri_isSet = true;
}

bool OAIJobMetadata_JobLogInfo::is_job_failure_log_uri_Set() const{
    return m_job_failure_log_uri_isSet;
}

bool OAIJobMetadata_JobLogInfo::is_job_failure_log_uri_Valid() const{
    return m_job_failure_log_uri_isValid;
}

bool OAIJobMetadata_JobLogInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_completion_report_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_success_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_failure_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobMetadata_JobLogInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
