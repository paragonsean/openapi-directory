/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListLongTermPricingResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListLongTermPricingResult::OAIListLongTermPricingResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListLongTermPricingResult::OAIListLongTermPricingResult() {
    this->initializeModel();
}

OAIListLongTermPricingResult::~OAIListLongTermPricingResult() {}

void OAIListLongTermPricingResult::initializeModel() {

    m_long_term_pricing_entries_isSet = false;
    m_long_term_pricing_entries_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListLongTermPricingResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListLongTermPricingResult::fromJsonObject(QJsonObject json) {

    m_long_term_pricing_entries_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_entries, json[QString("LongTermPricingEntries")]);
    m_long_term_pricing_entries_isSet = !json[QString("LongTermPricingEntries")].isNull() && m_long_term_pricing_entries_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListLongTermPricingResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListLongTermPricingResult::asJsonObject() const {
    QJsonObject obj;
    if (m_long_term_pricing_entries.isSet()) {
        obj.insert(QString("LongTermPricingEntries"), ::OpenAPI::toJsonValue(m_long_term_pricing_entries));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListLongTermPricingResult::getLongTermPricingEntries() const {
    return m_long_term_pricing_entries;
}
void OAIListLongTermPricingResult::setLongTermPricingEntries(const QList &long_term_pricing_entries) {
    m_long_term_pricing_entries = long_term_pricing_entries;
    m_long_term_pricing_entries_isSet = true;
}

bool OAIListLongTermPricingResult::is_long_term_pricing_entries_Set() const{
    return m_long_term_pricing_entries_isSet;
}

bool OAIListLongTermPricingResult::is_long_term_pricing_entries_Valid() const{
    return m_long_term_pricing_entries_isValid;
}

QString OAIListLongTermPricingResult::getNextToken() const {
    return m_next_token;
}
void OAIListLongTermPricingResult::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListLongTermPricingResult::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListLongTermPricingResult::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListLongTermPricingResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_long_term_pricing_entries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListLongTermPricingResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
