/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListServiceVersionsRequest.h
 *
 * 
 */

#ifndef OAIListServiceVersionsRequest_H
#define OAIListServiceVersionsRequest_H

#include <QJsonObject>

#include "OAIServiceName.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListServiceVersionsRequest : public OAIObject {
public:
    OAIListServiceVersionsRequest();
    OAIListServiceVersionsRequest(QString json);
    ~OAIListServiceVersionsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIServiceName getServiceName() const;
    void setServiceName(const OAIServiceName &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    QList getDependentServices() const;
    void setDependentServices(const QList &dependent_services);
    bool is_dependent_services_Set() const;
    bool is_dependent_services_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIServiceName m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    QList m_dependent_services;
    bool m_dependent_services_isSet;
    bool m_dependent_services_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListServiceVersionsRequest)

#endif // OAIListServiceVersionsRequest_H
