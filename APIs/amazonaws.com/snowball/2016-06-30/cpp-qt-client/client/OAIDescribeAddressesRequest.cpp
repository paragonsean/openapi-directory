/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAddressesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAddressesRequest::OAIDescribeAddressesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAddressesRequest::OAIDescribeAddressesRequest() {
    this->initializeModel();
}

OAIDescribeAddressesRequest::~OAIDescribeAddressesRequest() {}

void OAIDescribeAddressesRequest::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeAddressesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAddressesRequest::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeAddressesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAddressesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

qint32 OAIDescribeAddressesRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeAddressesRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeAddressesRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeAddressesRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeAddressesRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeAddressesRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeAddressesRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeAddressesRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeAddressesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAddressesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
