/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterState::OAIClusterState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterState::OAIClusterState() {
    this->initializeModel();
}

OAIClusterState::~OAIClusterState() {}

void OAIClusterState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIClusterState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIClusterState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AwaitingQuorum", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::AWAITINGQUORUM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pending", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::PENDING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InUse", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::INUSE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Complete", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::COMPLETE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIClusterState::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIClusterState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIClusterState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIClusterState::AWAITINGQUORUM:
            val = "AwaitingQuorum";
            break;
        case eOAIClusterState::PENDING:
            val = "Pending";
            break;
        case eOAIClusterState::INUSE:
            val = "InUse";
            break;
        case eOAIClusterState::COMPLETE:
            val = "Complete";
            break;
        case eOAIClusterState::CANCELLED:
            val = "Cancelled";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIClusterState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIClusterState::eOAIClusterState OAIClusterState::getValue() const {
    return m_value;
}

void OAIClusterState::setValue(const OAIClusterState::eOAIClusterState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIClusterState::isSet() const {
    
    return m_value_isSet;
}

bool OAIClusterState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
