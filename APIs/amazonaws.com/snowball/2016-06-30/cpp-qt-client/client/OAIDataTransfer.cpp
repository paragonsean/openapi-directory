/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataTransfer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataTransfer::OAIDataTransfer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataTransfer::OAIDataTransfer() {
    this->initializeModel();
}

OAIDataTransfer::~OAIDataTransfer() {}

void OAIDataTransfer::initializeModel() {

    m_bytes_transferred_isSet = false;
    m_bytes_transferred_isValid = false;

    m_objects_transferred_isSet = false;
    m_objects_transferred_isValid = false;

    m_total_bytes_isSet = false;
    m_total_bytes_isValid = false;

    m_total_objects_isSet = false;
    m_total_objects_isValid = false;
}

void OAIDataTransfer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataTransfer::fromJsonObject(QJsonObject json) {

    m_bytes_transferred_isValid = ::OpenAPI::fromJsonValue(m_bytes_transferred, json[QString("BytesTransferred")]);
    m_bytes_transferred_isSet = !json[QString("BytesTransferred")].isNull() && m_bytes_transferred_isValid;

    m_objects_transferred_isValid = ::OpenAPI::fromJsonValue(m_objects_transferred, json[QString("ObjectsTransferred")]);
    m_objects_transferred_isSet = !json[QString("ObjectsTransferred")].isNull() && m_objects_transferred_isValid;

    m_total_bytes_isValid = ::OpenAPI::fromJsonValue(m_total_bytes, json[QString("TotalBytes")]);
    m_total_bytes_isSet = !json[QString("TotalBytes")].isNull() && m_total_bytes_isValid;

    m_total_objects_isValid = ::OpenAPI::fromJsonValue(m_total_objects, json[QString("TotalObjects")]);
    m_total_objects_isSet = !json[QString("TotalObjects")].isNull() && m_total_objects_isValid;
}

QString OAIDataTransfer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataTransfer::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_transferred_isSet) {
        obj.insert(QString("BytesTransferred"), ::OpenAPI::toJsonValue(m_bytes_transferred));
    }
    if (m_objects_transferred_isSet) {
        obj.insert(QString("ObjectsTransferred"), ::OpenAPI::toJsonValue(m_objects_transferred));
    }
    if (m_total_bytes_isSet) {
        obj.insert(QString("TotalBytes"), ::OpenAPI::toJsonValue(m_total_bytes));
    }
    if (m_total_objects_isSet) {
        obj.insert(QString("TotalObjects"), ::OpenAPI::toJsonValue(m_total_objects));
    }
    return obj;
}

qint32 OAIDataTransfer::getBytesTransferred() const {
    return m_bytes_transferred;
}
void OAIDataTransfer::setBytesTransferred(const qint32 &bytes_transferred) {
    m_bytes_transferred = bytes_transferred;
    m_bytes_transferred_isSet = true;
}

bool OAIDataTransfer::is_bytes_transferred_Set() const{
    return m_bytes_transferred_isSet;
}

bool OAIDataTransfer::is_bytes_transferred_Valid() const{
    return m_bytes_transferred_isValid;
}

qint32 OAIDataTransfer::getObjectsTransferred() const {
    return m_objects_transferred;
}
void OAIDataTransfer::setObjectsTransferred(const qint32 &objects_transferred) {
    m_objects_transferred = objects_transferred;
    m_objects_transferred_isSet = true;
}

bool OAIDataTransfer::is_objects_transferred_Set() const{
    return m_objects_transferred_isSet;
}

bool OAIDataTransfer::is_objects_transferred_Valid() const{
    return m_objects_transferred_isValid;
}

qint32 OAIDataTransfer::getTotalBytes() const {
    return m_total_bytes;
}
void OAIDataTransfer::setTotalBytes(const qint32 &total_bytes) {
    m_total_bytes = total_bytes;
    m_total_bytes_isSet = true;
}

bool OAIDataTransfer::is_total_bytes_Set() const{
    return m_total_bytes_isSet;
}

bool OAIDataTransfer::is_total_bytes_Valid() const{
    return m_total_bytes_isValid;
}

qint32 OAIDataTransfer::getTotalObjects() const {
    return m_total_objects;
}
void OAIDataTransfer::setTotalObjects(const qint32 &total_objects) {
    m_total_objects = total_objects;
    m_total_objects_isSet = true;
}

bool OAIDataTransfer::is_total_objects_Set() const{
    return m_total_objects_isSet;
}

bool OAIDataTransfer::is_total_objects_Valid() const{
    return m_total_objects_isValid;
}

bool OAIDataTransfer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_objects_transferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_objects_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataTransfer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
