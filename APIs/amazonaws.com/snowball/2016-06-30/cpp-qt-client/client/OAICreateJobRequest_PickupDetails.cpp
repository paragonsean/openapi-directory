/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateJobRequest_PickupDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateJobRequest_PickupDetails::OAICreateJobRequest_PickupDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateJobRequest_PickupDetails::OAICreateJobRequest_PickupDetails() {
    this->initializeModel();
}

OAICreateJobRequest_PickupDetails::~OAICreateJobRequest_PickupDetails() {}

void OAICreateJobRequest_PickupDetails::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_identification_number_isSet = false;
    m_identification_number_isValid = false;

    m_identification_expiration_date_isSet = false;
    m_identification_expiration_date_isValid = false;

    m_identification_issuing_org_isSet = false;
    m_identification_issuing_org_isValid = false;

    m_device_pickup_id_isSet = false;
    m_device_pickup_id_isValid = false;
}

void OAICreateJobRequest_PickupDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateJobRequest_PickupDetails::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_identification_number_isValid = ::OpenAPI::fromJsonValue(m_identification_number, json[QString("IdentificationNumber")]);
    m_identification_number_isSet = !json[QString("IdentificationNumber")].isNull() && m_identification_number_isValid;

    m_identification_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_identification_expiration_date, json[QString("IdentificationExpirationDate")]);
    m_identification_expiration_date_isSet = !json[QString("IdentificationExpirationDate")].isNull() && m_identification_expiration_date_isValid;

    m_identification_issuing_org_isValid = ::OpenAPI::fromJsonValue(m_identification_issuing_org, json[QString("IdentificationIssuingOrg")]);
    m_identification_issuing_org_isSet = !json[QString("IdentificationIssuingOrg")].isNull() && m_identification_issuing_org_isValid;

    m_device_pickup_id_isValid = ::OpenAPI::fromJsonValue(m_device_pickup_id, json[QString("DevicePickupId")]);
    m_device_pickup_id_isSet = !json[QString("DevicePickupId")].isNull() && m_device_pickup_id_isValid;
}

QString OAICreateJobRequest_PickupDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateJobRequest_PickupDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_email_isSet) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_identification_number_isSet) {
        obj.insert(QString("IdentificationNumber"), ::OpenAPI::toJsonValue(m_identification_number));
    }
    if (m_identification_expiration_date_isSet) {
        obj.insert(QString("IdentificationExpirationDate"), ::OpenAPI::toJsonValue(m_identification_expiration_date));
    }
    if (m_identification_issuing_org_isSet) {
        obj.insert(QString("IdentificationIssuingOrg"), ::OpenAPI::toJsonValue(m_identification_issuing_org));
    }
    if (m_device_pickup_id_isSet) {
        obj.insert(QString("DevicePickupId"), ::OpenAPI::toJsonValue(m_device_pickup_id));
    }
    return obj;
}

QString OAICreateJobRequest_PickupDetails::getName() const {
    return m_name;
}
void OAICreateJobRequest_PickupDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateJobRequest_PickupDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateJobRequest_PickupDetails::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateJobRequest_PickupDetails::getPhoneNumber() const {
    return m_phone_number;
}
void OAICreateJobRequest_PickupDetails::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAICreateJobRequest_PickupDetails::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAICreateJobRequest_PickupDetails::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAICreateJobRequest_PickupDetails::getEmail() const {
    return m_email;
}
void OAICreateJobRequest_PickupDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAICreateJobRequest_PickupDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAICreateJobRequest_PickupDetails::is_email_Valid() const{
    return m_email_isValid;
}

QString OAICreateJobRequest_PickupDetails::getIdentificationNumber() const {
    return m_identification_number;
}
void OAICreateJobRequest_PickupDetails::setIdentificationNumber(const QString &identification_number) {
    m_identification_number = identification_number;
    m_identification_number_isSet = true;
}

bool OAICreateJobRequest_PickupDetails::is_identification_number_Set() const{
    return m_identification_number_isSet;
}

bool OAICreateJobRequest_PickupDetails::is_identification_number_Valid() const{
    return m_identification_number_isValid;
}

QDateTime OAICreateJobRequest_PickupDetails::getIdentificationExpirationDate() const {
    return m_identification_expiration_date;
}
void OAICreateJobRequest_PickupDetails::setIdentificationExpirationDate(const QDateTime &identification_expiration_date) {
    m_identification_expiration_date = identification_expiration_date;
    m_identification_expiration_date_isSet = true;
}

bool OAICreateJobRequest_PickupDetails::is_identification_expiration_date_Set() const{
    return m_identification_expiration_date_isSet;
}

bool OAICreateJobRequest_PickupDetails::is_identification_expiration_date_Valid() const{
    return m_identification_expiration_date_isValid;
}

QString OAICreateJobRequest_PickupDetails::getIdentificationIssuingOrg() const {
    return m_identification_issuing_org;
}
void OAICreateJobRequest_PickupDetails::setIdentificationIssuingOrg(const QString &identification_issuing_org) {
    m_identification_issuing_org = identification_issuing_org;
    m_identification_issuing_org_isSet = true;
}

bool OAICreateJobRequest_PickupDetails::is_identification_issuing_org_Set() const{
    return m_identification_issuing_org_isSet;
}

bool OAICreateJobRequest_PickupDetails::is_identification_issuing_org_Valid() const{
    return m_identification_issuing_org_isValid;
}

QString OAICreateJobRequest_PickupDetails::getDevicePickupId() const {
    return m_device_pickup_id;
}
void OAICreateJobRequest_PickupDetails::setDevicePickupId(const QString &device_pickup_id) {
    m_device_pickup_id = device_pickup_id;
    m_device_pickup_id_isSet = true;
}

bool OAICreateJobRequest_PickupDetails::is_device_pickup_id_Set() const{
    return m_device_pickup_id_isSet;
}

bool OAICreateJobRequest_PickupDetails::is_device_pickup_id_Valid() const{
    return m_device_pickup_id_isValid;
}

bool OAICreateJobRequest_PickupDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_issuing_org_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_pickup_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateJobRequest_PickupDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
