/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILambdaResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILambdaResource::OAILambdaResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILambdaResource::OAILambdaResource() {
    this->initializeModel();
}

OAILambdaResource::~OAILambdaResource() {}

void OAILambdaResource::initializeModel() {

    m_lambda_arn_isSet = false;
    m_lambda_arn_isValid = false;

    m_event_triggers_isSet = false;
    m_event_triggers_isValid = false;
}

void OAILambdaResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILambdaResource::fromJsonObject(QJsonObject json) {

    m_lambda_arn_isValid = ::OpenAPI::fromJsonValue(m_lambda_arn, json[QString("LambdaArn")]);
    m_lambda_arn_isSet = !json[QString("LambdaArn")].isNull() && m_lambda_arn_isValid;

    m_event_triggers_isValid = ::OpenAPI::fromJsonValue(m_event_triggers, json[QString("EventTriggers")]);
    m_event_triggers_isSet = !json[QString("EventTriggers")].isNull() && m_event_triggers_isValid;
}

QString OAILambdaResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILambdaResource::asJsonObject() const {
    QJsonObject obj;
    if (m_lambda_arn_isSet) {
        obj.insert(QString("LambdaArn"), ::OpenAPI::toJsonValue(m_lambda_arn));
    }
    if (m_event_triggers.isSet()) {
        obj.insert(QString("EventTriggers"), ::OpenAPI::toJsonValue(m_event_triggers));
    }
    return obj;
}

QString OAILambdaResource::getLambdaArn() const {
    return m_lambda_arn;
}
void OAILambdaResource::setLambdaArn(const QString &lambda_arn) {
    m_lambda_arn = lambda_arn;
    m_lambda_arn_isSet = true;
}

bool OAILambdaResource::is_lambda_arn_Set() const{
    return m_lambda_arn_isSet;
}

bool OAILambdaResource::is_lambda_arn_Valid() const{
    return m_lambda_arn_isValid;
}

QList OAILambdaResource::getEventTriggers() const {
    return m_event_triggers;
}
void OAILambdaResource::setEventTriggers(const QList &event_triggers) {
    m_event_triggers = event_triggers;
    m_event_triggers_isSet = true;
}

bool OAILambdaResource::is_event_triggers_Set() const{
    return m_event_triggers_isSet;
}

bool OAILambdaResource::is_event_triggers_Valid() const{
    return m_event_triggers_isValid;
}

bool OAILambdaResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lambda_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_triggers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILambdaResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
