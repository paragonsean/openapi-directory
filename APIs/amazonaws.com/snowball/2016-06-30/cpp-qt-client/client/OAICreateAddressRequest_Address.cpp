/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAddressRequest_Address.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAddressRequest_Address::OAICreateAddressRequest_Address(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAddressRequest_Address::OAICreateAddressRequest_Address() {
    this->initializeModel();
}

OAICreateAddressRequest_Address::~OAICreateAddressRequest_Address() {}

void OAICreateAddressRequest_Address::initializeModel() {

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_street1_isSet = false;
    m_street1_isValid = false;

    m_street2_isSet = false;
    m_street2_isValid = false;

    m_street3_isSet = false;
    m_street3_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;

    m_prefecture_or_district_isSet = false;
    m_prefecture_or_district_isValid = false;

    m_landmark_isSet = false;
    m_landmark_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_is_restricted_isSet = false;
    m_is_restricted_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICreateAddressRequest_Address::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAddressRequest_Address::fromJsonObject(QJsonObject json) {

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("AddressId")]);
    m_address_id_isSet = !json[QString("AddressId")].isNull() && m_address_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("Company")]);
    m_company_isSet = !json[QString("Company")].isNull() && m_company_isValid;

    m_street1_isValid = ::OpenAPI::fromJsonValue(m_street1, json[QString("Street1")]);
    m_street1_isSet = !json[QString("Street1")].isNull() && m_street1_isValid;

    m_street2_isValid = ::OpenAPI::fromJsonValue(m_street2, json[QString("Street2")]);
    m_street2_isSet = !json[QString("Street2")].isNull() && m_street2_isValid;

    m_street3_isValid = ::OpenAPI::fromJsonValue(m_street3, json[QString("Street3")]);
    m_street3_isSet = !json[QString("Street3")].isNull() && m_street3_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("City")]);
    m_city_isSet = !json[QString("City")].isNull() && m_city_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("StateOrProvince")]);
    m_state_or_province_isSet = !json[QString("StateOrProvince")].isNull() && m_state_or_province_isValid;

    m_prefecture_or_district_isValid = ::OpenAPI::fromJsonValue(m_prefecture_or_district, json[QString("PrefectureOrDistrict")]);
    m_prefecture_or_district_isSet = !json[QString("PrefectureOrDistrict")].isNull() && m_prefecture_or_district_isValid;

    m_landmark_isValid = ::OpenAPI::fromJsonValue(m_landmark, json[QString("Landmark")]);
    m_landmark_isSet = !json[QString("Landmark")].isNull() && m_landmark_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("Country")]);
    m_country_isSet = !json[QString("Country")].isNull() && m_country_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("PostalCode")]);
    m_postal_code_isSet = !json[QString("PostalCode")].isNull() && m_postal_code_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("PhoneNumber")]);
    m_phone_number_isSet = !json[QString("PhoneNumber")].isNull() && m_phone_number_isValid;

    m_is_restricted_isValid = ::OpenAPI::fromJsonValue(m_is_restricted, json[QString("IsRestricted")]);
    m_is_restricted_isSet = !json[QString("IsRestricted")].isNull() && m_is_restricted_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAICreateAddressRequest_Address::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAddressRequest_Address::asJsonObject() const {
    QJsonObject obj;
    if (m_address_id_isSet) {
        obj.insert(QString("AddressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_company_isSet) {
        obj.insert(QString("Company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_street1_isSet) {
        obj.insert(QString("Street1"), ::OpenAPI::toJsonValue(m_street1));
    }
    if (m_street2_isSet) {
        obj.insert(QString("Street2"), ::OpenAPI::toJsonValue(m_street2));
    }
    if (m_street3_isSet) {
        obj.insert(QString("Street3"), ::OpenAPI::toJsonValue(m_street3));
    }
    if (m_city_isSet) {
        obj.insert(QString("City"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("StateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    if (m_prefecture_or_district_isSet) {
        obj.insert(QString("PrefectureOrDistrict"), ::OpenAPI::toJsonValue(m_prefecture_or_district));
    }
    if (m_landmark_isSet) {
        obj.insert(QString("Landmark"), ::OpenAPI::toJsonValue(m_landmark));
    }
    if (m_country_isSet) {
        obj.insert(QString("Country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("PostalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("PhoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_is_restricted_isSet) {
        obj.insert(QString("IsRestricted"), ::OpenAPI::toJsonValue(m_is_restricted));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICreateAddressRequest_Address::getAddressId() const {
    return m_address_id;
}
void OAICreateAddressRequest_Address::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAICreateAddressRequest_Address::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAICreateAddressRequest_Address::is_address_id_Valid() const{
    return m_address_id_isValid;
}

QString OAICreateAddressRequest_Address::getName() const {
    return m_name;
}
void OAICreateAddressRequest_Address::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAddressRequest_Address::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAddressRequest_Address::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAddressRequest_Address::getCompany() const {
    return m_company;
}
void OAICreateAddressRequest_Address::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAICreateAddressRequest_Address::is_company_Set() const{
    return m_company_isSet;
}

bool OAICreateAddressRequest_Address::is_company_Valid() const{
    return m_company_isValid;
}

QString OAICreateAddressRequest_Address::getStreet1() const {
    return m_street1;
}
void OAICreateAddressRequest_Address::setStreet1(const QString &street1) {
    m_street1 = street1;
    m_street1_isSet = true;
}

bool OAICreateAddressRequest_Address::is_street1_Set() const{
    return m_street1_isSet;
}

bool OAICreateAddressRequest_Address::is_street1_Valid() const{
    return m_street1_isValid;
}

QString OAICreateAddressRequest_Address::getStreet2() const {
    return m_street2;
}
void OAICreateAddressRequest_Address::setStreet2(const QString &street2) {
    m_street2 = street2;
    m_street2_isSet = true;
}

bool OAICreateAddressRequest_Address::is_street2_Set() const{
    return m_street2_isSet;
}

bool OAICreateAddressRequest_Address::is_street2_Valid() const{
    return m_street2_isValid;
}

QString OAICreateAddressRequest_Address::getStreet3() const {
    return m_street3;
}
void OAICreateAddressRequest_Address::setStreet3(const QString &street3) {
    m_street3 = street3;
    m_street3_isSet = true;
}

bool OAICreateAddressRequest_Address::is_street3_Set() const{
    return m_street3_isSet;
}

bool OAICreateAddressRequest_Address::is_street3_Valid() const{
    return m_street3_isValid;
}

QString OAICreateAddressRequest_Address::getCity() const {
    return m_city;
}
void OAICreateAddressRequest_Address::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAICreateAddressRequest_Address::is_city_Set() const{
    return m_city_isSet;
}

bool OAICreateAddressRequest_Address::is_city_Valid() const{
    return m_city_isValid;
}

QString OAICreateAddressRequest_Address::getStateOrProvince() const {
    return m_state_or_province;
}
void OAICreateAddressRequest_Address::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAICreateAddressRequest_Address::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAICreateAddressRequest_Address::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

QString OAICreateAddressRequest_Address::getPrefectureOrDistrict() const {
    return m_prefecture_or_district;
}
void OAICreateAddressRequest_Address::setPrefectureOrDistrict(const QString &prefecture_or_district) {
    m_prefecture_or_district = prefecture_or_district;
    m_prefecture_or_district_isSet = true;
}

bool OAICreateAddressRequest_Address::is_prefecture_or_district_Set() const{
    return m_prefecture_or_district_isSet;
}

bool OAICreateAddressRequest_Address::is_prefecture_or_district_Valid() const{
    return m_prefecture_or_district_isValid;
}

QString OAICreateAddressRequest_Address::getLandmark() const {
    return m_landmark;
}
void OAICreateAddressRequest_Address::setLandmark(const QString &landmark) {
    m_landmark = landmark;
    m_landmark_isSet = true;
}

bool OAICreateAddressRequest_Address::is_landmark_Set() const{
    return m_landmark_isSet;
}

bool OAICreateAddressRequest_Address::is_landmark_Valid() const{
    return m_landmark_isValid;
}

QString OAICreateAddressRequest_Address::getCountry() const {
    return m_country;
}
void OAICreateAddressRequest_Address::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICreateAddressRequest_Address::is_country_Set() const{
    return m_country_isSet;
}

bool OAICreateAddressRequest_Address::is_country_Valid() const{
    return m_country_isValid;
}

QString OAICreateAddressRequest_Address::getPostalCode() const {
    return m_postal_code;
}
void OAICreateAddressRequest_Address::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAICreateAddressRequest_Address::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAICreateAddressRequest_Address::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAICreateAddressRequest_Address::getPhoneNumber() const {
    return m_phone_number;
}
void OAICreateAddressRequest_Address::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAICreateAddressRequest_Address::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAICreateAddressRequest_Address::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

bool OAICreateAddressRequest_Address::getIsRestricted() const {
    return m_is_restricted;
}
void OAICreateAddressRequest_Address::setIsRestricted(const bool &is_restricted) {
    m_is_restricted = is_restricted;
    m_is_restricted_isSet = true;
}

bool OAICreateAddressRequest_Address::is_is_restricted_Set() const{
    return m_is_restricted_isSet;
}

bool OAICreateAddressRequest_Address::is_is_restricted_Valid() const{
    return m_is_restricted_isValid;
}

OAIAddressType OAICreateAddressRequest_Address::getType() const {
    return m_type;
}
void OAICreateAddressRequest_Address::setType(const OAIAddressType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateAddressRequest_Address::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateAddressRequest_Address::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICreateAddressRequest_Address::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefecture_or_district_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landmark_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_restricted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAddressRequest_Address::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
