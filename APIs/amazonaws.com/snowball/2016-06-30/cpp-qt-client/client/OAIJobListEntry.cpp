/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobListEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobListEntry::OAIJobListEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobListEntry::OAIJobListEntry() {
    this->initializeModel();
}

OAIJobListEntry::~OAIJobListEntry() {}

void OAIJobListEntry::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_job_state_isSet = false;
    m_job_state_isValid = false;

    m_is_master_isSet = false;
    m_is_master_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_snowball_type_isSet = false;
    m_snowball_type_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIJobListEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobListEntry::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_job_state_isValid = ::OpenAPI::fromJsonValue(m_job_state, json[QString("JobState")]);
    m_job_state_isSet = !json[QString("JobState")].isNull() && m_job_state_isValid;

    m_is_master_isValid = ::OpenAPI::fromJsonValue(m_is_master, json[QString("IsMaster")]);
    m_is_master_isSet = !json[QString("IsMaster")].isNull() && m_is_master_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_snowball_type_isValid = ::OpenAPI::fromJsonValue(m_snowball_type, json[QString("SnowballType")]);
    m_snowball_type_isSet = !json[QString("SnowballType")].isNull() && m_snowball_type_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIJobListEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobListEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_job_state.isSet()) {
        obj.insert(QString("JobState"), ::OpenAPI::toJsonValue(m_job_state));
    }
    if (m_is_master_isSet) {
        obj.insert(QString("IsMaster"), ::OpenAPI::toJsonValue(m_is_master));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_snowball_type.isSet()) {
        obj.insert(QString("SnowballType"), ::OpenAPI::toJsonValue(m_snowball_type));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

QString OAIJobListEntry::getJobId() const {
    return m_job_id;
}
void OAIJobListEntry::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJobListEntry::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJobListEntry::is_job_id_Valid() const{
    return m_job_id_isValid;
}

OAIJobState OAIJobListEntry::getJobState() const {
    return m_job_state;
}
void OAIJobListEntry::setJobState(const OAIJobState &job_state) {
    m_job_state = job_state;
    m_job_state_isSet = true;
}

bool OAIJobListEntry::is_job_state_Set() const{
    return m_job_state_isSet;
}

bool OAIJobListEntry::is_job_state_Valid() const{
    return m_job_state_isValid;
}

bool OAIJobListEntry::getIsMaster() const {
    return m_is_master;
}
void OAIJobListEntry::setIsMaster(const bool &is_master) {
    m_is_master = is_master;
    m_is_master_isSet = true;
}

bool OAIJobListEntry::is_is_master_Set() const{
    return m_is_master_isSet;
}

bool OAIJobListEntry::is_is_master_Valid() const{
    return m_is_master_isValid;
}

OAIJobType OAIJobListEntry::getJobType() const {
    return m_job_type;
}
void OAIJobListEntry::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIJobListEntry::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIJobListEntry::is_job_type_Valid() const{
    return m_job_type_isValid;
}

OAISnowballType OAIJobListEntry::getSnowballType() const {
    return m_snowball_type;
}
void OAIJobListEntry::setSnowballType(const OAISnowballType &snowball_type) {
    m_snowball_type = snowball_type;
    m_snowball_type_isSet = true;
}

bool OAIJobListEntry::is_snowball_type_Set() const{
    return m_snowball_type_isSet;
}

bool OAIJobListEntry::is_snowball_type_Valid() const{
    return m_snowball_type_isValid;
}

QDateTime OAIJobListEntry::getCreationDate() const {
    return m_creation_date;
}
void OAIJobListEntry::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIJobListEntry::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIJobListEntry::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIJobListEntry::getDescription() const {
    return m_description;
}
void OAIJobListEntry::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIJobListEntry::is_description_Set() const{
    return m_description_isSet;
}

bool OAIJobListEntry::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIJobListEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_master_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobListEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
