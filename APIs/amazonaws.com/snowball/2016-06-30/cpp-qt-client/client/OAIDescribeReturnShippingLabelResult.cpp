/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeReturnShippingLabelResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeReturnShippingLabelResult::OAIDescribeReturnShippingLabelResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeReturnShippingLabelResult::OAIDescribeReturnShippingLabelResult() {
    this->initializeModel();
}

OAIDescribeReturnShippingLabelResult::~OAIDescribeReturnShippingLabelResult() {}

void OAIDescribeReturnShippingLabelResult::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_return_shipping_label_uri_isSet = false;
    m_return_shipping_label_uri_isValid = false;
}

void OAIDescribeReturnShippingLabelResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeReturnShippingLabelResult::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("ExpirationDate")]);
    m_expiration_date_isSet = !json[QString("ExpirationDate")].isNull() && m_expiration_date_isValid;

    m_return_shipping_label_uri_isValid = ::OpenAPI::fromJsonValue(m_return_shipping_label_uri, json[QString("ReturnShippingLabelURI")]);
    m_return_shipping_label_uri_isSet = !json[QString("ReturnShippingLabelURI")].isNull() && m_return_shipping_label_uri_isValid;
}

QString OAIDescribeReturnShippingLabelResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeReturnShippingLabelResult::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("ExpirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_return_shipping_label_uri_isSet) {
        obj.insert(QString("ReturnShippingLabelURI"), ::OpenAPI::toJsonValue(m_return_shipping_label_uri));
    }
    return obj;
}

OAIShippingLabelStatus OAIDescribeReturnShippingLabelResult::getStatus() const {
    return m_status;
}
void OAIDescribeReturnShippingLabelResult::setStatus(const OAIShippingLabelStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDescribeReturnShippingLabelResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDescribeReturnShippingLabelResult::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIDescribeReturnShippingLabelResult::getExpirationDate() const {
    return m_expiration_date;
}
void OAIDescribeReturnShippingLabelResult::setExpirationDate(const QDateTime &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIDescribeReturnShippingLabelResult::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIDescribeReturnShippingLabelResult::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIDescribeReturnShippingLabelResult::getReturnShippingLabelUri() const {
    return m_return_shipping_label_uri;
}
void OAIDescribeReturnShippingLabelResult::setReturnShippingLabelUri(const QString &return_shipping_label_uri) {
    m_return_shipping_label_uri = return_shipping_label_uri;
    m_return_shipping_label_uri_isSet = true;
}

bool OAIDescribeReturnShippingLabelResult::is_return_shipping_label_uri_Set() const{
    return m_return_shipping_label_uri_isSet;
}

bool OAIDescribeReturnShippingLabelResult::is_return_shipping_label_uri_Valid() const{
    return m_return_shipping_label_uri_isValid;
}

bool OAIDescribeReturnShippingLabelResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_shipping_label_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeReturnShippingLabelResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
