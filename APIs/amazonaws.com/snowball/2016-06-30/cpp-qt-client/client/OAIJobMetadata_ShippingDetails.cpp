/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobMetadata_ShippingDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobMetadata_ShippingDetails::OAIJobMetadata_ShippingDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobMetadata_ShippingDetails::OAIJobMetadata_ShippingDetails() {
    this->initializeModel();
}

OAIJobMetadata_ShippingDetails::~OAIJobMetadata_ShippingDetails() {}

void OAIJobMetadata_ShippingDetails::initializeModel() {

    m_shipping_option_isSet = false;
    m_shipping_option_isValid = false;

    m_inbound_shipment_isSet = false;
    m_inbound_shipment_isValid = false;

    m_outbound_shipment_isSet = false;
    m_outbound_shipment_isValid = false;
}

void OAIJobMetadata_ShippingDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobMetadata_ShippingDetails::fromJsonObject(QJsonObject json) {

    m_shipping_option_isValid = ::OpenAPI::fromJsonValue(m_shipping_option, json[QString("ShippingOption")]);
    m_shipping_option_isSet = !json[QString("ShippingOption")].isNull() && m_shipping_option_isValid;

    m_inbound_shipment_isValid = ::OpenAPI::fromJsonValue(m_inbound_shipment, json[QString("InboundShipment")]);
    m_inbound_shipment_isSet = !json[QString("InboundShipment")].isNull() && m_inbound_shipment_isValid;

    m_outbound_shipment_isValid = ::OpenAPI::fromJsonValue(m_outbound_shipment, json[QString("OutboundShipment")]);
    m_outbound_shipment_isSet = !json[QString("OutboundShipment")].isNull() && m_outbound_shipment_isValid;
}

QString OAIJobMetadata_ShippingDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobMetadata_ShippingDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_shipping_option.isSet()) {
        obj.insert(QString("ShippingOption"), ::OpenAPI::toJsonValue(m_shipping_option));
    }
    if (m_inbound_shipment.isSet()) {
        obj.insert(QString("InboundShipment"), ::OpenAPI::toJsonValue(m_inbound_shipment));
    }
    if (m_outbound_shipment.isSet()) {
        obj.insert(QString("OutboundShipment"), ::OpenAPI::toJsonValue(m_outbound_shipment));
    }
    return obj;
}

OAIShippingOption OAIJobMetadata_ShippingDetails::getShippingOption() const {
    return m_shipping_option;
}
void OAIJobMetadata_ShippingDetails::setShippingOption(const OAIShippingOption &shipping_option) {
    m_shipping_option = shipping_option;
    m_shipping_option_isSet = true;
}

bool OAIJobMetadata_ShippingDetails::is_shipping_option_Set() const{
    return m_shipping_option_isSet;
}

bool OAIJobMetadata_ShippingDetails::is_shipping_option_Valid() const{
    return m_shipping_option_isValid;
}

OAIShippingDetails_InboundShipment OAIJobMetadata_ShippingDetails::getInboundShipment() const {
    return m_inbound_shipment;
}
void OAIJobMetadata_ShippingDetails::setInboundShipment(const OAIShippingDetails_InboundShipment &inbound_shipment) {
    m_inbound_shipment = inbound_shipment;
    m_inbound_shipment_isSet = true;
}

bool OAIJobMetadata_ShippingDetails::is_inbound_shipment_Set() const{
    return m_inbound_shipment_isSet;
}

bool OAIJobMetadata_ShippingDetails::is_inbound_shipment_Valid() const{
    return m_inbound_shipment_isValid;
}

OAIShippingDetails_OutboundShipment OAIJobMetadata_ShippingDetails::getOutboundShipment() const {
    return m_outbound_shipment;
}
void OAIJobMetadata_ShippingDetails::setOutboundShipment(const OAIShippingDetails_OutboundShipment &outbound_shipment) {
    m_outbound_shipment = outbound_shipment;
    m_outbound_shipment_isSet = true;
}

bool OAIJobMetadata_ShippingDetails::is_outbound_shipment_Set() const{
    return m_outbound_shipment_isSet;
}

bool OAIJobMetadata_ShippingDetails::is_outbound_shipment_Valid() const{
    return m_outbound_shipment_isValid;
}

bool OAIJobMetadata_ShippingDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_shipping_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_inbound_shipment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outbound_shipment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobMetadata_ShippingDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
