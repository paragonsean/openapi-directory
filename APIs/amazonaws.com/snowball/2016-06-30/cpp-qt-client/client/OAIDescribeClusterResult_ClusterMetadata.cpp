/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeClusterResult_ClusterMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeClusterResult_ClusterMetadata::OAIDescribeClusterResult_ClusterMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeClusterResult_ClusterMetadata::OAIDescribeClusterResult_ClusterMetadata() {
    this->initializeModel();
}

OAIDescribeClusterResult_ClusterMetadata::~OAIDescribeClusterResult_ClusterMetadata() {}

void OAIDescribeClusterResult_ClusterMetadata::initializeModel() {

    m_cluster_id_isSet = false;
    m_cluster_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_kms_key_arn_isSet = false;
    m_kms_key_arn_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_cluster_state_isSet = false;
    m_cluster_state_isValid = false;

    m_job_type_isSet = false;
    m_job_type_isValid = false;

    m_snowball_type_isSet = false;
    m_snowball_type_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_shipping_option_isSet = false;
    m_shipping_option_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_forwarding_address_id_isSet = false;
    m_forwarding_address_id_isValid = false;

    m_tax_documents_isSet = false;
    m_tax_documents_isValid = false;

    m_on_device_service_configuration_isSet = false;
    m_on_device_service_configuration_isValid = false;
}

void OAIDescribeClusterResult_ClusterMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeClusterResult_ClusterMetadata::fromJsonObject(QJsonObject json) {

    m_cluster_id_isValid = ::OpenAPI::fromJsonValue(m_cluster_id, json[QString("ClusterId")]);
    m_cluster_id_isSet = !json[QString("ClusterId")].isNull() && m_cluster_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_kms_key_arn_isValid = ::OpenAPI::fromJsonValue(m_kms_key_arn, json[QString("KmsKeyARN")]);
    m_kms_key_arn_isSet = !json[QString("KmsKeyARN")].isNull() && m_kms_key_arn_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_cluster_state_isValid = ::OpenAPI::fromJsonValue(m_cluster_state, json[QString("ClusterState")]);
    m_cluster_state_isSet = !json[QString("ClusterState")].isNull() && m_cluster_state_isValid;

    m_job_type_isValid = ::OpenAPI::fromJsonValue(m_job_type, json[QString("JobType")]);
    m_job_type_isSet = !json[QString("JobType")].isNull() && m_job_type_isValid;

    m_snowball_type_isValid = ::OpenAPI::fromJsonValue(m_snowball_type, json[QString("SnowballType")]);
    m_snowball_type_isSet = !json[QString("SnowballType")].isNull() && m_snowball_type_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("CreationDate")]);
    m_creation_date_isSet = !json[QString("CreationDate")].isNull() && m_creation_date_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("AddressId")]);
    m_address_id_isSet = !json[QString("AddressId")].isNull() && m_address_id_isValid;

    m_shipping_option_isValid = ::OpenAPI::fromJsonValue(m_shipping_option, json[QString("ShippingOption")]);
    m_shipping_option_isSet = !json[QString("ShippingOption")].isNull() && m_shipping_option_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("Notification")]);
    m_notification_isSet = !json[QString("Notification")].isNull() && m_notification_isValid;

    m_forwarding_address_id_isValid = ::OpenAPI::fromJsonValue(m_forwarding_address_id, json[QString("ForwardingAddressId")]);
    m_forwarding_address_id_isSet = !json[QString("ForwardingAddressId")].isNull() && m_forwarding_address_id_isValid;

    m_tax_documents_isValid = ::OpenAPI::fromJsonValue(m_tax_documents, json[QString("TaxDocuments")]);
    m_tax_documents_isSet = !json[QString("TaxDocuments")].isNull() && m_tax_documents_isValid;

    m_on_device_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_on_device_service_configuration, json[QString("OnDeviceServiceConfiguration")]);
    m_on_device_service_configuration_isSet = !json[QString("OnDeviceServiceConfiguration")].isNull() && m_on_device_service_configuration_isValid;
}

QString OAIDescribeClusterResult_ClusterMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeClusterResult_ClusterMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_id_isSet) {
        obj.insert(QString("ClusterId"), ::OpenAPI::toJsonValue(m_cluster_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_kms_key_arn_isSet) {
        obj.insert(QString("KmsKeyARN"), ::OpenAPI::toJsonValue(m_kms_key_arn));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_cluster_state.isSet()) {
        obj.insert(QString("ClusterState"), ::OpenAPI::toJsonValue(m_cluster_state));
    }
    if (m_job_type.isSet()) {
        obj.insert(QString("JobType"), ::OpenAPI::toJsonValue(m_job_type));
    }
    if (m_snowball_type.isSet()) {
        obj.insert(QString("SnowballType"), ::OpenAPI::toJsonValue(m_snowball_type));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("CreationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_address_id_isSet) {
        obj.insert(QString("AddressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_shipping_option.isSet()) {
        obj.insert(QString("ShippingOption"), ::OpenAPI::toJsonValue(m_shipping_option));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("Notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_forwarding_address_id_isSet) {
        obj.insert(QString("ForwardingAddressId"), ::OpenAPI::toJsonValue(m_forwarding_address_id));
    }
    if (m_tax_documents.isSet()) {
        obj.insert(QString("TaxDocuments"), ::OpenAPI::toJsonValue(m_tax_documents));
    }
    if (m_on_device_service_configuration.isSet()) {
        obj.insert(QString("OnDeviceServiceConfiguration"), ::OpenAPI::toJsonValue(m_on_device_service_configuration));
    }
    return obj;
}

QString OAIDescribeClusterResult_ClusterMetadata::getClusterId() const {
    return m_cluster_id;
}
void OAIDescribeClusterResult_ClusterMetadata::setClusterId(const QString &cluster_id) {
    m_cluster_id = cluster_id;
    m_cluster_id_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_cluster_id_Set() const{
    return m_cluster_id_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_cluster_id_Valid() const{
    return m_cluster_id_isValid;
}

QString OAIDescribeClusterResult_ClusterMetadata::getDescription() const {
    return m_description;
}
void OAIDescribeClusterResult_ClusterMetadata::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDescribeClusterResult_ClusterMetadata::getKmsKeyArn() const {
    return m_kms_key_arn;
}
void OAIDescribeClusterResult_ClusterMetadata::setKmsKeyArn(const QString &kms_key_arn) {
    m_kms_key_arn = kms_key_arn;
    m_kms_key_arn_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_kms_key_arn_Set() const{
    return m_kms_key_arn_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_kms_key_arn_Valid() const{
    return m_kms_key_arn_isValid;
}

QString OAIDescribeClusterResult_ClusterMetadata::getRoleArn() const {
    return m_role_arn;
}
void OAIDescribeClusterResult_ClusterMetadata::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIClusterState OAIDescribeClusterResult_ClusterMetadata::getClusterState() const {
    return m_cluster_state;
}
void OAIDescribeClusterResult_ClusterMetadata::setClusterState(const OAIClusterState &cluster_state) {
    m_cluster_state = cluster_state;
    m_cluster_state_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_cluster_state_Set() const{
    return m_cluster_state_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_cluster_state_Valid() const{
    return m_cluster_state_isValid;
}

OAIJobType OAIDescribeClusterResult_ClusterMetadata::getJobType() const {
    return m_job_type;
}
void OAIDescribeClusterResult_ClusterMetadata::setJobType(const OAIJobType &job_type) {
    m_job_type = job_type;
    m_job_type_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_job_type_Set() const{
    return m_job_type_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_job_type_Valid() const{
    return m_job_type_isValid;
}

OAISnowballType OAIDescribeClusterResult_ClusterMetadata::getSnowballType() const {
    return m_snowball_type;
}
void OAIDescribeClusterResult_ClusterMetadata::setSnowballType(const OAISnowballType &snowball_type) {
    m_snowball_type = snowball_type;
    m_snowball_type_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_snowball_type_Set() const{
    return m_snowball_type_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_snowball_type_Valid() const{
    return m_snowball_type_isValid;
}

QDateTime OAIDescribeClusterResult_ClusterMetadata::getCreationDate() const {
    return m_creation_date;
}
void OAIDescribeClusterResult_ClusterMetadata::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

OAIClusterMetadata_Resources OAIDescribeClusterResult_ClusterMetadata::getResources() const {
    return m_resources;
}
void OAIDescribeClusterResult_ClusterMetadata::setResources(const OAIClusterMetadata_Resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIDescribeClusterResult_ClusterMetadata::getAddressId() const {
    return m_address_id;
}
void OAIDescribeClusterResult_ClusterMetadata::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_address_id_Valid() const{
    return m_address_id_isValid;
}

OAIShippingOption OAIDescribeClusterResult_ClusterMetadata::getShippingOption() const {
    return m_shipping_option;
}
void OAIDescribeClusterResult_ClusterMetadata::setShippingOption(const OAIShippingOption &shipping_option) {
    m_shipping_option = shipping_option;
    m_shipping_option_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_shipping_option_Set() const{
    return m_shipping_option_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_shipping_option_Valid() const{
    return m_shipping_option_isValid;
}

OAICreateClusterRequest_Notification OAIDescribeClusterResult_ClusterMetadata::getNotification() const {
    return m_notification;
}
void OAIDescribeClusterResult_ClusterMetadata::setNotification(const OAICreateClusterRequest_Notification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_notification_Valid() const{
    return m_notification_isValid;
}

QString OAIDescribeClusterResult_ClusterMetadata::getForwardingAddressId() const {
    return m_forwarding_address_id;
}
void OAIDescribeClusterResult_ClusterMetadata::setForwardingAddressId(const QString &forwarding_address_id) {
    m_forwarding_address_id = forwarding_address_id;
    m_forwarding_address_id_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_forwarding_address_id_Set() const{
    return m_forwarding_address_id_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_forwarding_address_id_Valid() const{
    return m_forwarding_address_id_isValid;
}

OAICreateClusterRequest_TaxDocuments OAIDescribeClusterResult_ClusterMetadata::getTaxDocuments() const {
    return m_tax_documents;
}
void OAIDescribeClusterResult_ClusterMetadata::setTaxDocuments(const OAICreateClusterRequest_TaxDocuments &tax_documents) {
    m_tax_documents = tax_documents;
    m_tax_documents_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_tax_documents_Set() const{
    return m_tax_documents_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_tax_documents_Valid() const{
    return m_tax_documents_isValid;
}

OAIClusterMetadata_OnDeviceServiceConfiguration OAIDescribeClusterResult_ClusterMetadata::getOnDeviceServiceConfiguration() const {
    return m_on_device_service_configuration;
}
void OAIDescribeClusterResult_ClusterMetadata::setOnDeviceServiceConfiguration(const OAIClusterMetadata_OnDeviceServiceConfiguration &on_device_service_configuration) {
    m_on_device_service_configuration = on_device_service_configuration;
    m_on_device_service_configuration_isSet = true;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_on_device_service_configuration_Set() const{
    return m_on_device_service_configuration_isSet;
}

bool OAIDescribeClusterResult_ClusterMetadata::is_on_device_service_configuration_Valid() const{
    return m_on_device_service_configuration_isValid;
}

bool OAIDescribeClusterResult_ClusterMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kms_key_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_documents.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_device_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeClusterResult_ClusterMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
