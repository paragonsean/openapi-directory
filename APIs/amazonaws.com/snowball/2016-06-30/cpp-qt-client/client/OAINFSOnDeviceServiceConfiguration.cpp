/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINFSOnDeviceServiceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINFSOnDeviceServiceConfiguration::OAINFSOnDeviceServiceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINFSOnDeviceServiceConfiguration::OAINFSOnDeviceServiceConfiguration() {
    this->initializeModel();
}

OAINFSOnDeviceServiceConfiguration::~OAINFSOnDeviceServiceConfiguration() {}

void OAINFSOnDeviceServiceConfiguration::initializeModel() {

    m_storage_limit_isSet = false;
    m_storage_limit_isValid = false;

    m_storage_unit_isSet = false;
    m_storage_unit_isValid = false;
}

void OAINFSOnDeviceServiceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINFSOnDeviceServiceConfiguration::fromJsonObject(QJsonObject json) {

    m_storage_limit_isValid = ::OpenAPI::fromJsonValue(m_storage_limit, json[QString("StorageLimit")]);
    m_storage_limit_isSet = !json[QString("StorageLimit")].isNull() && m_storage_limit_isValid;

    m_storage_unit_isValid = ::OpenAPI::fromJsonValue(m_storage_unit, json[QString("StorageUnit")]);
    m_storage_unit_isSet = !json[QString("StorageUnit")].isNull() && m_storage_unit_isValid;
}

QString OAINFSOnDeviceServiceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINFSOnDeviceServiceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_limit_isSet) {
        obj.insert(QString("StorageLimit"), ::OpenAPI::toJsonValue(m_storage_limit));
    }
    if (m_storage_unit.isSet()) {
        obj.insert(QString("StorageUnit"), ::OpenAPI::toJsonValue(m_storage_unit));
    }
    return obj;
}

qint32 OAINFSOnDeviceServiceConfiguration::getStorageLimit() const {
    return m_storage_limit;
}
void OAINFSOnDeviceServiceConfiguration::setStorageLimit(const qint32 &storage_limit) {
    m_storage_limit = storage_limit;
    m_storage_limit_isSet = true;
}

bool OAINFSOnDeviceServiceConfiguration::is_storage_limit_Set() const{
    return m_storage_limit_isSet;
}

bool OAINFSOnDeviceServiceConfiguration::is_storage_limit_Valid() const{
    return m_storage_limit_isValid;
}

OAIStorageUnit OAINFSOnDeviceServiceConfiguration::getStorageUnit() const {
    return m_storage_unit;
}
void OAINFSOnDeviceServiceConfiguration::setStorageUnit(const OAIStorageUnit &storage_unit) {
    m_storage_unit = storage_unit;
    m_storage_unit_isSet = true;
}

bool OAINFSOnDeviceServiceConfiguration::is_storage_unit_Set() const{
    return m_storage_unit_isSet;
}

bool OAINFSOnDeviceServiceConfiguration::is_storage_unit_Valid() const{
    return m_storage_unit_isValid;
}

bool OAINFSOnDeviceServiceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINFSOnDeviceServiceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
