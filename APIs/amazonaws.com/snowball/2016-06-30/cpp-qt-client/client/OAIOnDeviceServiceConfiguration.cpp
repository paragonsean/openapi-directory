/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnDeviceServiceConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnDeviceServiceConfiguration::OAIOnDeviceServiceConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnDeviceServiceConfiguration::OAIOnDeviceServiceConfiguration() {
    this->initializeModel();
}

OAIOnDeviceServiceConfiguration::~OAIOnDeviceServiceConfiguration() {}

void OAIOnDeviceServiceConfiguration::initializeModel() {

    m_nfson_device_service_isSet = false;
    m_nfson_device_service_isValid = false;

    m_tgwon_device_service_isSet = false;
    m_tgwon_device_service_isValid = false;

    m_ekson_device_service_isSet = false;
    m_ekson_device_service_isValid = false;

    m_s3_on_device_service_isSet = false;
    m_s3_on_device_service_isValid = false;
}

void OAIOnDeviceServiceConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnDeviceServiceConfiguration::fromJsonObject(QJsonObject json) {

    m_nfson_device_service_isValid = ::OpenAPI::fromJsonValue(m_nfson_device_service, json[QString("NFSOnDeviceService")]);
    m_nfson_device_service_isSet = !json[QString("NFSOnDeviceService")].isNull() && m_nfson_device_service_isValid;

    m_tgwon_device_service_isValid = ::OpenAPI::fromJsonValue(m_tgwon_device_service, json[QString("TGWOnDeviceService")]);
    m_tgwon_device_service_isSet = !json[QString("TGWOnDeviceService")].isNull() && m_tgwon_device_service_isValid;

    m_ekson_device_service_isValid = ::OpenAPI::fromJsonValue(m_ekson_device_service, json[QString("EKSOnDeviceService")]);
    m_ekson_device_service_isSet = !json[QString("EKSOnDeviceService")].isNull() && m_ekson_device_service_isValid;

    m_s3_on_device_service_isValid = ::OpenAPI::fromJsonValue(m_s3_on_device_service, json[QString("S3OnDeviceService")]);
    m_s3_on_device_service_isSet = !json[QString("S3OnDeviceService")].isNull() && m_s3_on_device_service_isValid;
}

QString OAIOnDeviceServiceConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnDeviceServiceConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_nfson_device_service.isSet()) {
        obj.insert(QString("NFSOnDeviceService"), ::OpenAPI::toJsonValue(m_nfson_device_service));
    }
    if (m_tgwon_device_service.isSet()) {
        obj.insert(QString("TGWOnDeviceService"), ::OpenAPI::toJsonValue(m_tgwon_device_service));
    }
    if (m_ekson_device_service.isSet()) {
        obj.insert(QString("EKSOnDeviceService"), ::OpenAPI::toJsonValue(m_ekson_device_service));
    }
    if (m_s3_on_device_service.isSet()) {
        obj.insert(QString("S3OnDeviceService"), ::OpenAPI::toJsonValue(m_s3_on_device_service));
    }
    return obj;
}

OAIOnDeviceServiceConfiguration_NFSOnDeviceService OAIOnDeviceServiceConfiguration::getNfsonDeviceService() const {
    return m_nfson_device_service;
}
void OAIOnDeviceServiceConfiguration::setNfsonDeviceService(const OAIOnDeviceServiceConfiguration_NFSOnDeviceService &nfson_device_service) {
    m_nfson_device_service = nfson_device_service;
    m_nfson_device_service_isSet = true;
}

bool OAIOnDeviceServiceConfiguration::is_nfson_device_service_Set() const{
    return m_nfson_device_service_isSet;
}

bool OAIOnDeviceServiceConfiguration::is_nfson_device_service_Valid() const{
    return m_nfson_device_service_isValid;
}

OAIOnDeviceServiceConfiguration_TGWOnDeviceService OAIOnDeviceServiceConfiguration::getTgwonDeviceService() const {
    return m_tgwon_device_service;
}
void OAIOnDeviceServiceConfiguration::setTgwonDeviceService(const OAIOnDeviceServiceConfiguration_TGWOnDeviceService &tgwon_device_service) {
    m_tgwon_device_service = tgwon_device_service;
    m_tgwon_device_service_isSet = true;
}

bool OAIOnDeviceServiceConfiguration::is_tgwon_device_service_Set() const{
    return m_tgwon_device_service_isSet;
}

bool OAIOnDeviceServiceConfiguration::is_tgwon_device_service_Valid() const{
    return m_tgwon_device_service_isValid;
}

OAIOnDeviceServiceConfiguration_EKSOnDeviceService OAIOnDeviceServiceConfiguration::getEksonDeviceService() const {
    return m_ekson_device_service;
}
void OAIOnDeviceServiceConfiguration::setEksonDeviceService(const OAIOnDeviceServiceConfiguration_EKSOnDeviceService &ekson_device_service) {
    m_ekson_device_service = ekson_device_service;
    m_ekson_device_service_isSet = true;
}

bool OAIOnDeviceServiceConfiguration::is_ekson_device_service_Set() const{
    return m_ekson_device_service_isSet;
}

bool OAIOnDeviceServiceConfiguration::is_ekson_device_service_Valid() const{
    return m_ekson_device_service_isValid;
}

OAIOnDeviceServiceConfiguration_S3OnDeviceService OAIOnDeviceServiceConfiguration::getS3OnDeviceService() const {
    return m_s3_on_device_service;
}
void OAIOnDeviceServiceConfiguration::setS3OnDeviceService(const OAIOnDeviceServiceConfiguration_S3OnDeviceService &s3_on_device_service) {
    m_s3_on_device_service = s3_on_device_service;
    m_s3_on_device_service_isSet = true;
}

bool OAIOnDeviceServiceConfiguration::is_s3_on_device_service_Set() const{
    return m_s3_on_device_service_isSet;
}

bool OAIOnDeviceServiceConfiguration::is_s3_on_device_service_Valid() const{
    return m_s3_on_device_service_isValid;
}

bool OAIOnDeviceServiceConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nfson_device_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tgwon_device_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ekson_device_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_s3_on_device_service.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnDeviceServiceConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
