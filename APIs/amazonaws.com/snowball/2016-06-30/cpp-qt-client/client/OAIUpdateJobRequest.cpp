/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateJobRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateJobRequest::OAIUpdateJobRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateJobRequest::OAIUpdateJobRequest() {
    this->initializeModel();
}

OAIUpdateJobRequest::~OAIUpdateJobRequest() {}

void OAIUpdateJobRequest::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_role_arn_isSet = false;
    m_role_arn_isValid = false;

    m_notification_isSet = false;
    m_notification_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_on_device_service_configuration_isSet = false;
    m_on_device_service_configuration_isValid = false;

    m_address_id_isSet = false;
    m_address_id_isValid = false;

    m_shipping_option_isSet = false;
    m_shipping_option_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_snowball_capacity_preference_isSet = false;
    m_snowball_capacity_preference_isValid = false;

    m_forwarding_address_id_isSet = false;
    m_forwarding_address_id_isValid = false;

    m_pickup_details_isSet = false;
    m_pickup_details_isValid = false;
}

void OAIUpdateJobRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateJobRequest::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("JobId")]);
    m_job_id_isSet = !json[QString("JobId")].isNull() && m_job_id_isValid;

    m_role_arn_isValid = ::OpenAPI::fromJsonValue(m_role_arn, json[QString("RoleARN")]);
    m_role_arn_isSet = !json[QString("RoleARN")].isNull() && m_role_arn_isValid;

    m_notification_isValid = ::OpenAPI::fromJsonValue(m_notification, json[QString("Notification")]);
    m_notification_isSet = !json[QString("Notification")].isNull() && m_notification_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("Resources")]);
    m_resources_isSet = !json[QString("Resources")].isNull() && m_resources_isValid;

    m_on_device_service_configuration_isValid = ::OpenAPI::fromJsonValue(m_on_device_service_configuration, json[QString("OnDeviceServiceConfiguration")]);
    m_on_device_service_configuration_isSet = !json[QString("OnDeviceServiceConfiguration")].isNull() && m_on_device_service_configuration_isValid;

    m_address_id_isValid = ::OpenAPI::fromJsonValue(m_address_id, json[QString("AddressId")]);
    m_address_id_isSet = !json[QString("AddressId")].isNull() && m_address_id_isValid;

    m_shipping_option_isValid = ::OpenAPI::fromJsonValue(m_shipping_option, json[QString("ShippingOption")]);
    m_shipping_option_isSet = !json[QString("ShippingOption")].isNull() && m_shipping_option_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_snowball_capacity_preference_isValid = ::OpenAPI::fromJsonValue(m_snowball_capacity_preference, json[QString("SnowballCapacityPreference")]);
    m_snowball_capacity_preference_isSet = !json[QString("SnowballCapacityPreference")].isNull() && m_snowball_capacity_preference_isValid;

    m_forwarding_address_id_isValid = ::OpenAPI::fromJsonValue(m_forwarding_address_id, json[QString("ForwardingAddressId")]);
    m_forwarding_address_id_isSet = !json[QString("ForwardingAddressId")].isNull() && m_forwarding_address_id_isValid;

    m_pickup_details_isValid = ::OpenAPI::fromJsonValue(m_pickup_details, json[QString("PickupDetails")]);
    m_pickup_details_isSet = !json[QString("PickupDetails")].isNull() && m_pickup_details_isValid;
}

QString OAIUpdateJobRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateJobRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("JobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_role_arn_isSet) {
        obj.insert(QString("RoleARN"), ::OpenAPI::toJsonValue(m_role_arn));
    }
    if (m_notification.isSet()) {
        obj.insert(QString("Notification"), ::OpenAPI::toJsonValue(m_notification));
    }
    if (m_resources.isSet()) {
        obj.insert(QString("Resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_on_device_service_configuration.isSet()) {
        obj.insert(QString("OnDeviceServiceConfiguration"), ::OpenAPI::toJsonValue(m_on_device_service_configuration));
    }
    if (m_address_id_isSet) {
        obj.insert(QString("AddressId"), ::OpenAPI::toJsonValue(m_address_id));
    }
    if (m_shipping_option.isSet()) {
        obj.insert(QString("ShippingOption"), ::OpenAPI::toJsonValue(m_shipping_option));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_snowball_capacity_preference.isSet()) {
        obj.insert(QString("SnowballCapacityPreference"), ::OpenAPI::toJsonValue(m_snowball_capacity_preference));
    }
    if (m_forwarding_address_id_isSet) {
        obj.insert(QString("ForwardingAddressId"), ::OpenAPI::toJsonValue(m_forwarding_address_id));
    }
    if (m_pickup_details.isSet()) {
        obj.insert(QString("PickupDetails"), ::OpenAPI::toJsonValue(m_pickup_details));
    }
    return obj;
}

QString OAIUpdateJobRequest::getJobId() const {
    return m_job_id;
}
void OAIUpdateJobRequest::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIUpdateJobRequest::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIUpdateJobRequest::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIUpdateJobRequest::getRoleArn() const {
    return m_role_arn;
}
void OAIUpdateJobRequest::setRoleArn(const QString &role_arn) {
    m_role_arn = role_arn;
    m_role_arn_isSet = true;
}

bool OAIUpdateJobRequest::is_role_arn_Set() const{
    return m_role_arn_isSet;
}

bool OAIUpdateJobRequest::is_role_arn_Valid() const{
    return m_role_arn_isValid;
}

OAIUpdateClusterRequest_Notification OAIUpdateJobRequest::getNotification() const {
    return m_notification;
}
void OAIUpdateJobRequest::setNotification(const OAIUpdateClusterRequest_Notification &notification) {
    m_notification = notification;
    m_notification_isSet = true;
}

bool OAIUpdateJobRequest::is_notification_Set() const{
    return m_notification_isSet;
}

bool OAIUpdateJobRequest::is_notification_Valid() const{
    return m_notification_isValid;
}

OAIUpdateJobRequest_Resources OAIUpdateJobRequest::getResources() const {
    return m_resources;
}
void OAIUpdateJobRequest::setResources(const OAIUpdateJobRequest_Resources &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIUpdateJobRequest::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIUpdateJobRequest::is_resources_Valid() const{
    return m_resources_isValid;
}

OAICreateJobRequest_OnDeviceServiceConfiguration OAIUpdateJobRequest::getOnDeviceServiceConfiguration() const {
    return m_on_device_service_configuration;
}
void OAIUpdateJobRequest::setOnDeviceServiceConfiguration(const OAICreateJobRequest_OnDeviceServiceConfiguration &on_device_service_configuration) {
    m_on_device_service_configuration = on_device_service_configuration;
    m_on_device_service_configuration_isSet = true;
}

bool OAIUpdateJobRequest::is_on_device_service_configuration_Set() const{
    return m_on_device_service_configuration_isSet;
}

bool OAIUpdateJobRequest::is_on_device_service_configuration_Valid() const{
    return m_on_device_service_configuration_isValid;
}

QString OAIUpdateJobRequest::getAddressId() const {
    return m_address_id;
}
void OAIUpdateJobRequest::setAddressId(const QString &address_id) {
    m_address_id = address_id;
    m_address_id_isSet = true;
}

bool OAIUpdateJobRequest::is_address_id_Set() const{
    return m_address_id_isSet;
}

bool OAIUpdateJobRequest::is_address_id_Valid() const{
    return m_address_id_isValid;
}

OAIShippingOption OAIUpdateJobRequest::getShippingOption() const {
    return m_shipping_option;
}
void OAIUpdateJobRequest::setShippingOption(const OAIShippingOption &shipping_option) {
    m_shipping_option = shipping_option;
    m_shipping_option_isSet = true;
}

bool OAIUpdateJobRequest::is_shipping_option_Set() const{
    return m_shipping_option_isSet;
}

bool OAIUpdateJobRequest::is_shipping_option_Valid() const{
    return m_shipping_option_isValid;
}

QString OAIUpdateJobRequest::getDescription() const {
    return m_description;
}
void OAIUpdateJobRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateJobRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateJobRequest::is_description_Valid() const{
    return m_description_isValid;
}

OAISnowballCapacity OAIUpdateJobRequest::getSnowballCapacityPreference() const {
    return m_snowball_capacity_preference;
}
void OAIUpdateJobRequest::setSnowballCapacityPreference(const OAISnowballCapacity &snowball_capacity_preference) {
    m_snowball_capacity_preference = snowball_capacity_preference;
    m_snowball_capacity_preference_isSet = true;
}

bool OAIUpdateJobRequest::is_snowball_capacity_preference_Set() const{
    return m_snowball_capacity_preference_isSet;
}

bool OAIUpdateJobRequest::is_snowball_capacity_preference_Valid() const{
    return m_snowball_capacity_preference_isValid;
}

QString OAIUpdateJobRequest::getForwardingAddressId() const {
    return m_forwarding_address_id;
}
void OAIUpdateJobRequest::setForwardingAddressId(const QString &forwarding_address_id) {
    m_forwarding_address_id = forwarding_address_id;
    m_forwarding_address_id_isSet = true;
}

bool OAIUpdateJobRequest::is_forwarding_address_id_Set() const{
    return m_forwarding_address_id_isSet;
}

bool OAIUpdateJobRequest::is_forwarding_address_id_Valid() const{
    return m_forwarding_address_id_isValid;
}

OAIPickupDetails OAIUpdateJobRequest::getPickupDetails() const {
    return m_pickup_details;
}
void OAIUpdateJobRequest::setPickupDetails(const OAIPickupDetails &pickup_details) {
    m_pickup_details = pickup_details;
    m_pickup_details_isSet = true;
}

bool OAIUpdateJobRequest::is_pickup_details_Set() const{
    return m_pickup_details_isSet;
}

bool OAIUpdateJobRequest::is_pickup_details_Valid() const{
    return m_pickup_details_isValid;
}

bool OAIUpdateJobRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_device_service_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_option.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_capacity_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forwarding_address_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pickup_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateJobRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_job_id_isValid && true;
}

} // namespace OpenAPI
