/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateLongTermPricingRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateLongTermPricingRequest::OAICreateLongTermPricingRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateLongTermPricingRequest::OAICreateLongTermPricingRequest() {
    this->initializeModel();
}

OAICreateLongTermPricingRequest::~OAICreateLongTermPricingRequest() {}

void OAICreateLongTermPricingRequest::initializeModel() {

    m_long_term_pricing_type_isSet = false;
    m_long_term_pricing_type_isValid = false;

    m_is_long_term_pricing_auto_renew_isSet = false;
    m_is_long_term_pricing_auto_renew_isValid = false;

    m_snowball_type_isSet = false;
    m_snowball_type_isValid = false;
}

void OAICreateLongTermPricingRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateLongTermPricingRequest::fromJsonObject(QJsonObject json) {

    m_long_term_pricing_type_isValid = ::OpenAPI::fromJsonValue(m_long_term_pricing_type, json[QString("LongTermPricingType")]);
    m_long_term_pricing_type_isSet = !json[QString("LongTermPricingType")].isNull() && m_long_term_pricing_type_isValid;

    m_is_long_term_pricing_auto_renew_isValid = ::OpenAPI::fromJsonValue(m_is_long_term_pricing_auto_renew, json[QString("IsLongTermPricingAutoRenew")]);
    m_is_long_term_pricing_auto_renew_isSet = !json[QString("IsLongTermPricingAutoRenew")].isNull() && m_is_long_term_pricing_auto_renew_isValid;

    m_snowball_type_isValid = ::OpenAPI::fromJsonValue(m_snowball_type, json[QString("SnowballType")]);
    m_snowball_type_isSet = !json[QString("SnowballType")].isNull() && m_snowball_type_isValid;
}

QString OAICreateLongTermPricingRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateLongTermPricingRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_long_term_pricing_type.isSet()) {
        obj.insert(QString("LongTermPricingType"), ::OpenAPI::toJsonValue(m_long_term_pricing_type));
    }
    if (m_is_long_term_pricing_auto_renew_isSet) {
        obj.insert(QString("IsLongTermPricingAutoRenew"), ::OpenAPI::toJsonValue(m_is_long_term_pricing_auto_renew));
    }
    if (m_snowball_type.isSet()) {
        obj.insert(QString("SnowballType"), ::OpenAPI::toJsonValue(m_snowball_type));
    }
    return obj;
}

OAILongTermPricingType OAICreateLongTermPricingRequest::getLongTermPricingType() const {
    return m_long_term_pricing_type;
}
void OAICreateLongTermPricingRequest::setLongTermPricingType(const OAILongTermPricingType &long_term_pricing_type) {
    m_long_term_pricing_type = long_term_pricing_type;
    m_long_term_pricing_type_isSet = true;
}

bool OAICreateLongTermPricingRequest::is_long_term_pricing_type_Set() const{
    return m_long_term_pricing_type_isSet;
}

bool OAICreateLongTermPricingRequest::is_long_term_pricing_type_Valid() const{
    return m_long_term_pricing_type_isValid;
}

bool OAICreateLongTermPricingRequest::getIsLongTermPricingAutoRenew() const {
    return m_is_long_term_pricing_auto_renew;
}
void OAICreateLongTermPricingRequest::setIsLongTermPricingAutoRenew(const bool &is_long_term_pricing_auto_renew) {
    m_is_long_term_pricing_auto_renew = is_long_term_pricing_auto_renew;
    m_is_long_term_pricing_auto_renew_isSet = true;
}

bool OAICreateLongTermPricingRequest::is_is_long_term_pricing_auto_renew_Set() const{
    return m_is_long_term_pricing_auto_renew_isSet;
}

bool OAICreateLongTermPricingRequest::is_is_long_term_pricing_auto_renew_Valid() const{
    return m_is_long_term_pricing_auto_renew_isValid;
}

OAISnowballType OAICreateLongTermPricingRequest::getSnowballType() const {
    return m_snowball_type;
}
void OAICreateLongTermPricingRequest::setSnowballType(const OAISnowballType &snowball_type) {
    m_snowball_type = snowball_type;
    m_snowball_type_isSet = true;
}

bool OAICreateLongTermPricingRequest::is_snowball_type_Set() const{
    return m_snowball_type_isSet;
}

bool OAICreateLongTermPricingRequest::is_snowball_type_Valid() const{
    return m_snowball_type_isValid;
}

bool OAICreateLongTermPricingRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_long_term_pricing_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_long_term_pricing_auto_renew_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snowball_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateLongTermPricingRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_long_term_pricing_type_isValid && m_snowball_type_isValid && true;
}

} // namespace OpenAPI
