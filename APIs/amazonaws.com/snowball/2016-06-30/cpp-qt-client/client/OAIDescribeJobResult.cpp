/**
 * Amazon Import/Export Snowball
 * The Amazon Web Services Snow Family provides a petabyte-scale data transport solution that uses secure devices to transfer large amounts of data between your on-premises data centers and Amazon Simple Storage Service (Amazon S3). The Snow Family commands described here provide access to the same functionality that is available in the Amazon Web Services Snow Family Management Console, which enables you to create and manage jobs for a Snow Family device. To transfer data locally with a Snow Family device, you'll need to use the Snowball Edge client or the Amazon S3 API Interface for Snowball or OpsHub for Snow Family. For more information, see the <a href=\"https://docs.aws.amazon.com/AWSImportExport/latest/ug/api-reference.html\">User Guide</a>.
 *
 * The version of the OpenAPI document: 2016-06-30
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeJobResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeJobResult::OAIDescribeJobResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeJobResult::OAIDescribeJobResult() {
    this->initializeModel();
}

OAIDescribeJobResult::~OAIDescribeJobResult() {}

void OAIDescribeJobResult::initializeModel() {

    m_job_metadata_isSet = false;
    m_job_metadata_isValid = false;

    m_sub_job_metadata_isSet = false;
    m_sub_job_metadata_isValid = false;
}

void OAIDescribeJobResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeJobResult::fromJsonObject(QJsonObject json) {

    m_job_metadata_isValid = ::OpenAPI::fromJsonValue(m_job_metadata, json[QString("JobMetadata")]);
    m_job_metadata_isSet = !json[QString("JobMetadata")].isNull() && m_job_metadata_isValid;

    m_sub_job_metadata_isValid = ::OpenAPI::fromJsonValue(m_sub_job_metadata, json[QString("SubJobMetadata")]);
    m_sub_job_metadata_isSet = !json[QString("SubJobMetadata")].isNull() && m_sub_job_metadata_isValid;
}

QString OAIDescribeJobResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeJobResult::asJsonObject() const {
    QJsonObject obj;
    if (m_job_metadata.isSet()) {
        obj.insert(QString("JobMetadata"), ::OpenAPI::toJsonValue(m_job_metadata));
    }
    if (m_sub_job_metadata.isSet()) {
        obj.insert(QString("SubJobMetadata"), ::OpenAPI::toJsonValue(m_sub_job_metadata));
    }
    return obj;
}

OAIDescribeJobResult_JobMetadata OAIDescribeJobResult::getJobMetadata() const {
    return m_job_metadata;
}
void OAIDescribeJobResult::setJobMetadata(const OAIDescribeJobResult_JobMetadata &job_metadata) {
    m_job_metadata = job_metadata;
    m_job_metadata_isSet = true;
}

bool OAIDescribeJobResult::is_job_metadata_Set() const{
    return m_job_metadata_isSet;
}

bool OAIDescribeJobResult::is_job_metadata_Valid() const{
    return m_job_metadata_isValid;
}

QList OAIDescribeJobResult::getSubJobMetadata() const {
    return m_sub_job_metadata;
}
void OAIDescribeJobResult::setSubJobMetadata(const QList &sub_job_metadata) {
    m_sub_job_metadata = sub_job_metadata;
    m_sub_job_metadata_isSet = true;
}

bool OAIDescribeJobResult::is_sub_job_metadata_Set() const{
    return m_sub_job_metadata_isSet;
}

bool OAIDescribeJobResult::is_sub_job_metadata_Valid() const{
    return m_sub_job_metadata_isValid;
}

bool OAIDescribeJobResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_job_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeJobResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
