/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAppInstanceAdminRequest from '../model/CreateAppInstanceAdminRequest';
import CreateAppInstanceAdminResponse from '../model/CreateAppInstanceAdminResponse';
import CreateAppInstanceBotRequest from '../model/CreateAppInstanceBotRequest';
import CreateAppInstanceBotResponse from '../model/CreateAppInstanceBotResponse';
import CreateAppInstanceRequest from '../model/CreateAppInstanceRequest';
import CreateAppInstanceResponse from '../model/CreateAppInstanceResponse';
import CreateAppInstanceUserRequest from '../model/CreateAppInstanceUserRequest';
import CreateAppInstanceUserResponse from '../model/CreateAppInstanceUserResponse';
import DescribeAppInstanceAdminResponse from '../model/DescribeAppInstanceAdminResponse';
import DescribeAppInstanceBotResponse from '../model/DescribeAppInstanceBotResponse';
import DescribeAppInstanceResponse from '../model/DescribeAppInstanceResponse';
import DescribeAppInstanceUserEndpointResponse from '../model/DescribeAppInstanceUserEndpointResponse';
import DescribeAppInstanceUserResponse from '../model/DescribeAppInstanceUserResponse';
import GetAppInstanceRetentionSettingsResponse from '../model/GetAppInstanceRetentionSettingsResponse';
import ListAppInstanceAdminsResponse from '../model/ListAppInstanceAdminsResponse';
import ListAppInstanceBotsResponse from '../model/ListAppInstanceBotsResponse';
import ListAppInstanceUserEndpointsResponse from '../model/ListAppInstanceUserEndpointsResponse';
import ListAppInstanceUsersResponse from '../model/ListAppInstanceUsersResponse';
import ListAppInstancesResponse from '../model/ListAppInstancesResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutAppInstanceRetentionSettingsRequest from '../model/PutAppInstanceRetentionSettingsRequest';
import PutAppInstanceRetentionSettingsResponse from '../model/PutAppInstanceRetentionSettingsResponse';
import PutAppInstanceUserExpirationSettingsRequest from '../model/PutAppInstanceUserExpirationSettingsRequest';
import PutAppInstanceUserExpirationSettingsResponse from '../model/PutAppInstanceUserExpirationSettingsResponse';
import RegisterAppInstanceUserEndpointRequest from '../model/RegisterAppInstanceUserEndpointRequest';
import RegisterAppInstanceUserEndpointResponse from '../model/RegisterAppInstanceUserEndpointResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UntagResourceRequest from '../model/UntagResourceRequest';
import UpdateAppInstanceBotRequest from '../model/UpdateAppInstanceBotRequest';
import UpdateAppInstanceBotResponse from '../model/UpdateAppInstanceBotResponse';
import UpdateAppInstanceRequest from '../model/UpdateAppInstanceRequest';
import UpdateAppInstanceResponse from '../model/UpdateAppInstanceResponse';
import UpdateAppInstanceUserEndpointRequest from '../model/UpdateAppInstanceUserEndpointRequest';
import UpdateAppInstanceUserEndpointResponse from '../model/UpdateAppInstanceUserEndpointResponse';
import UpdateAppInstanceUserRequest from '../model/UpdateAppInstanceUserRequest';
import UpdateAppInstanceUserResponse from '../model/UpdateAppInstanceUserResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2021-04-20
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAppInstance operation.
     * @callback module:api/DefaultApi~createAppInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates an Amazon Chime SDK messaging <code>AppInstance</code> under an AWS account. Only SDK messaging customers use this API. <code>CreateAppInstance</code> supports idempotency behavior as described in the AWS API Standard.</p> <p>identity</p>
     * @param {module:model/CreateAppInstanceRequest} createAppInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppInstanceResponse}
     */
    createAppInstance(createAppInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppInstanceRequest;
      // verify the required parameter 'createAppInstanceRequest' is set
      if (createAppInstanceRequest === undefined || createAppInstanceRequest === null) {
        throw new Error("Missing the required parameter 'createAppInstanceRequest' when calling createAppInstance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppInstanceResponse;
      return this.apiClient.callApi(
        '/app-instances', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppInstanceAdmin operation.
     * @callback module:api/DefaultApi~createAppInstanceAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppInstanceAdminResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Promotes an <code>AppInstanceUser</code> or <code>AppInstanceBot</code> to an <code>AppInstanceAdmin</code>. The promoted entity can perform the following actions. </p> <ul> <li> <p> <code>ChannelModerator</code> actions across all channels in the <code>AppInstance</code>.</p> </li> <li> <p> <code>DeleteChannelMessage</code> actions.</p> </li> </ul> <p>Only an <code>AppInstanceUser</code> and <code>AppInstanceBot</code> can be promoted to an <code>AppInstanceAdmin</code> role.</p>
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {module:model/CreateAppInstanceAdminRequest} createAppInstanceAdminRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppInstanceAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppInstanceAdminResponse}
     */
    createAppInstanceAdmin(appInstanceArn, createAppInstanceAdminRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppInstanceAdminRequest;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling createAppInstanceAdmin");
      }
      // verify the required parameter 'createAppInstanceAdminRequest' is set
      if (createAppInstanceAdminRequest === undefined || createAppInstanceAdminRequest === null) {
        throw new Error("Missing the required parameter 'createAppInstanceAdminRequest' when calling createAppInstanceAdmin");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppInstanceAdminResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/admins', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppInstanceBot operation.
     * @callback module:api/DefaultApi~createAppInstanceBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppInstanceBotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a bot under an Amazon Chime <code>AppInstance</code>. The request consists of a unique <code>Configuration</code> and <code>Name</code> for that bot.
     * @param {module:model/CreateAppInstanceBotRequest} createAppInstanceBotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppInstanceBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppInstanceBotResponse}
     */
    createAppInstanceBot(createAppInstanceBotRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppInstanceBotRequest;
      // verify the required parameter 'createAppInstanceBotRequest' is set
      if (createAppInstanceBotRequest === undefined || createAppInstanceBotRequest === null) {
        throw new Error("Missing the required parameter 'createAppInstanceBotRequest' when calling createAppInstanceBot");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppInstanceBotResponse;
      return this.apiClient.callApi(
        '/app-instance-bots', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAppInstanceUser operation.
     * @callback module:api/DefaultApi~createAppInstanceUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAppInstanceUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user under an Amazon Chime <code>AppInstance</code>. The request consists of a unique <code>appInstanceUserId</code> and <code>Name</code> for that user.
     * @param {module:model/CreateAppInstanceUserRequest} createAppInstanceUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAppInstanceUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAppInstanceUserResponse}
     */
    createAppInstanceUser(createAppInstanceUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAppInstanceUserRequest;
      // verify the required parameter 'createAppInstanceUserRequest' is set
      if (createAppInstanceUserRequest === undefined || createAppInstanceUserRequest === null) {
        throw new Error("Missing the required parameter 'createAppInstanceUserRequest' when calling createAppInstanceUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAppInstanceUserResponse;
      return this.apiClient.callApi(
        '/app-instance-users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppInstance operation.
     * @callback module:api/DefaultApi~deleteAppInstanceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an <code>AppInstance</code> and all associated data asynchronously.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAppInstance(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling deleteAppInstance");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppInstanceAdmin operation.
     * @callback module:api/DefaultApi~deleteAppInstanceAdminCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Demotes an <code>AppInstanceAdmin</code> to an <code>AppInstanceUser</code> or <code>AppInstanceBot</code>. This action does not delete the user.
     * @param {String} appInstanceAdminArn The ARN of the <code>AppInstance</code>'s administrator.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppInstanceAdminCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAppInstanceAdmin(appInstanceAdminArn, appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceAdminArn' is set
      if (appInstanceAdminArn === undefined || appInstanceAdminArn === null) {
        throw new Error("Missing the required parameter 'appInstanceAdminArn' when calling deleteAppInstanceAdmin");
      }
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling deleteAppInstanceAdmin");
      }

      let pathParams = {
        'appInstanceAdminArn': appInstanceAdminArn,
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppInstanceBot operation.
     * @callback module:api/DefaultApi~deleteAppInstanceBotCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an <code>AppInstanceBot</code>.
     * @param {String} appInstanceBotArn The ARN of the <code>AppInstanceBot</code> being deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppInstanceBotCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAppInstanceBot(appInstanceBotArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceBotArn' is set
      if (appInstanceBotArn === undefined || appInstanceBotArn === null) {
        throw new Error("Missing the required parameter 'appInstanceBotArn' when calling deleteAppInstanceBot");
      }

      let pathParams = {
        'appInstanceBotArn': appInstanceBotArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app-instance-bots/{appInstanceBotArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAppInstanceUser operation.
     * @callback module:api/DefaultApi~deleteAppInstanceUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an <code>AppInstanceUser</code>.
     * @param {String} appInstanceUserArn The ARN of the user request being deleted.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAppInstanceUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAppInstanceUser(appInstanceUserArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling deleteAppInstanceUser");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deregisterAppInstanceUserEndpoint operation.
     * @callback module:api/DefaultApi~deregisterAppInstanceUserEndpointCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deregisters an <code>AppInstanceUserEndpoint</code>.
     * @param {String} appInstanceUserArn The ARN of the <code>AppInstanceUser</code>.
     * @param {String} endpointId The unique identifier of the <code>AppInstanceUserEndpoint</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deregisterAppInstanceUserEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deregisterAppInstanceUserEndpoint(appInstanceUserArn, endpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling deregisterAppInstanceUserEndpoint");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling deregisterAppInstanceUserEndpoint");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn,
        'endpointId': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppInstance operation.
     * @callback module:api/DefaultApi~describeAppInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the full details of an <code>AppInstance</code>.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAppInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppInstanceResponse}
     */
    describeAppInstance(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling describeAppInstance");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAppInstanceResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppInstanceAdmin operation.
     * @callback module:api/DefaultApi~describeAppInstanceAdminCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppInstanceAdminResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the full details of an <code>AppInstanceAdmin</code>.
     * @param {String} appInstanceAdminArn The ARN of the <code>AppInstanceAdmin</code>.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAppInstanceAdminCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppInstanceAdminResponse}
     */
    describeAppInstanceAdmin(appInstanceAdminArn, appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceAdminArn' is set
      if (appInstanceAdminArn === undefined || appInstanceAdminArn === null) {
        throw new Error("Missing the required parameter 'appInstanceAdminArn' when calling describeAppInstanceAdmin");
      }
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling describeAppInstanceAdmin");
      }

      let pathParams = {
        'appInstanceAdminArn': appInstanceAdminArn,
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAppInstanceAdminResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/admins/{appInstanceAdminArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppInstanceBot operation.
     * @callback module:api/DefaultApi~describeAppInstanceBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppInstanceBotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The <code>AppInstanceBot's</code> information.
     * @param {String} appInstanceBotArn The ARN of the <code>AppInstanceBot</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAppInstanceBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppInstanceBotResponse}
     */
    describeAppInstanceBot(appInstanceBotArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceBotArn' is set
      if (appInstanceBotArn === undefined || appInstanceBotArn === null) {
        throw new Error("Missing the required parameter 'appInstanceBotArn' when calling describeAppInstanceBot");
      }

      let pathParams = {
        'appInstanceBotArn': appInstanceBotArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAppInstanceBotResponse;
      return this.apiClient.callApi(
        '/app-instance-bots/{appInstanceBotArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppInstanceUser operation.
     * @callback module:api/DefaultApi~describeAppInstanceUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppInstanceUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the full details of an <code>AppInstanceUser</code>.
     * @param {String} appInstanceUserArn The ARN of the <code>AppInstanceUser</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAppInstanceUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppInstanceUserResponse}
     */
    describeAppInstanceUser(appInstanceUserArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling describeAppInstanceUser");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAppInstanceUserResponse;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeAppInstanceUserEndpoint operation.
     * @callback module:api/DefaultApi~describeAppInstanceUserEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeAppInstanceUserEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the full details of an <code>AppInstanceUserEndpoint</code>.
     * @param {String} appInstanceUserArn The ARN of the <code>AppInstanceUser</code>.
     * @param {String} endpointId The unique identifier of the <code>AppInstanceUserEndpoint</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeAppInstanceUserEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeAppInstanceUserEndpointResponse}
     */
    describeAppInstanceUserEndpoint(appInstanceUserArn, endpointId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling describeAppInstanceUserEndpoint");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling describeAppInstanceUserEndpoint");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn,
        'endpointId': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeAppInstanceUserEndpointResponse;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAppInstanceRetentionSettings operation.
     * @callback module:api/DefaultApi~getAppInstanceRetentionSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAppInstanceRetentionSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the retention settings for an <code>AppInstance</code>.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAppInstanceRetentionSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAppInstanceRetentionSettingsResponse}
     */
    getAppInstanceRetentionSettings(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling getAppInstanceRetentionSettings");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAppInstanceRetentionSettingsResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/retention-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppInstanceAdmins operation.
     * @callback module:api/DefaultApi~listAppInstanceAdminsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAppInstanceAdminsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of the administrators in the <code>AppInstance</code>.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of administrators that you want to return.
     * @param {String} [nextToken] The token returned from previous API requests until the number of administrators is reached.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listAppInstanceAdminsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAppInstanceAdminsResponse}
     */
    listAppInstanceAdmins(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling listAppInstanceAdmins");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAppInstanceAdminsResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/admins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppInstanceBots operation.
     * @callback module:api/DefaultApi~listAppInstanceBotsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAppInstanceBotsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all <code>AppInstanceBots</code> created under a single <code>AppInstance</code>.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of requests to return.
     * @param {String} [nextToken] The token passed by previous API calls until all requested bots are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listAppInstanceBotsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAppInstanceBotsResponse}
     */
    listAppInstanceBots(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling listAppInstanceBots");
      }

      let pathParams = {
      };
      let queryParams = {
        'app-instance-arn': appInstanceArn,
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAppInstanceBotsResponse;
      return this.apiClient.callApi(
        '/app-instance-bots#app-instance-arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppInstanceUserEndpoints operation.
     * @callback module:api/DefaultApi~listAppInstanceUserEndpointsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAppInstanceUserEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the <code>AppInstanceUserEndpoints</code> created under a single <code>AppInstanceUser</code>.
     * @param {String} appInstanceUserArn The ARN of the <code>AppInstanceUser</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of endpoints that you want to return.
     * @param {String} [nextToken] The token passed by previous API calls until all requested endpoints are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listAppInstanceUserEndpointsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAppInstanceUserEndpointsResponse}
     */
    listAppInstanceUserEndpoints(appInstanceUserArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling listAppInstanceUserEndpoints");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn
      };
      let queryParams = {
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAppInstanceUserEndpointsResponse;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppInstanceUsers operation.
     * @callback module:api/DefaultApi~listAppInstanceUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAppInstanceUsersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all <code>AppInstanceUsers</code> created under a single <code>AppInstance</code>.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of requests that you want returned.
     * @param {String} [nextToken] The token passed by previous API calls until all requested users are returned.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listAppInstanceUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAppInstanceUsersResponse}
     */
    listAppInstanceUsers(appInstanceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling listAppInstanceUsers");
      }

      let pathParams = {
      };
      let queryParams = {
        'app-instance-arn': appInstanceArn,
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAppInstanceUsersResponse;
      return this.apiClient.callApi(
        '/app-instance-users#app-instance-arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAppInstances operation.
     * @callback module:api/DefaultApi~listAppInstancesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListAppInstancesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all Amazon Chime <code>AppInstance</code>s created under a single AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The maximum number of <code>AppInstance</code>s that you want to return.
     * @param {String} [nextToken] The token passed by previous API requests until you reach the maximum number of <code>AppInstances</code>.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listAppInstancesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListAppInstancesResponse}
     */
    listAppInstances(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'max-results': opts['maxResults'],
        'next-token': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListAppInstancesResponse;
      return this.apiClient.callApi(
        '/app-instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags applied to an Amazon Chime SDK identity resource.
     * @param {String} arn The ARN of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(arn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'arn' is set
      if (arn === undefined || arn === null) {
        throw new Error("Missing the required parameter 'arn' when calling listTagsForResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'arn': arn
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags#arn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAppInstanceRetentionSettings operation.
     * @callback module:api/DefaultApi~putAppInstanceRetentionSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutAppInstanceRetentionSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the amount of time in days that a given <code>AppInstance</code> retains data.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {module:model/PutAppInstanceRetentionSettingsRequest} putAppInstanceRetentionSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAppInstanceRetentionSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutAppInstanceRetentionSettingsResponse}
     */
    putAppInstanceRetentionSettings(appInstanceArn, putAppInstanceRetentionSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAppInstanceRetentionSettingsRequest;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling putAppInstanceRetentionSettings");
      }
      // verify the required parameter 'putAppInstanceRetentionSettingsRequest' is set
      if (putAppInstanceRetentionSettingsRequest === undefined || putAppInstanceRetentionSettingsRequest === null) {
        throw new Error("Missing the required parameter 'putAppInstanceRetentionSettingsRequest' when calling putAppInstanceRetentionSettings");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutAppInstanceRetentionSettingsResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}/retention-settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putAppInstanceUserExpirationSettings operation.
     * @callback module:api/DefaultApi~putAppInstanceUserExpirationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutAppInstanceUserExpirationSettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Sets the number of days before the <code>AppInstanceUser</code> is automatically deleted.</p> <note> <p>A background process deletes expired <code>AppInstanceUsers</code> within 6 hours of expiration. Actual deletion times may vary.</p> <p>Expired <code>AppInstanceUsers</code> that have not yet been deleted appear as active, and you can update their expiration settings. The system honors the new settings.</p> </note>
     * @param {String} appInstanceUserArn The ARN of the <code>AppInstanceUser</code>.
     * @param {module:model/PutAppInstanceUserExpirationSettingsRequest} putAppInstanceUserExpirationSettingsRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~putAppInstanceUserExpirationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutAppInstanceUserExpirationSettingsResponse}
     */
    putAppInstanceUserExpirationSettings(appInstanceUserArn, putAppInstanceUserExpirationSettingsRequest, opts, callback) {
      opts = opts || {};
      let postBody = putAppInstanceUserExpirationSettingsRequest;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling putAppInstanceUserExpirationSettings");
      }
      // verify the required parameter 'putAppInstanceUserExpirationSettingsRequest' is set
      if (putAppInstanceUserExpirationSettingsRequest === undefined || putAppInstanceUserExpirationSettingsRequest === null) {
        throw new Error("Missing the required parameter 'putAppInstanceUserExpirationSettingsRequest' when calling putAppInstanceUserExpirationSettings");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutAppInstanceUserExpirationSettingsResponse;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}/expiration-settings', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerAppInstanceUserEndpoint operation.
     * @callback module:api/DefaultApi~registerAppInstanceUserEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterAppInstanceUserEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers an endpoint under an Amazon Chime <code>AppInstanceUser</code>. The endpoint receives messages for a user. For push notifications, the endpoint is a mobile device used to receive mobile push notifications for a user.
     * @param {String} appInstanceUserArn The ARN of the <code>AppInstanceUser</code>.
     * @param {module:model/RegisterAppInstanceUserEndpointRequest} registerAppInstanceUserEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~registerAppInstanceUserEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterAppInstanceUserEndpointResponse}
     */
    registerAppInstanceUserEndpoint(appInstanceUserArn, registerAppInstanceUserEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = registerAppInstanceUserEndpointRequest;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling registerAppInstanceUserEndpoint");
      }
      // verify the required parameter 'registerAppInstanceUserEndpointRequest' is set
      if (registerAppInstanceUserEndpointRequest === undefined || registerAppInstanceUserEndpointRequest === null) {
        throw new Error("Missing the required parameter 'registerAppInstanceUserEndpointRequest' when calling registerAppInstanceUserEndpoint");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RegisterAppInstanceUserEndpointResponse;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}/endpoints', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Applies the specified tags to the specified Amazon Chime SDK identity resource.
     * @param {module:model/String} operation 
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(operation, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags#operation=tag-resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the specified tags from the specified Amazon Chime SDK identity resource.
     * @param {module:model/String} operation 
     * @param {module:model/UntagResourceRequest} untagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(operation, untagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = untagResourceRequest;
      // verify the required parameter 'operation' is set
      if (operation === undefined || operation === null) {
        throw new Error("Missing the required parameter 'operation' when calling untagResource");
      }
      // verify the required parameter 'untagResourceRequest' is set
      if (untagResourceRequest === undefined || untagResourceRequest === null) {
        throw new Error("Missing the required parameter 'untagResourceRequest' when calling untagResource");
      }

      let pathParams = {
      };
      let queryParams = {
        'operation': operation
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags#operation=untag-resource', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppInstance operation.
     * @callback module:api/DefaultApi~updateAppInstanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAppInstanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates <code>AppInstance</code> metadata.
     * @param {String} appInstanceArn The ARN of the <code>AppInstance</code>.
     * @param {module:model/UpdateAppInstanceRequest} updateAppInstanceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAppInstanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAppInstanceResponse}
     */
    updateAppInstance(appInstanceArn, updateAppInstanceRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAppInstanceRequest;
      // verify the required parameter 'appInstanceArn' is set
      if (appInstanceArn === undefined || appInstanceArn === null) {
        throw new Error("Missing the required parameter 'appInstanceArn' when calling updateAppInstance");
      }
      // verify the required parameter 'updateAppInstanceRequest' is set
      if (updateAppInstanceRequest === undefined || updateAppInstanceRequest === null) {
        throw new Error("Missing the required parameter 'updateAppInstanceRequest' when calling updateAppInstance");
      }

      let pathParams = {
        'appInstanceArn': appInstanceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAppInstanceResponse;
      return this.apiClient.callApi(
        '/app-instances/{appInstanceArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppInstanceBot operation.
     * @callback module:api/DefaultApi~updateAppInstanceBotCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAppInstanceBotResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name and metadata of an <code>AppInstanceBot</code>.
     * @param {String} appInstanceBotArn The ARN of the <code>AppInstanceBot</code>.
     * @param {module:model/UpdateAppInstanceBotRequest} updateAppInstanceBotRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAppInstanceBotCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAppInstanceBotResponse}
     */
    updateAppInstanceBot(appInstanceBotArn, updateAppInstanceBotRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAppInstanceBotRequest;
      // verify the required parameter 'appInstanceBotArn' is set
      if (appInstanceBotArn === undefined || appInstanceBotArn === null) {
        throw new Error("Missing the required parameter 'appInstanceBotArn' when calling updateAppInstanceBot");
      }
      // verify the required parameter 'updateAppInstanceBotRequest' is set
      if (updateAppInstanceBotRequest === undefined || updateAppInstanceBotRequest === null) {
        throw new Error("Missing the required parameter 'updateAppInstanceBotRequest' when calling updateAppInstanceBot");
      }

      let pathParams = {
        'appInstanceBotArn': appInstanceBotArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAppInstanceBotResponse;
      return this.apiClient.callApi(
        '/app-instance-bots/{appInstanceBotArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppInstanceUser operation.
     * @callback module:api/DefaultApi~updateAppInstanceUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAppInstanceUserResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the details of an <code>AppInstanceUser</code>. You can update names and metadata.
     * @param {String} appInstanceUserArn The ARN of the <code>AppInstanceUser</code>.
     * @param {module:model/UpdateAppInstanceUserRequest} updateAppInstanceUserRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAppInstanceUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAppInstanceUserResponse}
     */
    updateAppInstanceUser(appInstanceUserArn, updateAppInstanceUserRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAppInstanceUserRequest;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling updateAppInstanceUser");
      }
      // verify the required parameter 'updateAppInstanceUserRequest' is set
      if (updateAppInstanceUserRequest === undefined || updateAppInstanceUserRequest === null) {
        throw new Error("Missing the required parameter 'updateAppInstanceUserRequest' when calling updateAppInstanceUser");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAppInstanceUserResponse;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAppInstanceUserEndpoint operation.
     * @callback module:api/DefaultApi~updateAppInstanceUserEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAppInstanceUserEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the details of an <code>AppInstanceUserEndpoint</code>. You can update the name and <code>AllowMessage</code> values.
     * @param {String} appInstanceUserArn The ARN of the <code>AppInstanceUser</code>.
     * @param {String} endpointId The unique identifier of the <code>AppInstanceUserEndpoint</code>.
     * @param {module:model/UpdateAppInstanceUserEndpointRequest} updateAppInstanceUserEndpointRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAppInstanceUserEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAppInstanceUserEndpointResponse}
     */
    updateAppInstanceUserEndpoint(appInstanceUserArn, endpointId, updateAppInstanceUserEndpointRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAppInstanceUserEndpointRequest;
      // verify the required parameter 'appInstanceUserArn' is set
      if (appInstanceUserArn === undefined || appInstanceUserArn === null) {
        throw new Error("Missing the required parameter 'appInstanceUserArn' when calling updateAppInstanceUserEndpoint");
      }
      // verify the required parameter 'endpointId' is set
      if (endpointId === undefined || endpointId === null) {
        throw new Error("Missing the required parameter 'endpointId' when calling updateAppInstanceUserEndpoint");
      }
      // verify the required parameter 'updateAppInstanceUserEndpointRequest' is set
      if (updateAppInstanceUserEndpointRequest === undefined || updateAppInstanceUserEndpointRequest === null) {
        throw new Error("Missing the required parameter 'updateAppInstanceUserEndpointRequest' when calling updateAppInstanceUserEndpoint");
      }

      let pathParams = {
        'appInstanceUserArn': appInstanceUserArn,
        'endpointId': endpointId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAppInstanceUserEndpointResponse;
      return this.apiClient.callApi(
        '/app-instance-users/{appInstanceUserArn}/endpoints/{endpointId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
