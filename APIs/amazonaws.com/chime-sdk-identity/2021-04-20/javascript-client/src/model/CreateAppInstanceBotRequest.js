/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CreateAppInstanceBotRequestConfiguration from './CreateAppInstanceBotRequestConfiguration';
import Tag from './Tag';

/**
 * The CreateAppInstanceBotRequest model module.
 * @module model/CreateAppInstanceBotRequest
 * @version 2021-04-20
 */
class CreateAppInstanceBotRequest {
    /**
     * Constructs a new <code>CreateAppInstanceBotRequest</code>.
     * @alias module:model/CreateAppInstanceBotRequest
     * @param appInstanceArn {String} The ARN of the <code>AppInstance</code> request.
     * @param clientRequestToken {String} The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.
     * @param configuration {module:model/CreateAppInstanceBotRequestConfiguration} 
     */
    constructor(appInstanceArn, clientRequestToken, configuration) { 
        
        CreateAppInstanceBotRequest.initialize(this, appInstanceArn, clientRequestToken, configuration);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, appInstanceArn, clientRequestToken, configuration) { 
        obj['AppInstanceArn'] = appInstanceArn;
        obj['ClientRequestToken'] = clientRequestToken;
        obj['Configuration'] = configuration;
    }

    /**
     * Constructs a <code>CreateAppInstanceBotRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAppInstanceBotRequest} obj Optional instance to populate.
     * @return {module:model/CreateAppInstanceBotRequest} The populated <code>CreateAppInstanceBotRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAppInstanceBotRequest();

            if (data.hasOwnProperty('AppInstanceArn')) {
                obj['AppInstanceArn'] = ApiClient.convertToType(data['AppInstanceArn'], 'String');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Metadata')) {
                obj['Metadata'] = ApiClient.convertToType(data['Metadata'], 'String');
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
            if (data.hasOwnProperty('Configuration')) {
                obj['Configuration'] = CreateAppInstanceBotRequestConfiguration.constructFromObject(data['Configuration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAppInstanceBotRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAppInstanceBotRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAppInstanceBotRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AppInstanceArn'] && !(typeof data['AppInstanceArn'] === 'string' || data['AppInstanceArn'] instanceof String)) {
            throw new Error("Expected the field `AppInstanceArn` to be a primitive type in the JSON string but got " + data['AppInstanceArn']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Metadata'] && !(typeof data['Metadata'] === 'string' || data['Metadata'] instanceof String)) {
            throw new Error("Expected the field `Metadata` to be a primitive type in the JSON string but got " + data['Metadata']);
        }
        // ensure the json data is a string
        if (data['ClientRequestToken'] && !(typeof data['ClientRequestToken'] === 'string' || data['ClientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got " + data['ClientRequestToken']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }
        // validate the optional field `Configuration`
        if (data['Configuration']) { // data not null
          CreateAppInstanceBotRequestConfiguration.validateJSON(data['Configuration']);
        }

        return true;
    }


}

CreateAppInstanceBotRequest.RequiredProperties = ["AppInstanceArn", "ClientRequestToken", "Configuration"];

/**
 * The ARN of the <code>AppInstance</code> request.
 * @member {String} AppInstanceArn
 */
CreateAppInstanceBotRequest.prototype['AppInstanceArn'] = undefined;

/**
 * The user's name.
 * @member {String} Name
 */
CreateAppInstanceBotRequest.prototype['Name'] = undefined;

/**
 * The request metadata. Limited to a 1KB string in UTF-8.
 * @member {String} Metadata
 */
CreateAppInstanceBotRequest.prototype['Metadata'] = undefined;

/**
 * The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.
 * @member {String} ClientRequestToken
 */
CreateAppInstanceBotRequest.prototype['ClientRequestToken'] = undefined;

/**
 * The tags assigned to the <code>AppInstanceBot</code>.
 * @member {Array.<module:model/Tag>} Tags
 */
CreateAppInstanceBotRequest.prototype['Tags'] = undefined;

/**
 * @member {module:model/CreateAppInstanceBotRequestConfiguration} Configuration
 */
CreateAppInstanceBotRequest.prototype['Configuration'] = undefined;






export default CreateAppInstanceBotRequest;

