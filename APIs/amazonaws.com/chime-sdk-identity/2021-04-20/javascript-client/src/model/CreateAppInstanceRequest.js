/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Tag from './Tag';

/**
 * The CreateAppInstanceRequest model module.
 * @module model/CreateAppInstanceRequest
 * @version 2021-04-20
 */
class CreateAppInstanceRequest {
    /**
     * Constructs a new <code>CreateAppInstanceRequest</code>.
     * @alias module:model/CreateAppInstanceRequest
     * @param name {String} The name of the <code>AppInstance</code>.
     * @param clientRequestToken {String} The unique ID of the request. Use different tokens to create different <code>AppInstances</code>.
     */
    constructor(name, clientRequestToken) { 
        
        CreateAppInstanceRequest.initialize(this, name, clientRequestToken);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, clientRequestToken) { 
        obj['Name'] = name;
        obj['ClientRequestToken'] = clientRequestToken;
    }

    /**
     * Constructs a <code>CreateAppInstanceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAppInstanceRequest} obj Optional instance to populate.
     * @return {module:model/CreateAppInstanceRequest} The populated <code>CreateAppInstanceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAppInstanceRequest();

            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('Metadata')) {
                obj['Metadata'] = ApiClient.convertToType(data['Metadata'], 'String');
            }
            if (data.hasOwnProperty('ClientRequestToken')) {
                obj['ClientRequestToken'] = ApiClient.convertToType(data['ClientRequestToken'], 'String');
            }
            if (data.hasOwnProperty('Tags')) {
                obj['Tags'] = ApiClient.convertToType(data['Tags'], [Tag]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAppInstanceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAppInstanceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAppInstanceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['Metadata'] && !(typeof data['Metadata'] === 'string' || data['Metadata'] instanceof String)) {
            throw new Error("Expected the field `Metadata` to be a primitive type in the JSON string but got " + data['Metadata']);
        }
        // ensure the json data is a string
        if (data['ClientRequestToken'] && !(typeof data['ClientRequestToken'] === 'string' || data['ClientRequestToken'] instanceof String)) {
            throw new Error("Expected the field `ClientRequestToken` to be a primitive type in the JSON string but got " + data['ClientRequestToken']);
        }
        if (data['Tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['Tags'])) {
                throw new Error("Expected the field `Tags` to be an array in the JSON data but got " + data['Tags']);
            }
            // validate the optional field `Tags` (array)
            for (const item of data['Tags']) {
                Tag.validateJSON(item);
            };
        }

        return true;
    }


}

CreateAppInstanceRequest.RequiredProperties = ["Name", "ClientRequestToken"];

/**
 * The name of the <code>AppInstance</code>.
 * @member {String} Name
 */
CreateAppInstanceRequest.prototype['Name'] = undefined;

/**
 * The metadata of the <code>AppInstance</code>. Limited to a 1KB string in UTF-8.
 * @member {String} Metadata
 */
CreateAppInstanceRequest.prototype['Metadata'] = undefined;

/**
 * The unique ID of the request. Use different tokens to create different <code>AppInstances</code>.
 * @member {String} ClientRequestToken
 */
CreateAppInstanceRequest.prototype['ClientRequestToken'] = undefined;

/**
 * Tags assigned to the <code>AppInstance</code>.
 * @member {Array.<module:model/Tag>} Tags
 */
CreateAppInstanceRequest.prototype['Tags'] = undefined;






export default CreateAppInstanceRequest;

