/*
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AllowMessages;
import org.openapitools.client.model.AppInstanceUserEndpointSummaryEndpointState;
import org.openapitools.client.model.AppInstanceUserEndpointType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary of the details of an &lt;code&gt;AppInstanceUserEndpoint&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:40.081252-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppInstanceUserEndpointSummary {
  public static final String SERIALIZED_NAME_APP_INSTANCE_USER_ARN = "AppInstanceUserArn";
  @SerializedName(SERIALIZED_NAME_APP_INSTANCE_USER_ARN)
  private String appInstanceUserArn;

  public static final String SERIALIZED_NAME_ENDPOINT_ID = "EndpointId";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_ID)
  private String endpointId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private AppInstanceUserEndpointType type;

  public static final String SERIALIZED_NAME_ALLOW_MESSAGES = "AllowMessages";
  @SerializedName(SERIALIZED_NAME_ALLOW_MESSAGES)
  private AllowMessages allowMessages;

  public static final String SERIALIZED_NAME_ENDPOINT_STATE = "EndpointState";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_STATE)
  private AppInstanceUserEndpointSummaryEndpointState endpointState;

  public AppInstanceUserEndpointSummary() {
  }

  public AppInstanceUserEndpointSummary appInstanceUserArn(String appInstanceUserArn) {
    this.appInstanceUserArn = appInstanceUserArn;
    return this;
  }

  /**
   * Get appInstanceUserArn
   * @return appInstanceUserArn
   */
  @javax.annotation.Nullable
  public String getAppInstanceUserArn() {
    return appInstanceUserArn;
  }

  public void setAppInstanceUserArn(String appInstanceUserArn) {
    this.appInstanceUserArn = appInstanceUserArn;
  }


  public AppInstanceUserEndpointSummary endpointId(String endpointId) {
    this.endpointId = endpointId;
    return this;
  }

  /**
   * Get endpointId
   * @return endpointId
   */
  @javax.annotation.Nullable
  public String getEndpointId() {
    return endpointId;
  }

  public void setEndpointId(String endpointId) {
    this.endpointId = endpointId;
  }


  public AppInstanceUserEndpointSummary name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AppInstanceUserEndpointSummary type(AppInstanceUserEndpointType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public AppInstanceUserEndpointType getType() {
    return type;
  }

  public void setType(AppInstanceUserEndpointType type) {
    this.type = type;
  }


  public AppInstanceUserEndpointSummary allowMessages(AllowMessages allowMessages) {
    this.allowMessages = allowMessages;
    return this;
  }

  /**
   * Get allowMessages
   * @return allowMessages
   */
  @javax.annotation.Nullable
  public AllowMessages getAllowMessages() {
    return allowMessages;
  }

  public void setAllowMessages(AllowMessages allowMessages) {
    this.allowMessages = allowMessages;
  }


  public AppInstanceUserEndpointSummary endpointState(AppInstanceUserEndpointSummaryEndpointState endpointState) {
    this.endpointState = endpointState;
    return this;
  }

  /**
   * Get endpointState
   * @return endpointState
   */
  @javax.annotation.Nullable
  public AppInstanceUserEndpointSummaryEndpointState getEndpointState() {
    return endpointState;
  }

  public void setEndpointState(AppInstanceUserEndpointSummaryEndpointState endpointState) {
    this.endpointState = endpointState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppInstanceUserEndpointSummary appInstanceUserEndpointSummary = (AppInstanceUserEndpointSummary) o;
    return Objects.equals(this.appInstanceUserArn, appInstanceUserEndpointSummary.appInstanceUserArn) &&
        Objects.equals(this.endpointId, appInstanceUserEndpointSummary.endpointId) &&
        Objects.equals(this.name, appInstanceUserEndpointSummary.name) &&
        Objects.equals(this.type, appInstanceUserEndpointSummary.type) &&
        Objects.equals(this.allowMessages, appInstanceUserEndpointSummary.allowMessages) &&
        Objects.equals(this.endpointState, appInstanceUserEndpointSummary.endpointState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInstanceUserArn, endpointId, name, type, allowMessages, endpointState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppInstanceUserEndpointSummary {\n");
    sb.append("    appInstanceUserArn: ").append(toIndentedString(appInstanceUserArn)).append("\n");
    sb.append("    endpointId: ").append(toIndentedString(endpointId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    allowMessages: ").append(toIndentedString(allowMessages)).append("\n");
    sb.append("    endpointState: ").append(toIndentedString(endpointState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppInstanceUserArn");
    openapiFields.add("EndpointId");
    openapiFields.add("Name");
    openapiFields.add("Type");
    openapiFields.add("AllowMessages");
    openapiFields.add("EndpointState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppInstanceUserEndpointSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppInstanceUserEndpointSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppInstanceUserEndpointSummary is not found in the empty JSON string", AppInstanceUserEndpointSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppInstanceUserEndpointSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppInstanceUserEndpointSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AppInstanceUserArn`
      if (jsonObj.get("AppInstanceUserArn") != null && !jsonObj.get("AppInstanceUserArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppInstanceUserArn"));
      }
      // validate the optional field `EndpointId`
      if (jsonObj.get("EndpointId") != null && !jsonObj.get("EndpointId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("EndpointId"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        AppInstanceUserEndpointType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `AllowMessages`
      if (jsonObj.get("AllowMessages") != null && !jsonObj.get("AllowMessages").isJsonNull()) {
        AllowMessages.validateJsonElement(jsonObj.get("AllowMessages"));
      }
      // validate the optional field `EndpointState`
      if (jsonObj.get("EndpointState") != null && !jsonObj.get("EndpointState").isJsonNull()) {
        AppInstanceUserEndpointSummaryEndpointState.validateJsonElement(jsonObj.get("EndpointState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppInstanceUserEndpointSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppInstanceUserEndpointSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppInstanceUserEndpointSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppInstanceUserEndpointSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<AppInstanceUserEndpointSummary>() {
           @Override
           public void write(JsonWriter out, AppInstanceUserEndpointSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppInstanceUserEndpointSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppInstanceUserEndpointSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppInstanceUserEndpointSummary
   * @throws IOException if the JSON string is invalid with respect to AppInstanceUserEndpointSummary
   */
  public static AppInstanceUserEndpointSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppInstanceUserEndpointSummary.class);
  }

  /**
   * Convert an instance of AppInstanceUserEndpointSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

