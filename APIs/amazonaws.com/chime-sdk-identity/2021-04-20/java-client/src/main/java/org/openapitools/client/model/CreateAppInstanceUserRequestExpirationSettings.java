/*
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ExpirationCriterion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAppInstanceUserRequestExpirationSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:40.081252-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAppInstanceUserRequestExpirationSettings {
  public static final String SERIALIZED_NAME_EXPIRATION_DAYS = "ExpirationDays";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DAYS)
  private Integer expirationDays;

  public static final String SERIALIZED_NAME_EXPIRATION_CRITERION = "ExpirationCriterion";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_CRITERION)
  private ExpirationCriterion expirationCriterion;

  public CreateAppInstanceUserRequestExpirationSettings() {
  }

  public CreateAppInstanceUserRequestExpirationSettings expirationDays(Integer expirationDays) {
    this.expirationDays = expirationDays;
    return this;
  }

  /**
   * Get expirationDays
   * @return expirationDays
   */
  @javax.annotation.Nonnull
  public Integer getExpirationDays() {
    return expirationDays;
  }

  public void setExpirationDays(Integer expirationDays) {
    this.expirationDays = expirationDays;
  }


  public CreateAppInstanceUserRequestExpirationSettings expirationCriterion(ExpirationCriterion expirationCriterion) {
    this.expirationCriterion = expirationCriterion;
    return this;
  }

  /**
   * Get expirationCriterion
   * @return expirationCriterion
   */
  @javax.annotation.Nonnull
  public ExpirationCriterion getExpirationCriterion() {
    return expirationCriterion;
  }

  public void setExpirationCriterion(ExpirationCriterion expirationCriterion) {
    this.expirationCriterion = expirationCriterion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAppInstanceUserRequestExpirationSettings createAppInstanceUserRequestExpirationSettings = (CreateAppInstanceUserRequestExpirationSettings) o;
    return Objects.equals(this.expirationDays, createAppInstanceUserRequestExpirationSettings.expirationDays) &&
        Objects.equals(this.expirationCriterion, createAppInstanceUserRequestExpirationSettings.expirationCriterion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirationDays, expirationCriterion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAppInstanceUserRequestExpirationSettings {\n");
    sb.append("    expirationDays: ").append(toIndentedString(expirationDays)).append("\n");
    sb.append("    expirationCriterion: ").append(toIndentedString(expirationCriterion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ExpirationDays");
    openapiFields.add("ExpirationCriterion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ExpirationDays");
    openapiRequiredFields.add("ExpirationCriterion");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAppInstanceUserRequestExpirationSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAppInstanceUserRequestExpirationSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAppInstanceUserRequestExpirationSettings is not found in the empty JSON string", CreateAppInstanceUserRequestExpirationSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAppInstanceUserRequestExpirationSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAppInstanceUserRequestExpirationSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAppInstanceUserRequestExpirationSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ExpirationDays`
      Integer.validateJsonElement(jsonObj.get("ExpirationDays"));
      // validate the required field `ExpirationCriterion`
      ExpirationCriterion.validateJsonElement(jsonObj.get("ExpirationCriterion"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAppInstanceUserRequestExpirationSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAppInstanceUserRequestExpirationSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAppInstanceUserRequestExpirationSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAppInstanceUserRequestExpirationSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAppInstanceUserRequestExpirationSettings>() {
           @Override
           public void write(JsonWriter out, CreateAppInstanceUserRequestExpirationSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAppInstanceUserRequestExpirationSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAppInstanceUserRequestExpirationSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAppInstanceUserRequestExpirationSettings
   * @throws IOException if the JSON string is invalid with respect to CreateAppInstanceUserRequestExpirationSettings
   */
  public static CreateAppInstanceUserRequestExpirationSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAppInstanceUserRequestExpirationSettings.class);
  }

  /**
   * Convert an instance of CreateAppInstanceUserRequestExpirationSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

