/*
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.AppInstanceUserExpirationSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeAppInstanceUserResponseAppInstanceUser
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:40.081252-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeAppInstanceUserResponseAppInstanceUser {
  public static final String SERIALIZED_NAME_APP_INSTANCE_USER_ARN = "AppInstanceUserArn";
  @SerializedName(SERIALIZED_NAME_APP_INSTANCE_USER_ARN)
  private String appInstanceUserArn;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private String metadata;

  public static final String SERIALIZED_NAME_CREATED_TIMESTAMP = "CreatedTimestamp";
  @SerializedName(SERIALIZED_NAME_CREATED_TIMESTAMP)
  private OffsetDateTime createdTimestamp;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP = "LastUpdatedTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIMESTAMP)
  private OffsetDateTime lastUpdatedTimestamp;

  public static final String SERIALIZED_NAME_EXPIRATION_SETTINGS = "ExpirationSettings";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_SETTINGS)
  private AppInstanceUserExpirationSettings expirationSettings;

  public DescribeAppInstanceUserResponseAppInstanceUser() {
  }

  public DescribeAppInstanceUserResponseAppInstanceUser appInstanceUserArn(String appInstanceUserArn) {
    this.appInstanceUserArn = appInstanceUserArn;
    return this;
  }

  /**
   * Get appInstanceUserArn
   * @return appInstanceUserArn
   */
  @javax.annotation.Nullable
  public String getAppInstanceUserArn() {
    return appInstanceUserArn;
  }

  public void setAppInstanceUserArn(String appInstanceUserArn) {
    this.appInstanceUserArn = appInstanceUserArn;
  }


  public DescribeAppInstanceUserResponseAppInstanceUser name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DescribeAppInstanceUserResponseAppInstanceUser metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public String getMetadata() {
    return metadata;
  }

  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }


  public DescribeAppInstanceUserResponseAppInstanceUser createdTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
    return this;
  }

  /**
   * Get createdTimestamp
   * @return createdTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTimestamp() {
    return createdTimestamp;
  }

  public void setCreatedTimestamp(OffsetDateTime createdTimestamp) {
    this.createdTimestamp = createdTimestamp;
  }


  public DescribeAppInstanceUserResponseAppInstanceUser lastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
    return this;
  }

  /**
   * Get lastUpdatedTimestamp
   * @return lastUpdatedTimestamp
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastUpdatedTimestamp() {
    return lastUpdatedTimestamp;
  }

  public void setLastUpdatedTimestamp(OffsetDateTime lastUpdatedTimestamp) {
    this.lastUpdatedTimestamp = lastUpdatedTimestamp;
  }


  public DescribeAppInstanceUserResponseAppInstanceUser expirationSettings(AppInstanceUserExpirationSettings expirationSettings) {
    this.expirationSettings = expirationSettings;
    return this;
  }

  /**
   * Get expirationSettings
   * @return expirationSettings
   */
  @javax.annotation.Nullable
  public AppInstanceUserExpirationSettings getExpirationSettings() {
    return expirationSettings;
  }

  public void setExpirationSettings(AppInstanceUserExpirationSettings expirationSettings) {
    this.expirationSettings = expirationSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeAppInstanceUserResponseAppInstanceUser describeAppInstanceUserResponseAppInstanceUser = (DescribeAppInstanceUserResponseAppInstanceUser) o;
    return Objects.equals(this.appInstanceUserArn, describeAppInstanceUserResponseAppInstanceUser.appInstanceUserArn) &&
        Objects.equals(this.name, describeAppInstanceUserResponseAppInstanceUser.name) &&
        Objects.equals(this.metadata, describeAppInstanceUserResponseAppInstanceUser.metadata) &&
        Objects.equals(this.createdTimestamp, describeAppInstanceUserResponseAppInstanceUser.createdTimestamp) &&
        Objects.equals(this.lastUpdatedTimestamp, describeAppInstanceUserResponseAppInstanceUser.lastUpdatedTimestamp) &&
        Objects.equals(this.expirationSettings, describeAppInstanceUserResponseAppInstanceUser.expirationSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInstanceUserArn, name, metadata, createdTimestamp, lastUpdatedTimestamp, expirationSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeAppInstanceUserResponseAppInstanceUser {\n");
    sb.append("    appInstanceUserArn: ").append(toIndentedString(appInstanceUserArn)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    createdTimestamp: ").append(toIndentedString(createdTimestamp)).append("\n");
    sb.append("    lastUpdatedTimestamp: ").append(toIndentedString(lastUpdatedTimestamp)).append("\n");
    sb.append("    expirationSettings: ").append(toIndentedString(expirationSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppInstanceUserArn");
    openapiFields.add("Name");
    openapiFields.add("Metadata");
    openapiFields.add("CreatedTimestamp");
    openapiFields.add("LastUpdatedTimestamp");
    openapiFields.add("ExpirationSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeAppInstanceUserResponseAppInstanceUser
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeAppInstanceUserResponseAppInstanceUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeAppInstanceUserResponseAppInstanceUser is not found in the empty JSON string", DescribeAppInstanceUserResponseAppInstanceUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeAppInstanceUserResponseAppInstanceUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeAppInstanceUserResponseAppInstanceUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AppInstanceUserArn`
      if (jsonObj.get("AppInstanceUserArn") != null && !jsonObj.get("AppInstanceUserArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppInstanceUserArn"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `Metadata`
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Metadata"));
      }
      // validate the optional field `CreatedTimestamp`
      if (jsonObj.get("CreatedTimestamp") != null && !jsonObj.get("CreatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedTimestamp"));
      }
      // validate the optional field `LastUpdatedTimestamp`
      if (jsonObj.get("LastUpdatedTimestamp") != null && !jsonObj.get("LastUpdatedTimestamp").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("LastUpdatedTimestamp"));
      }
      // validate the optional field `ExpirationSettings`
      if (jsonObj.get("ExpirationSettings") != null && !jsonObj.get("ExpirationSettings").isJsonNull()) {
        AppInstanceUserExpirationSettings.validateJsonElement(jsonObj.get("ExpirationSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeAppInstanceUserResponseAppInstanceUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeAppInstanceUserResponseAppInstanceUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeAppInstanceUserResponseAppInstanceUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeAppInstanceUserResponseAppInstanceUser.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeAppInstanceUserResponseAppInstanceUser>() {
           @Override
           public void write(JsonWriter out, DescribeAppInstanceUserResponseAppInstanceUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeAppInstanceUserResponseAppInstanceUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeAppInstanceUserResponseAppInstanceUser given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeAppInstanceUserResponseAppInstanceUser
   * @throws IOException if the JSON string is invalid with respect to DescribeAppInstanceUserResponseAppInstanceUser
   */
  public static DescribeAppInstanceUserResponseAppInstanceUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeAppInstanceUserResponseAppInstanceUser.class);
  }

  /**
   * Convert an instance of DescribeAppInstanceUserResponseAppInstanceUser to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

