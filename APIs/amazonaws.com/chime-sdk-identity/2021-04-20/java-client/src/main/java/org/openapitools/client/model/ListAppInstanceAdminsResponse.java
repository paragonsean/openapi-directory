/*
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListAppInstanceAdminsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:40.081252-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListAppInstanceAdminsResponse {
  public static final String SERIALIZED_NAME_APP_INSTANCE_ARN = "AppInstanceArn";
  @SerializedName(SERIALIZED_NAME_APP_INSTANCE_ARN)
  private String appInstanceArn;

  public static final String SERIALIZED_NAME_APP_INSTANCE_ADMINS = "AppInstanceAdmins";
  @SerializedName(SERIALIZED_NAME_APP_INSTANCE_ADMINS)
  private List appInstanceAdmins;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public ListAppInstanceAdminsResponse() {
  }

  public ListAppInstanceAdminsResponse appInstanceArn(String appInstanceArn) {
    this.appInstanceArn = appInstanceArn;
    return this;
  }

  /**
   * Get appInstanceArn
   * @return appInstanceArn
   */
  @javax.annotation.Nullable
  public String getAppInstanceArn() {
    return appInstanceArn;
  }

  public void setAppInstanceArn(String appInstanceArn) {
    this.appInstanceArn = appInstanceArn;
  }


  public ListAppInstanceAdminsResponse appInstanceAdmins(List appInstanceAdmins) {
    this.appInstanceAdmins = appInstanceAdmins;
    return this;
  }

  /**
   * Get appInstanceAdmins
   * @return appInstanceAdmins
   */
  @javax.annotation.Nullable
  public List getAppInstanceAdmins() {
    return appInstanceAdmins;
  }

  public void setAppInstanceAdmins(List appInstanceAdmins) {
    this.appInstanceAdmins = appInstanceAdmins;
  }


  public ListAppInstanceAdminsResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListAppInstanceAdminsResponse listAppInstanceAdminsResponse = (ListAppInstanceAdminsResponse) o;
    return Objects.equals(this.appInstanceArn, listAppInstanceAdminsResponse.appInstanceArn) &&
        Objects.equals(this.appInstanceAdmins, listAppInstanceAdminsResponse.appInstanceAdmins) &&
        Objects.equals(this.nextToken, listAppInstanceAdminsResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appInstanceArn, appInstanceAdmins, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListAppInstanceAdminsResponse {\n");
    sb.append("    appInstanceArn: ").append(toIndentedString(appInstanceArn)).append("\n");
    sb.append("    appInstanceAdmins: ").append(toIndentedString(appInstanceAdmins)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AppInstanceArn");
    openapiFields.add("AppInstanceAdmins");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListAppInstanceAdminsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListAppInstanceAdminsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListAppInstanceAdminsResponse is not found in the empty JSON string", ListAppInstanceAdminsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListAppInstanceAdminsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListAppInstanceAdminsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AppInstanceArn`
      if (jsonObj.get("AppInstanceArn") != null && !jsonObj.get("AppInstanceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AppInstanceArn"));
      }
      // validate the optional field `AppInstanceAdmins`
      if (jsonObj.get("AppInstanceAdmins") != null && !jsonObj.get("AppInstanceAdmins").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AppInstanceAdmins"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListAppInstanceAdminsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListAppInstanceAdminsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListAppInstanceAdminsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListAppInstanceAdminsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListAppInstanceAdminsResponse>() {
           @Override
           public void write(JsonWriter out, ListAppInstanceAdminsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListAppInstanceAdminsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListAppInstanceAdminsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListAppInstanceAdminsResponse
   * @throws IOException if the JSON string is invalid with respect to ListAppInstanceAdminsResponse
   */
  public static ListAppInstanceAdminsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListAppInstanceAdminsResponse.class);
  }

  /**
   * Convert an instance of ListAppInstanceAdminsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

