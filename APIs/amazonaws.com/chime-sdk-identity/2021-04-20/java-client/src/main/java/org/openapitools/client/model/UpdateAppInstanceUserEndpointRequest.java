/*
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAppInstanceUserEndpointRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:40.081252-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAppInstanceUserEndpointRequest {
  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Boolean that controls whether the &lt;code&gt;AppInstanceUserEndpoint&lt;/code&gt; is opted in to receive messages. &lt;code&gt;ALL&lt;/code&gt; indicates the endpoint will receive all messages. &lt;code&gt;NONE&lt;/code&gt; indicates the endpoint will receive no messages.
   */
  @JsonAdapter(AllowMessagesEnum.Adapter.class)
  public enum AllowMessagesEnum {
    ALL("ALL"),
    
    NONE("NONE");

    private String value;

    AllowMessagesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowMessagesEnum fromValue(String value) {
      for (AllowMessagesEnum b : AllowMessagesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowMessagesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowMessagesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowMessagesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowMessagesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowMessagesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOW_MESSAGES = "AllowMessages";
  @SerializedName(SERIALIZED_NAME_ALLOW_MESSAGES)
  private AllowMessagesEnum allowMessages;

  public UpdateAppInstanceUserEndpointRequest() {
  }

  public UpdateAppInstanceUserEndpointRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the &lt;code&gt;AppInstanceUserEndpoint&lt;/code&gt;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UpdateAppInstanceUserEndpointRequest allowMessages(AllowMessagesEnum allowMessages) {
    this.allowMessages = allowMessages;
    return this;
  }

  /**
   * Boolean that controls whether the &lt;code&gt;AppInstanceUserEndpoint&lt;/code&gt; is opted in to receive messages. &lt;code&gt;ALL&lt;/code&gt; indicates the endpoint will receive all messages. &lt;code&gt;NONE&lt;/code&gt; indicates the endpoint will receive no messages.
   * @return allowMessages
   */
  @javax.annotation.Nullable
  public AllowMessagesEnum getAllowMessages() {
    return allowMessages;
  }

  public void setAllowMessages(AllowMessagesEnum allowMessages) {
    this.allowMessages = allowMessages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAppInstanceUserEndpointRequest updateAppInstanceUserEndpointRequest = (UpdateAppInstanceUserEndpointRequest) o;
    return Objects.equals(this.name, updateAppInstanceUserEndpointRequest.name) &&
        Objects.equals(this.allowMessages, updateAppInstanceUserEndpointRequest.allowMessages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, allowMessages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAppInstanceUserEndpointRequest {\n");
    sb.append("    name: ").append("*").append("\n");
    sb.append("    allowMessages: ").append(toIndentedString(allowMessages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Name");
    openapiFields.add("AllowMessages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAppInstanceUserEndpointRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAppInstanceUserEndpointRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAppInstanceUserEndpointRequest is not found in the empty JSON string", UpdateAppInstanceUserEndpointRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAppInstanceUserEndpointRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAppInstanceUserEndpointRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("AllowMessages") != null && !jsonObj.get("AllowMessages").isJsonNull()) && !jsonObj.get("AllowMessages").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AllowMessages` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AllowMessages").toString()));
      }
      // validate the optional field `AllowMessages`
      if (jsonObj.get("AllowMessages") != null && !jsonObj.get("AllowMessages").isJsonNull()) {
        AllowMessagesEnum.validateJsonElement(jsonObj.get("AllowMessages"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAppInstanceUserEndpointRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAppInstanceUserEndpointRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAppInstanceUserEndpointRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAppInstanceUserEndpointRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAppInstanceUserEndpointRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAppInstanceUserEndpointRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAppInstanceUserEndpointRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAppInstanceUserEndpointRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAppInstanceUserEndpointRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAppInstanceUserEndpointRequest
   */
  public static UpdateAppInstanceUserEndpointRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAppInstanceUserEndpointRequest.class);
  }

  /**
   * Convert an instance of UpdateAppInstanceUserEndpointRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

