/*
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The attributes of an &lt;code&gt;Endpoint&lt;/code&gt;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:07:40.081252-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegisterAppInstanceUserEndpointRequestEndpointAttributes {
  public static final String SERIALIZED_NAME_DEVICE_TOKEN = "DeviceToken";
  @SerializedName(SERIALIZED_NAME_DEVICE_TOKEN)
  private String deviceToken;

  public static final String SERIALIZED_NAME_VOIP_DEVICE_TOKEN = "VoipDeviceToken";
  @SerializedName(SERIALIZED_NAME_VOIP_DEVICE_TOKEN)
  private String voipDeviceToken;

  public RegisterAppInstanceUserEndpointRequestEndpointAttributes() {
  }

  public RegisterAppInstanceUserEndpointRequestEndpointAttributes deviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
    return this;
  }

  /**
   * Get deviceToken
   * @return deviceToken
   */
  @javax.annotation.Nullable
  public String getDeviceToken() {
    return deviceToken;
  }

  public void setDeviceToken(String deviceToken) {
    this.deviceToken = deviceToken;
  }


  public RegisterAppInstanceUserEndpointRequestEndpointAttributes voipDeviceToken(String voipDeviceToken) {
    this.voipDeviceToken = voipDeviceToken;
    return this;
  }

  /**
   * Get voipDeviceToken
   * @return voipDeviceToken
   */
  @javax.annotation.Nullable
  public String getVoipDeviceToken() {
    return voipDeviceToken;
  }

  public void setVoipDeviceToken(String voipDeviceToken) {
    this.voipDeviceToken = voipDeviceToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegisterAppInstanceUserEndpointRequestEndpointAttributes registerAppInstanceUserEndpointRequestEndpointAttributes = (RegisterAppInstanceUserEndpointRequestEndpointAttributes) o;
    return Objects.equals(this.deviceToken, registerAppInstanceUserEndpointRequestEndpointAttributes.deviceToken) &&
        Objects.equals(this.voipDeviceToken, registerAppInstanceUserEndpointRequestEndpointAttributes.voipDeviceToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceToken, voipDeviceToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegisterAppInstanceUserEndpointRequestEndpointAttributes {\n");
    sb.append("    deviceToken: ").append(toIndentedString(deviceToken)).append("\n");
    sb.append("    voipDeviceToken: ").append(toIndentedString(voipDeviceToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceToken");
    openapiFields.add("VoipDeviceToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegisterAppInstanceUserEndpointRequestEndpointAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegisterAppInstanceUserEndpointRequestEndpointAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegisterAppInstanceUserEndpointRequestEndpointAttributes is not found in the empty JSON string", RegisterAppInstanceUserEndpointRequestEndpointAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegisterAppInstanceUserEndpointRequestEndpointAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegisterAppInstanceUserEndpointRequestEndpointAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DeviceToken`
      if (jsonObj.get("DeviceToken") != null && !jsonObj.get("DeviceToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DeviceToken"));
      }
      // validate the optional field `VoipDeviceToken`
      if (jsonObj.get("VoipDeviceToken") != null && !jsonObj.get("VoipDeviceToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("VoipDeviceToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegisterAppInstanceUserEndpointRequestEndpointAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegisterAppInstanceUserEndpointRequestEndpointAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegisterAppInstanceUserEndpointRequestEndpointAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegisterAppInstanceUserEndpointRequestEndpointAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<RegisterAppInstanceUserEndpointRequestEndpointAttributes>() {
           @Override
           public void write(JsonWriter out, RegisterAppInstanceUserEndpointRequestEndpointAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegisterAppInstanceUserEndpointRequestEndpointAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegisterAppInstanceUserEndpointRequestEndpointAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegisterAppInstanceUserEndpointRequestEndpointAttributes
   * @throws IOException if the JSON string is invalid with respect to RegisterAppInstanceUserEndpointRequestEndpointAttributes
   */
  public static RegisterAppInstanceUserEndpointRequestEndpointAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegisterAppInstanceUserEndpointRequestEndpointAttributes.class);
  }

  /**
   * Convert an instance of RegisterAppInstanceUserEndpointRequestEndpointAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

