# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.register_app_instance_user_endpoint_request_endpoint_attributes import RegisterAppInstanceUserEndpointRequestEndpointAttributes
import re
from openapi_server import util


class RegisterAppInstanceUserEndpointRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, type: str=None, resource_arn: str=None, endpoint_attributes: RegisterAppInstanceUserEndpointRequestEndpointAttributes=None, client_request_token: str=None, allow_messages: str=None):
        """RegisterAppInstanceUserEndpointRequest - a model defined in OpenAPI

        :param name: The name of this RegisterAppInstanceUserEndpointRequest.
        :param type: The type of this RegisterAppInstanceUserEndpointRequest.
        :param resource_arn: The resource_arn of this RegisterAppInstanceUserEndpointRequest.
        :param endpoint_attributes: The endpoint_attributes of this RegisterAppInstanceUserEndpointRequest.
        :param client_request_token: The client_request_token of this RegisterAppInstanceUserEndpointRequest.
        :param allow_messages: The allow_messages of this RegisterAppInstanceUserEndpointRequest.
        """
        self.openapi_types = {
            'name': str,
            'type': str,
            'resource_arn': str,
            'endpoint_attributes': RegisterAppInstanceUserEndpointRequestEndpointAttributes,
            'client_request_token': str,
            'allow_messages': str
        }

        self.attribute_map = {
            'name': 'Name',
            'type': 'Type',
            'resource_arn': 'ResourceArn',
            'endpoint_attributes': 'EndpointAttributes',
            'client_request_token': 'ClientRequestToken',
            'allow_messages': 'AllowMessages'
        }

        self._name = name
        self._type = type
        self._resource_arn = resource_arn
        self._endpoint_attributes = endpoint_attributes
        self._client_request_token = client_request_token
        self._allow_messages = allow_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegisterAppInstanceUserEndpointRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegisterAppInstanceUserEndpoint_request of this RegisterAppInstanceUserEndpointRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this RegisterAppInstanceUserEndpointRequest.

        The name of the <code>AppInstanceUserEndpoint</code>.

        :return: The name of this RegisterAppInstanceUserEndpointRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegisterAppInstanceUserEndpointRequest.

        The name of the <code>AppInstanceUserEndpoint</code>.

        :param name: The name of this RegisterAppInstanceUserEndpointRequest.
        :type name: str
        """
        if name is not None and len(name) > 1600:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1600`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*/`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this RegisterAppInstanceUserEndpointRequest.

        <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p> <ul> <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li> <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li> <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li> </ul> <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>

        :return: The type of this RegisterAppInstanceUserEndpointRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RegisterAppInstanceUserEndpointRequest.

        <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p> <ul> <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li> <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li> <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li> </ul> <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>

        :param type: The type of this RegisterAppInstanceUserEndpointRequest.
        :type type: str
        """
        allowed_values = ["APNS", "APNS_SANDBOX", "GCM"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def resource_arn(self):
        """Gets the resource_arn of this RegisterAppInstanceUserEndpointRequest.

        The ARN of the resource to which the endpoint belongs.

        :return: The resource_arn of this RegisterAppInstanceUserEndpointRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this RegisterAppInstanceUserEndpointRequest.

        The ARN of the resource to which the endpoint belongs.

        :param resource_arn: The resource_arn of this RegisterAppInstanceUserEndpointRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")
        if resource_arn is not None and len(resource_arn) > 1600:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `1600`")
        if resource_arn is not None and len(resource_arn) < 5:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `5`")
        if resource_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._resource_arn = resource_arn

    @property
    def endpoint_attributes(self):
        """Gets the endpoint_attributes of this RegisterAppInstanceUserEndpointRequest.


        :return: The endpoint_attributes of this RegisterAppInstanceUserEndpointRequest.
        :rtype: RegisterAppInstanceUserEndpointRequestEndpointAttributes
        """
        return self._endpoint_attributes

    @endpoint_attributes.setter
    def endpoint_attributes(self, endpoint_attributes):
        """Sets the endpoint_attributes of this RegisterAppInstanceUserEndpointRequest.


        :param endpoint_attributes: The endpoint_attributes of this RegisterAppInstanceUserEndpointRequest.
        :type endpoint_attributes: RegisterAppInstanceUserEndpointRequestEndpointAttributes
        """
        if endpoint_attributes is None:
            raise ValueError("Invalid value for `endpoint_attributes`, must not be `None`")

        self._endpoint_attributes = endpoint_attributes

    @property
    def client_request_token(self):
        """Gets the client_request_token of this RegisterAppInstanceUserEndpointRequest.

        The unique ID assigned to the request. Use different tokens to register other endpoints.

        :return: The client_request_token of this RegisterAppInstanceUserEndpointRequest.
        :rtype: str
        """
        return self._client_request_token

    @client_request_token.setter
    def client_request_token(self, client_request_token):
        """Sets the client_request_token of this RegisterAppInstanceUserEndpointRequest.

        The unique ID assigned to the request. Use different tokens to register other endpoints.

        :param client_request_token: The client_request_token of this RegisterAppInstanceUserEndpointRequest.
        :type client_request_token: str
        """
        if client_request_token is None:
            raise ValueError("Invalid value for `client_request_token`, must not be `None`")
        if client_request_token is not None and len(client_request_token) > 64:
            raise ValueError("Invalid value for `client_request_token`, length must be less than or equal to `64`")
        if client_request_token is not None and len(client_request_token) < 2:
            raise ValueError("Invalid value for `client_request_token`, length must be greater than or equal to `2`")
        if client_request_token is not None and not re.search(r'[-_a-zA-Z0-9]*', client_request_token):
            raise ValueError("Invalid value for `client_request_token`, must be a follow pattern or equal to `/[-_a-zA-Z0-9]*/`")

        self._client_request_token = client_request_token

    @property
    def allow_messages(self):
        """Gets the allow_messages of this RegisterAppInstanceUserEndpointRequest.

        Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.

        :return: The allow_messages of this RegisterAppInstanceUserEndpointRequest.
        :rtype: str
        """
        return self._allow_messages

    @allow_messages.setter
    def allow_messages(self, allow_messages):
        """Sets the allow_messages of this RegisterAppInstanceUserEndpointRequest.

        Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.

        :param allow_messages: The allow_messages of this RegisterAppInstanceUserEndpointRequest.
        :type allow_messages: str
        """
        allowed_values = ["ALL", "NONE"]  # noqa: E501
        if allow_messages not in allowed_values:
            raise ValueError(
                "Invalid value for `allow_messages` ({0}), must be one of {1}"
                .format(allow_messages, allowed_values)
            )

        self._allow_messages = allow_messages
