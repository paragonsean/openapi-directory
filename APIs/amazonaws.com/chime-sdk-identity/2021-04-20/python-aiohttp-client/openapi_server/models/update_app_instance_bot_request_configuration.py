# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_app_instance_bot_request_configuration_lex import CreateAppInstanceBotRequestConfigurationLex
from openapi_server import util


class UpdateAppInstanceBotRequestConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lex: CreateAppInstanceBotRequestConfigurationLex=None):
        """UpdateAppInstanceBotRequestConfiguration - a model defined in OpenAPI

        :param lex: The lex of this UpdateAppInstanceBotRequestConfiguration.
        """
        self.openapi_types = {
            'lex': CreateAppInstanceBotRequestConfigurationLex
        }

        self.attribute_map = {
            'lex': 'Lex'
        }

        self._lex = lex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAppInstanceBotRequestConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAppInstanceBotRequest_Configuration of this UpdateAppInstanceBotRequestConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lex(self):
        """Gets the lex of this UpdateAppInstanceBotRequestConfiguration.


        :return: The lex of this UpdateAppInstanceBotRequestConfiguration.
        :rtype: CreateAppInstanceBotRequestConfigurationLex
        """
        return self._lex

    @lex.setter
    def lex(self, lex):
        """Sets the lex of this UpdateAppInstanceBotRequestConfiguration.


        :param lex: The lex of this UpdateAppInstanceBotRequestConfiguration.
        :type lex: CreateAppInstanceBotRequestConfigurationLex
        """
        if lex is None:
            raise ValueError("Invalid value for `lex`, must not be `None`")

        self._lex = lex
