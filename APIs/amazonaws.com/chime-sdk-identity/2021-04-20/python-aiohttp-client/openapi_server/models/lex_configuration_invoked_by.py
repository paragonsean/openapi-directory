# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.standard_messages import StandardMessages
from openapi_server.models.targeted_messages import TargetedMessages
from openapi_server import util


class LexConfigurationInvokedBy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, standard_messages: StandardMessages=None, targeted_messages: TargetedMessages=None):
        """LexConfigurationInvokedBy - a model defined in OpenAPI

        :param standard_messages: The standard_messages of this LexConfigurationInvokedBy.
        :param targeted_messages: The targeted_messages of this LexConfigurationInvokedBy.
        """
        self.openapi_types = {
            'standard_messages': StandardMessages,
            'targeted_messages': TargetedMessages
        }

        self.attribute_map = {
            'standard_messages': 'StandardMessages',
            'targeted_messages': 'TargetedMessages'
        }

        self._standard_messages = standard_messages
        self._targeted_messages = targeted_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LexConfigurationInvokedBy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LexConfiguration_InvokedBy of this LexConfigurationInvokedBy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def standard_messages(self):
        """Gets the standard_messages of this LexConfigurationInvokedBy.


        :return: The standard_messages of this LexConfigurationInvokedBy.
        :rtype: StandardMessages
        """
        return self._standard_messages

    @standard_messages.setter
    def standard_messages(self, standard_messages):
        """Sets the standard_messages of this LexConfigurationInvokedBy.


        :param standard_messages: The standard_messages of this LexConfigurationInvokedBy.
        :type standard_messages: StandardMessages
        """
        if standard_messages is None:
            raise ValueError("Invalid value for `standard_messages`, must not be `None`")

        self._standard_messages = standard_messages

    @property
    def targeted_messages(self):
        """Gets the targeted_messages of this LexConfigurationInvokedBy.


        :return: The targeted_messages of this LexConfigurationInvokedBy.
        :rtype: TargetedMessages
        """
        return self._targeted_messages

    @targeted_messages.setter
    def targeted_messages(self, targeted_messages):
        """Sets the targeted_messages of this LexConfigurationInvokedBy.


        :param targeted_messages: The targeted_messages of this LexConfigurationInvokedBy.
        :type targeted_messages: TargetedMessages
        """
        if targeted_messages is None:
            raise ValueError("Invalid value for `targeted_messages`, must not be `None`")

        self._targeted_messages = targeted_messages
