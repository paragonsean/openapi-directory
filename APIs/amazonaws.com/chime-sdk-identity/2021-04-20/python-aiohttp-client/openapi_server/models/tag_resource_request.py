# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tag import Tag
import re
from openapi_server import util


class TagResourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_arn: str=None, tags: List[Tag]=None):
        """TagResourceRequest - a model defined in OpenAPI

        :param resource_arn: The resource_arn of this TagResourceRequest.
        :param tags: The tags of this TagResourceRequest.
        """
        self.openapi_types = {
            'resource_arn': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'resource_arn': 'ResourceARN',
            'tags': 'Tags'
        }

        self._resource_arn = resource_arn
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagResourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TagResource_request of this TagResourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_arn(self):
        """Gets the resource_arn of this TagResourceRequest.

        The resource ARN.

        :return: The resource_arn of this TagResourceRequest.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this TagResourceRequest.

        The resource ARN.

        :param resource_arn: The resource_arn of this TagResourceRequest.
        :type resource_arn: str
        """
        if resource_arn is None:
            raise ValueError("Invalid value for `resource_arn`, must not be `None`")
        if resource_arn is not None and len(resource_arn) > 1600:
            raise ValueError("Invalid value for `resource_arn`, length must be less than or equal to `1600`")
        if resource_arn is not None and len(resource_arn) < 5:
            raise ValueError("Invalid value for `resource_arn`, length must be greater than or equal to `5`")
        if resource_arn is not None and not re.search(r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}', resource_arn):
            raise ValueError("Invalid value for `resource_arn`, must be a follow pattern or equal to `/arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^\/].{0,1023}/`")

        self._resource_arn = resource_arn

    @property
    def tags(self):
        """Gets the tags of this TagResourceRequest.

        The tag key-value pairs.

        :return: The tags of this TagResourceRequest.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TagResourceRequest.

        The tag key-value pairs.

        :param tags: The tags of this TagResourceRequest.
        :type tags: List[Tag]
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")
        if tags is not None and len(tags) > 50:
            raise ValueError("Invalid value for `tags`, number of items must be less than or equal to `50`")
        if tags is not None and len(tags) < 1:
            raise ValueError("Invalid value for `tags`, number of items must be greater than or equal to `1`")

        self._tags = tags
