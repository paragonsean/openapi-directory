# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lex_configuration_invoked_by import LexConfigurationInvokedBy
from openapi_server.models.responds_to import RespondsTo
from openapi_server import util


class LexConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, responds_to: RespondsTo=None, invoked_by: LexConfigurationInvokedBy=None, lex_bot_alias_arn: str=None, locale_id: str=None, welcome_intent: str=None):
        """LexConfiguration - a model defined in OpenAPI

        :param responds_to: The responds_to of this LexConfiguration.
        :param invoked_by: The invoked_by of this LexConfiguration.
        :param lex_bot_alias_arn: The lex_bot_alias_arn of this LexConfiguration.
        :param locale_id: The locale_id of this LexConfiguration.
        :param welcome_intent: The welcome_intent of this LexConfiguration.
        """
        self.openapi_types = {
            'responds_to': RespondsTo,
            'invoked_by': LexConfigurationInvokedBy,
            'lex_bot_alias_arn': str,
            'locale_id': str,
            'welcome_intent': str
        }

        self.attribute_map = {
            'responds_to': 'RespondsTo',
            'invoked_by': 'InvokedBy',
            'lex_bot_alias_arn': 'LexBotAliasArn',
            'locale_id': 'LocaleId',
            'welcome_intent': 'WelcomeIntent'
        }

        self._responds_to = responds_to
        self._invoked_by = invoked_by
        self._lex_bot_alias_arn = lex_bot_alias_arn
        self._locale_id = locale_id
        self._welcome_intent = welcome_intent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LexConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LexConfiguration of this LexConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def responds_to(self):
        """Gets the responds_to of this LexConfiguration.


        :return: The responds_to of this LexConfiguration.
        :rtype: RespondsTo
        """
        return self._responds_to

    @responds_to.setter
    def responds_to(self, responds_to):
        """Sets the responds_to of this LexConfiguration.


        :param responds_to: The responds_to of this LexConfiguration.
        :type responds_to: RespondsTo
        """

        self._responds_to = responds_to

    @property
    def invoked_by(self):
        """Gets the invoked_by of this LexConfiguration.


        :return: The invoked_by of this LexConfiguration.
        :rtype: LexConfigurationInvokedBy
        """
        return self._invoked_by

    @invoked_by.setter
    def invoked_by(self, invoked_by):
        """Sets the invoked_by of this LexConfiguration.


        :param invoked_by: The invoked_by of this LexConfiguration.
        :type invoked_by: LexConfigurationInvokedBy
        """

        self._invoked_by = invoked_by

    @property
    def lex_bot_alias_arn(self):
        """Gets the lex_bot_alias_arn of this LexConfiguration.


        :return: The lex_bot_alias_arn of this LexConfiguration.
        :rtype: str
        """
        return self._lex_bot_alias_arn

    @lex_bot_alias_arn.setter
    def lex_bot_alias_arn(self, lex_bot_alias_arn):
        """Sets the lex_bot_alias_arn of this LexConfiguration.


        :param lex_bot_alias_arn: The lex_bot_alias_arn of this LexConfiguration.
        :type lex_bot_alias_arn: str
        """
        if lex_bot_alias_arn is None:
            raise ValueError("Invalid value for `lex_bot_alias_arn`, must not be `None`")

        self._lex_bot_alias_arn = lex_bot_alias_arn

    @property
    def locale_id(self):
        """Gets the locale_id of this LexConfiguration.


        :return: The locale_id of this LexConfiguration.
        :rtype: str
        """
        return self._locale_id

    @locale_id.setter
    def locale_id(self, locale_id):
        """Sets the locale_id of this LexConfiguration.


        :param locale_id: The locale_id of this LexConfiguration.
        :type locale_id: str
        """
        if locale_id is None:
            raise ValueError("Invalid value for `locale_id`, must not be `None`")

        self._locale_id = locale_id

    @property
    def welcome_intent(self):
        """Gets the welcome_intent of this LexConfiguration.


        :return: The welcome_intent of this LexConfiguration.
        :rtype: str
        """
        return self._welcome_intent

    @welcome_intent.setter
    def welcome_intent(self, welcome_intent):
        """Sets the welcome_intent of this LexConfiguration.


        :param welcome_intent: The welcome_intent of this LexConfiguration.
        :type welcome_intent: str
        """

        self._welcome_intent = welcome_intent
