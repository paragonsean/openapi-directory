# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UpdateAppInstanceUserEndpointRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, allow_messages: str=None):
        """UpdateAppInstanceUserEndpointRequest - a model defined in OpenAPI

        :param name: The name of this UpdateAppInstanceUserEndpointRequest.
        :param allow_messages: The allow_messages of this UpdateAppInstanceUserEndpointRequest.
        """
        self.openapi_types = {
            'name': str,
            'allow_messages': str
        }

        self.attribute_map = {
            'name': 'Name',
            'allow_messages': 'AllowMessages'
        }

        self._name = name
        self._allow_messages = allow_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAppInstanceUserEndpointRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAppInstanceUserEndpoint_request of this UpdateAppInstanceUserEndpointRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateAppInstanceUserEndpointRequest.

        The name of the <code>AppInstanceUserEndpoint</code>.

        :return: The name of this UpdateAppInstanceUserEndpointRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAppInstanceUserEndpointRequest.

        The name of the <code>AppInstanceUserEndpoint</code>.

        :param name: The name of this UpdateAppInstanceUserEndpointRequest.
        :type name: str
        """
        if name is not None and len(name) > 1600:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `1600`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'.*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/.*/`")

        self._name = name

    @property
    def allow_messages(self):
        """Gets the allow_messages of this UpdateAppInstanceUserEndpointRequest.

        Boolean that controls whether the <code>AppInstanceUserEndpoint</code> is opted in to receive messages. <code>ALL</code> indicates the endpoint will receive all messages. <code>NONE</code> indicates the endpoint will receive no messages.

        :return: The allow_messages of this UpdateAppInstanceUserEndpointRequest.
        :rtype: str
        """
        return self._allow_messages

    @allow_messages.setter
    def allow_messages(self, allow_messages):
        """Sets the allow_messages of this UpdateAppInstanceUserEndpointRequest.

        Boolean that controls whether the <code>AppInstanceUserEndpoint</code> is opted in to receive messages. <code>ALL</code> indicates the endpoint will receive all messages. <code>NONE</code> indicates the endpoint will receive no messages.

        :param allow_messages: The allow_messages of this UpdateAppInstanceUserEndpointRequest.
        :type allow_messages: str
        """
        allowed_values = ["ALL", "NONE"]  # noqa: E501
        if allow_messages not in allowed_values:
            raise ValueError(
                "Invalid value for `allow_messages` ({0}), must be one of {1}"
                .format(allow_messages, allowed_values)
            )

        self._allow_messages = allow_messages
