# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_app_instance_bot_request_configuration import CreateAppInstanceBotRequestConfiguration
import re
from openapi_server import util


class UpdateAppInstanceBotRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, metadata: str=None, configuration: CreateAppInstanceBotRequestConfiguration=None):
        """UpdateAppInstanceBotRequest - a model defined in OpenAPI

        :param name: The name of this UpdateAppInstanceBotRequest.
        :param metadata: The metadata of this UpdateAppInstanceBotRequest.
        :param configuration: The configuration of this UpdateAppInstanceBotRequest.
        """
        self.openapi_types = {
            'name': str,
            'metadata': str,
            'configuration': CreateAppInstanceBotRequestConfiguration
        }

        self.attribute_map = {
            'name': 'Name',
            'metadata': 'Metadata',
            'configuration': 'Configuration'
        }

        self._name = name
        self._metadata = metadata
        self._configuration = configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAppInstanceBotRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAppInstanceBot_request of this UpdateAppInstanceBotRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this UpdateAppInstanceBotRequest.

        The name of the <code>AppInstanceBot</code>.

        :return: The name of this UpdateAppInstanceBotRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAppInstanceBotRequest.

        The name of the <code>AppInstanceBot</code>.

        :param name: The name of this UpdateAppInstanceBotRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")
        if name is not None and len(name) < 0:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `0`")
        if name is not None and not re.search(r'[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*', name):
            raise ValueError("Invalid value for `name`, must be a follow pattern or equal to `/[\u0009\u000A\u000D\u0020-\u007E\u0085\u00A0-\uD7FF\uE000-\uFFFD\u10000-\u10FFFF]*/`")

        self._name = name

    @property
    def metadata(self):
        """Gets the metadata of this UpdateAppInstanceBotRequest.

        The metadata of the <code>AppInstanceBot</code>.

        :return: The metadata of this UpdateAppInstanceBotRequest.
        :rtype: str
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateAppInstanceBotRequest.

        The metadata of the <code>AppInstanceBot</code>.

        :param metadata: The metadata of this UpdateAppInstanceBotRequest.
        :type metadata: str
        """
        if metadata is None:
            raise ValueError("Invalid value for `metadata`, must not be `None`")
        if metadata is not None and len(metadata) > 1024:
            raise ValueError("Invalid value for `metadata`, length must be less than or equal to `1024`")
        if metadata is not None and len(metadata) < 0:
            raise ValueError("Invalid value for `metadata`, length must be greater than or equal to `0`")
        if metadata is not None and not re.search(r'.*', metadata):
            raise ValueError("Invalid value for `metadata`, must be a follow pattern or equal to `/.*/`")

        self._metadata = metadata

    @property
    def configuration(self):
        """Gets the configuration of this UpdateAppInstanceBotRequest.


        :return: The configuration of this UpdateAppInstanceBotRequest.
        :rtype: CreateAppInstanceBotRequestConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this UpdateAppInstanceBotRequest.


        :param configuration: The configuration of this UpdateAppInstanceBotRequest.
        :type configuration: CreateAppInstanceBotRequestConfiguration
        """

        self._configuration = configuration
