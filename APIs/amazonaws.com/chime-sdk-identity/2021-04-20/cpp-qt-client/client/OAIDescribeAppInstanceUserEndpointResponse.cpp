/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppInstanceUserEndpointResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppInstanceUserEndpointResponse::OAIDescribeAppInstanceUserEndpointResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppInstanceUserEndpointResponse::OAIDescribeAppInstanceUserEndpointResponse() {
    this->initializeModel();
}

OAIDescribeAppInstanceUserEndpointResponse::~OAIDescribeAppInstanceUserEndpointResponse() {}

void OAIDescribeAppInstanceUserEndpointResponse::initializeModel() {

    m_app_instance_user_endpoint_isSet = false;
    m_app_instance_user_endpoint_isValid = false;
}

void OAIDescribeAppInstanceUserEndpointResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppInstanceUserEndpointResponse::fromJsonObject(QJsonObject json) {

    m_app_instance_user_endpoint_isValid = ::OpenAPI::fromJsonValue(m_app_instance_user_endpoint, json[QString("AppInstanceUserEndpoint")]);
    m_app_instance_user_endpoint_isSet = !json[QString("AppInstanceUserEndpoint")].isNull() && m_app_instance_user_endpoint_isValid;
}

QString OAIDescribeAppInstanceUserEndpointResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppInstanceUserEndpointResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_user_endpoint.isSet()) {
        obj.insert(QString("AppInstanceUserEndpoint"), ::OpenAPI::toJsonValue(m_app_instance_user_endpoint));
    }
    return obj;
}

OAIDescribeAppInstanceUserEndpointResponse_AppInstanceUserEndpoint OAIDescribeAppInstanceUserEndpointResponse::getAppInstanceUserEndpoint() const {
    return m_app_instance_user_endpoint;
}
void OAIDescribeAppInstanceUserEndpointResponse::setAppInstanceUserEndpoint(const OAIDescribeAppInstanceUserEndpointResponse_AppInstanceUserEndpoint &app_instance_user_endpoint) {
    m_app_instance_user_endpoint = app_instance_user_endpoint;
    m_app_instance_user_endpoint_isSet = true;
}

bool OAIDescribeAppInstanceUserEndpointResponse::is_app_instance_user_endpoint_Set() const{
    return m_app_instance_user_endpoint_isSet;
}

bool OAIDescribeAppInstanceUserEndpointResponse::is_app_instance_user_endpoint_Valid() const{
    return m_app_instance_user_endpoint_isValid;
}

bool OAIDescribeAppInstanceUserEndpointResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_user_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppInstanceUserEndpointResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
