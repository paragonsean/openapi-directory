/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateAppInstanceBot_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateAppInstanceBot_request::OAIUpdateAppInstanceBot_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateAppInstanceBot_request::OAIUpdateAppInstanceBot_request() {
    this->initializeModel();
}

OAIUpdateAppInstanceBot_request::~OAIUpdateAppInstanceBot_request() {}

void OAIUpdateAppInstanceBot_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;
}

void OAIUpdateAppInstanceBot_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateAppInstanceBot_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;
}

QString OAIUpdateAppInstanceBot_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateAppInstanceBot_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    return obj;
}

QString OAIUpdateAppInstanceBot_request::getName() const {
    return m_name;
}
void OAIUpdateAppInstanceBot_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateAppInstanceBot_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateAppInstanceBot_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateAppInstanceBot_request::getMetadata() const {
    return m_metadata;
}
void OAIUpdateAppInstanceBot_request::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIUpdateAppInstanceBot_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIUpdateAppInstanceBot_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAICreateAppInstanceBot_request_Configuration OAIUpdateAppInstanceBot_request::getConfiguration() const {
    return m_configuration;
}
void OAIUpdateAppInstanceBot_request::setConfiguration(const OAICreateAppInstanceBot_request_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIUpdateAppInstanceBot_request::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIUpdateAppInstanceBot_request::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAIUpdateAppInstanceBot_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateAppInstanceBot_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_metadata_isValid && true;
}

} // namespace OpenAPI
