/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInstanceUserEndpointSummary_EndpointState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInstanceUserEndpointSummary_EndpointState::OAIAppInstanceUserEndpointSummary_EndpointState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInstanceUserEndpointSummary_EndpointState::OAIAppInstanceUserEndpointSummary_EndpointState() {
    this->initializeModel();
}

OAIAppInstanceUserEndpointSummary_EndpointState::~OAIAppInstanceUserEndpointSummary_EndpointState() {}

void OAIAppInstanceUserEndpointSummary_EndpointState::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_reason_isSet = false;
    m_status_reason_isValid = false;
}

void OAIAppInstanceUserEndpointSummary_EndpointState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInstanceUserEndpointSummary_EndpointState::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_status_reason_isValid = ::OpenAPI::fromJsonValue(m_status_reason, json[QString("StatusReason")]);
    m_status_reason_isSet = !json[QString("StatusReason")].isNull() && m_status_reason_isValid;
}

QString OAIAppInstanceUserEndpointSummary_EndpointState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInstanceUserEndpointSummary_EndpointState::asJsonObject() const {
    QJsonObject obj;
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_reason.isSet()) {
        obj.insert(QString("StatusReason"), ::OpenAPI::toJsonValue(m_status_reason));
    }
    return obj;
}

OAIEndpointStatus OAIAppInstanceUserEndpointSummary_EndpointState::getStatus() const {
    return m_status;
}
void OAIAppInstanceUserEndpointSummary_EndpointState::setStatus(const OAIEndpointStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAppInstanceUserEndpointSummary_EndpointState::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAppInstanceUserEndpointSummary_EndpointState::is_status_Valid() const{
    return m_status_isValid;
}

OAIEndpointStatusReason OAIAppInstanceUserEndpointSummary_EndpointState::getStatusReason() const {
    return m_status_reason;
}
void OAIAppInstanceUserEndpointSummary_EndpointState::setStatusReason(const OAIEndpointStatusReason &status_reason) {
    m_status_reason = status_reason;
    m_status_reason_isSet = true;
}

bool OAIAppInstanceUserEndpointSummary_EndpointState::is_status_reason_Set() const{
    return m_status_reason_isSet;
}

bool OAIAppInstanceUserEndpointSummary_EndpointState::is_status_reason_Valid() const{
    return m_status_reason_isValid;
}

bool OAIAppInstanceUserEndpointSummary_EndpointState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInstanceUserEndpointSummary_EndpointState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_status_isValid && true;
}

} // namespace OpenAPI
