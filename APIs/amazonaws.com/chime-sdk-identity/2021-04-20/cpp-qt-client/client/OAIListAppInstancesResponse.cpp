/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAppInstancesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAppInstancesResponse::OAIListAppInstancesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAppInstancesResponse::OAIListAppInstancesResponse() {
    this->initializeModel();
}

OAIListAppInstancesResponse::~OAIListAppInstancesResponse() {}

void OAIListAppInstancesResponse::initializeModel() {

    m_app_instances_isSet = false;
    m_app_instances_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAppInstancesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAppInstancesResponse::fromJsonObject(QJsonObject json) {

    m_app_instances_isValid = ::OpenAPI::fromJsonValue(m_app_instances, json[QString("AppInstances")]);
    m_app_instances_isSet = !json[QString("AppInstances")].isNull() && m_app_instances_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAppInstancesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAppInstancesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instances.isSet()) {
        obj.insert(QString("AppInstances"), ::OpenAPI::toJsonValue(m_app_instances));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAppInstancesResponse::getAppInstances() const {
    return m_app_instances;
}
void OAIListAppInstancesResponse::setAppInstances(const QList &app_instances) {
    m_app_instances = app_instances;
    m_app_instances_isSet = true;
}

bool OAIListAppInstancesResponse::is_app_instances_Set() const{
    return m_app_instances_isSet;
}

bool OAIListAppInstancesResponse::is_app_instances_Valid() const{
    return m_app_instances_isValid;
}

QString OAIListAppInstancesResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAppInstancesResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAppInstancesResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAppInstancesResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAppInstancesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instances.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAppInstancesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
