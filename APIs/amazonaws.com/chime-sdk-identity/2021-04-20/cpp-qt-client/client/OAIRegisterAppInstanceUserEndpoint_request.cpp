/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegisterAppInstanceUserEndpoint_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegisterAppInstanceUserEndpoint_request::OAIRegisterAppInstanceUserEndpoint_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegisterAppInstanceUserEndpoint_request::OAIRegisterAppInstanceUserEndpoint_request() {
    this->initializeModel();
}

OAIRegisterAppInstanceUserEndpoint_request::~OAIRegisterAppInstanceUserEndpoint_request() {}

void OAIRegisterAppInstanceUserEndpoint_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_endpoint_attributes_isSet = false;
    m_endpoint_attributes_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_allow_messages_isSet = false;
    m_allow_messages_isValid = false;
}

void OAIRegisterAppInstanceUserEndpoint_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegisterAppInstanceUserEndpoint_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_endpoint_attributes_isValid = ::OpenAPI::fromJsonValue(m_endpoint_attributes, json[QString("EndpointAttributes")]);
    m_endpoint_attributes_isSet = !json[QString("EndpointAttributes")].isNull() && m_endpoint_attributes_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_allow_messages_isValid = ::OpenAPI::fromJsonValue(m_allow_messages, json[QString("AllowMessages")]);
    m_allow_messages_isSet = !json[QString("AllowMessages")].isNull() && m_allow_messages_isValid;
}

QString OAIRegisterAppInstanceUserEndpoint_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegisterAppInstanceUserEndpoint_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_endpoint_attributes.isSet()) {
        obj.insert(QString("EndpointAttributes"), ::OpenAPI::toJsonValue(m_endpoint_attributes));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_allow_messages_isSet) {
        obj.insert(QString("AllowMessages"), ::OpenAPI::toJsonValue(m_allow_messages));
    }
    return obj;
}

QString OAIRegisterAppInstanceUserEndpoint_request::getName() const {
    return m_name;
}
void OAIRegisterAppInstanceUserEndpoint_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRegisterAppInstanceUserEndpoint_request::getType() const {
    return m_type;
}
void OAIRegisterAppInstanceUserEndpoint_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRegisterAppInstanceUserEndpoint_request::getResourceArn() const {
    return m_resource_arn;
}
void OAIRegisterAppInstanceUserEndpoint_request::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAIRegisterAppInstanceUserEndpoint_request_EndpointAttributes OAIRegisterAppInstanceUserEndpoint_request::getEndpointAttributes() const {
    return m_endpoint_attributes;
}
void OAIRegisterAppInstanceUserEndpoint_request::setEndpointAttributes(const OAIRegisterAppInstanceUserEndpoint_request_EndpointAttributes &endpoint_attributes) {
    m_endpoint_attributes = endpoint_attributes;
    m_endpoint_attributes_isSet = true;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_endpoint_attributes_Set() const{
    return m_endpoint_attributes_isSet;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_endpoint_attributes_Valid() const{
    return m_endpoint_attributes_isValid;
}

QString OAIRegisterAppInstanceUserEndpoint_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAIRegisterAppInstanceUserEndpoint_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QString OAIRegisterAppInstanceUserEndpoint_request::getAllowMessages() const {
    return m_allow_messages;
}
void OAIRegisterAppInstanceUserEndpoint_request::setAllowMessages(const QString &allow_messages) {
    m_allow_messages = allow_messages;
    m_allow_messages_isSet = true;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_allow_messages_Set() const{
    return m_allow_messages_isSet;
}

bool OAIRegisterAppInstanceUserEndpoint_request::is_allow_messages_Valid() const{
    return m_allow_messages_isValid;
}

bool OAIRegisterAppInstanceUserEndpoint_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_messages_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegisterAppInstanceUserEndpoint_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && m_resource_arn_isValid && m_endpoint_attributes_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
