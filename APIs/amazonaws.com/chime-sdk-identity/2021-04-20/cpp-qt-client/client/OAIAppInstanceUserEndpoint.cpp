/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInstanceUserEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInstanceUserEndpoint::OAIAppInstanceUserEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInstanceUserEndpoint::OAIAppInstanceUserEndpoint() {
    this->initializeModel();
}

OAIAppInstanceUserEndpoint::~OAIAppInstanceUserEndpoint() {}

void OAIAppInstanceUserEndpoint::initializeModel() {

    m_app_instance_user_arn_isSet = false;
    m_app_instance_user_arn_isValid = false;

    m_endpoint_id_isSet = false;
    m_endpoint_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;

    m_endpoint_attributes_isSet = false;
    m_endpoint_attributes_isValid = false;

    m_created_timestamp_isSet = false;
    m_created_timestamp_isValid = false;

    m_last_updated_timestamp_isSet = false;
    m_last_updated_timestamp_isValid = false;

    m_allow_messages_isSet = false;
    m_allow_messages_isValid = false;

    m_endpoint_state_isSet = false;
    m_endpoint_state_isValid = false;
}

void OAIAppInstanceUserEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInstanceUserEndpoint::fromJsonObject(QJsonObject json) {

    m_app_instance_user_arn_isValid = ::OpenAPI::fromJsonValue(m_app_instance_user_arn, json[QString("AppInstanceUserArn")]);
    m_app_instance_user_arn_isSet = !json[QString("AppInstanceUserArn")].isNull() && m_app_instance_user_arn_isValid;

    m_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_endpoint_id, json[QString("EndpointId")]);
    m_endpoint_id_isSet = !json[QString("EndpointId")].isNull() && m_endpoint_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;

    m_endpoint_attributes_isValid = ::OpenAPI::fromJsonValue(m_endpoint_attributes, json[QString("EndpointAttributes")]);
    m_endpoint_attributes_isSet = !json[QString("EndpointAttributes")].isNull() && m_endpoint_attributes_isValid;

    m_created_timestamp_isValid = ::OpenAPI::fromJsonValue(m_created_timestamp, json[QString("CreatedTimestamp")]);
    m_created_timestamp_isSet = !json[QString("CreatedTimestamp")].isNull() && m_created_timestamp_isValid;

    m_last_updated_timestamp_isValid = ::OpenAPI::fromJsonValue(m_last_updated_timestamp, json[QString("LastUpdatedTimestamp")]);
    m_last_updated_timestamp_isSet = !json[QString("LastUpdatedTimestamp")].isNull() && m_last_updated_timestamp_isValid;

    m_allow_messages_isValid = ::OpenAPI::fromJsonValue(m_allow_messages, json[QString("AllowMessages")]);
    m_allow_messages_isSet = !json[QString("AllowMessages")].isNull() && m_allow_messages_isValid;

    m_endpoint_state_isValid = ::OpenAPI::fromJsonValue(m_endpoint_state, json[QString("EndpointState")]);
    m_endpoint_state_isSet = !json[QString("EndpointState")].isNull() && m_endpoint_state_isValid;
}

QString OAIAppInstanceUserEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInstanceUserEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_user_arn_isSet) {
        obj.insert(QString("AppInstanceUserArn"), ::OpenAPI::toJsonValue(m_app_instance_user_arn));
    }
    if (m_endpoint_id_isSet) {
        obj.insert(QString("EndpointId"), ::OpenAPI::toJsonValue(m_endpoint_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    if (m_endpoint_attributes.isSet()) {
        obj.insert(QString("EndpointAttributes"), ::OpenAPI::toJsonValue(m_endpoint_attributes));
    }
    if (m_created_timestamp_isSet) {
        obj.insert(QString("CreatedTimestamp"), ::OpenAPI::toJsonValue(m_created_timestamp));
    }
    if (m_last_updated_timestamp_isSet) {
        obj.insert(QString("LastUpdatedTimestamp"), ::OpenAPI::toJsonValue(m_last_updated_timestamp));
    }
    if (m_allow_messages.isSet()) {
        obj.insert(QString("AllowMessages"), ::OpenAPI::toJsonValue(m_allow_messages));
    }
    if (m_endpoint_state.isSet()) {
        obj.insert(QString("EndpointState"), ::OpenAPI::toJsonValue(m_endpoint_state));
    }
    return obj;
}

QString OAIAppInstanceUserEndpoint::getAppInstanceUserArn() const {
    return m_app_instance_user_arn;
}
void OAIAppInstanceUserEndpoint::setAppInstanceUserArn(const QString &app_instance_user_arn) {
    m_app_instance_user_arn = app_instance_user_arn;
    m_app_instance_user_arn_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_app_instance_user_arn_Set() const{
    return m_app_instance_user_arn_isSet;
}

bool OAIAppInstanceUserEndpoint::is_app_instance_user_arn_Valid() const{
    return m_app_instance_user_arn_isValid;
}

QString OAIAppInstanceUserEndpoint::getEndpointId() const {
    return m_endpoint_id;
}
void OAIAppInstanceUserEndpoint::setEndpointId(const QString &endpoint_id) {
    m_endpoint_id = endpoint_id;
    m_endpoint_id_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_endpoint_id_Set() const{
    return m_endpoint_id_isSet;
}

bool OAIAppInstanceUserEndpoint::is_endpoint_id_Valid() const{
    return m_endpoint_id_isValid;
}

QString OAIAppInstanceUserEndpoint::getName() const {
    return m_name;
}
void OAIAppInstanceUserEndpoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppInstanceUserEndpoint::is_name_Valid() const{
    return m_name_isValid;
}

OAIAppInstanceUserEndpointType OAIAppInstanceUserEndpoint::getType() const {
    return m_type;
}
void OAIAppInstanceUserEndpoint::setType(const OAIAppInstanceUserEndpointType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAppInstanceUserEndpoint::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIAppInstanceUserEndpoint::getResourceArn() const {
    return m_resource_arn;
}
void OAIAppInstanceUserEndpoint::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIAppInstanceUserEndpoint::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

OAIAppInstanceUserEndpoint_EndpointAttributes OAIAppInstanceUserEndpoint::getEndpointAttributes() const {
    return m_endpoint_attributes;
}
void OAIAppInstanceUserEndpoint::setEndpointAttributes(const OAIAppInstanceUserEndpoint_EndpointAttributes &endpoint_attributes) {
    m_endpoint_attributes = endpoint_attributes;
    m_endpoint_attributes_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_endpoint_attributes_Set() const{
    return m_endpoint_attributes_isSet;
}

bool OAIAppInstanceUserEndpoint::is_endpoint_attributes_Valid() const{
    return m_endpoint_attributes_isValid;
}

QDateTime OAIAppInstanceUserEndpoint::getCreatedTimestamp() const {
    return m_created_timestamp;
}
void OAIAppInstanceUserEndpoint::setCreatedTimestamp(const QDateTime &created_timestamp) {
    m_created_timestamp = created_timestamp;
    m_created_timestamp_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_created_timestamp_Set() const{
    return m_created_timestamp_isSet;
}

bool OAIAppInstanceUserEndpoint::is_created_timestamp_Valid() const{
    return m_created_timestamp_isValid;
}

QDateTime OAIAppInstanceUserEndpoint::getLastUpdatedTimestamp() const {
    return m_last_updated_timestamp;
}
void OAIAppInstanceUserEndpoint::setLastUpdatedTimestamp(const QDateTime &last_updated_timestamp) {
    m_last_updated_timestamp = last_updated_timestamp;
    m_last_updated_timestamp_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_last_updated_timestamp_Set() const{
    return m_last_updated_timestamp_isSet;
}

bool OAIAppInstanceUserEndpoint::is_last_updated_timestamp_Valid() const{
    return m_last_updated_timestamp_isValid;
}

OAIAllowMessages OAIAppInstanceUserEndpoint::getAllowMessages() const {
    return m_allow_messages;
}
void OAIAppInstanceUserEndpoint::setAllowMessages(const OAIAllowMessages &allow_messages) {
    m_allow_messages = allow_messages;
    m_allow_messages_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_allow_messages_Set() const{
    return m_allow_messages_isSet;
}

bool OAIAppInstanceUserEndpoint::is_allow_messages_Valid() const{
    return m_allow_messages_isValid;
}

OAIAppInstanceUserEndpoint_EndpointState OAIAppInstanceUserEndpoint::getEndpointState() const {
    return m_endpoint_state;
}
void OAIAppInstanceUserEndpoint::setEndpointState(const OAIAppInstanceUserEndpoint_EndpointState &endpoint_state) {
    m_endpoint_state = endpoint_state;
    m_endpoint_state_isSet = true;
}

bool OAIAppInstanceUserEndpoint::is_endpoint_state_Set() const{
    return m_endpoint_state_isSet;
}

bool OAIAppInstanceUserEndpoint::is_endpoint_state_Valid() const{
    return m_endpoint_state_isValid;
}

bool OAIAppInstanceUserEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInstanceUserEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
