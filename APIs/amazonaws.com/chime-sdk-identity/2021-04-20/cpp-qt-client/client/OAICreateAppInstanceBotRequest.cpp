/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppInstanceBotRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppInstanceBotRequest::OAICreateAppInstanceBotRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppInstanceBotRequest::OAICreateAppInstanceBotRequest() {
    this->initializeModel();
}

OAICreateAppInstanceBotRequest::~OAICreateAppInstanceBotRequest() {}

void OAICreateAppInstanceBotRequest::initializeModel() {

    m_app_instance_arn_isSet = false;
    m_app_instance_arn_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;
}

void OAICreateAppInstanceBotRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppInstanceBotRequest::fromJsonObject(QJsonObject json) {

    m_app_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_app_instance_arn, json[QString("AppInstanceArn")]);
    m_app_instance_arn_isSet = !json[QString("AppInstanceArn")].isNull() && m_app_instance_arn_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("Configuration")]);
    m_configuration_isSet = !json[QString("Configuration")].isNull() && m_configuration_isValid;
}

QString OAICreateAppInstanceBotRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppInstanceBotRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_arn_isSet) {
        obj.insert(QString("AppInstanceArn"), ::OpenAPI::toJsonValue(m_app_instance_arn));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_configuration.isSet()) {
        obj.insert(QString("Configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    return obj;
}

QString OAICreateAppInstanceBotRequest::getAppInstanceArn() const {
    return m_app_instance_arn;
}
void OAICreateAppInstanceBotRequest::setAppInstanceArn(const QString &app_instance_arn) {
    m_app_instance_arn = app_instance_arn;
    m_app_instance_arn_isSet = true;
}

bool OAICreateAppInstanceBotRequest::is_app_instance_arn_Set() const{
    return m_app_instance_arn_isSet;
}

bool OAICreateAppInstanceBotRequest::is_app_instance_arn_Valid() const{
    return m_app_instance_arn_isValid;
}

QString OAICreateAppInstanceBotRequest::getName() const {
    return m_name;
}
void OAICreateAppInstanceBotRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAppInstanceBotRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAppInstanceBotRequest::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAppInstanceBotRequest::getMetadata() const {
    return m_metadata;
}
void OAICreateAppInstanceBotRequest::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateAppInstanceBotRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateAppInstanceBotRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateAppInstanceBotRequest::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateAppInstanceBotRequest::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateAppInstanceBotRequest::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateAppInstanceBotRequest::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList OAICreateAppInstanceBotRequest::getTags() const {
    return m_tags;
}
void OAICreateAppInstanceBotRequest::setTags(const QList &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAppInstanceBotRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAppInstanceBotRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateAppInstanceBotRequest_Configuration OAICreateAppInstanceBotRequest::getConfiguration() const {
    return m_configuration;
}
void OAICreateAppInstanceBotRequest::setConfiguration(const OAICreateAppInstanceBotRequest_Configuration &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAICreateAppInstanceBotRequest::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAICreateAppInstanceBotRequest::is_configuration_Valid() const{
    return m_configuration_isValid;
}

bool OAICreateAppInstanceBotRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppInstanceBotRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_instance_arn_isValid && m_client_request_token_isValid && m_configuration_isValid && true;
}

} // namespace OpenAPI
