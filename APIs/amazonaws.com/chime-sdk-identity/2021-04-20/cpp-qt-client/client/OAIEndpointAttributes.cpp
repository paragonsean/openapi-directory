/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpointAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpointAttributes::OAIEndpointAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpointAttributes::OAIEndpointAttributes() {
    this->initializeModel();
}

OAIEndpointAttributes::~OAIEndpointAttributes() {}

void OAIEndpointAttributes::initializeModel() {

    m_device_token_isSet = false;
    m_device_token_isValid = false;

    m_voip_device_token_isSet = false;
    m_voip_device_token_isValid = false;
}

void OAIEndpointAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpointAttributes::fromJsonObject(QJsonObject json) {

    m_device_token_isValid = ::OpenAPI::fromJsonValue(m_device_token, json[QString("DeviceToken")]);
    m_device_token_isSet = !json[QString("DeviceToken")].isNull() && m_device_token_isValid;

    m_voip_device_token_isValid = ::OpenAPI::fromJsonValue(m_voip_device_token, json[QString("VoipDeviceToken")]);
    m_voip_device_token_isSet = !json[QString("VoipDeviceToken")].isNull() && m_voip_device_token_isValid;
}

QString OAIEndpointAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpointAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_device_token_isSet) {
        obj.insert(QString("DeviceToken"), ::OpenAPI::toJsonValue(m_device_token));
    }
    if (m_voip_device_token_isSet) {
        obj.insert(QString("VoipDeviceToken"), ::OpenAPI::toJsonValue(m_voip_device_token));
    }
    return obj;
}

QString OAIEndpointAttributes::getDeviceToken() const {
    return m_device_token;
}
void OAIEndpointAttributes::setDeviceToken(const QString &device_token) {
    m_device_token = device_token;
    m_device_token_isSet = true;
}

bool OAIEndpointAttributes::is_device_token_Set() const{
    return m_device_token_isSet;
}

bool OAIEndpointAttributes::is_device_token_Valid() const{
    return m_device_token_isValid;
}

QString OAIEndpointAttributes::getVoipDeviceToken() const {
    return m_voip_device_token;
}
void OAIEndpointAttributes::setVoipDeviceToken(const QString &voip_device_token) {
    m_voip_device_token = voip_device_token;
    m_voip_device_token_isSet = true;
}

bool OAIEndpointAttributes::is_voip_device_token_Set() const{
    return m_voip_device_token_isSet;
}

bool OAIEndpointAttributes::is_voip_device_token_Valid() const{
    return m_voip_device_token_isValid;
}

bool OAIEndpointAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_voip_device_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpointAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_token_isValid && true;
}

} // namespace OpenAPI
