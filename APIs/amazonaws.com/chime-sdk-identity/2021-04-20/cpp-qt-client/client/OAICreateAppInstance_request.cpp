/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppInstance_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppInstance_request::OAICreateAppInstance_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppInstance_request::OAICreateAppInstance_request() {
    this->initializeModel();
}

OAICreateAppInstance_request::~OAICreateAppInstance_request() {}

void OAICreateAppInstance_request::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateAppInstance_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppInstance_request::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateAppInstance_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppInstance_request::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateAppInstance_request::getName() const {
    return m_name;
}
void OAICreateAppInstance_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAppInstance_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAppInstance_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAppInstance_request::getMetadata() const {
    return m_metadata;
}
void OAICreateAppInstance_request::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateAppInstance_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateAppInstance_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateAppInstance_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateAppInstance_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateAppInstance_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateAppInstance_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList<OAITag> OAICreateAppInstance_request::getTags() const {
    return m_tags;
}
void OAICreateAppInstance_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAppInstance_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAppInstance_request::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateAppInstance_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppInstance_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
