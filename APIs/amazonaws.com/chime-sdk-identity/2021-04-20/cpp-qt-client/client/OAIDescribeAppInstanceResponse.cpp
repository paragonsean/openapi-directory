/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppInstanceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppInstanceResponse::OAIDescribeAppInstanceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppInstanceResponse::OAIDescribeAppInstanceResponse() {
    this->initializeModel();
}

OAIDescribeAppInstanceResponse::~OAIDescribeAppInstanceResponse() {}

void OAIDescribeAppInstanceResponse::initializeModel() {

    m_app_instance_isSet = false;
    m_app_instance_isValid = false;
}

void OAIDescribeAppInstanceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppInstanceResponse::fromJsonObject(QJsonObject json) {

    m_app_instance_isValid = ::OpenAPI::fromJsonValue(m_app_instance, json[QString("AppInstance")]);
    m_app_instance_isSet = !json[QString("AppInstance")].isNull() && m_app_instance_isValid;
}

QString OAIDescribeAppInstanceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppInstanceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance.isSet()) {
        obj.insert(QString("AppInstance"), ::OpenAPI::toJsonValue(m_app_instance));
    }
    return obj;
}

OAIDescribeAppInstanceResponse_AppInstance OAIDescribeAppInstanceResponse::getAppInstance() const {
    return m_app_instance;
}
void OAIDescribeAppInstanceResponse::setAppInstance(const OAIDescribeAppInstanceResponse_AppInstance &app_instance) {
    m_app_instance = app_instance;
    m_app_instance_isSet = true;
}

bool OAIDescribeAppInstanceResponse::is_app_instance_Set() const{
    return m_app_instance_isSet;
}

bool OAIDescribeAppInstanceResponse::is_app_instance_Valid() const{
    return m_app_instance_isValid;
}

bool OAIDescribeAppInstanceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppInstanceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
