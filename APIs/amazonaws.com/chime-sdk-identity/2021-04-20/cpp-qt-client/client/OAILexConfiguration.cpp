/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILexConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILexConfiguration::OAILexConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILexConfiguration::OAILexConfiguration() {
    this->initializeModel();
}

OAILexConfiguration::~OAILexConfiguration() {}

void OAILexConfiguration::initializeModel() {

    m_responds_to_isSet = false;
    m_responds_to_isValid = false;

    m_invoked_by_isSet = false;
    m_invoked_by_isValid = false;

    m_lex_bot_alias_arn_isSet = false;
    m_lex_bot_alias_arn_isValid = false;

    m_locale_id_isSet = false;
    m_locale_id_isValid = false;

    m_welcome_intent_isSet = false;
    m_welcome_intent_isValid = false;
}

void OAILexConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILexConfiguration::fromJsonObject(QJsonObject json) {

    m_responds_to_isValid = ::OpenAPI::fromJsonValue(m_responds_to, json[QString("RespondsTo")]);
    m_responds_to_isSet = !json[QString("RespondsTo")].isNull() && m_responds_to_isValid;

    m_invoked_by_isValid = ::OpenAPI::fromJsonValue(m_invoked_by, json[QString("InvokedBy")]);
    m_invoked_by_isSet = !json[QString("InvokedBy")].isNull() && m_invoked_by_isValid;

    m_lex_bot_alias_arn_isValid = ::OpenAPI::fromJsonValue(m_lex_bot_alias_arn, json[QString("LexBotAliasArn")]);
    m_lex_bot_alias_arn_isSet = !json[QString("LexBotAliasArn")].isNull() && m_lex_bot_alias_arn_isValid;

    m_locale_id_isValid = ::OpenAPI::fromJsonValue(m_locale_id, json[QString("LocaleId")]);
    m_locale_id_isSet = !json[QString("LocaleId")].isNull() && m_locale_id_isValid;

    m_welcome_intent_isValid = ::OpenAPI::fromJsonValue(m_welcome_intent, json[QString("WelcomeIntent")]);
    m_welcome_intent_isSet = !json[QString("WelcomeIntent")].isNull() && m_welcome_intent_isValid;
}

QString OAILexConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILexConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_responds_to.isSet()) {
        obj.insert(QString("RespondsTo"), ::OpenAPI::toJsonValue(m_responds_to));
    }
    if (m_invoked_by.isSet()) {
        obj.insert(QString("InvokedBy"), ::OpenAPI::toJsonValue(m_invoked_by));
    }
    if (m_lex_bot_alias_arn_isSet) {
        obj.insert(QString("LexBotAliasArn"), ::OpenAPI::toJsonValue(m_lex_bot_alias_arn));
    }
    if (m_locale_id_isSet) {
        obj.insert(QString("LocaleId"), ::OpenAPI::toJsonValue(m_locale_id));
    }
    if (m_welcome_intent_isSet) {
        obj.insert(QString("WelcomeIntent"), ::OpenAPI::toJsonValue(m_welcome_intent));
    }
    return obj;
}

OAIRespondsTo OAILexConfiguration::getRespondsTo() const {
    return m_responds_to;
}
void OAILexConfiguration::setRespondsTo(const OAIRespondsTo &responds_to) {
    m_responds_to = responds_to;
    m_responds_to_isSet = true;
}

bool OAILexConfiguration::is_responds_to_Set() const{
    return m_responds_to_isSet;
}

bool OAILexConfiguration::is_responds_to_Valid() const{
    return m_responds_to_isValid;
}

OAILexConfiguration_InvokedBy OAILexConfiguration::getInvokedBy() const {
    return m_invoked_by;
}
void OAILexConfiguration::setInvokedBy(const OAILexConfiguration_InvokedBy &invoked_by) {
    m_invoked_by = invoked_by;
    m_invoked_by_isSet = true;
}

bool OAILexConfiguration::is_invoked_by_Set() const{
    return m_invoked_by_isSet;
}

bool OAILexConfiguration::is_invoked_by_Valid() const{
    return m_invoked_by_isValid;
}

QString OAILexConfiguration::getLexBotAliasArn() const {
    return m_lex_bot_alias_arn;
}
void OAILexConfiguration::setLexBotAliasArn(const QString &lex_bot_alias_arn) {
    m_lex_bot_alias_arn = lex_bot_alias_arn;
    m_lex_bot_alias_arn_isSet = true;
}

bool OAILexConfiguration::is_lex_bot_alias_arn_Set() const{
    return m_lex_bot_alias_arn_isSet;
}

bool OAILexConfiguration::is_lex_bot_alias_arn_Valid() const{
    return m_lex_bot_alias_arn_isValid;
}

QString OAILexConfiguration::getLocaleId() const {
    return m_locale_id;
}
void OAILexConfiguration::setLocaleId(const QString &locale_id) {
    m_locale_id = locale_id;
    m_locale_id_isSet = true;
}

bool OAILexConfiguration::is_locale_id_Set() const{
    return m_locale_id_isSet;
}

bool OAILexConfiguration::is_locale_id_Valid() const{
    return m_locale_id_isValid;
}

QString OAILexConfiguration::getWelcomeIntent() const {
    return m_welcome_intent;
}
void OAILexConfiguration::setWelcomeIntent(const QString &welcome_intent) {
    m_welcome_intent = welcome_intent;
    m_welcome_intent_isSet = true;
}

bool OAILexConfiguration::is_welcome_intent_Set() const{
    return m_welcome_intent_isSet;
}

bool OAILexConfiguration::is_welcome_intent_Valid() const{
    return m_welcome_intent_isValid;
}

bool OAILexConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_responds_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoked_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_lex_bot_alias_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_welcome_intent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILexConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_lex_bot_alias_arn_isValid && m_locale_id_isValid && true;
}

} // namespace OpenAPI
