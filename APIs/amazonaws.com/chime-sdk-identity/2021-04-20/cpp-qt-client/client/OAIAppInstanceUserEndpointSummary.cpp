/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInstanceUserEndpointSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInstanceUserEndpointSummary::OAIAppInstanceUserEndpointSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInstanceUserEndpointSummary::OAIAppInstanceUserEndpointSummary() {
    this->initializeModel();
}

OAIAppInstanceUserEndpointSummary::~OAIAppInstanceUserEndpointSummary() {}

void OAIAppInstanceUserEndpointSummary::initializeModel() {

    m_app_instance_user_arn_isSet = false;
    m_app_instance_user_arn_isValid = false;

    m_endpoint_id_isSet = false;
    m_endpoint_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_allow_messages_isSet = false;
    m_allow_messages_isValid = false;

    m_endpoint_state_isSet = false;
    m_endpoint_state_isValid = false;
}

void OAIAppInstanceUserEndpointSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInstanceUserEndpointSummary::fromJsonObject(QJsonObject json) {

    m_app_instance_user_arn_isValid = ::OpenAPI::fromJsonValue(m_app_instance_user_arn, json[QString("AppInstanceUserArn")]);
    m_app_instance_user_arn_isSet = !json[QString("AppInstanceUserArn")].isNull() && m_app_instance_user_arn_isValid;

    m_endpoint_id_isValid = ::OpenAPI::fromJsonValue(m_endpoint_id, json[QString("EndpointId")]);
    m_endpoint_id_isSet = !json[QString("EndpointId")].isNull() && m_endpoint_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_allow_messages_isValid = ::OpenAPI::fromJsonValue(m_allow_messages, json[QString("AllowMessages")]);
    m_allow_messages_isSet = !json[QString("AllowMessages")].isNull() && m_allow_messages_isValid;

    m_endpoint_state_isValid = ::OpenAPI::fromJsonValue(m_endpoint_state, json[QString("EndpointState")]);
    m_endpoint_state_isSet = !json[QString("EndpointState")].isNull() && m_endpoint_state_isValid;
}

QString OAIAppInstanceUserEndpointSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInstanceUserEndpointSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_user_arn_isSet) {
        obj.insert(QString("AppInstanceUserArn"), ::OpenAPI::toJsonValue(m_app_instance_user_arn));
    }
    if (m_endpoint_id_isSet) {
        obj.insert(QString("EndpointId"), ::OpenAPI::toJsonValue(m_endpoint_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_allow_messages.isSet()) {
        obj.insert(QString("AllowMessages"), ::OpenAPI::toJsonValue(m_allow_messages));
    }
    if (m_endpoint_state.isSet()) {
        obj.insert(QString("EndpointState"), ::OpenAPI::toJsonValue(m_endpoint_state));
    }
    return obj;
}

QString OAIAppInstanceUserEndpointSummary::getAppInstanceUserArn() const {
    return m_app_instance_user_arn;
}
void OAIAppInstanceUserEndpointSummary::setAppInstanceUserArn(const QString &app_instance_user_arn) {
    m_app_instance_user_arn = app_instance_user_arn;
    m_app_instance_user_arn_isSet = true;
}

bool OAIAppInstanceUserEndpointSummary::is_app_instance_user_arn_Set() const{
    return m_app_instance_user_arn_isSet;
}

bool OAIAppInstanceUserEndpointSummary::is_app_instance_user_arn_Valid() const{
    return m_app_instance_user_arn_isValid;
}

QString OAIAppInstanceUserEndpointSummary::getEndpointId() const {
    return m_endpoint_id;
}
void OAIAppInstanceUserEndpointSummary::setEndpointId(const QString &endpoint_id) {
    m_endpoint_id = endpoint_id;
    m_endpoint_id_isSet = true;
}

bool OAIAppInstanceUserEndpointSummary::is_endpoint_id_Set() const{
    return m_endpoint_id_isSet;
}

bool OAIAppInstanceUserEndpointSummary::is_endpoint_id_Valid() const{
    return m_endpoint_id_isValid;
}

QString OAIAppInstanceUserEndpointSummary::getName() const {
    return m_name;
}
void OAIAppInstanceUserEndpointSummary::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAppInstanceUserEndpointSummary::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAppInstanceUserEndpointSummary::is_name_Valid() const{
    return m_name_isValid;
}

OAIAppInstanceUserEndpointType OAIAppInstanceUserEndpointSummary::getType() const {
    return m_type;
}
void OAIAppInstanceUserEndpointSummary::setType(const OAIAppInstanceUserEndpointType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAppInstanceUserEndpointSummary::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAppInstanceUserEndpointSummary::is_type_Valid() const{
    return m_type_isValid;
}

OAIAllowMessages OAIAppInstanceUserEndpointSummary::getAllowMessages() const {
    return m_allow_messages;
}
void OAIAppInstanceUserEndpointSummary::setAllowMessages(const OAIAllowMessages &allow_messages) {
    m_allow_messages = allow_messages;
    m_allow_messages_isSet = true;
}

bool OAIAppInstanceUserEndpointSummary::is_allow_messages_Set() const{
    return m_allow_messages_isSet;
}

bool OAIAppInstanceUserEndpointSummary::is_allow_messages_Valid() const{
    return m_allow_messages_isValid;
}

OAIAppInstanceUserEndpointSummary_EndpointState OAIAppInstanceUserEndpointSummary::getEndpointState() const {
    return m_endpoint_state;
}
void OAIAppInstanceUserEndpointSummary::setEndpointState(const OAIAppInstanceUserEndpointSummary_EndpointState &endpoint_state) {
    m_endpoint_state = endpoint_state;
    m_endpoint_state_isSet = true;
}

bool OAIAppInstanceUserEndpointSummary::is_endpoint_state_Set() const{
    return m_endpoint_state_isSet;
}

bool OAIAppInstanceUserEndpointSummary::is_endpoint_state_Valid() const{
    return m_endpoint_state_isValid;
}

bool OAIAppInstanceUserEndpointSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_user_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInstanceUserEndpointSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
