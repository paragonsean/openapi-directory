/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListAppInstanceUserEndpointsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListAppInstanceUserEndpointsResponse::OAIListAppInstanceUserEndpointsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListAppInstanceUserEndpointsResponse::OAIListAppInstanceUserEndpointsResponse() {
    this->initializeModel();
}

OAIListAppInstanceUserEndpointsResponse::~OAIListAppInstanceUserEndpointsResponse() {}

void OAIListAppInstanceUserEndpointsResponse::initializeModel() {

    m_app_instance_user_endpoints_isSet = false;
    m_app_instance_user_endpoints_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIListAppInstanceUserEndpointsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListAppInstanceUserEndpointsResponse::fromJsonObject(QJsonObject json) {

    m_app_instance_user_endpoints_isValid = ::OpenAPI::fromJsonValue(m_app_instance_user_endpoints, json[QString("AppInstanceUserEndpoints")]);
    m_app_instance_user_endpoints_isSet = !json[QString("AppInstanceUserEndpoints")].isNull() && m_app_instance_user_endpoints_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIListAppInstanceUserEndpointsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListAppInstanceUserEndpointsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_user_endpoints.isSet()) {
        obj.insert(QString("AppInstanceUserEndpoints"), ::OpenAPI::toJsonValue(m_app_instance_user_endpoints));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIListAppInstanceUserEndpointsResponse::getAppInstanceUserEndpoints() const {
    return m_app_instance_user_endpoints;
}
void OAIListAppInstanceUserEndpointsResponse::setAppInstanceUserEndpoints(const QList &app_instance_user_endpoints) {
    m_app_instance_user_endpoints = app_instance_user_endpoints;
    m_app_instance_user_endpoints_isSet = true;
}

bool OAIListAppInstanceUserEndpointsResponse::is_app_instance_user_endpoints_Set() const{
    return m_app_instance_user_endpoints_isSet;
}

bool OAIListAppInstanceUserEndpointsResponse::is_app_instance_user_endpoints_Valid() const{
    return m_app_instance_user_endpoints_isValid;
}

QString OAIListAppInstanceUserEndpointsResponse::getNextToken() const {
    return m_next_token;
}
void OAIListAppInstanceUserEndpointsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIListAppInstanceUserEndpointsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIListAppInstanceUserEndpointsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIListAppInstanceUserEndpointsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_user_endpoints.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListAppInstanceUserEndpointsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
