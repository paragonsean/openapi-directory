/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppInstanceUserResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppInstanceUserResponse::OAIDescribeAppInstanceUserResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppInstanceUserResponse::OAIDescribeAppInstanceUserResponse() {
    this->initializeModel();
}

OAIDescribeAppInstanceUserResponse::~OAIDescribeAppInstanceUserResponse() {}

void OAIDescribeAppInstanceUserResponse::initializeModel() {

    m_app_instance_user_isSet = false;
    m_app_instance_user_isValid = false;
}

void OAIDescribeAppInstanceUserResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppInstanceUserResponse::fromJsonObject(QJsonObject json) {

    m_app_instance_user_isValid = ::OpenAPI::fromJsonValue(m_app_instance_user, json[QString("AppInstanceUser")]);
    m_app_instance_user_isSet = !json[QString("AppInstanceUser")].isNull() && m_app_instance_user_isValid;
}

QString OAIDescribeAppInstanceUserResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppInstanceUserResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_user.isSet()) {
        obj.insert(QString("AppInstanceUser"), ::OpenAPI::toJsonValue(m_app_instance_user));
    }
    return obj;
}

OAIDescribeAppInstanceUserResponse_AppInstanceUser OAIDescribeAppInstanceUserResponse::getAppInstanceUser() const {
    return m_app_instance_user;
}
void OAIDescribeAppInstanceUserResponse::setAppInstanceUser(const OAIDescribeAppInstanceUserResponse_AppInstanceUser &app_instance_user) {
    m_app_instance_user = app_instance_user;
    m_app_instance_user_isSet = true;
}

bool OAIDescribeAppInstanceUserResponse::is_app_instance_user_Set() const{
    return m_app_instance_user_isSet;
}

bool OAIDescribeAppInstanceUserResponse::is_app_instance_user_Valid() const{
    return m_app_instance_user_isValid;
}

bool OAIDescribeAppInstanceUserResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppInstanceUserResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
