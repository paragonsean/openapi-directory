/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppInstanceBot_request_Configuration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppInstanceBot_request_Configuration::OAICreateAppInstanceBot_request_Configuration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppInstanceBot_request_Configuration::OAICreateAppInstanceBot_request_Configuration() {
    this->initializeModel();
}

OAICreateAppInstanceBot_request_Configuration::~OAICreateAppInstanceBot_request_Configuration() {}

void OAICreateAppInstanceBot_request_Configuration::initializeModel() {

    m_lex_isSet = false;
    m_lex_isValid = false;
}

void OAICreateAppInstanceBot_request_Configuration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppInstanceBot_request_Configuration::fromJsonObject(QJsonObject json) {

    m_lex_isValid = ::OpenAPI::fromJsonValue(m_lex, json[QString("Lex")]);
    m_lex_isSet = !json[QString("Lex")].isNull() && m_lex_isValid;
}

QString OAICreateAppInstanceBot_request_Configuration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppInstanceBot_request_Configuration::asJsonObject() const {
    QJsonObject obj;
    if (m_lex.isSet()) {
        obj.insert(QString("Lex"), ::OpenAPI::toJsonValue(m_lex));
    }
    return obj;
}

OAICreateAppInstanceBot_request_Configuration_Lex OAICreateAppInstanceBot_request_Configuration::getLex() const {
    return m_lex;
}
void OAICreateAppInstanceBot_request_Configuration::setLex(const OAICreateAppInstanceBot_request_Configuration_Lex &lex) {
    m_lex = lex;
    m_lex_isSet = true;
}

bool OAICreateAppInstanceBot_request_Configuration::is_lex_Set() const{
    return m_lex_isSet;
}

bool OAICreateAppInstanceBot_request_Configuration::is_lex_Valid() const{
    return m_lex_isValid;
}

bool OAICreateAppInstanceBot_request_Configuration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lex.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppInstanceBot_request_Configuration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
