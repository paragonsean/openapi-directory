/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvokedBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvokedBy::OAIInvokedBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvokedBy::OAIInvokedBy() {
    this->initializeModel();
}

OAIInvokedBy::~OAIInvokedBy() {}

void OAIInvokedBy::initializeModel() {

    m_standard_messages_isSet = false;
    m_standard_messages_isValid = false;

    m_targeted_messages_isSet = false;
    m_targeted_messages_isValid = false;
}

void OAIInvokedBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvokedBy::fromJsonObject(QJsonObject json) {

    m_standard_messages_isValid = ::OpenAPI::fromJsonValue(m_standard_messages, json[QString("StandardMessages")]);
    m_standard_messages_isSet = !json[QString("StandardMessages")].isNull() && m_standard_messages_isValid;

    m_targeted_messages_isValid = ::OpenAPI::fromJsonValue(m_targeted_messages, json[QString("TargetedMessages")]);
    m_targeted_messages_isSet = !json[QString("TargetedMessages")].isNull() && m_targeted_messages_isValid;
}

QString OAIInvokedBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvokedBy::asJsonObject() const {
    QJsonObject obj;
    if (m_standard_messages.isSet()) {
        obj.insert(QString("StandardMessages"), ::OpenAPI::toJsonValue(m_standard_messages));
    }
    if (m_targeted_messages.isSet()) {
        obj.insert(QString("TargetedMessages"), ::OpenAPI::toJsonValue(m_targeted_messages));
    }
    return obj;
}

OAIStandardMessages OAIInvokedBy::getStandardMessages() const {
    return m_standard_messages;
}
void OAIInvokedBy::setStandardMessages(const OAIStandardMessages &standard_messages) {
    m_standard_messages = standard_messages;
    m_standard_messages_isSet = true;
}

bool OAIInvokedBy::is_standard_messages_Set() const{
    return m_standard_messages_isSet;
}

bool OAIInvokedBy::is_standard_messages_Valid() const{
    return m_standard_messages_isValid;
}

OAITargetedMessages OAIInvokedBy::getTargetedMessages() const {
    return m_targeted_messages;
}
void OAIInvokedBy::setTargetedMessages(const OAITargetedMessages &targeted_messages) {
    m_targeted_messages = targeted_messages;
    m_targeted_messages_isSet = true;
}

bool OAIInvokedBy::is_targeted_messages_Set() const{
    return m_targeted_messages_isSet;
}

bool OAIInvokedBy::is_targeted_messages_Valid() const{
    return m_targeted_messages_isValid;
}

bool OAIInvokedBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_standard_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeted_messages.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvokedBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_standard_messages_isValid && m_targeted_messages_isValid && true;
}

} // namespace OpenAPI
