/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppInstanceRetentionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppInstanceRetentionSettings::OAIAppInstanceRetentionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppInstanceRetentionSettings::OAIAppInstanceRetentionSettings() {
    this->initializeModel();
}

OAIAppInstanceRetentionSettings::~OAIAppInstanceRetentionSettings() {}

void OAIAppInstanceRetentionSettings::initializeModel() {

    m_channel_retention_settings_isSet = false;
    m_channel_retention_settings_isValid = false;
}

void OAIAppInstanceRetentionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppInstanceRetentionSettings::fromJsonObject(QJsonObject json) {

    m_channel_retention_settings_isValid = ::OpenAPI::fromJsonValue(m_channel_retention_settings, json[QString("ChannelRetentionSettings")]);
    m_channel_retention_settings_isSet = !json[QString("ChannelRetentionSettings")].isNull() && m_channel_retention_settings_isValid;
}

QString OAIAppInstanceRetentionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppInstanceRetentionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_retention_settings.isSet()) {
        obj.insert(QString("ChannelRetentionSettings"), ::OpenAPI::toJsonValue(m_channel_retention_settings));
    }
    return obj;
}

OAIPutAppInstanceRetentionSettings_request_AppInstanceRetentionSettings_ChannelRetentionSettings OAIAppInstanceRetentionSettings::getChannelRetentionSettings() const {
    return m_channel_retention_settings;
}
void OAIAppInstanceRetentionSettings::setChannelRetentionSettings(const OAIPutAppInstanceRetentionSettings_request_AppInstanceRetentionSettings_ChannelRetentionSettings &channel_retention_settings) {
    m_channel_retention_settings = channel_retention_settings;
    m_channel_retention_settings_isSet = true;
}

bool OAIAppInstanceRetentionSettings::is_channel_retention_settings_Set() const{
    return m_channel_retention_settings_isSet;
}

bool OAIAppInstanceRetentionSettings::is_channel_retention_settings_Valid() const{
    return m_channel_retention_settings_isValid;
}

bool OAIAppInstanceRetentionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_retention_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppInstanceRetentionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
