/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStandardMessages.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStandardMessages::OAIStandardMessages(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStandardMessages::OAIStandardMessages() {
    this->initializeModel();
}

OAIStandardMessages::~OAIStandardMessages() {}

void OAIStandardMessages::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIStandardMessages::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIStandardMessages::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AUTO", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStandardMessages::AUTO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ALL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStandardMessages::ALL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MENTIONS", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStandardMessages::MENTIONS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NONE", Qt::CaseInsensitive) == 0) {
        m_value = eOAIStandardMessages::NONE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIStandardMessages::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIStandardMessages::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIStandardMessages::AUTO:
            val = "AUTO";
            break;
        case eOAIStandardMessages::ALL:
            val = "ALL";
            break;
        case eOAIStandardMessages::MENTIONS:
            val = "MENTIONS";
            break;
        case eOAIStandardMessages::NONE:
            val = "NONE";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIStandardMessages::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIStandardMessages::eOAIStandardMessages OAIStandardMessages::getValue() const {
    return m_value;
}

void OAIStandardMessages::setValue(const OAIStandardMessages::eOAIStandardMessages& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIStandardMessages::isSet() const {
    
    return m_value_isSet;
}

bool OAIStandardMessages::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
