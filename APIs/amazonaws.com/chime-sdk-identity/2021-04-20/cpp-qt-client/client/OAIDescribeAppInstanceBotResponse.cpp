/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppInstanceBotResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppInstanceBotResponse::OAIDescribeAppInstanceBotResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppInstanceBotResponse::OAIDescribeAppInstanceBotResponse() {
    this->initializeModel();
}

OAIDescribeAppInstanceBotResponse::~OAIDescribeAppInstanceBotResponse() {}

void OAIDescribeAppInstanceBotResponse::initializeModel() {

    m_app_instance_bot_isSet = false;
    m_app_instance_bot_isValid = false;
}

void OAIDescribeAppInstanceBotResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppInstanceBotResponse::fromJsonObject(QJsonObject json) {

    m_app_instance_bot_isValid = ::OpenAPI::fromJsonValue(m_app_instance_bot, json[QString("AppInstanceBot")]);
    m_app_instance_bot_isSet = !json[QString("AppInstanceBot")].isNull() && m_app_instance_bot_isValid;
}

QString OAIDescribeAppInstanceBotResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppInstanceBotResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_bot.isSet()) {
        obj.insert(QString("AppInstanceBot"), ::OpenAPI::toJsonValue(m_app_instance_bot));
    }
    return obj;
}

OAIDescribeAppInstanceBotResponse_AppInstanceBot OAIDescribeAppInstanceBotResponse::getAppInstanceBot() const {
    return m_app_instance_bot;
}
void OAIDescribeAppInstanceBotResponse::setAppInstanceBot(const OAIDescribeAppInstanceBotResponse_AppInstanceBot &app_instance_bot) {
    m_app_instance_bot = app_instance_bot;
    m_app_instance_bot_isSet = true;
}

bool OAIDescribeAppInstanceBotResponse::is_app_instance_bot_Set() const{
    return m_app_instance_bot_isSet;
}

bool OAIDescribeAppInstanceBotResponse::is_app_instance_bot_Valid() const{
    return m_app_instance_bot_isValid;
}

bool OAIDescribeAppInstanceBotResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_bot.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppInstanceBotResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
