/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAppInstanceAdminResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAppInstanceAdminResponse::OAIDescribeAppInstanceAdminResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAppInstanceAdminResponse::OAIDescribeAppInstanceAdminResponse() {
    this->initializeModel();
}

OAIDescribeAppInstanceAdminResponse::~OAIDescribeAppInstanceAdminResponse() {}

void OAIDescribeAppInstanceAdminResponse::initializeModel() {

    m_app_instance_admin_isSet = false;
    m_app_instance_admin_isValid = false;
}

void OAIDescribeAppInstanceAdminResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAppInstanceAdminResponse::fromJsonObject(QJsonObject json) {

    m_app_instance_admin_isValid = ::OpenAPI::fromJsonValue(m_app_instance_admin, json[QString("AppInstanceAdmin")]);
    m_app_instance_admin_isSet = !json[QString("AppInstanceAdmin")].isNull() && m_app_instance_admin_isValid;
}

QString OAIDescribeAppInstanceAdminResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAppInstanceAdminResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_admin.isSet()) {
        obj.insert(QString("AppInstanceAdmin"), ::OpenAPI::toJsonValue(m_app_instance_admin));
    }
    return obj;
}

OAIDescribeAppInstanceAdminResponse_AppInstanceAdmin OAIDescribeAppInstanceAdminResponse::getAppInstanceAdmin() const {
    return m_app_instance_admin;
}
void OAIDescribeAppInstanceAdminResponse::setAppInstanceAdmin(const OAIDescribeAppInstanceAdminResponse_AppInstanceAdmin &app_instance_admin) {
    m_app_instance_admin = app_instance_admin;
    m_app_instance_admin_isSet = true;
}

bool OAIDescribeAppInstanceAdminResponse::is_app_instance_admin_Set() const{
    return m_app_instance_admin_isSet;
}

bool OAIDescribeAppInstanceAdminResponse::is_app_instance_admin_Valid() const{
    return m_app_instance_admin_isValid;
}

bool OAIDescribeAppInstanceAdminResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_admin.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAppInstanceAdminResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
