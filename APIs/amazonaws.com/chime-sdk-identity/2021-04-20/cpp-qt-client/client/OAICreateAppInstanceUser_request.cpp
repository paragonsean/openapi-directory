/**
 * Amazon Chime SDK Identity
 * The Amazon Chime SDK Identity APIs in this section allow software developers to create and manage unique instances of their messaging applications. These APIs provide the overarching framework for creating and sending messages. For more information about the identity APIs, refer to <a href=\"https://docs.aws.amazon.com/chime/latest/APIReference/API_Operations_Amazon_Chime_SDK_Identity.html\">Amazon Chime SDK identity</a>.
 *
 * The version of the OpenAPI document: 2021-04-20
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAppInstanceUser_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAppInstanceUser_request::OAICreateAppInstanceUser_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAppInstanceUser_request::OAICreateAppInstanceUser_request() {
    this->initializeModel();
}

OAICreateAppInstanceUser_request::~OAICreateAppInstanceUser_request() {}

void OAICreateAppInstanceUser_request::initializeModel() {

    m_app_instance_arn_isSet = false;
    m_app_instance_arn_isValid = false;

    m_app_instance_user_id_isSet = false;
    m_app_instance_user_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_client_request_token_isSet = false;
    m_client_request_token_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_expiration_settings_isSet = false;
    m_expiration_settings_isValid = false;
}

void OAICreateAppInstanceUser_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAppInstanceUser_request::fromJsonObject(QJsonObject json) {

    m_app_instance_arn_isValid = ::OpenAPI::fromJsonValue(m_app_instance_arn, json[QString("AppInstanceArn")]);
    m_app_instance_arn_isSet = !json[QString("AppInstanceArn")].isNull() && m_app_instance_arn_isValid;

    m_app_instance_user_id_isValid = ::OpenAPI::fromJsonValue(m_app_instance_user_id, json[QString("AppInstanceUserId")]);
    m_app_instance_user_id_isSet = !json[QString("AppInstanceUserId")].isNull() && m_app_instance_user_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_client_request_token_isValid = ::OpenAPI::fromJsonValue(m_client_request_token, json[QString("ClientRequestToken")]);
    m_client_request_token_isSet = !json[QString("ClientRequestToken")].isNull() && m_client_request_token_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_expiration_settings_isValid = ::OpenAPI::fromJsonValue(m_expiration_settings, json[QString("ExpirationSettings")]);
    m_expiration_settings_isSet = !json[QString("ExpirationSettings")].isNull() && m_expiration_settings_isValid;
}

QString OAICreateAppInstanceUser_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAppInstanceUser_request::asJsonObject() const {
    QJsonObject obj;
    if (m_app_instance_arn_isSet) {
        obj.insert(QString("AppInstanceArn"), ::OpenAPI::toJsonValue(m_app_instance_arn));
    }
    if (m_app_instance_user_id_isSet) {
        obj.insert(QString("AppInstanceUserId"), ::OpenAPI::toJsonValue(m_app_instance_user_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_client_request_token_isSet) {
        obj.insert(QString("ClientRequestToken"), ::OpenAPI::toJsonValue(m_client_request_token));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_expiration_settings.isSet()) {
        obj.insert(QString("ExpirationSettings"), ::OpenAPI::toJsonValue(m_expiration_settings));
    }
    return obj;
}

QString OAICreateAppInstanceUser_request::getAppInstanceArn() const {
    return m_app_instance_arn;
}
void OAICreateAppInstanceUser_request::setAppInstanceArn(const QString &app_instance_arn) {
    m_app_instance_arn = app_instance_arn;
    m_app_instance_arn_isSet = true;
}

bool OAICreateAppInstanceUser_request::is_app_instance_arn_Set() const{
    return m_app_instance_arn_isSet;
}

bool OAICreateAppInstanceUser_request::is_app_instance_arn_Valid() const{
    return m_app_instance_arn_isValid;
}

QString OAICreateAppInstanceUser_request::getAppInstanceUserId() const {
    return m_app_instance_user_id;
}
void OAICreateAppInstanceUser_request::setAppInstanceUserId(const QString &app_instance_user_id) {
    m_app_instance_user_id = app_instance_user_id;
    m_app_instance_user_id_isSet = true;
}

bool OAICreateAppInstanceUser_request::is_app_instance_user_id_Set() const{
    return m_app_instance_user_id_isSet;
}

bool OAICreateAppInstanceUser_request::is_app_instance_user_id_Valid() const{
    return m_app_instance_user_id_isValid;
}

QString OAICreateAppInstanceUser_request::getName() const {
    return m_name;
}
void OAICreateAppInstanceUser_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAppInstanceUser_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAppInstanceUser_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateAppInstanceUser_request::getMetadata() const {
    return m_metadata;
}
void OAICreateAppInstanceUser_request::setMetadata(const QString &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateAppInstanceUser_request::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateAppInstanceUser_request::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateAppInstanceUser_request::getClientRequestToken() const {
    return m_client_request_token;
}
void OAICreateAppInstanceUser_request::setClientRequestToken(const QString &client_request_token) {
    m_client_request_token = client_request_token;
    m_client_request_token_isSet = true;
}

bool OAICreateAppInstanceUser_request::is_client_request_token_Set() const{
    return m_client_request_token_isSet;
}

bool OAICreateAppInstanceUser_request::is_client_request_token_Valid() const{
    return m_client_request_token_isValid;
}

QList<OAITag> OAICreateAppInstanceUser_request::getTags() const {
    return m_tags;
}
void OAICreateAppInstanceUser_request::setTags(const QList<OAITag> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateAppInstanceUser_request::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateAppInstanceUser_request::is_tags_Valid() const{
    return m_tags_isValid;
}

OAICreateAppInstanceUser_request_ExpirationSettings OAICreateAppInstanceUser_request::getExpirationSettings() const {
    return m_expiration_settings;
}
void OAICreateAppInstanceUser_request::setExpirationSettings(const OAICreateAppInstanceUser_request_ExpirationSettings &expiration_settings) {
    m_expiration_settings = expiration_settings;
    m_expiration_settings_isSet = true;
}

bool OAICreateAppInstanceUser_request::is_expiration_settings_Set() const{
    return m_expiration_settings_isSet;
}

bool OAICreateAppInstanceUser_request::is_expiration_settings_Valid() const{
    return m_expiration_settings_isValid;
}

bool OAICreateAppInstanceUser_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_instance_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_instance_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAppInstanceUser_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_app_instance_arn_isValid && m_app_instance_user_id_isValid && m_name_isValid && m_client_request_token_isValid && true;
}

} // namespace OpenAPI
