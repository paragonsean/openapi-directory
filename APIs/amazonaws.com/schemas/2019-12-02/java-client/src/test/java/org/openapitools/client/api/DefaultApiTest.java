/*
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateDiscovererRequest;
import org.openapitools.client.model.CreateDiscovererResponse;
import org.openapitools.client.model.CreateRegistryRequest;
import org.openapitools.client.model.CreateRegistryResponse;
import org.openapitools.client.model.CreateSchemaRequest;
import org.openapitools.client.model.CreateSchemaResponse;
import org.openapitools.client.model.DescribeCodeBindingResponse;
import org.openapitools.client.model.DescribeDiscovererResponse;
import org.openapitools.client.model.DescribeRegistryResponse;
import org.openapitools.client.model.DescribeSchemaResponse;
import org.openapitools.client.model.ExportSchemaResponse;
import org.openapitools.client.model.GetCodeBindingSourceResponse;
import org.openapitools.client.model.GetDiscoveredSchemaRequest;
import org.openapitools.client.model.GetDiscoveredSchemaResponse;
import org.openapitools.client.model.GetResourcePolicyResponse;
import org.openapitools.client.model.ListDiscoverersResponse;
import org.openapitools.client.model.ListRegistriesResponse;
import org.openapitools.client.model.ListSchemaVersionsResponse;
import org.openapitools.client.model.ListSchemasResponse;
import org.openapitools.client.model.ListTagsForResourceResponse;
import org.openapitools.client.model.PutCodeBindingResponse;
import org.openapitools.client.model.PutResourcePolicyRequest;
import org.openapitools.client.model.PutResourcePolicyResponse;
import org.openapitools.client.model.SearchSchemasResponse;
import org.openapitools.client.model.StartDiscovererResponse;
import org.openapitools.client.model.StopDiscovererResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateDiscovererRequest;
import org.openapitools.client.model.UpdateDiscovererResponse;
import org.openapitools.client.model.UpdateRegistryRequest;
import org.openapitools.client.model.UpdateRegistryResponse;
import org.openapitools.client.model.UpdateSchemaRequest;
import org.openapitools.client.model.UpdateSchemaResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates a discoverer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDiscovererTest() throws ApiException {
        CreateDiscovererRequest createDiscovererRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDiscovererResponse response = api.createDiscoverer(createDiscovererRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRegistryTest() throws ApiException {
        String registryName = null;
        CreateRegistryRequest createRegistryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRegistryResponse response = api.createRegistry(registryName, createRegistryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Creates a schema definition.&lt;/p&gt; &lt;note&gt;&lt;p&gt;Inactive schemas will be deleted after two years.&lt;/p&gt;&lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSchemaTest() throws ApiException {
        String registryName = null;
        String schemaName = null;
        CreateSchemaRequest createSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateSchemaResponse response = api.createSchema(registryName, schemaName, createSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a discoverer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDiscovererTest() throws ApiException {
        String discovererId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDiscoverer(discovererId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRegistryTest() throws ApiException {
        String registryName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRegistry(registryName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete the resource-based policy attached to the specified registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteResourcePolicyTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String registryName = null;
        api.deleteResourcePolicy(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registryName);
        // TODO: test validations
    }

    /**
     * Delete a schema definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemaTest() throws ApiException {
        String registryName = null;
        String schemaName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSchema(registryName, schemaName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Delete the schema version definition
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSchemaVersionTest() throws ApiException {
        String registryName = null;
        String schemaName = null;
        String schemaVersion = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteSchemaVersion(registryName, schemaName, schemaVersion, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describe the code binding URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeCodeBindingTest() throws ApiException {
        String language = null;
        String registryName = null;
        String schemaName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String schemaVersion = null;
        DescribeCodeBindingResponse response = api.describeCodeBinding(language, registryName, schemaName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, schemaVersion);
        // TODO: test validations
    }

    /**
     * Describes the discoverer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeDiscovererTest() throws ApiException {
        String discovererId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeDiscovererResponse response = api.describeDiscoverer(discovererId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Describes the registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeRegistryTest() throws ApiException {
        String registryName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        DescribeRegistryResponse response = api.describeRegistry(registryName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieve the schema definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void describeSchemaTest() throws ApiException {
        String registryName = null;
        String schemaName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String schemaVersion = null;
        DescribeSchemaResponse response = api.describeSchema(registryName, schemaName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, schemaVersion);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportSchemaTest() throws ApiException {
        String registryName = null;
        String schemaName = null;
        String type = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String schemaVersion = null;
        ExportSchemaResponse response = api.exportSchema(registryName, schemaName, type, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, schemaVersion);
        // TODO: test validations
    }

    /**
     * Get the code binding source URI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCodeBindingSourceTest() throws ApiException {
        String language = null;
        String registryName = null;
        String schemaName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String schemaVersion = null;
        GetCodeBindingSourceResponse response = api.getCodeBindingSource(language, registryName, schemaName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, schemaVersion);
        // TODO: test validations
    }

    /**
     * Get the discovered schema that was generated based on sampled events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDiscoveredSchemaTest() throws ApiException {
        GetDiscoveredSchemaRequest getDiscoveredSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDiscoveredSchemaResponse response = api.getDiscoveredSchema(getDiscoveredSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Retrieves the resource-based policy attached to a given registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getResourcePolicyTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String registryName = null;
        GetResourcePolicyResponse response = api.getResourcePolicy(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registryName);
        // TODO: test validations
    }

    /**
     * List the discoverers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDiscoverersTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String discovererIdPrefix = null;
        Integer limit = null;
        String nextToken = null;
        String sourceArnPrefix = null;
        String limit2 = null;
        String nextToken2 = null;
        ListDiscoverersResponse response = api.listDiscoverers(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, discovererIdPrefix, limit, nextToken, sourceArnPrefix, limit2, nextToken2);
        // TODO: test validations
    }

    /**
     * List the registries.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRegistriesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        String registryNamePrefix = null;
        String scope = null;
        String limit2 = null;
        String nextToken2 = null;
        ListRegistriesResponse response = api.listRegistries(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, registryNamePrefix, scope, limit2, nextToken2);
        // TODO: test validations
    }

    /**
     * Provides a list of the schema versions and related information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchemaVersionsTest() throws ApiException {
        String registryName = null;
        String schemaName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        String limit2 = null;
        String nextToken2 = null;
        ListSchemaVersionsResponse response = api.listSchemaVersions(registryName, schemaName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, limit2, nextToken2);
        // TODO: test validations
    }

    /**
     * List the schemas.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSchemasTest() throws ApiException {
        String registryName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        String schemaNamePrefix = null;
        String limit2 = null;
        String nextToken2 = null;
        ListSchemasResponse response = api.listSchemas(registryName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, schemaNamePrefix, limit2, nextToken2);
        // TODO: test validations
    }

    /**
     * Get tags for resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTagsForResourceTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        ListTagsForResourceResponse response = api.listTagsForResource(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Put code binding URI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putCodeBindingTest() throws ApiException {
        String language = null;
        String registryName = null;
        String schemaName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String schemaVersion = null;
        PutCodeBindingResponse response = api.putCodeBinding(language, registryName, schemaName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, schemaVersion);
        // TODO: test validations
    }

    /**
     * The name of the policy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putResourcePolicyTest() throws ApiException {
        PutResourcePolicyRequest putResourcePolicyRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String registryName = null;
        PutResourcePolicyResponse response = api.putResourcePolicy(putResourcePolicyRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, registryName);
        // TODO: test validations
    }

    /**
     * Search the schemas
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSchemasTest() throws ApiException {
        String keywords = null;
        String registryName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Integer limit = null;
        String nextToken = null;
        String limit2 = null;
        String nextToken2 = null;
        SearchSchemasResponse response = api.searchSchemas(keywords, registryName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, limit, nextToken, limit2, nextToken2);
        // TODO: test validations
    }

    /**
     * Starts the discoverer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDiscovererTest() throws ApiException {
        String discovererId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StartDiscovererResponse response = api.startDiscoverer(discovererId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Stops the discoverer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopDiscovererTest() throws ApiException {
        String discovererId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        StopDiscovererResponse response = api.stopDiscoverer(discovererId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Add tags to a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Removes tags from a resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates the discoverer
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDiscovererTest() throws ApiException {
        String discovererId = null;
        UpdateDiscovererRequest updateDiscovererRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDiscovererResponse response = api.updateDiscoverer(discovererId, updateDiscovererRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a registry.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRegistryTest() throws ApiException {
        String registryName = null;
        UpdateRegistryRequest updateRegistryRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRegistryResponse response = api.updateRegistry(registryName, updateRegistryRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * &lt;p&gt;Updates the schema definition&lt;/p&gt; &lt;note&gt;&lt;p&gt;Inactive schemas will be deleted after two years.&lt;/p&gt;&lt;/note&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSchemaTest() throws ApiException {
        String registryName = null;
        String schemaName = null;
        UpdateSchemaRequest updateSchemaRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateSchemaResponse response = api.updateSchema(registryName, schemaName, updateSchemaRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
