/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateDiscovererRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateDiscovererRequest::OAIUpdateDiscovererRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateDiscovererRequest::OAIUpdateDiscovererRequest() {
    this->initializeModel();
}

OAIUpdateDiscovererRequest::~OAIUpdateDiscovererRequest() {}

void OAIUpdateDiscovererRequest::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_cross_account_isSet = false;
    m_cross_account_isValid = false;
}

void OAIUpdateDiscovererRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateDiscovererRequest::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_cross_account_isValid = ::OpenAPI::fromJsonValue(m_cross_account, json[QString("CrossAccount")]);
    m_cross_account_isSet = !json[QString("CrossAccount")].isNull() && m_cross_account_isValid;
}

QString OAIUpdateDiscovererRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateDiscovererRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_cross_account_isSet) {
        obj.insert(QString("CrossAccount"), ::OpenAPI::toJsonValue(m_cross_account));
    }
    return obj;
}

QString OAIUpdateDiscovererRequest::getDescription() const {
    return m_description;
}
void OAIUpdateDiscovererRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateDiscovererRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateDiscovererRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpdateDiscovererRequest::getCrossAccount() const {
    return m_cross_account;
}
void OAIUpdateDiscovererRequest::setCrossAccount(const bool &cross_account) {
    m_cross_account = cross_account;
    m_cross_account_isSet = true;
}

bool OAIUpdateDiscovererRequest::is_cross_account_Set() const{
    return m_cross_account_isSet;
}

bool OAIUpdateDiscovererRequest::is_cross_account_Valid() const{
    return m_cross_account_isValid;
}

bool OAIUpdateDiscovererRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateDiscovererRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
