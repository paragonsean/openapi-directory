/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDiscoveredSchema_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDiscoveredSchema_request::OAIGetDiscoveredSchema_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDiscoveredSchema_request::OAIGetDiscoveredSchema_request() {
    this->initializeModel();
}

OAIGetDiscoveredSchema_request::~OAIGetDiscoveredSchema_request() {}

void OAIGetDiscoveredSchema_request::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetDiscoveredSchema_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDiscoveredSchema_request::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("Events")]);
    m_events_isSet = !json[QString("Events")].isNull() && m_events_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIGetDiscoveredSchema_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDiscoveredSchema_request::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("Events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIGetDiscoveredSchema_request::getEvents() const {
    return m_events;
}
void OAIGetDiscoveredSchema_request::setEvents(const QList<QString> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIGetDiscoveredSchema_request::is_events_Set() const{
    return m_events_isSet;
}

bool OAIGetDiscoveredSchema_request::is_events_Valid() const{
    return m_events_isValid;
}

QString OAIGetDiscoveredSchema_request::getType() const {
    return m_type;
}
void OAIGetDiscoveredSchema_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetDiscoveredSchema_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetDiscoveredSchema_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetDiscoveredSchema_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDiscoveredSchema_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_events_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
