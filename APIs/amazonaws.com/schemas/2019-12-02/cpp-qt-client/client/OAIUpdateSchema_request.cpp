/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSchema_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSchema_request::OAIUpdateSchema_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSchema_request::OAIUpdateSchema_request() {
    this->initializeModel();
}

OAIUpdateSchema_request::~OAIUpdateSchema_request() {}

void OAIUpdateSchema_request::initializeModel() {

    m_client_token_id_isSet = false;
    m_client_token_id_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUpdateSchema_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSchema_request::fromJsonObject(QJsonObject json) {

    m_client_token_id_isValid = ::OpenAPI::fromJsonValue(m_client_token_id, json[QString("ClientTokenId")]);
    m_client_token_id_isSet = !json[QString("ClientTokenId")].isNull() && m_client_token_id_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIUpdateSchema_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSchema_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_token_id_isSet) {
        obj.insert(QString("ClientTokenId"), ::OpenAPI::toJsonValue(m_client_token_id));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUpdateSchema_request::getClientTokenId() const {
    return m_client_token_id;
}
void OAIUpdateSchema_request::setClientTokenId(const QString &client_token_id) {
    m_client_token_id = client_token_id;
    m_client_token_id_isSet = true;
}

bool OAIUpdateSchema_request::is_client_token_id_Set() const{
    return m_client_token_id_isSet;
}

bool OAIUpdateSchema_request::is_client_token_id_Valid() const{
    return m_client_token_id_isValid;
}

QString OAIUpdateSchema_request::getContent() const {
    return m_content;
}
void OAIUpdateSchema_request::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIUpdateSchema_request::is_content_Set() const{
    return m_content_isSet;
}

bool OAIUpdateSchema_request::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIUpdateSchema_request::getDescription() const {
    return m_description;
}
void OAIUpdateSchema_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateSchema_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateSchema_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateSchema_request::getType() const {
    return m_type;
}
void OAIUpdateSchema_request::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUpdateSchema_request::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUpdateSchema_request::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUpdateSchema_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_token_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSchema_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
