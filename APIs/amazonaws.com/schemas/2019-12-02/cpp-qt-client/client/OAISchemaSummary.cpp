/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISchemaSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISchemaSummary::OAISchemaSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISchemaSummary::OAISchemaSummary() {
    this->initializeModel();
}

OAISchemaSummary::~OAISchemaSummary() {}

void OAISchemaSummary::initializeModel() {

    m_last_modified_isSet = false;
    m_last_modified_isValid = false;

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_count_isSet = false;
    m_version_count_isValid = false;
}

void OAISchemaSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISchemaSummary::fromJsonObject(QJsonObject json) {

    m_last_modified_isValid = ::OpenAPI::fromJsonValue(m_last_modified, json[QString("LastModified")]);
    m_last_modified_isSet = !json[QString("LastModified")].isNull() && m_last_modified_isValid;

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("SchemaName")]);
    m_schema_name_isSet = !json[QString("SchemaName")].isNull() && m_schema_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_version_count_isValid = ::OpenAPI::fromJsonValue(m_version_count, json[QString("VersionCount")]);
    m_version_count_isSet = !json[QString("VersionCount")].isNull() && m_version_count_isValid;
}

QString OAISchemaSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISchemaSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_last_modified_isSet) {
        obj.insert(QString("LastModified"), ::OpenAPI::toJsonValue(m_last_modified));
    }
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("SchemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_count_isSet) {
        obj.insert(QString("VersionCount"), ::OpenAPI::toJsonValue(m_version_count));
    }
    return obj;
}

QDateTime OAISchemaSummary::getLastModified() const {
    return m_last_modified;
}
void OAISchemaSummary::setLastModified(const QDateTime &last_modified) {
    m_last_modified = last_modified;
    m_last_modified_isSet = true;
}

bool OAISchemaSummary::is_last_modified_Set() const{
    return m_last_modified_isSet;
}

bool OAISchemaSummary::is_last_modified_Valid() const{
    return m_last_modified_isValid;
}

QString OAISchemaSummary::getSchemaArn() const {
    return m_schema_arn;
}
void OAISchemaSummary::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAISchemaSummary::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAISchemaSummary::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAISchemaSummary::getSchemaName() const {
    return m_schema_name;
}
void OAISchemaSummary::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAISchemaSummary::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAISchemaSummary::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QMap OAISchemaSummary::getTags() const {
    return m_tags;
}
void OAISchemaSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISchemaSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISchemaSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

qint32 OAISchemaSummary::getVersionCount() const {
    return m_version_count;
}
void OAISchemaSummary::setVersionCount(const qint32 &version_count) {
    m_version_count = version_count;
    m_version_count_isSet = true;
}

bool OAISchemaSummary::is_version_count_Set() const{
    return m_version_count_isSet;
}

bool OAISchemaSummary::is_version_count_Valid() const{
    return m_version_count_isValid;
}

bool OAISchemaSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISchemaSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
