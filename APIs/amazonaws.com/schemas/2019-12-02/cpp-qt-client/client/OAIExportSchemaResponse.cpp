/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportSchemaResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportSchemaResponse::OAIExportSchemaResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportSchemaResponse::OAIExportSchemaResponse() {
    this->initializeModel();
}

OAIExportSchemaResponse::~OAIExportSchemaResponse() {}

void OAIExportSchemaResponse::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_schema_version_isSet = false;
    m_schema_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExportSchemaResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportSchemaResponse::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("SchemaName")]);
    m_schema_name_isSet = !json[QString("SchemaName")].isNull() && m_schema_name_isValid;

    m_schema_version_isValid = ::OpenAPI::fromJsonValue(m_schema_version, json[QString("SchemaVersion")]);
    m_schema_version_isSet = !json[QString("SchemaVersion")].isNull() && m_schema_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIExportSchemaResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportSchemaResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("SchemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_schema_version_isSet) {
        obj.insert(QString("SchemaVersion"), ::OpenAPI::toJsonValue(m_schema_version));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIExportSchemaResponse::getContent() const {
    return m_content;
}
void OAIExportSchemaResponse::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIExportSchemaResponse::is_content_Set() const{
    return m_content_isSet;
}

bool OAIExportSchemaResponse::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIExportSchemaResponse::getSchemaArn() const {
    return m_schema_arn;
}
void OAIExportSchemaResponse::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAIExportSchemaResponse::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAIExportSchemaResponse::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAIExportSchemaResponse::getSchemaName() const {
    return m_schema_name;
}
void OAIExportSchemaResponse::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIExportSchemaResponse::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIExportSchemaResponse::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIExportSchemaResponse::getSchemaVersion() const {
    return m_schema_version;
}
void OAIExportSchemaResponse::setSchemaVersion(const QString &schema_version) {
    m_schema_version = schema_version;
    m_schema_version_isSet = true;
}

bool OAIExportSchemaResponse::is_schema_version_Set() const{
    return m_schema_version_isSet;
}

bool OAIExportSchemaResponse::is_schema_version_Valid() const{
    return m_schema_version_isValid;
}

QString OAIExportSchemaResponse::getType() const {
    return m_type;
}
void OAIExportSchemaResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExportSchemaResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExportSchemaResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExportSchemaResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportSchemaResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
