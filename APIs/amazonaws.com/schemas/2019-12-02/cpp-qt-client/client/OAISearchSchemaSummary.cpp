/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchSchemaSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchSchemaSummary::OAISearchSchemaSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchSchemaSummary::OAISearchSchemaSummary() {
    this->initializeModel();
}

OAISearchSchemaSummary::~OAISearchSchemaSummary() {}

void OAISearchSchemaSummary::initializeModel() {

    m_registry_name_isSet = false;
    m_registry_name_isValid = false;

    m_schema_arn_isSet = false;
    m_schema_arn_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_schema_versions_isSet = false;
    m_schema_versions_isValid = false;
}

void OAISearchSchemaSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchSchemaSummary::fromJsonObject(QJsonObject json) {

    m_registry_name_isValid = ::OpenAPI::fromJsonValue(m_registry_name, json[QString("RegistryName")]);
    m_registry_name_isSet = !json[QString("RegistryName")].isNull() && m_registry_name_isValid;

    m_schema_arn_isValid = ::OpenAPI::fromJsonValue(m_schema_arn, json[QString("SchemaArn")]);
    m_schema_arn_isSet = !json[QString("SchemaArn")].isNull() && m_schema_arn_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("SchemaName")]);
    m_schema_name_isSet = !json[QString("SchemaName")].isNull() && m_schema_name_isValid;

    m_schema_versions_isValid = ::OpenAPI::fromJsonValue(m_schema_versions, json[QString("SchemaVersions")]);
    m_schema_versions_isSet = !json[QString("SchemaVersions")].isNull() && m_schema_versions_isValid;
}

QString OAISearchSchemaSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchSchemaSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_registry_name_isSet) {
        obj.insert(QString("RegistryName"), ::OpenAPI::toJsonValue(m_registry_name));
    }
    if (m_schema_arn_isSet) {
        obj.insert(QString("SchemaArn"), ::OpenAPI::toJsonValue(m_schema_arn));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("SchemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_schema_versions.isSet()) {
        obj.insert(QString("SchemaVersions"), ::OpenAPI::toJsonValue(m_schema_versions));
    }
    return obj;
}

QString OAISearchSchemaSummary::getRegistryName() const {
    return m_registry_name;
}
void OAISearchSchemaSummary::setRegistryName(const QString &registry_name) {
    m_registry_name = registry_name;
    m_registry_name_isSet = true;
}

bool OAISearchSchemaSummary::is_registry_name_Set() const{
    return m_registry_name_isSet;
}

bool OAISearchSchemaSummary::is_registry_name_Valid() const{
    return m_registry_name_isValid;
}

QString OAISearchSchemaSummary::getSchemaArn() const {
    return m_schema_arn;
}
void OAISearchSchemaSummary::setSchemaArn(const QString &schema_arn) {
    m_schema_arn = schema_arn;
    m_schema_arn_isSet = true;
}

bool OAISearchSchemaSummary::is_schema_arn_Set() const{
    return m_schema_arn_isSet;
}

bool OAISearchSchemaSummary::is_schema_arn_Valid() const{
    return m_schema_arn_isValid;
}

QString OAISearchSchemaSummary::getSchemaName() const {
    return m_schema_name;
}
void OAISearchSchemaSummary::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAISearchSchemaSummary::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAISearchSchemaSummary::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QList OAISearchSchemaSummary::getSchemaVersions() const {
    return m_schema_versions;
}
void OAISearchSchemaSummary::setSchemaVersions(const QList &schema_versions) {
    m_schema_versions = schema_versions;
    m_schema_versions_isSet = true;
}

bool OAISearchSchemaSummary::is_schema_versions_Set() const{
    return m_schema_versions_isSet;
}

bool OAISearchSchemaSummary::is_schema_versions_Valid() const{
    return m_schema_versions_isValid;
}

bool OAISearchSchemaSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_registry_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_versions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchSchemaSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
