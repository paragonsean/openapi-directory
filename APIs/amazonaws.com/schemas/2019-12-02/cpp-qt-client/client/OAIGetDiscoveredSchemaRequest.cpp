/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDiscoveredSchemaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDiscoveredSchemaRequest::OAIGetDiscoveredSchemaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDiscoveredSchemaRequest::OAIGetDiscoveredSchemaRequest() {
    this->initializeModel();
}

OAIGetDiscoveredSchemaRequest::~OAIGetDiscoveredSchemaRequest() {}

void OAIGetDiscoveredSchemaRequest::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGetDiscoveredSchemaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDiscoveredSchemaRequest::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("Events")]);
    m_events_isSet = !json[QString("Events")].isNull() && m_events_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIGetDiscoveredSchemaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDiscoveredSchemaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_events.isSet()) {
        obj.insert(QString("Events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_type.isSet()) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList OAIGetDiscoveredSchemaRequest::getEvents() const {
    return m_events;
}
void OAIGetDiscoveredSchemaRequest::setEvents(const QList &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAIGetDiscoveredSchemaRequest::is_events_Set() const{
    return m_events_isSet;
}

bool OAIGetDiscoveredSchemaRequest::is_events_Valid() const{
    return m_events_isValid;
}

OAIType OAIGetDiscoveredSchemaRequest::getType() const {
    return m_type;
}
void OAIGetDiscoveredSchemaRequest::setType(const OAIType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGetDiscoveredSchemaRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGetDiscoveredSchemaRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGetDiscoveredSchemaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDiscoveredSchemaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_events_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
