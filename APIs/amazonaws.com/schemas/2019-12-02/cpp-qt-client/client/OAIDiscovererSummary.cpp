/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiscovererSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiscovererSummary::OAIDiscovererSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiscovererSummary::OAIDiscovererSummary() {
    this->initializeModel();
}

OAIDiscovererSummary::~OAIDiscovererSummary() {}

void OAIDiscovererSummary::initializeModel() {

    m_discoverer_arn_isSet = false;
    m_discoverer_arn_isValid = false;

    m_discoverer_id_isSet = false;
    m_discoverer_id_isValid = false;

    m_source_arn_isSet = false;
    m_source_arn_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_cross_account_isSet = false;
    m_cross_account_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDiscovererSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiscovererSummary::fromJsonObject(QJsonObject json) {

    m_discoverer_arn_isValid = ::OpenAPI::fromJsonValue(m_discoverer_arn, json[QString("DiscovererArn")]);
    m_discoverer_arn_isSet = !json[QString("DiscovererArn")].isNull() && m_discoverer_arn_isValid;

    m_discoverer_id_isValid = ::OpenAPI::fromJsonValue(m_discoverer_id, json[QString("DiscovererId")]);
    m_discoverer_id_isSet = !json[QString("DiscovererId")].isNull() && m_discoverer_id_isValid;

    m_source_arn_isValid = ::OpenAPI::fromJsonValue(m_source_arn, json[QString("SourceArn")]);
    m_source_arn_isSet = !json[QString("SourceArn")].isNull() && m_source_arn_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("State")]);
    m_state_isSet = !json[QString("State")].isNull() && m_state_isValid;

    m_cross_account_isValid = ::OpenAPI::fromJsonValue(m_cross_account, json[QString("CrossAccount")]);
    m_cross_account_isSet = !json[QString("CrossAccount")].isNull() && m_cross_account_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIDiscovererSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiscovererSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_discoverer_arn_isSet) {
        obj.insert(QString("DiscovererArn"), ::OpenAPI::toJsonValue(m_discoverer_arn));
    }
    if (m_discoverer_id_isSet) {
        obj.insert(QString("DiscovererId"), ::OpenAPI::toJsonValue(m_discoverer_id));
    }
    if (m_source_arn_isSet) {
        obj.insert(QString("SourceArn"), ::OpenAPI::toJsonValue(m_source_arn));
    }
    if (m_state.isSet()) {
        obj.insert(QString("State"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_cross_account_isSet) {
        obj.insert(QString("CrossAccount"), ::OpenAPI::toJsonValue(m_cross_account));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIDiscovererSummary::getDiscovererArn() const {
    return m_discoverer_arn;
}
void OAIDiscovererSummary::setDiscovererArn(const QString &discoverer_arn) {
    m_discoverer_arn = discoverer_arn;
    m_discoverer_arn_isSet = true;
}

bool OAIDiscovererSummary::is_discoverer_arn_Set() const{
    return m_discoverer_arn_isSet;
}

bool OAIDiscovererSummary::is_discoverer_arn_Valid() const{
    return m_discoverer_arn_isValid;
}

QString OAIDiscovererSummary::getDiscovererId() const {
    return m_discoverer_id;
}
void OAIDiscovererSummary::setDiscovererId(const QString &discoverer_id) {
    m_discoverer_id = discoverer_id;
    m_discoverer_id_isSet = true;
}

bool OAIDiscovererSummary::is_discoverer_id_Set() const{
    return m_discoverer_id_isSet;
}

bool OAIDiscovererSummary::is_discoverer_id_Valid() const{
    return m_discoverer_id_isValid;
}

QString OAIDiscovererSummary::getSourceArn() const {
    return m_source_arn;
}
void OAIDiscovererSummary::setSourceArn(const QString &source_arn) {
    m_source_arn = source_arn;
    m_source_arn_isSet = true;
}

bool OAIDiscovererSummary::is_source_arn_Set() const{
    return m_source_arn_isSet;
}

bool OAIDiscovererSummary::is_source_arn_Valid() const{
    return m_source_arn_isValid;
}

OAIDiscovererState OAIDiscovererSummary::getState() const {
    return m_state;
}
void OAIDiscovererSummary::setState(const OAIDiscovererState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDiscovererSummary::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDiscovererSummary::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDiscovererSummary::getCrossAccount() const {
    return m_cross_account;
}
void OAIDiscovererSummary::setCrossAccount(const bool &cross_account) {
    m_cross_account = cross_account;
    m_cross_account_isSet = true;
}

bool OAIDiscovererSummary::is_cross_account_Set() const{
    return m_cross_account_isSet;
}

bool OAIDiscovererSummary::is_cross_account_Valid() const{
    return m_cross_account_isValid;
}

QMap OAIDiscovererSummary::getTags() const {
    return m_tags;
}
void OAIDiscovererSummary::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDiscovererSummary::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDiscovererSummary::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDiscovererSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_discoverer_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_discoverer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cross_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiscovererSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
