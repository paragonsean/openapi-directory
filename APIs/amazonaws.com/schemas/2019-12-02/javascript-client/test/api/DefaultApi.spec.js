/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Schemas);
  }
}(this, function(expect, Schemas) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Schemas.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createDiscoverer', function() {
      it('should call createDiscoverer successfully', function(done) {
        //uncomment below and update the code to test createDiscoverer
        //instance.createDiscoverer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRegistry', function() {
      it('should call createRegistry successfully', function(done) {
        //uncomment below and update the code to test createRegistry
        //instance.createRegistry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createSchema', function() {
      it('should call createSchema successfully', function(done) {
        //uncomment below and update the code to test createSchema
        //instance.createSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDiscoverer', function() {
      it('should call deleteDiscoverer successfully', function(done) {
        //uncomment below and update the code to test deleteDiscoverer
        //instance.deleteDiscoverer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRegistry', function() {
      it('should call deleteRegistry successfully', function(done) {
        //uncomment below and update the code to test deleteRegistry
        //instance.deleteRegistry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteResourcePolicy', function() {
      it('should call deleteResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test deleteResourcePolicy
        //instance.deleteResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSchema', function() {
      it('should call deleteSchema successfully', function(done) {
        //uncomment below and update the code to test deleteSchema
        //instance.deleteSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteSchemaVersion', function() {
      it('should call deleteSchemaVersion successfully', function(done) {
        //uncomment below and update the code to test deleteSchemaVersion
        //instance.deleteSchemaVersion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeCodeBinding', function() {
      it('should call describeCodeBinding successfully', function(done) {
        //uncomment below and update the code to test describeCodeBinding
        //instance.describeCodeBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeDiscoverer', function() {
      it('should call describeDiscoverer successfully', function(done) {
        //uncomment below and update the code to test describeDiscoverer
        //instance.describeDiscoverer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeRegistry', function() {
      it('should call describeRegistry successfully', function(done) {
        //uncomment below and update the code to test describeRegistry
        //instance.describeRegistry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('describeSchema', function() {
      it('should call describeSchema successfully', function(done) {
        //uncomment below and update the code to test describeSchema
        //instance.describeSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportSchema', function() {
      it('should call exportSchema successfully', function(done) {
        //uncomment below and update the code to test exportSchema
        //instance.exportSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCodeBindingSource', function() {
      it('should call getCodeBindingSource successfully', function(done) {
        //uncomment below and update the code to test getCodeBindingSource
        //instance.getCodeBindingSource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDiscoveredSchema', function() {
      it('should call getDiscoveredSchema successfully', function(done) {
        //uncomment below and update the code to test getDiscoveredSchema
        //instance.getDiscoveredSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getResourcePolicy', function() {
      it('should call getResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test getResourcePolicy
        //instance.getResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDiscoverers', function() {
      it('should call listDiscoverers successfully', function(done) {
        //uncomment below and update the code to test listDiscoverers
        //instance.listDiscoverers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRegistries', function() {
      it('should call listRegistries successfully', function(done) {
        //uncomment below and update the code to test listRegistries
        //instance.listRegistries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSchemaVersions', function() {
      it('should call listSchemaVersions successfully', function(done) {
        //uncomment below and update the code to test listSchemaVersions
        //instance.listSchemaVersions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listSchemas', function() {
      it('should call listSchemas successfully', function(done) {
        //uncomment below and update the code to test listSchemas
        //instance.listSchemas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTagsForResource', function() {
      it('should call listTagsForResource successfully', function(done) {
        //uncomment below and update the code to test listTagsForResource
        //instance.listTagsForResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putCodeBinding', function() {
      it('should call putCodeBinding successfully', function(done) {
        //uncomment below and update the code to test putCodeBinding
        //instance.putCodeBinding(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putResourcePolicy', function() {
      it('should call putResourcePolicy successfully', function(done) {
        //uncomment below and update the code to test putResourcePolicy
        //instance.putResourcePolicy(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('searchSchemas', function() {
      it('should call searchSchemas successfully', function(done) {
        //uncomment below and update the code to test searchSchemas
        //instance.searchSchemas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startDiscoverer', function() {
      it('should call startDiscoverer successfully', function(done) {
        //uncomment below and update the code to test startDiscoverer
        //instance.startDiscoverer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopDiscoverer', function() {
      it('should call stopDiscoverer successfully', function(done) {
        //uncomment below and update the code to test stopDiscoverer
        //instance.stopDiscoverer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDiscoverer', function() {
      it('should call updateDiscoverer successfully', function(done) {
        //uncomment below and update the code to test updateDiscoverer
        //instance.updateDiscoverer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRegistry', function() {
      it('should call updateRegistry successfully', function(done) {
        //uncomment below and update the code to test updateRegistry
        //instance.updateRegistry(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateSchema', function() {
      it('should call updateSchema successfully', function(done) {
        //uncomment below and update the code to test updateSchema
        //instance.updateSchema(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
