/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetDiscoveredSchemaRequest model module.
 * @module model/GetDiscoveredSchemaRequest
 * @version 2019-12-02
 */
class GetDiscoveredSchemaRequest {
    /**
     * Constructs a new <code>GetDiscoveredSchemaRequest</code>.
     * @alias module:model/GetDiscoveredSchemaRequest
     * @param events {Array.<String>} An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.
     * @param type {module:model/GetDiscoveredSchemaRequest.TypeEnum} The type of event.
     */
    constructor(events, type) { 
        
        GetDiscoveredSchemaRequest.initialize(this, events, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, events, type) { 
        obj['Events'] = events;
        obj['Type'] = type;
    }

    /**
     * Constructs a <code>GetDiscoveredSchemaRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetDiscoveredSchemaRequest} obj Optional instance to populate.
     * @return {module:model/GetDiscoveredSchemaRequest} The populated <code>GetDiscoveredSchemaRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetDiscoveredSchemaRequest();

            if (data.hasOwnProperty('Events')) {
                obj['Events'] = ApiClient.convertToType(data['Events'], ['String']);
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetDiscoveredSchemaRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetDiscoveredSchemaRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of GetDiscoveredSchemaRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['Events'])) {
            throw new Error("Expected the field `Events` to be an array in the JSON data but got " + data['Events']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}

GetDiscoveredSchemaRequest.RequiredProperties = ["Events", "Type"];

/**
 * An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.
 * @member {Array.<String>} Events
 */
GetDiscoveredSchemaRequest.prototype['Events'] = undefined;

/**
 * The type of event.
 * @member {module:model/GetDiscoveredSchemaRequest.TypeEnum} Type
 */
GetDiscoveredSchemaRequest.prototype['Type'] = undefined;





/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
GetDiscoveredSchemaRequest['TypeEnum'] = {

    /**
     * value: "OpenApi3"
     * @const
     */
    "OpenApi3": "OpenApi3",

    /**
     * value: "JSONSchemaDraft4"
     * @const
     */
    "JSONSchemaDraft4": "JSONSchemaDraft4"
};



export default GetDiscoveredSchemaRequest;

