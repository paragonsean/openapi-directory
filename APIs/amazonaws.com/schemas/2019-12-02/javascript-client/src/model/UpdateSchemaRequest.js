/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateSchemaRequest model module.
 * @module model/UpdateSchemaRequest
 * @version 2019-12-02
 */
class UpdateSchemaRequest {
    /**
     * Constructs a new <code>UpdateSchemaRequest</code>.
     * @alias module:model/UpdateSchemaRequest
     */
    constructor() { 
        
        UpdateSchemaRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateSchemaRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateSchemaRequest} obj Optional instance to populate.
     * @return {module:model/UpdateSchemaRequest} The populated <code>UpdateSchemaRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateSchemaRequest();

            if (data.hasOwnProperty('ClientTokenId')) {
                obj['ClientTokenId'] = ApiClient.convertToType(data['ClientTokenId'], 'String');
            }
            if (data.hasOwnProperty('Content')) {
                obj['Content'] = ApiClient.convertToType(data['Content'], 'String');
            }
            if (data.hasOwnProperty('Description')) {
                obj['Description'] = ApiClient.convertToType(data['Description'], 'String');
            }
            if (data.hasOwnProperty('Type')) {
                obj['Type'] = ApiClient.convertToType(data['Type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateSchemaRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateSchemaRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ClientTokenId'] && !(typeof data['ClientTokenId'] === 'string' || data['ClientTokenId'] instanceof String)) {
            throw new Error("Expected the field `ClientTokenId` to be a primitive type in the JSON string but got " + data['ClientTokenId']);
        }
        // ensure the json data is a string
        if (data['Content'] && !(typeof data['Content'] === 'string' || data['Content'] instanceof String)) {
            throw new Error("Expected the field `Content` to be a primitive type in the JSON string but got " + data['Content']);
        }
        // ensure the json data is a string
        if (data['Description'] && !(typeof data['Description'] === 'string' || data['Description'] instanceof String)) {
            throw new Error("Expected the field `Description` to be a primitive type in the JSON string but got " + data['Description']);
        }
        // ensure the json data is a string
        if (data['Type'] && !(typeof data['Type'] === 'string' || data['Type'] instanceof String)) {
            throw new Error("Expected the field `Type` to be a primitive type in the JSON string but got " + data['Type']);
        }

        return true;
    }


}



/**
 * The ID of the client token.
 * @member {String} ClientTokenId
 */
UpdateSchemaRequest.prototype['ClientTokenId'] = undefined;

/**
 * The source of the schema definition.
 * @member {String} Content
 */
UpdateSchemaRequest.prototype['Content'] = undefined;

/**
 * The description of the schema.
 * @member {String} Description
 */
UpdateSchemaRequest.prototype['Description'] = undefined;

/**
 * The schema type for the events schema.
 * @member {module:model/UpdateSchemaRequest.TypeEnum} Type
 */
UpdateSchemaRequest.prototype['Type'] = undefined;





/**
 * Allowed values for the <code>Type</code> property.
 * @enum {String}
 * @readonly
 */
UpdateSchemaRequest['TypeEnum'] = {

    /**
     * value: "OpenApi3"
     * @const
     */
    "OpenApi3": "OpenApi3",

    /**
     * value: "JSONSchemaDraft4"
     * @const
     */
    "JSONSchemaDraft4": "JSONSchemaDraft4"
};



export default UpdateSchemaRequest;

