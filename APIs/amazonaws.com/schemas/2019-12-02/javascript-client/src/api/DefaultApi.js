/**
 * Schemas
 * Amazon EventBridge Schema Registry
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateDiscovererRequest from '../model/CreateDiscovererRequest';
import CreateDiscovererResponse from '../model/CreateDiscovererResponse';
import CreateRegistryRequest from '../model/CreateRegistryRequest';
import CreateRegistryResponse from '../model/CreateRegistryResponse';
import CreateSchemaRequest from '../model/CreateSchemaRequest';
import CreateSchemaResponse from '../model/CreateSchemaResponse';
import DescribeCodeBindingResponse from '../model/DescribeCodeBindingResponse';
import DescribeDiscovererResponse from '../model/DescribeDiscovererResponse';
import DescribeRegistryResponse from '../model/DescribeRegistryResponse';
import DescribeSchemaResponse from '../model/DescribeSchemaResponse';
import ExportSchemaResponse from '../model/ExportSchemaResponse';
import GetCodeBindingSourceResponse from '../model/GetCodeBindingSourceResponse';
import GetDiscoveredSchemaRequest from '../model/GetDiscoveredSchemaRequest';
import GetDiscoveredSchemaResponse from '../model/GetDiscoveredSchemaResponse';
import GetResourcePolicyResponse from '../model/GetResourcePolicyResponse';
import ListDiscoverersResponse from '../model/ListDiscoverersResponse';
import ListRegistriesResponse from '../model/ListRegistriesResponse';
import ListSchemaVersionsResponse from '../model/ListSchemaVersionsResponse';
import ListSchemasResponse from '../model/ListSchemasResponse';
import ListTagsForResourceResponse from '../model/ListTagsForResourceResponse';
import PutCodeBindingResponse from '../model/PutCodeBindingResponse';
import PutResourcePolicyRequest from '../model/PutResourcePolicyRequest';
import PutResourcePolicyResponse from '../model/PutResourcePolicyResponse';
import SearchSchemasResponse from '../model/SearchSchemasResponse';
import StartDiscovererResponse from '../model/StartDiscovererResponse';
import StopDiscovererResponse from '../model/StopDiscovererResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateDiscovererRequest from '../model/UpdateDiscovererRequest';
import UpdateDiscovererResponse from '../model/UpdateDiscovererResponse';
import UpdateRegistryRequest from '../model/UpdateRegistryRequest';
import UpdateRegistryResponse from '../model/UpdateRegistryResponse';
import UpdateSchemaRequest from '../model/UpdateSchemaRequest';
import UpdateSchemaResponse from '../model/UpdateSchemaResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-12-02
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDiscoverer operation.
     * @callback module:api/DefaultApi~createDiscovererCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDiscovererResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a discoverer.
     * @param {module:model/CreateDiscovererRequest} createDiscovererRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDiscovererCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDiscovererResponse}
     */
    createDiscoverer(createDiscovererRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDiscovererRequest;
      // verify the required parameter 'createDiscovererRequest' is set
      if (createDiscovererRequest === undefined || createDiscovererRequest === null) {
        throw new Error("Missing the required parameter 'createDiscovererRequest' when calling createDiscoverer");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDiscovererResponse;
      return this.apiClient.callApi(
        '/v1/discoverers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRegistry operation.
     * @callback module:api/DefaultApi~createRegistryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRegistryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a registry.
     * @param {String} registryName The name of the registry.
     * @param {module:model/CreateRegistryRequest} createRegistryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRegistryResponse}
     */
    createRegistry(registryName, createRegistryRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRegistryRequest;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling createRegistry");
      }
      // verify the required parameter 'createRegistryRequest' is set
      if (createRegistryRequest === undefined || createRegistryRequest === null) {
        throw new Error("Missing the required parameter 'createRegistryRequest' when calling createRegistry");
      }

      let pathParams = {
        'registryName': registryName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRegistryResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSchema operation.
     * @callback module:api/DefaultApi~createSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSchemaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Creates a schema definition.</p> <note><p>Inactive schemas will be deleted after two years.</p></note>
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {module:model/CreateSchemaRequest} createSchemaRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSchemaResponse}
     */
    createSchema(registryName, schemaName, createSchemaRequest, opts, callback) {
      opts = opts || {};
      let postBody = createSchemaRequest;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling createSchema");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling createSchema");
      }
      // verify the required parameter 'createSchemaRequest' is set
      if (createSchemaRequest === undefined || createSchemaRequest === null) {
        throw new Error("Missing the required parameter 'createSchemaRequest' when calling createSchema");
      }

      let pathParams = {
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSchemaResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDiscoverer operation.
     * @callback module:api/DefaultApi~deleteDiscovererCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a discoverer.
     * @param {String} discovererId The ID of the discoverer.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDiscovererCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDiscoverer(discovererId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'discovererId' is set
      if (discovererId === undefined || discovererId === null) {
        throw new Error("Missing the required parameter 'discovererId' when calling deleteDiscoverer");
      }

      let pathParams = {
        'discovererId': discovererId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/discoverers/id/{discovererId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRegistry operation.
     * @callback module:api/DefaultApi~deleteRegistryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Registry.
     * @param {String} registryName The name of the registry.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRegistry(registryName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling deleteRegistry");
      }

      let pathParams = {
        'registryName': registryName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourcePolicy operation.
     * @callback module:api/DefaultApi~deleteResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the resource-based policy attached to the specified registry.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [registryName] The name of the registry.
     * @param {module:api/DefaultApi~deleteResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteResourcePolicy(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'registryName': opts['registryName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/policy', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSchema operation.
     * @callback module:api/DefaultApi~deleteSchemaCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a schema definition.
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSchema(registryName, schemaName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling deleteSchema");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling deleteSchema");
      }

      let pathParams = {
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSchemaVersion operation.
     * @callback module:api/DefaultApi~deleteSchemaVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the schema version definition
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {String} schemaVersion The version number of the schema
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteSchemaVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSchemaVersion(registryName, schemaName, schemaVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling deleteSchemaVersion");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling deleteSchemaVersion");
      }
      // verify the required parameter 'schemaVersion' is set
      if (schemaVersion === undefined || schemaVersion === null) {
        throw new Error("Missing the required parameter 'schemaVersion' when calling deleteSchemaVersion");
      }

      let pathParams = {
        'registryName': registryName,
        'schemaName': schemaName,
        'schemaVersion': schemaVersion
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}/version/{schemaVersion}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeCodeBinding operation.
     * @callback module:api/DefaultApi~describeCodeBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeCodeBindingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describe the code binding URI.
     * @param {String} language The language of the code binding.
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [schemaVersion] Specifying this limits the results to only this schema version.
     * @param {module:api/DefaultApi~describeCodeBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeCodeBindingResponse}
     */
    describeCodeBinding(language, registryName, schemaName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling describeCodeBinding");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling describeCodeBinding");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling describeCodeBinding");
      }

      let pathParams = {
        'language': language,
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
        'schemaVersion': opts['schemaVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeCodeBindingResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeDiscoverer operation.
     * @callback module:api/DefaultApi~describeDiscovererCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeDiscovererResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the discoverer.
     * @param {String} discovererId The ID of the discoverer.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeDiscovererCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeDiscovererResponse}
     */
    describeDiscoverer(discovererId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'discovererId' is set
      if (discovererId === undefined || discovererId === null) {
        throw new Error("Missing the required parameter 'discovererId' when calling describeDiscoverer");
      }

      let pathParams = {
        'discovererId': discovererId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeDiscovererResponse;
      return this.apiClient.callApi(
        '/v1/discoverers/id/{discovererId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeRegistry operation.
     * @callback module:api/DefaultApi~describeRegistryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeRegistryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the registry.
     * @param {String} registryName The name of the registry.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~describeRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeRegistryResponse}
     */
    describeRegistry(registryName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling describeRegistry");
      }

      let pathParams = {
        'registryName': registryName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeRegistryResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the describeSchema operation.
     * @callback module:api/DefaultApi~describeSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescribeSchemaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the schema definition.
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [schemaVersion] Specifying this limits the results to only this schema version.
     * @param {module:api/DefaultApi~describeSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescribeSchemaResponse}
     */
    describeSchema(registryName, schemaName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling describeSchema");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling describeSchema");
      }

      let pathParams = {
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
        'schemaVersion': opts['schemaVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescribeSchemaResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportSchema operation.
     * @callback module:api/DefaultApi~exportSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportSchemaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [schemaVersion] Specifying this limits the results to only this schema version.
     * @param {module:api/DefaultApi~exportSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportSchemaResponse}
     */
    exportSchema(registryName, schemaName, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling exportSchema");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling exportSchema");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling exportSchema");
      }

      let pathParams = {
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
        'schemaVersion': opts['schemaVersion'],
        'type': type
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportSchemaResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}/export#type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCodeBindingSource operation.
     * @callback module:api/DefaultApi~getCodeBindingSourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCodeBindingSourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the code binding source URI.
     * @param {String} language The language of the code binding.
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [schemaVersion] Specifying this limits the results to only this schema version.
     * @param {module:api/DefaultApi~getCodeBindingSourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCodeBindingSourceResponse}
     */
    getCodeBindingSource(language, registryName, schemaName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getCodeBindingSource");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling getCodeBindingSource");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling getCodeBindingSource");
      }

      let pathParams = {
        'language': language,
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
        'schemaVersion': opts['schemaVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCodeBindingSourceResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}/source', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDiscoveredSchema operation.
     * @callback module:api/DefaultApi~getDiscoveredSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDiscoveredSchemaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the discovered schema that was generated based on sampled events.
     * @param {module:model/GetDiscoveredSchemaRequest} getDiscoveredSchemaRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDiscoveredSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDiscoveredSchemaResponse}
     */
    getDiscoveredSchema(getDiscoveredSchemaRequest, opts, callback) {
      opts = opts || {};
      let postBody = getDiscoveredSchemaRequest;
      // verify the required parameter 'getDiscoveredSchemaRequest' is set
      if (getDiscoveredSchemaRequest === undefined || getDiscoveredSchemaRequest === null) {
        throw new Error("Missing the required parameter 'getDiscoveredSchemaRequest' when calling getDiscoveredSchema");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetDiscoveredSchemaResponse;
      return this.apiClient.callApi(
        '/v1/discover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourcePolicy operation.
     * @callback module:api/DefaultApi~getResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the resource-based policy attached to a given registry.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [registryName] The name of the registry.
     * @param {module:api/DefaultApi~getResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourcePolicyResponse}
     */
    getResourcePolicy(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'registryName': opts['registryName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResourcePolicyResponse;
      return this.apiClient.callApi(
        '/v1/policy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDiscoverers operation.
     * @callback module:api/DefaultApi~listDiscoverersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListDiscoverersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the discoverers.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [discovererIdPrefix] Specifying this limits the results to only those discoverer IDs that start with the specified prefix.
     * @param {Number} [limit] 
     * @param {String} [nextToken] The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
     * @param {String} [sourceArnPrefix] Specifying this limits the results to only those ARNs that start with the specified prefix.
     * @param {String} [limit2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listDiscoverersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListDiscoverersResponse}
     */
    listDiscoverers(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'discovererIdPrefix': opts['discovererIdPrefix'],
        'limit': opts['limit'],
        'nextToken': opts['nextToken'],
        'sourceArnPrefix': opts['sourceArnPrefix'],
        'Limit': opts['limit2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListDiscoverersResponse;
      return this.apiClient.callApi(
        '/v1/discoverers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRegistries operation.
     * @callback module:api/DefaultApi~listRegistriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRegistriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the registries.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] 
     * @param {String} [nextToken] The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
     * @param {String} [registryNamePrefix] Specifying this limits the results to only those registry names that start with the specified prefix.
     * @param {String} [scope] Can be set to Local or AWS to limit responses to your custom registries, or the ones provided by AWS.
     * @param {String} [limit2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRegistriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRegistriesResponse}
     */
    listRegistries(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken'],
        'registryNamePrefix': opts['registryNamePrefix'],
        'scope': opts['scope'],
        'Limit': opts['limit2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRegistriesResponse;
      return this.apiClient.callApi(
        '/v1/registries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSchemaVersions operation.
     * @callback module:api/DefaultApi~listSchemaVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSchemaVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a list of the schema versions and related information.
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] 
     * @param {String} [nextToken] The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
     * @param {String} [limit2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listSchemaVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSchemaVersionsResponse}
     */
    listSchemaVersions(registryName, schemaName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling listSchemaVersions");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling listSchemaVersions");
      }

      let pathParams = {
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken'],
        'Limit': opts['limit2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSchemaVersionsResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSchemas operation.
     * @callback module:api/DefaultApi~listSchemasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListSchemasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the schemas.
     * @param {String} registryName The name of the registry.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] 
     * @param {String} [nextToken] The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
     * @param {String} [schemaNamePrefix] Specifying this limits the results to only those schema names that start with the specified prefix.
     * @param {String} [limit2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListSchemasResponse}
     */
    listSchemas(registryName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling listSchemas");
      }

      let pathParams = {
        'registryName': registryName
      };
      let queryParams = {
        'limit': opts['limit'],
        'nextToken': opts['nextToken'],
        'schemaNamePrefix': opts['schemaNamePrefix'],
        'Limit': opts['limit2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListSchemasResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResource operation.
     * @callback module:api/DefaultApi~listTagsForResourceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tags for resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourceResponse}
     */
    listTagsForResource(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourceResponse;
      return this.apiClient.callApi(
        '/tags/{resource-arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putCodeBinding operation.
     * @callback module:api/DefaultApi~putCodeBindingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutCodeBindingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Put code binding URI
     * @param {String} language The language of the code binding.
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [schemaVersion] Specifying this limits the results to only this schema version.
     * @param {module:api/DefaultApi~putCodeBindingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutCodeBindingResponse}
     */
    putCodeBinding(language, registryName, schemaName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling putCodeBinding");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling putCodeBinding");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling putCodeBinding");
      }

      let pathParams = {
        'language': language,
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
        'schemaVersion': opts['schemaVersion']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PutCodeBindingResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}/language/{language}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putResourcePolicy operation.
     * @callback module:api/DefaultApi~putResourcePolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PutResourcePolicyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The name of the policy.
     * @param {module:model/PutResourcePolicyRequest} putResourcePolicyRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [registryName] The name of the registry.
     * @param {module:api/DefaultApi~putResourcePolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PutResourcePolicyResponse}
     */
    putResourcePolicy(putResourcePolicyRequest, opts, callback) {
      opts = opts || {};
      let postBody = putResourcePolicyRequest;
      // verify the required parameter 'putResourcePolicyRequest' is set
      if (putResourcePolicyRequest === undefined || putResourcePolicyRequest === null) {
        throw new Error("Missing the required parameter 'putResourcePolicyRequest' when calling putResourcePolicy");
      }

      let pathParams = {
      };
      let queryParams = {
        'registryName': opts['registryName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PutResourcePolicyResponse;
      return this.apiClient.callApi(
        '/v1/policy', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSchemas operation.
     * @callback module:api/DefaultApi~searchSchemasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchSchemasResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search the schemas
     * @param {String} keywords Specifying this limits the results to only schemas that include the provided keywords.
     * @param {String} registryName The name of the registry.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [limit] 
     * @param {String} [nextToken] The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.
     * @param {String} [limit2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~searchSchemasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchSchemasResponse}
     */
    searchSchemas(keywords, registryName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keywords' is set
      if (keywords === undefined || keywords === null) {
        throw new Error("Missing the required parameter 'keywords' when calling searchSchemas");
      }
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling searchSchemas");
      }

      let pathParams = {
        'registryName': registryName
      };
      let queryParams = {
        'keywords': keywords,
        'limit': opts['limit'],
        'nextToken': opts['nextToken'],
        'Limit': opts['limit2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchSchemasResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/search#keywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDiscoverer operation.
     * @callback module:api/DefaultApi~startDiscovererCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StartDiscovererResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the discoverer
     * @param {String} discovererId The ID of the discoverer.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~startDiscovererCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StartDiscovererResponse}
     */
    startDiscoverer(discovererId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'discovererId' is set
      if (discovererId === undefined || discovererId === null) {
        throw new Error("Missing the required parameter 'discovererId' when calling startDiscoverer");
      }

      let pathParams = {
        'discovererId': discovererId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StartDiscovererResponse;
      return this.apiClient.callApi(
        '/v1/discoverers/id/{discovererId}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopDiscoverer operation.
     * @callback module:api/DefaultApi~stopDiscovererCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StopDiscovererResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the discoverer
     * @param {String} discovererId The ID of the discoverer.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~stopDiscovererCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StopDiscovererResponse}
     */
    stopDiscoverer(discovererId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'discovererId' is set
      if (discovererId === undefined || discovererId === null) {
        throw new Error("Missing the required parameter 'discovererId' when calling stopDiscoverer");
      }

      let pathParams = {
        'discovererId': discovererId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StopDiscovererResponse;
      return this.apiClient.callApi(
        '/v1/discoverers/id/{discovererId}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tags to a resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resource-arn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes tags from a resource.
     * @param {String} resourceArn The ARN of the resource.
     * @param {Array.<String>} tagKeys Keys of key-value pairs.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resource-arn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDiscoverer operation.
     * @callback module:api/DefaultApi~updateDiscovererCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDiscovererResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the discoverer
     * @param {String} discovererId The ID of the discoverer.
     * @param {module:model/UpdateDiscovererRequest} updateDiscovererRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDiscovererCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDiscovererResponse}
     */
    updateDiscoverer(discovererId, updateDiscovererRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDiscovererRequest;
      // verify the required parameter 'discovererId' is set
      if (discovererId === undefined || discovererId === null) {
        throw new Error("Missing the required parameter 'discovererId' when calling updateDiscoverer");
      }
      // verify the required parameter 'updateDiscovererRequest' is set
      if (updateDiscovererRequest === undefined || updateDiscovererRequest === null) {
        throw new Error("Missing the required parameter 'updateDiscovererRequest' when calling updateDiscoverer");
      }

      let pathParams = {
        'discovererId': discovererId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDiscovererResponse;
      return this.apiClient.callApi(
        '/v1/discoverers/id/{discovererId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRegistry operation.
     * @callback module:api/DefaultApi~updateRegistryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRegistryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a registry.
     * @param {String} registryName The name of the registry.
     * @param {module:model/UpdateRegistryRequest} updateRegistryRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRegistryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRegistryResponse}
     */
    updateRegistry(registryName, updateRegistryRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRegistryRequest;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling updateRegistry");
      }
      // verify the required parameter 'updateRegistryRequest' is set
      if (updateRegistryRequest === undefined || updateRegistryRequest === null) {
        throw new Error("Missing the required parameter 'updateRegistryRequest' when calling updateRegistry");
      }

      let pathParams = {
        'registryName': registryName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRegistryResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSchema operation.
     * @callback module:api/DefaultApi~updateSchemaCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateSchemaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * <p>Updates the schema definition</p> <note><p>Inactive schemas will be deleted after two years.</p></note>
     * @param {String} registryName The name of the registry.
     * @param {String} schemaName The name of the schema.
     * @param {module:model/UpdateSchemaRequest} updateSchemaRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateSchemaCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateSchemaResponse}
     */
    updateSchema(registryName, schemaName, updateSchemaRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateSchemaRequest;
      // verify the required parameter 'registryName' is set
      if (registryName === undefined || registryName === null) {
        throw new Error("Missing the required parameter 'registryName' when calling updateSchema");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling updateSchema");
      }
      // verify the required parameter 'updateSchemaRequest' is set
      if (updateSchemaRequest === undefined || updateSchemaRequest === null) {
        throw new Error("Missing the required parameter 'updateSchemaRequest' when calling updateSchema");
      }

      let pathParams = {
        'registryName': registryName,
        'schemaName': schemaName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateSchemaResponse;
      return this.apiClient.callApi(
        '/v1/registries/name/{registryName}/schemas/name/{schemaName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
