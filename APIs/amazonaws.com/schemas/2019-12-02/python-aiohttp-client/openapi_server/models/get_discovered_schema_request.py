# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDiscoveredSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[str]=None, type: str=None):
        """GetDiscoveredSchemaRequest - a model defined in OpenAPI

        :param events: The events of this GetDiscoveredSchemaRequest.
        :param type: The type of this GetDiscoveredSchemaRequest.
        """
        self.openapi_types = {
            'events': List[str],
            'type': str
        }

        self.attribute_map = {
            'events': 'Events',
            'type': 'Type'
        }

        self._events = events
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDiscoveredSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDiscoveredSchema_request of this GetDiscoveredSchemaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this GetDiscoveredSchemaRequest.

        An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.

        :return: The events of this GetDiscoveredSchemaRequest.
        :rtype: List[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this GetDiscoveredSchemaRequest.

        An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.

        :param events: The events of this GetDiscoveredSchemaRequest.
        :type events: List[str]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")
        if events is not None and len(events) > 10:
            raise ValueError("Invalid value for `events`, number of items must be less than or equal to `10`")
        if events is not None and len(events) < 1:
            raise ValueError("Invalid value for `events`, number of items must be greater than or equal to `1`")

        self._events = events

    @property
    def type(self):
        """Gets the type of this GetDiscoveredSchemaRequest.

        The type of event.

        :return: The type of this GetDiscoveredSchemaRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetDiscoveredSchemaRequest.

        The type of event.

        :param type: The type of this GetDiscoveredSchemaRequest.
        :type type: str
        """
        allowed_values = ["OpenApi3", "JSONSchemaDraft4"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
