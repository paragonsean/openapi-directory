# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_token_id: str=None, content: str=None, description: str=None, type: str=None):
        """UpdateSchemaRequest - a model defined in OpenAPI

        :param client_token_id: The client_token_id of this UpdateSchemaRequest.
        :param content: The content of this UpdateSchemaRequest.
        :param description: The description of this UpdateSchemaRequest.
        :param type: The type of this UpdateSchemaRequest.
        """
        self.openapi_types = {
            'client_token_id': str,
            'content': str,
            'description': str,
            'type': str
        }

        self.attribute_map = {
            'client_token_id': 'ClientTokenId',
            'content': 'Content',
            'description': 'Description',
            'type': 'Type'
        }

        self._client_token_id = client_token_id
        self._content = content
        self._description = description
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSchema_request of this UpdateSchemaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_token_id(self):
        """Gets the client_token_id of this UpdateSchemaRequest.

        The ID of the client token.

        :return: The client_token_id of this UpdateSchemaRequest.
        :rtype: str
        """
        return self._client_token_id

    @client_token_id.setter
    def client_token_id(self, client_token_id):
        """Sets the client_token_id of this UpdateSchemaRequest.

        The ID of the client token.

        :param client_token_id: The client_token_id of this UpdateSchemaRequest.
        :type client_token_id: str
        """
        if client_token_id is not None and len(client_token_id) > 36:
            raise ValueError("Invalid value for `client_token_id`, length must be less than or equal to `36`")
        if client_token_id is not None and len(client_token_id) < 0:
            raise ValueError("Invalid value for `client_token_id`, length must be greater than or equal to `0`")

        self._client_token_id = client_token_id

    @property
    def content(self):
        """Gets the content of this UpdateSchemaRequest.

        The source of the schema definition.

        :return: The content of this UpdateSchemaRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this UpdateSchemaRequest.

        The source of the schema definition.

        :param content: The content of this UpdateSchemaRequest.
        :type content: str
        """
        if content is not None and len(content) > 100000:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `100000`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def description(self):
        """Gets the description of this UpdateSchemaRequest.

        The description of the schema.

        :return: The description of this UpdateSchemaRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateSchemaRequest.

        The description of the schema.

        :param description: The description of this UpdateSchemaRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def type(self):
        """Gets the type of this UpdateSchemaRequest.

        The schema type for the events schema.

        :return: The type of this UpdateSchemaRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpdateSchemaRequest.

        The schema type for the events schema.

        :param type: The type of this UpdateSchemaRequest.
        :type type: str
        """
        allowed_values = ["OpenApi3", "JSONSchemaDraft4"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
