# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSchemaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, description: str=None, tags: Dict[str, str]=None, type: str=None):
        """CreateSchemaRequest - a model defined in OpenAPI

        :param content: The content of this CreateSchemaRequest.
        :param description: The description of this CreateSchemaRequest.
        :param tags: The tags of this CreateSchemaRequest.
        :param type: The type of this CreateSchemaRequest.
        """
        self.openapi_types = {
            'content': str,
            'description': str,
            'tags': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'content': 'Content',
            'description': 'Description',
            'tags': 'tags',
            'type': 'Type'
        }

        self._content = content
        self._description = description
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSchemaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateSchema_request of this CreateSchemaRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this CreateSchemaRequest.

        The source of the schema definition.

        :return: The content of this CreateSchemaRequest.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateSchemaRequest.

        The source of the schema definition.

        :param content: The content of this CreateSchemaRequest.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")
        if content is not None and len(content) > 100000:
            raise ValueError("Invalid value for `content`, length must be less than or equal to `100000`")
        if content is not None and len(content) < 1:
            raise ValueError("Invalid value for `content`, length must be greater than or equal to `1`")

        self._content = content

    @property
    def description(self):
        """Gets the description of this CreateSchemaRequest.

        A description of the schema.

        :return: The description of this CreateSchemaRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSchemaRequest.

        A description of the schema.

        :param description: The description of this CreateSchemaRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this CreateSchemaRequest.

        Key-value pairs associated with a resource.

        :return: The tags of this CreateSchemaRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateSchemaRequest.

        Key-value pairs associated with a resource.

        :param tags: The tags of this CreateSchemaRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this CreateSchemaRequest.

        The type of schema.

        :return: The type of this CreateSchemaRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateSchemaRequest.

        The type of schema.

        :param type: The type of this CreateSchemaRequest.
        :type type: str
        """
        allowed_values = ["OpenApi3", "JSONSchemaDraft4"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
