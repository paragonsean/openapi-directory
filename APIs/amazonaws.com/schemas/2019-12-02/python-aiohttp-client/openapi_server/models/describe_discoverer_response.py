# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.discoverer_state import DiscovererState
from openapi_server import util


class DescribeDiscovererResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, discoverer_arn: str=None, discoverer_id: str=None, source_arn: str=None, state: DiscovererState=None, cross_account: bool=None, tags: Dict=None):
        """DescribeDiscovererResponse - a model defined in OpenAPI

        :param description: The description of this DescribeDiscovererResponse.
        :param discoverer_arn: The discoverer_arn of this DescribeDiscovererResponse.
        :param discoverer_id: The discoverer_id of this DescribeDiscovererResponse.
        :param source_arn: The source_arn of this DescribeDiscovererResponse.
        :param state: The state of this DescribeDiscovererResponse.
        :param cross_account: The cross_account of this DescribeDiscovererResponse.
        :param tags: The tags of this DescribeDiscovererResponse.
        """
        self.openapi_types = {
            'description': str,
            'discoverer_arn': str,
            'discoverer_id': str,
            'source_arn': str,
            'state': DiscovererState,
            'cross_account': bool,
            'tags': Dict
        }

        self.attribute_map = {
            'description': 'Description',
            'discoverer_arn': 'DiscovererArn',
            'discoverer_id': 'DiscovererId',
            'source_arn': 'SourceArn',
            'state': 'State',
            'cross_account': 'CrossAccount',
            'tags': 'Tags'
        }

        self._description = description
        self._discoverer_arn = discoverer_arn
        self._discoverer_id = discoverer_id
        self._source_arn = source_arn
        self._state = state
        self._cross_account = cross_account
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeDiscovererResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeDiscovererResponse of this DescribeDiscovererResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this DescribeDiscovererResponse.


        :return: The description of this DescribeDiscovererResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DescribeDiscovererResponse.


        :param description: The description of this DescribeDiscovererResponse.
        :type description: str
        """

        self._description = description

    @property
    def discoverer_arn(self):
        """Gets the discoverer_arn of this DescribeDiscovererResponse.


        :return: The discoverer_arn of this DescribeDiscovererResponse.
        :rtype: str
        """
        return self._discoverer_arn

    @discoverer_arn.setter
    def discoverer_arn(self, discoverer_arn):
        """Sets the discoverer_arn of this DescribeDiscovererResponse.


        :param discoverer_arn: The discoverer_arn of this DescribeDiscovererResponse.
        :type discoverer_arn: str
        """

        self._discoverer_arn = discoverer_arn

    @property
    def discoverer_id(self):
        """Gets the discoverer_id of this DescribeDiscovererResponse.


        :return: The discoverer_id of this DescribeDiscovererResponse.
        :rtype: str
        """
        return self._discoverer_id

    @discoverer_id.setter
    def discoverer_id(self, discoverer_id):
        """Sets the discoverer_id of this DescribeDiscovererResponse.


        :param discoverer_id: The discoverer_id of this DescribeDiscovererResponse.
        :type discoverer_id: str
        """

        self._discoverer_id = discoverer_id

    @property
    def source_arn(self):
        """Gets the source_arn of this DescribeDiscovererResponse.


        :return: The source_arn of this DescribeDiscovererResponse.
        :rtype: str
        """
        return self._source_arn

    @source_arn.setter
    def source_arn(self, source_arn):
        """Sets the source_arn of this DescribeDiscovererResponse.


        :param source_arn: The source_arn of this DescribeDiscovererResponse.
        :type source_arn: str
        """

        self._source_arn = source_arn

    @property
    def state(self):
        """Gets the state of this DescribeDiscovererResponse.


        :return: The state of this DescribeDiscovererResponse.
        :rtype: DiscovererState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DescribeDiscovererResponse.


        :param state: The state of this DescribeDiscovererResponse.
        :type state: DiscovererState
        """

        self._state = state

    @property
    def cross_account(self):
        """Gets the cross_account of this DescribeDiscovererResponse.


        :return: The cross_account of this DescribeDiscovererResponse.
        :rtype: bool
        """
        return self._cross_account

    @cross_account.setter
    def cross_account(self, cross_account):
        """Sets the cross_account of this DescribeDiscovererResponse.


        :param cross_account: The cross_account of this DescribeDiscovererResponse.
        :type cross_account: bool
        """

        self._cross_account = cross_account

    @property
    def tags(self):
        """Gets the tags of this DescribeDiscovererResponse.


        :return: The tags of this DescribeDiscovererResponse.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DescribeDiscovererResponse.


        :param tags: The tags of this DescribeDiscovererResponse.
        :type tags: Dict
        """

        self._tags = tags
