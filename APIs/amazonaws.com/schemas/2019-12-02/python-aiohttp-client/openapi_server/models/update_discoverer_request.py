# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateDiscovererRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, cross_account: bool=None):
        """UpdateDiscovererRequest - a model defined in OpenAPI

        :param description: The description of this UpdateDiscovererRequest.
        :param cross_account: The cross_account of this UpdateDiscovererRequest.
        """
        self.openapi_types = {
            'description': str,
            'cross_account': bool
        }

        self.attribute_map = {
            'description': 'Description',
            'cross_account': 'CrossAccount'
        }

        self._description = description
        self._cross_account = cross_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateDiscovererRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateDiscoverer_request of this UpdateDiscovererRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UpdateDiscovererRequest.

        The description of the discoverer to update.

        :return: The description of this UpdateDiscovererRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateDiscovererRequest.

        The description of the discoverer to update.

        :param description: The description of this UpdateDiscovererRequest.
        :type description: str
        """
        if description is not None and len(description) > 256:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `256`")
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")

        self._description = description

    @property
    def cross_account(self):
        """Gets the cross_account of this UpdateDiscovererRequest.

        Support discovery of schemas in events sent to the bus from another account. (default: true)

        :return: The cross_account of this UpdateDiscovererRequest.
        :rtype: bool
        """
        return self._cross_account

    @cross_account.setter
    def cross_account(self, cross_account):
        """Sets the cross_account of this UpdateDiscovererRequest.

        Support discovery of schemas in events sent to the bus from another account. (default: true)

        :param cross_account: The cross_account of this UpdateDiscovererRequest.
        :type cross_account: bool
        """

        self._cross_account = cross_account
