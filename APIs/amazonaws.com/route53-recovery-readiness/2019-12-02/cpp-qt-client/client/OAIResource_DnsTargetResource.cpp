/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResource_DnsTargetResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResource_DnsTargetResource::OAIResource_DnsTargetResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResource_DnsTargetResource::OAIResource_DnsTargetResource() {
    this->initializeModel();
}

OAIResource_DnsTargetResource::~OAIResource_DnsTargetResource() {}

void OAIResource_DnsTargetResource::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_hosted_zone_arn_isSet = false;
    m_hosted_zone_arn_isValid = false;

    m_record_set_id_isSet = false;
    m_record_set_id_isValid = false;

    m_record_type_isSet = false;
    m_record_type_isValid = false;

    m_target_resource_isSet = false;
    m_target_resource_isValid = false;
}

void OAIResource_DnsTargetResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResource_DnsTargetResource::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_hosted_zone_arn_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_arn, json[QString("HostedZoneArn")]);
    m_hosted_zone_arn_isSet = !json[QString("HostedZoneArn")].isNull() && m_hosted_zone_arn_isValid;

    m_record_set_id_isValid = ::OpenAPI::fromJsonValue(m_record_set_id, json[QString("RecordSetId")]);
    m_record_set_id_isSet = !json[QString("RecordSetId")].isNull() && m_record_set_id_isValid;

    m_record_type_isValid = ::OpenAPI::fromJsonValue(m_record_type, json[QString("RecordType")]);
    m_record_type_isSet = !json[QString("RecordType")].isNull() && m_record_type_isValid;

    m_target_resource_isValid = ::OpenAPI::fromJsonValue(m_target_resource, json[QString("TargetResource")]);
    m_target_resource_isSet = !json[QString("TargetResource")].isNull() && m_target_resource_isValid;
}

QString OAIResource_DnsTargetResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResource_DnsTargetResource::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_hosted_zone_arn_isSet) {
        obj.insert(QString("HostedZoneArn"), ::OpenAPI::toJsonValue(m_hosted_zone_arn));
    }
    if (m_record_set_id_isSet) {
        obj.insert(QString("RecordSetId"), ::OpenAPI::toJsonValue(m_record_set_id));
    }
    if (m_record_type_isSet) {
        obj.insert(QString("RecordType"), ::OpenAPI::toJsonValue(m_record_type));
    }
    if (m_target_resource.isSet()) {
        obj.insert(QString("TargetResource"), ::OpenAPI::toJsonValue(m_target_resource));
    }
    return obj;
}

QString OAIResource_DnsTargetResource::getDomainName() const {
    return m_domain_name;
}
void OAIResource_DnsTargetResource::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIResource_DnsTargetResource::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIResource_DnsTargetResource::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIResource_DnsTargetResource::getHostedZoneArn() const {
    return m_hosted_zone_arn;
}
void OAIResource_DnsTargetResource::setHostedZoneArn(const QString &hosted_zone_arn) {
    m_hosted_zone_arn = hosted_zone_arn;
    m_hosted_zone_arn_isSet = true;
}

bool OAIResource_DnsTargetResource::is_hosted_zone_arn_Set() const{
    return m_hosted_zone_arn_isSet;
}

bool OAIResource_DnsTargetResource::is_hosted_zone_arn_Valid() const{
    return m_hosted_zone_arn_isValid;
}

QString OAIResource_DnsTargetResource::getRecordSetId() const {
    return m_record_set_id;
}
void OAIResource_DnsTargetResource::setRecordSetId(const QString &record_set_id) {
    m_record_set_id = record_set_id;
    m_record_set_id_isSet = true;
}

bool OAIResource_DnsTargetResource::is_record_set_id_Set() const{
    return m_record_set_id_isSet;
}

bool OAIResource_DnsTargetResource::is_record_set_id_Valid() const{
    return m_record_set_id_isValid;
}

QString OAIResource_DnsTargetResource::getRecordType() const {
    return m_record_type;
}
void OAIResource_DnsTargetResource::setRecordType(const QString &record_type) {
    m_record_type = record_type;
    m_record_type_isSet = true;
}

bool OAIResource_DnsTargetResource::is_record_type_Set() const{
    return m_record_type_isSet;
}

bool OAIResource_DnsTargetResource::is_record_type_Valid() const{
    return m_record_type_isValid;
}

OAIDNSTargetResource_TargetResource OAIResource_DnsTargetResource::getTargetResource() const {
    return m_target_resource;
}
void OAIResource_DnsTargetResource::setTargetResource(const OAIDNSTargetResource_TargetResource &target_resource) {
    m_target_resource = target_resource;
    m_target_resource_isSet = true;
}

bool OAIResource_DnsTargetResource::is_target_resource_Set() const{
    return m_target_resource_isSet;
}

bool OAIResource_DnsTargetResource::is_target_resource_Valid() const{
    return m_target_resource_isValid;
}

bool OAIResource_DnsTargetResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_zone_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResource_DnsTargetResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
