/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateResourceSet_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateResourceSet_request::OAIUpdateResourceSet_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateResourceSet_request::OAIUpdateResourceSet_request() {
    this->initializeModel();
}

OAIUpdateResourceSet_request::~OAIUpdateResourceSet_request() {}

void OAIUpdateResourceSet_request::initializeModel() {

    m_resource_set_type_isSet = false;
    m_resource_set_type_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;
}

void OAIUpdateResourceSet_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateResourceSet_request::fromJsonObject(QJsonObject json) {

    m_resource_set_type_isValid = ::OpenAPI::fromJsonValue(m_resource_set_type, json[QString("resourceSetType")]);
    m_resource_set_type_isSet = !json[QString("resourceSetType")].isNull() && m_resource_set_type_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;
}

QString OAIUpdateResourceSet_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateResourceSet_request::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_set_type_isSet) {
        obj.insert(QString("resourceSetType"), ::OpenAPI::toJsonValue(m_resource_set_type));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    return obj;
}

QString OAIUpdateResourceSet_request::getResourceSetType() const {
    return m_resource_set_type;
}
void OAIUpdateResourceSet_request::setResourceSetType(const QString &resource_set_type) {
    m_resource_set_type = resource_set_type;
    m_resource_set_type_isSet = true;
}

bool OAIUpdateResourceSet_request::is_resource_set_type_Set() const{
    return m_resource_set_type_isSet;
}

bool OAIUpdateResourceSet_request::is_resource_set_type_Valid() const{
    return m_resource_set_type_isValid;
}

QList<OAIResource> OAIUpdateResourceSet_request::getResources() const {
    return m_resources;
}
void OAIUpdateResourceSet_request::setResources(const QList<OAIResource> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIUpdateResourceSet_request::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIUpdateResourceSet_request::is_resources_Valid() const{
    return m_resources_isValid;
}

bool OAIUpdateResourceSet_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_set_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateResourceSet_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_set_type_isValid && m_resources_isValid && true;
}

} // namespace OpenAPI
