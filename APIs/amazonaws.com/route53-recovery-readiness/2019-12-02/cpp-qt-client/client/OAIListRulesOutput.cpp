/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListRulesOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListRulesOutput::OAIListRulesOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListRulesOutput::OAIListRulesOutput() {
    this->initializeModel();
}

OAIListRulesOutput::~OAIListRulesOutput() {}

void OAIListRulesOutput::initializeModel() {

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_rule_description_isSet = false;
    m_rule_description_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;
}

void OAIListRulesOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListRulesOutput::fromJsonObject(QJsonObject json) {

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("ResourceType")]);
    m_resource_type_isSet = !json[QString("ResourceType")].isNull() && m_resource_type_isValid;

    m_rule_description_isValid = ::OpenAPI::fromJsonValue(m_rule_description, json[QString("RuleDescription")]);
    m_rule_description_isSet = !json[QString("RuleDescription")].isNull() && m_rule_description_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("RuleId")]);
    m_rule_id_isSet = !json[QString("RuleId")].isNull() && m_rule_id_isValid;
}

QString OAIListRulesOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListRulesOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_type_isSet) {
        obj.insert(QString("ResourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_rule_description_isSet) {
        obj.insert(QString("RuleDescription"), ::OpenAPI::toJsonValue(m_rule_description));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("RuleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    return obj;
}

QString OAIListRulesOutput::getResourceType() const {
    return m_resource_type;
}
void OAIListRulesOutput::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIListRulesOutput::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIListRulesOutput::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAIListRulesOutput::getRuleDescription() const {
    return m_rule_description;
}
void OAIListRulesOutput::setRuleDescription(const QString &rule_description) {
    m_rule_description = rule_description;
    m_rule_description_isSet = true;
}

bool OAIListRulesOutput::is_rule_description_Set() const{
    return m_rule_description_isSet;
}

bool OAIListRulesOutput::is_rule_description_Valid() const{
    return m_rule_description_isValid;
}

QString OAIListRulesOutput::getRuleId() const {
    return m_rule_id;
}
void OAIListRulesOutput::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIListRulesOutput::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIListRulesOutput::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

bool OAIListRulesOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListRulesOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resource_type_isValid && m_rule_description_isValid && m_rule_id_isValid && true;
}

} // namespace OpenAPI
