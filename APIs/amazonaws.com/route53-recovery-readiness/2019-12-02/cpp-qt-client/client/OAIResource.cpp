/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResource::OAIResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResource::OAIResource() {
    this->initializeModel();
}

OAIResource::~OAIResource() {}

void OAIResource::initializeModel() {

    m_component_id_isSet = false;
    m_component_id_isValid = false;

    m_dns_target_resource_isSet = false;
    m_dns_target_resource_isValid = false;

    m_readiness_scopes_isSet = false;
    m_readiness_scopes_isValid = false;

    m_resource_arn_isSet = false;
    m_resource_arn_isValid = false;
}

void OAIResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResource::fromJsonObject(QJsonObject json) {

    m_component_id_isValid = ::OpenAPI::fromJsonValue(m_component_id, json[QString("ComponentId")]);
    m_component_id_isSet = !json[QString("ComponentId")].isNull() && m_component_id_isValid;

    m_dns_target_resource_isValid = ::OpenAPI::fromJsonValue(m_dns_target_resource, json[QString("DnsTargetResource")]);
    m_dns_target_resource_isSet = !json[QString("DnsTargetResource")].isNull() && m_dns_target_resource_isValid;

    m_readiness_scopes_isValid = ::OpenAPI::fromJsonValue(m_readiness_scopes, json[QString("ReadinessScopes")]);
    m_readiness_scopes_isSet = !json[QString("ReadinessScopes")].isNull() && m_readiness_scopes_isValid;

    m_resource_arn_isValid = ::OpenAPI::fromJsonValue(m_resource_arn, json[QString("ResourceArn")]);
    m_resource_arn_isSet = !json[QString("ResourceArn")].isNull() && m_resource_arn_isValid;
}

QString OAIResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResource::asJsonObject() const {
    QJsonObject obj;
    if (m_component_id_isSet) {
        obj.insert(QString("ComponentId"), ::OpenAPI::toJsonValue(m_component_id));
    }
    if (m_dns_target_resource.isSet()) {
        obj.insert(QString("DnsTargetResource"), ::OpenAPI::toJsonValue(m_dns_target_resource));
    }
    if (m_readiness_scopes.isSet()) {
        obj.insert(QString("ReadinessScopes"), ::OpenAPI::toJsonValue(m_readiness_scopes));
    }
    if (m_resource_arn_isSet) {
        obj.insert(QString("ResourceArn"), ::OpenAPI::toJsonValue(m_resource_arn));
    }
    return obj;
}

QString OAIResource::getComponentId() const {
    return m_component_id;
}
void OAIResource::setComponentId(const QString &component_id) {
    m_component_id = component_id;
    m_component_id_isSet = true;
}

bool OAIResource::is_component_id_Set() const{
    return m_component_id_isSet;
}

bool OAIResource::is_component_id_Valid() const{
    return m_component_id_isValid;
}

OAIResource_DnsTargetResource OAIResource::getDnsTargetResource() const {
    return m_dns_target_resource;
}
void OAIResource::setDnsTargetResource(const OAIResource_DnsTargetResource &dns_target_resource) {
    m_dns_target_resource = dns_target_resource;
    m_dns_target_resource_isSet = true;
}

bool OAIResource::is_dns_target_resource_Set() const{
    return m_dns_target_resource_isSet;
}

bool OAIResource::is_dns_target_resource_Valid() const{
    return m_dns_target_resource_isValid;
}

QList OAIResource::getReadinessScopes() const {
    return m_readiness_scopes;
}
void OAIResource::setReadinessScopes(const QList &readiness_scopes) {
    m_readiness_scopes = readiness_scopes;
    m_readiness_scopes_isSet = true;
}

bool OAIResource::is_readiness_scopes_Set() const{
    return m_readiness_scopes_isSet;
}

bool OAIResource::is_readiness_scopes_Valid() const{
    return m_readiness_scopes_isValid;
}

QString OAIResource::getResourceArn() const {
    return m_resource_arn;
}
void OAIResource::setResourceArn(const QString &resource_arn) {
    m_resource_arn = resource_arn;
    m_resource_arn_isSet = true;
}

bool OAIResource::is_resource_arn_Set() const{
    return m_resource_arn_isSet;
}

bool OAIResource::is_resource_arn_Valid() const{
    return m_resource_arn_isValid;
}

bool OAIResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_target_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_readiness_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
