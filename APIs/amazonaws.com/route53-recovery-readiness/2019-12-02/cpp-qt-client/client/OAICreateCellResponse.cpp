/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCellResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCellResponse::OAICreateCellResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCellResponse::OAICreateCellResponse() {
    this->initializeModel();
}

OAICreateCellResponse::~OAICreateCellResponse() {}

void OAICreateCellResponse::initializeModel() {

    m_cell_arn_isSet = false;
    m_cell_arn_isValid = false;

    m_cell_name_isSet = false;
    m_cell_name_isValid = false;

    m_cells_isSet = false;
    m_cells_isValid = false;

    m_parent_readiness_scopes_isSet = false;
    m_parent_readiness_scopes_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAICreateCellResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCellResponse::fromJsonObject(QJsonObject json) {

    m_cell_arn_isValid = ::OpenAPI::fromJsonValue(m_cell_arn, json[QString("CellArn")]);
    m_cell_arn_isSet = !json[QString("CellArn")].isNull() && m_cell_arn_isValid;

    m_cell_name_isValid = ::OpenAPI::fromJsonValue(m_cell_name, json[QString("CellName")]);
    m_cell_name_isSet = !json[QString("CellName")].isNull() && m_cell_name_isValid;

    m_cells_isValid = ::OpenAPI::fromJsonValue(m_cells, json[QString("Cells")]);
    m_cells_isSet = !json[QString("Cells")].isNull() && m_cells_isValid;

    m_parent_readiness_scopes_isValid = ::OpenAPI::fromJsonValue(m_parent_readiness_scopes, json[QString("ParentReadinessScopes")]);
    m_parent_readiness_scopes_isSet = !json[QString("ParentReadinessScopes")].isNull() && m_parent_readiness_scopes_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAICreateCellResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCellResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cell_arn_isSet) {
        obj.insert(QString("CellArn"), ::OpenAPI::toJsonValue(m_cell_arn));
    }
    if (m_cell_name_isSet) {
        obj.insert(QString("CellName"), ::OpenAPI::toJsonValue(m_cell_name));
    }
    if (m_cells.isSet()) {
        obj.insert(QString("Cells"), ::OpenAPI::toJsonValue(m_cells));
    }
    if (m_parent_readiness_scopes.isSet()) {
        obj.insert(QString("ParentReadinessScopes"), ::OpenAPI::toJsonValue(m_parent_readiness_scopes));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAICreateCellResponse::getCellArn() const {
    return m_cell_arn;
}
void OAICreateCellResponse::setCellArn(const QString &cell_arn) {
    m_cell_arn = cell_arn;
    m_cell_arn_isSet = true;
}

bool OAICreateCellResponse::is_cell_arn_Set() const{
    return m_cell_arn_isSet;
}

bool OAICreateCellResponse::is_cell_arn_Valid() const{
    return m_cell_arn_isValid;
}

QString OAICreateCellResponse::getCellName() const {
    return m_cell_name;
}
void OAICreateCellResponse::setCellName(const QString &cell_name) {
    m_cell_name = cell_name;
    m_cell_name_isSet = true;
}

bool OAICreateCellResponse::is_cell_name_Set() const{
    return m_cell_name_isSet;
}

bool OAICreateCellResponse::is_cell_name_Valid() const{
    return m_cell_name_isValid;
}

QList OAICreateCellResponse::getCells() const {
    return m_cells;
}
void OAICreateCellResponse::setCells(const QList &cells) {
    m_cells = cells;
    m_cells_isSet = true;
}

bool OAICreateCellResponse::is_cells_Set() const{
    return m_cells_isSet;
}

bool OAICreateCellResponse::is_cells_Valid() const{
    return m_cells_isValid;
}

QList OAICreateCellResponse::getParentReadinessScopes() const {
    return m_parent_readiness_scopes;
}
void OAICreateCellResponse::setParentReadinessScopes(const QList &parent_readiness_scopes) {
    m_parent_readiness_scopes = parent_readiness_scopes;
    m_parent_readiness_scopes_isSet = true;
}

bool OAICreateCellResponse::is_parent_readiness_scopes_Set() const{
    return m_parent_readiness_scopes_isSet;
}

bool OAICreateCellResponse::is_parent_readiness_scopes_Valid() const{
    return m_parent_readiness_scopes_isValid;
}

QMap OAICreateCellResponse::getTags() const {
    return m_tags;
}
void OAICreateCellResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateCellResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateCellResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAICreateCellResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cell_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cell_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cells.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_readiness_scopes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCellResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
