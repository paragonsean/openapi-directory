/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIR53ResourceRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIR53ResourceRecord::OAIR53ResourceRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIR53ResourceRecord::OAIR53ResourceRecord() {
    this->initializeModel();
}

OAIR53ResourceRecord::~OAIR53ResourceRecord() {}

void OAIR53ResourceRecord::initializeModel() {

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_record_set_id_isSet = false;
    m_record_set_id_isValid = false;
}

void OAIR53ResourceRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIR53ResourceRecord::fromJsonObject(QJsonObject json) {

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_record_set_id_isValid = ::OpenAPI::fromJsonValue(m_record_set_id, json[QString("RecordSetId")]);
    m_record_set_id_isSet = !json[QString("RecordSetId")].isNull() && m_record_set_id_isValid;
}

QString OAIR53ResourceRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIR53ResourceRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_record_set_id_isSet) {
        obj.insert(QString("RecordSetId"), ::OpenAPI::toJsonValue(m_record_set_id));
    }
    return obj;
}

QString OAIR53ResourceRecord::getDomainName() const {
    return m_domain_name;
}
void OAIR53ResourceRecord::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIR53ResourceRecord::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIR53ResourceRecord::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QString OAIR53ResourceRecord::getRecordSetId() const {
    return m_record_set_id;
}
void OAIR53ResourceRecord::setRecordSetId(const QString &record_set_id) {
    m_record_set_id = record_set_id;
    m_record_set_id_isSet = true;
}

bool OAIR53ResourceRecord::is_record_set_id_Set() const{
    return m_record_set_id_isSet;
}

bool OAIR53ResourceRecord::is_record_set_id_Valid() const{
    return m_record_set_id_isValid;
}

bool OAIR53ResourceRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIR53ResourceRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
