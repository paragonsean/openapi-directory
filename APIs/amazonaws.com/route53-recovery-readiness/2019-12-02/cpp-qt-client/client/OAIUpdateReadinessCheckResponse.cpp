/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateReadinessCheckResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateReadinessCheckResponse::OAIUpdateReadinessCheckResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateReadinessCheckResponse::OAIUpdateReadinessCheckResponse() {
    this->initializeModel();
}

OAIUpdateReadinessCheckResponse::~OAIUpdateReadinessCheckResponse() {}

void OAIUpdateReadinessCheckResponse::initializeModel() {

    m_readiness_check_arn_isSet = false;
    m_readiness_check_arn_isValid = false;

    m_readiness_check_name_isSet = false;
    m_readiness_check_name_isValid = false;

    m_resource_set_isSet = false;
    m_resource_set_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIUpdateReadinessCheckResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateReadinessCheckResponse::fromJsonObject(QJsonObject json) {

    m_readiness_check_arn_isValid = ::OpenAPI::fromJsonValue(m_readiness_check_arn, json[QString("ReadinessCheckArn")]);
    m_readiness_check_arn_isSet = !json[QString("ReadinessCheckArn")].isNull() && m_readiness_check_arn_isValid;

    m_readiness_check_name_isValid = ::OpenAPI::fromJsonValue(m_readiness_check_name, json[QString("ReadinessCheckName")]);
    m_readiness_check_name_isSet = !json[QString("ReadinessCheckName")].isNull() && m_readiness_check_name_isValid;

    m_resource_set_isValid = ::OpenAPI::fromJsonValue(m_resource_set, json[QString("ResourceSet")]);
    m_resource_set_isSet = !json[QString("ResourceSet")].isNull() && m_resource_set_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIUpdateReadinessCheckResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateReadinessCheckResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_readiness_check_arn_isSet) {
        obj.insert(QString("ReadinessCheckArn"), ::OpenAPI::toJsonValue(m_readiness_check_arn));
    }
    if (m_readiness_check_name_isSet) {
        obj.insert(QString("ReadinessCheckName"), ::OpenAPI::toJsonValue(m_readiness_check_name));
    }
    if (m_resource_set_isSet) {
        obj.insert(QString("ResourceSet"), ::OpenAPI::toJsonValue(m_resource_set));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIUpdateReadinessCheckResponse::getReadinessCheckArn() const {
    return m_readiness_check_arn;
}
void OAIUpdateReadinessCheckResponse::setReadinessCheckArn(const QString &readiness_check_arn) {
    m_readiness_check_arn = readiness_check_arn;
    m_readiness_check_arn_isSet = true;
}

bool OAIUpdateReadinessCheckResponse::is_readiness_check_arn_Set() const{
    return m_readiness_check_arn_isSet;
}

bool OAIUpdateReadinessCheckResponse::is_readiness_check_arn_Valid() const{
    return m_readiness_check_arn_isValid;
}

QString OAIUpdateReadinessCheckResponse::getReadinessCheckName() const {
    return m_readiness_check_name;
}
void OAIUpdateReadinessCheckResponse::setReadinessCheckName(const QString &readiness_check_name) {
    m_readiness_check_name = readiness_check_name;
    m_readiness_check_name_isSet = true;
}

bool OAIUpdateReadinessCheckResponse::is_readiness_check_name_Set() const{
    return m_readiness_check_name_isSet;
}

bool OAIUpdateReadinessCheckResponse::is_readiness_check_name_Valid() const{
    return m_readiness_check_name_isValid;
}

QString OAIUpdateReadinessCheckResponse::getResourceSet() const {
    return m_resource_set;
}
void OAIUpdateReadinessCheckResponse::setResourceSet(const QString &resource_set) {
    m_resource_set = resource_set;
    m_resource_set_isSet = true;
}

bool OAIUpdateReadinessCheckResponse::is_resource_set_Set() const{
    return m_resource_set_isSet;
}

bool OAIUpdateReadinessCheckResponse::is_resource_set_Valid() const{
    return m_resource_set_isValid;
}

QMap OAIUpdateReadinessCheckResponse::getTags() const {
    return m_tags;
}
void OAIUpdateReadinessCheckResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIUpdateReadinessCheckResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIUpdateReadinessCheckResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIUpdateReadinessCheckResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_readiness_check_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readiness_check_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateReadinessCheckResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
