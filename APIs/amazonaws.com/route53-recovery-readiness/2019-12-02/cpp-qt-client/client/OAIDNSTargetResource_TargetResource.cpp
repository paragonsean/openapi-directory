/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDNSTargetResource_TargetResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDNSTargetResource_TargetResource::OAIDNSTargetResource_TargetResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDNSTargetResource_TargetResource::OAIDNSTargetResource_TargetResource() {
    this->initializeModel();
}

OAIDNSTargetResource_TargetResource::~OAIDNSTargetResource_TargetResource() {}

void OAIDNSTargetResource_TargetResource::initializeModel() {

    m_nlb_resource_isSet = false;
    m_nlb_resource_isValid = false;

    m_r53_resource_isSet = false;
    m_r53_resource_isValid = false;
}

void OAIDNSTargetResource_TargetResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDNSTargetResource_TargetResource::fromJsonObject(QJsonObject json) {

    m_nlb_resource_isValid = ::OpenAPI::fromJsonValue(m_nlb_resource, json[QString("NLBResource")]);
    m_nlb_resource_isSet = !json[QString("NLBResource")].isNull() && m_nlb_resource_isValid;

    m_r53_resource_isValid = ::OpenAPI::fromJsonValue(m_r53_resource, json[QString("R53Resource")]);
    m_r53_resource_isSet = !json[QString("R53Resource")].isNull() && m_r53_resource_isValid;
}

QString OAIDNSTargetResource_TargetResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDNSTargetResource_TargetResource::asJsonObject() const {
    QJsonObject obj;
    if (m_nlb_resource.isSet()) {
        obj.insert(QString("NLBResource"), ::OpenAPI::toJsonValue(m_nlb_resource));
    }
    if (m_r53_resource.isSet()) {
        obj.insert(QString("R53Resource"), ::OpenAPI::toJsonValue(m_r53_resource));
    }
    return obj;
}

OAITargetResource_NLBResource OAIDNSTargetResource_TargetResource::getNlbResource() const {
    return m_nlb_resource;
}
void OAIDNSTargetResource_TargetResource::setNlbResource(const OAITargetResource_NLBResource &nlb_resource) {
    m_nlb_resource = nlb_resource;
    m_nlb_resource_isSet = true;
}

bool OAIDNSTargetResource_TargetResource::is_nlb_resource_Set() const{
    return m_nlb_resource_isSet;
}

bool OAIDNSTargetResource_TargetResource::is_nlb_resource_Valid() const{
    return m_nlb_resource_isValid;
}

OAITargetResource_R53Resource OAIDNSTargetResource_TargetResource::getR53Resource() const {
    return m_r53_resource;
}
void OAIDNSTargetResource_TargetResource::setR53Resource(const OAITargetResource_R53Resource &r53_resource) {
    m_r53_resource = r53_resource;
    m_r53_resource_isSet = true;
}

bool OAIDNSTargetResource_TargetResource::is_r53_resource_Set() const{
    return m_r53_resource_isSet;
}

bool OAIDNSTargetResource_TargetResource::is_r53_resource_Valid() const{
    return m_r53_resource_isValid;
}

bool OAIDNSTargetResource_TargetResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nlb_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_r53_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDNSTargetResource_TargetResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
