# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCellRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_name: str=None, cells: List[str]=None, tags: Dict[str, str]=None):
        """CreateCellRequest - a model defined in OpenAPI

        :param cell_name: The cell_name of this CreateCellRequest.
        :param cells: The cells of this CreateCellRequest.
        :param tags: The tags of this CreateCellRequest.
        """
        self.openapi_types = {
            'cell_name': str,
            'cells': List[str],
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'cell_name': 'cellName',
            'cells': 'cells',
            'tags': 'tags'
        }

        self._cell_name = cell_name
        self._cells = cells
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCellRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCell_request of this CreateCellRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_name(self):
        """Gets the cell_name of this CreateCellRequest.

        The name of the cell to create.

        :return: The cell_name of this CreateCellRequest.
        :rtype: str
        """
        return self._cell_name

    @cell_name.setter
    def cell_name(self, cell_name):
        """Sets the cell_name of this CreateCellRequest.

        The name of the cell to create.

        :param cell_name: The cell_name of this CreateCellRequest.
        :type cell_name: str
        """
        if cell_name is None:
            raise ValueError("Invalid value for `cell_name`, must not be `None`")

        self._cell_name = cell_name

    @property
    def cells(self):
        """Gets the cells of this CreateCellRequest.

        A list of cell Amazon Resource Names (ARNs) contained within this cell, for use in nested cells. For example, Availability Zones within specific Amazon Web Services Regions.

        :return: The cells of this CreateCellRequest.
        :rtype: List[str]
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this CreateCellRequest.

        A list of cell Amazon Resource Names (ARNs) contained within this cell, for use in nested cells. For example, Availability Zones within specific Amazon Web Services Regions.

        :param cells: The cells of this CreateCellRequest.
        :type cells: List[str]
        """

        self._cells = cells

    @property
    def tags(self):
        """Gets the tags of this CreateCellRequest.

        A collection of tags associated with a resource.

        :return: The tags of this CreateCellRequest.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CreateCellRequest.

        A collection of tags associated with a resource.

        :param tags: The tags of this CreateCellRequest.
        :type tags: Dict[str, str]
        """

        self._tags = tags
