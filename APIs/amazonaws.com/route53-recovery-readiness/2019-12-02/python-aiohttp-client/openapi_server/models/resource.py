# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_dns_target_resource import ResourceDnsTargetResource
from openapi_server import util


class Resource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_id: str=None, dns_target_resource: ResourceDnsTargetResource=None, readiness_scopes: List=None, resource_arn: str=None):
        """Resource - a model defined in OpenAPI

        :param component_id: The component_id of this Resource.
        :param dns_target_resource: The dns_target_resource of this Resource.
        :param readiness_scopes: The readiness_scopes of this Resource.
        :param resource_arn: The resource_arn of this Resource.
        """
        self.openapi_types = {
            'component_id': str,
            'dns_target_resource': ResourceDnsTargetResource,
            'readiness_scopes': List,
            'resource_arn': str
        }

        self.attribute_map = {
            'component_id': 'ComponentId',
            'dns_target_resource': 'DnsTargetResource',
            'readiness_scopes': 'ReadinessScopes',
            'resource_arn': 'ResourceArn'
        }

        self._component_id = component_id
        self._dns_target_resource = dns_target_resource
        self._readiness_scopes = readiness_scopes
        self._resource_arn = resource_arn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resource of this Resource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_id(self):
        """Gets the component_id of this Resource.


        :return: The component_id of this Resource.
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this Resource.


        :param component_id: The component_id of this Resource.
        :type component_id: str
        """

        self._component_id = component_id

    @property
    def dns_target_resource(self):
        """Gets the dns_target_resource of this Resource.


        :return: The dns_target_resource of this Resource.
        :rtype: ResourceDnsTargetResource
        """
        return self._dns_target_resource

    @dns_target_resource.setter
    def dns_target_resource(self, dns_target_resource):
        """Sets the dns_target_resource of this Resource.


        :param dns_target_resource: The dns_target_resource of this Resource.
        :type dns_target_resource: ResourceDnsTargetResource
        """

        self._dns_target_resource = dns_target_resource

    @property
    def readiness_scopes(self):
        """Gets the readiness_scopes of this Resource.


        :return: The readiness_scopes of this Resource.
        :rtype: List
        """
        return self._readiness_scopes

    @readiness_scopes.setter
    def readiness_scopes(self, readiness_scopes):
        """Sets the readiness_scopes of this Resource.


        :param readiness_scopes: The readiness_scopes of this Resource.
        :type readiness_scopes: List
        """

        self._readiness_scopes = readiness_scopes

    @property
    def resource_arn(self):
        """Gets the resource_arn of this Resource.


        :return: The resource_arn of this Resource.
        :rtype: str
        """
        return self._resource_arn

    @resource_arn.setter
    def resource_arn(self, resource_arn):
        """Sets the resource_arn of this Resource.


        :param resource_arn: The resource_arn of this Resource.
        :type resource_arn: str
        """

        self._resource_arn = resource_arn
