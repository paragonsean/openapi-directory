# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.readiness import Readiness
from openapi_server import util


class RuleResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_checked_timestamp: datetime=None, messages: List=None, readiness: Readiness=None, rule_id: str=None):
        """RuleResult - a model defined in OpenAPI

        :param last_checked_timestamp: The last_checked_timestamp of this RuleResult.
        :param messages: The messages of this RuleResult.
        :param readiness: The readiness of this RuleResult.
        :param rule_id: The rule_id of this RuleResult.
        """
        self.openapi_types = {
            'last_checked_timestamp': datetime,
            'messages': List,
            'readiness': Readiness,
            'rule_id': str
        }

        self.attribute_map = {
            'last_checked_timestamp': 'LastCheckedTimestamp',
            'messages': 'Messages',
            'readiness': 'Readiness',
            'rule_id': 'RuleId'
        }

        self._last_checked_timestamp = last_checked_timestamp
        self._messages = messages
        self._readiness = readiness
        self._rule_id = rule_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleResult of this RuleResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_checked_timestamp(self):
        """Gets the last_checked_timestamp of this RuleResult.


        :return: The last_checked_timestamp of this RuleResult.
        :rtype: datetime
        """
        return self._last_checked_timestamp

    @last_checked_timestamp.setter
    def last_checked_timestamp(self, last_checked_timestamp):
        """Sets the last_checked_timestamp of this RuleResult.


        :param last_checked_timestamp: The last_checked_timestamp of this RuleResult.
        :type last_checked_timestamp: datetime
        """
        if last_checked_timestamp is None:
            raise ValueError("Invalid value for `last_checked_timestamp`, must not be `None`")

        self._last_checked_timestamp = last_checked_timestamp

    @property
    def messages(self):
        """Gets the messages of this RuleResult.


        :return: The messages of this RuleResult.
        :rtype: List
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this RuleResult.


        :param messages: The messages of this RuleResult.
        :type messages: List
        """
        if messages is None:
            raise ValueError("Invalid value for `messages`, must not be `None`")

        self._messages = messages

    @property
    def readiness(self):
        """Gets the readiness of this RuleResult.


        :return: The readiness of this RuleResult.
        :rtype: Readiness
        """
        return self._readiness

    @readiness.setter
    def readiness(self, readiness):
        """Sets the readiness of this RuleResult.


        :param readiness: The readiness of this RuleResult.
        :type readiness: Readiness
        """
        if readiness is None:
            raise ValueError("Invalid value for `readiness`, must not be `None`")

        self._readiness = readiness

    @property
    def rule_id(self):
        """Gets the rule_id of this RuleResult.


        :return: The rule_id of this RuleResult.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this RuleResult.


        :param rule_id: The rule_id of this RuleResult.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id
