# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CellOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cell_arn: str=None, cell_name: str=None, cells: List=None, parent_readiness_scopes: List=None, tags: Dict=None):
        """CellOutput - a model defined in OpenAPI

        :param cell_arn: The cell_arn of this CellOutput.
        :param cell_name: The cell_name of this CellOutput.
        :param cells: The cells of this CellOutput.
        :param parent_readiness_scopes: The parent_readiness_scopes of this CellOutput.
        :param tags: The tags of this CellOutput.
        """
        self.openapi_types = {
            'cell_arn': str,
            'cell_name': str,
            'cells': List,
            'parent_readiness_scopes': List,
            'tags': Dict
        }

        self.attribute_map = {
            'cell_arn': 'CellArn',
            'cell_name': 'CellName',
            'cells': 'Cells',
            'parent_readiness_scopes': 'ParentReadinessScopes',
            'tags': 'Tags'
        }

        self._cell_arn = cell_arn
        self._cell_name = cell_name
        self._cells = cells
        self._parent_readiness_scopes = parent_readiness_scopes
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CellOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CellOutput of this CellOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cell_arn(self):
        """Gets the cell_arn of this CellOutput.


        :return: The cell_arn of this CellOutput.
        :rtype: str
        """
        return self._cell_arn

    @cell_arn.setter
    def cell_arn(self, cell_arn):
        """Sets the cell_arn of this CellOutput.


        :param cell_arn: The cell_arn of this CellOutput.
        :type cell_arn: str
        """
        if cell_arn is None:
            raise ValueError("Invalid value for `cell_arn`, must not be `None`")

        self._cell_arn = cell_arn

    @property
    def cell_name(self):
        """Gets the cell_name of this CellOutput.


        :return: The cell_name of this CellOutput.
        :rtype: str
        """
        return self._cell_name

    @cell_name.setter
    def cell_name(self, cell_name):
        """Sets the cell_name of this CellOutput.


        :param cell_name: The cell_name of this CellOutput.
        :type cell_name: str
        """
        if cell_name is None:
            raise ValueError("Invalid value for `cell_name`, must not be `None`")

        self._cell_name = cell_name

    @property
    def cells(self):
        """Gets the cells of this CellOutput.


        :return: The cells of this CellOutput.
        :rtype: List
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this CellOutput.


        :param cells: The cells of this CellOutput.
        :type cells: List
        """
        if cells is None:
            raise ValueError("Invalid value for `cells`, must not be `None`")

        self._cells = cells

    @property
    def parent_readiness_scopes(self):
        """Gets the parent_readiness_scopes of this CellOutput.


        :return: The parent_readiness_scopes of this CellOutput.
        :rtype: List
        """
        return self._parent_readiness_scopes

    @parent_readiness_scopes.setter
    def parent_readiness_scopes(self, parent_readiness_scopes):
        """Sets the parent_readiness_scopes of this CellOutput.


        :param parent_readiness_scopes: The parent_readiness_scopes of this CellOutput.
        :type parent_readiness_scopes: List
        """
        if parent_readiness_scopes is None:
            raise ValueError("Invalid value for `parent_readiness_scopes`, must not be `None`")

        self._parent_readiness_scopes = parent_readiness_scopes

    @property
    def tags(self):
        """Gets the tags of this CellOutput.


        :return: The tags of this CellOutput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CellOutput.


        :param tags: The tags of this CellOutput.
        :type tags: Dict
        """

        self._tags = tags
