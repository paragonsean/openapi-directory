# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateReadinessCheckRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_set_name: str=None):
        """UpdateReadinessCheckRequest - a model defined in OpenAPI

        :param resource_set_name: The resource_set_name of this UpdateReadinessCheckRequest.
        """
        self.openapi_types = {
            'resource_set_name': str
        }

        self.attribute_map = {
            'resource_set_name': 'resourceSetName'
        }

        self._resource_set_name = resource_set_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateReadinessCheckRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateReadinessCheck_request of this UpdateReadinessCheckRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_set_name(self):
        """Gets the resource_set_name of this UpdateReadinessCheckRequest.

        The name of the resource set to be checked.

        :return: The resource_set_name of this UpdateReadinessCheckRequest.
        :rtype: str
        """
        return self._resource_set_name

    @resource_set_name.setter
    def resource_set_name(self, resource_set_name):
        """Sets the resource_set_name of this UpdateReadinessCheckRequest.

        The name of the resource set to be checked.

        :param resource_set_name: The resource_set_name of this UpdateReadinessCheckRequest.
        :type resource_set_name: str
        """
        if resource_set_name is None:
            raise ValueError("Invalid value for `resource_set_name`, must not be `None`")

        self._resource_set_name = resource_set_name
