# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RecoveryGroupOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cells: List=None, recovery_group_arn: str=None, recovery_group_name: str=None, tags: Dict=None):
        """RecoveryGroupOutput - a model defined in OpenAPI

        :param cells: The cells of this RecoveryGroupOutput.
        :param recovery_group_arn: The recovery_group_arn of this RecoveryGroupOutput.
        :param recovery_group_name: The recovery_group_name of this RecoveryGroupOutput.
        :param tags: The tags of this RecoveryGroupOutput.
        """
        self.openapi_types = {
            'cells': List,
            'recovery_group_arn': str,
            'recovery_group_name': str,
            'tags': Dict
        }

        self.attribute_map = {
            'cells': 'Cells',
            'recovery_group_arn': 'RecoveryGroupArn',
            'recovery_group_name': 'RecoveryGroupName',
            'tags': 'Tags'
        }

        self._cells = cells
        self._recovery_group_arn = recovery_group_arn
        self._recovery_group_name = recovery_group_name
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecoveryGroupOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecoveryGroupOutput of this RecoveryGroupOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cells(self):
        """Gets the cells of this RecoveryGroupOutput.


        :return: The cells of this RecoveryGroupOutput.
        :rtype: List
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this RecoveryGroupOutput.


        :param cells: The cells of this RecoveryGroupOutput.
        :type cells: List
        """
        if cells is None:
            raise ValueError("Invalid value for `cells`, must not be `None`")

        self._cells = cells

    @property
    def recovery_group_arn(self):
        """Gets the recovery_group_arn of this RecoveryGroupOutput.


        :return: The recovery_group_arn of this RecoveryGroupOutput.
        :rtype: str
        """
        return self._recovery_group_arn

    @recovery_group_arn.setter
    def recovery_group_arn(self, recovery_group_arn):
        """Sets the recovery_group_arn of this RecoveryGroupOutput.


        :param recovery_group_arn: The recovery_group_arn of this RecoveryGroupOutput.
        :type recovery_group_arn: str
        """
        if recovery_group_arn is None:
            raise ValueError("Invalid value for `recovery_group_arn`, must not be `None`")

        self._recovery_group_arn = recovery_group_arn

    @property
    def recovery_group_name(self):
        """Gets the recovery_group_name of this RecoveryGroupOutput.


        :return: The recovery_group_name of this RecoveryGroupOutput.
        :rtype: str
        """
        return self._recovery_group_name

    @recovery_group_name.setter
    def recovery_group_name(self, recovery_group_name):
        """Sets the recovery_group_name of this RecoveryGroupOutput.


        :param recovery_group_name: The recovery_group_name of this RecoveryGroupOutput.
        :type recovery_group_name: str
        """
        if recovery_group_name is None:
            raise ValueError("Invalid value for `recovery_group_name`, must not be `None`")

        self._recovery_group_name = recovery_group_name

    @property
    def tags(self):
        """Gets the tags of this RecoveryGroupOutput.


        :return: The tags of this RecoveryGroupOutput.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this RecoveryGroupOutput.


        :param tags: The tags of this RecoveryGroupOutput.
        :type tags: Dict
        """

        self._tags = tags
