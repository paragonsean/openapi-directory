# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListRulesOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, resource_type: str=None, rule_description: str=None, rule_id: str=None):
        """ListRulesOutput - a model defined in OpenAPI

        :param resource_type: The resource_type of this ListRulesOutput.
        :param rule_description: The rule_description of this ListRulesOutput.
        :param rule_id: The rule_id of this ListRulesOutput.
        """
        self.openapi_types = {
            'resource_type': str,
            'rule_description': str,
            'rule_id': str
        }

        self.attribute_map = {
            'resource_type': 'ResourceType',
            'rule_description': 'RuleDescription',
            'rule_id': 'RuleId'
        }

        self._resource_type = resource_type
        self._rule_description = rule_description
        self._rule_id = rule_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListRulesOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListRulesOutput of this ListRulesOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def resource_type(self):
        """Gets the resource_type of this ListRulesOutput.


        :return: The resource_type of this ListRulesOutput.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ListRulesOutput.


        :param resource_type: The resource_type of this ListRulesOutput.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")

        self._resource_type = resource_type

    @property
    def rule_description(self):
        """Gets the rule_description of this ListRulesOutput.


        :return: The rule_description of this ListRulesOutput.
        :rtype: str
        """
        return self._rule_description

    @rule_description.setter
    def rule_description(self, rule_description):
        """Sets the rule_description of this ListRulesOutput.


        :param rule_description: The rule_description of this ListRulesOutput.
        :type rule_description: str
        """
        if rule_description is None:
            raise ValueError("Invalid value for `rule_description`, must not be `None`")

        self._rule_description = rule_description

    @property
    def rule_id(self):
        """Gets the rule_id of this ListRulesOutput.


        :return: The rule_id of this ListRulesOutput.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this ListRulesOutput.


        :param rule_id: The rule_id of this ListRulesOutput.
        :type rule_id: str
        """
        if rule_id is None:
            raise ValueError("Invalid value for `rule_id`, must not be `None`")

        self._rule_id = rule_id
