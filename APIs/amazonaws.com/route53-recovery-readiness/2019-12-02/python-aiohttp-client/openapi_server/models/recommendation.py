# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recommendation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recommendation_text: str=None):
        """Recommendation - a model defined in OpenAPI

        :param recommendation_text: The recommendation_text of this Recommendation.
        """
        self.openapi_types = {
            'recommendation_text': str
        }

        self.attribute_map = {
            'recommendation_text': 'RecommendationText'
        }

        self._recommendation_text = recommendation_text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recommendation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recommendation of this Recommendation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recommendation_text(self):
        """Gets the recommendation_text of this Recommendation.


        :return: The recommendation_text of this Recommendation.
        :rtype: str
        """
        return self._recommendation_text

    @recommendation_text.setter
    def recommendation_text(self, recommendation_text):
        """Sets the recommendation_text of this Recommendation.


        :param recommendation_text: The recommendation_text of this Recommendation.
        :type recommendation_text: str
        """
        if recommendation_text is None:
            raise ValueError("Invalid value for `recommendation_text`, must not be `None`")

        self._recommendation_text = recommendation_text
