/**
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateCellRequest from '../model/CreateCellRequest';
import CreateCellResponse from '../model/CreateCellResponse';
import CreateCrossAccountAuthorizationRequest from '../model/CreateCrossAccountAuthorizationRequest';
import CreateCrossAccountAuthorizationResponse from '../model/CreateCrossAccountAuthorizationResponse';
import CreateReadinessCheckRequest from '../model/CreateReadinessCheckRequest';
import CreateReadinessCheckResponse from '../model/CreateReadinessCheckResponse';
import CreateRecoveryGroupRequest from '../model/CreateRecoveryGroupRequest';
import CreateRecoveryGroupResponse from '../model/CreateRecoveryGroupResponse';
import CreateResourceSetRequest from '../model/CreateResourceSetRequest';
import CreateResourceSetResponse from '../model/CreateResourceSetResponse';
import GetArchitectureRecommendationsResponse from '../model/GetArchitectureRecommendationsResponse';
import GetCellReadinessSummaryResponse from '../model/GetCellReadinessSummaryResponse';
import GetCellResponse from '../model/GetCellResponse';
import GetReadinessCheckResourceStatusResponse from '../model/GetReadinessCheckResourceStatusResponse';
import GetReadinessCheckResponse from '../model/GetReadinessCheckResponse';
import GetReadinessCheckStatusResponse from '../model/GetReadinessCheckStatusResponse';
import GetRecoveryGroupReadinessSummaryResponse from '../model/GetRecoveryGroupReadinessSummaryResponse';
import GetRecoveryGroupResponse from '../model/GetRecoveryGroupResponse';
import GetResourceSetResponse from '../model/GetResourceSetResponse';
import ListCellsResponse from '../model/ListCellsResponse';
import ListCrossAccountAuthorizationsResponse from '../model/ListCrossAccountAuthorizationsResponse';
import ListReadinessChecksResponse from '../model/ListReadinessChecksResponse';
import ListRecoveryGroupsResponse from '../model/ListRecoveryGroupsResponse';
import ListResourceSetsResponse from '../model/ListResourceSetsResponse';
import ListRulesResponse from '../model/ListRulesResponse';
import ListTagsForResourcesResponse from '../model/ListTagsForResourcesResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateCellRequest from '../model/UpdateCellRequest';
import UpdateCellResponse from '../model/UpdateCellResponse';
import UpdateReadinessCheckRequest from '../model/UpdateReadinessCheckRequest';
import UpdateReadinessCheckResponse from '../model/UpdateReadinessCheckResponse';
import UpdateRecoveryGroupRequest from '../model/UpdateRecoveryGroupRequest';
import UpdateRecoveryGroupResponse from '../model/UpdateRecoveryGroupResponse';
import UpdateResourceSetRequest from '../model/UpdateResourceSetRequest';
import UpdateResourceSetResponse from '../model/UpdateResourceSetResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-12-02
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createCell operation.
     * @callback module:api/DefaultApi~createCellCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCellResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a cell in an account.
     * @param {module:model/CreateCellRequest} createCellRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCellResponse}
     */
    createCell(createCellRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCellRequest;
      // verify the required parameter 'createCellRequest' is set
      if (createCellRequest === undefined || createCellRequest === null) {
        throw new Error("Missing the required parameter 'createCellRequest' when calling createCell");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCellResponse;
      return this.apiClient.callApi(
        '/cells', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCrossAccountAuthorization operation.
     * @callback module:api/DefaultApi~createCrossAccountAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCrossAccountAuthorizationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a cross-account readiness authorization. This lets you authorize another account to work with Route 53 Application Recovery Controller, for example, to check the readiness status of resources in a separate account.
     * @param {module:model/CreateCrossAccountAuthorizationRequest} createCrossAccountAuthorizationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createCrossAccountAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCrossAccountAuthorizationResponse}
     */
    createCrossAccountAuthorization(createCrossAccountAuthorizationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createCrossAccountAuthorizationRequest;
      // verify the required parameter 'createCrossAccountAuthorizationRequest' is set
      if (createCrossAccountAuthorizationRequest === undefined || createCrossAccountAuthorizationRequest === null) {
        throw new Error("Missing the required parameter 'createCrossAccountAuthorizationRequest' when calling createCrossAccountAuthorization");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCrossAccountAuthorizationResponse;
      return this.apiClient.callApi(
        '/crossaccountauthorizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReadinessCheck operation.
     * @callback module:api/DefaultApi~createReadinessCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateReadinessCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a readiness check in an account. A readiness check monitors a resource set in your application, such as a set of Amazon Aurora instances, that Application Recovery Controller is auditing recovery readiness for. The audits run once every minute on every resource that's associated with a readiness check.
     * @param {module:model/CreateReadinessCheckRequest} createReadinessCheckRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createReadinessCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateReadinessCheckResponse}
     */
    createReadinessCheck(createReadinessCheckRequest, opts, callback) {
      opts = opts || {};
      let postBody = createReadinessCheckRequest;
      // verify the required parameter 'createReadinessCheckRequest' is set
      if (createReadinessCheckRequest === undefined || createReadinessCheckRequest === null) {
        throw new Error("Missing the required parameter 'createReadinessCheckRequest' when calling createReadinessCheck");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateReadinessCheckResponse;
      return this.apiClient.callApi(
        '/readinesschecks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRecoveryGroup operation.
     * @callback module:api/DefaultApi~createRecoveryGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRecoveryGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a recovery group in an account. A recovery group corresponds to an application and includes a list of the cells that make up the application.
     * @param {module:model/CreateRecoveryGroupRequest} createRecoveryGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRecoveryGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRecoveryGroupResponse}
     */
    createRecoveryGroup(createRecoveryGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRecoveryGroupRequest;
      // verify the required parameter 'createRecoveryGroupRequest' is set
      if (createRecoveryGroupRequest === undefined || createRecoveryGroupRequest === null) {
        throw new Error("Missing the required parameter 'createRecoveryGroupRequest' when calling createRecoveryGroup");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRecoveryGroupResponse;
      return this.apiClient.callApi(
        '/recoverygroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createResourceSet operation.
     * @callback module:api/DefaultApi~createResourceSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateResourceSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a resource set. A resource set is a set of resources of one type that span multiple cells. You can associate a resource set with a readiness check to monitor the resources for failover readiness.
     * @param {module:model/CreateResourceSetRequest} createResourceSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createResourceSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateResourceSetResponse}
     */
    createResourceSet(createResourceSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = createResourceSetRequest;
      // verify the required parameter 'createResourceSetRequest' is set
      if (createResourceSetRequest === undefined || createResourceSetRequest === null) {
        throw new Error("Missing the required parameter 'createResourceSetRequest' when calling createResourceSet");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResourceSetResponse;
      return this.apiClient.callApi(
        '/resourcesets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCell operation.
     * @callback module:api/DefaultApi~deleteCellCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cell. When successful, the response code is 204, with no response body.
     * @param {String} cellName The name of the cell.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCellCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCell(cellName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cellName' is set
      if (cellName === undefined || cellName === null) {
        throw new Error("Missing the required parameter 'cellName' when calling deleteCell");
      }

      let pathParams = {
        'cellName': cellName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/cells/{cellName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCrossAccountAuthorization operation.
     * @callback module:api/DefaultApi~deleteCrossAccountAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes cross account readiness authorization.
     * @param {String} crossAccountAuthorization The cross-account authorization.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCrossAccountAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteCrossAccountAuthorization(crossAccountAuthorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'crossAccountAuthorization' is set
      if (crossAccountAuthorization === undefined || crossAccountAuthorization === null) {
        throw new Error("Missing the required parameter 'crossAccountAuthorization' when calling deleteCrossAccountAuthorization");
      }

      let pathParams = {
        'crossAccountAuthorization': crossAccountAuthorization
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/crossaccountauthorizations/{crossAccountAuthorization}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteReadinessCheck operation.
     * @callback module:api/DefaultApi~deleteReadinessCheckCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a readiness check.
     * @param {String} readinessCheckName Name of a readiness check.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteReadinessCheckCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteReadinessCheck(readinessCheckName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'readinessCheckName' is set
      if (readinessCheckName === undefined || readinessCheckName === null) {
        throw new Error("Missing the required parameter 'readinessCheckName' when calling deleteReadinessCheck");
      }

      let pathParams = {
        'readinessCheckName': readinessCheckName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/readinesschecks/{readinessCheckName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRecoveryGroup operation.
     * @callback module:api/DefaultApi~deleteRecoveryGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a recovery group.
     * @param {String} recoveryGroupName The name of a recovery group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRecoveryGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRecoveryGroup(recoveryGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recoveryGroupName' is set
      if (recoveryGroupName === undefined || recoveryGroupName === null) {
        throw new Error("Missing the required parameter 'recoveryGroupName' when calling deleteRecoveryGroup");
      }

      let pathParams = {
        'recoveryGroupName': recoveryGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/recoverygroups/{recoveryGroupName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteResourceSet operation.
     * @callback module:api/DefaultApi~deleteResourceSetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a resource set.
     * @param {String} resourceSetName Name of a resource set.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteResourceSetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteResourceSet(resourceSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceSetName' is set
      if (resourceSetName === undefined || resourceSetName === null) {
        throw new Error("Missing the required parameter 'resourceSetName' when calling deleteResourceSet");
      }

      let pathParams = {
        'resourceSetName': resourceSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/resourcesets/{resourceSetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArchitectureRecommendations operation.
     * @callback module:api/DefaultApi~getArchitectureRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetArchitectureRecommendationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets recommendations about architecture designs for improving resiliency for an application, based on a recovery group.
     * @param {String} recoveryGroupName The name of a recovery group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {module:api/DefaultApi~getArchitectureRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetArchitectureRecommendationsResponse}
     */
    getArchitectureRecommendations(recoveryGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recoveryGroupName' is set
      if (recoveryGroupName === undefined || recoveryGroupName === null) {
        throw new Error("Missing the required parameter 'recoveryGroupName' when calling getArchitectureRecommendations");
      }

      let pathParams = {
        'recoveryGroupName': recoveryGroupName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetArchitectureRecommendationsResponse;
      return this.apiClient.callApi(
        '/recoverygroups/{recoveryGroupName}/architectureRecommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCell operation.
     * @callback module:api/DefaultApi~getCellCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCellResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about a cell including cell name, cell Amazon Resource Name (ARN), ARNs of nested cells for this cell, and a list of those cell ARNs with their associated recovery group ARNs.
     * @param {String} cellName The name of the cell.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getCellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCellResponse}
     */
    getCell(cellName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cellName' is set
      if (cellName === undefined || cellName === null) {
        throw new Error("Missing the required parameter 'cellName' when calling getCell");
      }

      let pathParams = {
        'cellName': cellName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCellResponse;
      return this.apiClient.callApi(
        '/cells/{cellName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCellReadinessSummary operation.
     * @callback module:api/DefaultApi~getCellReadinessSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetCellReadinessSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets readiness for a cell. Aggregates the readiness of all the resources that are associated with the cell into a single value.
     * @param {String} cellName The name of the cell.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getCellReadinessSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetCellReadinessSummaryResponse}
     */
    getCellReadinessSummary(cellName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cellName' is set
      if (cellName === undefined || cellName === null) {
        throw new Error("Missing the required parameter 'cellName' when calling getCellReadinessSummary");
      }

      let pathParams = {
        'cellName': cellName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetCellReadinessSummaryResponse;
      return this.apiClient.callApi(
        '/cellreadiness/{cellName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadinessCheck operation.
     * @callback module:api/DefaultApi~getReadinessCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadinessCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a readiness check.
     * @param {String} readinessCheckName Name of a readiness check.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getReadinessCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadinessCheckResponse}
     */
    getReadinessCheck(readinessCheckName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'readinessCheckName' is set
      if (readinessCheckName === undefined || readinessCheckName === null) {
        throw new Error("Missing the required parameter 'readinessCheckName' when calling getReadinessCheck");
      }

      let pathParams = {
        'readinessCheckName': readinessCheckName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadinessCheckResponse;
      return this.apiClient.callApi(
        '/readinesschecks/{readinessCheckName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadinessCheckResourceStatus operation.
     * @callback module:api/DefaultApi~getReadinessCheckResourceStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadinessCheckResourceStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets individual readiness status for a readiness check. To see the overall readiness status for a recovery group, that considers the readiness status for all the readiness checks in the recovery group, use GetRecoveryGroupReadinessSummary.
     * @param {String} readinessCheckName Name of a readiness check.
     * @param {String} resourceIdentifier The resource identifier, which is the Amazon Resource Name (ARN) or the identifier generated for the resource by Application Recovery Controller (for example, for a DNS target resource).
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getReadinessCheckResourceStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadinessCheckResourceStatusResponse}
     */
    getReadinessCheckResourceStatus(readinessCheckName, resourceIdentifier, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'readinessCheckName' is set
      if (readinessCheckName === undefined || readinessCheckName === null) {
        throw new Error("Missing the required parameter 'readinessCheckName' when calling getReadinessCheckResourceStatus");
      }
      // verify the required parameter 'resourceIdentifier' is set
      if (resourceIdentifier === undefined || resourceIdentifier === null) {
        throw new Error("Missing the required parameter 'resourceIdentifier' when calling getReadinessCheckResourceStatus");
      }

      let pathParams = {
        'readinessCheckName': readinessCheckName,
        'resourceIdentifier': resourceIdentifier
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadinessCheckResourceStatusResponse;
      return this.apiClient.callApi(
        '/readinesschecks/{readinessCheckName}/resource/{resourceIdentifier}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReadinessCheckStatus operation.
     * @callback module:api/DefaultApi~getReadinessCheckStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetReadinessCheckStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the readiness status for an individual readiness check. To see the overall readiness status for a recovery group, that considers the readiness status for all the readiness checks in a recovery group, use GetRecoveryGroupReadinessSummary.
     * @param {String} readinessCheckName Name of a readiness check.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getReadinessCheckStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetReadinessCheckStatusResponse}
     */
    getReadinessCheckStatus(readinessCheckName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'readinessCheckName' is set
      if (readinessCheckName === undefined || readinessCheckName === null) {
        throw new Error("Missing the required parameter 'readinessCheckName' when calling getReadinessCheckStatus");
      }

      let pathParams = {
        'readinessCheckName': readinessCheckName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetReadinessCheckStatusResponse;
      return this.apiClient.callApi(
        '/readinesschecks/{readinessCheckName}/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecoveryGroup operation.
     * @callback module:api/DefaultApi~getRecoveryGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecoveryGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets details about a recovery group, including a list of the cells that are included in it.
     * @param {String} recoveryGroupName The name of a recovery group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRecoveryGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecoveryGroupResponse}
     */
    getRecoveryGroup(recoveryGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recoveryGroupName' is set
      if (recoveryGroupName === undefined || recoveryGroupName === null) {
        throw new Error("Missing the required parameter 'recoveryGroupName' when calling getRecoveryGroup");
      }

      let pathParams = {
        'recoveryGroupName': recoveryGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecoveryGroupResponse;
      return this.apiClient.callApi(
        '/recoverygroups/{recoveryGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecoveryGroupReadinessSummary operation.
     * @callback module:api/DefaultApi~getRecoveryGroupReadinessSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRecoveryGroupReadinessSummaryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays a summary of information about a recovery group's readiness status. Includes the readiness checks for resources in the recovery group and the readiness status of each one.
     * @param {String} recoveryGroupName The name of a recovery group.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~getRecoveryGroupReadinessSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRecoveryGroupReadinessSummaryResponse}
     */
    getRecoveryGroupReadinessSummary(recoveryGroupName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'recoveryGroupName' is set
      if (recoveryGroupName === undefined || recoveryGroupName === null) {
        throw new Error("Missing the required parameter 'recoveryGroupName' when calling getRecoveryGroupReadinessSummary");
      }

      let pathParams = {
        'recoveryGroupName': recoveryGroupName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRecoveryGroupReadinessSummaryResponse;
      return this.apiClient.callApi(
        '/recoverygroupreadiness/{recoveryGroupName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getResourceSet operation.
     * @callback module:api/DefaultApi~getResourceSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetResourceSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Displays the details about a resource set, including a list of the resources in the set.
     * @param {String} resourceSetName Name of a resource set.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getResourceSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetResourceSetResponse}
     */
    getResourceSet(resourceSetName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceSetName' is set
      if (resourceSetName === undefined || resourceSetName === null) {
        throw new Error("Missing the required parameter 'resourceSetName' when calling getResourceSet");
      }

      let pathParams = {
        'resourceSetName': resourceSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetResourceSetResponse;
      return this.apiClient.callApi(
        '/resourcesets/{resourceSetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCells operation.
     * @callback module:api/DefaultApi~listCellsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCellsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the cells for an account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listCellsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCellsResponse}
     */
    listCells(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCellsResponse;
      return this.apiClient.callApi(
        '/cells', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCrossAccountAuthorizations operation.
     * @callback module:api/DefaultApi~listCrossAccountAuthorizationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListCrossAccountAuthorizationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the cross-account readiness authorizations that are in place for an account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listCrossAccountAuthorizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListCrossAccountAuthorizationsResponse}
     */
    listCrossAccountAuthorizations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListCrossAccountAuthorizationsResponse;
      return this.apiClient.callApi(
        '/crossaccountauthorizations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listReadinessChecks operation.
     * @callback module:api/DefaultApi~listReadinessChecksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListReadinessChecksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the readiness checks for an account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listReadinessChecksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListReadinessChecksResponse}
     */
    listReadinessChecks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListReadinessChecksResponse;
      return this.apiClient.callApi(
        '/readinesschecks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRecoveryGroups operation.
     * @callback module:api/DefaultApi~listRecoveryGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRecoveryGroupsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the recovery groups in an account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRecoveryGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRecoveryGroupsResponse}
     */
    listRecoveryGroups(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRecoveryGroupsResponse;
      return this.apiClient.callApi(
        '/recoverygroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listResourceSets operation.
     * @callback module:api/DefaultApi~listResourceSetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListResourceSetsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the resource sets in an account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listResourceSetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListResourceSetsResponse}
     */
    listResourceSets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListResourceSetsResponse;
      return this.apiClient.callApi(
        '/resourcesets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRules operation.
     * @callback module:api/DefaultApi~listRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRulesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all readiness rules, or lists the readiness rules for a specific resource type.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {Number} [maxResults] The number of objects that you want to return with this call.
     * @param {String} [nextToken] The token that identifies which batch of results you want to see.
     * @param {String} [resourceType] The resource type that a readiness rule applies to.
     * @param {String} [maxResults2] Pagination limit
     * @param {String} [nextToken2] Pagination token
     * @param {module:api/DefaultApi~listRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRulesResponse}
     */
    listRules(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken'],
        'resourceType': opts['resourceType'],
        'MaxResults': opts['maxResults2'],
        'NextToken': opts['nextToken2']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRulesResponse;
      return this.apiClient.callApi(
        '/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTagsForResources operation.
     * @callback module:api/DefaultApi~listTagsForResourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTagsForResourcesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the tags for a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for a resource.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~listTagsForResourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTagsForResourcesResponse}
     */
    listTagsForResources(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling listTagsForResources");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTagsForResourcesResponse;
      return this.apiClient.callApi(
        '/tags/{resource-arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a tag to a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for a resource.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tags/{resource-arn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a tag from a resource.
     * @param {String} resourceArn The Amazon Resource Name (ARN) for a resource.
     * @param {Array.<String>} tagKeys The keys for tags you add to resources.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tags/{resource-arn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCell operation.
     * @callback module:api/DefaultApi~updateCellCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateCellResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a cell to replace the list of nested cells with a new list of nested cells.
     * @param {String} cellName The name of the cell.
     * @param {module:model/UpdateCellRequest} updateCellRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateCellCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateCellResponse}
     */
    updateCell(cellName, updateCellRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateCellRequest;
      // verify the required parameter 'cellName' is set
      if (cellName === undefined || cellName === null) {
        throw new Error("Missing the required parameter 'cellName' when calling updateCell");
      }
      // verify the required parameter 'updateCellRequest' is set
      if (updateCellRequest === undefined || updateCellRequest === null) {
        throw new Error("Missing the required parameter 'updateCellRequest' when calling updateCell");
      }

      let pathParams = {
        'cellName': cellName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateCellResponse;
      return this.apiClient.callApi(
        '/cells/{cellName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReadinessCheck operation.
     * @callback module:api/DefaultApi~updateReadinessCheckCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateReadinessCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a readiness check.
     * @param {String} readinessCheckName Name of a readiness check.
     * @param {module:model/UpdateReadinessCheckRequest} updateReadinessCheckRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateReadinessCheckCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateReadinessCheckResponse}
     */
    updateReadinessCheck(readinessCheckName, updateReadinessCheckRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateReadinessCheckRequest;
      // verify the required parameter 'readinessCheckName' is set
      if (readinessCheckName === undefined || readinessCheckName === null) {
        throw new Error("Missing the required parameter 'readinessCheckName' when calling updateReadinessCheck");
      }
      // verify the required parameter 'updateReadinessCheckRequest' is set
      if (updateReadinessCheckRequest === undefined || updateReadinessCheckRequest === null) {
        throw new Error("Missing the required parameter 'updateReadinessCheckRequest' when calling updateReadinessCheck");
      }

      let pathParams = {
        'readinessCheckName': readinessCheckName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateReadinessCheckResponse;
      return this.apiClient.callApi(
        '/readinesschecks/{readinessCheckName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRecoveryGroup operation.
     * @callback module:api/DefaultApi~updateRecoveryGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRecoveryGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a recovery group.
     * @param {String} recoveryGroupName The name of a recovery group.
     * @param {module:model/UpdateRecoveryGroupRequest} updateRecoveryGroupRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRecoveryGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRecoveryGroupResponse}
     */
    updateRecoveryGroup(recoveryGroupName, updateRecoveryGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRecoveryGroupRequest;
      // verify the required parameter 'recoveryGroupName' is set
      if (recoveryGroupName === undefined || recoveryGroupName === null) {
        throw new Error("Missing the required parameter 'recoveryGroupName' when calling updateRecoveryGroup");
      }
      // verify the required parameter 'updateRecoveryGroupRequest' is set
      if (updateRecoveryGroupRequest === undefined || updateRecoveryGroupRequest === null) {
        throw new Error("Missing the required parameter 'updateRecoveryGroupRequest' when calling updateRecoveryGroup");
      }

      let pathParams = {
        'recoveryGroupName': recoveryGroupName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRecoveryGroupResponse;
      return this.apiClient.callApi(
        '/recoverygroups/{recoveryGroupName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateResourceSet operation.
     * @callback module:api/DefaultApi~updateResourceSetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateResourceSetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a resource set.
     * @param {String} resourceSetName Name of a resource set.
     * @param {module:model/UpdateResourceSetRequest} updateResourceSetRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateResourceSetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateResourceSetResponse}
     */
    updateResourceSet(resourceSetName, updateResourceSetRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateResourceSetRequest;
      // verify the required parameter 'resourceSetName' is set
      if (resourceSetName === undefined || resourceSetName === null) {
        throw new Error("Missing the required parameter 'resourceSetName' when calling updateResourceSet");
      }
      // verify the required parameter 'updateResourceSetRequest' is set
      if (updateResourceSetRequest === undefined || updateResourceSetRequest === null) {
        throw new Error("Missing the required parameter 'updateResourceSetRequest' when calling updateResourceSet");
      }

      let pathParams = {
        'resourceSetName': resourceSetName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateResourceSetResponse;
      return this.apiClient.callApi(
        '/resourcesets/{resourceSetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
