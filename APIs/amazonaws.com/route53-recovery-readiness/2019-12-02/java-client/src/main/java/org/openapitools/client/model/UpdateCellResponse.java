/*
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateCellResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:48.462324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateCellResponse {
  public static final String SERIALIZED_NAME_CELL_ARN = "CellArn";
  @SerializedName(SERIALIZED_NAME_CELL_ARN)
  private String cellArn;

  public static final String SERIALIZED_NAME_CELL_NAME = "CellName";
  @SerializedName(SERIALIZED_NAME_CELL_NAME)
  private String cellName;

  public static final String SERIALIZED_NAME_CELLS = "Cells";
  @SerializedName(SERIALIZED_NAME_CELLS)
  private List cells;

  public static final String SERIALIZED_NAME_PARENT_READINESS_SCOPES = "ParentReadinessScopes";
  @SerializedName(SERIALIZED_NAME_PARENT_READINESS_SCOPES)
  private List parentReadinessScopes;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public UpdateCellResponse() {
  }

  public UpdateCellResponse cellArn(String cellArn) {
    this.cellArn = cellArn;
    return this;
  }

  /**
   * Get cellArn
   * @return cellArn
   */
  @javax.annotation.Nullable
  public String getCellArn() {
    return cellArn;
  }

  public void setCellArn(String cellArn) {
    this.cellArn = cellArn;
  }


  public UpdateCellResponse cellName(String cellName) {
    this.cellName = cellName;
    return this;
  }

  /**
   * Get cellName
   * @return cellName
   */
  @javax.annotation.Nullable
  public String getCellName() {
    return cellName;
  }

  public void setCellName(String cellName) {
    this.cellName = cellName;
  }


  public UpdateCellResponse cells(List cells) {
    this.cells = cells;
    return this;
  }

  /**
   * Get cells
   * @return cells
   */
  @javax.annotation.Nullable
  public List getCells() {
    return cells;
  }

  public void setCells(List cells) {
    this.cells = cells;
  }


  public UpdateCellResponse parentReadinessScopes(List parentReadinessScopes) {
    this.parentReadinessScopes = parentReadinessScopes;
    return this;
  }

  /**
   * Get parentReadinessScopes
   * @return parentReadinessScopes
   */
  @javax.annotation.Nullable
  public List getParentReadinessScopes() {
    return parentReadinessScopes;
  }

  public void setParentReadinessScopes(List parentReadinessScopes) {
    this.parentReadinessScopes = parentReadinessScopes;
  }


  public UpdateCellResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateCellResponse updateCellResponse = (UpdateCellResponse) o;
    return Objects.equals(this.cellArn, updateCellResponse.cellArn) &&
        Objects.equals(this.cellName, updateCellResponse.cellName) &&
        Objects.equals(this.cells, updateCellResponse.cells) &&
        Objects.equals(this.parentReadinessScopes, updateCellResponse.parentReadinessScopes) &&
        Objects.equals(this.tags, updateCellResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cellArn, cellName, cells, parentReadinessScopes, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateCellResponse {\n");
    sb.append("    cellArn: ").append(toIndentedString(cellArn)).append("\n");
    sb.append("    cellName: ").append(toIndentedString(cellName)).append("\n");
    sb.append("    cells: ").append(toIndentedString(cells)).append("\n");
    sb.append("    parentReadinessScopes: ").append(toIndentedString(parentReadinessScopes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CellArn");
    openapiFields.add("CellName");
    openapiFields.add("Cells");
    openapiFields.add("ParentReadinessScopes");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateCellResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateCellResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateCellResponse is not found in the empty JSON string", UpdateCellResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateCellResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateCellResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CellArn`
      if (jsonObj.get("CellArn") != null && !jsonObj.get("CellArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CellArn"));
      }
      // validate the optional field `CellName`
      if (jsonObj.get("CellName") != null && !jsonObj.get("CellName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CellName"));
      }
      // validate the optional field `Cells`
      if (jsonObj.get("Cells") != null && !jsonObj.get("Cells").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Cells"));
      }
      // validate the optional field `ParentReadinessScopes`
      if (jsonObj.get("ParentReadinessScopes") != null && !jsonObj.get("ParentReadinessScopes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ParentReadinessScopes"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateCellResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateCellResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateCellResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateCellResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateCellResponse>() {
           @Override
           public void write(JsonWriter out, UpdateCellResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateCellResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateCellResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateCellResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateCellResponse
   */
  public static UpdateCellResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateCellResponse.class);
  }

  /**
   * Convert an instance of UpdateCellResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

