/*
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Resource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateResourceSetRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:48.462324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateResourceSetRequest {
  public static final String SERIALIZED_NAME_RESOURCE_SET_NAME = "resourceSetName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SET_NAME)
  private String resourceSetName;

  public static final String SERIALIZED_NAME_RESOURCE_SET_TYPE = "resourceSetType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SET_TYPE)
  private String resourceSetType;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<Resource> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateResourceSetRequest() {
  }

  public CreateResourceSetRequest resourceSetName(String resourceSetName) {
    this.resourceSetName = resourceSetName;
    return this;
  }

  /**
   * The name of the resource set to create.
   * @return resourceSetName
   */
  @javax.annotation.Nonnull
  public String getResourceSetName() {
    return resourceSetName;
  }

  public void setResourceSetName(String resourceSetName) {
    this.resourceSetName = resourceSetName;
  }


  public CreateResourceSetRequest resourceSetType(String resourceSetType) {
    this.resourceSetType = resourceSetType;
    return this;
  }

  /**
   * &lt;p&gt;The resource type of the resources in the resource set. Enter one of the following values for resource type:&lt;/p&gt; &lt;p&gt;AWS::ApiGateway::Stage, AWS::ApiGatewayV2::Stage, AWS::AutoScaling::AutoScalingGroup, AWS::CloudWatch::Alarm, AWS::EC2::CustomerGateway, AWS::DynamoDB::Table, AWS::EC2::Volume, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer, AWS::Lambda::Function, AWS::MSK::Cluster, AWS::RDS::DBCluster, AWS::Route53::HealthCheck, AWS::SQS::Queue, AWS::SNS::Topic, AWS::SNS::Subscription, AWS::EC2::VPC, AWS::EC2::VPNConnection, AWS::EC2::VPNGateway, AWS::Route53RecoveryReadiness::DNSTargetResource&lt;/p&gt;
   * @return resourceSetType
   */
  @javax.annotation.Nonnull
  public String getResourceSetType() {
    return resourceSetType;
  }

  public void setResourceSetType(String resourceSetType) {
    this.resourceSetType = resourceSetType;
  }


  public CreateResourceSetRequest resources(List<Resource> resources) {
    this.resources = resources;
    return this;
  }

  public CreateResourceSetRequest addResourcesItem(Resource resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * A list of resource objects in the resource set.
   * @return resources
   */
  @javax.annotation.Nonnull
  public List<Resource> getResources() {
    return resources;
  }

  public void setResources(List<Resource> resources) {
    this.resources = resources;
  }


  public CreateResourceSetRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateResourceSetRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A collection of tags associated with a resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateResourceSetRequest createResourceSetRequest = (CreateResourceSetRequest) o;
    return Objects.equals(this.resourceSetName, createResourceSetRequest.resourceSetName) &&
        Objects.equals(this.resourceSetType, createResourceSetRequest.resourceSetType) &&
        Objects.equals(this.resources, createResourceSetRequest.resources) &&
        Objects.equals(this.tags, createResourceSetRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceSetName, resourceSetType, resources, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateResourceSetRequest {\n");
    sb.append("    resourceSetName: ").append(toIndentedString(resourceSetName)).append("\n");
    sb.append("    resourceSetType: ").append(toIndentedString(resourceSetType)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceSetName");
    openapiFields.add("resourceSetType");
    openapiFields.add("resources");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("resourceSetName");
    openapiRequiredFields.add("resourceSetType");
    openapiRequiredFields.add("resources");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateResourceSetRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateResourceSetRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateResourceSetRequest is not found in the empty JSON string", CreateResourceSetRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateResourceSetRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateResourceSetRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateResourceSetRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("resourceSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceSetName").toString()));
      }
      if (!jsonObj.get("resourceSetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceSetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceSetType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("resources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
      }

      JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
      // validate the required field `resources` (array)
      for (int i = 0; i < jsonArrayresources.size(); i++) {
        Resource.validateJsonElement(jsonArrayresources.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateResourceSetRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateResourceSetRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateResourceSetRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateResourceSetRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateResourceSetRequest>() {
           @Override
           public void write(JsonWriter out, CreateResourceSetRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateResourceSetRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateResourceSetRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateResourceSetRequest
   * @throws IOException if the JSON string is invalid with respect to CreateResourceSetRequest
   */
  public static CreateResourceSetRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateResourceSetRequest.class);
  }

  /**
   * Convert an instance of CreateResourceSetRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

