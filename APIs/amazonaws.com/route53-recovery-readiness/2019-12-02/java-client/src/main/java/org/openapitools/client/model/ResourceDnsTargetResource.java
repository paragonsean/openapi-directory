/*
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DNSTargetResourceTargetResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceDnsTargetResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:48.462324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceDnsTargetResource {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_HOSTED_ZONE_ARN = "HostedZoneArn";
  @SerializedName(SERIALIZED_NAME_HOSTED_ZONE_ARN)
  private String hostedZoneArn;

  public static final String SERIALIZED_NAME_RECORD_SET_ID = "RecordSetId";
  @SerializedName(SERIALIZED_NAME_RECORD_SET_ID)
  private String recordSetId;

  public static final String SERIALIZED_NAME_RECORD_TYPE = "RecordType";
  @SerializedName(SERIALIZED_NAME_RECORD_TYPE)
  private String recordType;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE = "TargetResource";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE)
  private DNSTargetResourceTargetResource targetResource;

  public ResourceDnsTargetResource() {
  }

  public ResourceDnsTargetResource domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public ResourceDnsTargetResource hostedZoneArn(String hostedZoneArn) {
    this.hostedZoneArn = hostedZoneArn;
    return this;
  }

  /**
   * Get hostedZoneArn
   * @return hostedZoneArn
   */
  @javax.annotation.Nullable
  public String getHostedZoneArn() {
    return hostedZoneArn;
  }

  public void setHostedZoneArn(String hostedZoneArn) {
    this.hostedZoneArn = hostedZoneArn;
  }


  public ResourceDnsTargetResource recordSetId(String recordSetId) {
    this.recordSetId = recordSetId;
    return this;
  }

  /**
   * Get recordSetId
   * @return recordSetId
   */
  @javax.annotation.Nullable
  public String getRecordSetId() {
    return recordSetId;
  }

  public void setRecordSetId(String recordSetId) {
    this.recordSetId = recordSetId;
  }


  public ResourceDnsTargetResource recordType(String recordType) {
    this.recordType = recordType;
    return this;
  }

  /**
   * Get recordType
   * @return recordType
   */
  @javax.annotation.Nullable
  public String getRecordType() {
    return recordType;
  }

  public void setRecordType(String recordType) {
    this.recordType = recordType;
  }


  public ResourceDnsTargetResource targetResource(DNSTargetResourceTargetResource targetResource) {
    this.targetResource = targetResource;
    return this;
  }

  /**
   * Get targetResource
   * @return targetResource
   */
  @javax.annotation.Nullable
  public DNSTargetResourceTargetResource getTargetResource() {
    return targetResource;
  }

  public void setTargetResource(DNSTargetResourceTargetResource targetResource) {
    this.targetResource = targetResource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceDnsTargetResource resourceDnsTargetResource = (ResourceDnsTargetResource) o;
    return Objects.equals(this.domainName, resourceDnsTargetResource.domainName) &&
        Objects.equals(this.hostedZoneArn, resourceDnsTargetResource.hostedZoneArn) &&
        Objects.equals(this.recordSetId, resourceDnsTargetResource.recordSetId) &&
        Objects.equals(this.recordType, resourceDnsTargetResource.recordType) &&
        Objects.equals(this.targetResource, resourceDnsTargetResource.targetResource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, hostedZoneArn, recordSetId, recordType, targetResource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceDnsTargetResource {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    hostedZoneArn: ").append(toIndentedString(hostedZoneArn)).append("\n");
    sb.append("    recordSetId: ").append(toIndentedString(recordSetId)).append("\n");
    sb.append("    recordType: ").append(toIndentedString(recordType)).append("\n");
    sb.append("    targetResource: ").append(toIndentedString(targetResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DomainName");
    openapiFields.add("HostedZoneArn");
    openapiFields.add("RecordSetId");
    openapiFields.add("RecordType");
    openapiFields.add("TargetResource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceDnsTargetResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceDnsTargetResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceDnsTargetResource is not found in the empty JSON string", ResourceDnsTargetResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceDnsTargetResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceDnsTargetResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DomainName`
      if (jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainName"));
      }
      // validate the optional field `HostedZoneArn`
      if (jsonObj.get("HostedZoneArn") != null && !jsonObj.get("HostedZoneArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostedZoneArn"));
      }
      // validate the optional field `RecordSetId`
      if (jsonObj.get("RecordSetId") != null && !jsonObj.get("RecordSetId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecordSetId"));
      }
      // validate the optional field `RecordType`
      if (jsonObj.get("RecordType") != null && !jsonObj.get("RecordType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RecordType"));
      }
      // validate the optional field `TargetResource`
      if (jsonObj.get("TargetResource") != null && !jsonObj.get("TargetResource").isJsonNull()) {
        DNSTargetResourceTargetResource.validateJsonElement(jsonObj.get("TargetResource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceDnsTargetResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceDnsTargetResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceDnsTargetResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceDnsTargetResource.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceDnsTargetResource>() {
           @Override
           public void write(JsonWriter out, ResourceDnsTargetResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceDnsTargetResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceDnsTargetResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceDnsTargetResource
   * @throws IOException if the JSON string is invalid with respect to ResourceDnsTargetResource
   */
  public static ResourceDnsTargetResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceDnsTargetResource.class);
  }

  /**
   * Convert an instance of ResourceDnsTargetResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

