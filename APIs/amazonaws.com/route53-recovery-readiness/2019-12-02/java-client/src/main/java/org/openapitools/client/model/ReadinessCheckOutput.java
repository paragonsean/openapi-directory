/*
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A readiness check.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:48.462324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReadinessCheckOutput {
  public static final String SERIALIZED_NAME_READINESS_CHECK_ARN = "ReadinessCheckArn";
  @SerializedName(SERIALIZED_NAME_READINESS_CHECK_ARN)
  private String readinessCheckArn;

  public static final String SERIALIZED_NAME_READINESS_CHECK_NAME = "ReadinessCheckName";
  @SerializedName(SERIALIZED_NAME_READINESS_CHECK_NAME)
  private String readinessCheckName;

  public static final String SERIALIZED_NAME_RESOURCE_SET = "ResourceSet";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SET)
  private String resourceSet;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public ReadinessCheckOutput() {
  }

  public ReadinessCheckOutput readinessCheckArn(String readinessCheckArn) {
    this.readinessCheckArn = readinessCheckArn;
    return this;
  }

  /**
   * Get readinessCheckArn
   * @return readinessCheckArn
   */
  @javax.annotation.Nonnull
  public String getReadinessCheckArn() {
    return readinessCheckArn;
  }

  public void setReadinessCheckArn(String readinessCheckArn) {
    this.readinessCheckArn = readinessCheckArn;
  }


  public ReadinessCheckOutput readinessCheckName(String readinessCheckName) {
    this.readinessCheckName = readinessCheckName;
    return this;
  }

  /**
   * Get readinessCheckName
   * @return readinessCheckName
   */
  @javax.annotation.Nullable
  public String getReadinessCheckName() {
    return readinessCheckName;
  }

  public void setReadinessCheckName(String readinessCheckName) {
    this.readinessCheckName = readinessCheckName;
  }


  public ReadinessCheckOutput resourceSet(String resourceSet) {
    this.resourceSet = resourceSet;
    return this;
  }

  /**
   * Get resourceSet
   * @return resourceSet
   */
  @javax.annotation.Nonnull
  public String getResourceSet() {
    return resourceSet;
  }

  public void setResourceSet(String resourceSet) {
    this.resourceSet = resourceSet;
  }


  public ReadinessCheckOutput tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadinessCheckOutput readinessCheckOutput = (ReadinessCheckOutput) o;
    return Objects.equals(this.readinessCheckArn, readinessCheckOutput.readinessCheckArn) &&
        Objects.equals(this.readinessCheckName, readinessCheckOutput.readinessCheckName) &&
        Objects.equals(this.resourceSet, readinessCheckOutput.resourceSet) &&
        Objects.equals(this.tags, readinessCheckOutput.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(readinessCheckArn, readinessCheckName, resourceSet, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadinessCheckOutput {\n");
    sb.append("    readinessCheckArn: ").append(toIndentedString(readinessCheckArn)).append("\n");
    sb.append("    readinessCheckName: ").append(toIndentedString(readinessCheckName)).append("\n");
    sb.append("    resourceSet: ").append(toIndentedString(resourceSet)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ReadinessCheckArn");
    openapiFields.add("ReadinessCheckName");
    openapiFields.add("ResourceSet");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ReadinessCheckArn");
    openapiRequiredFields.add("ResourceSet");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReadinessCheckOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReadinessCheckOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReadinessCheckOutput is not found in the empty JSON string", ReadinessCheckOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReadinessCheckOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReadinessCheckOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReadinessCheckOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ReadinessCheckArn`
      String.validateJsonElement(jsonObj.get("ReadinessCheckArn"));
      // validate the optional field `ReadinessCheckName`
      if (jsonObj.get("ReadinessCheckName") != null && !jsonObj.get("ReadinessCheckName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ReadinessCheckName"));
      }
      // validate the required field `ResourceSet`
      String.validateJsonElement(jsonObj.get("ResourceSet"));
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReadinessCheckOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReadinessCheckOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReadinessCheckOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReadinessCheckOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<ReadinessCheckOutput>() {
           @Override
           public void write(JsonWriter out, ReadinessCheckOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReadinessCheckOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReadinessCheckOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReadinessCheckOutput
   * @throws IOException if the JSON string is invalid with respect to ReadinessCheckOutput
   */
  public static ReadinessCheckOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReadinessCheckOutput.class);
  }

  /**
   * Convert an instance of ReadinessCheckOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

