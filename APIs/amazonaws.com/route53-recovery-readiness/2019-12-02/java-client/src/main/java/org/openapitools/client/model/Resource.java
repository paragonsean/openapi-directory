/*
 * AWS Route53 Recovery Readiness
 * Recovery readiness
 *
 * The version of the OpenAPI document: 2019-12-02
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceDnsTargetResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The resource element of a resource set.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:13:48.462324-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Resource {
  public static final String SERIALIZED_NAME_COMPONENT_ID = "ComponentId";
  @SerializedName(SERIALIZED_NAME_COMPONENT_ID)
  private String componentId;

  public static final String SERIALIZED_NAME_DNS_TARGET_RESOURCE = "DnsTargetResource";
  @SerializedName(SERIALIZED_NAME_DNS_TARGET_RESOURCE)
  private ResourceDnsTargetResource dnsTargetResource;

  public static final String SERIALIZED_NAME_READINESS_SCOPES = "ReadinessScopes";
  @SerializedName(SERIALIZED_NAME_READINESS_SCOPES)
  private List readinessScopes;

  public static final String SERIALIZED_NAME_RESOURCE_ARN = "ResourceArn";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ARN)
  private String resourceArn;

  public Resource() {
  }

  public Resource componentId(String componentId) {
    this.componentId = componentId;
    return this;
  }

  /**
   * Get componentId
   * @return componentId
   */
  @javax.annotation.Nullable
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(String componentId) {
    this.componentId = componentId;
  }


  public Resource dnsTargetResource(ResourceDnsTargetResource dnsTargetResource) {
    this.dnsTargetResource = dnsTargetResource;
    return this;
  }

  /**
   * Get dnsTargetResource
   * @return dnsTargetResource
   */
  @javax.annotation.Nullable
  public ResourceDnsTargetResource getDnsTargetResource() {
    return dnsTargetResource;
  }

  public void setDnsTargetResource(ResourceDnsTargetResource dnsTargetResource) {
    this.dnsTargetResource = dnsTargetResource;
  }


  public Resource readinessScopes(List readinessScopes) {
    this.readinessScopes = readinessScopes;
    return this;
  }

  /**
   * Get readinessScopes
   * @return readinessScopes
   */
  @javax.annotation.Nullable
  public List getReadinessScopes() {
    return readinessScopes;
  }

  public void setReadinessScopes(List readinessScopes) {
    this.readinessScopes = readinessScopes;
  }


  public Resource resourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
    return this;
  }

  /**
   * Get resourceArn
   * @return resourceArn
   */
  @javax.annotation.Nullable
  public String getResourceArn() {
    return resourceArn;
  }

  public void setResourceArn(String resourceArn) {
    this.resourceArn = resourceArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resource resource = (Resource) o;
    return Objects.equals(this.componentId, resource.componentId) &&
        Objects.equals(this.dnsTargetResource, resource.dnsTargetResource) &&
        Objects.equals(this.readinessScopes, resource.readinessScopes) &&
        Objects.equals(this.resourceArn, resource.resourceArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(componentId, dnsTargetResource, readinessScopes, resourceArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resource {\n");
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    dnsTargetResource: ").append(toIndentedString(dnsTargetResource)).append("\n");
    sb.append("    readinessScopes: ").append(toIndentedString(readinessScopes)).append("\n");
    sb.append("    resourceArn: ").append(toIndentedString(resourceArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ComponentId");
    openapiFields.add("DnsTargetResource");
    openapiFields.add("ReadinessScopes");
    openapiFields.add("ResourceArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Resource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Resource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resource is not found in the empty JSON string", Resource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Resource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ComponentId`
      if (jsonObj.get("ComponentId") != null && !jsonObj.get("ComponentId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ComponentId"));
      }
      // validate the optional field `DnsTargetResource`
      if (jsonObj.get("DnsTargetResource") != null && !jsonObj.get("DnsTargetResource").isJsonNull()) {
        ResourceDnsTargetResource.validateJsonElement(jsonObj.get("DnsTargetResource"));
      }
      // validate the optional field `ReadinessScopes`
      if (jsonObj.get("ReadinessScopes") != null && !jsonObj.get("ReadinessScopes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ReadinessScopes"));
      }
      // validate the optional field `ResourceArn`
      if (jsonObj.get("ResourceArn") != null && !jsonObj.get("ResourceArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ResourceArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resource.class));

       return (TypeAdapter<T>) new TypeAdapter<Resource>() {
           @Override
           public void write(JsonWriter out, Resource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Resource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Resource
   * @throws IOException if the JSON string is invalid with respect to Resource
   */
  public static Resource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resource.class);
  }

  /**
   * Convert an instance of Resource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

