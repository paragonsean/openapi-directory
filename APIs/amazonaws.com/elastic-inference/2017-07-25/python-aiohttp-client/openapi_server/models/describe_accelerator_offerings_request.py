# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DescribeAcceleratorOfferingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location_type: str=None, accelerator_types: List[str]=None):
        """DescribeAcceleratorOfferingsRequest - a model defined in OpenAPI

        :param location_type: The location_type of this DescribeAcceleratorOfferingsRequest.
        :param accelerator_types: The accelerator_types of this DescribeAcceleratorOfferingsRequest.
        """
        self.openapi_types = {
            'location_type': str,
            'accelerator_types': List[str]
        }

        self.attribute_map = {
            'location_type': 'locationType',
            'accelerator_types': 'acceleratorTypes'
        }

        self._location_type = location_type
        self._accelerator_types = accelerator_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAcceleratorOfferingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAcceleratorOfferings_request of this DescribeAcceleratorOfferingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location_type(self):
        """Gets the location_type of this DescribeAcceleratorOfferingsRequest.

         The location type that you want to describe accelerator type offerings for. It can assume the following values: region: will return the accelerator type offering at the regional level. availability-zone: will return the accelerator type offering at the availability zone level. availability-zone-id: will return the accelerator type offering at the availability zone level returning the availability zone id. 

        :return: The location_type of this DescribeAcceleratorOfferingsRequest.
        :rtype: str
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type):
        """Sets the location_type of this DescribeAcceleratorOfferingsRequest.

         The location type that you want to describe accelerator type offerings for. It can assume the following values: region: will return the accelerator type offering at the regional level. availability-zone: will return the accelerator type offering at the availability zone level. availability-zone-id: will return the accelerator type offering at the availability zone level returning the availability zone id. 

        :param location_type: The location_type of this DescribeAcceleratorOfferingsRequest.
        :type location_type: str
        """
        allowed_values = ["region", "availability-zone", "availability-zone-id"]  # noqa: E501
        if location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `location_type` ({0}), must be one of {1}"
                .format(location_type, allowed_values)
            )

        self._location_type = location_type

    @property
    def accelerator_types(self):
        """Gets the accelerator_types of this DescribeAcceleratorOfferingsRequest.

         The list of accelerator types to describe. 

        :return: The accelerator_types of this DescribeAcceleratorOfferingsRequest.
        :rtype: List[str]
        """
        return self._accelerator_types

    @accelerator_types.setter
    def accelerator_types(self, accelerator_types):
        """Sets the accelerator_types of this DescribeAcceleratorOfferingsRequest.

         The list of accelerator types to describe. 

        :param accelerator_types: The accelerator_types of this DescribeAcceleratorOfferingsRequest.
        :type accelerator_types: List[str]
        """
        if accelerator_types is not None and len(accelerator_types) > 100:
            raise ValueError("Invalid value for `accelerator_types`, number of items must be less than or equal to `100`")
        if accelerator_types is not None and len(accelerator_types) < 0:
            raise ValueError("Invalid value for `accelerator_types`, number of items must be greater than or equal to `0`")

        self._accelerator_types = accelerator_types
