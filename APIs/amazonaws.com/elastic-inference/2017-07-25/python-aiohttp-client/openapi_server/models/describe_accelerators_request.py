# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
import re
from openapi_server import util


class DescribeAcceleratorsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_ids: List[str]=None, filters: List[Filter]=None, max_results: int=None, next_token: str=None):
        """DescribeAcceleratorsRequest - a model defined in OpenAPI

        :param accelerator_ids: The accelerator_ids of this DescribeAcceleratorsRequest.
        :param filters: The filters of this DescribeAcceleratorsRequest.
        :param max_results: The max_results of this DescribeAcceleratorsRequest.
        :param next_token: The next_token of this DescribeAcceleratorsRequest.
        """
        self.openapi_types = {
            'accelerator_ids': List[str],
            'filters': List[Filter],
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'accelerator_ids': 'acceleratorIds',
            'filters': 'filters',
            'max_results': 'maxResults',
            'next_token': 'nextToken'
        }

        self._accelerator_ids = accelerator_ids
        self._filters = filters
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescribeAcceleratorsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescribeAccelerators_request of this DescribeAcceleratorsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_ids(self):
        """Gets the accelerator_ids of this DescribeAcceleratorsRequest.

         The IDs of the accelerators to describe. 

        :return: The accelerator_ids of this DescribeAcceleratorsRequest.
        :rtype: List[str]
        """
        return self._accelerator_ids

    @accelerator_ids.setter
    def accelerator_ids(self, accelerator_ids):
        """Sets the accelerator_ids of this DescribeAcceleratorsRequest.

         The IDs of the accelerators to describe. 

        :param accelerator_ids: The accelerator_ids of this DescribeAcceleratorsRequest.
        :type accelerator_ids: List[str]
        """
        if accelerator_ids is not None and len(accelerator_ids) > 1000:
            raise ValueError("Invalid value for `accelerator_ids`, number of items must be less than or equal to `1000`")
        if accelerator_ids is not None and len(accelerator_ids) < 0:
            raise ValueError("Invalid value for `accelerator_ids`, number of items must be greater than or equal to `0`")

        self._accelerator_ids = accelerator_ids

    @property
    def filters(self):
        """Gets the filters of this DescribeAcceleratorsRequest.

         One or more filters. Filter names and values are case-sensitive. Valid filter names are: accelerator-types: can provide a list of accelerator type names to filter for. instance-id: can provide a list of EC2 instance ids to filter for. 

        :return: The filters of this DescribeAcceleratorsRequest.
        :rtype: List[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this DescribeAcceleratorsRequest.

         One or more filters. Filter names and values are case-sensitive. Valid filter names are: accelerator-types: can provide a list of accelerator type names to filter for. instance-id: can provide a list of EC2 instance ids to filter for. 

        :param filters: The filters of this DescribeAcceleratorsRequest.
        :type filters: List[Filter]
        """
        if filters is not None and len(filters) > 100:
            raise ValueError("Invalid value for `filters`, number of items must be less than or equal to `100`")
        if filters is not None and len(filters) < 0:
            raise ValueError("Invalid value for `filters`, number of items must be greater than or equal to `0`")

        self._filters = filters

    @property
    def max_results(self):
        """Gets the max_results of this DescribeAcceleratorsRequest.

         The total number of items to return in the command's output. If the total number of items available is more than the value specified, a NextToken is provided in the command's output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI. 

        :return: The max_results of this DescribeAcceleratorsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this DescribeAcceleratorsRequest.

         The total number of items to return in the command's output. If the total number of items available is more than the value specified, a NextToken is provided in the command's output. To resume pagination, provide the NextToken value in the starting-token argument of a subsequent command. Do not use the NextToken response element directly outside of the AWS CLI. 

        :param max_results: The max_results of this DescribeAcceleratorsRequest.
        :type max_results: int
        """
        if max_results is not None and max_results > 100:
            raise ValueError("Invalid value for `max_results`, must be a value less than or equal to `100`")
        if max_results is not None and max_results < 0:
            raise ValueError("Invalid value for `max_results`, must be a value greater than or equal to `0`")

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this DescribeAcceleratorsRequest.

         A token to specify where to start paginating. This is the NextToken from a previously truncated response. 

        :return: The next_token of this DescribeAcceleratorsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this DescribeAcceleratorsRequest.

         A token to specify where to start paginating. This is the NextToken from a previously truncated response. 

        :param next_token: The next_token of this DescribeAcceleratorsRequest.
        :type next_token: str
        """
        if next_token is not None and len(next_token) > 2048:
            raise ValueError("Invalid value for `next_token`, length must be less than or equal to `2048`")
        if next_token is not None and len(next_token) < 1:
            raise ValueError("Invalid value for `next_token`, length must be greater than or equal to `1`")
        if next_token is not None and not re.search(r'^[A-Za-z0-9+\/]+={0,2}$', next_token):
            raise ValueError("Invalid value for `next_token`, must be a follow pattern or equal to `/^[A-Za-z0-9+\/]+={0,2}$/`")

        self._next_token = next_token
