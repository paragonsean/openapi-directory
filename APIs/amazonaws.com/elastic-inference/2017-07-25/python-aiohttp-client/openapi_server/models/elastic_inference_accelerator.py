# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.elastic_inference_accelerator_accelerator_health import ElasticInferenceAcceleratorAcceleratorHealth
from openapi_server import util


class ElasticInferenceAccelerator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accelerator_health: ElasticInferenceAcceleratorAcceleratorHealth=None, accelerator_type: str=None, accelerator_id: str=None, availability_zone: str=None, attached_resource: str=None):
        """ElasticInferenceAccelerator - a model defined in OpenAPI

        :param accelerator_health: The accelerator_health of this ElasticInferenceAccelerator.
        :param accelerator_type: The accelerator_type of this ElasticInferenceAccelerator.
        :param accelerator_id: The accelerator_id of this ElasticInferenceAccelerator.
        :param availability_zone: The availability_zone of this ElasticInferenceAccelerator.
        :param attached_resource: The attached_resource of this ElasticInferenceAccelerator.
        """
        self.openapi_types = {
            'accelerator_health': ElasticInferenceAcceleratorAcceleratorHealth,
            'accelerator_type': str,
            'accelerator_id': str,
            'availability_zone': str,
            'attached_resource': str
        }

        self.attribute_map = {
            'accelerator_health': 'acceleratorHealth',
            'accelerator_type': 'acceleratorType',
            'accelerator_id': 'acceleratorId',
            'availability_zone': 'availabilityZone',
            'attached_resource': 'attachedResource'
        }

        self._accelerator_health = accelerator_health
        self._accelerator_type = accelerator_type
        self._accelerator_id = accelerator_id
        self._availability_zone = availability_zone
        self._attached_resource = attached_resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElasticInferenceAccelerator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ElasticInferenceAccelerator of this ElasticInferenceAccelerator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accelerator_health(self):
        """Gets the accelerator_health of this ElasticInferenceAccelerator.


        :return: The accelerator_health of this ElasticInferenceAccelerator.
        :rtype: ElasticInferenceAcceleratorAcceleratorHealth
        """
        return self._accelerator_health

    @accelerator_health.setter
    def accelerator_health(self, accelerator_health):
        """Sets the accelerator_health of this ElasticInferenceAccelerator.


        :param accelerator_health: The accelerator_health of this ElasticInferenceAccelerator.
        :type accelerator_health: ElasticInferenceAcceleratorAcceleratorHealth
        """

        self._accelerator_health = accelerator_health

    @property
    def accelerator_type(self):
        """Gets the accelerator_type of this ElasticInferenceAccelerator.


        :return: The accelerator_type of this ElasticInferenceAccelerator.
        :rtype: str
        """
        return self._accelerator_type

    @accelerator_type.setter
    def accelerator_type(self, accelerator_type):
        """Sets the accelerator_type of this ElasticInferenceAccelerator.


        :param accelerator_type: The accelerator_type of this ElasticInferenceAccelerator.
        :type accelerator_type: str
        """

        self._accelerator_type = accelerator_type

    @property
    def accelerator_id(self):
        """Gets the accelerator_id of this ElasticInferenceAccelerator.


        :return: The accelerator_id of this ElasticInferenceAccelerator.
        :rtype: str
        """
        return self._accelerator_id

    @accelerator_id.setter
    def accelerator_id(self, accelerator_id):
        """Sets the accelerator_id of this ElasticInferenceAccelerator.


        :param accelerator_id: The accelerator_id of this ElasticInferenceAccelerator.
        :type accelerator_id: str
        """

        self._accelerator_id = accelerator_id

    @property
    def availability_zone(self):
        """Gets the availability_zone of this ElasticInferenceAccelerator.


        :return: The availability_zone of this ElasticInferenceAccelerator.
        :rtype: str
        """
        return self._availability_zone

    @availability_zone.setter
    def availability_zone(self, availability_zone):
        """Sets the availability_zone of this ElasticInferenceAccelerator.


        :param availability_zone: The availability_zone of this ElasticInferenceAccelerator.
        :type availability_zone: str
        """

        self._availability_zone = availability_zone

    @property
    def attached_resource(self):
        """Gets the attached_resource of this ElasticInferenceAccelerator.


        :return: The attached_resource of this ElasticInferenceAccelerator.
        :rtype: str
        """
        return self._attached_resource

    @attached_resource.setter
    def attached_resource(self, attached_resource):
        """Sets the attached_resource of this ElasticInferenceAccelerator.


        :param attached_resource: The attached_resource of this ElasticInferenceAccelerator.
        :type attached_resource: str
        """

        self._attached_resource = attached_resource
