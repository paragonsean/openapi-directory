/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAcceleratorOfferingsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAcceleratorOfferingsResponse::OAIDescribeAcceleratorOfferingsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAcceleratorOfferingsResponse::OAIDescribeAcceleratorOfferingsResponse() {
    this->initializeModel();
}

OAIDescribeAcceleratorOfferingsResponse::~OAIDescribeAcceleratorOfferingsResponse() {}

void OAIDescribeAcceleratorOfferingsResponse::initializeModel() {

    m_accelerator_type_offerings_isSet = false;
    m_accelerator_type_offerings_isValid = false;
}

void OAIDescribeAcceleratorOfferingsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAcceleratorOfferingsResponse::fromJsonObject(QJsonObject json) {

    m_accelerator_type_offerings_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type_offerings, json[QString("acceleratorTypeOfferings")]);
    m_accelerator_type_offerings_isSet = !json[QString("acceleratorTypeOfferings")].isNull() && m_accelerator_type_offerings_isValid;
}

QString OAIDescribeAcceleratorOfferingsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAcceleratorOfferingsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_type_offerings.isSet()) {
        obj.insert(QString("acceleratorTypeOfferings"), ::OpenAPI::toJsonValue(m_accelerator_type_offerings));
    }
    return obj;
}

QList OAIDescribeAcceleratorOfferingsResponse::getAcceleratorTypeOfferings() const {
    return m_accelerator_type_offerings;
}
void OAIDescribeAcceleratorOfferingsResponse::setAcceleratorTypeOfferings(const QList &accelerator_type_offerings) {
    m_accelerator_type_offerings = accelerator_type_offerings;
    m_accelerator_type_offerings_isSet = true;
}

bool OAIDescribeAcceleratorOfferingsResponse::is_accelerator_type_offerings_Set() const{
    return m_accelerator_type_offerings_isSet;
}

bool OAIDescribeAcceleratorOfferingsResponse::is_accelerator_type_offerings_Valid() const{
    return m_accelerator_type_offerings_isValid;
}

bool OAIDescribeAcceleratorOfferingsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_type_offerings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAcceleratorOfferingsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
