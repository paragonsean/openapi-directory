/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceleratorType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceleratorType::OAIAcceleratorType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceleratorType::OAIAcceleratorType() {
    this->initializeModel();
}

OAIAcceleratorType::~OAIAcceleratorType() {}

void OAIAcceleratorType::initializeModel() {

    m_accelerator_type_name_isSet = false;
    m_accelerator_type_name_isValid = false;

    m_memory_info_isSet = false;
    m_memory_info_isValid = false;

    m_throughput_info_isSet = false;
    m_throughput_info_isValid = false;
}

void OAIAcceleratorType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceleratorType::fromJsonObject(QJsonObject json) {

    m_accelerator_type_name_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type_name, json[QString("acceleratorTypeName")]);
    m_accelerator_type_name_isSet = !json[QString("acceleratorTypeName")].isNull() && m_accelerator_type_name_isValid;

    m_memory_info_isValid = ::OpenAPI::fromJsonValue(m_memory_info, json[QString("memoryInfo")]);
    m_memory_info_isSet = !json[QString("memoryInfo")].isNull() && m_memory_info_isValid;

    m_throughput_info_isValid = ::OpenAPI::fromJsonValue(m_throughput_info, json[QString("throughputInfo")]);
    m_throughput_info_isSet = !json[QString("throughputInfo")].isNull() && m_throughput_info_isValid;
}

QString OAIAcceleratorType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceleratorType::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_type_name_isSet) {
        obj.insert(QString("acceleratorTypeName"), ::OpenAPI::toJsonValue(m_accelerator_type_name));
    }
    if (m_memory_info.isSet()) {
        obj.insert(QString("memoryInfo"), ::OpenAPI::toJsonValue(m_memory_info));
    }
    if (m_throughput_info.isSet()) {
        obj.insert(QString("throughputInfo"), ::OpenAPI::toJsonValue(m_throughput_info));
    }
    return obj;
}

QString OAIAcceleratorType::getAcceleratorTypeName() const {
    return m_accelerator_type_name;
}
void OAIAcceleratorType::setAcceleratorTypeName(const QString &accelerator_type_name) {
    m_accelerator_type_name = accelerator_type_name;
    m_accelerator_type_name_isSet = true;
}

bool OAIAcceleratorType::is_accelerator_type_name_Set() const{
    return m_accelerator_type_name_isSet;
}

bool OAIAcceleratorType::is_accelerator_type_name_Valid() const{
    return m_accelerator_type_name_isValid;
}

OAIAcceleratorType_memoryInfo OAIAcceleratorType::getMemoryInfo() const {
    return m_memory_info;
}
void OAIAcceleratorType::setMemoryInfo(const OAIAcceleratorType_memoryInfo &memory_info) {
    m_memory_info = memory_info;
    m_memory_info_isSet = true;
}

bool OAIAcceleratorType::is_memory_info_Set() const{
    return m_memory_info_isSet;
}

bool OAIAcceleratorType::is_memory_info_Valid() const{
    return m_memory_info_isValid;
}

QList OAIAcceleratorType::getThroughputInfo() const {
    return m_throughput_info;
}
void OAIAcceleratorType::setThroughputInfo(const QList &throughput_info) {
    m_throughput_info = throughput_info;
    m_throughput_info_isSet = true;
}

bool OAIAcceleratorType::is_throughput_info_Set() const{
    return m_throughput_info_isSet;
}

bool OAIAcceleratorType::is_throughput_info_Valid() const{
    return m_throughput_info_isValid;
}

bool OAIAcceleratorType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throughput_info.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceleratorType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
