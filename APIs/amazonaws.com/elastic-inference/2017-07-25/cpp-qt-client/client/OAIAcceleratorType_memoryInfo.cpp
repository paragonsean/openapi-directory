/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceleratorType_memoryInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceleratorType_memoryInfo::OAIAcceleratorType_memoryInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceleratorType_memoryInfo::OAIAcceleratorType_memoryInfo() {
    this->initializeModel();
}

OAIAcceleratorType_memoryInfo::~OAIAcceleratorType_memoryInfo() {}

void OAIAcceleratorType_memoryInfo::initializeModel() {

    m_size_in_mi_b_isSet = false;
    m_size_in_mi_b_isValid = false;
}

void OAIAcceleratorType_memoryInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceleratorType_memoryInfo::fromJsonObject(QJsonObject json) {

    m_size_in_mi_b_isValid = ::OpenAPI::fromJsonValue(m_size_in_mi_b, json[QString("sizeInMiB")]);
    m_size_in_mi_b_isSet = !json[QString("sizeInMiB")].isNull() && m_size_in_mi_b_isValid;
}

QString OAIAcceleratorType_memoryInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceleratorType_memoryInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_size_in_mi_b_isSet) {
        obj.insert(QString("sizeInMiB"), ::OpenAPI::toJsonValue(m_size_in_mi_b));
    }
    return obj;
}

qint32 OAIAcceleratorType_memoryInfo::getSizeInMiB() const {
    return m_size_in_mi_b;
}
void OAIAcceleratorType_memoryInfo::setSizeInMiB(const qint32 &size_in_mi_b) {
    m_size_in_mi_b = size_in_mi_b;
    m_size_in_mi_b_isSet = true;
}

bool OAIAcceleratorType_memoryInfo::is_size_in_mi_b_Set() const{
    return m_size_in_mi_b_isSet;
}

bool OAIAcceleratorType_memoryInfo::is_size_in_mi_b_Valid() const{
    return m_size_in_mi_b_isValid;
}

bool OAIAcceleratorType_memoryInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_size_in_mi_b_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceleratorType_memoryInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
