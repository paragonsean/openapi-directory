/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAcceleratorsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAcceleratorsResponse::OAIDescribeAcceleratorsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAcceleratorsResponse::OAIDescribeAcceleratorsResponse() {
    this->initializeModel();
}

OAIDescribeAcceleratorsResponse::~OAIDescribeAcceleratorsResponse() {}

void OAIDescribeAcceleratorsResponse::initializeModel() {

    m_accelerator_set_isSet = false;
    m_accelerator_set_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeAcceleratorsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAcceleratorsResponse::fromJsonObject(QJsonObject json) {

    m_accelerator_set_isValid = ::OpenAPI::fromJsonValue(m_accelerator_set, json[QString("acceleratorSet")]);
    m_accelerator_set_isSet = !json[QString("acceleratorSet")].isNull() && m_accelerator_set_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeAcceleratorsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAcceleratorsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_set.isSet()) {
        obj.insert(QString("acceleratorSet"), ::OpenAPI::toJsonValue(m_accelerator_set));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeAcceleratorsResponse::getAcceleratorSet() const {
    return m_accelerator_set;
}
void OAIDescribeAcceleratorsResponse::setAcceleratorSet(const QList &accelerator_set) {
    m_accelerator_set = accelerator_set;
    m_accelerator_set_isSet = true;
}

bool OAIDescribeAcceleratorsResponse::is_accelerator_set_Set() const{
    return m_accelerator_set_isSet;
}

bool OAIDescribeAcceleratorsResponse::is_accelerator_set_Valid() const{
    return m_accelerator_set_isValid;
}

QString OAIDescribeAcceleratorsResponse::getNextToken() const {
    return m_next_token;
}
void OAIDescribeAcceleratorsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeAcceleratorsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeAcceleratorsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeAcceleratorsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_set.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAcceleratorsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
