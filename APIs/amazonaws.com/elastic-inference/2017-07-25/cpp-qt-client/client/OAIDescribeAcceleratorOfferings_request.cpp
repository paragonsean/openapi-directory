/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAcceleratorOfferings_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAcceleratorOfferings_request::OAIDescribeAcceleratorOfferings_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAcceleratorOfferings_request::OAIDescribeAcceleratorOfferings_request() {
    this->initializeModel();
}

OAIDescribeAcceleratorOfferings_request::~OAIDescribeAcceleratorOfferings_request() {}

void OAIDescribeAcceleratorOfferings_request::initializeModel() {

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_accelerator_types_isSet = false;
    m_accelerator_types_isValid = false;
}

void OAIDescribeAcceleratorOfferings_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAcceleratorOfferings_request::fromJsonObject(QJsonObject json) {

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("locationType")]);
    m_location_type_isSet = !json[QString("locationType")].isNull() && m_location_type_isValid;

    m_accelerator_types_isValid = ::OpenAPI::fromJsonValue(m_accelerator_types, json[QString("acceleratorTypes")]);
    m_accelerator_types_isSet = !json[QString("acceleratorTypes")].isNull() && m_accelerator_types_isValid;
}

QString OAIDescribeAcceleratorOfferings_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAcceleratorOfferings_request::asJsonObject() const {
    QJsonObject obj;
    if (m_location_type_isSet) {
        obj.insert(QString("locationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_accelerator_types.size() > 0) {
        obj.insert(QString("acceleratorTypes"), ::OpenAPI::toJsonValue(m_accelerator_types));
    }
    return obj;
}

QString OAIDescribeAcceleratorOfferings_request::getLocationType() const {
    return m_location_type;
}
void OAIDescribeAcceleratorOfferings_request::setLocationType(const QString &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIDescribeAcceleratorOfferings_request::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIDescribeAcceleratorOfferings_request::is_location_type_Valid() const{
    return m_location_type_isValid;
}

QList<QString> OAIDescribeAcceleratorOfferings_request::getAcceleratorTypes() const {
    return m_accelerator_types;
}
void OAIDescribeAcceleratorOfferings_request::setAcceleratorTypes(const QList<QString> &accelerator_types) {
    m_accelerator_types = accelerator_types;
    m_accelerator_types_isSet = true;
}

bool OAIDescribeAcceleratorOfferings_request::is_accelerator_types_Set() const{
    return m_accelerator_types_isSet;
}

bool OAIDescribeAcceleratorOfferings_request::is_accelerator_types_Valid() const{
    return m_accelerator_types_isValid;
}

bool OAIDescribeAcceleratorOfferings_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAcceleratorOfferings_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_type_isValid && true;
}

} // namespace OpenAPI
