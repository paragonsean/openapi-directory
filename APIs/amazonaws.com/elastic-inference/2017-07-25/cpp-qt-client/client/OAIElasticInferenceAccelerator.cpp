/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIElasticInferenceAccelerator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIElasticInferenceAccelerator::OAIElasticInferenceAccelerator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIElasticInferenceAccelerator::OAIElasticInferenceAccelerator() {
    this->initializeModel();
}

OAIElasticInferenceAccelerator::~OAIElasticInferenceAccelerator() {}

void OAIElasticInferenceAccelerator::initializeModel() {

    m_accelerator_health_isSet = false;
    m_accelerator_health_isValid = false;

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_accelerator_id_isSet = false;
    m_accelerator_id_isValid = false;

    m_availability_zone_isSet = false;
    m_availability_zone_isValid = false;

    m_attached_resource_isSet = false;
    m_attached_resource_isValid = false;
}

void OAIElasticInferenceAccelerator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIElasticInferenceAccelerator::fromJsonObject(QJsonObject json) {

    m_accelerator_health_isValid = ::OpenAPI::fromJsonValue(m_accelerator_health, json[QString("acceleratorHealth")]);
    m_accelerator_health_isSet = !json[QString("acceleratorHealth")].isNull() && m_accelerator_health_isValid;

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("acceleratorType")]);
    m_accelerator_type_isSet = !json[QString("acceleratorType")].isNull() && m_accelerator_type_isValid;

    m_accelerator_id_isValid = ::OpenAPI::fromJsonValue(m_accelerator_id, json[QString("acceleratorId")]);
    m_accelerator_id_isSet = !json[QString("acceleratorId")].isNull() && m_accelerator_id_isValid;

    m_availability_zone_isValid = ::OpenAPI::fromJsonValue(m_availability_zone, json[QString("availabilityZone")]);
    m_availability_zone_isSet = !json[QString("availabilityZone")].isNull() && m_availability_zone_isValid;

    m_attached_resource_isValid = ::OpenAPI::fromJsonValue(m_attached_resource, json[QString("attachedResource")]);
    m_attached_resource_isSet = !json[QString("attachedResource")].isNull() && m_attached_resource_isValid;
}

QString OAIElasticInferenceAccelerator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIElasticInferenceAccelerator::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_health.isSet()) {
        obj.insert(QString("acceleratorHealth"), ::OpenAPI::toJsonValue(m_accelerator_health));
    }
    if (m_accelerator_type_isSet) {
        obj.insert(QString("acceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_accelerator_id_isSet) {
        obj.insert(QString("acceleratorId"), ::OpenAPI::toJsonValue(m_accelerator_id));
    }
    if (m_availability_zone_isSet) {
        obj.insert(QString("availabilityZone"), ::OpenAPI::toJsonValue(m_availability_zone));
    }
    if (m_attached_resource_isSet) {
        obj.insert(QString("attachedResource"), ::OpenAPI::toJsonValue(m_attached_resource));
    }
    return obj;
}

OAIElasticInferenceAccelerator_acceleratorHealth OAIElasticInferenceAccelerator::getAcceleratorHealth() const {
    return m_accelerator_health;
}
void OAIElasticInferenceAccelerator::setAcceleratorHealth(const OAIElasticInferenceAccelerator_acceleratorHealth &accelerator_health) {
    m_accelerator_health = accelerator_health;
    m_accelerator_health_isSet = true;
}

bool OAIElasticInferenceAccelerator::is_accelerator_health_Set() const{
    return m_accelerator_health_isSet;
}

bool OAIElasticInferenceAccelerator::is_accelerator_health_Valid() const{
    return m_accelerator_health_isValid;
}

QString OAIElasticInferenceAccelerator::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAIElasticInferenceAccelerator::setAcceleratorType(const QString &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAIElasticInferenceAccelerator::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAIElasticInferenceAccelerator::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

QString OAIElasticInferenceAccelerator::getAcceleratorId() const {
    return m_accelerator_id;
}
void OAIElasticInferenceAccelerator::setAcceleratorId(const QString &accelerator_id) {
    m_accelerator_id = accelerator_id;
    m_accelerator_id_isSet = true;
}

bool OAIElasticInferenceAccelerator::is_accelerator_id_Set() const{
    return m_accelerator_id_isSet;
}

bool OAIElasticInferenceAccelerator::is_accelerator_id_Valid() const{
    return m_accelerator_id_isValid;
}

QString OAIElasticInferenceAccelerator::getAvailabilityZone() const {
    return m_availability_zone;
}
void OAIElasticInferenceAccelerator::setAvailabilityZone(const QString &availability_zone) {
    m_availability_zone = availability_zone;
    m_availability_zone_isSet = true;
}

bool OAIElasticInferenceAccelerator::is_availability_zone_Set() const{
    return m_availability_zone_isSet;
}

bool OAIElasticInferenceAccelerator::is_availability_zone_Valid() const{
    return m_availability_zone_isValid;
}

QString OAIElasticInferenceAccelerator::getAttachedResource() const {
    return m_attached_resource;
}
void OAIElasticInferenceAccelerator::setAttachedResource(const QString &attached_resource) {
    m_attached_resource = attached_resource;
    m_attached_resource_isSet = true;
}

bool OAIElasticInferenceAccelerator::is_attached_resource_Set() const{
    return m_attached_resource_isSet;
}

bool OAIElasticInferenceAccelerator::is_attached_resource_Valid() const{
    return m_attached_resource_isValid;
}

bool OAIElasticInferenceAccelerator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_health.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attached_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIElasticInferenceAccelerator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
