/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationType::OAILocationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationType::OAILocationType() {
    this->initializeModel();
}

OAILocationType::~OAILocationType() {}

void OAILocationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILocationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILocationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("region", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationType::REGION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("availability-zone", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationType::AVAILABILITY_ZONE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("availability-zone-id", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationType::AVAILABILITY_ZONE_ID;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILocationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILocationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILocationType::REGION:
            val = "region";
            break;
        case eOAILocationType::AVAILABILITY_ZONE:
            val = "availability-zone";
            break;
        case eOAILocationType::AVAILABILITY_ZONE_ID:
            val = "availability-zone-id";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILocationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILocationType::eOAILocationType OAILocationType::getValue() const {
    return m_value;
}

void OAILocationType::setValue(const OAILocationType::eOAILocationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILocationType::isSet() const {
    
    return m_value_isSet;
}

bool OAILocationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
