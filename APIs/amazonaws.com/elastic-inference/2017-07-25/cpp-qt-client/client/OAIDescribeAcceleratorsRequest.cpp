/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAcceleratorsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAcceleratorsRequest::OAIDescribeAcceleratorsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAcceleratorsRequest::OAIDescribeAcceleratorsRequest() {
    this->initializeModel();
}

OAIDescribeAcceleratorsRequest::~OAIDescribeAcceleratorsRequest() {}

void OAIDescribeAcceleratorsRequest::initializeModel() {

    m_accelerator_ids_isSet = false;
    m_accelerator_ids_isValid = false;

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeAcceleratorsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAcceleratorsRequest::fromJsonObject(QJsonObject json) {

    m_accelerator_ids_isValid = ::OpenAPI::fromJsonValue(m_accelerator_ids, json[QString("acceleratorIds")]);
    m_accelerator_ids_isSet = !json[QString("acceleratorIds")].isNull() && m_accelerator_ids_isValid;

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("nextToken")]);
    m_next_token_isSet = !json[QString("nextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeAcceleratorsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAcceleratorsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_ids.isSet()) {
        obj.insert(QString("acceleratorIds"), ::OpenAPI::toJsonValue(m_accelerator_ids));
    }
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("nextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QList OAIDescribeAcceleratorsRequest::getAcceleratorIds() const {
    return m_accelerator_ids;
}
void OAIDescribeAcceleratorsRequest::setAcceleratorIds(const QList &accelerator_ids) {
    m_accelerator_ids = accelerator_ids;
    m_accelerator_ids_isSet = true;
}

bool OAIDescribeAcceleratorsRequest::is_accelerator_ids_Set() const{
    return m_accelerator_ids_isSet;
}

bool OAIDescribeAcceleratorsRequest::is_accelerator_ids_Valid() const{
    return m_accelerator_ids_isValid;
}

QList OAIDescribeAcceleratorsRequest::getFilters() const {
    return m_filters;
}
void OAIDescribeAcceleratorsRequest::setFilters(const QList &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIDescribeAcceleratorsRequest::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIDescribeAcceleratorsRequest::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIDescribeAcceleratorsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeAcceleratorsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeAcceleratorsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeAcceleratorsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeAcceleratorsRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeAcceleratorsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeAcceleratorsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeAcceleratorsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeAcceleratorsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_ids.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAcceleratorsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
