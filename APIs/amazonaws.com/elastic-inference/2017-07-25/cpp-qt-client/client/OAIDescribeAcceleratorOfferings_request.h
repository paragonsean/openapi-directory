/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeAcceleratorOfferings_request.h
 *
 * 
 */

#ifndef OAIDescribeAcceleratorOfferings_request_H
#define OAIDescribeAcceleratorOfferings_request_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDescribeAcceleratorOfferings_request : public OAIObject {
public:
    OAIDescribeAcceleratorOfferings_request();
    OAIDescribeAcceleratorOfferings_request(QString json);
    ~OAIDescribeAcceleratorOfferings_request() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getLocationType() const;
    void setLocationType(const QString &location_type);
    bool is_location_type_Set() const;
    bool is_location_type_Valid() const;

    QList<QString> getAcceleratorTypes() const;
    void setAcceleratorTypes(const QList<QString> &accelerator_types);
    bool is_accelerator_types_Set() const;
    bool is_accelerator_types_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_location_type;
    bool m_location_type_isSet;
    bool m_location_type_isValid;

    QList<QString> m_accelerator_types;
    bool m_accelerator_types_isSet;
    bool m_accelerator_types_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeAcceleratorOfferings_request)

#endif // OAIDescribeAcceleratorOfferings_request_H
