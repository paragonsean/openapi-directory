/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAcceleratorTypeOffering.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAcceleratorTypeOffering::OAIAcceleratorTypeOffering(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAcceleratorTypeOffering::OAIAcceleratorTypeOffering() {
    this->initializeModel();
}

OAIAcceleratorTypeOffering::~OAIAcceleratorTypeOffering() {}

void OAIAcceleratorTypeOffering::initializeModel() {

    m_accelerator_type_isSet = false;
    m_accelerator_type_isValid = false;

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;
}

void OAIAcceleratorTypeOffering::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAcceleratorTypeOffering::fromJsonObject(QJsonObject json) {

    m_accelerator_type_isValid = ::OpenAPI::fromJsonValue(m_accelerator_type, json[QString("acceleratorType")]);
    m_accelerator_type_isSet = !json[QString("acceleratorType")].isNull() && m_accelerator_type_isValid;

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("locationType")]);
    m_location_type_isSet = !json[QString("locationType")].isNull() && m_location_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;
}

QString OAIAcceleratorTypeOffering::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAcceleratorTypeOffering::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_type_isSet) {
        obj.insert(QString("acceleratorType"), ::OpenAPI::toJsonValue(m_accelerator_type));
    }
    if (m_location_type.isSet()) {
        obj.insert(QString("locationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    return obj;
}

QString OAIAcceleratorTypeOffering::getAcceleratorType() const {
    return m_accelerator_type;
}
void OAIAcceleratorTypeOffering::setAcceleratorType(const QString &accelerator_type) {
    m_accelerator_type = accelerator_type;
    m_accelerator_type_isSet = true;
}

bool OAIAcceleratorTypeOffering::is_accelerator_type_Set() const{
    return m_accelerator_type_isSet;
}

bool OAIAcceleratorTypeOffering::is_accelerator_type_Valid() const{
    return m_accelerator_type_isValid;
}

OAILocationType OAIAcceleratorTypeOffering::getLocationType() const {
    return m_location_type;
}
void OAIAcceleratorTypeOffering::setLocationType(const OAILocationType &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIAcceleratorTypeOffering::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIAcceleratorTypeOffering::is_location_type_Valid() const{
    return m_location_type_isValid;
}

QString OAIAcceleratorTypeOffering::getLocation() const {
    return m_location;
}
void OAIAcceleratorTypeOffering::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIAcceleratorTypeOffering::is_location_Set() const{
    return m_location_isSet;
}

bool OAIAcceleratorTypeOffering::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIAcceleratorTypeOffering::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAcceleratorTypeOffering::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
