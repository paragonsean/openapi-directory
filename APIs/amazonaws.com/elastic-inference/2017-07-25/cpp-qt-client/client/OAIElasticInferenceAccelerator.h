/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIElasticInferenceAccelerator.h
 *
 *  The details of an Elastic Inference Accelerator. 
 */

#ifndef OAIElasticInferenceAccelerator_H
#define OAIElasticInferenceAccelerator_H

#include <QJsonObject>

#include "OAIElasticInferenceAccelerator_acceleratorHealth.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIElasticInferenceAccelerator_acceleratorHealth;

class OAIElasticInferenceAccelerator : public OAIObject {
public:
    OAIElasticInferenceAccelerator();
    OAIElasticInferenceAccelerator(QString json);
    ~OAIElasticInferenceAccelerator() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIElasticInferenceAccelerator_acceleratorHealth getAcceleratorHealth() const;
    void setAcceleratorHealth(const OAIElasticInferenceAccelerator_acceleratorHealth &accelerator_health);
    bool is_accelerator_health_Set() const;
    bool is_accelerator_health_Valid() const;

    QString getAcceleratorType() const;
    void setAcceleratorType(const QString &accelerator_type);
    bool is_accelerator_type_Set() const;
    bool is_accelerator_type_Valid() const;

    QString getAcceleratorId() const;
    void setAcceleratorId(const QString &accelerator_id);
    bool is_accelerator_id_Set() const;
    bool is_accelerator_id_Valid() const;

    QString getAvailabilityZone() const;
    void setAvailabilityZone(const QString &availability_zone);
    bool is_availability_zone_Set() const;
    bool is_availability_zone_Valid() const;

    QString getAttachedResource() const;
    void setAttachedResource(const QString &attached_resource);
    bool is_attached_resource_Set() const;
    bool is_attached_resource_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIElasticInferenceAccelerator_acceleratorHealth m_accelerator_health;
    bool m_accelerator_health_isSet;
    bool m_accelerator_health_isValid;

    QString m_accelerator_type;
    bool m_accelerator_type_isSet;
    bool m_accelerator_type_isValid;

    QString m_accelerator_id;
    bool m_accelerator_id_isSet;
    bool m_accelerator_id_isValid;

    QString m_availability_zone;
    bool m_availability_zone_isSet;
    bool m_availability_zone_isValid;

    QString m_attached_resource;
    bool m_attached_resource_isSet;
    bool m_attached_resource_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIElasticInferenceAccelerator)

#endif // OAIElasticInferenceAccelerator_H
