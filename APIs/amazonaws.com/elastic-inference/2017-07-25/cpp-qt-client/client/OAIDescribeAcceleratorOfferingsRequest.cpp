/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAcceleratorOfferingsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAcceleratorOfferingsRequest::OAIDescribeAcceleratorOfferingsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAcceleratorOfferingsRequest::OAIDescribeAcceleratorOfferingsRequest() {
    this->initializeModel();
}

OAIDescribeAcceleratorOfferingsRequest::~OAIDescribeAcceleratorOfferingsRequest() {}

void OAIDescribeAcceleratorOfferingsRequest::initializeModel() {

    m_location_type_isSet = false;
    m_location_type_isValid = false;

    m_accelerator_types_isSet = false;
    m_accelerator_types_isValid = false;
}

void OAIDescribeAcceleratorOfferingsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAcceleratorOfferingsRequest::fromJsonObject(QJsonObject json) {

    m_location_type_isValid = ::OpenAPI::fromJsonValue(m_location_type, json[QString("locationType")]);
    m_location_type_isSet = !json[QString("locationType")].isNull() && m_location_type_isValid;

    m_accelerator_types_isValid = ::OpenAPI::fromJsonValue(m_accelerator_types, json[QString("acceleratorTypes")]);
    m_accelerator_types_isSet = !json[QString("acceleratorTypes")].isNull() && m_accelerator_types_isValid;
}

QString OAIDescribeAcceleratorOfferingsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAcceleratorOfferingsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_location_type.isSet()) {
        obj.insert(QString("locationType"), ::OpenAPI::toJsonValue(m_location_type));
    }
    if (m_accelerator_types.isSet()) {
        obj.insert(QString("acceleratorTypes"), ::OpenAPI::toJsonValue(m_accelerator_types));
    }
    return obj;
}

OAILocationType OAIDescribeAcceleratorOfferingsRequest::getLocationType() const {
    return m_location_type;
}
void OAIDescribeAcceleratorOfferingsRequest::setLocationType(const OAILocationType &location_type) {
    m_location_type = location_type;
    m_location_type_isSet = true;
}

bool OAIDescribeAcceleratorOfferingsRequest::is_location_type_Set() const{
    return m_location_type_isSet;
}

bool OAIDescribeAcceleratorOfferingsRequest::is_location_type_Valid() const{
    return m_location_type_isValid;
}

QList OAIDescribeAcceleratorOfferingsRequest::getAcceleratorTypes() const {
    return m_accelerator_types;
}
void OAIDescribeAcceleratorOfferingsRequest::setAcceleratorTypes(const QList &accelerator_types) {
    m_accelerator_types = accelerator_types;
    m_accelerator_types_isSet = true;
}

bool OAIDescribeAcceleratorOfferingsRequest::is_accelerator_types_Set() const{
    return m_accelerator_types_isSet;
}

bool OAIDescribeAcceleratorOfferingsRequest::is_accelerator_types_Valid() const{
    return m_accelerator_types_isValid;
}

bool OAIDescribeAcceleratorOfferingsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_location_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accelerator_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAcceleratorOfferingsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_type_isValid && true;
}

} // namespace OpenAPI
