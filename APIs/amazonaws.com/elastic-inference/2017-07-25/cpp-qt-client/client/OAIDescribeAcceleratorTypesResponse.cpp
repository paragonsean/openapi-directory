/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeAcceleratorTypesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeAcceleratorTypesResponse::OAIDescribeAcceleratorTypesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeAcceleratorTypesResponse::OAIDescribeAcceleratorTypesResponse() {
    this->initializeModel();
}

OAIDescribeAcceleratorTypesResponse::~OAIDescribeAcceleratorTypesResponse() {}

void OAIDescribeAcceleratorTypesResponse::initializeModel() {

    m_accelerator_types_isSet = false;
    m_accelerator_types_isValid = false;
}

void OAIDescribeAcceleratorTypesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeAcceleratorTypesResponse::fromJsonObject(QJsonObject json) {

    m_accelerator_types_isValid = ::OpenAPI::fromJsonValue(m_accelerator_types, json[QString("acceleratorTypes")]);
    m_accelerator_types_isSet = !json[QString("acceleratorTypes")].isNull() && m_accelerator_types_isValid;
}

QString OAIDescribeAcceleratorTypesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeAcceleratorTypesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_accelerator_types.isSet()) {
        obj.insert(QString("acceleratorTypes"), ::OpenAPI::toJsonValue(m_accelerator_types));
    }
    return obj;
}

QList OAIDescribeAcceleratorTypesResponse::getAcceleratorTypes() const {
    return m_accelerator_types;
}
void OAIDescribeAcceleratorTypesResponse::setAcceleratorTypes(const QList &accelerator_types) {
    m_accelerator_types = accelerator_types;
    m_accelerator_types_isSet = true;
}

bool OAIDescribeAcceleratorTypesResponse::is_accelerator_types_Set() const{
    return m_accelerator_types_isSet;
}

bool OAIDescribeAcceleratorTypesResponse::is_accelerator_types_Valid() const{
    return m_accelerator_types_isValid;
}

bool OAIDescribeAcceleratorTypesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accelerator_types.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeAcceleratorTypesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
