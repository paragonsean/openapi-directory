/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ElasticInferenceAcceleratorAcceleratorHealth from './ElasticInferenceAcceleratorAcceleratorHealth';

/**
 * The ElasticInferenceAccelerator model module.
 * @module model/ElasticInferenceAccelerator
 * @version 2017-07-25
 */
class ElasticInferenceAccelerator {
    /**
     * Constructs a new <code>ElasticInferenceAccelerator</code>.
     *  The details of an Elastic Inference Accelerator. 
     * @alias module:model/ElasticInferenceAccelerator
     */
    constructor() { 
        
        ElasticInferenceAccelerator.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ElasticInferenceAccelerator</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ElasticInferenceAccelerator} obj Optional instance to populate.
     * @return {module:model/ElasticInferenceAccelerator} The populated <code>ElasticInferenceAccelerator</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ElasticInferenceAccelerator();

            if (data.hasOwnProperty('acceleratorHealth')) {
                obj['acceleratorHealth'] = ElasticInferenceAcceleratorAcceleratorHealth.constructFromObject(data['acceleratorHealth']);
            }
            if (data.hasOwnProperty('acceleratorType')) {
                obj['acceleratorType'] = ApiClient.convertToType(data['acceleratorType'], 'String');
            }
            if (data.hasOwnProperty('acceleratorId')) {
                obj['acceleratorId'] = ApiClient.convertToType(data['acceleratorId'], 'String');
            }
            if (data.hasOwnProperty('availabilityZone')) {
                obj['availabilityZone'] = ApiClient.convertToType(data['availabilityZone'], 'String');
            }
            if (data.hasOwnProperty('attachedResource')) {
                obj['attachedResource'] = ApiClient.convertToType(data['attachedResource'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ElasticInferenceAccelerator</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ElasticInferenceAccelerator</code>.
     */
    static validateJSON(data) {
        // validate the optional field `acceleratorHealth`
        if (data['acceleratorHealth']) { // data not null
          ElasticInferenceAcceleratorAcceleratorHealth.validateJSON(data['acceleratorHealth']);
        }
        // validate the optional field `acceleratorType`
        if (data['acceleratorType']) { // data not null
          String.validateJSON(data['acceleratorType']);
        }
        // validate the optional field `acceleratorId`
        if (data['acceleratorId']) { // data not null
          String.validateJSON(data['acceleratorId']);
        }
        // validate the optional field `availabilityZone`
        if (data['availabilityZone']) { // data not null
          String.validateJSON(data['availabilityZone']);
        }
        // validate the optional field `attachedResource`
        if (data['attachedResource']) { // data not null
          String.validateJSON(data['attachedResource']);
        }

        return true;
    }


}



/**
 * @member {module:model/ElasticInferenceAcceleratorAcceleratorHealth} acceleratorHealth
 */
ElasticInferenceAccelerator.prototype['acceleratorHealth'] = undefined;

/**
 * @member {String} acceleratorType
 */
ElasticInferenceAccelerator.prototype['acceleratorType'] = undefined;

/**
 * @member {String} acceleratorId
 */
ElasticInferenceAccelerator.prototype['acceleratorId'] = undefined;

/**
 * @member {String} availabilityZone
 */
ElasticInferenceAccelerator.prototype['availabilityZone'] = undefined;

/**
 * @member {String} attachedResource
 */
ElasticInferenceAccelerator.prototype['attachedResource'] = undefined;






export default ElasticInferenceAccelerator;

