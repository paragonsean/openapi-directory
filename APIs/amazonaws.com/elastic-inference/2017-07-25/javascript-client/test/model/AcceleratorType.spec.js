/**
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonElasticInference);
  }
}(this, function(expect, AmazonElasticInference) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonElasticInference.AcceleratorType();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AcceleratorType', function() {
    it('should create an instance of AcceleratorType', function() {
      // uncomment below and update the code to test AcceleratorType
      //var instance = new AmazonElasticInference.AcceleratorType();
      //expect(instance).to.be.a(AmazonElasticInference.AcceleratorType);
    });

    it('should have the property acceleratorTypeName (base name: "acceleratorTypeName")', function() {
      // uncomment below and update the code to test the property acceleratorTypeName
      //var instance = new AmazonElasticInference.AcceleratorType();
      //expect(instance).to.be();
    });

    it('should have the property memoryInfo (base name: "memoryInfo")', function() {
      // uncomment below and update the code to test the property memoryInfo
      //var instance = new AmazonElasticInference.AcceleratorType();
      //expect(instance).to.be();
    });

    it('should have the property throughputInfo (base name: "throughputInfo")', function() {
      // uncomment below and update the code to test the property throughputInfo
      //var instance = new AmazonElasticInference.AcceleratorType();
      //expect(instance).to.be();
    });

  });

}));
