/*
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ElasticInferenceAcceleratorAcceleratorHealth;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The details of an Elastic Inference Accelerator. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:33.212123-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ElasticInferenceAccelerator {
  public static final String SERIALIZED_NAME_ACCELERATOR_HEALTH = "acceleratorHealth";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_HEALTH)
  private ElasticInferenceAcceleratorAcceleratorHealth acceleratorHealth;

  public static final String SERIALIZED_NAME_ACCELERATOR_TYPE = "acceleratorType";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_TYPE)
  private String acceleratorType;

  public static final String SERIALIZED_NAME_ACCELERATOR_ID = "acceleratorId";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_ID)
  private String acceleratorId;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE = "availabilityZone";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE)
  private String availabilityZone;

  public static final String SERIALIZED_NAME_ATTACHED_RESOURCE = "attachedResource";
  @SerializedName(SERIALIZED_NAME_ATTACHED_RESOURCE)
  private String attachedResource;

  public ElasticInferenceAccelerator() {
  }

  public ElasticInferenceAccelerator acceleratorHealth(ElasticInferenceAcceleratorAcceleratorHealth acceleratorHealth) {
    this.acceleratorHealth = acceleratorHealth;
    return this;
  }

  /**
   * Get acceleratorHealth
   * @return acceleratorHealth
   */
  @javax.annotation.Nullable
  public ElasticInferenceAcceleratorAcceleratorHealth getAcceleratorHealth() {
    return acceleratorHealth;
  }

  public void setAcceleratorHealth(ElasticInferenceAcceleratorAcceleratorHealth acceleratorHealth) {
    this.acceleratorHealth = acceleratorHealth;
  }


  public ElasticInferenceAccelerator acceleratorType(String acceleratorType) {
    this.acceleratorType = acceleratorType;
    return this;
  }

  /**
   * Get acceleratorType
   * @return acceleratorType
   */
  @javax.annotation.Nullable
  public String getAcceleratorType() {
    return acceleratorType;
  }

  public void setAcceleratorType(String acceleratorType) {
    this.acceleratorType = acceleratorType;
  }


  public ElasticInferenceAccelerator acceleratorId(String acceleratorId) {
    this.acceleratorId = acceleratorId;
    return this;
  }

  /**
   * Get acceleratorId
   * @return acceleratorId
   */
  @javax.annotation.Nullable
  public String getAcceleratorId() {
    return acceleratorId;
  }

  public void setAcceleratorId(String acceleratorId) {
    this.acceleratorId = acceleratorId;
  }


  public ElasticInferenceAccelerator availabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
    return this;
  }

  /**
   * Get availabilityZone
   * @return availabilityZone
   */
  @javax.annotation.Nullable
  public String getAvailabilityZone() {
    return availabilityZone;
  }

  public void setAvailabilityZone(String availabilityZone) {
    this.availabilityZone = availabilityZone;
  }


  public ElasticInferenceAccelerator attachedResource(String attachedResource) {
    this.attachedResource = attachedResource;
    return this;
  }

  /**
   * Get attachedResource
   * @return attachedResource
   */
  @javax.annotation.Nullable
  public String getAttachedResource() {
    return attachedResource;
  }

  public void setAttachedResource(String attachedResource) {
    this.attachedResource = attachedResource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ElasticInferenceAccelerator elasticInferenceAccelerator = (ElasticInferenceAccelerator) o;
    return Objects.equals(this.acceleratorHealth, elasticInferenceAccelerator.acceleratorHealth) &&
        Objects.equals(this.acceleratorType, elasticInferenceAccelerator.acceleratorType) &&
        Objects.equals(this.acceleratorId, elasticInferenceAccelerator.acceleratorId) &&
        Objects.equals(this.availabilityZone, elasticInferenceAccelerator.availabilityZone) &&
        Objects.equals(this.attachedResource, elasticInferenceAccelerator.attachedResource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceleratorHealth, acceleratorType, acceleratorId, availabilityZone, attachedResource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ElasticInferenceAccelerator {\n");
    sb.append("    acceleratorHealth: ").append(toIndentedString(acceleratorHealth)).append("\n");
    sb.append("    acceleratorType: ").append(toIndentedString(acceleratorType)).append("\n");
    sb.append("    acceleratorId: ").append(toIndentedString(acceleratorId)).append("\n");
    sb.append("    availabilityZone: ").append(toIndentedString(availabilityZone)).append("\n");
    sb.append("    attachedResource: ").append(toIndentedString(attachedResource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceleratorHealth");
    openapiFields.add("acceleratorType");
    openapiFields.add("acceleratorId");
    openapiFields.add("availabilityZone");
    openapiFields.add("attachedResource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ElasticInferenceAccelerator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ElasticInferenceAccelerator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ElasticInferenceAccelerator is not found in the empty JSON string", ElasticInferenceAccelerator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ElasticInferenceAccelerator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ElasticInferenceAccelerator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `acceleratorHealth`
      if (jsonObj.get("acceleratorHealth") != null && !jsonObj.get("acceleratorHealth").isJsonNull()) {
        ElasticInferenceAcceleratorAcceleratorHealth.validateJsonElement(jsonObj.get("acceleratorHealth"));
      }
      // validate the optional field `acceleratorType`
      if (jsonObj.get("acceleratorType") != null && !jsonObj.get("acceleratorType").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("acceleratorType"));
      }
      // validate the optional field `acceleratorId`
      if (jsonObj.get("acceleratorId") != null && !jsonObj.get("acceleratorId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("acceleratorId"));
      }
      // validate the optional field `availabilityZone`
      if (jsonObj.get("availabilityZone") != null && !jsonObj.get("availabilityZone").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("availabilityZone"));
      }
      // validate the optional field `attachedResource`
      if (jsonObj.get("attachedResource") != null && !jsonObj.get("attachedResource").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("attachedResource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ElasticInferenceAccelerator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ElasticInferenceAccelerator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ElasticInferenceAccelerator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ElasticInferenceAccelerator.class));

       return (TypeAdapter<T>) new TypeAdapter<ElasticInferenceAccelerator>() {
           @Override
           public void write(JsonWriter out, ElasticInferenceAccelerator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ElasticInferenceAccelerator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ElasticInferenceAccelerator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ElasticInferenceAccelerator
   * @throws IOException if the JSON string is invalid with respect to ElasticInferenceAccelerator
   */
  public static ElasticInferenceAccelerator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ElasticInferenceAccelerator.class);
  }

  /**
   * Convert an instance of ElasticInferenceAccelerator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

