/*
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AcceleratorTypeMemoryInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 *  The details of an Elastic Inference Accelerator type. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:33.212123-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AcceleratorType {
  public static final String SERIALIZED_NAME_ACCELERATOR_TYPE_NAME = "acceleratorTypeName";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_TYPE_NAME)
  private String acceleratorTypeName;

  public static final String SERIALIZED_NAME_MEMORY_INFO = "memoryInfo";
  @SerializedName(SERIALIZED_NAME_MEMORY_INFO)
  private AcceleratorTypeMemoryInfo memoryInfo;

  public static final String SERIALIZED_NAME_THROUGHPUT_INFO = "throughputInfo";
  @SerializedName(SERIALIZED_NAME_THROUGHPUT_INFO)
  private List throughputInfo;

  public AcceleratorType() {
  }

  public AcceleratorType acceleratorTypeName(String acceleratorTypeName) {
    this.acceleratorTypeName = acceleratorTypeName;
    return this;
  }

  /**
   * Get acceleratorTypeName
   * @return acceleratorTypeName
   */
  @javax.annotation.Nullable
  public String getAcceleratorTypeName() {
    return acceleratorTypeName;
  }

  public void setAcceleratorTypeName(String acceleratorTypeName) {
    this.acceleratorTypeName = acceleratorTypeName;
  }


  public AcceleratorType memoryInfo(AcceleratorTypeMemoryInfo memoryInfo) {
    this.memoryInfo = memoryInfo;
    return this;
  }

  /**
   * Get memoryInfo
   * @return memoryInfo
   */
  @javax.annotation.Nullable
  public AcceleratorTypeMemoryInfo getMemoryInfo() {
    return memoryInfo;
  }

  public void setMemoryInfo(AcceleratorTypeMemoryInfo memoryInfo) {
    this.memoryInfo = memoryInfo;
  }


  public AcceleratorType throughputInfo(List throughputInfo) {
    this.throughputInfo = throughputInfo;
    return this;
  }

  /**
   * Get throughputInfo
   * @return throughputInfo
   */
  @javax.annotation.Nullable
  public List getThroughputInfo() {
    return throughputInfo;
  }

  public void setThroughputInfo(List throughputInfo) {
    this.throughputInfo = throughputInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AcceleratorType acceleratorType = (AcceleratorType) o;
    return Objects.equals(this.acceleratorTypeName, acceleratorType.acceleratorTypeName) &&
        Objects.equals(this.memoryInfo, acceleratorType.memoryInfo) &&
        Objects.equals(this.throughputInfo, acceleratorType.throughputInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceleratorTypeName, memoryInfo, throughputInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AcceleratorType {\n");
    sb.append("    acceleratorTypeName: ").append(toIndentedString(acceleratorTypeName)).append("\n");
    sb.append("    memoryInfo: ").append(toIndentedString(memoryInfo)).append("\n");
    sb.append("    throughputInfo: ").append(toIndentedString(throughputInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acceleratorTypeName");
    openapiFields.add("memoryInfo");
    openapiFields.add("throughputInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AcceleratorType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AcceleratorType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AcceleratorType is not found in the empty JSON string", AcceleratorType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AcceleratorType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AcceleratorType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `acceleratorTypeName`
      if (jsonObj.get("acceleratorTypeName") != null && !jsonObj.get("acceleratorTypeName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("acceleratorTypeName"));
      }
      // validate the optional field `memoryInfo`
      if (jsonObj.get("memoryInfo") != null && !jsonObj.get("memoryInfo").isJsonNull()) {
        AcceleratorTypeMemoryInfo.validateJsonElement(jsonObj.get("memoryInfo"));
      }
      // validate the optional field `throughputInfo`
      if (jsonObj.get("throughputInfo") != null && !jsonObj.get("throughputInfo").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("throughputInfo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AcceleratorType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AcceleratorType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AcceleratorType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AcceleratorType.class));

       return (TypeAdapter<T>) new TypeAdapter<AcceleratorType>() {
           @Override
           public void write(JsonWriter out, AcceleratorType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AcceleratorType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AcceleratorType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AcceleratorType
   * @throws IOException if the JSON string is invalid with respect to AcceleratorType
   */
  public static AcceleratorType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AcceleratorType.class);
  }

  /**
   * Convert an instance of AcceleratorType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

