/*
 * Amazon Elastic  Inference
 * <p> Elastic Inference public APIs. </p> <p> February 15, 2023: Starting April 15, 2023, AWS will not onboard new customers to Amazon Elastic Inference (EI), and will help current customers migrate their workloads to options that offer better price and performance. After April 15, 2023, new customers will not be able to launch instances with Amazon EI accelerators in Amazon SageMaker, Amazon ECS, or Amazon EC2. However, customers who have used Amazon EI at least once during the past 30-day period are considered current customers and will be able to continue using the service. </p>
 *
 * The version of the OpenAPI document: 2017-07-25
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeAcceleratorOfferingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:28:33.212123-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeAcceleratorOfferingsRequest {
  /**
   *  The location type that you want to describe accelerator type offerings for. It can assume the following values: region: will return the accelerator type offering at the regional level. availability-zone: will return the accelerator type offering at the availability zone level. availability-zone-id: will return the accelerator type offering at the availability zone level returning the availability zone id. 
   */
  @JsonAdapter(LocationTypeEnum.Adapter.class)
  public enum LocationTypeEnum {
    REGION("region"),
    
    AVAILABILITY_ZONE("availability-zone"),
    
    AVAILABILITY_ZONE_ID("availability-zone-id");

    private String value;

    LocationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LocationTypeEnum fromValue(String value) {
      for (LocationTypeEnum b : LocationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LocationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LocationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LocationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LocationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LocationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "locationType";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private LocationTypeEnum locationType;

  public static final String SERIALIZED_NAME_ACCELERATOR_TYPES = "acceleratorTypes";
  @SerializedName(SERIALIZED_NAME_ACCELERATOR_TYPES)
  private List<String> acceleratorTypes = new ArrayList<>();

  public DescribeAcceleratorOfferingsRequest() {
  }

  public DescribeAcceleratorOfferingsRequest locationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   *  The location type that you want to describe accelerator type offerings for. It can assume the following values: region: will return the accelerator type offering at the regional level. availability-zone: will return the accelerator type offering at the availability zone level. availability-zone-id: will return the accelerator type offering at the availability zone level returning the availability zone id. 
   * @return locationType
   */
  @javax.annotation.Nonnull
  public LocationTypeEnum getLocationType() {
    return locationType;
  }

  public void setLocationType(LocationTypeEnum locationType) {
    this.locationType = locationType;
  }


  public DescribeAcceleratorOfferingsRequest acceleratorTypes(List<String> acceleratorTypes) {
    this.acceleratorTypes = acceleratorTypes;
    return this;
  }

  public DescribeAcceleratorOfferingsRequest addAcceleratorTypesItem(String acceleratorTypesItem) {
    if (this.acceleratorTypes == null) {
      this.acceleratorTypes = new ArrayList<>();
    }
    this.acceleratorTypes.add(acceleratorTypesItem);
    return this;
  }

  /**
   *  The list of accelerator types to describe. 
   * @return acceleratorTypes
   */
  @javax.annotation.Nullable
  public List<String> getAcceleratorTypes() {
    return acceleratorTypes;
  }

  public void setAcceleratorTypes(List<String> acceleratorTypes) {
    this.acceleratorTypes = acceleratorTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeAcceleratorOfferingsRequest describeAcceleratorOfferingsRequest = (DescribeAcceleratorOfferingsRequest) o;
    return Objects.equals(this.locationType, describeAcceleratorOfferingsRequest.locationType) &&
        Objects.equals(this.acceleratorTypes, describeAcceleratorOfferingsRequest.acceleratorTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationType, acceleratorTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeAcceleratorOfferingsRequest {\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    acceleratorTypes: ").append(toIndentedString(acceleratorTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("locationType");
    openapiFields.add("acceleratorTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("locationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeAcceleratorOfferingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeAcceleratorOfferingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeAcceleratorOfferingsRequest is not found in the empty JSON string", DescribeAcceleratorOfferingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeAcceleratorOfferingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeAcceleratorOfferingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DescribeAcceleratorOfferingsRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("locationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationType").toString()));
      }
      // validate the required field `locationType`
      LocationTypeEnum.validateJsonElement(jsonObj.get("locationType"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("acceleratorTypes") != null && !jsonObj.get("acceleratorTypes").isJsonNull() && !jsonObj.get("acceleratorTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `acceleratorTypes` to be an array in the JSON string but got `%s`", jsonObj.get("acceleratorTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeAcceleratorOfferingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeAcceleratorOfferingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeAcceleratorOfferingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeAcceleratorOfferingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeAcceleratorOfferingsRequest>() {
           @Override
           public void write(JsonWriter out, DescribeAcceleratorOfferingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeAcceleratorOfferingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeAcceleratorOfferingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeAcceleratorOfferingsRequest
   * @throws IOException if the JSON string is invalid with respect to DescribeAcceleratorOfferingsRequest
   */
  public static DescribeAcceleratorOfferingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeAcceleratorOfferingsRequest.class);
  }

  /**
   * Convert an instance of DescribeAcceleratorOfferingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

