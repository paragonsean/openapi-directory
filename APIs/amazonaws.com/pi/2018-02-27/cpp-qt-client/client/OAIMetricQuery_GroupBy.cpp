/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricQuery_GroupBy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricQuery_GroupBy::OAIMetricQuery_GroupBy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricQuery_GroupBy::OAIMetricQuery_GroupBy() {
    this->initializeModel();
}

OAIMetricQuery_GroupBy::~OAIMetricQuery_GroupBy() {}

void OAIMetricQuery_GroupBy::initializeModel() {

    m_group_isSet = false;
    m_group_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;
}

void OAIMetricQuery_GroupBy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricQuery_GroupBy::fromJsonObject(QJsonObject json) {

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("Group")]);
    m_group_isSet = !json[QString("Group")].isNull() && m_group_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;
}

QString OAIMetricQuery_GroupBy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricQuery_GroupBy::asJsonObject() const {
    QJsonObject obj;
    if (m_group_isSet) {
        obj.insert(QString("Group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    return obj;
}

QString OAIMetricQuery_GroupBy::getGroup() const {
    return m_group;
}
void OAIMetricQuery_GroupBy::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIMetricQuery_GroupBy::is_group_Set() const{
    return m_group_isSet;
}

bool OAIMetricQuery_GroupBy::is_group_Valid() const{
    return m_group_isValid;
}

QList OAIMetricQuery_GroupBy::getDimensions() const {
    return m_dimensions;
}
void OAIMetricQuery_GroupBy::setDimensions(const QList &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIMetricQuery_GroupBy::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIMetricQuery_GroupBy::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

qint32 OAIMetricQuery_GroupBy::getLimit() const {
    return m_limit;
}
void OAIMetricQuery_GroupBy::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIMetricQuery_GroupBy::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIMetricQuery_GroupBy::is_limit_Valid() const{
    return m_limit_isValid;
}

bool OAIMetricQuery_GroupBy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricQuery_GroupBy::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_group_isValid && true;
}

} // namespace OpenAPI
