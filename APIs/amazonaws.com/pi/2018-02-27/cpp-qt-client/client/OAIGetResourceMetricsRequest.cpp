/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetResourceMetricsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetResourceMetricsRequest::OAIGetResourceMetricsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetResourceMetricsRequest::OAIGetResourceMetricsRequest() {
    this->initializeModel();
}

OAIGetResourceMetricsRequest::~OAIGetResourceMetricsRequest() {}

void OAIGetResourceMetricsRequest::initializeModel() {

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_metric_queries_isSet = false;
    m_metric_queries_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_period_in_seconds_isSet = false;
    m_period_in_seconds_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;

    m_period_alignment_isSet = false;
    m_period_alignment_isValid = false;
}

void OAIGetResourceMetricsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetResourceMetricsRequest::fromJsonObject(QJsonObject json) {

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("ServiceType")]);
    m_service_type_isSet = !json[QString("ServiceType")].isNull() && m_service_type_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_metric_queries_isValid = ::OpenAPI::fromJsonValue(m_metric_queries, json[QString("MetricQueries")]);
    m_metric_queries_isSet = !json[QString("MetricQueries")].isNull() && m_metric_queries_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_period_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_period_in_seconds, json[QString("PeriodInSeconds")]);
    m_period_in_seconds_isSet = !json[QString("PeriodInSeconds")].isNull() && m_period_in_seconds_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;

    m_period_alignment_isValid = ::OpenAPI::fromJsonValue(m_period_alignment, json[QString("PeriodAlignment")]);
    m_period_alignment_isSet = !json[QString("PeriodAlignment")].isNull() && m_period_alignment_isValid;
}

QString OAIGetResourceMetricsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetResourceMetricsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_type.isSet()) {
        obj.insert(QString("ServiceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_metric_queries.isSet()) {
        obj.insert(QString("MetricQueries"), ::OpenAPI::toJsonValue(m_metric_queries));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_period_in_seconds_isSet) {
        obj.insert(QString("PeriodInSeconds"), ::OpenAPI::toJsonValue(m_period_in_seconds));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    if (m_period_alignment.isSet()) {
        obj.insert(QString("PeriodAlignment"), ::OpenAPI::toJsonValue(m_period_alignment));
    }
    return obj;
}

OAIServiceType OAIGetResourceMetricsRequest::getServiceType() const {
    return m_service_type;
}
void OAIGetResourceMetricsRequest::setServiceType(const OAIServiceType &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAIGetResourceMetricsRequest::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QString OAIGetResourceMetricsRequest::getIdentifier() const {
    return m_identifier;
}
void OAIGetResourceMetricsRequest::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIGetResourceMetricsRequest::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QList OAIGetResourceMetricsRequest::getMetricQueries() const {
    return m_metric_queries;
}
void OAIGetResourceMetricsRequest::setMetricQueries(const QList &metric_queries) {
    m_metric_queries = metric_queries;
    m_metric_queries_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_metric_queries_Set() const{
    return m_metric_queries_isSet;
}

bool OAIGetResourceMetricsRequest::is_metric_queries_Valid() const{
    return m_metric_queries_isValid;
}

QDateTime OAIGetResourceMetricsRequest::getStartTime() const {
    return m_start_time;
}
void OAIGetResourceMetricsRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIGetResourceMetricsRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIGetResourceMetricsRequest::getEndTime() const {
    return m_end_time;
}
void OAIGetResourceMetricsRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGetResourceMetricsRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint32 OAIGetResourceMetricsRequest::getPeriodInSeconds() const {
    return m_period_in_seconds;
}
void OAIGetResourceMetricsRequest::setPeriodInSeconds(const qint32 &period_in_seconds) {
    m_period_in_seconds = period_in_seconds;
    m_period_in_seconds_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_period_in_seconds_Set() const{
    return m_period_in_seconds_isSet;
}

bool OAIGetResourceMetricsRequest::is_period_in_seconds_Valid() const{
    return m_period_in_seconds_isValid;
}

qint32 OAIGetResourceMetricsRequest::getMaxResults() const {
    return m_max_results;
}
void OAIGetResourceMetricsRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGetResourceMetricsRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGetResourceMetricsRequest::getNextToken() const {
    return m_next_token;
}
void OAIGetResourceMetricsRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetResourceMetricsRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

OAIPeriodAlignment OAIGetResourceMetricsRequest::getPeriodAlignment() const {
    return m_period_alignment;
}
void OAIGetResourceMetricsRequest::setPeriodAlignment(const OAIPeriodAlignment &period_alignment) {
    m_period_alignment = period_alignment;
    m_period_alignment_isSet = true;
}

bool OAIGetResourceMetricsRequest::is_period_alignment_Set() const{
    return m_period_alignment_isSet;
}

bool OAIGetResourceMetricsRequest::is_period_alignment_Valid() const{
    return m_period_alignment_isValid;
}

bool OAIGetResourceMetricsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_queries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetResourceMetricsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_type_isValid && m_identifier_isValid && m_metric_queries_isValid && m_start_time_isValid && m_end_time_isValid && true;
}

} // namespace OpenAPI
