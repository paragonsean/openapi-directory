/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricKeyDataPoints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricKeyDataPoints::OAIMetricKeyDataPoints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricKeyDataPoints::OAIMetricKeyDataPoints() {
    this->initializeModel();
}

OAIMetricKeyDataPoints::~OAIMetricKeyDataPoints() {}

void OAIMetricKeyDataPoints::initializeModel() {

    m_key_isSet = false;
    m_key_isValid = false;

    m_data_points_isSet = false;
    m_data_points_isValid = false;
}

void OAIMetricKeyDataPoints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricKeyDataPoints::fromJsonObject(QJsonObject json) {

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("Key")]);
    m_key_isSet = !json[QString("Key")].isNull() && m_key_isValid;

    m_data_points_isValid = ::OpenAPI::fromJsonValue(m_data_points, json[QString("DataPoints")]);
    m_data_points_isSet = !json[QString("DataPoints")].isNull() && m_data_points_isValid;
}

QString OAIMetricKeyDataPoints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricKeyDataPoints::asJsonObject() const {
    QJsonObject obj;
    if (m_key.isSet()) {
        obj.insert(QString("Key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_data_points.isSet()) {
        obj.insert(QString("DataPoints"), ::OpenAPI::toJsonValue(m_data_points));
    }
    return obj;
}

OAIMetricKeyDataPoints_Key OAIMetricKeyDataPoints::getKey() const {
    return m_key;
}
void OAIMetricKeyDataPoints::setKey(const OAIMetricKeyDataPoints_Key &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIMetricKeyDataPoints::is_key_Set() const{
    return m_key_isSet;
}

bool OAIMetricKeyDataPoints::is_key_Valid() const{
    return m_key_isValid;
}

QList OAIMetricKeyDataPoints::getDataPoints() const {
    return m_data_points;
}
void OAIMetricKeyDataPoints::setDataPoints(const QList &data_points) {
    m_data_points = data_points;
    m_data_points_isSet = true;
}

bool OAIMetricKeyDataPoints::is_data_points_Set() const{
    return m_data_points_isSet;
}

bool OAIMetricKeyDataPoints::is_data_points_Valid() const{
    return m_data_points_isValid;
}

bool OAIMetricKeyDataPoints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_points.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricKeyDataPoints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
