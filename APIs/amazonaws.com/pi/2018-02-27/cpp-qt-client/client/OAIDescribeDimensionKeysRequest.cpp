/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescribeDimensionKeysRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescribeDimensionKeysRequest::OAIDescribeDimensionKeysRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescribeDimensionKeysRequest::OAIDescribeDimensionKeysRequest() {
    this->initializeModel();
}

OAIDescribeDimensionKeysRequest::~OAIDescribeDimensionKeysRequest() {}

void OAIDescribeDimensionKeysRequest::initializeModel() {

    m_service_type_isSet = false;
    m_service_type_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_metric_isSet = false;
    m_metric_isValid = false;

    m_period_in_seconds_isSet = false;
    m_period_in_seconds_isValid = false;

    m_group_by_isSet = false;
    m_group_by_isValid = false;

    m_additional_metrics_isSet = false;
    m_additional_metrics_isValid = false;

    m_partition_by_isSet = false;
    m_partition_by_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIDescribeDimensionKeysRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescribeDimensionKeysRequest::fromJsonObject(QJsonObject json) {

    m_service_type_isValid = ::OpenAPI::fromJsonValue(m_service_type, json[QString("ServiceType")]);
    m_service_type_isSet = !json[QString("ServiceType")].isNull() && m_service_type_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("StartTime")]);
    m_start_time_isSet = !json[QString("StartTime")].isNull() && m_start_time_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("EndTime")]);
    m_end_time_isSet = !json[QString("EndTime")].isNull() && m_end_time_isValid;

    m_metric_isValid = ::OpenAPI::fromJsonValue(m_metric, json[QString("Metric")]);
    m_metric_isSet = !json[QString("Metric")].isNull() && m_metric_isValid;

    m_period_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_period_in_seconds, json[QString("PeriodInSeconds")]);
    m_period_in_seconds_isSet = !json[QString("PeriodInSeconds")].isNull() && m_period_in_seconds_isValid;

    m_group_by_isValid = ::OpenAPI::fromJsonValue(m_group_by, json[QString("GroupBy")]);
    m_group_by_isSet = !json[QString("GroupBy")].isNull() && m_group_by_isValid;

    m_additional_metrics_isValid = ::OpenAPI::fromJsonValue(m_additional_metrics, json[QString("AdditionalMetrics")]);
    m_additional_metrics_isSet = !json[QString("AdditionalMetrics")].isNull() && m_additional_metrics_isValid;

    m_partition_by_isValid = ::OpenAPI::fromJsonValue(m_partition_by, json[QString("PartitionBy")]);
    m_partition_by_isSet = !json[QString("PartitionBy")].isNull() && m_partition_by_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("Filter")]);
    m_filter_isSet = !json[QString("Filter")].isNull() && m_filter_isValid;

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("MaxResults")]);
    m_max_results_isSet = !json[QString("MaxResults")].isNull() && m_max_results_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIDescribeDimensionKeysRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescribeDimensionKeysRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_service_type.isSet()) {
        obj.insert(QString("ServiceType"), ::OpenAPI::toJsonValue(m_service_type));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("StartTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("EndTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_metric_isSet) {
        obj.insert(QString("Metric"), ::OpenAPI::toJsonValue(m_metric));
    }
    if (m_period_in_seconds_isSet) {
        obj.insert(QString("PeriodInSeconds"), ::OpenAPI::toJsonValue(m_period_in_seconds));
    }
    if (m_group_by.isSet()) {
        obj.insert(QString("GroupBy"), ::OpenAPI::toJsonValue(m_group_by));
    }
    if (m_additional_metrics.isSet()) {
        obj.insert(QString("AdditionalMetrics"), ::OpenAPI::toJsonValue(m_additional_metrics));
    }
    if (m_partition_by.isSet()) {
        obj.insert(QString("PartitionBy"), ::OpenAPI::toJsonValue(m_partition_by));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("Filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_max_results_isSet) {
        obj.insert(QString("MaxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

OAIServiceType OAIDescribeDimensionKeysRequest::getServiceType() const {
    return m_service_type;
}
void OAIDescribeDimensionKeysRequest::setServiceType(const OAIServiceType &service_type) {
    m_service_type = service_type;
    m_service_type_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_service_type_Set() const{
    return m_service_type_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_service_type_Valid() const{
    return m_service_type_isValid;
}

QString OAIDescribeDimensionKeysRequest::getIdentifier() const {
    return m_identifier;
}
void OAIDescribeDimensionKeysRequest::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QDateTime OAIDescribeDimensionKeysRequest::getStartTime() const {
    return m_start_time;
}
void OAIDescribeDimensionKeysRequest::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QDateTime OAIDescribeDimensionKeysRequest::getEndTime() const {
    return m_end_time;
}
void OAIDescribeDimensionKeysRequest::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIDescribeDimensionKeysRequest::getMetric() const {
    return m_metric;
}
void OAIDescribeDimensionKeysRequest::setMetric(const QString &metric) {
    m_metric = metric;
    m_metric_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_metric_Set() const{
    return m_metric_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_metric_Valid() const{
    return m_metric_isValid;
}

qint32 OAIDescribeDimensionKeysRequest::getPeriodInSeconds() const {
    return m_period_in_seconds;
}
void OAIDescribeDimensionKeysRequest::setPeriodInSeconds(const qint32 &period_in_seconds) {
    m_period_in_seconds = period_in_seconds;
    m_period_in_seconds_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_period_in_seconds_Set() const{
    return m_period_in_seconds_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_period_in_seconds_Valid() const{
    return m_period_in_seconds_isValid;
}

OAIDescribeDimensionKeysRequest_GroupBy OAIDescribeDimensionKeysRequest::getGroupBy() const {
    return m_group_by;
}
void OAIDescribeDimensionKeysRequest::setGroupBy(const OAIDescribeDimensionKeysRequest_GroupBy &group_by) {
    m_group_by = group_by;
    m_group_by_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_group_by_Set() const{
    return m_group_by_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_group_by_Valid() const{
    return m_group_by_isValid;
}

QList OAIDescribeDimensionKeysRequest::getAdditionalMetrics() const {
    return m_additional_metrics;
}
void OAIDescribeDimensionKeysRequest::setAdditionalMetrics(const QList &additional_metrics) {
    m_additional_metrics = additional_metrics;
    m_additional_metrics_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_additional_metrics_Set() const{
    return m_additional_metrics_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_additional_metrics_Valid() const{
    return m_additional_metrics_isValid;
}

OAIDescribeDimensionKeysRequest_PartitionBy OAIDescribeDimensionKeysRequest::getPartitionBy() const {
    return m_partition_by;
}
void OAIDescribeDimensionKeysRequest::setPartitionBy(const OAIDescribeDimensionKeysRequest_PartitionBy &partition_by) {
    m_partition_by = partition_by;
    m_partition_by_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_partition_by_Set() const{
    return m_partition_by_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_partition_by_Valid() const{
    return m_partition_by_isValid;
}

QMap OAIDescribeDimensionKeysRequest::getFilter() const {
    return m_filter;
}
void OAIDescribeDimensionKeysRequest::setFilter(const QMap &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_filter_Valid() const{
    return m_filter_isValid;
}

qint32 OAIDescribeDimensionKeysRequest::getMaxResults() const {
    return m_max_results;
}
void OAIDescribeDimensionKeysRequest::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIDescribeDimensionKeysRequest::getNextToken() const {
    return m_next_token;
}
void OAIDescribeDimensionKeysRequest::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIDescribeDimensionKeysRequest::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIDescribeDimensionKeysRequest::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIDescribeDimensionKeysRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_service_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partition_by.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescribeDimensionKeysRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_service_type_isValid && m_identifier_isValid && m_start_time_isValid && m_end_time_isValid && m_metric_isValid && m_group_by_isValid && true;
}

} // namespace OpenAPI
