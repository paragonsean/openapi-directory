/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDimensionKeyDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDimensionKeyDescription::OAIDimensionKeyDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDimensionKeyDescription::OAIDimensionKeyDescription() {
    this->initializeModel();
}

OAIDimensionKeyDescription::~OAIDimensionKeyDescription() {}

void OAIDimensionKeyDescription::initializeModel() {

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_additional_metrics_isSet = false;
    m_additional_metrics_isValid = false;

    m_partitions_isSet = false;
    m_partitions_isValid = false;
}

void OAIDimensionKeyDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDimensionKeyDescription::fromJsonObject(QJsonObject json) {

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("Dimensions")]);
    m_dimensions_isSet = !json[QString("Dimensions")].isNull() && m_dimensions_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;

    m_additional_metrics_isValid = ::OpenAPI::fromJsonValue(m_additional_metrics, json[QString("AdditionalMetrics")]);
    m_additional_metrics_isSet = !json[QString("AdditionalMetrics")].isNull() && m_additional_metrics_isValid;

    m_partitions_isValid = ::OpenAPI::fromJsonValue(m_partitions, json[QString("Partitions")]);
    m_partitions_isSet = !json[QString("Partitions")].isNull() && m_partitions_isValid;
}

QString OAIDimensionKeyDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDimensionKeyDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_dimensions.isSet()) {
        obj.insert(QString("Dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_additional_metrics.isSet()) {
        obj.insert(QString("AdditionalMetrics"), ::OpenAPI::toJsonValue(m_additional_metrics));
    }
    if (m_partitions.isSet()) {
        obj.insert(QString("Partitions"), ::OpenAPI::toJsonValue(m_partitions));
    }
    return obj;
}

QMap OAIDimensionKeyDescription::getDimensions() const {
    return m_dimensions;
}
void OAIDimensionKeyDescription::setDimensions(const QMap &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAIDimensionKeyDescription::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAIDimensionKeyDescription::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

double OAIDimensionKeyDescription::getTotal() const {
    return m_total;
}
void OAIDimensionKeyDescription::setTotal(const double &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIDimensionKeyDescription::is_total_Set() const{
    return m_total_isSet;
}

bool OAIDimensionKeyDescription::is_total_Valid() const{
    return m_total_isValid;
}

QMap OAIDimensionKeyDescription::getAdditionalMetrics() const {
    return m_additional_metrics;
}
void OAIDimensionKeyDescription::setAdditionalMetrics(const QMap &additional_metrics) {
    m_additional_metrics = additional_metrics;
    m_additional_metrics_isSet = true;
}

bool OAIDimensionKeyDescription::is_additional_metrics_Set() const{
    return m_additional_metrics_isSet;
}

bool OAIDimensionKeyDescription::is_additional_metrics_Valid() const{
    return m_additional_metrics_isValid;
}

QList OAIDimensionKeyDescription::getPartitions() const {
    return m_partitions;
}
void OAIDimensionKeyDescription::setPartitions(const QList &partitions) {
    m_partitions = partitions;
    m_partitions_isSet = true;
}

bool OAIDimensionKeyDescription::is_partitions_Set() const{
    return m_partitions_isSet;
}

bool OAIDimensionKeyDescription::is_partitions_Valid() const{
    return m_partitions_isValid;
}

bool OAIDimensionKeyDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_metrics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partitions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDimensionKeyDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
