/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDescribeDimensionKeysRequest.h
 *
 * 
 */

#ifndef OAIDescribeDimensionKeysRequest_H
#define OAIDescribeDimensionKeysRequest_H

#include <QJsonObject>

#include "OAIDescribeDimensionKeysRequest_GroupBy.h"
#include "OAIDescribeDimensionKeysRequest_PartitionBy.h"
#include "OAIServiceType.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDescribeDimensionKeysRequest_GroupBy;
class OAIDescribeDimensionKeysRequest_PartitionBy;

class OAIDescribeDimensionKeysRequest : public OAIObject {
public:
    OAIDescribeDimensionKeysRequest();
    OAIDescribeDimensionKeysRequest(QString json);
    ~OAIDescribeDimensionKeysRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIServiceType getServiceType() const;
    void setServiceType(const OAIServiceType &service_type);
    bool is_service_type_Set() const;
    bool is_service_type_Valid() const;

    QString getIdentifier() const;
    void setIdentifier(const QString &identifier);
    bool is_identifier_Set() const;
    bool is_identifier_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    QString getMetric() const;
    void setMetric(const QString &metric);
    bool is_metric_Set() const;
    bool is_metric_Valid() const;

    qint32 getPeriodInSeconds() const;
    void setPeriodInSeconds(const qint32 &period_in_seconds);
    bool is_period_in_seconds_Set() const;
    bool is_period_in_seconds_Valid() const;

    OAIDescribeDimensionKeysRequest_GroupBy getGroupBy() const;
    void setGroupBy(const OAIDescribeDimensionKeysRequest_GroupBy &group_by);
    bool is_group_by_Set() const;
    bool is_group_by_Valid() const;

    QList getAdditionalMetrics() const;
    void setAdditionalMetrics(const QList &additional_metrics);
    bool is_additional_metrics_Set() const;
    bool is_additional_metrics_Valid() const;

    OAIDescribeDimensionKeysRequest_PartitionBy getPartitionBy() const;
    void setPartitionBy(const OAIDescribeDimensionKeysRequest_PartitionBy &partition_by);
    bool is_partition_by_Set() const;
    bool is_partition_by_Valid() const;

    QMap getFilter() const;
    void setFilter(const QMap &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    qint32 getMaxResults() const;
    void setMaxResults(const qint32 &max_results);
    bool is_max_results_Set() const;
    bool is_max_results_Valid() const;

    QString getNextToken() const;
    void setNextToken(const QString &next_token);
    bool is_next_token_Set() const;
    bool is_next_token_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIServiceType m_service_type;
    bool m_service_type_isSet;
    bool m_service_type_isValid;

    QString m_identifier;
    bool m_identifier_isSet;
    bool m_identifier_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    QString m_metric;
    bool m_metric_isSet;
    bool m_metric_isValid;

    qint32 m_period_in_seconds;
    bool m_period_in_seconds_isSet;
    bool m_period_in_seconds_isValid;

    OAIDescribeDimensionKeysRequest_GroupBy m_group_by;
    bool m_group_by_isSet;
    bool m_group_by_isValid;

    QList m_additional_metrics;
    bool m_additional_metrics_isSet;
    bool m_additional_metrics_isValid;

    OAIDescribeDimensionKeysRequest_PartitionBy m_partition_by;
    bool m_partition_by_isSet;
    bool m_partition_by_isValid;

    QMap m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    qint32 m_max_results;
    bool m_max_results_isSet;
    bool m_max_results_isValid;

    QString m_next_token;
    bool m_next_token_isSet;
    bool m_next_token_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDescribeDimensionKeysRequest)

#endif // OAIDescribeDimensionKeysRequest_H
