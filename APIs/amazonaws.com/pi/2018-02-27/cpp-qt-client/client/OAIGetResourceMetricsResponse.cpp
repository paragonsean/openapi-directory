/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetResourceMetricsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetResourceMetricsResponse::OAIGetResourceMetricsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetResourceMetricsResponse::OAIGetResourceMetricsResponse() {
    this->initializeModel();
}

OAIGetResourceMetricsResponse::~OAIGetResourceMetricsResponse() {}

void OAIGetResourceMetricsResponse::initializeModel() {

    m_aligned_start_time_isSet = false;
    m_aligned_start_time_isValid = false;

    m_aligned_end_time_isSet = false;
    m_aligned_end_time_isValid = false;

    m_identifier_isSet = false;
    m_identifier_isValid = false;

    m_metric_list_isSet = false;
    m_metric_list_isValid = false;

    m_next_token_isSet = false;
    m_next_token_isValid = false;
}

void OAIGetResourceMetricsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetResourceMetricsResponse::fromJsonObject(QJsonObject json) {

    m_aligned_start_time_isValid = ::OpenAPI::fromJsonValue(m_aligned_start_time, json[QString("AlignedStartTime")]);
    m_aligned_start_time_isSet = !json[QString("AlignedStartTime")].isNull() && m_aligned_start_time_isValid;

    m_aligned_end_time_isValid = ::OpenAPI::fromJsonValue(m_aligned_end_time, json[QString("AlignedEndTime")]);
    m_aligned_end_time_isSet = !json[QString("AlignedEndTime")].isNull() && m_aligned_end_time_isValid;

    m_identifier_isValid = ::OpenAPI::fromJsonValue(m_identifier, json[QString("Identifier")]);
    m_identifier_isSet = !json[QString("Identifier")].isNull() && m_identifier_isValid;

    m_metric_list_isValid = ::OpenAPI::fromJsonValue(m_metric_list, json[QString("MetricList")]);
    m_metric_list_isSet = !json[QString("MetricList")].isNull() && m_metric_list_isValid;

    m_next_token_isValid = ::OpenAPI::fromJsonValue(m_next_token, json[QString("NextToken")]);
    m_next_token_isSet = !json[QString("NextToken")].isNull() && m_next_token_isValid;
}

QString OAIGetResourceMetricsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetResourceMetricsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_aligned_start_time_isSet) {
        obj.insert(QString("AlignedStartTime"), ::OpenAPI::toJsonValue(m_aligned_start_time));
    }
    if (m_aligned_end_time_isSet) {
        obj.insert(QString("AlignedEndTime"), ::OpenAPI::toJsonValue(m_aligned_end_time));
    }
    if (m_identifier_isSet) {
        obj.insert(QString("Identifier"), ::OpenAPI::toJsonValue(m_identifier));
    }
    if (m_metric_list.isSet()) {
        obj.insert(QString("MetricList"), ::OpenAPI::toJsonValue(m_metric_list));
    }
    if (m_next_token_isSet) {
        obj.insert(QString("NextToken"), ::OpenAPI::toJsonValue(m_next_token));
    }
    return obj;
}

QDateTime OAIGetResourceMetricsResponse::getAlignedStartTime() const {
    return m_aligned_start_time;
}
void OAIGetResourceMetricsResponse::setAlignedStartTime(const QDateTime &aligned_start_time) {
    m_aligned_start_time = aligned_start_time;
    m_aligned_start_time_isSet = true;
}

bool OAIGetResourceMetricsResponse::is_aligned_start_time_Set() const{
    return m_aligned_start_time_isSet;
}

bool OAIGetResourceMetricsResponse::is_aligned_start_time_Valid() const{
    return m_aligned_start_time_isValid;
}

QDateTime OAIGetResourceMetricsResponse::getAlignedEndTime() const {
    return m_aligned_end_time;
}
void OAIGetResourceMetricsResponse::setAlignedEndTime(const QDateTime &aligned_end_time) {
    m_aligned_end_time = aligned_end_time;
    m_aligned_end_time_isSet = true;
}

bool OAIGetResourceMetricsResponse::is_aligned_end_time_Set() const{
    return m_aligned_end_time_isSet;
}

bool OAIGetResourceMetricsResponse::is_aligned_end_time_Valid() const{
    return m_aligned_end_time_isValid;
}

QString OAIGetResourceMetricsResponse::getIdentifier() const {
    return m_identifier;
}
void OAIGetResourceMetricsResponse::setIdentifier(const QString &identifier) {
    m_identifier = identifier;
    m_identifier_isSet = true;
}

bool OAIGetResourceMetricsResponse::is_identifier_Set() const{
    return m_identifier_isSet;
}

bool OAIGetResourceMetricsResponse::is_identifier_Valid() const{
    return m_identifier_isValid;
}

QList OAIGetResourceMetricsResponse::getMetricList() const {
    return m_metric_list;
}
void OAIGetResourceMetricsResponse::setMetricList(const QList &metric_list) {
    m_metric_list = metric_list;
    m_metric_list_isSet = true;
}

bool OAIGetResourceMetricsResponse::is_metric_list_Set() const{
    return m_metric_list_isSet;
}

bool OAIGetResourceMetricsResponse::is_metric_list_Valid() const{
    return m_metric_list_isValid;
}

QString OAIGetResourceMetricsResponse::getNextToken() const {
    return m_next_token;
}
void OAIGetResourceMetricsResponse::setNextToken(const QString &next_token) {
    m_next_token = next_token;
    m_next_token_isSet = true;
}

bool OAIGetResourceMetricsResponse::is_next_token_Set() const{
    return m_next_token_isSet;
}

bool OAIGetResourceMetricsResponse::is_next_token_Valid() const{
    return m_next_token_isValid;
}

bool OAIGetResourceMetricsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aligned_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aligned_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_list.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetResourceMetricsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
