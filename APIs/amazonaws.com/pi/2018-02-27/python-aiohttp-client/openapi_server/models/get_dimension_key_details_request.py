# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_type import ServiceType
from openapi_server import util


class GetDimensionKeyDetailsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_type: ServiceType=None, identifier: str=None, group: str=None, group_identifier: str=None, requested_dimensions: List=None):
        """GetDimensionKeyDetailsRequest - a model defined in OpenAPI

        :param service_type: The service_type of this GetDimensionKeyDetailsRequest.
        :param identifier: The identifier of this GetDimensionKeyDetailsRequest.
        :param group: The group of this GetDimensionKeyDetailsRequest.
        :param group_identifier: The group_identifier of this GetDimensionKeyDetailsRequest.
        :param requested_dimensions: The requested_dimensions of this GetDimensionKeyDetailsRequest.
        """
        self.openapi_types = {
            'service_type': ServiceType,
            'identifier': str,
            'group': str,
            'group_identifier': str,
            'requested_dimensions': List
        }

        self.attribute_map = {
            'service_type': 'ServiceType',
            'identifier': 'Identifier',
            'group': 'Group',
            'group_identifier': 'GroupIdentifier',
            'requested_dimensions': 'RequestedDimensions'
        }

        self._service_type = service_type
        self._identifier = identifier
        self._group = group
        self._group_identifier = group_identifier
        self._requested_dimensions = requested_dimensions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDimensionKeyDetailsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetDimensionKeyDetailsRequest of this GetDimensionKeyDetailsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_type(self):
        """Gets the service_type of this GetDimensionKeyDetailsRequest.


        :return: The service_type of this GetDimensionKeyDetailsRequest.
        :rtype: ServiceType
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this GetDimensionKeyDetailsRequest.


        :param service_type: The service_type of this GetDimensionKeyDetailsRequest.
        :type service_type: ServiceType
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")

        self._service_type = service_type

    @property
    def identifier(self):
        """Gets the identifier of this GetDimensionKeyDetailsRequest.


        :return: The identifier of this GetDimensionKeyDetailsRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this GetDimensionKeyDetailsRequest.


        :param identifier: The identifier of this GetDimensionKeyDetailsRequest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def group(self):
        """Gets the group of this GetDimensionKeyDetailsRequest.


        :return: The group of this GetDimensionKeyDetailsRequest.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this GetDimensionKeyDetailsRequest.


        :param group: The group of this GetDimensionKeyDetailsRequest.
        :type group: str
        """
        if group is None:
            raise ValueError("Invalid value for `group`, must not be `None`")

        self._group = group

    @property
    def group_identifier(self):
        """Gets the group_identifier of this GetDimensionKeyDetailsRequest.


        :return: The group_identifier of this GetDimensionKeyDetailsRequest.
        :rtype: str
        """
        return self._group_identifier

    @group_identifier.setter
    def group_identifier(self, group_identifier):
        """Sets the group_identifier of this GetDimensionKeyDetailsRequest.


        :param group_identifier: The group_identifier of this GetDimensionKeyDetailsRequest.
        :type group_identifier: str
        """
        if group_identifier is None:
            raise ValueError("Invalid value for `group_identifier`, must not be `None`")

        self._group_identifier = group_identifier

    @property
    def requested_dimensions(self):
        """Gets the requested_dimensions of this GetDimensionKeyDetailsRequest.


        :return: The requested_dimensions of this GetDimensionKeyDetailsRequest.
        :rtype: List
        """
        return self._requested_dimensions

    @requested_dimensions.setter
    def requested_dimensions(self, requested_dimensions):
        """Sets the requested_dimensions of this GetDimensionKeyDetailsRequest.


        :param requested_dimensions: The requested_dimensions of this GetDimensionKeyDetailsRequest.
        :type requested_dimensions: List
        """

        self._requested_dimensions = requested_dimensions
