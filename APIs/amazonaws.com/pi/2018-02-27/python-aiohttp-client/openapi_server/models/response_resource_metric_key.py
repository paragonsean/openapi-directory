# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseResourceMetricKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metric: str=None, dimensions: Dict=None):
        """ResponseResourceMetricKey - a model defined in OpenAPI

        :param metric: The metric of this ResponseResourceMetricKey.
        :param dimensions: The dimensions of this ResponseResourceMetricKey.
        """
        self.openapi_types = {
            'metric': str,
            'dimensions': Dict
        }

        self.attribute_map = {
            'metric': 'Metric',
            'dimensions': 'Dimensions'
        }

        self._metric = metric
        self._dimensions = dimensions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseResourceMetricKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseResourceMetricKey of this ResponseResourceMetricKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric(self):
        """Gets the metric of this ResponseResourceMetricKey.


        :return: The metric of this ResponseResourceMetricKey.
        :rtype: str
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this ResponseResourceMetricKey.


        :param metric: The metric of this ResponseResourceMetricKey.
        :type metric: str
        """
        if metric is None:
            raise ValueError("Invalid value for `metric`, must not be `None`")

        self._metric = metric

    @property
    def dimensions(self):
        """Gets the dimensions of this ResponseResourceMetricKey.


        :return: The dimensions of this ResponseResourceMetricKey.
        :rtype: Dict
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this ResponseResourceMetricKey.


        :param dimensions: The dimensions of this ResponseResourceMetricKey.
        :type dimensions: Dict
        """

        self._dimensions = dimensions
