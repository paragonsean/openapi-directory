# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_type import ServiceType
from openapi_server import util


class ListAvailableResourceDimensionsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_type: ServiceType=None, identifier: str=None, metrics: List=None, max_results: int=None, next_token: str=None):
        """ListAvailableResourceDimensionsRequest - a model defined in OpenAPI

        :param service_type: The service_type of this ListAvailableResourceDimensionsRequest.
        :param identifier: The identifier of this ListAvailableResourceDimensionsRequest.
        :param metrics: The metrics of this ListAvailableResourceDimensionsRequest.
        :param max_results: The max_results of this ListAvailableResourceDimensionsRequest.
        :param next_token: The next_token of this ListAvailableResourceDimensionsRequest.
        """
        self.openapi_types = {
            'service_type': ServiceType,
            'identifier': str,
            'metrics': List,
            'max_results': int,
            'next_token': str
        }

        self.attribute_map = {
            'service_type': 'ServiceType',
            'identifier': 'Identifier',
            'metrics': 'Metrics',
            'max_results': 'MaxResults',
            'next_token': 'NextToken'
        }

        self._service_type = service_type
        self._identifier = identifier
        self._metrics = metrics
        self._max_results = max_results
        self._next_token = next_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAvailableResourceDimensionsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAvailableResourceDimensionsRequest of this ListAvailableResourceDimensionsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_type(self):
        """Gets the service_type of this ListAvailableResourceDimensionsRequest.


        :return: The service_type of this ListAvailableResourceDimensionsRequest.
        :rtype: ServiceType
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ListAvailableResourceDimensionsRequest.


        :param service_type: The service_type of this ListAvailableResourceDimensionsRequest.
        :type service_type: ServiceType
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")

        self._service_type = service_type

    @property
    def identifier(self):
        """Gets the identifier of this ListAvailableResourceDimensionsRequest.


        :return: The identifier of this ListAvailableResourceDimensionsRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ListAvailableResourceDimensionsRequest.


        :param identifier: The identifier of this ListAvailableResourceDimensionsRequest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def metrics(self):
        """Gets the metrics of this ListAvailableResourceDimensionsRequest.


        :return: The metrics of this ListAvailableResourceDimensionsRequest.
        :rtype: List
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ListAvailableResourceDimensionsRequest.


        :param metrics: The metrics of this ListAvailableResourceDimensionsRequest.
        :type metrics: List
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")

        self._metrics = metrics

    @property
    def max_results(self):
        """Gets the max_results of this ListAvailableResourceDimensionsRequest.


        :return: The max_results of this ListAvailableResourceDimensionsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListAvailableResourceDimensionsRequest.


        :param max_results: The max_results of this ListAvailableResourceDimensionsRequest.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def next_token(self):
        """Gets the next_token of this ListAvailableResourceDimensionsRequest.


        :return: The next_token of this ListAvailableResourceDimensionsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListAvailableResourceDimensionsRequest.


        :param next_token: The next_token of this ListAvailableResourceDimensionsRequest.
        :type next_token: str
        """

        self._next_token = next_token
