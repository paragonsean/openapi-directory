# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_type import ServiceType
from openapi_server import util


class ListAvailableResourceMetricsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_type: ServiceType=None, identifier: str=None, metric_types: List=None, next_token: str=None, max_results: int=None):
        """ListAvailableResourceMetricsRequest - a model defined in OpenAPI

        :param service_type: The service_type of this ListAvailableResourceMetricsRequest.
        :param identifier: The identifier of this ListAvailableResourceMetricsRequest.
        :param metric_types: The metric_types of this ListAvailableResourceMetricsRequest.
        :param next_token: The next_token of this ListAvailableResourceMetricsRequest.
        :param max_results: The max_results of this ListAvailableResourceMetricsRequest.
        """
        self.openapi_types = {
            'service_type': ServiceType,
            'identifier': str,
            'metric_types': List,
            'next_token': str,
            'max_results': int
        }

        self.attribute_map = {
            'service_type': 'ServiceType',
            'identifier': 'Identifier',
            'metric_types': 'MetricTypes',
            'next_token': 'NextToken',
            'max_results': 'MaxResults'
        }

        self._service_type = service_type
        self._identifier = identifier
        self._metric_types = metric_types
        self._next_token = next_token
        self._max_results = max_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListAvailableResourceMetricsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListAvailableResourceMetricsRequest of this ListAvailableResourceMetricsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_type(self):
        """Gets the service_type of this ListAvailableResourceMetricsRequest.


        :return: The service_type of this ListAvailableResourceMetricsRequest.
        :rtype: ServiceType
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ListAvailableResourceMetricsRequest.


        :param service_type: The service_type of this ListAvailableResourceMetricsRequest.
        :type service_type: ServiceType
        """
        if service_type is None:
            raise ValueError("Invalid value for `service_type`, must not be `None`")

        self._service_type = service_type

    @property
    def identifier(self):
        """Gets the identifier of this ListAvailableResourceMetricsRequest.


        :return: The identifier of this ListAvailableResourceMetricsRequest.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this ListAvailableResourceMetricsRequest.


        :param identifier: The identifier of this ListAvailableResourceMetricsRequest.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def metric_types(self):
        """Gets the metric_types of this ListAvailableResourceMetricsRequest.


        :return: The metric_types of this ListAvailableResourceMetricsRequest.
        :rtype: List
        """
        return self._metric_types

    @metric_types.setter
    def metric_types(self, metric_types):
        """Sets the metric_types of this ListAvailableResourceMetricsRequest.


        :param metric_types: The metric_types of this ListAvailableResourceMetricsRequest.
        :type metric_types: List
        """
        if metric_types is None:
            raise ValueError("Invalid value for `metric_types`, must not be `None`")

        self._metric_types = metric_types

    @property
    def next_token(self):
        """Gets the next_token of this ListAvailableResourceMetricsRequest.


        :return: The next_token of this ListAvailableResourceMetricsRequest.
        :rtype: str
        """
        return self._next_token

    @next_token.setter
    def next_token(self, next_token):
        """Sets the next_token of this ListAvailableResourceMetricsRequest.


        :param next_token: The next_token of this ListAvailableResourceMetricsRequest.
        :type next_token: str
        """

        self._next_token = next_token

    @property
    def max_results(self):
        """Gets the max_results of this ListAvailableResourceMetricsRequest.


        :return: The max_results of this ListAvailableResourceMetricsRequest.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this ListAvailableResourceMetricsRequest.


        :param max_results: The max_results of this ListAvailableResourceMetricsRequest.
        :type max_results: int
        """

        self._max_results = max_results
