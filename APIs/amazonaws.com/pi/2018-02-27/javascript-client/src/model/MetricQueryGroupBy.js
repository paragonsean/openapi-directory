/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DimensionGroup from './DimensionGroup';

/**
 * The MetricQueryGroupBy model module.
 * @module model/MetricQueryGroupBy
 * @version 2018-02-27
 */
class MetricQueryGroupBy {
    /**
     * Constructs a new <code>MetricQueryGroupBy</code>.
     * @alias module:model/MetricQueryGroupBy
     * @implements module:model/DimensionGroup
     * @param group {String} 
     */
    constructor(group) { 
        DimensionGroup.initialize(this, group);
        MetricQueryGroupBy.initialize(this, group);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, group) { 
        obj['Group'] = group;
    }

    /**
     * Constructs a <code>MetricQueryGroupBy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricQueryGroupBy} obj Optional instance to populate.
     * @return {module:model/MetricQueryGroupBy} The populated <code>MetricQueryGroupBy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricQueryGroupBy();
            DimensionGroup.constructFromObject(data, obj);

            if (data.hasOwnProperty('Group')) {
                obj['Group'] = ApiClient.convertToType(data['Group'], 'String');
            }
            if (data.hasOwnProperty('Dimensions')) {
                obj['Dimensions'] = ApiClient.convertToType(data['Dimensions'], Array);
            }
            if (data.hasOwnProperty('Limit')) {
                obj['Limit'] = ApiClient.convertToType(data['Limit'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricQueryGroupBy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricQueryGroupBy</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MetricQueryGroupBy.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `Group`
        if (data['Group']) { // data not null
          String.validateJSON(data['Group']);
        }
        // validate the optional field `Dimensions`
        if (data['Dimensions']) { // data not null
          Array.validateJSON(data['Dimensions']);
        }
        // validate the optional field `Limit`
        if (data['Limit']) { // data not null
          Number.validateJSON(data['Limit']);
        }

        return true;
    }


}

MetricQueryGroupBy.RequiredProperties = ["Group"];

/**
 * @member {String} Group
 */
MetricQueryGroupBy.prototype['Group'] = undefined;

/**
 * @member {Array} Dimensions
 */
MetricQueryGroupBy.prototype['Dimensions'] = undefined;

/**
 * @member {Number} Limit
 */
MetricQueryGroupBy.prototype['Limit'] = undefined;


// Implement DimensionGroup interface:
/**
 * @member {String} Group
 */
DimensionGroup.prototype['Group'] = undefined;
/**
 * @member {Array} Dimensions
 */
DimensionGroup.prototype['Dimensions'] = undefined;
/**
 * @member {Number} Limit
 */
DimensionGroup.prototype['Limit'] = undefined;




export default MetricQueryGroupBy;

