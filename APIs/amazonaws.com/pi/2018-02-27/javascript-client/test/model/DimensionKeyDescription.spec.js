/**
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AwsPerformanceInsights);
  }
}(this, function(expect, AwsPerformanceInsights) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AwsPerformanceInsights.DimensionKeyDescription();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DimensionKeyDescription', function() {
    it('should create an instance of DimensionKeyDescription', function() {
      // uncomment below and update the code to test DimensionKeyDescription
      //var instance = new AwsPerformanceInsights.DimensionKeyDescription();
      //expect(instance).to.be.a(AwsPerformanceInsights.DimensionKeyDescription);
    });

    it('should have the property dimensions (base name: "Dimensions")', function() {
      // uncomment below and update the code to test the property dimensions
      //var instance = new AwsPerformanceInsights.DimensionKeyDescription();
      //expect(instance).to.be();
    });

    it('should have the property total (base name: "Total")', function() {
      // uncomment below and update the code to test the property total
      //var instance = new AwsPerformanceInsights.DimensionKeyDescription();
      //expect(instance).to.be();
    });

    it('should have the property additionalMetrics (base name: "AdditionalMetrics")', function() {
      // uncomment below and update the code to test the property additionalMetrics
      //var instance = new AwsPerformanceInsights.DimensionKeyDescription();
      //expect(instance).to.be();
    });

    it('should have the property partitions (base name: "Partitions")', function() {
      // uncomment below and update the code to test the property partitions
      //var instance = new AwsPerformanceInsights.DimensionKeyDescription();
      //expect(instance).to.be();
    });

  });

}));
