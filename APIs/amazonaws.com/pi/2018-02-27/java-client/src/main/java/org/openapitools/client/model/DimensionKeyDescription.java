/*
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An object that includes the requested dimension key values and aggregated metric values within a dimension group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:26.260854-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DimensionKeyDescription {
  public static final String SERIALIZED_NAME_DIMENSIONS = "Dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Map dimensions;

  public static final String SERIALIZED_NAME_TOTAL = "Total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Double total;

  public static final String SERIALIZED_NAME_ADDITIONAL_METRICS = "AdditionalMetrics";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_METRICS)
  private Map additionalMetrics;

  public static final String SERIALIZED_NAME_PARTITIONS = "Partitions";
  @SerializedName(SERIALIZED_NAME_PARTITIONS)
  private List partitions;

  public DimensionKeyDescription() {
  }

  public DimensionKeyDescription dimensions(Map dimensions) {
    this.dimensions = dimensions;
    return this;
  }

  /**
   * Get dimensions
   * @return dimensions
   */
  @javax.annotation.Nullable
  public Map getDimensions() {
    return dimensions;
  }

  public void setDimensions(Map dimensions) {
    this.dimensions = dimensions;
  }


  public DimensionKeyDescription total(Double total) {
    this.total = total;
    return this;
  }

  /**
   * Get total
   * @return total
   */
  @javax.annotation.Nullable
  public Double getTotal() {
    return total;
  }

  public void setTotal(Double total) {
    this.total = total;
  }


  public DimensionKeyDescription additionalMetrics(Map additionalMetrics) {
    this.additionalMetrics = additionalMetrics;
    return this;
  }

  /**
   * Get additionalMetrics
   * @return additionalMetrics
   */
  @javax.annotation.Nullable
  public Map getAdditionalMetrics() {
    return additionalMetrics;
  }

  public void setAdditionalMetrics(Map additionalMetrics) {
    this.additionalMetrics = additionalMetrics;
  }


  public DimensionKeyDescription partitions(List partitions) {
    this.partitions = partitions;
    return this;
  }

  /**
   * Get partitions
   * @return partitions
   */
  @javax.annotation.Nullable
  public List getPartitions() {
    return partitions;
  }

  public void setPartitions(List partitions) {
    this.partitions = partitions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DimensionKeyDescription dimensionKeyDescription = (DimensionKeyDescription) o;
    return Objects.equals(this.dimensions, dimensionKeyDescription.dimensions) &&
        Objects.equals(this.total, dimensionKeyDescription.total) &&
        Objects.equals(this.additionalMetrics, dimensionKeyDescription.additionalMetrics) &&
        Objects.equals(this.partitions, dimensionKeyDescription.partitions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dimensions, total, additionalMetrics, partitions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DimensionKeyDescription {\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    additionalMetrics: ").append(toIndentedString(additionalMetrics)).append("\n");
    sb.append("    partitions: ").append(toIndentedString(partitions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Dimensions");
    openapiFields.add("Total");
    openapiFields.add("AdditionalMetrics");
    openapiFields.add("Partitions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DimensionKeyDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DimensionKeyDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DimensionKeyDescription is not found in the empty JSON string", DimensionKeyDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DimensionKeyDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DimensionKeyDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Dimensions`
      if (jsonObj.get("Dimensions") != null && !jsonObj.get("Dimensions").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Dimensions"));
      }
      // validate the optional field `Total`
      if (jsonObj.get("Total") != null && !jsonObj.get("Total").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("Total"));
      }
      // validate the optional field `AdditionalMetrics`
      if (jsonObj.get("AdditionalMetrics") != null && !jsonObj.get("AdditionalMetrics").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("AdditionalMetrics"));
      }
      // validate the optional field `Partitions`
      if (jsonObj.get("Partitions") != null && !jsonObj.get("Partitions").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Partitions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DimensionKeyDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DimensionKeyDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DimensionKeyDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DimensionKeyDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<DimensionKeyDescription>() {
           @Override
           public void write(JsonWriter out, DimensionKeyDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DimensionKeyDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DimensionKeyDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DimensionKeyDescription
   * @throws IOException if the JSON string is invalid with respect to DimensionKeyDescription
   */
  public static DimensionKeyDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DimensionKeyDescription.class);
  }

  /**
   * Convert an instance of DimensionKeyDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

