/*
 * AWS Performance Insights
 * <fullname>Amazon RDS Performance Insights</fullname> <p>Amazon RDS Performance Insights enables you to monitor and explore different dimensions of database load based on data captured from a running DB instance. The guide provides detailed information about Performance Insights data types, parameters and errors.</p> <p>When Performance Insights is enabled, the Amazon RDS Performance Insights API provides visibility into the performance of your DB instance. Amazon CloudWatch provides the authoritative source for Amazon Web Services service-vended monitoring metrics. Performance Insights offers a domain-specific view of DB load.</p> <p>DB load is measured as average active sessions. Performance Insights provides the data to API consumers as a two-dimensional time-series dataset. The time dimension provides DB load data for each time point in the queried time range. Each time point decomposes overall load in relation to the requested dimensions, measured at that time point. Examples include SQL, Wait event, User, and Host.</p> <ul> <li> <p>To learn more about Performance Insights and Amazon Aurora DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_PerfInsights.html\"> Amazon Aurora User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon RDS DB instances, go to the <i> <a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html\"> Amazon RDS User Guide</a> </i>. </p> </li> <li> <p>To learn more about Performance Insights and Amazon DocumentDB clusters, go to the <i> <a href=\"https://docs.aws.amazon.com/documentdb/latest/developerguide/performance-insights.html\"> Amazon DocumentDB Developer Guide</a> </i>.</p> </li> </ul>
 *
 * The version of the OpenAPI document: 2018-02-27
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DescribeDimensionKeysResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:04:26.260854-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DescribeDimensionKeysResponse {
  public static final String SERIALIZED_NAME_ALIGNED_START_TIME = "AlignedStartTime";
  @SerializedName(SERIALIZED_NAME_ALIGNED_START_TIME)
  private OffsetDateTime alignedStartTime;

  public static final String SERIALIZED_NAME_ALIGNED_END_TIME = "AlignedEndTime";
  @SerializedName(SERIALIZED_NAME_ALIGNED_END_TIME)
  private OffsetDateTime alignedEndTime;

  public static final String SERIALIZED_NAME_PARTITION_KEYS = "PartitionKeys";
  @SerializedName(SERIALIZED_NAME_PARTITION_KEYS)
  private List partitionKeys;

  public static final String SERIALIZED_NAME_KEYS = "Keys";
  @SerializedName(SERIALIZED_NAME_KEYS)
  private List keys;

  public static final String SERIALIZED_NAME_NEXT_TOKEN = "NextToken";
  @SerializedName(SERIALIZED_NAME_NEXT_TOKEN)
  private String nextToken;

  public DescribeDimensionKeysResponse() {
  }

  public DescribeDimensionKeysResponse alignedStartTime(OffsetDateTime alignedStartTime) {
    this.alignedStartTime = alignedStartTime;
    return this;
  }

  /**
   * Get alignedStartTime
   * @return alignedStartTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAlignedStartTime() {
    return alignedStartTime;
  }

  public void setAlignedStartTime(OffsetDateTime alignedStartTime) {
    this.alignedStartTime = alignedStartTime;
  }


  public DescribeDimensionKeysResponse alignedEndTime(OffsetDateTime alignedEndTime) {
    this.alignedEndTime = alignedEndTime;
    return this;
  }

  /**
   * Get alignedEndTime
   * @return alignedEndTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAlignedEndTime() {
    return alignedEndTime;
  }

  public void setAlignedEndTime(OffsetDateTime alignedEndTime) {
    this.alignedEndTime = alignedEndTime;
  }


  public DescribeDimensionKeysResponse partitionKeys(List partitionKeys) {
    this.partitionKeys = partitionKeys;
    return this;
  }

  /**
   * Get partitionKeys
   * @return partitionKeys
   */
  @javax.annotation.Nullable
  public List getPartitionKeys() {
    return partitionKeys;
  }

  public void setPartitionKeys(List partitionKeys) {
    this.partitionKeys = partitionKeys;
  }


  public DescribeDimensionKeysResponse keys(List keys) {
    this.keys = keys;
    return this;
  }

  /**
   * Get keys
   * @return keys
   */
  @javax.annotation.Nullable
  public List getKeys() {
    return keys;
  }

  public void setKeys(List keys) {
    this.keys = keys;
  }


  public DescribeDimensionKeysResponse nextToken(String nextToken) {
    this.nextToken = nextToken;
    return this;
  }

  /**
   * Get nextToken
   * @return nextToken
   */
  @javax.annotation.Nullable
  public String getNextToken() {
    return nextToken;
  }

  public void setNextToken(String nextToken) {
    this.nextToken = nextToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DescribeDimensionKeysResponse describeDimensionKeysResponse = (DescribeDimensionKeysResponse) o;
    return Objects.equals(this.alignedStartTime, describeDimensionKeysResponse.alignedStartTime) &&
        Objects.equals(this.alignedEndTime, describeDimensionKeysResponse.alignedEndTime) &&
        Objects.equals(this.partitionKeys, describeDimensionKeysResponse.partitionKeys) &&
        Objects.equals(this.keys, describeDimensionKeysResponse.keys) &&
        Objects.equals(this.nextToken, describeDimensionKeysResponse.nextToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alignedStartTime, alignedEndTime, partitionKeys, keys, nextToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DescribeDimensionKeysResponse {\n");
    sb.append("    alignedStartTime: ").append(toIndentedString(alignedStartTime)).append("\n");
    sb.append("    alignedEndTime: ").append(toIndentedString(alignedEndTime)).append("\n");
    sb.append("    partitionKeys: ").append(toIndentedString(partitionKeys)).append("\n");
    sb.append("    keys: ").append(toIndentedString(keys)).append("\n");
    sb.append("    nextToken: ").append(toIndentedString(nextToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AlignedStartTime");
    openapiFields.add("AlignedEndTime");
    openapiFields.add("PartitionKeys");
    openapiFields.add("Keys");
    openapiFields.add("NextToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DescribeDimensionKeysResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DescribeDimensionKeysResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DescribeDimensionKeysResponse is not found in the empty JSON string", DescribeDimensionKeysResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DescribeDimensionKeysResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DescribeDimensionKeysResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AlignedStartTime`
      if (jsonObj.get("AlignedStartTime") != null && !jsonObj.get("AlignedStartTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AlignedStartTime"));
      }
      // validate the optional field `AlignedEndTime`
      if (jsonObj.get("AlignedEndTime") != null && !jsonObj.get("AlignedEndTime").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("AlignedEndTime"));
      }
      // validate the optional field `PartitionKeys`
      if (jsonObj.get("PartitionKeys") != null && !jsonObj.get("PartitionKeys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("PartitionKeys"));
      }
      // validate the optional field `Keys`
      if (jsonObj.get("Keys") != null && !jsonObj.get("Keys").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Keys"));
      }
      // validate the optional field `NextToken`
      if (jsonObj.get("NextToken") != null && !jsonObj.get("NextToken").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("NextToken"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DescribeDimensionKeysResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DescribeDimensionKeysResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DescribeDimensionKeysResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DescribeDimensionKeysResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DescribeDimensionKeysResponse>() {
           @Override
           public void write(JsonWriter out, DescribeDimensionKeysResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DescribeDimensionKeysResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DescribeDimensionKeysResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DescribeDimensionKeysResponse
   * @throws IOException if the JSON string is invalid with respect to DescribeDimensionKeysResponse
   */
  public static DescribeDimensionKeysResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DescribeDimensionKeysResponse.class);
  }

  /**
   * Convert an instance of DescribeDimensionKeysResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

