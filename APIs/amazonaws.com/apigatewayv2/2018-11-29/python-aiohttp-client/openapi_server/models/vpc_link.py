# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vpc_link_status import VpcLinkStatus
from openapi_server.models.vpc_link_version import VpcLinkVersion
from openapi_server import util


class VpcLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: datetime=None, name: str=None, security_group_ids: List=None, subnet_ids: List=None, tags: Dict=None, vpc_link_id: str=None, vpc_link_status: VpcLinkStatus=None, vpc_link_status_message: str=None, vpc_link_version: VpcLinkVersion=None):
        """VpcLink - a model defined in OpenAPI

        :param created_date: The created_date of this VpcLink.
        :param name: The name of this VpcLink.
        :param security_group_ids: The security_group_ids of this VpcLink.
        :param subnet_ids: The subnet_ids of this VpcLink.
        :param tags: The tags of this VpcLink.
        :param vpc_link_id: The vpc_link_id of this VpcLink.
        :param vpc_link_status: The vpc_link_status of this VpcLink.
        :param vpc_link_status_message: The vpc_link_status_message of this VpcLink.
        :param vpc_link_version: The vpc_link_version of this VpcLink.
        """
        self.openapi_types = {
            'created_date': datetime,
            'name': str,
            'security_group_ids': List,
            'subnet_ids': List,
            'tags': Dict,
            'vpc_link_id': str,
            'vpc_link_status': VpcLinkStatus,
            'vpc_link_status_message': str,
            'vpc_link_version': VpcLinkVersion
        }

        self.attribute_map = {
            'created_date': 'CreatedDate',
            'name': 'Name',
            'security_group_ids': 'SecurityGroupIds',
            'subnet_ids': 'SubnetIds',
            'tags': 'Tags',
            'vpc_link_id': 'VpcLinkId',
            'vpc_link_status': 'VpcLinkStatus',
            'vpc_link_status_message': 'VpcLinkStatusMessage',
            'vpc_link_version': 'VpcLinkVersion'
        }

        self._created_date = created_date
        self._name = name
        self._security_group_ids = security_group_ids
        self._subnet_ids = subnet_ids
        self._tags = tags
        self._vpc_link_id = vpc_link_id
        self._vpc_link_status = vpc_link_status
        self._vpc_link_status_message = vpc_link_status_message
        self._vpc_link_version = vpc_link_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VpcLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VpcLink of this VpcLink.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this VpcLink.


        :return: The created_date of this VpcLink.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this VpcLink.


        :param created_date: The created_date of this VpcLink.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def name(self):
        """Gets the name of this VpcLink.


        :return: The name of this VpcLink.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VpcLink.


        :param name: The name of this VpcLink.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def security_group_ids(self):
        """Gets the security_group_ids of this VpcLink.


        :return: The security_group_ids of this VpcLink.
        :rtype: List
        """
        return self._security_group_ids

    @security_group_ids.setter
    def security_group_ids(self, security_group_ids):
        """Sets the security_group_ids of this VpcLink.


        :param security_group_ids: The security_group_ids of this VpcLink.
        :type security_group_ids: List
        """
        if security_group_ids is None:
            raise ValueError("Invalid value for `security_group_ids`, must not be `None`")

        self._security_group_ids = security_group_ids

    @property
    def subnet_ids(self):
        """Gets the subnet_ids of this VpcLink.


        :return: The subnet_ids of this VpcLink.
        :rtype: List
        """
        return self._subnet_ids

    @subnet_ids.setter
    def subnet_ids(self, subnet_ids):
        """Sets the subnet_ids of this VpcLink.


        :param subnet_ids: The subnet_ids of this VpcLink.
        :type subnet_ids: List
        """
        if subnet_ids is None:
            raise ValueError("Invalid value for `subnet_ids`, must not be `None`")

        self._subnet_ids = subnet_ids

    @property
    def tags(self):
        """Gets the tags of this VpcLink.


        :return: The tags of this VpcLink.
        :rtype: Dict
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this VpcLink.


        :param tags: The tags of this VpcLink.
        :type tags: Dict
        """

        self._tags = tags

    @property
    def vpc_link_id(self):
        """Gets the vpc_link_id of this VpcLink.


        :return: The vpc_link_id of this VpcLink.
        :rtype: str
        """
        return self._vpc_link_id

    @vpc_link_id.setter
    def vpc_link_id(self, vpc_link_id):
        """Sets the vpc_link_id of this VpcLink.


        :param vpc_link_id: The vpc_link_id of this VpcLink.
        :type vpc_link_id: str
        """
        if vpc_link_id is None:
            raise ValueError("Invalid value for `vpc_link_id`, must not be `None`")

        self._vpc_link_id = vpc_link_id

    @property
    def vpc_link_status(self):
        """Gets the vpc_link_status of this VpcLink.


        :return: The vpc_link_status of this VpcLink.
        :rtype: VpcLinkStatus
        """
        return self._vpc_link_status

    @vpc_link_status.setter
    def vpc_link_status(self, vpc_link_status):
        """Sets the vpc_link_status of this VpcLink.


        :param vpc_link_status: The vpc_link_status of this VpcLink.
        :type vpc_link_status: VpcLinkStatus
        """

        self._vpc_link_status = vpc_link_status

    @property
    def vpc_link_status_message(self):
        """Gets the vpc_link_status_message of this VpcLink.


        :return: The vpc_link_status_message of this VpcLink.
        :rtype: str
        """
        return self._vpc_link_status_message

    @vpc_link_status_message.setter
    def vpc_link_status_message(self, vpc_link_status_message):
        """Sets the vpc_link_status_message of this VpcLink.


        :param vpc_link_status_message: The vpc_link_status_message of this VpcLink.
        :type vpc_link_status_message: str
        """

        self._vpc_link_status_message = vpc_link_status_message

    @property
    def vpc_link_version(self):
        """Gets the vpc_link_version of this VpcLink.


        :return: The vpc_link_version of this VpcLink.
        :rtype: VpcLinkVersion
        """
        return self._vpc_link_version

    @vpc_link_version.setter
    def vpc_link_version(self, vpc_link_version):
        """Sets the vpc_link_version of this VpcLink.


        :param vpc_link_version: The vpc_link_version of this VpcLink.
        :type vpc_link_version: VpcLinkVersion
        """

        self._vpc_link_version = vpc_link_version
