# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.parameter_constraints import ParameterConstraints
from openapi_server import util


class UpdateRouteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_required: bool=None, authorization_scopes: List[str]=None, authorization_type: str=None, authorizer_id: str=None, model_selection_expression: str=None, operation_name: str=None, request_models: Dict[str, str]=None, request_parameters: Dict[str, ParameterConstraints]=None, route_key: str=None, route_response_selection_expression: str=None, target: str=None):
        """UpdateRouteRequest - a model defined in OpenAPI

        :param api_key_required: The api_key_required of this UpdateRouteRequest.
        :param authorization_scopes: The authorization_scopes of this UpdateRouteRequest.
        :param authorization_type: The authorization_type of this UpdateRouteRequest.
        :param authorizer_id: The authorizer_id of this UpdateRouteRequest.
        :param model_selection_expression: The model_selection_expression of this UpdateRouteRequest.
        :param operation_name: The operation_name of this UpdateRouteRequest.
        :param request_models: The request_models of this UpdateRouteRequest.
        :param request_parameters: The request_parameters of this UpdateRouteRequest.
        :param route_key: The route_key of this UpdateRouteRequest.
        :param route_response_selection_expression: The route_response_selection_expression of this UpdateRouteRequest.
        :param target: The target of this UpdateRouteRequest.
        """
        self.openapi_types = {
            'api_key_required': bool,
            'authorization_scopes': List[str],
            'authorization_type': str,
            'authorizer_id': str,
            'model_selection_expression': str,
            'operation_name': str,
            'request_models': Dict[str, str],
            'request_parameters': Dict[str, ParameterConstraints],
            'route_key': str,
            'route_response_selection_expression': str,
            'target': str
        }

        self.attribute_map = {
            'api_key_required': 'apiKeyRequired',
            'authorization_scopes': 'authorizationScopes',
            'authorization_type': 'authorizationType',
            'authorizer_id': 'authorizerId',
            'model_selection_expression': 'modelSelectionExpression',
            'operation_name': 'operationName',
            'request_models': 'requestModels',
            'request_parameters': 'requestParameters',
            'route_key': 'routeKey',
            'route_response_selection_expression': 'routeResponseSelectionExpression',
            'target': 'target'
        }

        self._api_key_required = api_key_required
        self._authorization_scopes = authorization_scopes
        self._authorization_type = authorization_type
        self._authorizer_id = authorizer_id
        self._model_selection_expression = model_selection_expression
        self._operation_name = operation_name
        self._request_models = request_models
        self._request_parameters = request_parameters
        self._route_key = route_key
        self._route_response_selection_expression = route_response_selection_expression
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateRouteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateRoute_request of this UpdateRouteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_required(self):
        """Gets the api_key_required of this UpdateRouteRequest.

        Specifies whether an API key is required for the route. Supported only for WebSocket APIs.

        :return: The api_key_required of this UpdateRouteRequest.
        :rtype: bool
        """
        return self._api_key_required

    @api_key_required.setter
    def api_key_required(self, api_key_required):
        """Sets the api_key_required of this UpdateRouteRequest.

        Specifies whether an API key is required for the route. Supported only for WebSocket APIs.

        :param api_key_required: The api_key_required of this UpdateRouteRequest.
        :type api_key_required: bool
        """

        self._api_key_required = api_key_required

    @property
    def authorization_scopes(self):
        """Gets the authorization_scopes of this UpdateRouteRequest.

        A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.

        :return: The authorization_scopes of this UpdateRouteRequest.
        :rtype: List[str]
        """
        return self._authorization_scopes

    @authorization_scopes.setter
    def authorization_scopes(self, authorization_scopes):
        """Sets the authorization_scopes of this UpdateRouteRequest.

        A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.

        :param authorization_scopes: The authorization_scopes of this UpdateRouteRequest.
        :type authorization_scopes: List[str]
        """

        self._authorization_scopes = authorization_scopes

    @property
    def authorization_type(self):
        """Gets the authorization_type of this UpdateRouteRequest.

        The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.

        :return: The authorization_type of this UpdateRouteRequest.
        :rtype: str
        """
        return self._authorization_type

    @authorization_type.setter
    def authorization_type(self, authorization_type):
        """Sets the authorization_type of this UpdateRouteRequest.

        The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.

        :param authorization_type: The authorization_type of this UpdateRouteRequest.
        :type authorization_type: str
        """
        allowed_values = ["NONE", "AWS_IAM", "CUSTOM", "JWT"]  # noqa: E501
        if authorization_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authorization_type` ({0}), must be one of {1}"
                .format(authorization_type, allowed_values)
            )

        self._authorization_type = authorization_type

    @property
    def authorizer_id(self):
        """Gets the authorizer_id of this UpdateRouteRequest.

        The identifier.

        :return: The authorizer_id of this UpdateRouteRequest.
        :rtype: str
        """
        return self._authorizer_id

    @authorizer_id.setter
    def authorizer_id(self, authorizer_id):
        """Sets the authorizer_id of this UpdateRouteRequest.

        The identifier.

        :param authorizer_id: The authorizer_id of this UpdateRouteRequest.
        :type authorizer_id: str
        """

        self._authorizer_id = authorizer_id

    @property
    def model_selection_expression(self):
        """Gets the model_selection_expression of this UpdateRouteRequest.

        An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.

        :return: The model_selection_expression of this UpdateRouteRequest.
        :rtype: str
        """
        return self._model_selection_expression

    @model_selection_expression.setter
    def model_selection_expression(self, model_selection_expression):
        """Sets the model_selection_expression of this UpdateRouteRequest.

        An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.

        :param model_selection_expression: The model_selection_expression of this UpdateRouteRequest.
        :type model_selection_expression: str
        """

        self._model_selection_expression = model_selection_expression

    @property
    def operation_name(self):
        """Gets the operation_name of this UpdateRouteRequest.

        A string with a length between [1-64].

        :return: The operation_name of this UpdateRouteRequest.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this UpdateRouteRequest.

        A string with a length between [1-64].

        :param operation_name: The operation_name of this UpdateRouteRequest.
        :type operation_name: str
        """

        self._operation_name = operation_name

    @property
    def request_models(self):
        """Gets the request_models of this UpdateRouteRequest.

        The route models.

        :return: The request_models of this UpdateRouteRequest.
        :rtype: Dict[str, str]
        """
        return self._request_models

    @request_models.setter
    def request_models(self, request_models):
        """Sets the request_models of this UpdateRouteRequest.

        The route models.

        :param request_models: The request_models of this UpdateRouteRequest.
        :type request_models: Dict[str, str]
        """

        self._request_models = request_models

    @property
    def request_parameters(self):
        """Gets the request_parameters of this UpdateRouteRequest.

        The route parameters.

        :return: The request_parameters of this UpdateRouteRequest.
        :rtype: Dict[str, ParameterConstraints]
        """
        return self._request_parameters

    @request_parameters.setter
    def request_parameters(self, request_parameters):
        """Sets the request_parameters of this UpdateRouteRequest.

        The route parameters.

        :param request_parameters: The request_parameters of this UpdateRouteRequest.
        :type request_parameters: Dict[str, ParameterConstraints]
        """

        self._request_parameters = request_parameters

    @property
    def route_key(self):
        """Gets the route_key of this UpdateRouteRequest.

        After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.

        :return: The route_key of this UpdateRouteRequest.
        :rtype: str
        """
        return self._route_key

    @route_key.setter
    def route_key(self, route_key):
        """Sets the route_key of this UpdateRouteRequest.

        After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.

        :param route_key: The route_key of this UpdateRouteRequest.
        :type route_key: str
        """

        self._route_key = route_key

    @property
    def route_response_selection_expression(self):
        """Gets the route_response_selection_expression of this UpdateRouteRequest.

        An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.

        :return: The route_response_selection_expression of this UpdateRouteRequest.
        :rtype: str
        """
        return self._route_response_selection_expression

    @route_response_selection_expression.setter
    def route_response_selection_expression(self, route_response_selection_expression):
        """Sets the route_response_selection_expression of this UpdateRouteRequest.

        An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.

        :param route_response_selection_expression: The route_response_selection_expression of this UpdateRouteRequest.
        :type route_response_selection_expression: str
        """

        self._route_response_selection_expression = route_response_selection_expression

    @property
    def target(self):
        """Gets the target of this UpdateRouteRequest.

        A string with a length between [1-128].

        :return: The target of this UpdateRouteRequest.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this UpdateRouteRequest.

        A string with a length between [1-128].

        :param target: The target of this UpdateRouteRequest.
        :type target: str
        """

        self._target = target
