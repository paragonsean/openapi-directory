# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateIntegrationResponseRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_handling_strategy: str=None, integration_response_key: str=None, response_parameters: Dict[str, str]=None, response_templates: Dict[str, str]=None, template_selection_expression: str=None):
        """UpdateIntegrationResponseRequest - a model defined in OpenAPI

        :param content_handling_strategy: The content_handling_strategy of this UpdateIntegrationResponseRequest.
        :param integration_response_key: The integration_response_key of this UpdateIntegrationResponseRequest.
        :param response_parameters: The response_parameters of this UpdateIntegrationResponseRequest.
        :param response_templates: The response_templates of this UpdateIntegrationResponseRequest.
        :param template_selection_expression: The template_selection_expression of this UpdateIntegrationResponseRequest.
        """
        self.openapi_types = {
            'content_handling_strategy': str,
            'integration_response_key': str,
            'response_parameters': Dict[str, str],
            'response_templates': Dict[str, str],
            'template_selection_expression': str
        }

        self.attribute_map = {
            'content_handling_strategy': 'contentHandlingStrategy',
            'integration_response_key': 'integrationResponseKey',
            'response_parameters': 'responseParameters',
            'response_templates': 'responseTemplates',
            'template_selection_expression': 'templateSelectionExpression'
        }

        self._content_handling_strategy = content_handling_strategy
        self._integration_response_key = integration_response_key
        self._response_parameters = response_parameters
        self._response_templates = response_templates
        self._template_selection_expression = template_selection_expression

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateIntegrationResponseRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateIntegrationResponse_request of this UpdateIntegrationResponseRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_handling_strategy(self):
        """Gets the content_handling_strategy of this UpdateIntegrationResponseRequest.

        Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.

        :return: The content_handling_strategy of this UpdateIntegrationResponseRequest.
        :rtype: str
        """
        return self._content_handling_strategy

    @content_handling_strategy.setter
    def content_handling_strategy(self, content_handling_strategy):
        """Sets the content_handling_strategy of this UpdateIntegrationResponseRequest.

        Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.

        :param content_handling_strategy: The content_handling_strategy of this UpdateIntegrationResponseRequest.
        :type content_handling_strategy: str
        """
        allowed_values = ["CONVERT_TO_BINARY", "CONVERT_TO_TEXT"]  # noqa: E501
        if content_handling_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `content_handling_strategy` ({0}), must be one of {1}"
                .format(content_handling_strategy, allowed_values)
            )

        self._content_handling_strategy = content_handling_strategy

    @property
    def integration_response_key(self):
        """Gets the integration_response_key of this UpdateIntegrationResponseRequest.

        After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.

        :return: The integration_response_key of this UpdateIntegrationResponseRequest.
        :rtype: str
        """
        return self._integration_response_key

    @integration_response_key.setter
    def integration_response_key(self, integration_response_key):
        """Sets the integration_response_key of this UpdateIntegrationResponseRequest.

        After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for a list of expressions and each expression's associated selection key type.

        :param integration_response_key: The integration_response_key of this UpdateIntegrationResponseRequest.
        :type integration_response_key: str
        """

        self._integration_response_key = integration_response_key

    @property
    def response_parameters(self):
        """Gets the response_parameters of this UpdateIntegrationResponseRequest.

        <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>           , where              <replaceable>{location}</replaceable>            is querystring, path, or header; and              <replaceable>{name}</replaceable>            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\">Transforming API requests and responses</a>.</p>

        :return: The response_parameters of this UpdateIntegrationResponseRequest.
        :rtype: Dict[str, str]
        """
        return self._response_parameters

    @response_parameters.setter
    def response_parameters(self, response_parameters):
        """Sets the response_parameters of this UpdateIntegrationResponseRequest.

        <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>           , where              <replaceable>{location}</replaceable>            is querystring, path, or header; and              <replaceable>{name}</replaceable>            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\">Transforming API requests and responses</a>.</p>

        :param response_parameters: The response_parameters of this UpdateIntegrationResponseRequest.
        :type response_parameters: Dict[str, str]
        """

        self._response_parameters = response_parameters

    @property
    def response_templates(self):
        """Gets the response_templates of this UpdateIntegrationResponseRequest.

        A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.

        :return: The response_templates of this UpdateIntegrationResponseRequest.
        :rtype: Dict[str, str]
        """
        return self._response_templates

    @response_templates.setter
    def response_templates(self, response_templates):
        """Sets the response_templates of this UpdateIntegrationResponseRequest.

        A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.

        :param response_templates: The response_templates of this UpdateIntegrationResponseRequest.
        :type response_templates: Dict[str, str]
        """

        self._response_templates = response_templates

    @property
    def template_selection_expression(self):
        """Gets the template_selection_expression of this UpdateIntegrationResponseRequest.

        An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.

        :return: The template_selection_expression of this UpdateIntegrationResponseRequest.
        :rtype: str
        """
        return self._template_selection_expression

    @template_selection_expression.setter
    def template_selection_expression(self, template_selection_expression):
        """Sets the template_selection_expression of this UpdateIntegrationResponseRequest.

        An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.

        :param template_selection_expression: The template_selection_expression of this UpdateIntegrationResponseRequest.
        :type template_selection_expression: str
        """

        self._template_selection_expression = template_selection_expression
