# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_integration_request_tls_config import CreateIntegrationRequestTlsConfig
from openapi_server import util


class CreateIntegrationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, connection_id: str=None, connection_type: str=None, content_handling_strategy: str=None, credentials_arn: str=None, description: str=None, integration_method: str=None, integration_subtype: str=None, integration_type: str=None, integration_uri: str=None, passthrough_behavior: str=None, payload_format_version: str=None, request_parameters: Dict[str, str]=None, request_templates: Dict[str, str]=None, response_parameters: Dict[str, Dict[str, str]]=None, template_selection_expression: str=None, timeout_in_millis: int=None, tls_config: CreateIntegrationRequestTlsConfig=None):
        """CreateIntegrationRequest - a model defined in OpenAPI

        :param connection_id: The connection_id of this CreateIntegrationRequest.
        :param connection_type: The connection_type of this CreateIntegrationRequest.
        :param content_handling_strategy: The content_handling_strategy of this CreateIntegrationRequest.
        :param credentials_arn: The credentials_arn of this CreateIntegrationRequest.
        :param description: The description of this CreateIntegrationRequest.
        :param integration_method: The integration_method of this CreateIntegrationRequest.
        :param integration_subtype: The integration_subtype of this CreateIntegrationRequest.
        :param integration_type: The integration_type of this CreateIntegrationRequest.
        :param integration_uri: The integration_uri of this CreateIntegrationRequest.
        :param passthrough_behavior: The passthrough_behavior of this CreateIntegrationRequest.
        :param payload_format_version: The payload_format_version of this CreateIntegrationRequest.
        :param request_parameters: The request_parameters of this CreateIntegrationRequest.
        :param request_templates: The request_templates of this CreateIntegrationRequest.
        :param response_parameters: The response_parameters of this CreateIntegrationRequest.
        :param template_selection_expression: The template_selection_expression of this CreateIntegrationRequest.
        :param timeout_in_millis: The timeout_in_millis of this CreateIntegrationRequest.
        :param tls_config: The tls_config of this CreateIntegrationRequest.
        """
        self.openapi_types = {
            'connection_id': str,
            'connection_type': str,
            'content_handling_strategy': str,
            'credentials_arn': str,
            'description': str,
            'integration_method': str,
            'integration_subtype': str,
            'integration_type': str,
            'integration_uri': str,
            'passthrough_behavior': str,
            'payload_format_version': str,
            'request_parameters': Dict[str, str],
            'request_templates': Dict[str, str],
            'response_parameters': Dict[str, Dict[str, str]],
            'template_selection_expression': str,
            'timeout_in_millis': int,
            'tls_config': CreateIntegrationRequestTlsConfig
        }

        self.attribute_map = {
            'connection_id': 'connectionId',
            'connection_type': 'connectionType',
            'content_handling_strategy': 'contentHandlingStrategy',
            'credentials_arn': 'credentialsArn',
            'description': 'description',
            'integration_method': 'integrationMethod',
            'integration_subtype': 'integrationSubtype',
            'integration_type': 'integrationType',
            'integration_uri': 'integrationUri',
            'passthrough_behavior': 'passthroughBehavior',
            'payload_format_version': 'payloadFormatVersion',
            'request_parameters': 'requestParameters',
            'request_templates': 'requestTemplates',
            'response_parameters': 'responseParameters',
            'template_selection_expression': 'templateSelectionExpression',
            'timeout_in_millis': 'timeoutInMillis',
            'tls_config': 'tlsConfig'
        }

        self._connection_id = connection_id
        self._connection_type = connection_type
        self._content_handling_strategy = content_handling_strategy
        self._credentials_arn = credentials_arn
        self._description = description
        self._integration_method = integration_method
        self._integration_subtype = integration_subtype
        self._integration_type = integration_type
        self._integration_uri = integration_uri
        self._passthrough_behavior = passthrough_behavior
        self._payload_format_version = payload_format_version
        self._request_parameters = request_parameters
        self._request_templates = request_templates
        self._response_parameters = response_parameters
        self._template_selection_expression = template_selection_expression
        self._timeout_in_millis = timeout_in_millis
        self._tls_config = tls_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateIntegrationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateIntegration_request of this CreateIntegrationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def connection_id(self):
        """Gets the connection_id of this CreateIntegrationRequest.

        A string with a length between [1-1024].

        :return: The connection_id of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this CreateIntegrationRequest.

        A string with a length between [1-1024].

        :param connection_id: The connection_id of this CreateIntegrationRequest.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def connection_type(self):
        """Gets the connection_type of this CreateIntegrationRequest.

        Represents a connection type.

        :return: The connection_type of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """Sets the connection_type of this CreateIntegrationRequest.

        Represents a connection type.

        :param connection_type: The connection_type of this CreateIntegrationRequest.
        :type connection_type: str
        """
        allowed_values = ["INTERNET", "VPC_LINK"]  # noqa: E501
        if connection_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connection_type` ({0}), must be one of {1}"
                .format(connection_type, allowed_values)
            )

        self._connection_type = connection_type

    @property
    def content_handling_strategy(self):
        """Gets the content_handling_strategy of this CreateIntegrationRequest.

        Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.

        :return: The content_handling_strategy of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._content_handling_strategy

    @content_handling_strategy.setter
    def content_handling_strategy(self, content_handling_strategy):
        """Sets the content_handling_strategy of this CreateIntegrationRequest.

        Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.

        :param content_handling_strategy: The content_handling_strategy of this CreateIntegrationRequest.
        :type content_handling_strategy: str
        """
        allowed_values = ["CONVERT_TO_BINARY", "CONVERT_TO_TEXT"]  # noqa: E501
        if content_handling_strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `content_handling_strategy` ({0}), must be one of {1}"
                .format(content_handling_strategy, allowed_values)
            )

        self._content_handling_strategy = content_handling_strategy

    @property
    def credentials_arn(self):
        """Gets the credentials_arn of this CreateIntegrationRequest.

        Represents an Amazon Resource Name (ARN).

        :return: The credentials_arn of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._credentials_arn

    @credentials_arn.setter
    def credentials_arn(self, credentials_arn):
        """Sets the credentials_arn of this CreateIntegrationRequest.

        Represents an Amazon Resource Name (ARN).

        :param credentials_arn: The credentials_arn of this CreateIntegrationRequest.
        :type credentials_arn: str
        """

        self._credentials_arn = credentials_arn

    @property
    def description(self):
        """Gets the description of this CreateIntegrationRequest.

        A string with a length between [0-1024].

        :return: The description of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateIntegrationRequest.

        A string with a length between [0-1024].

        :param description: The description of this CreateIntegrationRequest.
        :type description: str
        """

        self._description = description

    @property
    def integration_method(self):
        """Gets the integration_method of this CreateIntegrationRequest.

        A string with a length between [1-64].

        :return: The integration_method of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._integration_method

    @integration_method.setter
    def integration_method(self, integration_method):
        """Sets the integration_method of this CreateIntegrationRequest.

        A string with a length between [1-64].

        :param integration_method: The integration_method of this CreateIntegrationRequest.
        :type integration_method: str
        """

        self._integration_method = integration_method

    @property
    def integration_subtype(self):
        """Gets the integration_subtype of this CreateIntegrationRequest.

        A string with a length between [1-128].

        :return: The integration_subtype of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._integration_subtype

    @integration_subtype.setter
    def integration_subtype(self, integration_subtype):
        """Sets the integration_subtype of this CreateIntegrationRequest.

        A string with a length between [1-128].

        :param integration_subtype: The integration_subtype of this CreateIntegrationRequest.
        :type integration_subtype: str
        """

        self._integration_subtype = integration_subtype

    @property
    def integration_type(self):
        """Gets the integration_type of this CreateIntegrationRequest.

        Represents an API method integration type.

        :return: The integration_type of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this CreateIntegrationRequest.

        Represents an API method integration type.

        :param integration_type: The integration_type of this CreateIntegrationRequest.
        :type integration_type: str
        """
        allowed_values = ["AWS", "HTTP", "MOCK", "HTTP_PROXY", "AWS_PROXY"]  # noqa: E501
        if integration_type not in allowed_values:
            raise ValueError(
                "Invalid value for `integration_type` ({0}), must be one of {1}"
                .format(integration_type, allowed_values)
            )

        self._integration_type = integration_type

    @property
    def integration_uri(self):
        """Gets the integration_uri of this CreateIntegrationRequest.

        A string representation of a URI with a length between [1-2048].

        :return: The integration_uri of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._integration_uri

    @integration_uri.setter
    def integration_uri(self, integration_uri):
        """Sets the integration_uri of this CreateIntegrationRequest.

        A string representation of a URI with a length between [1-2048].

        :param integration_uri: The integration_uri of this CreateIntegrationRequest.
        :type integration_uri: str
        """

        self._integration_uri = integration_uri

    @property
    def passthrough_behavior(self):
        """Gets the passthrough_behavior of this CreateIntegrationRequest.

        Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.

        :return: The passthrough_behavior of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._passthrough_behavior

    @passthrough_behavior.setter
    def passthrough_behavior(self, passthrough_behavior):
        """Sets the passthrough_behavior of this CreateIntegrationRequest.

        Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.

        :param passthrough_behavior: The passthrough_behavior of this CreateIntegrationRequest.
        :type passthrough_behavior: str
        """
        allowed_values = ["WHEN_NO_MATCH", "NEVER", "WHEN_NO_TEMPLATES"]  # noqa: E501
        if passthrough_behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `passthrough_behavior` ({0}), must be one of {1}"
                .format(passthrough_behavior, allowed_values)
            )

        self._passthrough_behavior = passthrough_behavior

    @property
    def payload_format_version(self):
        """Gets the payload_format_version of this CreateIntegrationRequest.

        A string with a length between [1-64].

        :return: The payload_format_version of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._payload_format_version

    @payload_format_version.setter
    def payload_format_version(self, payload_format_version):
        """Sets the payload_format_version of this CreateIntegrationRequest.

        A string with a length between [1-64].

        :param payload_format_version: The payload_format_version of this CreateIntegrationRequest.
        :type payload_format_version: str
        """

        self._payload_format_version = payload_format_version

    @property
    def request_parameters(self):
        """Gets the request_parameters of this CreateIntegrationRequest.

        <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>           , where              <replaceable>{location}</replaceable>            is querystring, path, or header; and              <replaceable>{name}</replaceable>            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\">Transforming API requests and responses</a>.</p>

        :return: The request_parameters of this CreateIntegrationRequest.
        :rtype: Dict[str, str]
        """
        return self._request_parameters

    @request_parameters.setter
    def request_parameters(self, request_parameters):
        """Sets the request_parameters of this CreateIntegrationRequest.

        <p>For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.<replaceable>{location}</replaceable>.<replaceable>{name}</replaceable>           , where              <replaceable>{location}</replaceable>            is querystring, path, or header; and              <replaceable>{name}</replaceable>            must be a valid and unique method request parameter name.</p> <p>For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\">Working with AWS service integrations for HTTP APIs</a>.</p> <p>For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &lt;action&gt;:&lt;header|querystring|path&gt;.&lt;location&gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\">Transforming API requests and responses</a>.</p>

        :param request_parameters: The request_parameters of this CreateIntegrationRequest.
        :type request_parameters: Dict[str, str]
        """

        self._request_parameters = request_parameters

    @property
    def request_templates(self):
        """Gets the request_templates of this CreateIntegrationRequest.

        A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.

        :return: The request_templates of this CreateIntegrationRequest.
        :rtype: Dict[str, str]
        """
        return self._request_templates

    @request_templates.setter
    def request_templates(self, request_templates):
        """Sets the request_templates of this CreateIntegrationRequest.

        A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.

        :param request_templates: The request_templates of this CreateIntegrationRequest.
        :type request_templates: Dict[str, str]
        """

        self._request_templates = request_templates

    @property
    def response_parameters(self):
        """Gets the response_parameters of this CreateIntegrationRequest.

        Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.

        :return: The response_parameters of this CreateIntegrationRequest.
        :rtype: Dict[str, Dict[str, str]]
        """
        return self._response_parameters

    @response_parameters.setter
    def response_parameters(self, response_parameters):
        """Sets the response_parameters of this CreateIntegrationRequest.

        Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.

        :param response_parameters: The response_parameters of this CreateIntegrationRequest.
        :type response_parameters: Dict[str, Dict[str, str]]
        """

        self._response_parameters = response_parameters

    @property
    def template_selection_expression(self):
        """Gets the template_selection_expression of this CreateIntegrationRequest.

        An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.

        :return: The template_selection_expression of this CreateIntegrationRequest.
        :rtype: str
        """
        return self._template_selection_expression

    @template_selection_expression.setter
    def template_selection_expression(self, template_selection_expression):
        """Sets the template_selection_expression of this CreateIntegrationRequest.

        An expression used to extract information at runtime. See <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\">Selection Expressions</a> for more information.

        :param template_selection_expression: The template_selection_expression of this CreateIntegrationRequest.
        :type template_selection_expression: str
        """

        self._template_selection_expression = template_selection_expression

    @property
    def timeout_in_millis(self):
        """Gets the timeout_in_millis of this CreateIntegrationRequest.

        An integer with a value between [50-30000].

        :return: The timeout_in_millis of this CreateIntegrationRequest.
        :rtype: int
        """
        return self._timeout_in_millis

    @timeout_in_millis.setter
    def timeout_in_millis(self, timeout_in_millis):
        """Sets the timeout_in_millis of this CreateIntegrationRequest.

        An integer with a value between [50-30000].

        :param timeout_in_millis: The timeout_in_millis of this CreateIntegrationRequest.
        :type timeout_in_millis: int
        """
        if timeout_in_millis is not None and timeout_in_millis > 30000:
            raise ValueError("Invalid value for `timeout_in_millis`, must be a value less than or equal to `30000`")
        if timeout_in_millis is not None and timeout_in_millis < 50:
            raise ValueError("Invalid value for `timeout_in_millis`, must be a value greater than or equal to `50`")

        self._timeout_in_millis = timeout_in_millis

    @property
    def tls_config(self):
        """Gets the tls_config of this CreateIntegrationRequest.


        :return: The tls_config of this CreateIntegrationRequest.
        :rtype: CreateIntegrationRequestTlsConfig
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this CreateIntegrationRequest.


        :param tls_config: The tls_config of this CreateIntegrationRequest.
        :type tls_config: CreateIntegrationRequestTlsConfig
        """

        self._tls_config = tls_config
