# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.create_authorizer_request_jwt_configuration import CreateAuthorizerRequestJwtConfiguration
from openapi_server import util


class CreateAuthorizerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorizer_credentials_arn: str=None, authorizer_payload_format_version: str=None, authorizer_result_ttl_in_seconds: int=None, authorizer_type: str=None, authorizer_uri: str=None, enable_simple_responses: bool=None, identity_source: List[str]=None, identity_validation_expression: str=None, jwt_configuration: CreateAuthorizerRequestJwtConfiguration=None, name: str=None):
        """CreateAuthorizerRequest - a model defined in OpenAPI

        :param authorizer_credentials_arn: The authorizer_credentials_arn of this CreateAuthorizerRequest.
        :param authorizer_payload_format_version: The authorizer_payload_format_version of this CreateAuthorizerRequest.
        :param authorizer_result_ttl_in_seconds: The authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.
        :param authorizer_type: The authorizer_type of this CreateAuthorizerRequest.
        :param authorizer_uri: The authorizer_uri of this CreateAuthorizerRequest.
        :param enable_simple_responses: The enable_simple_responses of this CreateAuthorizerRequest.
        :param identity_source: The identity_source of this CreateAuthorizerRequest.
        :param identity_validation_expression: The identity_validation_expression of this CreateAuthorizerRequest.
        :param jwt_configuration: The jwt_configuration of this CreateAuthorizerRequest.
        :param name: The name of this CreateAuthorizerRequest.
        """
        self.openapi_types = {
            'authorizer_credentials_arn': str,
            'authorizer_payload_format_version': str,
            'authorizer_result_ttl_in_seconds': int,
            'authorizer_type': str,
            'authorizer_uri': str,
            'enable_simple_responses': bool,
            'identity_source': List[str],
            'identity_validation_expression': str,
            'jwt_configuration': CreateAuthorizerRequestJwtConfiguration,
            'name': str
        }

        self.attribute_map = {
            'authorizer_credentials_arn': 'authorizerCredentialsArn',
            'authorizer_payload_format_version': 'authorizerPayloadFormatVersion',
            'authorizer_result_ttl_in_seconds': 'authorizerResultTtlInSeconds',
            'authorizer_type': 'authorizerType',
            'authorizer_uri': 'authorizerUri',
            'enable_simple_responses': 'enableSimpleResponses',
            'identity_source': 'identitySource',
            'identity_validation_expression': 'identityValidationExpression',
            'jwt_configuration': 'jwtConfiguration',
            'name': 'name'
        }

        self._authorizer_credentials_arn = authorizer_credentials_arn
        self._authorizer_payload_format_version = authorizer_payload_format_version
        self._authorizer_result_ttl_in_seconds = authorizer_result_ttl_in_seconds
        self._authorizer_type = authorizer_type
        self._authorizer_uri = authorizer_uri
        self._enable_simple_responses = enable_simple_responses
        self._identity_source = identity_source
        self._identity_validation_expression = identity_validation_expression
        self._jwt_configuration = jwt_configuration
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAuthorizerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAuthorizer_request of this CreateAuthorizerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorizer_credentials_arn(self):
        """Gets the authorizer_credentials_arn of this CreateAuthorizerRequest.

        Represents an Amazon Resource Name (ARN).

        :return: The authorizer_credentials_arn of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._authorizer_credentials_arn

    @authorizer_credentials_arn.setter
    def authorizer_credentials_arn(self, authorizer_credentials_arn):
        """Sets the authorizer_credentials_arn of this CreateAuthorizerRequest.

        Represents an Amazon Resource Name (ARN).

        :param authorizer_credentials_arn: The authorizer_credentials_arn of this CreateAuthorizerRequest.
        :type authorizer_credentials_arn: str
        """

        self._authorizer_credentials_arn = authorizer_credentials_arn

    @property
    def authorizer_payload_format_version(self):
        """Gets the authorizer_payload_format_version of this CreateAuthorizerRequest.

        A string with a length between [1-64].

        :return: The authorizer_payload_format_version of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._authorizer_payload_format_version

    @authorizer_payload_format_version.setter
    def authorizer_payload_format_version(self, authorizer_payload_format_version):
        """Sets the authorizer_payload_format_version of this CreateAuthorizerRequest.

        A string with a length between [1-64].

        :param authorizer_payload_format_version: The authorizer_payload_format_version of this CreateAuthorizerRequest.
        :type authorizer_payload_format_version: str
        """

        self._authorizer_payload_format_version = authorizer_payload_format_version

    @property
    def authorizer_result_ttl_in_seconds(self):
        """Gets the authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.

        An integer with a value between [0-3600].

        :return: The authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.
        :rtype: int
        """
        return self._authorizer_result_ttl_in_seconds

    @authorizer_result_ttl_in_seconds.setter
    def authorizer_result_ttl_in_seconds(self, authorizer_result_ttl_in_seconds):
        """Sets the authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.

        An integer with a value between [0-3600].

        :param authorizer_result_ttl_in_seconds: The authorizer_result_ttl_in_seconds of this CreateAuthorizerRequest.
        :type authorizer_result_ttl_in_seconds: int
        """
        if authorizer_result_ttl_in_seconds is not None and authorizer_result_ttl_in_seconds > 3600:
            raise ValueError("Invalid value for `authorizer_result_ttl_in_seconds`, must be a value less than or equal to `3600`")
        if authorizer_result_ttl_in_seconds is not None and authorizer_result_ttl_in_seconds < 0:
            raise ValueError("Invalid value for `authorizer_result_ttl_in_seconds`, must be a value greater than or equal to `0`")

        self._authorizer_result_ttl_in_seconds = authorizer_result_ttl_in_seconds

    @property
    def authorizer_type(self):
        """Gets the authorizer_type of this CreateAuthorizerRequest.

        The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).

        :return: The authorizer_type of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._authorizer_type

    @authorizer_type.setter
    def authorizer_type(self, authorizer_type):
        """Sets the authorizer_type of this CreateAuthorizerRequest.

        The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).

        :param authorizer_type: The authorizer_type of this CreateAuthorizerRequest.
        :type authorizer_type: str
        """
        allowed_values = ["REQUEST", "JWT"]  # noqa: E501
        if authorizer_type not in allowed_values:
            raise ValueError(
                "Invalid value for `authorizer_type` ({0}), must be one of {1}"
                .format(authorizer_type, allowed_values)
            )

        self._authorizer_type = authorizer_type

    @property
    def authorizer_uri(self):
        """Gets the authorizer_uri of this CreateAuthorizerRequest.

        A string representation of a URI with a length between [1-2048].

        :return: The authorizer_uri of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._authorizer_uri

    @authorizer_uri.setter
    def authorizer_uri(self, authorizer_uri):
        """Sets the authorizer_uri of this CreateAuthorizerRequest.

        A string representation of a URI with a length between [1-2048].

        :param authorizer_uri: The authorizer_uri of this CreateAuthorizerRequest.
        :type authorizer_uri: str
        """

        self._authorizer_uri = authorizer_uri

    @property
    def enable_simple_responses(self):
        """Gets the enable_simple_responses of this CreateAuthorizerRequest.

        Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\">Working with AWS Lambda authorizers for HTTP APIs</a>

        :return: The enable_simple_responses of this CreateAuthorizerRequest.
        :rtype: bool
        """
        return self._enable_simple_responses

    @enable_simple_responses.setter
    def enable_simple_responses(self, enable_simple_responses):
        """Sets the enable_simple_responses of this CreateAuthorizerRequest.

        Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\">Working with AWS Lambda authorizers for HTTP APIs</a>

        :param enable_simple_responses: The enable_simple_responses of this CreateAuthorizerRequest.
        :type enable_simple_responses: bool
        """

        self._enable_simple_responses = enable_simple_responses

    @property
    def identity_source(self):
        """Gets the identity_source of this CreateAuthorizerRequest.

        The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.

        :return: The identity_source of this CreateAuthorizerRequest.
        :rtype: List[str]
        """
        return self._identity_source

    @identity_source.setter
    def identity_source(self, identity_source):
        """Sets the identity_source of this CreateAuthorizerRequest.

        The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.

        :param identity_source: The identity_source of this CreateAuthorizerRequest.
        :type identity_source: List[str]
        """
        if identity_source is None:
            raise ValueError("Invalid value for `identity_source`, must not be `None`")

        self._identity_source = identity_source

    @property
    def identity_validation_expression(self):
        """Gets the identity_validation_expression of this CreateAuthorizerRequest.

        A string with a length between [0-1024].

        :return: The identity_validation_expression of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._identity_validation_expression

    @identity_validation_expression.setter
    def identity_validation_expression(self, identity_validation_expression):
        """Sets the identity_validation_expression of this CreateAuthorizerRequest.

        A string with a length between [0-1024].

        :param identity_validation_expression: The identity_validation_expression of this CreateAuthorizerRequest.
        :type identity_validation_expression: str
        """

        self._identity_validation_expression = identity_validation_expression

    @property
    def jwt_configuration(self):
        """Gets the jwt_configuration of this CreateAuthorizerRequest.


        :return: The jwt_configuration of this CreateAuthorizerRequest.
        :rtype: CreateAuthorizerRequestJwtConfiguration
        """
        return self._jwt_configuration

    @jwt_configuration.setter
    def jwt_configuration(self, jwt_configuration):
        """Sets the jwt_configuration of this CreateAuthorizerRequest.


        :param jwt_configuration: The jwt_configuration of this CreateAuthorizerRequest.
        :type jwt_configuration: CreateAuthorizerRequestJwtConfiguration
        """

        self._jwt_configuration = jwt_configuration

    @property
    def name(self):
        """Gets the name of this CreateAuthorizerRequest.

        A string with a length between [1-128].

        :return: The name of this CreateAuthorizerRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAuthorizerRequest.

        A string with a length between [1-128].

        :param name: The name of this CreateAuthorizerRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
