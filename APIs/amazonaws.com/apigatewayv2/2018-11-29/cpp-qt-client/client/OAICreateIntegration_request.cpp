/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIntegration_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIntegration_request::OAICreateIntegration_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIntegration_request::OAICreateIntegration_request() {
    this->initializeModel();
}

OAICreateIntegration_request::~OAICreateIntegration_request() {}

void OAICreateIntegration_request::initializeModel() {

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_content_handling_strategy_isSet = false;
    m_content_handling_strategy_isValid = false;

    m_credentials_arn_isSet = false;
    m_credentials_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_integration_method_isSet = false;
    m_integration_method_isValid = false;

    m_integration_subtype_isSet = false;
    m_integration_subtype_isValid = false;

    m_integration_type_isSet = false;
    m_integration_type_isValid = false;

    m_integration_uri_isSet = false;
    m_integration_uri_isValid = false;

    m_passthrough_behavior_isSet = false;
    m_passthrough_behavior_isValid = false;

    m_payload_format_version_isSet = false;
    m_payload_format_version_isValid = false;

    m_request_parameters_isSet = false;
    m_request_parameters_isValid = false;

    m_request_templates_isSet = false;
    m_request_templates_isValid = false;

    m_response_parameters_isSet = false;
    m_response_parameters_isValid = false;

    m_template_selection_expression_isSet = false;
    m_template_selection_expression_isValid = false;

    m_timeout_in_millis_isSet = false;
    m_timeout_in_millis_isValid = false;

    m_tls_config_isSet = false;
    m_tls_config_isValid = false;
}

void OAICreateIntegration_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIntegration_request::fromJsonObject(QJsonObject json) {

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("connectionId")]);
    m_connection_id_isSet = !json[QString("connectionId")].isNull() && m_connection_id_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("connectionType")]);
    m_connection_type_isSet = !json[QString("connectionType")].isNull() && m_connection_type_isValid;

    m_content_handling_strategy_isValid = ::OpenAPI::fromJsonValue(m_content_handling_strategy, json[QString("contentHandlingStrategy")]);
    m_content_handling_strategy_isSet = !json[QString("contentHandlingStrategy")].isNull() && m_content_handling_strategy_isValid;

    m_credentials_arn_isValid = ::OpenAPI::fromJsonValue(m_credentials_arn, json[QString("credentialsArn")]);
    m_credentials_arn_isSet = !json[QString("credentialsArn")].isNull() && m_credentials_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_integration_method_isValid = ::OpenAPI::fromJsonValue(m_integration_method, json[QString("integrationMethod")]);
    m_integration_method_isSet = !json[QString("integrationMethod")].isNull() && m_integration_method_isValid;

    m_integration_subtype_isValid = ::OpenAPI::fromJsonValue(m_integration_subtype, json[QString("integrationSubtype")]);
    m_integration_subtype_isSet = !json[QString("integrationSubtype")].isNull() && m_integration_subtype_isValid;

    m_integration_type_isValid = ::OpenAPI::fromJsonValue(m_integration_type, json[QString("integrationType")]);
    m_integration_type_isSet = !json[QString("integrationType")].isNull() && m_integration_type_isValid;

    m_integration_uri_isValid = ::OpenAPI::fromJsonValue(m_integration_uri, json[QString("integrationUri")]);
    m_integration_uri_isSet = !json[QString("integrationUri")].isNull() && m_integration_uri_isValid;

    m_passthrough_behavior_isValid = ::OpenAPI::fromJsonValue(m_passthrough_behavior, json[QString("passthroughBehavior")]);
    m_passthrough_behavior_isSet = !json[QString("passthroughBehavior")].isNull() && m_passthrough_behavior_isValid;

    m_payload_format_version_isValid = ::OpenAPI::fromJsonValue(m_payload_format_version, json[QString("payloadFormatVersion")]);
    m_payload_format_version_isSet = !json[QString("payloadFormatVersion")].isNull() && m_payload_format_version_isValid;

    m_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_request_parameters, json[QString("requestParameters")]);
    m_request_parameters_isSet = !json[QString("requestParameters")].isNull() && m_request_parameters_isValid;

    m_request_templates_isValid = ::OpenAPI::fromJsonValue(m_request_templates, json[QString("requestTemplates")]);
    m_request_templates_isSet = !json[QString("requestTemplates")].isNull() && m_request_templates_isValid;

    if(json["responseParameters"].isObject()){
        auto varmap = json["responseParameters"].toObject().toVariantMap();
        m_response_parameters_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QMap<QString, QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_response_parameters_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_response_parameters_isSet &= !jval.isNull() && m_response_parameters_isValid;
                m_response_parameters.insert(m_response_parameters.end(), val, item);
            }
        }
    }

    m_template_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_template_selection_expression, json[QString("templateSelectionExpression")]);
    m_template_selection_expression_isSet = !json[QString("templateSelectionExpression")].isNull() && m_template_selection_expression_isValid;

    m_timeout_in_millis_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_millis, json[QString("timeoutInMillis")]);
    m_timeout_in_millis_isSet = !json[QString("timeoutInMillis")].isNull() && m_timeout_in_millis_isValid;

    m_tls_config_isValid = ::OpenAPI::fromJsonValue(m_tls_config, json[QString("tlsConfig")]);
    m_tls_config_isSet = !json[QString("tlsConfig")].isNull() && m_tls_config_isValid;
}

QString OAICreateIntegration_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIntegration_request::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_id_isSet) {
        obj.insert(QString("connectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_connection_type_isSet) {
        obj.insert(QString("connectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_content_handling_strategy_isSet) {
        obj.insert(QString("contentHandlingStrategy"), ::OpenAPI::toJsonValue(m_content_handling_strategy));
    }
    if (m_credentials_arn_isSet) {
        obj.insert(QString("credentialsArn"), ::OpenAPI::toJsonValue(m_credentials_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_integration_method_isSet) {
        obj.insert(QString("integrationMethod"), ::OpenAPI::toJsonValue(m_integration_method));
    }
    if (m_integration_subtype_isSet) {
        obj.insert(QString("integrationSubtype"), ::OpenAPI::toJsonValue(m_integration_subtype));
    }
    if (m_integration_type_isSet) {
        obj.insert(QString("integrationType"), ::OpenAPI::toJsonValue(m_integration_type));
    }
    if (m_integration_uri_isSet) {
        obj.insert(QString("integrationUri"), ::OpenAPI::toJsonValue(m_integration_uri));
    }
    if (m_passthrough_behavior_isSet) {
        obj.insert(QString("passthroughBehavior"), ::OpenAPI::toJsonValue(m_passthrough_behavior));
    }
    if (m_payload_format_version_isSet) {
        obj.insert(QString("payloadFormatVersion"), ::OpenAPI::toJsonValue(m_payload_format_version));
    }
    if (m_request_parameters.size() > 0) {
        obj.insert(QString("requestParameters"), ::OpenAPI::toJsonValue(m_request_parameters));
    }
    if (m_request_templates.size() > 0) {
        obj.insert(QString("requestTemplates"), ::OpenAPI::toJsonValue(m_request_templates));
    }
    if (m_response_parameters.size() > 0) {
        
        obj.insert(QString("responseParameters"), toJsonValue(m_response_parameters));
    }
    if (m_template_selection_expression_isSet) {
        obj.insert(QString("templateSelectionExpression"), ::OpenAPI::toJsonValue(m_template_selection_expression));
    }
    if (m_timeout_in_millis_isSet) {
        obj.insert(QString("timeoutInMillis"), ::OpenAPI::toJsonValue(m_timeout_in_millis));
    }
    if (m_tls_config.isSet()) {
        obj.insert(QString("tlsConfig"), ::OpenAPI::toJsonValue(m_tls_config));
    }
    return obj;
}

QString OAICreateIntegration_request::getConnectionId() const {
    return m_connection_id;
}
void OAICreateIntegration_request::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAICreateIntegration_request::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAICreateIntegration_request::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

QString OAICreateIntegration_request::getConnectionType() const {
    return m_connection_type;
}
void OAICreateIntegration_request::setConnectionType(const QString &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAICreateIntegration_request::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAICreateIntegration_request::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

QString OAICreateIntegration_request::getContentHandlingStrategy() const {
    return m_content_handling_strategy;
}
void OAICreateIntegration_request::setContentHandlingStrategy(const QString &content_handling_strategy) {
    m_content_handling_strategy = content_handling_strategy;
    m_content_handling_strategy_isSet = true;
}

bool OAICreateIntegration_request::is_content_handling_strategy_Set() const{
    return m_content_handling_strategy_isSet;
}

bool OAICreateIntegration_request::is_content_handling_strategy_Valid() const{
    return m_content_handling_strategy_isValid;
}

QString OAICreateIntegration_request::getCredentialsArn() const {
    return m_credentials_arn;
}
void OAICreateIntegration_request::setCredentialsArn(const QString &credentials_arn) {
    m_credentials_arn = credentials_arn;
    m_credentials_arn_isSet = true;
}

bool OAICreateIntegration_request::is_credentials_arn_Set() const{
    return m_credentials_arn_isSet;
}

bool OAICreateIntegration_request::is_credentials_arn_Valid() const{
    return m_credentials_arn_isValid;
}

QString OAICreateIntegration_request::getDescription() const {
    return m_description;
}
void OAICreateIntegration_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateIntegration_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateIntegration_request::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateIntegration_request::getIntegrationMethod() const {
    return m_integration_method;
}
void OAICreateIntegration_request::setIntegrationMethod(const QString &integration_method) {
    m_integration_method = integration_method;
    m_integration_method_isSet = true;
}

bool OAICreateIntegration_request::is_integration_method_Set() const{
    return m_integration_method_isSet;
}

bool OAICreateIntegration_request::is_integration_method_Valid() const{
    return m_integration_method_isValid;
}

QString OAICreateIntegration_request::getIntegrationSubtype() const {
    return m_integration_subtype;
}
void OAICreateIntegration_request::setIntegrationSubtype(const QString &integration_subtype) {
    m_integration_subtype = integration_subtype;
    m_integration_subtype_isSet = true;
}

bool OAICreateIntegration_request::is_integration_subtype_Set() const{
    return m_integration_subtype_isSet;
}

bool OAICreateIntegration_request::is_integration_subtype_Valid() const{
    return m_integration_subtype_isValid;
}

QString OAICreateIntegration_request::getIntegrationType() const {
    return m_integration_type;
}
void OAICreateIntegration_request::setIntegrationType(const QString &integration_type) {
    m_integration_type = integration_type;
    m_integration_type_isSet = true;
}

bool OAICreateIntegration_request::is_integration_type_Set() const{
    return m_integration_type_isSet;
}

bool OAICreateIntegration_request::is_integration_type_Valid() const{
    return m_integration_type_isValid;
}

QString OAICreateIntegration_request::getIntegrationUri() const {
    return m_integration_uri;
}
void OAICreateIntegration_request::setIntegrationUri(const QString &integration_uri) {
    m_integration_uri = integration_uri;
    m_integration_uri_isSet = true;
}

bool OAICreateIntegration_request::is_integration_uri_Set() const{
    return m_integration_uri_isSet;
}

bool OAICreateIntegration_request::is_integration_uri_Valid() const{
    return m_integration_uri_isValid;
}

QString OAICreateIntegration_request::getPassthroughBehavior() const {
    return m_passthrough_behavior;
}
void OAICreateIntegration_request::setPassthroughBehavior(const QString &passthrough_behavior) {
    m_passthrough_behavior = passthrough_behavior;
    m_passthrough_behavior_isSet = true;
}

bool OAICreateIntegration_request::is_passthrough_behavior_Set() const{
    return m_passthrough_behavior_isSet;
}

bool OAICreateIntegration_request::is_passthrough_behavior_Valid() const{
    return m_passthrough_behavior_isValid;
}

QString OAICreateIntegration_request::getPayloadFormatVersion() const {
    return m_payload_format_version;
}
void OAICreateIntegration_request::setPayloadFormatVersion(const QString &payload_format_version) {
    m_payload_format_version = payload_format_version;
    m_payload_format_version_isSet = true;
}

bool OAICreateIntegration_request::is_payload_format_version_Set() const{
    return m_payload_format_version_isSet;
}

bool OAICreateIntegration_request::is_payload_format_version_Valid() const{
    return m_payload_format_version_isValid;
}

QMap<QString, QString> OAICreateIntegration_request::getRequestParameters() const {
    return m_request_parameters;
}
void OAICreateIntegration_request::setRequestParameters(const QMap<QString, QString> &request_parameters) {
    m_request_parameters = request_parameters;
    m_request_parameters_isSet = true;
}

bool OAICreateIntegration_request::is_request_parameters_Set() const{
    return m_request_parameters_isSet;
}

bool OAICreateIntegration_request::is_request_parameters_Valid() const{
    return m_request_parameters_isValid;
}

QMap<QString, QString> OAICreateIntegration_request::getRequestTemplates() const {
    return m_request_templates;
}
void OAICreateIntegration_request::setRequestTemplates(const QMap<QString, QString> &request_templates) {
    m_request_templates = request_templates;
    m_request_templates_isSet = true;
}

bool OAICreateIntegration_request::is_request_templates_Set() const{
    return m_request_templates_isSet;
}

bool OAICreateIntegration_request::is_request_templates_Valid() const{
    return m_request_templates_isValid;
}

QMap<QString, QMap> OAICreateIntegration_request::getResponseParameters() const {
    return m_response_parameters;
}
void OAICreateIntegration_request::setResponseParameters(const QMap<QString, QMap> &response_parameters) {
    m_response_parameters = response_parameters;
    m_response_parameters_isSet = true;
}

bool OAICreateIntegration_request::is_response_parameters_Set() const{
    return m_response_parameters_isSet;
}

bool OAICreateIntegration_request::is_response_parameters_Valid() const{
    return m_response_parameters_isValid;
}

QString OAICreateIntegration_request::getTemplateSelectionExpression() const {
    return m_template_selection_expression;
}
void OAICreateIntegration_request::setTemplateSelectionExpression(const QString &template_selection_expression) {
    m_template_selection_expression = template_selection_expression;
    m_template_selection_expression_isSet = true;
}

bool OAICreateIntegration_request::is_template_selection_expression_Set() const{
    return m_template_selection_expression_isSet;
}

bool OAICreateIntegration_request::is_template_selection_expression_Valid() const{
    return m_template_selection_expression_isValid;
}

qint32 OAICreateIntegration_request::getTimeoutInMillis() const {
    return m_timeout_in_millis;
}
void OAICreateIntegration_request::setTimeoutInMillis(const qint32 &timeout_in_millis) {
    m_timeout_in_millis = timeout_in_millis;
    m_timeout_in_millis_isSet = true;
}

bool OAICreateIntegration_request::is_timeout_in_millis_Set() const{
    return m_timeout_in_millis_isSet;
}

bool OAICreateIntegration_request::is_timeout_in_millis_Valid() const{
    return m_timeout_in_millis_isValid;
}

OAICreateIntegration_request_tlsConfig OAICreateIntegration_request::getTlsConfig() const {
    return m_tls_config;
}
void OAICreateIntegration_request::setTlsConfig(const OAICreateIntegration_request_tlsConfig &tls_config) {
    m_tls_config = tls_config;
    m_tls_config_isSet = true;
}

bool OAICreateIntegration_request::is_tls_config_Set() const{
    return m_tls_config_isSet;
}

bool OAICreateIntegration_request::is_tls_config_Valid() const{
    return m_tls_config_isValid;
}

bool OAICreateIntegration_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_handling_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_behavior_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_format_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIntegration_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_integration_type_isValid && true;
}

} // namespace OpenAPI
