/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateAuthorizerRequest.h
 *
 * Creates a new Authorizer resource to represent an authorizer.
 */

#ifndef OAICreateAuthorizerRequest_H
#define OAICreateAuthorizerRequest_H

#include <QJsonObject>

#include "OAIAuthorizerType.h"
#include "OAICreateAuthorizerResponse_JwtConfiguration.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateAuthorizerResponse_JwtConfiguration;

class OAICreateAuthorizerRequest : public OAIObject {
public:
    OAICreateAuthorizerRequest();
    OAICreateAuthorizerRequest(QString json);
    ~OAICreateAuthorizerRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthorizerCredentialsArn() const;
    void setAuthorizerCredentialsArn(const QString &authorizer_credentials_arn);
    bool is_authorizer_credentials_arn_Set() const;
    bool is_authorizer_credentials_arn_Valid() const;

    QString getAuthorizerPayloadFormatVersion() const;
    void setAuthorizerPayloadFormatVersion(const QString &authorizer_payload_format_version);
    bool is_authorizer_payload_format_version_Set() const;
    bool is_authorizer_payload_format_version_Valid() const;

    qint32 getAuthorizerResultTtlInSeconds() const;
    void setAuthorizerResultTtlInSeconds(const qint32 &authorizer_result_ttl_in_seconds);
    bool is_authorizer_result_ttl_in_seconds_Set() const;
    bool is_authorizer_result_ttl_in_seconds_Valid() const;

    OAIAuthorizerType getAuthorizerType() const;
    void setAuthorizerType(const OAIAuthorizerType &authorizer_type);
    bool is_authorizer_type_Set() const;
    bool is_authorizer_type_Valid() const;

    QString getAuthorizerUri() const;
    void setAuthorizerUri(const QString &authorizer_uri);
    bool is_authorizer_uri_Set() const;
    bool is_authorizer_uri_Valid() const;

    bool getEnableSimpleResponses() const;
    void setEnableSimpleResponses(const bool &enable_simple_responses);
    bool is_enable_simple_responses_Set() const;
    bool is_enable_simple_responses_Valid() const;

    QList getIdentitySource() const;
    void setIdentitySource(const QList &identity_source);
    bool is_identity_source_Set() const;
    bool is_identity_source_Valid() const;

    QString getIdentityValidationExpression() const;
    void setIdentityValidationExpression(const QString &identity_validation_expression);
    bool is_identity_validation_expression_Set() const;
    bool is_identity_validation_expression_Valid() const;

    OAICreateAuthorizerResponse_JwtConfiguration getJwtConfiguration() const;
    void setJwtConfiguration(const OAICreateAuthorizerResponse_JwtConfiguration &jwt_configuration);
    bool is_jwt_configuration_Set() const;
    bool is_jwt_configuration_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_authorizer_credentials_arn;
    bool m_authorizer_credentials_arn_isSet;
    bool m_authorizer_credentials_arn_isValid;

    QString m_authorizer_payload_format_version;
    bool m_authorizer_payload_format_version_isSet;
    bool m_authorizer_payload_format_version_isValid;

    qint32 m_authorizer_result_ttl_in_seconds;
    bool m_authorizer_result_ttl_in_seconds_isSet;
    bool m_authorizer_result_ttl_in_seconds_isValid;

    OAIAuthorizerType m_authorizer_type;
    bool m_authorizer_type_isSet;
    bool m_authorizer_type_isValid;

    QString m_authorizer_uri;
    bool m_authorizer_uri_isSet;
    bool m_authorizer_uri_isValid;

    bool m_enable_simple_responses;
    bool m_enable_simple_responses_isSet;
    bool m_enable_simple_responses_isValid;

    QList m_identity_source;
    bool m_identity_source_isSet;
    bool m_identity_source_isValid;

    QString m_identity_validation_expression;
    bool m_identity_validation_expression_isSet;
    bool m_identity_validation_expression_isValid;

    OAICreateAuthorizerResponse_JwtConfiguration m_jwt_configuration;
    bool m_jwt_configuration_isSet;
    bool m_jwt_configuration_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateAuthorizerRequest)

#endif // OAICreateAuthorizerRequest_H
