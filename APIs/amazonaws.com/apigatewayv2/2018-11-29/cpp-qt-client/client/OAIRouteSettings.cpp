/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRouteSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRouteSettings::OAIRouteSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRouteSettings::OAIRouteSettings() {
    this->initializeModel();
}

OAIRouteSettings::~OAIRouteSettings() {}

void OAIRouteSettings::initializeModel() {

    m_data_trace_enabled_isSet = false;
    m_data_trace_enabled_isValid = false;

    m_detailed_metrics_enabled_isSet = false;
    m_detailed_metrics_enabled_isValid = false;

    m_logging_level_isSet = false;
    m_logging_level_isValid = false;

    m_throttling_burst_limit_isSet = false;
    m_throttling_burst_limit_isValid = false;

    m_throttling_rate_limit_isSet = false;
    m_throttling_rate_limit_isValid = false;
}

void OAIRouteSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRouteSettings::fromJsonObject(QJsonObject json) {

    m_data_trace_enabled_isValid = ::OpenAPI::fromJsonValue(m_data_trace_enabled, json[QString("DataTraceEnabled")]);
    m_data_trace_enabled_isSet = !json[QString("DataTraceEnabled")].isNull() && m_data_trace_enabled_isValid;

    m_detailed_metrics_enabled_isValid = ::OpenAPI::fromJsonValue(m_detailed_metrics_enabled, json[QString("DetailedMetricsEnabled")]);
    m_detailed_metrics_enabled_isSet = !json[QString("DetailedMetricsEnabled")].isNull() && m_detailed_metrics_enabled_isValid;

    m_logging_level_isValid = ::OpenAPI::fromJsonValue(m_logging_level, json[QString("LoggingLevel")]);
    m_logging_level_isSet = !json[QString("LoggingLevel")].isNull() && m_logging_level_isValid;

    m_throttling_burst_limit_isValid = ::OpenAPI::fromJsonValue(m_throttling_burst_limit, json[QString("ThrottlingBurstLimit")]);
    m_throttling_burst_limit_isSet = !json[QString("ThrottlingBurstLimit")].isNull() && m_throttling_burst_limit_isValid;

    m_throttling_rate_limit_isValid = ::OpenAPI::fromJsonValue(m_throttling_rate_limit, json[QString("ThrottlingRateLimit")]);
    m_throttling_rate_limit_isSet = !json[QString("ThrottlingRateLimit")].isNull() && m_throttling_rate_limit_isValid;
}

QString OAIRouteSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRouteSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_data_trace_enabled_isSet) {
        obj.insert(QString("DataTraceEnabled"), ::OpenAPI::toJsonValue(m_data_trace_enabled));
    }
    if (m_detailed_metrics_enabled_isSet) {
        obj.insert(QString("DetailedMetricsEnabled"), ::OpenAPI::toJsonValue(m_detailed_metrics_enabled));
    }
    if (m_logging_level.isSet()) {
        obj.insert(QString("LoggingLevel"), ::OpenAPI::toJsonValue(m_logging_level));
    }
    if (m_throttling_burst_limit_isSet) {
        obj.insert(QString("ThrottlingBurstLimit"), ::OpenAPI::toJsonValue(m_throttling_burst_limit));
    }
    if (m_throttling_rate_limit_isSet) {
        obj.insert(QString("ThrottlingRateLimit"), ::OpenAPI::toJsonValue(m_throttling_rate_limit));
    }
    return obj;
}

bool OAIRouteSettings::getDataTraceEnabled() const {
    return m_data_trace_enabled;
}
void OAIRouteSettings::setDataTraceEnabled(const bool &data_trace_enabled) {
    m_data_trace_enabled = data_trace_enabled;
    m_data_trace_enabled_isSet = true;
}

bool OAIRouteSettings::is_data_trace_enabled_Set() const{
    return m_data_trace_enabled_isSet;
}

bool OAIRouteSettings::is_data_trace_enabled_Valid() const{
    return m_data_trace_enabled_isValid;
}

bool OAIRouteSettings::getDetailedMetricsEnabled() const {
    return m_detailed_metrics_enabled;
}
void OAIRouteSettings::setDetailedMetricsEnabled(const bool &detailed_metrics_enabled) {
    m_detailed_metrics_enabled = detailed_metrics_enabled;
    m_detailed_metrics_enabled_isSet = true;
}

bool OAIRouteSettings::is_detailed_metrics_enabled_Set() const{
    return m_detailed_metrics_enabled_isSet;
}

bool OAIRouteSettings::is_detailed_metrics_enabled_Valid() const{
    return m_detailed_metrics_enabled_isValid;
}

OAILoggingLevel OAIRouteSettings::getLoggingLevel() const {
    return m_logging_level;
}
void OAIRouteSettings::setLoggingLevel(const OAILoggingLevel &logging_level) {
    m_logging_level = logging_level;
    m_logging_level_isSet = true;
}

bool OAIRouteSettings::is_logging_level_Set() const{
    return m_logging_level_isSet;
}

bool OAIRouteSettings::is_logging_level_Valid() const{
    return m_logging_level_isValid;
}

qint32 OAIRouteSettings::getThrottlingBurstLimit() const {
    return m_throttling_burst_limit;
}
void OAIRouteSettings::setThrottlingBurstLimit(const qint32 &throttling_burst_limit) {
    m_throttling_burst_limit = throttling_burst_limit;
    m_throttling_burst_limit_isSet = true;
}

bool OAIRouteSettings::is_throttling_burst_limit_Set() const{
    return m_throttling_burst_limit_isSet;
}

bool OAIRouteSettings::is_throttling_burst_limit_Valid() const{
    return m_throttling_burst_limit_isValid;
}

double OAIRouteSettings::getThrottlingRateLimit() const {
    return m_throttling_rate_limit;
}
void OAIRouteSettings::setThrottlingRateLimit(const double &throttling_rate_limit) {
    m_throttling_rate_limit = throttling_rate_limit;
    m_throttling_rate_limit_isSet = true;
}

bool OAIRouteSettings::is_throttling_rate_limit_Set() const{
    return m_throttling_rate_limit_isSet;
}

bool OAIRouteSettings::is_throttling_rate_limit_Valid() const{
    return m_throttling_rate_limit_isValid;
}

bool OAIRouteSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_trace_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detailed_metrics_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttling_burst_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_throttling_rate_limit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRouteSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
