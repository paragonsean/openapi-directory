/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAuthorizer_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAuthorizer_request::OAICreateAuthorizer_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAuthorizer_request::OAICreateAuthorizer_request() {
    this->initializeModel();
}

OAICreateAuthorizer_request::~OAICreateAuthorizer_request() {}

void OAICreateAuthorizer_request::initializeModel() {

    m_authorizer_credentials_arn_isSet = false;
    m_authorizer_credentials_arn_isValid = false;

    m_authorizer_payload_format_version_isSet = false;
    m_authorizer_payload_format_version_isValid = false;

    m_authorizer_result_ttl_in_seconds_isSet = false;
    m_authorizer_result_ttl_in_seconds_isValid = false;

    m_authorizer_type_isSet = false;
    m_authorizer_type_isValid = false;

    m_authorizer_uri_isSet = false;
    m_authorizer_uri_isValid = false;

    m_enable_simple_responses_isSet = false;
    m_enable_simple_responses_isValid = false;

    m_identity_source_isSet = false;
    m_identity_source_isValid = false;

    m_identity_validation_expression_isSet = false;
    m_identity_validation_expression_isValid = false;

    m_jwt_configuration_isSet = false;
    m_jwt_configuration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateAuthorizer_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAuthorizer_request::fromJsonObject(QJsonObject json) {

    m_authorizer_credentials_arn_isValid = ::OpenAPI::fromJsonValue(m_authorizer_credentials_arn, json[QString("authorizerCredentialsArn")]);
    m_authorizer_credentials_arn_isSet = !json[QString("authorizerCredentialsArn")].isNull() && m_authorizer_credentials_arn_isValid;

    m_authorizer_payload_format_version_isValid = ::OpenAPI::fromJsonValue(m_authorizer_payload_format_version, json[QString("authorizerPayloadFormatVersion")]);
    m_authorizer_payload_format_version_isSet = !json[QString("authorizerPayloadFormatVersion")].isNull() && m_authorizer_payload_format_version_isValid;

    m_authorizer_result_ttl_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_authorizer_result_ttl_in_seconds, json[QString("authorizerResultTtlInSeconds")]);
    m_authorizer_result_ttl_in_seconds_isSet = !json[QString("authorizerResultTtlInSeconds")].isNull() && m_authorizer_result_ttl_in_seconds_isValid;

    m_authorizer_type_isValid = ::OpenAPI::fromJsonValue(m_authorizer_type, json[QString("authorizerType")]);
    m_authorizer_type_isSet = !json[QString("authorizerType")].isNull() && m_authorizer_type_isValid;

    m_authorizer_uri_isValid = ::OpenAPI::fromJsonValue(m_authorizer_uri, json[QString("authorizerUri")]);
    m_authorizer_uri_isSet = !json[QString("authorizerUri")].isNull() && m_authorizer_uri_isValid;

    m_enable_simple_responses_isValid = ::OpenAPI::fromJsonValue(m_enable_simple_responses, json[QString("enableSimpleResponses")]);
    m_enable_simple_responses_isSet = !json[QString("enableSimpleResponses")].isNull() && m_enable_simple_responses_isValid;

    m_identity_source_isValid = ::OpenAPI::fromJsonValue(m_identity_source, json[QString("identitySource")]);
    m_identity_source_isSet = !json[QString("identitySource")].isNull() && m_identity_source_isValid;

    m_identity_validation_expression_isValid = ::OpenAPI::fromJsonValue(m_identity_validation_expression, json[QString("identityValidationExpression")]);
    m_identity_validation_expression_isSet = !json[QString("identityValidationExpression")].isNull() && m_identity_validation_expression_isValid;

    m_jwt_configuration_isValid = ::OpenAPI::fromJsonValue(m_jwt_configuration, json[QString("jwtConfiguration")]);
    m_jwt_configuration_isSet = !json[QString("jwtConfiguration")].isNull() && m_jwt_configuration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAICreateAuthorizer_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAuthorizer_request::asJsonObject() const {
    QJsonObject obj;
    if (m_authorizer_credentials_arn_isSet) {
        obj.insert(QString("authorizerCredentialsArn"), ::OpenAPI::toJsonValue(m_authorizer_credentials_arn));
    }
    if (m_authorizer_payload_format_version_isSet) {
        obj.insert(QString("authorizerPayloadFormatVersion"), ::OpenAPI::toJsonValue(m_authorizer_payload_format_version));
    }
    if (m_authorizer_result_ttl_in_seconds_isSet) {
        obj.insert(QString("authorizerResultTtlInSeconds"), ::OpenAPI::toJsonValue(m_authorizer_result_ttl_in_seconds));
    }
    if (m_authorizer_type_isSet) {
        obj.insert(QString("authorizerType"), ::OpenAPI::toJsonValue(m_authorizer_type));
    }
    if (m_authorizer_uri_isSet) {
        obj.insert(QString("authorizerUri"), ::OpenAPI::toJsonValue(m_authorizer_uri));
    }
    if (m_enable_simple_responses_isSet) {
        obj.insert(QString("enableSimpleResponses"), ::OpenAPI::toJsonValue(m_enable_simple_responses));
    }
    if (m_identity_source.size() > 0) {
        obj.insert(QString("identitySource"), ::OpenAPI::toJsonValue(m_identity_source));
    }
    if (m_identity_validation_expression_isSet) {
        obj.insert(QString("identityValidationExpression"), ::OpenAPI::toJsonValue(m_identity_validation_expression));
    }
    if (m_jwt_configuration.isSet()) {
        obj.insert(QString("jwtConfiguration"), ::OpenAPI::toJsonValue(m_jwt_configuration));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICreateAuthorizer_request::getAuthorizerCredentialsArn() const {
    return m_authorizer_credentials_arn;
}
void OAICreateAuthorizer_request::setAuthorizerCredentialsArn(const QString &authorizer_credentials_arn) {
    m_authorizer_credentials_arn = authorizer_credentials_arn;
    m_authorizer_credentials_arn_isSet = true;
}

bool OAICreateAuthorizer_request::is_authorizer_credentials_arn_Set() const{
    return m_authorizer_credentials_arn_isSet;
}

bool OAICreateAuthorizer_request::is_authorizer_credentials_arn_Valid() const{
    return m_authorizer_credentials_arn_isValid;
}

QString OAICreateAuthorizer_request::getAuthorizerPayloadFormatVersion() const {
    return m_authorizer_payload_format_version;
}
void OAICreateAuthorizer_request::setAuthorizerPayloadFormatVersion(const QString &authorizer_payload_format_version) {
    m_authorizer_payload_format_version = authorizer_payload_format_version;
    m_authorizer_payload_format_version_isSet = true;
}

bool OAICreateAuthorizer_request::is_authorizer_payload_format_version_Set() const{
    return m_authorizer_payload_format_version_isSet;
}

bool OAICreateAuthorizer_request::is_authorizer_payload_format_version_Valid() const{
    return m_authorizer_payload_format_version_isValid;
}

qint32 OAICreateAuthorizer_request::getAuthorizerResultTtlInSeconds() const {
    return m_authorizer_result_ttl_in_seconds;
}
void OAICreateAuthorizer_request::setAuthorizerResultTtlInSeconds(const qint32 &authorizer_result_ttl_in_seconds) {
    m_authorizer_result_ttl_in_seconds = authorizer_result_ttl_in_seconds;
    m_authorizer_result_ttl_in_seconds_isSet = true;
}

bool OAICreateAuthorizer_request::is_authorizer_result_ttl_in_seconds_Set() const{
    return m_authorizer_result_ttl_in_seconds_isSet;
}

bool OAICreateAuthorizer_request::is_authorizer_result_ttl_in_seconds_Valid() const{
    return m_authorizer_result_ttl_in_seconds_isValid;
}

QString OAICreateAuthorizer_request::getAuthorizerType() const {
    return m_authorizer_type;
}
void OAICreateAuthorizer_request::setAuthorizerType(const QString &authorizer_type) {
    m_authorizer_type = authorizer_type;
    m_authorizer_type_isSet = true;
}

bool OAICreateAuthorizer_request::is_authorizer_type_Set() const{
    return m_authorizer_type_isSet;
}

bool OAICreateAuthorizer_request::is_authorizer_type_Valid() const{
    return m_authorizer_type_isValid;
}

QString OAICreateAuthorizer_request::getAuthorizerUri() const {
    return m_authorizer_uri;
}
void OAICreateAuthorizer_request::setAuthorizerUri(const QString &authorizer_uri) {
    m_authorizer_uri = authorizer_uri;
    m_authorizer_uri_isSet = true;
}

bool OAICreateAuthorizer_request::is_authorizer_uri_Set() const{
    return m_authorizer_uri_isSet;
}

bool OAICreateAuthorizer_request::is_authorizer_uri_Valid() const{
    return m_authorizer_uri_isValid;
}

bool OAICreateAuthorizer_request::isEnableSimpleResponses() const {
    return m_enable_simple_responses;
}
void OAICreateAuthorizer_request::setEnableSimpleResponses(const bool &enable_simple_responses) {
    m_enable_simple_responses = enable_simple_responses;
    m_enable_simple_responses_isSet = true;
}

bool OAICreateAuthorizer_request::is_enable_simple_responses_Set() const{
    return m_enable_simple_responses_isSet;
}

bool OAICreateAuthorizer_request::is_enable_simple_responses_Valid() const{
    return m_enable_simple_responses_isValid;
}

QList<QString> OAICreateAuthorizer_request::getIdentitySource() const {
    return m_identity_source;
}
void OAICreateAuthorizer_request::setIdentitySource(const QList<QString> &identity_source) {
    m_identity_source = identity_source;
    m_identity_source_isSet = true;
}

bool OAICreateAuthorizer_request::is_identity_source_Set() const{
    return m_identity_source_isSet;
}

bool OAICreateAuthorizer_request::is_identity_source_Valid() const{
    return m_identity_source_isValid;
}

QString OAICreateAuthorizer_request::getIdentityValidationExpression() const {
    return m_identity_validation_expression;
}
void OAICreateAuthorizer_request::setIdentityValidationExpression(const QString &identity_validation_expression) {
    m_identity_validation_expression = identity_validation_expression;
    m_identity_validation_expression_isSet = true;
}

bool OAICreateAuthorizer_request::is_identity_validation_expression_Set() const{
    return m_identity_validation_expression_isSet;
}

bool OAICreateAuthorizer_request::is_identity_validation_expression_Valid() const{
    return m_identity_validation_expression_isValid;
}

OAICreateAuthorizer_request_jwtConfiguration OAICreateAuthorizer_request::getJwtConfiguration() const {
    return m_jwt_configuration;
}
void OAICreateAuthorizer_request::setJwtConfiguration(const OAICreateAuthorizer_request_jwtConfiguration &jwt_configuration) {
    m_jwt_configuration = jwt_configuration;
    m_jwt_configuration_isSet = true;
}

bool OAICreateAuthorizer_request::is_jwt_configuration_Set() const{
    return m_jwt_configuration_isSet;
}

bool OAICreateAuthorizer_request::is_jwt_configuration_Valid() const{
    return m_jwt_configuration_isValid;
}

QString OAICreateAuthorizer_request::getName() const {
    return m_name;
}
void OAICreateAuthorizer_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAuthorizer_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAuthorizer_request::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateAuthorizer_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorizer_credentials_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_payload_format_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_result_ttl_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_simple_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_validation_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAuthorizer_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorizer_type_isValid && m_identity_source_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
