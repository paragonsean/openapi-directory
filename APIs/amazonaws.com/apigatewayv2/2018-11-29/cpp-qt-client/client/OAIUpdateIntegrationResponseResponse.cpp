/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateIntegrationResponseResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateIntegrationResponseResponse::OAIUpdateIntegrationResponseResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateIntegrationResponseResponse::OAIUpdateIntegrationResponseResponse() {
    this->initializeModel();
}

OAIUpdateIntegrationResponseResponse::~OAIUpdateIntegrationResponseResponse() {}

void OAIUpdateIntegrationResponseResponse::initializeModel() {

    m_content_handling_strategy_isSet = false;
    m_content_handling_strategy_isValid = false;

    m_integration_response_id_isSet = false;
    m_integration_response_id_isValid = false;

    m_integration_response_key_isSet = false;
    m_integration_response_key_isValid = false;

    m_response_parameters_isSet = false;
    m_response_parameters_isValid = false;

    m_response_templates_isSet = false;
    m_response_templates_isValid = false;

    m_template_selection_expression_isSet = false;
    m_template_selection_expression_isValid = false;
}

void OAIUpdateIntegrationResponseResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateIntegrationResponseResponse::fromJsonObject(QJsonObject json) {

    m_content_handling_strategy_isValid = ::OpenAPI::fromJsonValue(m_content_handling_strategy, json[QString("ContentHandlingStrategy")]);
    m_content_handling_strategy_isSet = !json[QString("ContentHandlingStrategy")].isNull() && m_content_handling_strategy_isValid;

    m_integration_response_id_isValid = ::OpenAPI::fromJsonValue(m_integration_response_id, json[QString("IntegrationResponseId")]);
    m_integration_response_id_isSet = !json[QString("IntegrationResponseId")].isNull() && m_integration_response_id_isValid;

    m_integration_response_key_isValid = ::OpenAPI::fromJsonValue(m_integration_response_key, json[QString("IntegrationResponseKey")]);
    m_integration_response_key_isSet = !json[QString("IntegrationResponseKey")].isNull() && m_integration_response_key_isValid;

    m_response_parameters_isValid = ::OpenAPI::fromJsonValue(m_response_parameters, json[QString("ResponseParameters")]);
    m_response_parameters_isSet = !json[QString("ResponseParameters")].isNull() && m_response_parameters_isValid;

    m_response_templates_isValid = ::OpenAPI::fromJsonValue(m_response_templates, json[QString("ResponseTemplates")]);
    m_response_templates_isSet = !json[QString("ResponseTemplates")].isNull() && m_response_templates_isValid;

    m_template_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_template_selection_expression, json[QString("TemplateSelectionExpression")]);
    m_template_selection_expression_isSet = !json[QString("TemplateSelectionExpression")].isNull() && m_template_selection_expression_isValid;
}

QString OAIUpdateIntegrationResponseResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateIntegrationResponseResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_handling_strategy.isSet()) {
        obj.insert(QString("ContentHandlingStrategy"), ::OpenAPI::toJsonValue(m_content_handling_strategy));
    }
    if (m_integration_response_id_isSet) {
        obj.insert(QString("IntegrationResponseId"), ::OpenAPI::toJsonValue(m_integration_response_id));
    }
    if (m_integration_response_key_isSet) {
        obj.insert(QString("IntegrationResponseKey"), ::OpenAPI::toJsonValue(m_integration_response_key));
    }
    if (m_response_parameters.isSet()) {
        obj.insert(QString("ResponseParameters"), ::OpenAPI::toJsonValue(m_response_parameters));
    }
    if (m_response_templates.isSet()) {
        obj.insert(QString("ResponseTemplates"), ::OpenAPI::toJsonValue(m_response_templates));
    }
    if (m_template_selection_expression_isSet) {
        obj.insert(QString("TemplateSelectionExpression"), ::OpenAPI::toJsonValue(m_template_selection_expression));
    }
    return obj;
}

OAIContentHandlingStrategy OAIUpdateIntegrationResponseResponse::getContentHandlingStrategy() const {
    return m_content_handling_strategy;
}
void OAIUpdateIntegrationResponseResponse::setContentHandlingStrategy(const OAIContentHandlingStrategy &content_handling_strategy) {
    m_content_handling_strategy = content_handling_strategy;
    m_content_handling_strategy_isSet = true;
}

bool OAIUpdateIntegrationResponseResponse::is_content_handling_strategy_Set() const{
    return m_content_handling_strategy_isSet;
}

bool OAIUpdateIntegrationResponseResponse::is_content_handling_strategy_Valid() const{
    return m_content_handling_strategy_isValid;
}

QString OAIUpdateIntegrationResponseResponse::getIntegrationResponseId() const {
    return m_integration_response_id;
}
void OAIUpdateIntegrationResponseResponse::setIntegrationResponseId(const QString &integration_response_id) {
    m_integration_response_id = integration_response_id;
    m_integration_response_id_isSet = true;
}

bool OAIUpdateIntegrationResponseResponse::is_integration_response_id_Set() const{
    return m_integration_response_id_isSet;
}

bool OAIUpdateIntegrationResponseResponse::is_integration_response_id_Valid() const{
    return m_integration_response_id_isValid;
}

QString OAIUpdateIntegrationResponseResponse::getIntegrationResponseKey() const {
    return m_integration_response_key;
}
void OAIUpdateIntegrationResponseResponse::setIntegrationResponseKey(const QString &integration_response_key) {
    m_integration_response_key = integration_response_key;
    m_integration_response_key_isSet = true;
}

bool OAIUpdateIntegrationResponseResponse::is_integration_response_key_Set() const{
    return m_integration_response_key_isSet;
}

bool OAIUpdateIntegrationResponseResponse::is_integration_response_key_Valid() const{
    return m_integration_response_key_isValid;
}

QMap OAIUpdateIntegrationResponseResponse::getResponseParameters() const {
    return m_response_parameters;
}
void OAIUpdateIntegrationResponseResponse::setResponseParameters(const QMap &response_parameters) {
    m_response_parameters = response_parameters;
    m_response_parameters_isSet = true;
}

bool OAIUpdateIntegrationResponseResponse::is_response_parameters_Set() const{
    return m_response_parameters_isSet;
}

bool OAIUpdateIntegrationResponseResponse::is_response_parameters_Valid() const{
    return m_response_parameters_isValid;
}

QMap OAIUpdateIntegrationResponseResponse::getResponseTemplates() const {
    return m_response_templates;
}
void OAIUpdateIntegrationResponseResponse::setResponseTemplates(const QMap &response_templates) {
    m_response_templates = response_templates;
    m_response_templates_isSet = true;
}

bool OAIUpdateIntegrationResponseResponse::is_response_templates_Set() const{
    return m_response_templates_isSet;
}

bool OAIUpdateIntegrationResponseResponse::is_response_templates_Valid() const{
    return m_response_templates_isValid;
}

QString OAIUpdateIntegrationResponseResponse::getTemplateSelectionExpression() const {
    return m_template_selection_expression;
}
void OAIUpdateIntegrationResponseResponse::setTemplateSelectionExpression(const QString &template_selection_expression) {
    m_template_selection_expression = template_selection_expression;
    m_template_selection_expression_isSet = true;
}

bool OAIUpdateIntegrationResponseResponse::is_template_selection_expression_Set() const{
    return m_template_selection_expression_isSet;
}

bool OAIUpdateIntegrationResponseResponse::is_template_selection_expression_Valid() const{
    return m_template_selection_expression_isValid;
}

bool OAIUpdateIntegrationResponseResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_handling_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_response_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_response_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateIntegrationResponseResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
