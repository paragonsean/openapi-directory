/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateIntegrationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateIntegrationRequest::OAIUpdateIntegrationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateIntegrationRequest::OAIUpdateIntegrationRequest() {
    this->initializeModel();
}

OAIUpdateIntegrationRequest::~OAIUpdateIntegrationRequest() {}

void OAIUpdateIntegrationRequest::initializeModel() {

    m_connection_id_isSet = false;
    m_connection_id_isValid = false;

    m_connection_type_isSet = false;
    m_connection_type_isValid = false;

    m_content_handling_strategy_isSet = false;
    m_content_handling_strategy_isValid = false;

    m_credentials_arn_isSet = false;
    m_credentials_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_integration_method_isSet = false;
    m_integration_method_isValid = false;

    m_integration_subtype_isSet = false;
    m_integration_subtype_isValid = false;

    m_integration_type_isSet = false;
    m_integration_type_isValid = false;

    m_integration_uri_isSet = false;
    m_integration_uri_isValid = false;

    m_passthrough_behavior_isSet = false;
    m_passthrough_behavior_isValid = false;

    m_payload_format_version_isSet = false;
    m_payload_format_version_isValid = false;

    m_request_parameters_isSet = false;
    m_request_parameters_isValid = false;

    m_request_templates_isSet = false;
    m_request_templates_isValid = false;

    m_response_parameters_isSet = false;
    m_response_parameters_isValid = false;

    m_template_selection_expression_isSet = false;
    m_template_selection_expression_isValid = false;

    m_timeout_in_millis_isSet = false;
    m_timeout_in_millis_isValid = false;

    m_tls_config_isSet = false;
    m_tls_config_isValid = false;
}

void OAIUpdateIntegrationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateIntegrationRequest::fromJsonObject(QJsonObject json) {

    m_connection_id_isValid = ::OpenAPI::fromJsonValue(m_connection_id, json[QString("ConnectionId")]);
    m_connection_id_isSet = !json[QString("ConnectionId")].isNull() && m_connection_id_isValid;

    m_connection_type_isValid = ::OpenAPI::fromJsonValue(m_connection_type, json[QString("ConnectionType")]);
    m_connection_type_isSet = !json[QString("ConnectionType")].isNull() && m_connection_type_isValid;

    m_content_handling_strategy_isValid = ::OpenAPI::fromJsonValue(m_content_handling_strategy, json[QString("ContentHandlingStrategy")]);
    m_content_handling_strategy_isSet = !json[QString("ContentHandlingStrategy")].isNull() && m_content_handling_strategy_isValid;

    m_credentials_arn_isValid = ::OpenAPI::fromJsonValue(m_credentials_arn, json[QString("CredentialsArn")]);
    m_credentials_arn_isSet = !json[QString("CredentialsArn")].isNull() && m_credentials_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_integration_method_isValid = ::OpenAPI::fromJsonValue(m_integration_method, json[QString("IntegrationMethod")]);
    m_integration_method_isSet = !json[QString("IntegrationMethod")].isNull() && m_integration_method_isValid;

    m_integration_subtype_isValid = ::OpenAPI::fromJsonValue(m_integration_subtype, json[QString("IntegrationSubtype")]);
    m_integration_subtype_isSet = !json[QString("IntegrationSubtype")].isNull() && m_integration_subtype_isValid;

    m_integration_type_isValid = ::OpenAPI::fromJsonValue(m_integration_type, json[QString("IntegrationType")]);
    m_integration_type_isSet = !json[QString("IntegrationType")].isNull() && m_integration_type_isValid;

    m_integration_uri_isValid = ::OpenAPI::fromJsonValue(m_integration_uri, json[QString("IntegrationUri")]);
    m_integration_uri_isSet = !json[QString("IntegrationUri")].isNull() && m_integration_uri_isValid;

    m_passthrough_behavior_isValid = ::OpenAPI::fromJsonValue(m_passthrough_behavior, json[QString("PassthroughBehavior")]);
    m_passthrough_behavior_isSet = !json[QString("PassthroughBehavior")].isNull() && m_passthrough_behavior_isValid;

    m_payload_format_version_isValid = ::OpenAPI::fromJsonValue(m_payload_format_version, json[QString("PayloadFormatVersion")]);
    m_payload_format_version_isSet = !json[QString("PayloadFormatVersion")].isNull() && m_payload_format_version_isValid;

    m_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_request_parameters, json[QString("RequestParameters")]);
    m_request_parameters_isSet = !json[QString("RequestParameters")].isNull() && m_request_parameters_isValid;

    m_request_templates_isValid = ::OpenAPI::fromJsonValue(m_request_templates, json[QString("RequestTemplates")]);
    m_request_templates_isSet = !json[QString("RequestTemplates")].isNull() && m_request_templates_isValid;

    m_response_parameters_isValid = ::OpenAPI::fromJsonValue(m_response_parameters, json[QString("ResponseParameters")]);
    m_response_parameters_isSet = !json[QString("ResponseParameters")].isNull() && m_response_parameters_isValid;

    m_template_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_template_selection_expression, json[QString("TemplateSelectionExpression")]);
    m_template_selection_expression_isSet = !json[QString("TemplateSelectionExpression")].isNull() && m_template_selection_expression_isValid;

    m_timeout_in_millis_isValid = ::OpenAPI::fromJsonValue(m_timeout_in_millis, json[QString("TimeoutInMillis")]);
    m_timeout_in_millis_isSet = !json[QString("TimeoutInMillis")].isNull() && m_timeout_in_millis_isValid;

    m_tls_config_isValid = ::OpenAPI::fromJsonValue(m_tls_config, json[QString("TlsConfig")]);
    m_tls_config_isSet = !json[QString("TlsConfig")].isNull() && m_tls_config_isValid;
}

QString OAIUpdateIntegrationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateIntegrationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_connection_id_isSet) {
        obj.insert(QString("ConnectionId"), ::OpenAPI::toJsonValue(m_connection_id));
    }
    if (m_connection_type.isSet()) {
        obj.insert(QString("ConnectionType"), ::OpenAPI::toJsonValue(m_connection_type));
    }
    if (m_content_handling_strategy.isSet()) {
        obj.insert(QString("ContentHandlingStrategy"), ::OpenAPI::toJsonValue(m_content_handling_strategy));
    }
    if (m_credentials_arn_isSet) {
        obj.insert(QString("CredentialsArn"), ::OpenAPI::toJsonValue(m_credentials_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_integration_method_isSet) {
        obj.insert(QString("IntegrationMethod"), ::OpenAPI::toJsonValue(m_integration_method));
    }
    if (m_integration_subtype_isSet) {
        obj.insert(QString("IntegrationSubtype"), ::OpenAPI::toJsonValue(m_integration_subtype));
    }
    if (m_integration_type.isSet()) {
        obj.insert(QString("IntegrationType"), ::OpenAPI::toJsonValue(m_integration_type));
    }
    if (m_integration_uri_isSet) {
        obj.insert(QString("IntegrationUri"), ::OpenAPI::toJsonValue(m_integration_uri));
    }
    if (m_passthrough_behavior.isSet()) {
        obj.insert(QString("PassthroughBehavior"), ::OpenAPI::toJsonValue(m_passthrough_behavior));
    }
    if (m_payload_format_version_isSet) {
        obj.insert(QString("PayloadFormatVersion"), ::OpenAPI::toJsonValue(m_payload_format_version));
    }
    if (m_request_parameters.isSet()) {
        obj.insert(QString("RequestParameters"), ::OpenAPI::toJsonValue(m_request_parameters));
    }
    if (m_request_templates.isSet()) {
        obj.insert(QString("RequestTemplates"), ::OpenAPI::toJsonValue(m_request_templates));
    }
    if (m_response_parameters.isSet()) {
        obj.insert(QString("ResponseParameters"), ::OpenAPI::toJsonValue(m_response_parameters));
    }
    if (m_template_selection_expression_isSet) {
        obj.insert(QString("TemplateSelectionExpression"), ::OpenAPI::toJsonValue(m_template_selection_expression));
    }
    if (m_timeout_in_millis_isSet) {
        obj.insert(QString("TimeoutInMillis"), ::OpenAPI::toJsonValue(m_timeout_in_millis));
    }
    if (m_tls_config.isSet()) {
        obj.insert(QString("TlsConfig"), ::OpenAPI::toJsonValue(m_tls_config));
    }
    return obj;
}

QString OAIUpdateIntegrationRequest::getConnectionId() const {
    return m_connection_id;
}
void OAIUpdateIntegrationRequest::setConnectionId(const QString &connection_id) {
    m_connection_id = connection_id;
    m_connection_id_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_connection_id_Set() const{
    return m_connection_id_isSet;
}

bool OAIUpdateIntegrationRequest::is_connection_id_Valid() const{
    return m_connection_id_isValid;
}

OAIConnectionType OAIUpdateIntegrationRequest::getConnectionType() const {
    return m_connection_type;
}
void OAIUpdateIntegrationRequest::setConnectionType(const OAIConnectionType &connection_type) {
    m_connection_type = connection_type;
    m_connection_type_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_connection_type_Set() const{
    return m_connection_type_isSet;
}

bool OAIUpdateIntegrationRequest::is_connection_type_Valid() const{
    return m_connection_type_isValid;
}

OAIContentHandlingStrategy OAIUpdateIntegrationRequest::getContentHandlingStrategy() const {
    return m_content_handling_strategy;
}
void OAIUpdateIntegrationRequest::setContentHandlingStrategy(const OAIContentHandlingStrategy &content_handling_strategy) {
    m_content_handling_strategy = content_handling_strategy;
    m_content_handling_strategy_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_content_handling_strategy_Set() const{
    return m_content_handling_strategy_isSet;
}

bool OAIUpdateIntegrationRequest::is_content_handling_strategy_Valid() const{
    return m_content_handling_strategy_isValid;
}

QString OAIUpdateIntegrationRequest::getCredentialsArn() const {
    return m_credentials_arn;
}
void OAIUpdateIntegrationRequest::setCredentialsArn(const QString &credentials_arn) {
    m_credentials_arn = credentials_arn;
    m_credentials_arn_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_credentials_arn_Set() const{
    return m_credentials_arn_isSet;
}

bool OAIUpdateIntegrationRequest::is_credentials_arn_Valid() const{
    return m_credentials_arn_isValid;
}

QString OAIUpdateIntegrationRequest::getDescription() const {
    return m_description;
}
void OAIUpdateIntegrationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateIntegrationRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUpdateIntegrationRequest::getIntegrationMethod() const {
    return m_integration_method;
}
void OAIUpdateIntegrationRequest::setIntegrationMethod(const QString &integration_method) {
    m_integration_method = integration_method;
    m_integration_method_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_integration_method_Set() const{
    return m_integration_method_isSet;
}

bool OAIUpdateIntegrationRequest::is_integration_method_Valid() const{
    return m_integration_method_isValid;
}

QString OAIUpdateIntegrationRequest::getIntegrationSubtype() const {
    return m_integration_subtype;
}
void OAIUpdateIntegrationRequest::setIntegrationSubtype(const QString &integration_subtype) {
    m_integration_subtype = integration_subtype;
    m_integration_subtype_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_integration_subtype_Set() const{
    return m_integration_subtype_isSet;
}

bool OAIUpdateIntegrationRequest::is_integration_subtype_Valid() const{
    return m_integration_subtype_isValid;
}

OAIIntegrationType OAIUpdateIntegrationRequest::getIntegrationType() const {
    return m_integration_type;
}
void OAIUpdateIntegrationRequest::setIntegrationType(const OAIIntegrationType &integration_type) {
    m_integration_type = integration_type;
    m_integration_type_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_integration_type_Set() const{
    return m_integration_type_isSet;
}

bool OAIUpdateIntegrationRequest::is_integration_type_Valid() const{
    return m_integration_type_isValid;
}

QString OAIUpdateIntegrationRequest::getIntegrationUri() const {
    return m_integration_uri;
}
void OAIUpdateIntegrationRequest::setIntegrationUri(const QString &integration_uri) {
    m_integration_uri = integration_uri;
    m_integration_uri_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_integration_uri_Set() const{
    return m_integration_uri_isSet;
}

bool OAIUpdateIntegrationRequest::is_integration_uri_Valid() const{
    return m_integration_uri_isValid;
}

OAIPassthroughBehavior OAIUpdateIntegrationRequest::getPassthroughBehavior() const {
    return m_passthrough_behavior;
}
void OAIUpdateIntegrationRequest::setPassthroughBehavior(const OAIPassthroughBehavior &passthrough_behavior) {
    m_passthrough_behavior = passthrough_behavior;
    m_passthrough_behavior_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_passthrough_behavior_Set() const{
    return m_passthrough_behavior_isSet;
}

bool OAIUpdateIntegrationRequest::is_passthrough_behavior_Valid() const{
    return m_passthrough_behavior_isValid;
}

QString OAIUpdateIntegrationRequest::getPayloadFormatVersion() const {
    return m_payload_format_version;
}
void OAIUpdateIntegrationRequest::setPayloadFormatVersion(const QString &payload_format_version) {
    m_payload_format_version = payload_format_version;
    m_payload_format_version_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_payload_format_version_Set() const{
    return m_payload_format_version_isSet;
}

bool OAIUpdateIntegrationRequest::is_payload_format_version_Valid() const{
    return m_payload_format_version_isValid;
}

QMap OAIUpdateIntegrationRequest::getRequestParameters() const {
    return m_request_parameters;
}
void OAIUpdateIntegrationRequest::setRequestParameters(const QMap &request_parameters) {
    m_request_parameters = request_parameters;
    m_request_parameters_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_request_parameters_Set() const{
    return m_request_parameters_isSet;
}

bool OAIUpdateIntegrationRequest::is_request_parameters_Valid() const{
    return m_request_parameters_isValid;
}

QMap OAIUpdateIntegrationRequest::getRequestTemplates() const {
    return m_request_templates;
}
void OAIUpdateIntegrationRequest::setRequestTemplates(const QMap &request_templates) {
    m_request_templates = request_templates;
    m_request_templates_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_request_templates_Set() const{
    return m_request_templates_isSet;
}

bool OAIUpdateIntegrationRequest::is_request_templates_Valid() const{
    return m_request_templates_isValid;
}

QMap OAIUpdateIntegrationRequest::getResponseParameters() const {
    return m_response_parameters;
}
void OAIUpdateIntegrationRequest::setResponseParameters(const QMap &response_parameters) {
    m_response_parameters = response_parameters;
    m_response_parameters_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_response_parameters_Set() const{
    return m_response_parameters_isSet;
}

bool OAIUpdateIntegrationRequest::is_response_parameters_Valid() const{
    return m_response_parameters_isValid;
}

QString OAIUpdateIntegrationRequest::getTemplateSelectionExpression() const {
    return m_template_selection_expression;
}
void OAIUpdateIntegrationRequest::setTemplateSelectionExpression(const QString &template_selection_expression) {
    m_template_selection_expression = template_selection_expression;
    m_template_selection_expression_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_template_selection_expression_Set() const{
    return m_template_selection_expression_isSet;
}

bool OAIUpdateIntegrationRequest::is_template_selection_expression_Valid() const{
    return m_template_selection_expression_isValid;
}

qint32 OAIUpdateIntegrationRequest::getTimeoutInMillis() const {
    return m_timeout_in_millis;
}
void OAIUpdateIntegrationRequest::setTimeoutInMillis(const qint32 &timeout_in_millis) {
    m_timeout_in_millis = timeout_in_millis;
    m_timeout_in_millis_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_timeout_in_millis_Set() const{
    return m_timeout_in_millis_isSet;
}

bool OAIUpdateIntegrationRequest::is_timeout_in_millis_Valid() const{
    return m_timeout_in_millis_isValid;
}

OAICreateIntegrationRequest_TlsConfig OAIUpdateIntegrationRequest::getTlsConfig() const {
    return m_tls_config;
}
void OAIUpdateIntegrationRequest::setTlsConfig(const OAICreateIntegrationRequest_TlsConfig &tls_config) {
    m_tls_config = tls_config;
    m_tls_config_isSet = true;
}

bool OAIUpdateIntegrationRequest::is_tls_config_Set() const{
    return m_tls_config_isSet;
}

bool OAIUpdateIntegrationRequest::is_tls_config_Valid() const{
    return m_tls_config_isValid;
}

bool OAIUpdateIntegrationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_handling_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_passthrough_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_format_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_templates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeout_in_millis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tls_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateIntegrationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
