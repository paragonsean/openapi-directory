/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReimportApiResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReimportApiResponse::OAIReimportApiResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReimportApiResponse::OAIReimportApiResponse() {
    this->initializeModel();
}

OAIReimportApiResponse::~OAIReimportApiResponse() {}

void OAIReimportApiResponse::initializeModel() {

    m_api_endpoint_isSet = false;
    m_api_endpoint_isValid = false;

    m_api_gateway_managed_isSet = false;
    m_api_gateway_managed_isValid = false;

    m_api_id_isSet = false;
    m_api_id_isValid = false;

    m_api_key_selection_expression_isSet = false;
    m_api_key_selection_expression_isValid = false;

    m_cors_configuration_isSet = false;
    m_cors_configuration_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disable_schema_validation_isSet = false;
    m_disable_schema_validation_isValid = false;

    m_disable_execute_api_endpoint_isSet = false;
    m_disable_execute_api_endpoint_isValid = false;

    m_import_info_isSet = false;
    m_import_info_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_type_isSet = false;
    m_protocol_type_isValid = false;

    m_route_selection_expression_isSet = false;
    m_route_selection_expression_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIReimportApiResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReimportApiResponse::fromJsonObject(QJsonObject json) {

    m_api_endpoint_isValid = ::OpenAPI::fromJsonValue(m_api_endpoint, json[QString("ApiEndpoint")]);
    m_api_endpoint_isSet = !json[QString("ApiEndpoint")].isNull() && m_api_endpoint_isValid;

    m_api_gateway_managed_isValid = ::OpenAPI::fromJsonValue(m_api_gateway_managed, json[QString("ApiGatewayManaged")]);
    m_api_gateway_managed_isSet = !json[QString("ApiGatewayManaged")].isNull() && m_api_gateway_managed_isValid;

    m_api_id_isValid = ::OpenAPI::fromJsonValue(m_api_id, json[QString("ApiId")]);
    m_api_id_isSet = !json[QString("ApiId")].isNull() && m_api_id_isValid;

    m_api_key_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_api_key_selection_expression, json[QString("ApiKeySelectionExpression")]);
    m_api_key_selection_expression_isSet = !json[QString("ApiKeySelectionExpression")].isNull() && m_api_key_selection_expression_isValid;

    m_cors_configuration_isValid = ::OpenAPI::fromJsonValue(m_cors_configuration, json[QString("CorsConfiguration")]);
    m_cors_configuration_isSet = !json[QString("CorsConfiguration")].isNull() && m_cors_configuration_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("CreatedDate")]);
    m_created_date_isSet = !json[QString("CreatedDate")].isNull() && m_created_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_disable_schema_validation_isValid = ::OpenAPI::fromJsonValue(m_disable_schema_validation, json[QString("DisableSchemaValidation")]);
    m_disable_schema_validation_isSet = !json[QString("DisableSchemaValidation")].isNull() && m_disable_schema_validation_isValid;

    m_disable_execute_api_endpoint_isValid = ::OpenAPI::fromJsonValue(m_disable_execute_api_endpoint, json[QString("DisableExecuteApiEndpoint")]);
    m_disable_execute_api_endpoint_isSet = !json[QString("DisableExecuteApiEndpoint")].isNull() && m_disable_execute_api_endpoint_isValid;

    m_import_info_isValid = ::OpenAPI::fromJsonValue(m_import_info, json[QString("ImportInfo")]);
    m_import_info_isSet = !json[QString("ImportInfo")].isNull() && m_import_info_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_protocol_type_isValid = ::OpenAPI::fromJsonValue(m_protocol_type, json[QString("ProtocolType")]);
    m_protocol_type_isSet = !json[QString("ProtocolType")].isNull() && m_protocol_type_isValid;

    m_route_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_route_selection_expression, json[QString("RouteSelectionExpression")]);
    m_route_selection_expression_isSet = !json[QString("RouteSelectionExpression")].isNull() && m_route_selection_expression_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("Warnings")]);
    m_warnings_isSet = !json[QString("Warnings")].isNull() && m_warnings_isValid;
}

QString OAIReimportApiResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReimportApiResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_endpoint_isSet) {
        obj.insert(QString("ApiEndpoint"), ::OpenAPI::toJsonValue(m_api_endpoint));
    }
    if (m_api_gateway_managed_isSet) {
        obj.insert(QString("ApiGatewayManaged"), ::OpenAPI::toJsonValue(m_api_gateway_managed));
    }
    if (m_api_id_isSet) {
        obj.insert(QString("ApiId"), ::OpenAPI::toJsonValue(m_api_id));
    }
    if (m_api_key_selection_expression_isSet) {
        obj.insert(QString("ApiKeySelectionExpression"), ::OpenAPI::toJsonValue(m_api_key_selection_expression));
    }
    if (m_cors_configuration.isSet()) {
        obj.insert(QString("CorsConfiguration"), ::OpenAPI::toJsonValue(m_cors_configuration));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("CreatedDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disable_schema_validation_isSet) {
        obj.insert(QString("DisableSchemaValidation"), ::OpenAPI::toJsonValue(m_disable_schema_validation));
    }
    if (m_disable_execute_api_endpoint_isSet) {
        obj.insert(QString("DisableExecuteApiEndpoint"), ::OpenAPI::toJsonValue(m_disable_execute_api_endpoint));
    }
    if (m_import_info.isSet()) {
        obj.insert(QString("ImportInfo"), ::OpenAPI::toJsonValue(m_import_info));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol_type.isSet()) {
        obj.insert(QString("ProtocolType"), ::OpenAPI::toJsonValue(m_protocol_type));
    }
    if (m_route_selection_expression_isSet) {
        obj.insert(QString("RouteSelectionExpression"), ::OpenAPI::toJsonValue(m_route_selection_expression));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_warnings.isSet()) {
        obj.insert(QString("Warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIReimportApiResponse::getApiEndpoint() const {
    return m_api_endpoint;
}
void OAIReimportApiResponse::setApiEndpoint(const QString &api_endpoint) {
    m_api_endpoint = api_endpoint;
    m_api_endpoint_isSet = true;
}

bool OAIReimportApiResponse::is_api_endpoint_Set() const{
    return m_api_endpoint_isSet;
}

bool OAIReimportApiResponse::is_api_endpoint_Valid() const{
    return m_api_endpoint_isValid;
}

bool OAIReimportApiResponse::getApiGatewayManaged() const {
    return m_api_gateway_managed;
}
void OAIReimportApiResponse::setApiGatewayManaged(const bool &api_gateway_managed) {
    m_api_gateway_managed = api_gateway_managed;
    m_api_gateway_managed_isSet = true;
}

bool OAIReimportApiResponse::is_api_gateway_managed_Set() const{
    return m_api_gateway_managed_isSet;
}

bool OAIReimportApiResponse::is_api_gateway_managed_Valid() const{
    return m_api_gateway_managed_isValid;
}

QString OAIReimportApiResponse::getApiId() const {
    return m_api_id;
}
void OAIReimportApiResponse::setApiId(const QString &api_id) {
    m_api_id = api_id;
    m_api_id_isSet = true;
}

bool OAIReimportApiResponse::is_api_id_Set() const{
    return m_api_id_isSet;
}

bool OAIReimportApiResponse::is_api_id_Valid() const{
    return m_api_id_isValid;
}

QString OAIReimportApiResponse::getApiKeySelectionExpression() const {
    return m_api_key_selection_expression;
}
void OAIReimportApiResponse::setApiKeySelectionExpression(const QString &api_key_selection_expression) {
    m_api_key_selection_expression = api_key_selection_expression;
    m_api_key_selection_expression_isSet = true;
}

bool OAIReimportApiResponse::is_api_key_selection_expression_Set() const{
    return m_api_key_selection_expression_isSet;
}

bool OAIReimportApiResponse::is_api_key_selection_expression_Valid() const{
    return m_api_key_selection_expression_isValid;
}

OAICreateApiResponse_CorsConfiguration OAIReimportApiResponse::getCorsConfiguration() const {
    return m_cors_configuration;
}
void OAIReimportApiResponse::setCorsConfiguration(const OAICreateApiResponse_CorsConfiguration &cors_configuration) {
    m_cors_configuration = cors_configuration;
    m_cors_configuration_isSet = true;
}

bool OAIReimportApiResponse::is_cors_configuration_Set() const{
    return m_cors_configuration_isSet;
}

bool OAIReimportApiResponse::is_cors_configuration_Valid() const{
    return m_cors_configuration_isValid;
}

QDateTime OAIReimportApiResponse::getCreatedDate() const {
    return m_created_date;
}
void OAIReimportApiResponse::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIReimportApiResponse::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIReimportApiResponse::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIReimportApiResponse::getDescription() const {
    return m_description;
}
void OAIReimportApiResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIReimportApiResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIReimportApiResponse::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIReimportApiResponse::getDisableSchemaValidation() const {
    return m_disable_schema_validation;
}
void OAIReimportApiResponse::setDisableSchemaValidation(const bool &disable_schema_validation) {
    m_disable_schema_validation = disable_schema_validation;
    m_disable_schema_validation_isSet = true;
}

bool OAIReimportApiResponse::is_disable_schema_validation_Set() const{
    return m_disable_schema_validation_isSet;
}

bool OAIReimportApiResponse::is_disable_schema_validation_Valid() const{
    return m_disable_schema_validation_isValid;
}

bool OAIReimportApiResponse::getDisableExecuteApiEndpoint() const {
    return m_disable_execute_api_endpoint;
}
void OAIReimportApiResponse::setDisableExecuteApiEndpoint(const bool &disable_execute_api_endpoint) {
    m_disable_execute_api_endpoint = disable_execute_api_endpoint;
    m_disable_execute_api_endpoint_isSet = true;
}

bool OAIReimportApiResponse::is_disable_execute_api_endpoint_Set() const{
    return m_disable_execute_api_endpoint_isSet;
}

bool OAIReimportApiResponse::is_disable_execute_api_endpoint_Valid() const{
    return m_disable_execute_api_endpoint_isValid;
}

QList OAIReimportApiResponse::getImportInfo() const {
    return m_import_info;
}
void OAIReimportApiResponse::setImportInfo(const QList &import_info) {
    m_import_info = import_info;
    m_import_info_isSet = true;
}

bool OAIReimportApiResponse::is_import_info_Set() const{
    return m_import_info_isSet;
}

bool OAIReimportApiResponse::is_import_info_Valid() const{
    return m_import_info_isValid;
}

QString OAIReimportApiResponse::getName() const {
    return m_name;
}
void OAIReimportApiResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIReimportApiResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAIReimportApiResponse::is_name_Valid() const{
    return m_name_isValid;
}

OAIProtocolType OAIReimportApiResponse::getProtocolType() const {
    return m_protocol_type;
}
void OAIReimportApiResponse::setProtocolType(const OAIProtocolType &protocol_type) {
    m_protocol_type = protocol_type;
    m_protocol_type_isSet = true;
}

bool OAIReimportApiResponse::is_protocol_type_Set() const{
    return m_protocol_type_isSet;
}

bool OAIReimportApiResponse::is_protocol_type_Valid() const{
    return m_protocol_type_isValid;
}

QString OAIReimportApiResponse::getRouteSelectionExpression() const {
    return m_route_selection_expression;
}
void OAIReimportApiResponse::setRouteSelectionExpression(const QString &route_selection_expression) {
    m_route_selection_expression = route_selection_expression;
    m_route_selection_expression_isSet = true;
}

bool OAIReimportApiResponse::is_route_selection_expression_Set() const{
    return m_route_selection_expression_isSet;
}

bool OAIReimportApiResponse::is_route_selection_expression_Valid() const{
    return m_route_selection_expression_isValid;
}

QMap OAIReimportApiResponse::getTags() const {
    return m_tags;
}
void OAIReimportApiResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIReimportApiResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIReimportApiResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIReimportApiResponse::getVersion() const {
    return m_version;
}
void OAIReimportApiResponse::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIReimportApiResponse::is_version_Set() const{
    return m_version_isSet;
}

bool OAIReimportApiResponse::is_version_Valid() const{
    return m_version_isValid;
}

QList OAIReimportApiResponse::getWarnings() const {
    return m_warnings;
}
void OAIReimportApiResponse::setWarnings(const QList &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIReimportApiResponse::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIReimportApiResponse::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIReimportApiResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_gateway_managed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_schema_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_execute_api_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReimportApiResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
