/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAuthorizerResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAuthorizerResponse::OAICreateAuthorizerResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAuthorizerResponse::OAICreateAuthorizerResponse() {
    this->initializeModel();
}

OAICreateAuthorizerResponse::~OAICreateAuthorizerResponse() {}

void OAICreateAuthorizerResponse::initializeModel() {

    m_authorizer_credentials_arn_isSet = false;
    m_authorizer_credentials_arn_isValid = false;

    m_authorizer_id_isSet = false;
    m_authorizer_id_isValid = false;

    m_authorizer_payload_format_version_isSet = false;
    m_authorizer_payload_format_version_isValid = false;

    m_authorizer_result_ttl_in_seconds_isSet = false;
    m_authorizer_result_ttl_in_seconds_isValid = false;

    m_authorizer_type_isSet = false;
    m_authorizer_type_isValid = false;

    m_authorizer_uri_isSet = false;
    m_authorizer_uri_isValid = false;

    m_enable_simple_responses_isSet = false;
    m_enable_simple_responses_isValid = false;

    m_identity_source_isSet = false;
    m_identity_source_isValid = false;

    m_identity_validation_expression_isSet = false;
    m_identity_validation_expression_isValid = false;

    m_jwt_configuration_isSet = false;
    m_jwt_configuration_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAICreateAuthorizerResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAuthorizerResponse::fromJsonObject(QJsonObject json) {

    m_authorizer_credentials_arn_isValid = ::OpenAPI::fromJsonValue(m_authorizer_credentials_arn, json[QString("AuthorizerCredentialsArn")]);
    m_authorizer_credentials_arn_isSet = !json[QString("AuthorizerCredentialsArn")].isNull() && m_authorizer_credentials_arn_isValid;

    m_authorizer_id_isValid = ::OpenAPI::fromJsonValue(m_authorizer_id, json[QString("AuthorizerId")]);
    m_authorizer_id_isSet = !json[QString("AuthorizerId")].isNull() && m_authorizer_id_isValid;

    m_authorizer_payload_format_version_isValid = ::OpenAPI::fromJsonValue(m_authorizer_payload_format_version, json[QString("AuthorizerPayloadFormatVersion")]);
    m_authorizer_payload_format_version_isSet = !json[QString("AuthorizerPayloadFormatVersion")].isNull() && m_authorizer_payload_format_version_isValid;

    m_authorizer_result_ttl_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_authorizer_result_ttl_in_seconds, json[QString("AuthorizerResultTtlInSeconds")]);
    m_authorizer_result_ttl_in_seconds_isSet = !json[QString("AuthorizerResultTtlInSeconds")].isNull() && m_authorizer_result_ttl_in_seconds_isValid;

    m_authorizer_type_isValid = ::OpenAPI::fromJsonValue(m_authorizer_type, json[QString("AuthorizerType")]);
    m_authorizer_type_isSet = !json[QString("AuthorizerType")].isNull() && m_authorizer_type_isValid;

    m_authorizer_uri_isValid = ::OpenAPI::fromJsonValue(m_authorizer_uri, json[QString("AuthorizerUri")]);
    m_authorizer_uri_isSet = !json[QString("AuthorizerUri")].isNull() && m_authorizer_uri_isValid;

    m_enable_simple_responses_isValid = ::OpenAPI::fromJsonValue(m_enable_simple_responses, json[QString("EnableSimpleResponses")]);
    m_enable_simple_responses_isSet = !json[QString("EnableSimpleResponses")].isNull() && m_enable_simple_responses_isValid;

    m_identity_source_isValid = ::OpenAPI::fromJsonValue(m_identity_source, json[QString("IdentitySource")]);
    m_identity_source_isSet = !json[QString("IdentitySource")].isNull() && m_identity_source_isValid;

    m_identity_validation_expression_isValid = ::OpenAPI::fromJsonValue(m_identity_validation_expression, json[QString("IdentityValidationExpression")]);
    m_identity_validation_expression_isSet = !json[QString("IdentityValidationExpression")].isNull() && m_identity_validation_expression_isValid;

    m_jwt_configuration_isValid = ::OpenAPI::fromJsonValue(m_jwt_configuration, json[QString("JwtConfiguration")]);
    m_jwt_configuration_isSet = !json[QString("JwtConfiguration")].isNull() && m_jwt_configuration_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAICreateAuthorizerResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAuthorizerResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_authorizer_credentials_arn_isSet) {
        obj.insert(QString("AuthorizerCredentialsArn"), ::OpenAPI::toJsonValue(m_authorizer_credentials_arn));
    }
    if (m_authorizer_id_isSet) {
        obj.insert(QString("AuthorizerId"), ::OpenAPI::toJsonValue(m_authorizer_id));
    }
    if (m_authorizer_payload_format_version_isSet) {
        obj.insert(QString("AuthorizerPayloadFormatVersion"), ::OpenAPI::toJsonValue(m_authorizer_payload_format_version));
    }
    if (m_authorizer_result_ttl_in_seconds_isSet) {
        obj.insert(QString("AuthorizerResultTtlInSeconds"), ::OpenAPI::toJsonValue(m_authorizer_result_ttl_in_seconds));
    }
    if (m_authorizer_type.isSet()) {
        obj.insert(QString("AuthorizerType"), ::OpenAPI::toJsonValue(m_authorizer_type));
    }
    if (m_authorizer_uri_isSet) {
        obj.insert(QString("AuthorizerUri"), ::OpenAPI::toJsonValue(m_authorizer_uri));
    }
    if (m_enable_simple_responses_isSet) {
        obj.insert(QString("EnableSimpleResponses"), ::OpenAPI::toJsonValue(m_enable_simple_responses));
    }
    if (m_identity_source.isSet()) {
        obj.insert(QString("IdentitySource"), ::OpenAPI::toJsonValue(m_identity_source));
    }
    if (m_identity_validation_expression_isSet) {
        obj.insert(QString("IdentityValidationExpression"), ::OpenAPI::toJsonValue(m_identity_validation_expression));
    }
    if (m_jwt_configuration.isSet()) {
        obj.insert(QString("JwtConfiguration"), ::OpenAPI::toJsonValue(m_jwt_configuration));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAICreateAuthorizerResponse::getAuthorizerCredentialsArn() const {
    return m_authorizer_credentials_arn;
}
void OAICreateAuthorizerResponse::setAuthorizerCredentialsArn(const QString &authorizer_credentials_arn) {
    m_authorizer_credentials_arn = authorizer_credentials_arn;
    m_authorizer_credentials_arn_isSet = true;
}

bool OAICreateAuthorizerResponse::is_authorizer_credentials_arn_Set() const{
    return m_authorizer_credentials_arn_isSet;
}

bool OAICreateAuthorizerResponse::is_authorizer_credentials_arn_Valid() const{
    return m_authorizer_credentials_arn_isValid;
}

QString OAICreateAuthorizerResponse::getAuthorizerId() const {
    return m_authorizer_id;
}
void OAICreateAuthorizerResponse::setAuthorizerId(const QString &authorizer_id) {
    m_authorizer_id = authorizer_id;
    m_authorizer_id_isSet = true;
}

bool OAICreateAuthorizerResponse::is_authorizer_id_Set() const{
    return m_authorizer_id_isSet;
}

bool OAICreateAuthorizerResponse::is_authorizer_id_Valid() const{
    return m_authorizer_id_isValid;
}

QString OAICreateAuthorizerResponse::getAuthorizerPayloadFormatVersion() const {
    return m_authorizer_payload_format_version;
}
void OAICreateAuthorizerResponse::setAuthorizerPayloadFormatVersion(const QString &authorizer_payload_format_version) {
    m_authorizer_payload_format_version = authorizer_payload_format_version;
    m_authorizer_payload_format_version_isSet = true;
}

bool OAICreateAuthorizerResponse::is_authorizer_payload_format_version_Set() const{
    return m_authorizer_payload_format_version_isSet;
}

bool OAICreateAuthorizerResponse::is_authorizer_payload_format_version_Valid() const{
    return m_authorizer_payload_format_version_isValid;
}

qint32 OAICreateAuthorizerResponse::getAuthorizerResultTtlInSeconds() const {
    return m_authorizer_result_ttl_in_seconds;
}
void OAICreateAuthorizerResponse::setAuthorizerResultTtlInSeconds(const qint32 &authorizer_result_ttl_in_seconds) {
    m_authorizer_result_ttl_in_seconds = authorizer_result_ttl_in_seconds;
    m_authorizer_result_ttl_in_seconds_isSet = true;
}

bool OAICreateAuthorizerResponse::is_authorizer_result_ttl_in_seconds_Set() const{
    return m_authorizer_result_ttl_in_seconds_isSet;
}

bool OAICreateAuthorizerResponse::is_authorizer_result_ttl_in_seconds_Valid() const{
    return m_authorizer_result_ttl_in_seconds_isValid;
}

OAIAuthorizerType OAICreateAuthorizerResponse::getAuthorizerType() const {
    return m_authorizer_type;
}
void OAICreateAuthorizerResponse::setAuthorizerType(const OAIAuthorizerType &authorizer_type) {
    m_authorizer_type = authorizer_type;
    m_authorizer_type_isSet = true;
}

bool OAICreateAuthorizerResponse::is_authorizer_type_Set() const{
    return m_authorizer_type_isSet;
}

bool OAICreateAuthorizerResponse::is_authorizer_type_Valid() const{
    return m_authorizer_type_isValid;
}

QString OAICreateAuthorizerResponse::getAuthorizerUri() const {
    return m_authorizer_uri;
}
void OAICreateAuthorizerResponse::setAuthorizerUri(const QString &authorizer_uri) {
    m_authorizer_uri = authorizer_uri;
    m_authorizer_uri_isSet = true;
}

bool OAICreateAuthorizerResponse::is_authorizer_uri_Set() const{
    return m_authorizer_uri_isSet;
}

bool OAICreateAuthorizerResponse::is_authorizer_uri_Valid() const{
    return m_authorizer_uri_isValid;
}

bool OAICreateAuthorizerResponse::getEnableSimpleResponses() const {
    return m_enable_simple_responses;
}
void OAICreateAuthorizerResponse::setEnableSimpleResponses(const bool &enable_simple_responses) {
    m_enable_simple_responses = enable_simple_responses;
    m_enable_simple_responses_isSet = true;
}

bool OAICreateAuthorizerResponse::is_enable_simple_responses_Set() const{
    return m_enable_simple_responses_isSet;
}

bool OAICreateAuthorizerResponse::is_enable_simple_responses_Valid() const{
    return m_enable_simple_responses_isValid;
}

QList OAICreateAuthorizerResponse::getIdentitySource() const {
    return m_identity_source;
}
void OAICreateAuthorizerResponse::setIdentitySource(const QList &identity_source) {
    m_identity_source = identity_source;
    m_identity_source_isSet = true;
}

bool OAICreateAuthorizerResponse::is_identity_source_Set() const{
    return m_identity_source_isSet;
}

bool OAICreateAuthorizerResponse::is_identity_source_Valid() const{
    return m_identity_source_isValid;
}

QString OAICreateAuthorizerResponse::getIdentityValidationExpression() const {
    return m_identity_validation_expression;
}
void OAICreateAuthorizerResponse::setIdentityValidationExpression(const QString &identity_validation_expression) {
    m_identity_validation_expression = identity_validation_expression;
    m_identity_validation_expression_isSet = true;
}

bool OAICreateAuthorizerResponse::is_identity_validation_expression_Set() const{
    return m_identity_validation_expression_isSet;
}

bool OAICreateAuthorizerResponse::is_identity_validation_expression_Valid() const{
    return m_identity_validation_expression_isValid;
}

OAICreateAuthorizerResponse_JwtConfiguration OAICreateAuthorizerResponse::getJwtConfiguration() const {
    return m_jwt_configuration;
}
void OAICreateAuthorizerResponse::setJwtConfiguration(const OAICreateAuthorizerResponse_JwtConfiguration &jwt_configuration) {
    m_jwt_configuration = jwt_configuration;
    m_jwt_configuration_isSet = true;
}

bool OAICreateAuthorizerResponse::is_jwt_configuration_Set() const{
    return m_jwt_configuration_isSet;
}

bool OAICreateAuthorizerResponse::is_jwt_configuration_Valid() const{
    return m_jwt_configuration_isValid;
}

QString OAICreateAuthorizerResponse::getName() const {
    return m_name;
}
void OAICreateAuthorizerResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateAuthorizerResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateAuthorizerResponse::is_name_Valid() const{
    return m_name_isValid;
}

bool OAICreateAuthorizerResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorizer_credentials_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_payload_format_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_result_ttl_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_simple_responses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identity_validation_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jwt_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAuthorizerResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
