/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDomainNameResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDomainNameResponse::OAIGetDomainNameResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDomainNameResponse::OAIGetDomainNameResponse() {
    this->initializeModel();
}

OAIGetDomainNameResponse::~OAIGetDomainNameResponse() {}

void OAIGetDomainNameResponse::initializeModel() {

    m_api_mapping_selection_expression_isSet = false;
    m_api_mapping_selection_expression_isValid = false;

    m_domain_name_isSet = false;
    m_domain_name_isValid = false;

    m_domain_name_configurations_isSet = false;
    m_domain_name_configurations_isValid = false;

    m_mutual_tls_authentication_isSet = false;
    m_mutual_tls_authentication_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGetDomainNameResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDomainNameResponse::fromJsonObject(QJsonObject json) {

    m_api_mapping_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_api_mapping_selection_expression, json[QString("ApiMappingSelectionExpression")]);
    m_api_mapping_selection_expression_isSet = !json[QString("ApiMappingSelectionExpression")].isNull() && m_api_mapping_selection_expression_isValid;

    m_domain_name_isValid = ::OpenAPI::fromJsonValue(m_domain_name, json[QString("DomainName")]);
    m_domain_name_isSet = !json[QString("DomainName")].isNull() && m_domain_name_isValid;

    m_domain_name_configurations_isValid = ::OpenAPI::fromJsonValue(m_domain_name_configurations, json[QString("DomainNameConfigurations")]);
    m_domain_name_configurations_isSet = !json[QString("DomainNameConfigurations")].isNull() && m_domain_name_configurations_isValid;

    m_mutual_tls_authentication_isValid = ::OpenAPI::fromJsonValue(m_mutual_tls_authentication, json[QString("MutualTlsAuthentication")]);
    m_mutual_tls_authentication_isSet = !json[QString("MutualTlsAuthentication")].isNull() && m_mutual_tls_authentication_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIGetDomainNameResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDomainNameResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_api_mapping_selection_expression_isSet) {
        obj.insert(QString("ApiMappingSelectionExpression"), ::OpenAPI::toJsonValue(m_api_mapping_selection_expression));
    }
    if (m_domain_name_isSet) {
        obj.insert(QString("DomainName"), ::OpenAPI::toJsonValue(m_domain_name));
    }
    if (m_domain_name_configurations.isSet()) {
        obj.insert(QString("DomainNameConfigurations"), ::OpenAPI::toJsonValue(m_domain_name_configurations));
    }
    if (m_mutual_tls_authentication.isSet()) {
        obj.insert(QString("MutualTlsAuthentication"), ::OpenAPI::toJsonValue(m_mutual_tls_authentication));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIGetDomainNameResponse::getApiMappingSelectionExpression() const {
    return m_api_mapping_selection_expression;
}
void OAIGetDomainNameResponse::setApiMappingSelectionExpression(const QString &api_mapping_selection_expression) {
    m_api_mapping_selection_expression = api_mapping_selection_expression;
    m_api_mapping_selection_expression_isSet = true;
}

bool OAIGetDomainNameResponse::is_api_mapping_selection_expression_Set() const{
    return m_api_mapping_selection_expression_isSet;
}

bool OAIGetDomainNameResponse::is_api_mapping_selection_expression_Valid() const{
    return m_api_mapping_selection_expression_isValid;
}

QString OAIGetDomainNameResponse::getDomainName() const {
    return m_domain_name;
}
void OAIGetDomainNameResponse::setDomainName(const QString &domain_name) {
    m_domain_name = domain_name;
    m_domain_name_isSet = true;
}

bool OAIGetDomainNameResponse::is_domain_name_Set() const{
    return m_domain_name_isSet;
}

bool OAIGetDomainNameResponse::is_domain_name_Valid() const{
    return m_domain_name_isValid;
}

QList OAIGetDomainNameResponse::getDomainNameConfigurations() const {
    return m_domain_name_configurations;
}
void OAIGetDomainNameResponse::setDomainNameConfigurations(const QList &domain_name_configurations) {
    m_domain_name_configurations = domain_name_configurations;
    m_domain_name_configurations_isSet = true;
}

bool OAIGetDomainNameResponse::is_domain_name_configurations_Set() const{
    return m_domain_name_configurations_isSet;
}

bool OAIGetDomainNameResponse::is_domain_name_configurations_Valid() const{
    return m_domain_name_configurations_isValid;
}

OAICreateDomainNameResponse_MutualTlsAuthentication OAIGetDomainNameResponse::getMutualTlsAuthentication() const {
    return m_mutual_tls_authentication;
}
void OAIGetDomainNameResponse::setMutualTlsAuthentication(const OAICreateDomainNameResponse_MutualTlsAuthentication &mutual_tls_authentication) {
    m_mutual_tls_authentication = mutual_tls_authentication;
    m_mutual_tls_authentication_isSet = true;
}

bool OAIGetDomainNameResponse::is_mutual_tls_authentication_Set() const{
    return m_mutual_tls_authentication_isSet;
}

bool OAIGetDomainNameResponse::is_mutual_tls_authentication_Valid() const{
    return m_mutual_tls_authentication_isValid;
}

QMap OAIGetDomainNameResponse::getTags() const {
    return m_tags;
}
void OAIGetDomainNameResponse::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGetDomainNameResponse::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGetDomainNameResponse::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGetDomainNameResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_mapping_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_configurations.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutual_tls_authentication.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDomainNameResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
