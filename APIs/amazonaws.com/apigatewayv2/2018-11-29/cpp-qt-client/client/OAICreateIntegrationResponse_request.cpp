/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateIntegrationResponse_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateIntegrationResponse_request::OAICreateIntegrationResponse_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateIntegrationResponse_request::OAICreateIntegrationResponse_request() {
    this->initializeModel();
}

OAICreateIntegrationResponse_request::~OAICreateIntegrationResponse_request() {}

void OAICreateIntegrationResponse_request::initializeModel() {

    m_content_handling_strategy_isSet = false;
    m_content_handling_strategy_isValid = false;

    m_integration_response_key_isSet = false;
    m_integration_response_key_isValid = false;

    m_response_parameters_isSet = false;
    m_response_parameters_isValid = false;

    m_response_templates_isSet = false;
    m_response_templates_isValid = false;

    m_template_selection_expression_isSet = false;
    m_template_selection_expression_isValid = false;
}

void OAICreateIntegrationResponse_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateIntegrationResponse_request::fromJsonObject(QJsonObject json) {

    m_content_handling_strategy_isValid = ::OpenAPI::fromJsonValue(m_content_handling_strategy, json[QString("contentHandlingStrategy")]);
    m_content_handling_strategy_isSet = !json[QString("contentHandlingStrategy")].isNull() && m_content_handling_strategy_isValid;

    m_integration_response_key_isValid = ::OpenAPI::fromJsonValue(m_integration_response_key, json[QString("integrationResponseKey")]);
    m_integration_response_key_isSet = !json[QString("integrationResponseKey")].isNull() && m_integration_response_key_isValid;

    m_response_parameters_isValid = ::OpenAPI::fromJsonValue(m_response_parameters, json[QString("responseParameters")]);
    m_response_parameters_isSet = !json[QString("responseParameters")].isNull() && m_response_parameters_isValid;

    m_response_templates_isValid = ::OpenAPI::fromJsonValue(m_response_templates, json[QString("responseTemplates")]);
    m_response_templates_isSet = !json[QString("responseTemplates")].isNull() && m_response_templates_isValid;

    m_template_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_template_selection_expression, json[QString("templateSelectionExpression")]);
    m_template_selection_expression_isSet = !json[QString("templateSelectionExpression")].isNull() && m_template_selection_expression_isValid;
}

QString OAICreateIntegrationResponse_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateIntegrationResponse_request::asJsonObject() const {
    QJsonObject obj;
    if (m_content_handling_strategy_isSet) {
        obj.insert(QString("contentHandlingStrategy"), ::OpenAPI::toJsonValue(m_content_handling_strategy));
    }
    if (m_integration_response_key_isSet) {
        obj.insert(QString("integrationResponseKey"), ::OpenAPI::toJsonValue(m_integration_response_key));
    }
    if (m_response_parameters.size() > 0) {
        obj.insert(QString("responseParameters"), ::OpenAPI::toJsonValue(m_response_parameters));
    }
    if (m_response_templates.size() > 0) {
        obj.insert(QString("responseTemplates"), ::OpenAPI::toJsonValue(m_response_templates));
    }
    if (m_template_selection_expression_isSet) {
        obj.insert(QString("templateSelectionExpression"), ::OpenAPI::toJsonValue(m_template_selection_expression));
    }
    return obj;
}

QString OAICreateIntegrationResponse_request::getContentHandlingStrategy() const {
    return m_content_handling_strategy;
}
void OAICreateIntegrationResponse_request::setContentHandlingStrategy(const QString &content_handling_strategy) {
    m_content_handling_strategy = content_handling_strategy;
    m_content_handling_strategy_isSet = true;
}

bool OAICreateIntegrationResponse_request::is_content_handling_strategy_Set() const{
    return m_content_handling_strategy_isSet;
}

bool OAICreateIntegrationResponse_request::is_content_handling_strategy_Valid() const{
    return m_content_handling_strategy_isValid;
}

QString OAICreateIntegrationResponse_request::getIntegrationResponseKey() const {
    return m_integration_response_key;
}
void OAICreateIntegrationResponse_request::setIntegrationResponseKey(const QString &integration_response_key) {
    m_integration_response_key = integration_response_key;
    m_integration_response_key_isSet = true;
}

bool OAICreateIntegrationResponse_request::is_integration_response_key_Set() const{
    return m_integration_response_key_isSet;
}

bool OAICreateIntegrationResponse_request::is_integration_response_key_Valid() const{
    return m_integration_response_key_isValid;
}

QMap<QString, QString> OAICreateIntegrationResponse_request::getResponseParameters() const {
    return m_response_parameters;
}
void OAICreateIntegrationResponse_request::setResponseParameters(const QMap<QString, QString> &response_parameters) {
    m_response_parameters = response_parameters;
    m_response_parameters_isSet = true;
}

bool OAICreateIntegrationResponse_request::is_response_parameters_Set() const{
    return m_response_parameters_isSet;
}

bool OAICreateIntegrationResponse_request::is_response_parameters_Valid() const{
    return m_response_parameters_isValid;
}

QMap<QString, QString> OAICreateIntegrationResponse_request::getResponseTemplates() const {
    return m_response_templates;
}
void OAICreateIntegrationResponse_request::setResponseTemplates(const QMap<QString, QString> &response_templates) {
    m_response_templates = response_templates;
    m_response_templates_isSet = true;
}

bool OAICreateIntegrationResponse_request::is_response_templates_Set() const{
    return m_response_templates_isSet;
}

bool OAICreateIntegrationResponse_request::is_response_templates_Valid() const{
    return m_response_templates_isValid;
}

QString OAICreateIntegrationResponse_request::getTemplateSelectionExpression() const {
    return m_template_selection_expression;
}
void OAICreateIntegrationResponse_request::setTemplateSelectionExpression(const QString &template_selection_expression) {
    m_template_selection_expression = template_selection_expression;
    m_template_selection_expression_isSet = true;
}

bool OAICreateIntegrationResponse_request::is_template_selection_expression_Set() const{
    return m_template_selection_expression_isSet;
}

bool OAICreateIntegrationResponse_request::is_template_selection_expression_Valid() const{
    return m_template_selection_expression_isValid;
}

bool OAICreateIntegrationResponse_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_handling_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_response_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateIntegrationResponse_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_integration_response_key_isValid && true;
}

} // namespace OpenAPI
