/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainNameConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainNameConfiguration::OAIDomainNameConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainNameConfiguration::OAIDomainNameConfiguration() {
    this->initializeModel();
}

OAIDomainNameConfiguration::~OAIDomainNameConfiguration() {}

void OAIDomainNameConfiguration::initializeModel() {

    m_api_gateway_domain_name_isSet = false;
    m_api_gateway_domain_name_isValid = false;

    m_certificate_arn_isSet = false;
    m_certificate_arn_isValid = false;

    m_certificate_name_isSet = false;
    m_certificate_name_isValid = false;

    m_certificate_upload_date_isSet = false;
    m_certificate_upload_date_isValid = false;

    m_domain_name_status_isSet = false;
    m_domain_name_status_isValid = false;

    m_domain_name_status_message_isSet = false;
    m_domain_name_status_message_isValid = false;

    m_endpoint_type_isSet = false;
    m_endpoint_type_isValid = false;

    m_hosted_zone_id_isSet = false;
    m_hosted_zone_id_isValid = false;

    m_security_policy_isSet = false;
    m_security_policy_isValid = false;

    m_ownership_verification_certificate_arn_isSet = false;
    m_ownership_verification_certificate_arn_isValid = false;
}

void OAIDomainNameConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainNameConfiguration::fromJsonObject(QJsonObject json) {

    m_api_gateway_domain_name_isValid = ::OpenAPI::fromJsonValue(m_api_gateway_domain_name, json[QString("ApiGatewayDomainName")]);
    m_api_gateway_domain_name_isSet = !json[QString("ApiGatewayDomainName")].isNull() && m_api_gateway_domain_name_isValid;

    m_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_certificate_arn, json[QString("CertificateArn")]);
    m_certificate_arn_isSet = !json[QString("CertificateArn")].isNull() && m_certificate_arn_isValid;

    m_certificate_name_isValid = ::OpenAPI::fromJsonValue(m_certificate_name, json[QString("CertificateName")]);
    m_certificate_name_isSet = !json[QString("CertificateName")].isNull() && m_certificate_name_isValid;

    m_certificate_upload_date_isValid = ::OpenAPI::fromJsonValue(m_certificate_upload_date, json[QString("CertificateUploadDate")]);
    m_certificate_upload_date_isSet = !json[QString("CertificateUploadDate")].isNull() && m_certificate_upload_date_isValid;

    m_domain_name_status_isValid = ::OpenAPI::fromJsonValue(m_domain_name_status, json[QString("DomainNameStatus")]);
    m_domain_name_status_isSet = !json[QString("DomainNameStatus")].isNull() && m_domain_name_status_isValid;

    m_domain_name_status_message_isValid = ::OpenAPI::fromJsonValue(m_domain_name_status_message, json[QString("DomainNameStatusMessage")]);
    m_domain_name_status_message_isSet = !json[QString("DomainNameStatusMessage")].isNull() && m_domain_name_status_message_isValid;

    m_endpoint_type_isValid = ::OpenAPI::fromJsonValue(m_endpoint_type, json[QString("EndpointType")]);
    m_endpoint_type_isSet = !json[QString("EndpointType")].isNull() && m_endpoint_type_isValid;

    m_hosted_zone_id_isValid = ::OpenAPI::fromJsonValue(m_hosted_zone_id, json[QString("HostedZoneId")]);
    m_hosted_zone_id_isSet = !json[QString("HostedZoneId")].isNull() && m_hosted_zone_id_isValid;

    m_security_policy_isValid = ::OpenAPI::fromJsonValue(m_security_policy, json[QString("SecurityPolicy")]);
    m_security_policy_isSet = !json[QString("SecurityPolicy")].isNull() && m_security_policy_isValid;

    m_ownership_verification_certificate_arn_isValid = ::OpenAPI::fromJsonValue(m_ownership_verification_certificate_arn, json[QString("OwnershipVerificationCertificateArn")]);
    m_ownership_verification_certificate_arn_isSet = !json[QString("OwnershipVerificationCertificateArn")].isNull() && m_ownership_verification_certificate_arn_isValid;
}

QString OAIDomainNameConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainNameConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_api_gateway_domain_name_isSet) {
        obj.insert(QString("ApiGatewayDomainName"), ::OpenAPI::toJsonValue(m_api_gateway_domain_name));
    }
    if (m_certificate_arn_isSet) {
        obj.insert(QString("CertificateArn"), ::OpenAPI::toJsonValue(m_certificate_arn));
    }
    if (m_certificate_name_isSet) {
        obj.insert(QString("CertificateName"), ::OpenAPI::toJsonValue(m_certificate_name));
    }
    if (m_certificate_upload_date_isSet) {
        obj.insert(QString("CertificateUploadDate"), ::OpenAPI::toJsonValue(m_certificate_upload_date));
    }
    if (m_domain_name_status.isSet()) {
        obj.insert(QString("DomainNameStatus"), ::OpenAPI::toJsonValue(m_domain_name_status));
    }
    if (m_domain_name_status_message_isSet) {
        obj.insert(QString("DomainNameStatusMessage"), ::OpenAPI::toJsonValue(m_domain_name_status_message));
    }
    if (m_endpoint_type.isSet()) {
        obj.insert(QString("EndpointType"), ::OpenAPI::toJsonValue(m_endpoint_type));
    }
    if (m_hosted_zone_id_isSet) {
        obj.insert(QString("HostedZoneId"), ::OpenAPI::toJsonValue(m_hosted_zone_id));
    }
    if (m_security_policy.isSet()) {
        obj.insert(QString("SecurityPolicy"), ::OpenAPI::toJsonValue(m_security_policy));
    }
    if (m_ownership_verification_certificate_arn_isSet) {
        obj.insert(QString("OwnershipVerificationCertificateArn"), ::OpenAPI::toJsonValue(m_ownership_verification_certificate_arn));
    }
    return obj;
}

QString OAIDomainNameConfiguration::getApiGatewayDomainName() const {
    return m_api_gateway_domain_name;
}
void OAIDomainNameConfiguration::setApiGatewayDomainName(const QString &api_gateway_domain_name) {
    m_api_gateway_domain_name = api_gateway_domain_name;
    m_api_gateway_domain_name_isSet = true;
}

bool OAIDomainNameConfiguration::is_api_gateway_domain_name_Set() const{
    return m_api_gateway_domain_name_isSet;
}

bool OAIDomainNameConfiguration::is_api_gateway_domain_name_Valid() const{
    return m_api_gateway_domain_name_isValid;
}

QString OAIDomainNameConfiguration::getCertificateArn() const {
    return m_certificate_arn;
}
void OAIDomainNameConfiguration::setCertificateArn(const QString &certificate_arn) {
    m_certificate_arn = certificate_arn;
    m_certificate_arn_isSet = true;
}

bool OAIDomainNameConfiguration::is_certificate_arn_Set() const{
    return m_certificate_arn_isSet;
}

bool OAIDomainNameConfiguration::is_certificate_arn_Valid() const{
    return m_certificate_arn_isValid;
}

QString OAIDomainNameConfiguration::getCertificateName() const {
    return m_certificate_name;
}
void OAIDomainNameConfiguration::setCertificateName(const QString &certificate_name) {
    m_certificate_name = certificate_name;
    m_certificate_name_isSet = true;
}

bool OAIDomainNameConfiguration::is_certificate_name_Set() const{
    return m_certificate_name_isSet;
}

bool OAIDomainNameConfiguration::is_certificate_name_Valid() const{
    return m_certificate_name_isValid;
}

QDateTime OAIDomainNameConfiguration::getCertificateUploadDate() const {
    return m_certificate_upload_date;
}
void OAIDomainNameConfiguration::setCertificateUploadDate(const QDateTime &certificate_upload_date) {
    m_certificate_upload_date = certificate_upload_date;
    m_certificate_upload_date_isSet = true;
}

bool OAIDomainNameConfiguration::is_certificate_upload_date_Set() const{
    return m_certificate_upload_date_isSet;
}

bool OAIDomainNameConfiguration::is_certificate_upload_date_Valid() const{
    return m_certificate_upload_date_isValid;
}

OAIDomainNameStatus OAIDomainNameConfiguration::getDomainNameStatus() const {
    return m_domain_name_status;
}
void OAIDomainNameConfiguration::setDomainNameStatus(const OAIDomainNameStatus &domain_name_status) {
    m_domain_name_status = domain_name_status;
    m_domain_name_status_isSet = true;
}

bool OAIDomainNameConfiguration::is_domain_name_status_Set() const{
    return m_domain_name_status_isSet;
}

bool OAIDomainNameConfiguration::is_domain_name_status_Valid() const{
    return m_domain_name_status_isValid;
}

QString OAIDomainNameConfiguration::getDomainNameStatusMessage() const {
    return m_domain_name_status_message;
}
void OAIDomainNameConfiguration::setDomainNameStatusMessage(const QString &domain_name_status_message) {
    m_domain_name_status_message = domain_name_status_message;
    m_domain_name_status_message_isSet = true;
}

bool OAIDomainNameConfiguration::is_domain_name_status_message_Set() const{
    return m_domain_name_status_message_isSet;
}

bool OAIDomainNameConfiguration::is_domain_name_status_message_Valid() const{
    return m_domain_name_status_message_isValid;
}

OAIEndpointType OAIDomainNameConfiguration::getEndpointType() const {
    return m_endpoint_type;
}
void OAIDomainNameConfiguration::setEndpointType(const OAIEndpointType &endpoint_type) {
    m_endpoint_type = endpoint_type;
    m_endpoint_type_isSet = true;
}

bool OAIDomainNameConfiguration::is_endpoint_type_Set() const{
    return m_endpoint_type_isSet;
}

bool OAIDomainNameConfiguration::is_endpoint_type_Valid() const{
    return m_endpoint_type_isValid;
}

QString OAIDomainNameConfiguration::getHostedZoneId() const {
    return m_hosted_zone_id;
}
void OAIDomainNameConfiguration::setHostedZoneId(const QString &hosted_zone_id) {
    m_hosted_zone_id = hosted_zone_id;
    m_hosted_zone_id_isSet = true;
}

bool OAIDomainNameConfiguration::is_hosted_zone_id_Set() const{
    return m_hosted_zone_id_isSet;
}

bool OAIDomainNameConfiguration::is_hosted_zone_id_Valid() const{
    return m_hosted_zone_id_isValid;
}

OAISecurityPolicy OAIDomainNameConfiguration::getSecurityPolicy() const {
    return m_security_policy;
}
void OAIDomainNameConfiguration::setSecurityPolicy(const OAISecurityPolicy &security_policy) {
    m_security_policy = security_policy;
    m_security_policy_isSet = true;
}

bool OAIDomainNameConfiguration::is_security_policy_Set() const{
    return m_security_policy_isSet;
}

bool OAIDomainNameConfiguration::is_security_policy_Valid() const{
    return m_security_policy_isValid;
}

QString OAIDomainNameConfiguration::getOwnershipVerificationCertificateArn() const {
    return m_ownership_verification_certificate_arn;
}
void OAIDomainNameConfiguration::setOwnershipVerificationCertificateArn(const QString &ownership_verification_certificate_arn) {
    m_ownership_verification_certificate_arn = ownership_verification_certificate_arn;
    m_ownership_verification_certificate_arn_isSet = true;
}

bool OAIDomainNameConfiguration::is_ownership_verification_certificate_arn_Set() const{
    return m_ownership_verification_certificate_arn_isSet;
}

bool OAIDomainNameConfiguration::is_ownership_verification_certificate_arn_Valid() const{
    return m_ownership_verification_certificate_arn_isValid;
}

bool OAIDomainNameConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_gateway_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_upload_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_name_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ownership_verification_certificate_arn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainNameConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
