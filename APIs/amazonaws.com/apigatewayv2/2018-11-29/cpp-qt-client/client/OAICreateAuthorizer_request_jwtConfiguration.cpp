/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAuthorizer_request_jwtConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAuthorizer_request_jwtConfiguration::OAICreateAuthorizer_request_jwtConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAuthorizer_request_jwtConfiguration::OAICreateAuthorizer_request_jwtConfiguration() {
    this->initializeModel();
}

OAICreateAuthorizer_request_jwtConfiguration::~OAICreateAuthorizer_request_jwtConfiguration() {}

void OAICreateAuthorizer_request_jwtConfiguration::initializeModel() {

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;
}

void OAICreateAuthorizer_request_jwtConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAuthorizer_request_jwtConfiguration::fromJsonObject(QJsonObject json) {

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("Audience")]);
    m_audience_isSet = !json[QString("Audience")].isNull() && m_audience_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("Issuer")]);
    m_issuer_isSet = !json[QString("Issuer")].isNull() && m_issuer_isValid;
}

QString OAICreateAuthorizer_request_jwtConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAuthorizer_request_jwtConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_audience.isSet()) {
        obj.insert(QString("Audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("Issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    return obj;
}

QList OAICreateAuthorizer_request_jwtConfiguration::getAudience() const {
    return m_audience;
}
void OAICreateAuthorizer_request_jwtConfiguration::setAudience(const QList &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAICreateAuthorizer_request_jwtConfiguration::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAICreateAuthorizer_request_jwtConfiguration::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAICreateAuthorizer_request_jwtConfiguration::getIssuer() const {
    return m_issuer;
}
void OAICreateAuthorizer_request_jwtConfiguration::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAICreateAuthorizer_request_jwtConfiguration::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAICreateAuthorizer_request_jwtConfiguration::is_issuer_Valid() const{
    return m_issuer_isValid;
}

bool OAICreateAuthorizer_request_jwtConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAuthorizer_request_jwtConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
