/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRouteResponse_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRouteResponse_request::OAICreateRouteResponse_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRouteResponse_request::OAICreateRouteResponse_request() {
    this->initializeModel();
}

OAICreateRouteResponse_request::~OAICreateRouteResponse_request() {}

void OAICreateRouteResponse_request::initializeModel() {

    m_model_selection_expression_isSet = false;
    m_model_selection_expression_isValid = false;

    m_response_models_isSet = false;
    m_response_models_isValid = false;

    m_response_parameters_isSet = false;
    m_response_parameters_isValid = false;

    m_route_response_key_isSet = false;
    m_route_response_key_isValid = false;
}

void OAICreateRouteResponse_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRouteResponse_request::fromJsonObject(QJsonObject json) {

    m_model_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_model_selection_expression, json[QString("modelSelectionExpression")]);
    m_model_selection_expression_isSet = !json[QString("modelSelectionExpression")].isNull() && m_model_selection_expression_isValid;

    m_response_models_isValid = ::OpenAPI::fromJsonValue(m_response_models, json[QString("responseModels")]);
    m_response_models_isSet = !json[QString("responseModels")].isNull() && m_response_models_isValid;

    m_response_parameters_isValid = ::OpenAPI::fromJsonValue(m_response_parameters, json[QString("responseParameters")]);
    m_response_parameters_isSet = !json[QString("responseParameters")].isNull() && m_response_parameters_isValid;

    m_route_response_key_isValid = ::OpenAPI::fromJsonValue(m_route_response_key, json[QString("routeResponseKey")]);
    m_route_response_key_isSet = !json[QString("routeResponseKey")].isNull() && m_route_response_key_isValid;
}

QString OAICreateRouteResponse_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRouteResponse_request::asJsonObject() const {
    QJsonObject obj;
    if (m_model_selection_expression_isSet) {
        obj.insert(QString("modelSelectionExpression"), ::OpenAPI::toJsonValue(m_model_selection_expression));
    }
    if (m_response_models.size() > 0) {
        obj.insert(QString("responseModels"), ::OpenAPI::toJsonValue(m_response_models));
    }
    if (m_response_parameters.size() > 0) {
        obj.insert(QString("responseParameters"), ::OpenAPI::toJsonValue(m_response_parameters));
    }
    if (m_route_response_key_isSet) {
        obj.insert(QString("routeResponseKey"), ::OpenAPI::toJsonValue(m_route_response_key));
    }
    return obj;
}

QString OAICreateRouteResponse_request::getModelSelectionExpression() const {
    return m_model_selection_expression;
}
void OAICreateRouteResponse_request::setModelSelectionExpression(const QString &model_selection_expression) {
    m_model_selection_expression = model_selection_expression;
    m_model_selection_expression_isSet = true;
}

bool OAICreateRouteResponse_request::is_model_selection_expression_Set() const{
    return m_model_selection_expression_isSet;
}

bool OAICreateRouteResponse_request::is_model_selection_expression_Valid() const{
    return m_model_selection_expression_isValid;
}

QMap<QString, QString> OAICreateRouteResponse_request::getResponseModels() const {
    return m_response_models;
}
void OAICreateRouteResponse_request::setResponseModels(const QMap<QString, QString> &response_models) {
    m_response_models = response_models;
    m_response_models_isSet = true;
}

bool OAICreateRouteResponse_request::is_response_models_Set() const{
    return m_response_models_isSet;
}

bool OAICreateRouteResponse_request::is_response_models_Valid() const{
    return m_response_models_isValid;
}

QMap<QString, OAIParameterConstraints> OAICreateRouteResponse_request::getResponseParameters() const {
    return m_response_parameters;
}
void OAICreateRouteResponse_request::setResponseParameters(const QMap<QString, OAIParameterConstraints> &response_parameters) {
    m_response_parameters = response_parameters;
    m_response_parameters_isSet = true;
}

bool OAICreateRouteResponse_request::is_response_parameters_Set() const{
    return m_response_parameters_isSet;
}

bool OAICreateRouteResponse_request::is_response_parameters_Valid() const{
    return m_response_parameters_isValid;
}

QString OAICreateRouteResponse_request::getRouteResponseKey() const {
    return m_route_response_key;
}
void OAICreateRouteResponse_request::setRouteResponseKey(const QString &route_response_key) {
    m_route_response_key = route_response_key;
    m_route_response_key_isSet = true;
}

bool OAICreateRouteResponse_request::is_route_response_key_Set() const{
    return m_route_response_key_isSet;
}

bool OAICreateRouteResponse_request::is_route_response_key_Valid() const{
    return m_route_response_key_isValid;
}

bool OAICreateRouteResponse_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_response_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRouteResponse_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_route_response_key_isValid && true;
}

} // namespace OpenAPI
