/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateModelResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateModelResponse::OAICreateModelResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateModelResponse::OAICreateModelResponse() {
    this->initializeModel();
}

OAICreateModelResponse::~OAICreateModelResponse() {}

void OAICreateModelResponse::initializeModel() {

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_model_id_isSet = false;
    m_model_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schema_isSet = false;
    m_schema_isValid = false;
}

void OAICreateModelResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateModelResponse::fromJsonObject(QJsonObject json) {

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("ContentType")]);
    m_content_type_isSet = !json[QString("ContentType")].isNull() && m_content_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_model_id_isValid = ::OpenAPI::fromJsonValue(m_model_id, json[QString("ModelId")]);
    m_model_id_isSet = !json[QString("ModelId")].isNull() && m_model_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_schema_isValid = ::OpenAPI::fromJsonValue(m_schema, json[QString("Schema")]);
    m_schema_isSet = !json[QString("Schema")].isNull() && m_schema_isValid;
}

QString OAICreateModelResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateModelResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_content_type_isSet) {
        obj.insert(QString("ContentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_model_id_isSet) {
        obj.insert(QString("ModelId"), ::OpenAPI::toJsonValue(m_model_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schema_isSet) {
        obj.insert(QString("Schema"), ::OpenAPI::toJsonValue(m_schema));
    }
    return obj;
}

QString OAICreateModelResponse::getContentType() const {
    return m_content_type;
}
void OAICreateModelResponse::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAICreateModelResponse::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAICreateModelResponse::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAICreateModelResponse::getDescription() const {
    return m_description;
}
void OAICreateModelResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateModelResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateModelResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateModelResponse::getModelId() const {
    return m_model_id;
}
void OAICreateModelResponse::setModelId(const QString &model_id) {
    m_model_id = model_id;
    m_model_id_isSet = true;
}

bool OAICreateModelResponse::is_model_id_Set() const{
    return m_model_id_isSet;
}

bool OAICreateModelResponse::is_model_id_Valid() const{
    return m_model_id_isValid;
}

QString OAICreateModelResponse::getName() const {
    return m_name;
}
void OAICreateModelResponse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateModelResponse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateModelResponse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICreateModelResponse::getSchema() const {
    return m_schema;
}
void OAICreateModelResponse::setSchema(const QString &schema) {
    m_schema = schema;
    m_schema_isSet = true;
}

bool OAICreateModelResponse::is_schema_Set() const{
    return m_schema_isSet;
}

bool OAICreateModelResponse::is_schema_Valid() const{
    return m_schema_isValid;
}

bool OAICreateModelResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateModelResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
