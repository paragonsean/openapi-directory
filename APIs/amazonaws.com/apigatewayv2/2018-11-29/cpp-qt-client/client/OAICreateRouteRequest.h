/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateRouteRequest.h
 *
 * Creates a new Route resource to represent a route.
 */

#ifndef OAICreateRouteRequest_H
#define OAICreateRouteRequest_H

#include <QJsonObject>

#include "OAIAuthorizationType.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICreateRouteRequest : public OAIObject {
public:
    OAICreateRouteRequest();
    OAICreateRouteRequest(QString json);
    ~OAICreateRouteRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool getApiKeyRequired() const;
    void setApiKeyRequired(const bool &api_key_required);
    bool is_api_key_required_Set() const;
    bool is_api_key_required_Valid() const;

    QList getAuthorizationScopes() const;
    void setAuthorizationScopes(const QList &authorization_scopes);
    bool is_authorization_scopes_Set() const;
    bool is_authorization_scopes_Valid() const;

    OAIAuthorizationType getAuthorizationType() const;
    void setAuthorizationType(const OAIAuthorizationType &authorization_type);
    bool is_authorization_type_Set() const;
    bool is_authorization_type_Valid() const;

    QString getAuthorizerId() const;
    void setAuthorizerId(const QString &authorizer_id);
    bool is_authorizer_id_Set() const;
    bool is_authorizer_id_Valid() const;

    QString getModelSelectionExpression() const;
    void setModelSelectionExpression(const QString &model_selection_expression);
    bool is_model_selection_expression_Set() const;
    bool is_model_selection_expression_Valid() const;

    QString getOperationName() const;
    void setOperationName(const QString &operation_name);
    bool is_operation_name_Set() const;
    bool is_operation_name_Valid() const;

    QMap getRequestModels() const;
    void setRequestModels(const QMap &request_models);
    bool is_request_models_Set() const;
    bool is_request_models_Valid() const;

    QMap getRequestParameters() const;
    void setRequestParameters(const QMap &request_parameters);
    bool is_request_parameters_Set() const;
    bool is_request_parameters_Valid() const;

    QString getRouteKey() const;
    void setRouteKey(const QString &route_key);
    bool is_route_key_Set() const;
    bool is_route_key_Valid() const;

    QString getRouteResponseSelectionExpression() const;
    void setRouteResponseSelectionExpression(const QString &route_response_selection_expression);
    bool is_route_response_selection_expression_Set() const;
    bool is_route_response_selection_expression_Valid() const;

    QString getTarget() const;
    void setTarget(const QString &target);
    bool is_target_Set() const;
    bool is_target_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_api_key_required;
    bool m_api_key_required_isSet;
    bool m_api_key_required_isValid;

    QList m_authorization_scopes;
    bool m_authorization_scopes_isSet;
    bool m_authorization_scopes_isValid;

    OAIAuthorizationType m_authorization_type;
    bool m_authorization_type_isSet;
    bool m_authorization_type_isValid;

    QString m_authorizer_id;
    bool m_authorizer_id_isSet;
    bool m_authorizer_id_isValid;

    QString m_model_selection_expression;
    bool m_model_selection_expression_isSet;
    bool m_model_selection_expression_isValid;

    QString m_operation_name;
    bool m_operation_name_isSet;
    bool m_operation_name_isValid;

    QMap m_request_models;
    bool m_request_models_isSet;
    bool m_request_models_isValid;

    QMap m_request_parameters;
    bool m_request_parameters_isSet;
    bool m_request_parameters_isValid;

    QString m_route_key;
    bool m_route_key_isSet;
    bool m_route_key_isValid;

    QString m_route_response_selection_expression;
    bool m_route_response_selection_expression_isSet;
    bool m_route_response_selection_expression_isValid;

    QString m_target;
    bool m_target_isSet;
    bool m_target_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateRouteRequest)

#endif // OAICreateRouteRequest_H
