/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeployment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeployment::OAIDeployment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeployment::OAIDeployment() {
    this->initializeModel();
}

OAIDeployment::~OAIDeployment() {}

void OAIDeployment::initializeModel() {

    m_auto_deployed_isSet = false;
    m_auto_deployed_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_deployment_id_isSet = false;
    m_deployment_id_isValid = false;

    m_deployment_status_isSet = false;
    m_deployment_status_isValid = false;

    m_deployment_status_message_isSet = false;
    m_deployment_status_message_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;
}

void OAIDeployment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeployment::fromJsonObject(QJsonObject json) {

    m_auto_deployed_isValid = ::OpenAPI::fromJsonValue(m_auto_deployed, json[QString("AutoDeployed")]);
    m_auto_deployed_isSet = !json[QString("AutoDeployed")].isNull() && m_auto_deployed_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("CreatedDate")]);
    m_created_date_isSet = !json[QString("CreatedDate")].isNull() && m_created_date_isValid;

    m_deployment_id_isValid = ::OpenAPI::fromJsonValue(m_deployment_id, json[QString("DeploymentId")]);
    m_deployment_id_isSet = !json[QString("DeploymentId")].isNull() && m_deployment_id_isValid;

    m_deployment_status_isValid = ::OpenAPI::fromJsonValue(m_deployment_status, json[QString("DeploymentStatus")]);
    m_deployment_status_isSet = !json[QString("DeploymentStatus")].isNull() && m_deployment_status_isValid;

    m_deployment_status_message_isValid = ::OpenAPI::fromJsonValue(m_deployment_status_message, json[QString("DeploymentStatusMessage")]);
    m_deployment_status_message_isSet = !json[QString("DeploymentStatusMessage")].isNull() && m_deployment_status_message_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;
}

QString OAIDeployment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeployment::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_deployed_isSet) {
        obj.insert(QString("AutoDeployed"), ::OpenAPI::toJsonValue(m_auto_deployed));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("CreatedDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_deployment_id_isSet) {
        obj.insert(QString("DeploymentId"), ::OpenAPI::toJsonValue(m_deployment_id));
    }
    if (m_deployment_status.isSet()) {
        obj.insert(QString("DeploymentStatus"), ::OpenAPI::toJsonValue(m_deployment_status));
    }
    if (m_deployment_status_message_isSet) {
        obj.insert(QString("DeploymentStatusMessage"), ::OpenAPI::toJsonValue(m_deployment_status_message));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    return obj;
}

bool OAIDeployment::getAutoDeployed() const {
    return m_auto_deployed;
}
void OAIDeployment::setAutoDeployed(const bool &auto_deployed) {
    m_auto_deployed = auto_deployed;
    m_auto_deployed_isSet = true;
}

bool OAIDeployment::is_auto_deployed_Set() const{
    return m_auto_deployed_isSet;
}

bool OAIDeployment::is_auto_deployed_Valid() const{
    return m_auto_deployed_isValid;
}

QDateTime OAIDeployment::getCreatedDate() const {
    return m_created_date;
}
void OAIDeployment::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIDeployment::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIDeployment::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QString OAIDeployment::getDeploymentId() const {
    return m_deployment_id;
}
void OAIDeployment::setDeploymentId(const QString &deployment_id) {
    m_deployment_id = deployment_id;
    m_deployment_id_isSet = true;
}

bool OAIDeployment::is_deployment_id_Set() const{
    return m_deployment_id_isSet;
}

bool OAIDeployment::is_deployment_id_Valid() const{
    return m_deployment_id_isValid;
}

OAIDeploymentStatus OAIDeployment::getDeploymentStatus() const {
    return m_deployment_status;
}
void OAIDeployment::setDeploymentStatus(const OAIDeploymentStatus &deployment_status) {
    m_deployment_status = deployment_status;
    m_deployment_status_isSet = true;
}

bool OAIDeployment::is_deployment_status_Set() const{
    return m_deployment_status_isSet;
}

bool OAIDeployment::is_deployment_status_Valid() const{
    return m_deployment_status_isValid;
}

QString OAIDeployment::getDeploymentStatusMessage() const {
    return m_deployment_status_message;
}
void OAIDeployment::setDeploymentStatusMessage(const QString &deployment_status_message) {
    m_deployment_status_message = deployment_status_message;
    m_deployment_status_message_isSet = true;
}

bool OAIDeployment::is_deployment_status_message_Set() const{
    return m_deployment_status_message_isSet;
}

bool OAIDeployment::is_deployment_status_message_Valid() const{
    return m_deployment_status_message_isValid;
}

QString OAIDeployment::getDescription() const {
    return m_description;
}
void OAIDeployment::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDeployment::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDeployment::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIDeployment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_deployed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeployment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
