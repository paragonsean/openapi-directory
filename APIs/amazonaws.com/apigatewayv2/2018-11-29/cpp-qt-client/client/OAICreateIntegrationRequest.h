/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateIntegrationRequest.h
 *
 * Creates a new Integration resource to represent an integration.
 */

#ifndef OAICreateIntegrationRequest_H
#define OAICreateIntegrationRequest_H

#include <QJsonObject>

#include "OAIConnectionType.h"
#include "OAIContentHandlingStrategy.h"
#include "OAICreateIntegrationRequest_TlsConfig.h"
#include "OAIIntegrationType.h"
#include "OAIPassthroughBehavior.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICreateIntegrationRequest_TlsConfig;

class OAICreateIntegrationRequest : public OAIObject {
public:
    OAICreateIntegrationRequest();
    OAICreateIntegrationRequest(QString json);
    ~OAICreateIntegrationRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getConnectionId() const;
    void setConnectionId(const QString &connection_id);
    bool is_connection_id_Set() const;
    bool is_connection_id_Valid() const;

    OAIConnectionType getConnectionType() const;
    void setConnectionType(const OAIConnectionType &connection_type);
    bool is_connection_type_Set() const;
    bool is_connection_type_Valid() const;

    OAIContentHandlingStrategy getContentHandlingStrategy() const;
    void setContentHandlingStrategy(const OAIContentHandlingStrategy &content_handling_strategy);
    bool is_content_handling_strategy_Set() const;
    bool is_content_handling_strategy_Valid() const;

    QString getCredentialsArn() const;
    void setCredentialsArn(const QString &credentials_arn);
    bool is_credentials_arn_Set() const;
    bool is_credentials_arn_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getIntegrationMethod() const;
    void setIntegrationMethod(const QString &integration_method);
    bool is_integration_method_Set() const;
    bool is_integration_method_Valid() const;

    QString getIntegrationSubtype() const;
    void setIntegrationSubtype(const QString &integration_subtype);
    bool is_integration_subtype_Set() const;
    bool is_integration_subtype_Valid() const;

    OAIIntegrationType getIntegrationType() const;
    void setIntegrationType(const OAIIntegrationType &integration_type);
    bool is_integration_type_Set() const;
    bool is_integration_type_Valid() const;

    QString getIntegrationUri() const;
    void setIntegrationUri(const QString &integration_uri);
    bool is_integration_uri_Set() const;
    bool is_integration_uri_Valid() const;

    OAIPassthroughBehavior getPassthroughBehavior() const;
    void setPassthroughBehavior(const OAIPassthroughBehavior &passthrough_behavior);
    bool is_passthrough_behavior_Set() const;
    bool is_passthrough_behavior_Valid() const;

    QString getPayloadFormatVersion() const;
    void setPayloadFormatVersion(const QString &payload_format_version);
    bool is_payload_format_version_Set() const;
    bool is_payload_format_version_Valid() const;

    QMap getRequestParameters() const;
    void setRequestParameters(const QMap &request_parameters);
    bool is_request_parameters_Set() const;
    bool is_request_parameters_Valid() const;

    QMap getRequestTemplates() const;
    void setRequestTemplates(const QMap &request_templates);
    bool is_request_templates_Set() const;
    bool is_request_templates_Valid() const;

    QMap getResponseParameters() const;
    void setResponseParameters(const QMap &response_parameters);
    bool is_response_parameters_Set() const;
    bool is_response_parameters_Valid() const;

    QString getTemplateSelectionExpression() const;
    void setTemplateSelectionExpression(const QString &template_selection_expression);
    bool is_template_selection_expression_Set() const;
    bool is_template_selection_expression_Valid() const;

    qint32 getTimeoutInMillis() const;
    void setTimeoutInMillis(const qint32 &timeout_in_millis);
    bool is_timeout_in_millis_Set() const;
    bool is_timeout_in_millis_Valid() const;

    OAICreateIntegrationRequest_TlsConfig getTlsConfig() const;
    void setTlsConfig(const OAICreateIntegrationRequest_TlsConfig &tls_config);
    bool is_tls_config_Set() const;
    bool is_tls_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_connection_id;
    bool m_connection_id_isSet;
    bool m_connection_id_isValid;

    OAIConnectionType m_connection_type;
    bool m_connection_type_isSet;
    bool m_connection_type_isValid;

    OAIContentHandlingStrategy m_content_handling_strategy;
    bool m_content_handling_strategy_isSet;
    bool m_content_handling_strategy_isValid;

    QString m_credentials_arn;
    bool m_credentials_arn_isSet;
    bool m_credentials_arn_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_integration_method;
    bool m_integration_method_isSet;
    bool m_integration_method_isValid;

    QString m_integration_subtype;
    bool m_integration_subtype_isSet;
    bool m_integration_subtype_isValid;

    OAIIntegrationType m_integration_type;
    bool m_integration_type_isSet;
    bool m_integration_type_isValid;

    QString m_integration_uri;
    bool m_integration_uri_isSet;
    bool m_integration_uri_isValid;

    OAIPassthroughBehavior m_passthrough_behavior;
    bool m_passthrough_behavior_isSet;
    bool m_passthrough_behavior_isValid;

    QString m_payload_format_version;
    bool m_payload_format_version_isSet;
    bool m_payload_format_version_isValid;

    QMap m_request_parameters;
    bool m_request_parameters_isSet;
    bool m_request_parameters_isValid;

    QMap m_request_templates;
    bool m_request_templates_isSet;
    bool m_request_templates_isValid;

    QMap m_response_parameters;
    bool m_response_parameters_isSet;
    bool m_response_parameters_isValid;

    QString m_template_selection_expression;
    bool m_template_selection_expression_isSet;
    bool m_template_selection_expression_isValid;

    qint32 m_timeout_in_millis;
    bool m_timeout_in_millis_isSet;
    bool m_timeout_in_millis_isValid;

    OAICreateIntegrationRequest_TlsConfig m_tls_config;
    bool m_tls_config_isSet;
    bool m_tls_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateIntegrationRequest)

#endif // OAICreateIntegrationRequest_H
