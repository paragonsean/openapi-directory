/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateRoute_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateRoute_request::OAIUpdateRoute_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateRoute_request::OAIUpdateRoute_request() {
    this->initializeModel();
}

OAIUpdateRoute_request::~OAIUpdateRoute_request() {}

void OAIUpdateRoute_request::initializeModel() {

    m_api_key_required_isSet = false;
    m_api_key_required_isValid = false;

    m_authorization_scopes_isSet = false;
    m_authorization_scopes_isValid = false;

    m_authorization_type_isSet = false;
    m_authorization_type_isValid = false;

    m_authorizer_id_isSet = false;
    m_authorizer_id_isValid = false;

    m_model_selection_expression_isSet = false;
    m_model_selection_expression_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_request_models_isSet = false;
    m_request_models_isValid = false;

    m_request_parameters_isSet = false;
    m_request_parameters_isValid = false;

    m_route_key_isSet = false;
    m_route_key_isValid = false;

    m_route_response_selection_expression_isSet = false;
    m_route_response_selection_expression_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIUpdateRoute_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateRoute_request::fromJsonObject(QJsonObject json) {

    m_api_key_required_isValid = ::OpenAPI::fromJsonValue(m_api_key_required, json[QString("apiKeyRequired")]);
    m_api_key_required_isSet = !json[QString("apiKeyRequired")].isNull() && m_api_key_required_isValid;

    m_authorization_scopes_isValid = ::OpenAPI::fromJsonValue(m_authorization_scopes, json[QString("authorizationScopes")]);
    m_authorization_scopes_isSet = !json[QString("authorizationScopes")].isNull() && m_authorization_scopes_isValid;

    m_authorization_type_isValid = ::OpenAPI::fromJsonValue(m_authorization_type, json[QString("authorizationType")]);
    m_authorization_type_isSet = !json[QString("authorizationType")].isNull() && m_authorization_type_isValid;

    m_authorizer_id_isValid = ::OpenAPI::fromJsonValue(m_authorizer_id, json[QString("authorizerId")]);
    m_authorizer_id_isSet = !json[QString("authorizerId")].isNull() && m_authorizer_id_isValid;

    m_model_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_model_selection_expression, json[QString("modelSelectionExpression")]);
    m_model_selection_expression_isSet = !json[QString("modelSelectionExpression")].isNull() && m_model_selection_expression_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("operationName")]);
    m_operation_name_isSet = !json[QString("operationName")].isNull() && m_operation_name_isValid;

    m_request_models_isValid = ::OpenAPI::fromJsonValue(m_request_models, json[QString("requestModels")]);
    m_request_models_isSet = !json[QString("requestModels")].isNull() && m_request_models_isValid;

    m_request_parameters_isValid = ::OpenAPI::fromJsonValue(m_request_parameters, json[QString("requestParameters")]);
    m_request_parameters_isSet = !json[QString("requestParameters")].isNull() && m_request_parameters_isValid;

    m_route_key_isValid = ::OpenAPI::fromJsonValue(m_route_key, json[QString("routeKey")]);
    m_route_key_isSet = !json[QString("routeKey")].isNull() && m_route_key_isValid;

    m_route_response_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_route_response_selection_expression, json[QString("routeResponseSelectionExpression")]);
    m_route_response_selection_expression_isSet = !json[QString("routeResponseSelectionExpression")].isNull() && m_route_response_selection_expression_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIUpdateRoute_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateRoute_request::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_required_isSet) {
        obj.insert(QString("apiKeyRequired"), ::OpenAPI::toJsonValue(m_api_key_required));
    }
    if (m_authorization_scopes.size() > 0) {
        obj.insert(QString("authorizationScopes"), ::OpenAPI::toJsonValue(m_authorization_scopes));
    }
    if (m_authorization_type_isSet) {
        obj.insert(QString("authorizationType"), ::OpenAPI::toJsonValue(m_authorization_type));
    }
    if (m_authorizer_id_isSet) {
        obj.insert(QString("authorizerId"), ::OpenAPI::toJsonValue(m_authorizer_id));
    }
    if (m_model_selection_expression_isSet) {
        obj.insert(QString("modelSelectionExpression"), ::OpenAPI::toJsonValue(m_model_selection_expression));
    }
    if (m_operation_name_isSet) {
        obj.insert(QString("operationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_request_models.size() > 0) {
        obj.insert(QString("requestModels"), ::OpenAPI::toJsonValue(m_request_models));
    }
    if (m_request_parameters.size() > 0) {
        obj.insert(QString("requestParameters"), ::OpenAPI::toJsonValue(m_request_parameters));
    }
    if (m_route_key_isSet) {
        obj.insert(QString("routeKey"), ::OpenAPI::toJsonValue(m_route_key));
    }
    if (m_route_response_selection_expression_isSet) {
        obj.insert(QString("routeResponseSelectionExpression"), ::OpenAPI::toJsonValue(m_route_response_selection_expression));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

bool OAIUpdateRoute_request::isApiKeyRequired() const {
    return m_api_key_required;
}
void OAIUpdateRoute_request::setApiKeyRequired(const bool &api_key_required) {
    m_api_key_required = api_key_required;
    m_api_key_required_isSet = true;
}

bool OAIUpdateRoute_request::is_api_key_required_Set() const{
    return m_api_key_required_isSet;
}

bool OAIUpdateRoute_request::is_api_key_required_Valid() const{
    return m_api_key_required_isValid;
}

QList<QString> OAIUpdateRoute_request::getAuthorizationScopes() const {
    return m_authorization_scopes;
}
void OAIUpdateRoute_request::setAuthorizationScopes(const QList<QString> &authorization_scopes) {
    m_authorization_scopes = authorization_scopes;
    m_authorization_scopes_isSet = true;
}

bool OAIUpdateRoute_request::is_authorization_scopes_Set() const{
    return m_authorization_scopes_isSet;
}

bool OAIUpdateRoute_request::is_authorization_scopes_Valid() const{
    return m_authorization_scopes_isValid;
}

QString OAIUpdateRoute_request::getAuthorizationType() const {
    return m_authorization_type;
}
void OAIUpdateRoute_request::setAuthorizationType(const QString &authorization_type) {
    m_authorization_type = authorization_type;
    m_authorization_type_isSet = true;
}

bool OAIUpdateRoute_request::is_authorization_type_Set() const{
    return m_authorization_type_isSet;
}

bool OAIUpdateRoute_request::is_authorization_type_Valid() const{
    return m_authorization_type_isValid;
}

QString OAIUpdateRoute_request::getAuthorizerId() const {
    return m_authorizer_id;
}
void OAIUpdateRoute_request::setAuthorizerId(const QString &authorizer_id) {
    m_authorizer_id = authorizer_id;
    m_authorizer_id_isSet = true;
}

bool OAIUpdateRoute_request::is_authorizer_id_Set() const{
    return m_authorizer_id_isSet;
}

bool OAIUpdateRoute_request::is_authorizer_id_Valid() const{
    return m_authorizer_id_isValid;
}

QString OAIUpdateRoute_request::getModelSelectionExpression() const {
    return m_model_selection_expression;
}
void OAIUpdateRoute_request::setModelSelectionExpression(const QString &model_selection_expression) {
    m_model_selection_expression = model_selection_expression;
    m_model_selection_expression_isSet = true;
}

bool OAIUpdateRoute_request::is_model_selection_expression_Set() const{
    return m_model_selection_expression_isSet;
}

bool OAIUpdateRoute_request::is_model_selection_expression_Valid() const{
    return m_model_selection_expression_isValid;
}

QString OAIUpdateRoute_request::getOperationName() const {
    return m_operation_name;
}
void OAIUpdateRoute_request::setOperationName(const QString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAIUpdateRoute_request::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAIUpdateRoute_request::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

QMap<QString, QString> OAIUpdateRoute_request::getRequestModels() const {
    return m_request_models;
}
void OAIUpdateRoute_request::setRequestModels(const QMap<QString, QString> &request_models) {
    m_request_models = request_models;
    m_request_models_isSet = true;
}

bool OAIUpdateRoute_request::is_request_models_Set() const{
    return m_request_models_isSet;
}

bool OAIUpdateRoute_request::is_request_models_Valid() const{
    return m_request_models_isValid;
}

QMap<QString, OAIParameterConstraints> OAIUpdateRoute_request::getRequestParameters() const {
    return m_request_parameters;
}
void OAIUpdateRoute_request::setRequestParameters(const QMap<QString, OAIParameterConstraints> &request_parameters) {
    m_request_parameters = request_parameters;
    m_request_parameters_isSet = true;
}

bool OAIUpdateRoute_request::is_request_parameters_Set() const{
    return m_request_parameters_isSet;
}

bool OAIUpdateRoute_request::is_request_parameters_Valid() const{
    return m_request_parameters_isValid;
}

QString OAIUpdateRoute_request::getRouteKey() const {
    return m_route_key;
}
void OAIUpdateRoute_request::setRouteKey(const QString &route_key) {
    m_route_key = route_key;
    m_route_key_isSet = true;
}

bool OAIUpdateRoute_request::is_route_key_Set() const{
    return m_route_key_isSet;
}

bool OAIUpdateRoute_request::is_route_key_Valid() const{
    return m_route_key_isValid;
}

QString OAIUpdateRoute_request::getRouteResponseSelectionExpression() const {
    return m_route_response_selection_expression;
}
void OAIUpdateRoute_request::setRouteResponseSelectionExpression(const QString &route_response_selection_expression) {
    m_route_response_selection_expression = route_response_selection_expression;
    m_route_response_selection_expression_isSet = true;
}

bool OAIUpdateRoute_request::is_route_response_selection_expression_Set() const{
    return m_route_response_selection_expression_isSet;
}

bool OAIUpdateRoute_request::is_route_response_selection_expression_Valid() const{
    return m_route_response_selection_expression_isValid;
}

QString OAIUpdateRoute_request::getTarget() const {
    return m_target;
}
void OAIUpdateRoute_request::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIUpdateRoute_request::is_target_Set() const{
    return m_target_isSet;
}

bool OAIUpdateRoute_request::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIUpdateRoute_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorizer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_response_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateRoute_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
