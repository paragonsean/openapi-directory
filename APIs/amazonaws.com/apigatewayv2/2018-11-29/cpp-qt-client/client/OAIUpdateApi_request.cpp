/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateApi_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateApi_request::OAIUpdateApi_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateApi_request::OAIUpdateApi_request() {
    this->initializeModel();
}

OAIUpdateApi_request::~OAIUpdateApi_request() {}

void OAIUpdateApi_request::initializeModel() {

    m_api_key_selection_expression_isSet = false;
    m_api_key_selection_expression_isValid = false;

    m_cors_configuration_isSet = false;
    m_cors_configuration_isValid = false;

    m_credentials_arn_isSet = false;
    m_credentials_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disable_schema_validation_isSet = false;
    m_disable_schema_validation_isValid = false;

    m_disable_execute_api_endpoint_isSet = false;
    m_disable_execute_api_endpoint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_route_key_isSet = false;
    m_route_key_isValid = false;

    m_route_selection_expression_isSet = false;
    m_route_selection_expression_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIUpdateApi_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateApi_request::fromJsonObject(QJsonObject json) {

    m_api_key_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_api_key_selection_expression, json[QString("apiKeySelectionExpression")]);
    m_api_key_selection_expression_isSet = !json[QString("apiKeySelectionExpression")].isNull() && m_api_key_selection_expression_isValid;

    m_cors_configuration_isValid = ::OpenAPI::fromJsonValue(m_cors_configuration, json[QString("corsConfiguration")]);
    m_cors_configuration_isSet = !json[QString("corsConfiguration")].isNull() && m_cors_configuration_isValid;

    m_credentials_arn_isValid = ::OpenAPI::fromJsonValue(m_credentials_arn, json[QString("credentialsArn")]);
    m_credentials_arn_isSet = !json[QString("credentialsArn")].isNull() && m_credentials_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disable_schema_validation_isValid = ::OpenAPI::fromJsonValue(m_disable_schema_validation, json[QString("disableSchemaValidation")]);
    m_disable_schema_validation_isSet = !json[QString("disableSchemaValidation")].isNull() && m_disable_schema_validation_isValid;

    m_disable_execute_api_endpoint_isValid = ::OpenAPI::fromJsonValue(m_disable_execute_api_endpoint, json[QString("disableExecuteApiEndpoint")]);
    m_disable_execute_api_endpoint_isSet = !json[QString("disableExecuteApiEndpoint")].isNull() && m_disable_execute_api_endpoint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_route_key_isValid = ::OpenAPI::fromJsonValue(m_route_key, json[QString("routeKey")]);
    m_route_key_isSet = !json[QString("routeKey")].isNull() && m_route_key_isValid;

    m_route_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_route_selection_expression, json[QString("routeSelectionExpression")]);
    m_route_selection_expression_isSet = !json[QString("routeSelectionExpression")].isNull() && m_route_selection_expression_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIUpdateApi_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateApi_request::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_selection_expression_isSet) {
        obj.insert(QString("apiKeySelectionExpression"), ::OpenAPI::toJsonValue(m_api_key_selection_expression));
    }
    if (m_cors_configuration.isSet()) {
        obj.insert(QString("corsConfiguration"), ::OpenAPI::toJsonValue(m_cors_configuration));
    }
    if (m_credentials_arn_isSet) {
        obj.insert(QString("credentialsArn"), ::OpenAPI::toJsonValue(m_credentials_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disable_schema_validation_isSet) {
        obj.insert(QString("disableSchemaValidation"), ::OpenAPI::toJsonValue(m_disable_schema_validation));
    }
    if (m_disable_execute_api_endpoint_isSet) {
        obj.insert(QString("disableExecuteApiEndpoint"), ::OpenAPI::toJsonValue(m_disable_execute_api_endpoint));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_route_key_isSet) {
        obj.insert(QString("routeKey"), ::OpenAPI::toJsonValue(m_route_key));
    }
    if (m_route_selection_expression_isSet) {
        obj.insert(QString("routeSelectionExpression"), ::OpenAPI::toJsonValue(m_route_selection_expression));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIUpdateApi_request::getApiKeySelectionExpression() const {
    return m_api_key_selection_expression;
}
void OAIUpdateApi_request::setApiKeySelectionExpression(const QString &api_key_selection_expression) {
    m_api_key_selection_expression = api_key_selection_expression;
    m_api_key_selection_expression_isSet = true;
}

bool OAIUpdateApi_request::is_api_key_selection_expression_Set() const{
    return m_api_key_selection_expression_isSet;
}

bool OAIUpdateApi_request::is_api_key_selection_expression_Valid() const{
    return m_api_key_selection_expression_isValid;
}

OAICreateApi_request_corsConfiguration OAIUpdateApi_request::getCorsConfiguration() const {
    return m_cors_configuration;
}
void OAIUpdateApi_request::setCorsConfiguration(const OAICreateApi_request_corsConfiguration &cors_configuration) {
    m_cors_configuration = cors_configuration;
    m_cors_configuration_isSet = true;
}

bool OAIUpdateApi_request::is_cors_configuration_Set() const{
    return m_cors_configuration_isSet;
}

bool OAIUpdateApi_request::is_cors_configuration_Valid() const{
    return m_cors_configuration_isValid;
}

QString OAIUpdateApi_request::getCredentialsArn() const {
    return m_credentials_arn;
}
void OAIUpdateApi_request::setCredentialsArn(const QString &credentials_arn) {
    m_credentials_arn = credentials_arn;
    m_credentials_arn_isSet = true;
}

bool OAIUpdateApi_request::is_credentials_arn_Set() const{
    return m_credentials_arn_isSet;
}

bool OAIUpdateApi_request::is_credentials_arn_Valid() const{
    return m_credentials_arn_isValid;
}

QString OAIUpdateApi_request::getDescription() const {
    return m_description;
}
void OAIUpdateApi_request::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUpdateApi_request::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUpdateApi_request::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIUpdateApi_request::isDisableSchemaValidation() const {
    return m_disable_schema_validation;
}
void OAIUpdateApi_request::setDisableSchemaValidation(const bool &disable_schema_validation) {
    m_disable_schema_validation = disable_schema_validation;
    m_disable_schema_validation_isSet = true;
}

bool OAIUpdateApi_request::is_disable_schema_validation_Set() const{
    return m_disable_schema_validation_isSet;
}

bool OAIUpdateApi_request::is_disable_schema_validation_Valid() const{
    return m_disable_schema_validation_isValid;
}

bool OAIUpdateApi_request::isDisableExecuteApiEndpoint() const {
    return m_disable_execute_api_endpoint;
}
void OAIUpdateApi_request::setDisableExecuteApiEndpoint(const bool &disable_execute_api_endpoint) {
    m_disable_execute_api_endpoint = disable_execute_api_endpoint;
    m_disable_execute_api_endpoint_isSet = true;
}

bool OAIUpdateApi_request::is_disable_execute_api_endpoint_Set() const{
    return m_disable_execute_api_endpoint_isSet;
}

bool OAIUpdateApi_request::is_disable_execute_api_endpoint_Valid() const{
    return m_disable_execute_api_endpoint_isValid;
}

QString OAIUpdateApi_request::getName() const {
    return m_name;
}
void OAIUpdateApi_request::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateApi_request::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateApi_request::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateApi_request::getRouteKey() const {
    return m_route_key;
}
void OAIUpdateApi_request::setRouteKey(const QString &route_key) {
    m_route_key = route_key;
    m_route_key_isSet = true;
}

bool OAIUpdateApi_request::is_route_key_Set() const{
    return m_route_key_isSet;
}

bool OAIUpdateApi_request::is_route_key_Valid() const{
    return m_route_key_isValid;
}

QString OAIUpdateApi_request::getRouteSelectionExpression() const {
    return m_route_selection_expression;
}
void OAIUpdateApi_request::setRouteSelectionExpression(const QString &route_selection_expression) {
    m_route_selection_expression = route_selection_expression;
    m_route_selection_expression_isSet = true;
}

bool OAIUpdateApi_request::is_route_selection_expression_Set() const{
    return m_route_selection_expression_isSet;
}

bool OAIUpdateApi_request::is_route_selection_expression_Valid() const{
    return m_route_selection_expression_isValid;
}

QString OAIUpdateApi_request::getTarget() const {
    return m_target;
}
void OAIUpdateApi_request::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIUpdateApi_request::is_target_Set() const{
    return m_target_isSet;
}

bool OAIUpdateApi_request::is_target_Valid() const{
    return m_target_isValid;
}

QString OAIUpdateApi_request::getVersion() const {
    return m_version;
}
void OAIUpdateApi_request::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIUpdateApi_request::is_version_Set() const{
    return m_version_isSet;
}

bool OAIUpdateApi_request::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIUpdateApi_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_schema_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_execute_api_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateApi_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
