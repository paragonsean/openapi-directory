/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApiRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApiRequest::OAICreateApiRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApiRequest::OAICreateApiRequest() {
    this->initializeModel();
}

OAICreateApiRequest::~OAICreateApiRequest() {}

void OAICreateApiRequest::initializeModel() {

    m_api_key_selection_expression_isSet = false;
    m_api_key_selection_expression_isValid = false;

    m_cors_configuration_isSet = false;
    m_cors_configuration_isValid = false;

    m_credentials_arn_isSet = false;
    m_credentials_arn_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disable_schema_validation_isSet = false;
    m_disable_schema_validation_isValid = false;

    m_disable_execute_api_endpoint_isSet = false;
    m_disable_execute_api_endpoint_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_protocol_type_isSet = false;
    m_protocol_type_isValid = false;

    m_route_key_isSet = false;
    m_route_key_isValid = false;

    m_route_selection_expression_isSet = false;
    m_route_selection_expression_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAICreateApiRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApiRequest::fromJsonObject(QJsonObject json) {

    m_api_key_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_api_key_selection_expression, json[QString("ApiKeySelectionExpression")]);
    m_api_key_selection_expression_isSet = !json[QString("ApiKeySelectionExpression")].isNull() && m_api_key_selection_expression_isValid;

    m_cors_configuration_isValid = ::OpenAPI::fromJsonValue(m_cors_configuration, json[QString("CorsConfiguration")]);
    m_cors_configuration_isSet = !json[QString("CorsConfiguration")].isNull() && m_cors_configuration_isValid;

    m_credentials_arn_isValid = ::OpenAPI::fromJsonValue(m_credentials_arn, json[QString("CredentialsArn")]);
    m_credentials_arn_isSet = !json[QString("CredentialsArn")].isNull() && m_credentials_arn_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_disable_schema_validation_isValid = ::OpenAPI::fromJsonValue(m_disable_schema_validation, json[QString("DisableSchemaValidation")]);
    m_disable_schema_validation_isSet = !json[QString("DisableSchemaValidation")].isNull() && m_disable_schema_validation_isValid;

    m_disable_execute_api_endpoint_isValid = ::OpenAPI::fromJsonValue(m_disable_execute_api_endpoint, json[QString("DisableExecuteApiEndpoint")]);
    m_disable_execute_api_endpoint_isSet = !json[QString("DisableExecuteApiEndpoint")].isNull() && m_disable_execute_api_endpoint_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_protocol_type_isValid = ::OpenAPI::fromJsonValue(m_protocol_type, json[QString("ProtocolType")]);
    m_protocol_type_isSet = !json[QString("ProtocolType")].isNull() && m_protocol_type_isValid;

    m_route_key_isValid = ::OpenAPI::fromJsonValue(m_route_key, json[QString("RouteKey")]);
    m_route_key_isSet = !json[QString("RouteKey")].isNull() && m_route_key_isValid;

    m_route_selection_expression_isValid = ::OpenAPI::fromJsonValue(m_route_selection_expression, json[QString("RouteSelectionExpression")]);
    m_route_selection_expression_isSet = !json[QString("RouteSelectionExpression")].isNull() && m_route_selection_expression_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("Target")]);
    m_target_isSet = !json[QString("Target")].isNull() && m_target_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("Version")]);
    m_version_isSet = !json[QString("Version")].isNull() && m_version_isValid;
}

QString OAICreateApiRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApiRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_api_key_selection_expression_isSet) {
        obj.insert(QString("ApiKeySelectionExpression"), ::OpenAPI::toJsonValue(m_api_key_selection_expression));
    }
    if (m_cors_configuration.isSet()) {
        obj.insert(QString("CorsConfiguration"), ::OpenAPI::toJsonValue(m_cors_configuration));
    }
    if (m_credentials_arn_isSet) {
        obj.insert(QString("CredentialsArn"), ::OpenAPI::toJsonValue(m_credentials_arn));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disable_schema_validation_isSet) {
        obj.insert(QString("DisableSchemaValidation"), ::OpenAPI::toJsonValue(m_disable_schema_validation));
    }
    if (m_disable_execute_api_endpoint_isSet) {
        obj.insert(QString("DisableExecuteApiEndpoint"), ::OpenAPI::toJsonValue(m_disable_execute_api_endpoint));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_protocol_type.isSet()) {
        obj.insert(QString("ProtocolType"), ::OpenAPI::toJsonValue(m_protocol_type));
    }
    if (m_route_key_isSet) {
        obj.insert(QString("RouteKey"), ::OpenAPI::toJsonValue(m_route_key));
    }
    if (m_route_selection_expression_isSet) {
        obj.insert(QString("RouteSelectionExpression"), ::OpenAPI::toJsonValue(m_route_selection_expression));
    }
    if (m_tags.isSet()) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_target_isSet) {
        obj.insert(QString("Target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_version_isSet) {
        obj.insert(QString("Version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAICreateApiRequest::getApiKeySelectionExpression() const {
    return m_api_key_selection_expression;
}
void OAICreateApiRequest::setApiKeySelectionExpression(const QString &api_key_selection_expression) {
    m_api_key_selection_expression = api_key_selection_expression;
    m_api_key_selection_expression_isSet = true;
}

bool OAICreateApiRequest::is_api_key_selection_expression_Set() const{
    return m_api_key_selection_expression_isSet;
}

bool OAICreateApiRequest::is_api_key_selection_expression_Valid() const{
    return m_api_key_selection_expression_isValid;
}

OAICreateApiRequest_CorsConfiguration OAICreateApiRequest::getCorsConfiguration() const {
    return m_cors_configuration;
}
void OAICreateApiRequest::setCorsConfiguration(const OAICreateApiRequest_CorsConfiguration &cors_configuration) {
    m_cors_configuration = cors_configuration;
    m_cors_configuration_isSet = true;
}

bool OAICreateApiRequest::is_cors_configuration_Set() const{
    return m_cors_configuration_isSet;
}

bool OAICreateApiRequest::is_cors_configuration_Valid() const{
    return m_cors_configuration_isValid;
}

QString OAICreateApiRequest::getCredentialsArn() const {
    return m_credentials_arn;
}
void OAICreateApiRequest::setCredentialsArn(const QString &credentials_arn) {
    m_credentials_arn = credentials_arn;
    m_credentials_arn_isSet = true;
}

bool OAICreateApiRequest::is_credentials_arn_Set() const{
    return m_credentials_arn_isSet;
}

bool OAICreateApiRequest::is_credentials_arn_Valid() const{
    return m_credentials_arn_isValid;
}

QString OAICreateApiRequest::getDescription() const {
    return m_description;
}
void OAICreateApiRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApiRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApiRequest::is_description_Valid() const{
    return m_description_isValid;
}

bool OAICreateApiRequest::getDisableSchemaValidation() const {
    return m_disable_schema_validation;
}
void OAICreateApiRequest::setDisableSchemaValidation(const bool &disable_schema_validation) {
    m_disable_schema_validation = disable_schema_validation;
    m_disable_schema_validation_isSet = true;
}

bool OAICreateApiRequest::is_disable_schema_validation_Set() const{
    return m_disable_schema_validation_isSet;
}

bool OAICreateApiRequest::is_disable_schema_validation_Valid() const{
    return m_disable_schema_validation_isValid;
}

bool OAICreateApiRequest::getDisableExecuteApiEndpoint() const {
    return m_disable_execute_api_endpoint;
}
void OAICreateApiRequest::setDisableExecuteApiEndpoint(const bool &disable_execute_api_endpoint) {
    m_disable_execute_api_endpoint = disable_execute_api_endpoint;
    m_disable_execute_api_endpoint_isSet = true;
}

bool OAICreateApiRequest::is_disable_execute_api_endpoint_Set() const{
    return m_disable_execute_api_endpoint_isSet;
}

bool OAICreateApiRequest::is_disable_execute_api_endpoint_Valid() const{
    return m_disable_execute_api_endpoint_isValid;
}

QString OAICreateApiRequest::getName() const {
    return m_name;
}
void OAICreateApiRequest::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreateApiRequest::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreateApiRequest::is_name_Valid() const{
    return m_name_isValid;
}

OAIProtocolType OAICreateApiRequest::getProtocolType() const {
    return m_protocol_type;
}
void OAICreateApiRequest::setProtocolType(const OAIProtocolType &protocol_type) {
    m_protocol_type = protocol_type;
    m_protocol_type_isSet = true;
}

bool OAICreateApiRequest::is_protocol_type_Set() const{
    return m_protocol_type_isSet;
}

bool OAICreateApiRequest::is_protocol_type_Valid() const{
    return m_protocol_type_isValid;
}

QString OAICreateApiRequest::getRouteKey() const {
    return m_route_key;
}
void OAICreateApiRequest::setRouteKey(const QString &route_key) {
    m_route_key = route_key;
    m_route_key_isSet = true;
}

bool OAICreateApiRequest::is_route_key_Set() const{
    return m_route_key_isSet;
}

bool OAICreateApiRequest::is_route_key_Valid() const{
    return m_route_key_isValid;
}

QString OAICreateApiRequest::getRouteSelectionExpression() const {
    return m_route_selection_expression;
}
void OAICreateApiRequest::setRouteSelectionExpression(const QString &route_selection_expression) {
    m_route_selection_expression = route_selection_expression;
    m_route_selection_expression_isSet = true;
}

bool OAICreateApiRequest::is_route_selection_expression_Set() const{
    return m_route_selection_expression_isSet;
}

bool OAICreateApiRequest::is_route_selection_expression_Valid() const{
    return m_route_selection_expression_isValid;
}

QMap OAICreateApiRequest::getTags() const {
    return m_tags;
}
void OAICreateApiRequest::setTags(const QMap &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAICreateApiRequest::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAICreateApiRequest::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAICreateApiRequest::getTarget() const {
    return m_target;
}
void OAICreateApiRequest::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAICreateApiRequest::is_target_Set() const{
    return m_target_isSet;
}

bool OAICreateApiRequest::is_target_Valid() const{
    return m_target_isValid;
}

QString OAICreateApiRequest::getVersion() const {
    return m_version;
}
void OAICreateApiRequest::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreateApiRequest::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreateApiRequest::is_version_Valid() const{
    return m_version_isValid;
}

bool OAICreateApiRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_key_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credentials_arn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_schema_validation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_execute_api_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_selection_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApiRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_protocol_type_isValid && true;
}

} // namespace OpenAPI
