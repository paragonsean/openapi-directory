/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICors::OAICors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICors::OAICors() {
    this->initializeModel();
}

OAICors::~OAICors() {}

void OAICors::initializeModel() {

    m_allow_credentials_isSet = false;
    m_allow_credentials_isValid = false;

    m_allow_headers_isSet = false;
    m_allow_headers_isValid = false;

    m_allow_methods_isSet = false;
    m_allow_methods_isValid = false;

    m_allow_origins_isSet = false;
    m_allow_origins_isValid = false;

    m_expose_headers_isSet = false;
    m_expose_headers_isValid = false;

    m_max_age_isSet = false;
    m_max_age_isValid = false;
}

void OAICors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICors::fromJsonObject(QJsonObject json) {

    m_allow_credentials_isValid = ::OpenAPI::fromJsonValue(m_allow_credentials, json[QString("AllowCredentials")]);
    m_allow_credentials_isSet = !json[QString("AllowCredentials")].isNull() && m_allow_credentials_isValid;

    m_allow_headers_isValid = ::OpenAPI::fromJsonValue(m_allow_headers, json[QString("AllowHeaders")]);
    m_allow_headers_isSet = !json[QString("AllowHeaders")].isNull() && m_allow_headers_isValid;

    m_allow_methods_isValid = ::OpenAPI::fromJsonValue(m_allow_methods, json[QString("AllowMethods")]);
    m_allow_methods_isSet = !json[QString("AllowMethods")].isNull() && m_allow_methods_isValid;

    m_allow_origins_isValid = ::OpenAPI::fromJsonValue(m_allow_origins, json[QString("AllowOrigins")]);
    m_allow_origins_isSet = !json[QString("AllowOrigins")].isNull() && m_allow_origins_isValid;

    m_expose_headers_isValid = ::OpenAPI::fromJsonValue(m_expose_headers, json[QString("ExposeHeaders")]);
    m_expose_headers_isSet = !json[QString("ExposeHeaders")].isNull() && m_expose_headers_isValid;

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("MaxAge")]);
    m_max_age_isSet = !json[QString("MaxAge")].isNull() && m_max_age_isValid;
}

QString OAICors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICors::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_credentials_isSet) {
        obj.insert(QString("AllowCredentials"), ::OpenAPI::toJsonValue(m_allow_credentials));
    }
    if (m_allow_headers.isSet()) {
        obj.insert(QString("AllowHeaders"), ::OpenAPI::toJsonValue(m_allow_headers));
    }
    if (m_allow_methods.isSet()) {
        obj.insert(QString("AllowMethods"), ::OpenAPI::toJsonValue(m_allow_methods));
    }
    if (m_allow_origins.isSet()) {
        obj.insert(QString("AllowOrigins"), ::OpenAPI::toJsonValue(m_allow_origins));
    }
    if (m_expose_headers.isSet()) {
        obj.insert(QString("ExposeHeaders"), ::OpenAPI::toJsonValue(m_expose_headers));
    }
    if (m_max_age_isSet) {
        obj.insert(QString("MaxAge"), ::OpenAPI::toJsonValue(m_max_age));
    }
    return obj;
}

bool OAICors::getAllowCredentials() const {
    return m_allow_credentials;
}
void OAICors::setAllowCredentials(const bool &allow_credentials) {
    m_allow_credentials = allow_credentials;
    m_allow_credentials_isSet = true;
}

bool OAICors::is_allow_credentials_Set() const{
    return m_allow_credentials_isSet;
}

bool OAICors::is_allow_credentials_Valid() const{
    return m_allow_credentials_isValid;
}

QList OAICors::getAllowHeaders() const {
    return m_allow_headers;
}
void OAICors::setAllowHeaders(const QList &allow_headers) {
    m_allow_headers = allow_headers;
    m_allow_headers_isSet = true;
}

bool OAICors::is_allow_headers_Set() const{
    return m_allow_headers_isSet;
}

bool OAICors::is_allow_headers_Valid() const{
    return m_allow_headers_isValid;
}

QList OAICors::getAllowMethods() const {
    return m_allow_methods;
}
void OAICors::setAllowMethods(const QList &allow_methods) {
    m_allow_methods = allow_methods;
    m_allow_methods_isSet = true;
}

bool OAICors::is_allow_methods_Set() const{
    return m_allow_methods_isSet;
}

bool OAICors::is_allow_methods_Valid() const{
    return m_allow_methods_isValid;
}

QList OAICors::getAllowOrigins() const {
    return m_allow_origins;
}
void OAICors::setAllowOrigins(const QList &allow_origins) {
    m_allow_origins = allow_origins;
    m_allow_origins_isSet = true;
}

bool OAICors::is_allow_origins_Set() const{
    return m_allow_origins_isSet;
}

bool OAICors::is_allow_origins_Valid() const{
    return m_allow_origins_isValid;
}

QList OAICors::getExposeHeaders() const {
    return m_expose_headers;
}
void OAICors::setExposeHeaders(const QList &expose_headers) {
    m_expose_headers = expose_headers;
    m_expose_headers_isSet = true;
}

bool OAICors::is_expose_headers_Set() const{
    return m_expose_headers_isSet;
}

bool OAICors::is_expose_headers_Valid() const{
    return m_expose_headers_isValid;
}

qint32 OAICors::getMaxAge() const {
    return m_max_age;
}
void OAICors::setMaxAge(const qint32 &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAICors::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAICors::is_max_age_Valid() const{
    return m_max_age_isValid;
}

bool OAICors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_methods.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_origins.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_headers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
