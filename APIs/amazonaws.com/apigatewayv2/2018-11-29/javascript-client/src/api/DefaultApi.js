/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateApiMappingRequest from '../model/CreateApiMappingRequest';
import CreateApiMappingResponse from '../model/CreateApiMappingResponse';
import CreateApiRequest from '../model/CreateApiRequest';
import CreateApiResponse from '../model/CreateApiResponse';
import CreateAuthorizerRequest from '../model/CreateAuthorizerRequest';
import CreateAuthorizerResponse from '../model/CreateAuthorizerResponse';
import CreateDeploymentRequest from '../model/CreateDeploymentRequest';
import CreateDeploymentResponse from '../model/CreateDeploymentResponse';
import CreateDomainNameRequest from '../model/CreateDomainNameRequest';
import CreateDomainNameResponse from '../model/CreateDomainNameResponse';
import CreateIntegrationRequest from '../model/CreateIntegrationRequest';
import CreateIntegrationResponseRequest from '../model/CreateIntegrationResponseRequest';
import CreateIntegrationResponseResponse from '../model/CreateIntegrationResponseResponse';
import CreateIntegrationResult from '../model/CreateIntegrationResult';
import CreateModelRequest from '../model/CreateModelRequest';
import CreateModelResponse from '../model/CreateModelResponse';
import CreateRouteRequest from '../model/CreateRouteRequest';
import CreateRouteResponseRequest from '../model/CreateRouteResponseRequest';
import CreateRouteResponseResponse from '../model/CreateRouteResponseResponse';
import CreateRouteResult from '../model/CreateRouteResult';
import CreateStageRequest from '../model/CreateStageRequest';
import CreateStageResponse from '../model/CreateStageResponse';
import CreateVpcLinkRequest from '../model/CreateVpcLinkRequest';
import CreateVpcLinkResponse from '../model/CreateVpcLinkResponse';
import ExportApiResponse from '../model/ExportApiResponse';
import GetApiMappingResponse from '../model/GetApiMappingResponse';
import GetApiMappingsResponse from '../model/GetApiMappingsResponse';
import GetApiResponse from '../model/GetApiResponse';
import GetApisResponse from '../model/GetApisResponse';
import GetAuthorizerResponse from '../model/GetAuthorizerResponse';
import GetAuthorizersResponse from '../model/GetAuthorizersResponse';
import GetDeploymentResponse from '../model/GetDeploymentResponse';
import GetDeploymentsResponse from '../model/GetDeploymentsResponse';
import GetDomainNameResponse from '../model/GetDomainNameResponse';
import GetDomainNamesResponse from '../model/GetDomainNamesResponse';
import GetIntegrationResponseResponse from '../model/GetIntegrationResponseResponse';
import GetIntegrationResponsesResponse from '../model/GetIntegrationResponsesResponse';
import GetIntegrationResult from '../model/GetIntegrationResult';
import GetIntegrationsResponse from '../model/GetIntegrationsResponse';
import GetModelResponse from '../model/GetModelResponse';
import GetModelTemplateResponse from '../model/GetModelTemplateResponse';
import GetModelsResponse from '../model/GetModelsResponse';
import GetRouteResponseResponse from '../model/GetRouteResponseResponse';
import GetRouteResponsesResponse from '../model/GetRouteResponsesResponse';
import GetRouteResult from '../model/GetRouteResult';
import GetRoutesResponse from '../model/GetRoutesResponse';
import GetStageResponse from '../model/GetStageResponse';
import GetStagesResponse from '../model/GetStagesResponse';
import GetTagsResponse from '../model/GetTagsResponse';
import GetVpcLinkResponse from '../model/GetVpcLinkResponse';
import GetVpcLinksResponse from '../model/GetVpcLinksResponse';
import ImportApiRequest from '../model/ImportApiRequest';
import ImportApiResponse from '../model/ImportApiResponse';
import ReimportApiResponse from '../model/ReimportApiResponse';
import TagResourceRequest from '../model/TagResourceRequest';
import UpdateApiMappingRequest from '../model/UpdateApiMappingRequest';
import UpdateApiMappingResponse from '../model/UpdateApiMappingResponse';
import UpdateApiRequest from '../model/UpdateApiRequest';
import UpdateApiResponse from '../model/UpdateApiResponse';
import UpdateAuthorizerRequest from '../model/UpdateAuthorizerRequest';
import UpdateAuthorizerResponse from '../model/UpdateAuthorizerResponse';
import UpdateDeploymentRequest from '../model/UpdateDeploymentRequest';
import UpdateDeploymentResponse from '../model/UpdateDeploymentResponse';
import UpdateDomainNameRequest from '../model/UpdateDomainNameRequest';
import UpdateDomainNameResponse from '../model/UpdateDomainNameResponse';
import UpdateIntegrationRequest from '../model/UpdateIntegrationRequest';
import UpdateIntegrationResponseRequest from '../model/UpdateIntegrationResponseRequest';
import UpdateIntegrationResponseResponse from '../model/UpdateIntegrationResponseResponse';
import UpdateIntegrationResult from '../model/UpdateIntegrationResult';
import UpdateModelRequest from '../model/UpdateModelRequest';
import UpdateModelResponse from '../model/UpdateModelResponse';
import UpdateRouteRequest from '../model/UpdateRouteRequest';
import UpdateRouteResponseRequest from '../model/UpdateRouteResponseRequest';
import UpdateRouteResponseResponse from '../model/UpdateRouteResponseResponse';
import UpdateRouteResult from '../model/UpdateRouteResult';
import UpdateStageRequest from '../model/UpdateStageRequest';
import UpdateStageResponse from '../model/UpdateStageResponse';
import UpdateVpcLinkRequest from '../model/UpdateVpcLinkRequest';
import UpdateVpcLinkResponse from '../model/UpdateVpcLinkResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-11-29
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApi operation.
     * @callback module:api/DefaultApi~createApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Api resource.
     * @param {module:model/CreateApiRequest} createApiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApiResponse}
     */
    createApi(createApiRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApiRequest;
      // verify the required parameter 'createApiRequest' is set
      if (createApiRequest === undefined || createApiRequest === null) {
        throw new Error("Missing the required parameter 'createApiRequest' when calling createApi");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApiResponse;
      return this.apiClient.callApi(
        '/v2/apis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createApiMapping operation.
     * @callback module:api/DefaultApi~createApiMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateApiMappingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an API mapping.
     * @param {String} domainName The domain name.
     * @param {module:model/CreateApiMappingRequest} createApiMappingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createApiMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateApiMappingResponse}
     */
    createApiMapping(domainName, createApiMappingRequest, opts, callback) {
      opts = opts || {};
      let postBody = createApiMappingRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling createApiMapping");
      }
      // verify the required parameter 'createApiMappingRequest' is set
      if (createApiMappingRequest === undefined || createApiMappingRequest === null) {
        throw new Error("Missing the required parameter 'createApiMappingRequest' when calling createApiMapping");
      }

      let pathParams = {
        'domainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateApiMappingResponse;
      return this.apiClient.callApi(
        '/v2/domainnames/{domainName}/apimappings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAuthorizer operation.
     * @callback module:api/DefaultApi~createAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAuthorizerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Authorizer for an API.
     * @param {String} apiId The API identifier.
     * @param {module:model/CreateAuthorizerRequest} createAuthorizerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAuthorizerResponse}
     */
    createAuthorizer(apiId, createAuthorizerRequest, opts, callback) {
      opts = opts || {};
      let postBody = createAuthorizerRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createAuthorizer");
      }
      // verify the required parameter 'createAuthorizerRequest' is set
      if (createAuthorizerRequest === undefined || createAuthorizerRequest === null) {
        throw new Error("Missing the required parameter 'createAuthorizerRequest' when calling createAuthorizer");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAuthorizerResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/authorizers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDeployment operation.
     * @callback module:api/DefaultApi~createDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDeploymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Deployment for an API.
     * @param {String} apiId The API identifier.
     * @param {module:model/CreateDeploymentRequest} createDeploymentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDeploymentResponse}
     */
    createDeployment(apiId, createDeploymentRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDeploymentRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createDeployment");
      }
      // verify the required parameter 'createDeploymentRequest' is set
      if (createDeploymentRequest === undefined || createDeploymentRequest === null) {
        throw new Error("Missing the required parameter 'createDeploymentRequest' when calling createDeployment");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDeploymentResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/deployments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDomainName operation.
     * @callback module:api/DefaultApi~createDomainNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateDomainNameResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a domain name.
     * @param {module:model/CreateDomainNameRequest} createDomainNameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateDomainNameResponse}
     */
    createDomainName(createDomainNameRequest, opts, callback) {
      opts = opts || {};
      let postBody = createDomainNameRequest;
      // verify the required parameter 'createDomainNameRequest' is set
      if (createDomainNameRequest === undefined || createDomainNameRequest === null) {
        throw new Error("Missing the required parameter 'createDomainNameRequest' when calling createDomainName");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateDomainNameResponse;
      return this.apiClient.callApi(
        '/v2/domainnames', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIntegration operation.
     * @callback module:api/DefaultApi~createIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateIntegrationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an Integration.
     * @param {String} apiId The API identifier.
     * @param {module:model/CreateIntegrationRequest} createIntegrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateIntegrationResult}
     */
    createIntegration(apiId, createIntegrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = createIntegrationRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createIntegration");
      }
      // verify the required parameter 'createIntegrationRequest' is set
      if (createIntegrationRequest === undefined || createIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'createIntegrationRequest' when calling createIntegration");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateIntegrationResult;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createIntegrationResponse operation.
     * @callback module:api/DefaultApi~createIntegrationResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateIntegrationResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an IntegrationResponses.
     * @param {String} apiId The API identifier.
     * @param {String} integrationId The integration ID.
     * @param {module:model/CreateIntegrationResponseRequest} createIntegrationResponseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createIntegrationResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateIntegrationResponseResponse}
     */
    createIntegrationResponse(apiId, integrationId, createIntegrationResponseRequest, opts, callback) {
      opts = opts || {};
      let postBody = createIntegrationResponseRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createIntegrationResponse");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling createIntegrationResponse");
      }
      // verify the required parameter 'createIntegrationResponseRequest' is set
      if (createIntegrationResponseRequest === undefined || createIntegrationResponseRequest === null) {
        throw new Error("Missing the required parameter 'createIntegrationResponseRequest' when calling createIntegrationResponse");
      }

      let pathParams = {
        'apiId': apiId,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateIntegrationResponseResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createModel operation.
     * @callback module:api/DefaultApi~createModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Model for an API.
     * @param {String} apiId The API identifier.
     * @param {module:model/CreateModelRequest} createModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateModelResponse}
     */
    createModel(apiId, createModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = createModelRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createModel");
      }
      // verify the required parameter 'createModelRequest' is set
      if (createModelRequest === undefined || createModelRequest === null) {
        throw new Error("Missing the required parameter 'createModelRequest' when calling createModel");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateModelResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/models', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRoute operation.
     * @callback module:api/DefaultApi~createRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRouteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Route for an API.
     * @param {String} apiId The API identifier.
     * @param {module:model/CreateRouteRequest} createRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRouteResult}
     */
    createRoute(apiId, createRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRouteRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createRoute");
      }
      // verify the required parameter 'createRouteRequest' is set
      if (createRouteRequest === undefined || createRouteRequest === null) {
        throw new Error("Missing the required parameter 'createRouteRequest' when calling createRoute");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRouteResult;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRouteResponse operation.
     * @callback module:api/DefaultApi~createRouteResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRouteResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a RouteResponse for a Route.
     * @param {String} apiId The API identifier.
     * @param {String} routeId The route ID.
     * @param {module:model/CreateRouteResponseRequest} createRouteResponseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createRouteResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRouteResponseResponse}
     */
    createRouteResponse(apiId, routeId, createRouteResponseRequest, opts, callback) {
      opts = opts || {};
      let postBody = createRouteResponseRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createRouteResponse");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling createRouteResponse");
      }
      // verify the required parameter 'createRouteResponseRequest' is set
      if (createRouteResponseRequest === undefined || createRouteResponseRequest === null) {
        throw new Error("Missing the required parameter 'createRouteResponseRequest' when calling createRouteResponse");
      }

      let pathParams = {
        'apiId': apiId,
        'routeId': routeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRouteResponseResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}/routeresponses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createStage operation.
     * @callback module:api/DefaultApi~createStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateStageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Stage for an API.
     * @param {String} apiId The API identifier.
     * @param {module:model/CreateStageRequest} createStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateStageResponse}
     */
    createStage(apiId, createStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = createStageRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling createStage");
      }
      // verify the required parameter 'createStageRequest' is set
      if (createStageRequest === undefined || createStageRequest === null) {
        throw new Error("Missing the required parameter 'createStageRequest' when calling createStage");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateStageResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/stages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVpcLink operation.
     * @callback module:api/DefaultApi~createVpcLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateVpcLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a VPC link.
     * @param {module:model/CreateVpcLinkRequest} createVpcLinkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~createVpcLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateVpcLinkResponse}
     */
    createVpcLink(createVpcLinkRequest, opts, callback) {
      opts = opts || {};
      let postBody = createVpcLinkRequest;
      // verify the required parameter 'createVpcLinkRequest' is set
      if (createVpcLinkRequest === undefined || createVpcLinkRequest === null) {
        throw new Error("Missing the required parameter 'createVpcLinkRequest' when calling createVpcLink");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateVpcLinkResponse;
      return this.apiClient.callApi(
        '/v2/vpclinks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAccessLogSettings operation.
     * @callback module:api/DefaultApi~deleteAccessLogSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.
     * @param {String} apiId The API identifier.
     * @param {String} stageName The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAccessLogSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccessLogSettings(apiId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteAccessLogSettings");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling deleteAccessLogSettings");
      }

      let pathParams = {
        'apiId': apiId,
        'stageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/stages/{stageName}/accesslogsettings', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApi operation.
     * @callback module:api/DefaultApi~deleteApiCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Api resource.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApiCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApi(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteApi");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApiMapping operation.
     * @callback module:api/DefaultApi~deleteApiMappingCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an API mapping.
     * @param {String} apiMappingId The API mapping identifier.
     * @param {String} domainName The domain name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteApiMappingCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteApiMapping(apiMappingId, domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiMappingId' is set
      if (apiMappingId === undefined || apiMappingId === null) {
        throw new Error("Missing the required parameter 'apiMappingId' when calling deleteApiMapping");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteApiMapping");
      }

      let pathParams = {
        'apiMappingId': apiMappingId,
        'domainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/domainnames/{domainName}/apimappings/{apiMappingId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAuthorizer operation.
     * @callback module:api/DefaultApi~deleteAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Authorizer.
     * @param {String} apiId The API identifier.
     * @param {String} authorizerId The authorizer identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAuthorizer(apiId, authorizerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteAuthorizer");
      }
      // verify the required parameter 'authorizerId' is set
      if (authorizerId === undefined || authorizerId === null) {
        throw new Error("Missing the required parameter 'authorizerId' when calling deleteAuthorizer");
      }

      let pathParams = {
        'apiId': apiId,
        'authorizerId': authorizerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/authorizers/{authorizerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCorsConfiguration operation.
     * @callback module:api/DefaultApi~deleteCorsConfigurationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a CORS configuration.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteCorsConfigurationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCorsConfiguration(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteCorsConfiguration");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/cors', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeployment operation.
     * @callback module:api/DefaultApi~deleteDeploymentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Deployment.
     * @param {String} apiId The API identifier.
     * @param {String} deploymentId The deployment ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeployment(apiId, deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteDeployment");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling deleteDeployment");
      }

      let pathParams = {
        'apiId': apiId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/deployments/{deploymentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDomainName operation.
     * @callback module:api/DefaultApi~deleteDomainNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a domain name.
     * @param {String} domainName The domain name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDomainName(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteDomainName");
      }

      let pathParams = {
        'domainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/domainnames/{domainName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegration operation.
     * @callback module:api/DefaultApi~deleteIntegrationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an Integration.
     * @param {String} apiId The API identifier.
     * @param {String} integrationId The integration ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntegration(apiId, integrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteIntegration");
      }

      let pathParams = {
        'apiId': apiId,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations/{integrationId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIntegrationResponse operation.
     * @callback module:api/DefaultApi~deleteIntegrationResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an IntegrationResponses.
     * @param {String} apiId The API identifier.
     * @param {String} integrationId The integration ID.
     * @param {String} integrationResponseId The integration response ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteIntegrationResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIntegrationResponse(apiId, integrationId, integrationResponseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteIntegrationResponse");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling deleteIntegrationResponse");
      }
      // verify the required parameter 'integrationResponseId' is set
      if (integrationResponseId === undefined || integrationResponseId === null) {
        throw new Error("Missing the required parameter 'integrationResponseId' when calling deleteIntegrationResponse");
      }

      let pathParams = {
        'apiId': apiId,
        'integrationId': integrationId,
        'integrationResponseId': integrationResponseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteModel operation.
     * @callback module:api/DefaultApi~deleteModelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Model.
     * @param {String} apiId The API identifier.
     * @param {String} modelId The model ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteModelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteModel(apiId, modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteModel");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling deleteModel");
      }

      let pathParams = {
        'apiId': apiId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/models/{modelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRoute operation.
     * @callback module:api/DefaultApi~deleteRouteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Route.
     * @param {String} apiId The API identifier.
     * @param {String} routeId The route ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRouteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRoute(apiId, routeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteRoute");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling deleteRoute");
      }

      let pathParams = {
        'apiId': apiId,
        'routeId': routeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRouteRequestParameter operation.
     * @callback module:api/DefaultApi~deleteRouteRequestParameterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a route request parameter. Supported only for WebSocket APIs.
     * @param {String} apiId The API identifier.
     * @param {String} requestParameterKey The route request parameter key.
     * @param {String} routeId The route ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRouteRequestParameterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRouteRequestParameter(apiId, requestParameterKey, routeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteRouteRequestParameter");
      }
      // verify the required parameter 'requestParameterKey' is set
      if (requestParameterKey === undefined || requestParameterKey === null) {
        throw new Error("Missing the required parameter 'requestParameterKey' when calling deleteRouteRequestParameter");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling deleteRouteRequestParameter");
      }

      let pathParams = {
        'apiId': apiId,
        'requestParameterKey': requestParameterKey,
        'routeId': routeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}/requestparameters/{requestParameterKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRouteResponse operation.
     * @callback module:api/DefaultApi~deleteRouteResponseCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a RouteResponse.
     * @param {String} apiId The API identifier.
     * @param {String} routeId The route ID.
     * @param {String} routeResponseId The route response ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRouteResponseCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRouteResponse(apiId, routeId, routeResponseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteRouteResponse");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling deleteRouteResponse");
      }
      // verify the required parameter 'routeResponseId' is set
      if (routeResponseId === undefined || routeResponseId === null) {
        throw new Error("Missing the required parameter 'routeResponseId' when calling deleteRouteResponse");
      }

      let pathParams = {
        'apiId': apiId,
        'routeId': routeId,
        'routeResponseId': routeResponseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRouteSettings operation.
     * @callback module:api/DefaultApi~deleteRouteSettingsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the RouteSettings for a stage.
     * @param {String} apiId The API identifier.
     * @param {String} routeKey The route key.
     * @param {String} stageName The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteRouteSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRouteSettings(apiId, routeKey, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteRouteSettings");
      }
      // verify the required parameter 'routeKey' is set
      if (routeKey === undefined || routeKey === null) {
        throw new Error("Missing the required parameter 'routeKey' when calling deleteRouteSettings");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling deleteRouteSettings");
      }

      let pathParams = {
        'apiId': apiId,
        'routeKey': routeKey,
        'stageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/stages/{stageName}/routesettings/{routeKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteStage operation.
     * @callback module:api/DefaultApi~deleteStageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Stage.
     * @param {String} apiId The API identifier.
     * @param {String} stageName The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteStageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStage(apiId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling deleteStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling deleteStage");
      }

      let pathParams = {
        'apiId': apiId,
        'stageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/stages/{stageName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVpcLink operation.
     * @callback module:api/DefaultApi~deleteVpcLinkCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a VPC link.
     * @param {String} vpcLinkId The ID of the VPC link.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~deleteVpcLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    deleteVpcLink(vpcLinkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vpcLinkId' is set
      if (vpcLinkId === undefined || vpcLinkId === null) {
        throw new Error("Missing the required parameter 'vpcLinkId' when calling deleteVpcLink");
      }

      let pathParams = {
        'vpcLinkId': vpcLinkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/vpclinks/{vpcLinkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportApi operation.
     * @callback module:api/DefaultApi~exportApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExportApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} apiId The API identifier.
     * @param {String} outputType The output type of the exported definition file. Valid values are JSON and YAML.
     * @param {String} specification The version of the API specification to use. OAS30, for OpenAPI 3.0, is the only supported value.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [exportVersion] The version of the API Gateway export algorithm. API Gateway uses the latest version by default. Currently, the only supported version is 1.0.
     * @param {Boolean} [includeExtensions] Specifies whether to include <a href=\"https://docs.aws.amazon.com//apigateway/latest/developerguide/api-gateway-swagger-extensions.html\">API Gateway extensions</a> in the exported API definition. API Gateway extensions are included by default.
     * @param {String} [stageName] The name of the API stage to export. If you don't specify this property, a representation of the latest API configuration is exported.
     * @param {module:api/DefaultApi~exportApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExportApiResponse}
     */
    exportApi(apiId, outputType, specification, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling exportApi");
      }
      // verify the required parameter 'outputType' is set
      if (outputType === undefined || outputType === null) {
        throw new Error("Missing the required parameter 'outputType' when calling exportApi");
      }
      // verify the required parameter 'specification' is set
      if (specification === undefined || specification === null) {
        throw new Error("Missing the required parameter 'specification' when calling exportApi");
      }

      let pathParams = {
        'apiId': apiId,
        'specification': specification
      };
      let queryParams = {
        'exportVersion': opts['exportVersion'],
        'includeExtensions': opts['includeExtensions'],
        'outputType': outputType,
        'stageName': opts['stageName']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExportApiResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/exports/{specification}#outputType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApi operation.
     * @callback module:api/DefaultApi~getApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Api resource.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApiResponse}
     */
    getApi(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getApi");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApiResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiMapping operation.
     * @callback module:api/DefaultApi~getApiMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApiMappingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an API mapping.
     * @param {String} apiMappingId The API mapping identifier.
     * @param {String} domainName The domain name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getApiMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApiMappingResponse}
     */
    getApiMapping(apiMappingId, domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiMappingId' is set
      if (apiMappingId === undefined || apiMappingId === null) {
        throw new Error("Missing the required parameter 'apiMappingId' when calling getApiMapping");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getApiMapping");
      }

      let pathParams = {
        'apiMappingId': apiMappingId,
        'domainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApiMappingResponse;
      return this.apiClient.callApi(
        '/v2/domainnames/{domainName}/apimappings/{apiMappingId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiMappings operation.
     * @callback module:api/DefaultApi~getApiMappingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApiMappingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets API mappings.
     * @param {String} domainName The domain name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getApiMappingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApiMappingsResponse}
     */
    getApiMappings(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getApiMappings");
      }

      let pathParams = {
        'domainName': domainName
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApiMappingsResponse;
      return this.apiClient.callApi(
        '/v2/domainnames/{domainName}/apimappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApis operation.
     * @callback module:api/DefaultApi~getApisCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetApisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a collection of Api resources.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getApisCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetApisResponse}
     */
    getApis(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetApisResponse;
      return this.apiClient.callApi(
        '/v2/apis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizer operation.
     * @callback module:api/DefaultApi~getAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthorizerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Authorizer.
     * @param {String} apiId The API identifier.
     * @param {String} authorizerId The authorizer identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthorizerResponse}
     */
    getAuthorizer(apiId, authorizerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getAuthorizer");
      }
      // verify the required parameter 'authorizerId' is set
      if (authorizerId === undefined || authorizerId === null) {
        throw new Error("Missing the required parameter 'authorizerId' when calling getAuthorizer");
      }

      let pathParams = {
        'apiId': apiId,
        'authorizerId': authorizerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuthorizerResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/authorizers/{authorizerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAuthorizers operation.
     * @callback module:api/DefaultApi~getAuthorizersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAuthorizersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Authorizers for an API.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getAuthorizersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAuthorizersResponse}
     */
    getAuthorizers(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getAuthorizers");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetAuthorizersResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/authorizers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployment operation.
     * @callback module:api/DefaultApi~getDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeploymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Deployment.
     * @param {String} apiId The API identifier.
     * @param {String} deploymentId The deployment ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeploymentResponse}
     */
    getDeployment(apiId, deploymentId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getDeployment");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling getDeployment");
      }

      let pathParams = {
        'apiId': apiId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeploymentResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/deployments/{deploymentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeployments operation.
     * @callback module:api/DefaultApi~getDeploymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDeploymentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Deployments for an API.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getDeploymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDeploymentsResponse}
     */
    getDeployments(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getDeployments");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDeploymentsResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/deployments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainName operation.
     * @callback module:api/DefaultApi~getDomainNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainNameResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a domain name.
     * @param {String} domainName The domain name.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainNameResponse}
     */
    getDomainName(domainName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getDomainName");
      }

      let pathParams = {
        'domainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDomainNameResponse;
      return this.apiClient.callApi(
        '/v2/domainnames/{domainName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDomainNames operation.
     * @callback module:api/DefaultApi~getDomainNamesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomainNamesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the domain names for an AWS account.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getDomainNamesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomainNamesResponse}
     */
    getDomainNames(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDomainNamesResponse;
      return this.apiClient.callApi(
        '/v2/domainnames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegration operation.
     * @callback module:api/DefaultApi~getIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIntegrationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an Integration.
     * @param {String} apiId The API identifier.
     * @param {String} integrationId The integration ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIntegrationResult}
     */
    getIntegration(apiId, integrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getIntegration");
      }

      let pathParams = {
        'apiId': apiId,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetIntegrationResult;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations/{integrationId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrationResponse operation.
     * @callback module:api/DefaultApi~getIntegrationResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIntegrationResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an IntegrationResponses.
     * @param {String} apiId The API identifier.
     * @param {String} integrationId The integration ID.
     * @param {String} integrationResponseId The integration response ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getIntegrationResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIntegrationResponseResponse}
     */
    getIntegrationResponse(apiId, integrationId, integrationResponseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getIntegrationResponse");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getIntegrationResponse");
      }
      // verify the required parameter 'integrationResponseId' is set
      if (integrationResponseId === undefined || integrationResponseId === null) {
        throw new Error("Missing the required parameter 'integrationResponseId' when calling getIntegrationResponse");
      }

      let pathParams = {
        'apiId': apiId,
        'integrationId': integrationId,
        'integrationResponseId': integrationResponseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetIntegrationResponseResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrationResponses operation.
     * @callback module:api/DefaultApi~getIntegrationResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIntegrationResponsesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the IntegrationResponses for an Integration.
     * @param {String} apiId The API identifier.
     * @param {String} integrationId The integration ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getIntegrationResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIntegrationResponsesResponse}
     */
    getIntegrationResponses(apiId, integrationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getIntegrationResponses");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling getIntegrationResponses");
      }

      let pathParams = {
        'apiId': apiId,
        'integrationId': integrationId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetIntegrationResponsesResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIntegrations operation.
     * @callback module:api/DefaultApi~getIntegrationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetIntegrationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Integrations for an API.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getIntegrationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetIntegrationsResponse}
     */
    getIntegrations(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getIntegrations");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetIntegrationsResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModel operation.
     * @callback module:api/DefaultApi~getModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Model.
     * @param {String} apiId The API identifier.
     * @param {String} modelId The model ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelResponse}
     */
    getModel(apiId, modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getModel");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getModel");
      }

      let pathParams = {
        'apiId': apiId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetModelResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/models/{modelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModelTemplate operation.
     * @callback module:api/DefaultApi~getModelTemplateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelTemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a model template.
     * @param {String} apiId The API identifier.
     * @param {String} modelId The model ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getModelTemplateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelTemplateResponse}
     */
    getModelTemplate(apiId, modelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getModelTemplate");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling getModelTemplate");
      }

      let pathParams = {
        'apiId': apiId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetModelTemplateResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/models/{modelId}/template', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getModels operation.
     * @callback module:api/DefaultApi~getModelsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetModelsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Models for an API.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getModelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetModelsResponse}
     */
    getModels(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getModels");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetModelsResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoute operation.
     * @callback module:api/DefaultApi~getRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRouteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Route.
     * @param {String} apiId The API identifier.
     * @param {String} routeId The route ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRouteResult}
     */
    getRoute(apiId, routeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getRoute");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling getRoute");
      }

      let pathParams = {
        'apiId': apiId,
        'routeId': routeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRouteResult;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRouteResponse operation.
     * @callback module:api/DefaultApi~getRouteResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRouteResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a RouteResponse.
     * @param {String} apiId The API identifier.
     * @param {String} routeId The route ID.
     * @param {String} routeResponseId The route response ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getRouteResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRouteResponseResponse}
     */
    getRouteResponse(apiId, routeId, routeResponseId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getRouteResponse");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling getRouteResponse");
      }
      // verify the required parameter 'routeResponseId' is set
      if (routeResponseId === undefined || routeResponseId === null) {
        throw new Error("Missing the required parameter 'routeResponseId' when calling getRouteResponse");
      }

      let pathParams = {
        'apiId': apiId,
        'routeId': routeId,
        'routeResponseId': routeResponseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRouteResponseResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRouteResponses operation.
     * @callback module:api/DefaultApi~getRouteResponsesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRouteResponsesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the RouteResponses for a Route.
     * @param {String} apiId The API identifier.
     * @param {String} routeId The route ID.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getRouteResponsesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRouteResponsesResponse}
     */
    getRouteResponses(apiId, routeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getRouteResponses");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling getRouteResponses");
      }

      let pathParams = {
        'apiId': apiId,
        'routeId': routeId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRouteResponsesResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}/routeresponses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRoutes operation.
     * @callback module:api/DefaultApi~getRoutesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetRoutesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Routes for an API.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getRoutesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetRoutesResponse}
     */
    getRoutes(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getRoutes");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetRoutesResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStage operation.
     * @callback module:api/DefaultApi~getStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Stage.
     * @param {String} apiId The API identifier.
     * @param {String} stageName The stage name. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStageResponse}
     */
    getStage(apiId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling getStage");
      }

      let pathParams = {
        'apiId': apiId,
        'stageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStageResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/stages/{stageName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStages operation.
     * @callback module:api/DefaultApi~getStagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetStagesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Stages for an API.
     * @param {String} apiId The API identifier.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getStagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetStagesResponse}
     */
    getStages(apiId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling getStages");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetStagesResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/stages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTags operation.
     * @callback module:api/DefaultApi~getTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTagsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a collection of Tag resources.
     * @param {String} resourceArn The resource ARN for the tag.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTagsResponse}
     */
    getTags(resourceArn, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling getTags");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTagsResponse;
      return this.apiClient.callApi(
        '/v2/tags/{resource-arn}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVpcLink operation.
     * @callback module:api/DefaultApi~getVpcLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVpcLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a VPC link.
     * @param {String} vpcLinkId The ID of the VPC link.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~getVpcLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVpcLinkResponse}
     */
    getVpcLink(vpcLinkId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'vpcLinkId' is set
      if (vpcLinkId === undefined || vpcLinkId === null) {
        throw new Error("Missing the required parameter 'vpcLinkId' when calling getVpcLink");
      }

      let pathParams = {
        'vpcLinkId': vpcLinkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetVpcLinkResponse;
      return this.apiClient.callApi(
        '/v2/vpclinks/{vpcLinkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVpcLinks operation.
     * @callback module:api/DefaultApi~getVpcLinksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetVpcLinksResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a collection of VPC links.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [maxResults] The maximum number of elements to be returned for this resource.
     * @param {String} [nextToken] The next page of elements from this collection. Not valid for the last element of the collection.
     * @param {module:api/DefaultApi~getVpcLinksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetVpcLinksResponse}
     */
    getVpcLinks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'nextToken': opts['nextToken']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetVpcLinksResponse;
      return this.apiClient.callApi(
        '/v2/vpclinks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the importApi operation.
     * @callback module:api/DefaultApi~importApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImportApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Imports an API.
     * @param {module:model/ImportApiRequest} importApiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [basepath] Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html\">Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs.
     * @param {Boolean} [failOnWarnings] Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.
     * @param {module:api/DefaultApi~importApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImportApiResponse}
     */
    importApi(importApiRequest, opts, callback) {
      opts = opts || {};
      let postBody = importApiRequest;
      // verify the required parameter 'importApiRequest' is set
      if (importApiRequest === undefined || importApiRequest === null) {
        throw new Error("Missing the required parameter 'importApiRequest' when calling importApi");
      }

      let pathParams = {
      };
      let queryParams = {
        'basepath': opts['basepath'],
        'failOnWarnings': opts['failOnWarnings']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImportApiResponse;
      return this.apiClient.callApi(
        '/v2/apis', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reimportApi operation.
     * @callback module:api/DefaultApi~reimportApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReimportApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Puts an Api resource.
     * @param {String} apiId The API identifier.
     * @param {module:model/ImportApiRequest} importApiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {String} [basepath] Specifies how to interpret the base path of the API during import. Valid values are ignore, prepend, and split. The default value is ignore. To learn more, see <a href=\"https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api-basePath.html\">Set the OpenAPI basePath Property</a>. Supported only for HTTP APIs.
     * @param {Boolean} [failOnWarnings] Specifies whether to rollback the API creation when a warning is encountered. By default, API creation continues if a warning is encountered.
     * @param {module:api/DefaultApi~reimportApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReimportApiResponse}
     */
    reimportApi(apiId, importApiRequest, opts, callback) {
      opts = opts || {};
      let postBody = importApiRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling reimportApi");
      }
      // verify the required parameter 'importApiRequest' is set
      if (importApiRequest === undefined || importApiRequest === null) {
        throw new Error("Missing the required parameter 'importApiRequest' when calling reimportApi");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
        'basepath': opts['basepath'],
        'failOnWarnings': opts['failOnWarnings']
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReimportApiResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetAuthorizersCache operation.
     * @callback module:api/DefaultApi~resetAuthorizersCacheCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.
     * @param {String} apiId The API identifier.
     * @param {String} stageName The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~resetAuthorizersCacheCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetAuthorizersCache(apiId, stageName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling resetAuthorizersCache");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling resetAuthorizersCache");
      }

      let pathParams = {
        'apiId': apiId,
        'stageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/stages/{stageName}/cache/authorizers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagResource operation.
     * @callback module:api/DefaultApi~tagResourceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new Tag resource to represent a tag.
     * @param {String} resourceArn The resource ARN for the tag.
     * @param {module:model/TagResourceRequest} tagResourceRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~tagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    tagResource(resourceArn, tagResourceRequest, opts, callback) {
      opts = opts || {};
      let postBody = tagResourceRequest;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling tagResource");
      }
      // verify the required parameter 'tagResourceRequest' is set
      if (tagResourceRequest === undefined || tagResourceRequest === null) {
        throw new Error("Missing the required parameter 'tagResourceRequest' when calling tagResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/tags/{resource-arn}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the untagResource operation.
     * @callback module:api/DefaultApi~untagResourceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Tag.
     * @param {String} resourceArn The resource ARN for the tag.
     * @param {Array.<String>} tagKeys The Tag keys to delete
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~untagResourceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    untagResource(resourceArn, tagKeys, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resourceArn' is set
      if (resourceArn === undefined || resourceArn === null) {
        throw new Error("Missing the required parameter 'resourceArn' when calling untagResource");
      }
      // verify the required parameter 'tagKeys' is set
      if (tagKeys === undefined || tagKeys === null) {
        throw new Error("Missing the required parameter 'tagKeys' when calling untagResource");
      }

      let pathParams = {
        'resource-arn': resourceArn
      };
      let queryParams = {
        'tagKeys': this.apiClient.buildCollectionParam(tagKeys, 'multi')
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/tags/{resource-arn}#tagKeys', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApi operation.
     * @callback module:api/DefaultApi~updateApiCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApiResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Api resource.
     * @param {String} apiId The API identifier.
     * @param {module:model/UpdateApiRequest} updateApiRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApiCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApiResponse}
     */
    updateApi(apiId, updateApiRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateApi");
      }
      // verify the required parameter 'updateApiRequest' is set
      if (updateApiRequest === undefined || updateApiRequest === null) {
        throw new Error("Missing the required parameter 'updateApiRequest' when calling updateApi");
      }

      let pathParams = {
        'apiId': apiId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApiResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateApiMapping operation.
     * @callback module:api/DefaultApi~updateApiMappingCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateApiMappingResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The API mapping.
     * @param {String} apiMappingId The API mapping identifier.
     * @param {String} domainName The domain name.
     * @param {module:model/UpdateApiMappingRequest} updateApiMappingRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateApiMappingCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateApiMappingResponse}
     */
    updateApiMapping(apiMappingId, domainName, updateApiMappingRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateApiMappingRequest;
      // verify the required parameter 'apiMappingId' is set
      if (apiMappingId === undefined || apiMappingId === null) {
        throw new Error("Missing the required parameter 'apiMappingId' when calling updateApiMapping");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateApiMapping");
      }
      // verify the required parameter 'updateApiMappingRequest' is set
      if (updateApiMappingRequest === undefined || updateApiMappingRequest === null) {
        throw new Error("Missing the required parameter 'updateApiMappingRequest' when calling updateApiMapping");
      }

      let pathParams = {
        'apiMappingId': apiMappingId,
        'domainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateApiMappingResponse;
      return this.apiClient.callApi(
        '/v2/domainnames/{domainName}/apimappings/{apiMappingId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAuthorizer operation.
     * @callback module:api/DefaultApi~updateAuthorizerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAuthorizerResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Authorizer.
     * @param {String} apiId The API identifier.
     * @param {String} authorizerId The authorizer identifier.
     * @param {module:model/UpdateAuthorizerRequest} updateAuthorizerRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateAuthorizerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAuthorizerResponse}
     */
    updateAuthorizer(apiId, authorizerId, updateAuthorizerRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateAuthorizerRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateAuthorizer");
      }
      // verify the required parameter 'authorizerId' is set
      if (authorizerId === undefined || authorizerId === null) {
        throw new Error("Missing the required parameter 'authorizerId' when calling updateAuthorizer");
      }
      // verify the required parameter 'updateAuthorizerRequest' is set
      if (updateAuthorizerRequest === undefined || updateAuthorizerRequest === null) {
        throw new Error("Missing the required parameter 'updateAuthorizerRequest' when calling updateAuthorizer");
      }

      let pathParams = {
        'apiId': apiId,
        'authorizerId': authorizerId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAuthorizerResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/authorizers/{authorizerId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeployment operation.
     * @callback module:api/DefaultApi~updateDeploymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDeploymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Deployment.
     * @param {String} apiId The API identifier.
     * @param {String} deploymentId The deployment ID.
     * @param {module:model/UpdateDeploymentRequest} updateDeploymentRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDeploymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDeploymentResponse}
     */
    updateDeployment(apiId, deploymentId, updateDeploymentRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDeploymentRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateDeployment");
      }
      // verify the required parameter 'deploymentId' is set
      if (deploymentId === undefined || deploymentId === null) {
        throw new Error("Missing the required parameter 'deploymentId' when calling updateDeployment");
      }
      // verify the required parameter 'updateDeploymentRequest' is set
      if (updateDeploymentRequest === undefined || updateDeploymentRequest === null) {
        throw new Error("Missing the required parameter 'updateDeploymentRequest' when calling updateDeployment");
      }

      let pathParams = {
        'apiId': apiId,
        'deploymentId': deploymentId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDeploymentResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/deployments/{deploymentId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDomainName operation.
     * @callback module:api/DefaultApi~updateDomainNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateDomainNameResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a domain name.
     * @param {String} domainName The domain name.
     * @param {module:model/UpdateDomainNameRequest} updateDomainNameRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateDomainNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateDomainNameResponse}
     */
    updateDomainName(domainName, updateDomainNameRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateDomainNameRequest;
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateDomainName");
      }
      // verify the required parameter 'updateDomainNameRequest' is set
      if (updateDomainNameRequest === undefined || updateDomainNameRequest === null) {
        throw new Error("Missing the required parameter 'updateDomainNameRequest' when calling updateDomainName");
      }

      let pathParams = {
        'domainName': domainName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateDomainNameResponse;
      return this.apiClient.callApi(
        '/v2/domainnames/{domainName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIntegration operation.
     * @callback module:api/DefaultApi~updateIntegrationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateIntegrationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Integration.
     * @param {String} apiId The API identifier.
     * @param {String} integrationId The integration ID.
     * @param {module:model/UpdateIntegrationRequest} updateIntegrationRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIntegrationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateIntegrationResult}
     */
    updateIntegration(apiId, integrationId, updateIntegrationRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateIntegrationRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateIntegration");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateIntegration");
      }
      // verify the required parameter 'updateIntegrationRequest' is set
      if (updateIntegrationRequest === undefined || updateIntegrationRequest === null) {
        throw new Error("Missing the required parameter 'updateIntegrationRequest' when calling updateIntegration");
      }

      let pathParams = {
        'apiId': apiId,
        'integrationId': integrationId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateIntegrationResult;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations/{integrationId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateIntegrationResponse operation.
     * @callback module:api/DefaultApi~updateIntegrationResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateIntegrationResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an IntegrationResponses.
     * @param {String} apiId The API identifier.
     * @param {String} integrationId The integration ID.
     * @param {String} integrationResponseId The integration response ID.
     * @param {module:model/UpdateIntegrationResponseRequest} updateIntegrationResponseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateIntegrationResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateIntegrationResponseResponse}
     */
    updateIntegrationResponse(apiId, integrationId, integrationResponseId, updateIntegrationResponseRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateIntegrationResponseRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateIntegrationResponse");
      }
      // verify the required parameter 'integrationId' is set
      if (integrationId === undefined || integrationId === null) {
        throw new Error("Missing the required parameter 'integrationId' when calling updateIntegrationResponse");
      }
      // verify the required parameter 'integrationResponseId' is set
      if (integrationResponseId === undefined || integrationResponseId === null) {
        throw new Error("Missing the required parameter 'integrationResponseId' when calling updateIntegrationResponse");
      }
      // verify the required parameter 'updateIntegrationResponseRequest' is set
      if (updateIntegrationResponseRequest === undefined || updateIntegrationResponseRequest === null) {
        throw new Error("Missing the required parameter 'updateIntegrationResponseRequest' when calling updateIntegrationResponse");
      }

      let pathParams = {
        'apiId': apiId,
        'integrationId': integrationId,
        'integrationResponseId': integrationResponseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateIntegrationResponseResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/integrations/{integrationId}/integrationresponses/{integrationResponseId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateModel operation.
     * @callback module:api/DefaultApi~updateModelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateModelResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Model.
     * @param {String} apiId The API identifier.
     * @param {String} modelId The model ID.
     * @param {module:model/UpdateModelRequest} updateModelRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateModelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateModelResponse}
     */
    updateModel(apiId, modelId, updateModelRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateModelRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateModel");
      }
      // verify the required parameter 'modelId' is set
      if (modelId === undefined || modelId === null) {
        throw new Error("Missing the required parameter 'modelId' when calling updateModel");
      }
      // verify the required parameter 'updateModelRequest' is set
      if (updateModelRequest === undefined || updateModelRequest === null) {
        throw new Error("Missing the required parameter 'updateModelRequest' when calling updateModel");
      }

      let pathParams = {
        'apiId': apiId,
        'modelId': modelId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateModelResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/models/{modelId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRoute operation.
     * @callback module:api/DefaultApi~updateRouteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRouteResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Route.
     * @param {String} apiId The API identifier.
     * @param {String} routeId The route ID.
     * @param {module:model/UpdateRouteRequest} updateRouteRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRouteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRouteResult}
     */
    updateRoute(apiId, routeId, updateRouteRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRouteRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateRoute");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling updateRoute");
      }
      // verify the required parameter 'updateRouteRequest' is set
      if (updateRouteRequest === undefined || updateRouteRequest === null) {
        throw new Error("Missing the required parameter 'updateRouteRequest' when calling updateRoute");
      }

      let pathParams = {
        'apiId': apiId,
        'routeId': routeId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRouteResult;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRouteResponse operation.
     * @callback module:api/DefaultApi~updateRouteResponseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateRouteResponseResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a RouteResponse.
     * @param {String} apiId The API identifier.
     * @param {String} routeId The route ID.
     * @param {String} routeResponseId The route response ID.
     * @param {module:model/UpdateRouteResponseRequest} updateRouteResponseRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateRouteResponseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateRouteResponseResponse}
     */
    updateRouteResponse(apiId, routeId, routeResponseId, updateRouteResponseRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateRouteResponseRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateRouteResponse");
      }
      // verify the required parameter 'routeId' is set
      if (routeId === undefined || routeId === null) {
        throw new Error("Missing the required parameter 'routeId' when calling updateRouteResponse");
      }
      // verify the required parameter 'routeResponseId' is set
      if (routeResponseId === undefined || routeResponseId === null) {
        throw new Error("Missing the required parameter 'routeResponseId' when calling updateRouteResponse");
      }
      // verify the required parameter 'updateRouteResponseRequest' is set
      if (updateRouteResponseRequest === undefined || updateRouteResponseRequest === null) {
        throw new Error("Missing the required parameter 'updateRouteResponseRequest' when calling updateRouteResponse");
      }

      let pathParams = {
        'apiId': apiId,
        'routeId': routeId,
        'routeResponseId': routeResponseId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateRouteResponseResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/routes/{routeId}/routeresponses/{routeResponseId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateStage operation.
     * @callback module:api/DefaultApi~updateStageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateStageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Stage.
     * @param {String} apiId The API identifier.
     * @param {String} stageName The stage name. Stage names can contain only alphanumeric characters, hyphens, and underscores, or be $default. Maximum length is 128 characters.
     * @param {module:model/UpdateStageRequest} updateStageRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateStageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateStageResponse}
     */
    updateStage(apiId, stageName, updateStageRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateStageRequest;
      // verify the required parameter 'apiId' is set
      if (apiId === undefined || apiId === null) {
        throw new Error("Missing the required parameter 'apiId' when calling updateStage");
      }
      // verify the required parameter 'stageName' is set
      if (stageName === undefined || stageName === null) {
        throw new Error("Missing the required parameter 'stageName' when calling updateStage");
      }
      // verify the required parameter 'updateStageRequest' is set
      if (updateStageRequest === undefined || updateStageRequest === null) {
        throw new Error("Missing the required parameter 'updateStageRequest' when calling updateStage");
      }

      let pathParams = {
        'apiId': apiId,
        'stageName': stageName
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateStageResponse;
      return this.apiClient.callApi(
        '/v2/apis/{apiId}/stages/{stageName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateVpcLink operation.
     * @callback module:api/DefaultApi~updateVpcLinkCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateVpcLinkResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a VPC link.
     * @param {String} vpcLinkId The ID of the VPC link.
     * @param {module:model/UpdateVpcLinkRequest} updateVpcLinkRequest 
     * @param {Object} opts Optional parameters
     * @param {String} [xAmzContentSha256] 
     * @param {String} [xAmzDate] 
     * @param {String} [xAmzAlgorithm] 
     * @param {String} [xAmzCredential] 
     * @param {String} [xAmzSecurityToken] 
     * @param {String} [xAmzSignature] 
     * @param {String} [xAmzSignedHeaders] 
     * @param {module:api/DefaultApi~updateVpcLinkCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateVpcLinkResponse}
     */
    updateVpcLink(vpcLinkId, updateVpcLinkRequest, opts, callback) {
      opts = opts || {};
      let postBody = updateVpcLinkRequest;
      // verify the required parameter 'vpcLinkId' is set
      if (vpcLinkId === undefined || vpcLinkId === null) {
        throw new Error("Missing the required parameter 'vpcLinkId' when calling updateVpcLink");
      }
      // verify the required parameter 'updateVpcLinkRequest' is set
      if (updateVpcLinkRequest === undefined || updateVpcLinkRequest === null) {
        throw new Error("Missing the required parameter 'updateVpcLinkRequest' when calling updateVpcLink");
      }

      let pathParams = {
        'vpcLinkId': vpcLinkId
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Amz-Content-Sha256': opts['xAmzContentSha256'],
        'X-Amz-Date': opts['xAmzDate'],
        'X-Amz-Algorithm': opts['xAmzAlgorithm'],
        'X-Amz-Credential': opts['xAmzCredential'],
        'X-Amz-Security-Token': opts['xAmzSecurityToken'],
        'X-Amz-Signature': opts['xAmzSignature'],
        'X-Amz-SignedHeaders': opts['xAmzSignedHeaders']
      };
      let formParams = {
      };

      let authNames = ['hmac'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateVpcLinkResponse;
      return this.apiClient.callApi(
        '/v2/vpclinks/{vpcLinkId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
