/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonApiGatewayV2);
  }
}(this, function(expect, AmazonApiGatewayV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonApiGatewayV2.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('createApi', function() {
      it('should call createApi successfully', function(done) {
        //uncomment below and update the code to test createApi
        //instance.createApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createApiMapping', function() {
      it('should call createApiMapping successfully', function(done) {
        //uncomment below and update the code to test createApiMapping
        //instance.createApiMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createAuthorizer', function() {
      it('should call createAuthorizer successfully', function(done) {
        //uncomment below and update the code to test createAuthorizer
        //instance.createAuthorizer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDeployment', function() {
      it('should call createDeployment successfully', function(done) {
        //uncomment below and update the code to test createDeployment
        //instance.createDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createDomainName', function() {
      it('should call createDomainName successfully', function(done) {
        //uncomment below and update the code to test createDomainName
        //instance.createDomainName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIntegration', function() {
      it('should call createIntegration successfully', function(done) {
        //uncomment below and update the code to test createIntegration
        //instance.createIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createIntegrationResponse', function() {
      it('should call createIntegrationResponse successfully', function(done) {
        //uncomment below and update the code to test createIntegrationResponse
        //instance.createIntegrationResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createModel', function() {
      it('should call createModel successfully', function(done) {
        //uncomment below and update the code to test createModel
        //instance.createModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRoute', function() {
      it('should call createRoute successfully', function(done) {
        //uncomment below and update the code to test createRoute
        //instance.createRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createRouteResponse', function() {
      it('should call createRouteResponse successfully', function(done) {
        //uncomment below and update the code to test createRouteResponse
        //instance.createRouteResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createStage', function() {
      it('should call createStage successfully', function(done) {
        //uncomment below and update the code to test createStage
        //instance.createStage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createVpcLink', function() {
      it('should call createVpcLink successfully', function(done) {
        //uncomment below and update the code to test createVpcLink
        //instance.createVpcLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAccessLogSettings', function() {
      it('should call deleteAccessLogSettings successfully', function(done) {
        //uncomment below and update the code to test deleteAccessLogSettings
        //instance.deleteAccessLogSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApi', function() {
      it('should call deleteApi successfully', function(done) {
        //uncomment below and update the code to test deleteApi
        //instance.deleteApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApiMapping', function() {
      it('should call deleteApiMapping successfully', function(done) {
        //uncomment below and update the code to test deleteApiMapping
        //instance.deleteApiMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAuthorizer', function() {
      it('should call deleteAuthorizer successfully', function(done) {
        //uncomment below and update the code to test deleteAuthorizer
        //instance.deleteAuthorizer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCorsConfiguration', function() {
      it('should call deleteCorsConfiguration successfully', function(done) {
        //uncomment below and update the code to test deleteCorsConfiguration
        //instance.deleteCorsConfiguration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDeployment', function() {
      it('should call deleteDeployment successfully', function(done) {
        //uncomment below and update the code to test deleteDeployment
        //instance.deleteDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDomainName', function() {
      it('should call deleteDomainName successfully', function(done) {
        //uncomment below and update the code to test deleteDomainName
        //instance.deleteDomainName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIntegration', function() {
      it('should call deleteIntegration successfully', function(done) {
        //uncomment below and update the code to test deleteIntegration
        //instance.deleteIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteIntegrationResponse', function() {
      it('should call deleteIntegrationResponse successfully', function(done) {
        //uncomment below and update the code to test deleteIntegrationResponse
        //instance.deleteIntegrationResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteModel', function() {
      it('should call deleteModel successfully', function(done) {
        //uncomment below and update the code to test deleteModel
        //instance.deleteModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRoute', function() {
      it('should call deleteRoute successfully', function(done) {
        //uncomment below and update the code to test deleteRoute
        //instance.deleteRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRouteRequestParameter', function() {
      it('should call deleteRouteRequestParameter successfully', function(done) {
        //uncomment below and update the code to test deleteRouteRequestParameter
        //instance.deleteRouteRequestParameter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRouteResponse', function() {
      it('should call deleteRouteResponse successfully', function(done) {
        //uncomment below and update the code to test deleteRouteResponse
        //instance.deleteRouteResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRouteSettings', function() {
      it('should call deleteRouteSettings successfully', function(done) {
        //uncomment below and update the code to test deleteRouteSettings
        //instance.deleteRouteSettings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteStage', function() {
      it('should call deleteStage successfully', function(done) {
        //uncomment below and update the code to test deleteStage
        //instance.deleteStage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteVpcLink', function() {
      it('should call deleteVpcLink successfully', function(done) {
        //uncomment below and update the code to test deleteVpcLink
        //instance.deleteVpcLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportApi', function() {
      it('should call exportApi successfully', function(done) {
        //uncomment below and update the code to test exportApi
        //instance.exportApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApi', function() {
      it('should call getApi successfully', function(done) {
        //uncomment below and update the code to test getApi
        //instance.getApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApiMapping', function() {
      it('should call getApiMapping successfully', function(done) {
        //uncomment below and update the code to test getApiMapping
        //instance.getApiMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApiMappings', function() {
      it('should call getApiMappings successfully', function(done) {
        //uncomment below and update the code to test getApiMappings
        //instance.getApiMappings(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApis', function() {
      it('should call getApis successfully', function(done) {
        //uncomment below and update the code to test getApis
        //instance.getApis(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAuthorizer', function() {
      it('should call getAuthorizer successfully', function(done) {
        //uncomment below and update the code to test getAuthorizer
        //instance.getAuthorizer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getAuthorizers', function() {
      it('should call getAuthorizers successfully', function(done) {
        //uncomment below and update the code to test getAuthorizers
        //instance.getAuthorizers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployment', function() {
      it('should call getDeployment successfully', function(done) {
        //uncomment below and update the code to test getDeployment
        //instance.getDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDeployments', function() {
      it('should call getDeployments successfully', function(done) {
        //uncomment below and update the code to test getDeployments
        //instance.getDeployments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDomainName', function() {
      it('should call getDomainName successfully', function(done) {
        //uncomment below and update the code to test getDomainName
        //instance.getDomainName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDomainNames', function() {
      it('should call getDomainNames successfully', function(done) {
        //uncomment below and update the code to test getDomainNames
        //instance.getDomainNames(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegration', function() {
      it('should call getIntegration successfully', function(done) {
        //uncomment below and update the code to test getIntegration
        //instance.getIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrationResponse', function() {
      it('should call getIntegrationResponse successfully', function(done) {
        //uncomment below and update the code to test getIntegrationResponse
        //instance.getIntegrationResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrationResponses', function() {
      it('should call getIntegrationResponses successfully', function(done) {
        //uncomment below and update the code to test getIntegrationResponses
        //instance.getIntegrationResponses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getIntegrations', function() {
      it('should call getIntegrations successfully', function(done) {
        //uncomment below and update the code to test getIntegrations
        //instance.getIntegrations(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModel', function() {
      it('should call getModel successfully', function(done) {
        //uncomment below and update the code to test getModel
        //instance.getModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModelTemplate', function() {
      it('should call getModelTemplate successfully', function(done) {
        //uncomment below and update the code to test getModelTemplate
        //instance.getModelTemplate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getModels', function() {
      it('should call getModels successfully', function(done) {
        //uncomment below and update the code to test getModels
        //instance.getModels(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoute', function() {
      it('should call getRoute successfully', function(done) {
        //uncomment below and update the code to test getRoute
        //instance.getRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRouteResponse', function() {
      it('should call getRouteResponse successfully', function(done) {
        //uncomment below and update the code to test getRouteResponse
        //instance.getRouteResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRouteResponses', function() {
      it('should call getRouteResponses successfully', function(done) {
        //uncomment below and update the code to test getRouteResponses
        //instance.getRouteResponses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRoutes', function() {
      it('should call getRoutes successfully', function(done) {
        //uncomment below and update the code to test getRoutes
        //instance.getRoutes(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStage', function() {
      it('should call getStage successfully', function(done) {
        //uncomment below and update the code to test getStage
        //instance.getStage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getStages', function() {
      it('should call getStages successfully', function(done) {
        //uncomment below and update the code to test getStages
        //instance.getStages(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTags', function() {
      it('should call getTags successfully', function(done) {
        //uncomment below and update the code to test getTags
        //instance.getTags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVpcLink', function() {
      it('should call getVpcLink successfully', function(done) {
        //uncomment below and update the code to test getVpcLink
        //instance.getVpcLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getVpcLinks', function() {
      it('should call getVpcLinks successfully', function(done) {
        //uncomment below and update the code to test getVpcLinks
        //instance.getVpcLinks(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importApi', function() {
      it('should call importApi successfully', function(done) {
        //uncomment below and update the code to test importApi
        //instance.importApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reimportApi', function() {
      it('should call reimportApi successfully', function(done) {
        //uncomment below and update the code to test reimportApi
        //instance.reimportApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resetAuthorizersCache', function() {
      it('should call resetAuthorizersCache successfully', function(done) {
        //uncomment below and update the code to test resetAuthorizersCache
        //instance.resetAuthorizersCache(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tagResource', function() {
      it('should call tagResource successfully', function(done) {
        //uncomment below and update the code to test tagResource
        //instance.tagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('untagResource', function() {
      it('should call untagResource successfully', function(done) {
        //uncomment below and update the code to test untagResource
        //instance.untagResource(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApi', function() {
      it('should call updateApi successfully', function(done) {
        //uncomment below and update the code to test updateApi
        //instance.updateApi(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateApiMapping', function() {
      it('should call updateApiMapping successfully', function(done) {
        //uncomment below and update the code to test updateApiMapping
        //instance.updateApiMapping(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateAuthorizer', function() {
      it('should call updateAuthorizer successfully', function(done) {
        //uncomment below and update the code to test updateAuthorizer
        //instance.updateAuthorizer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDeployment', function() {
      it('should call updateDeployment successfully', function(done) {
        //uncomment below and update the code to test updateDeployment
        //instance.updateDeployment(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDomainName', function() {
      it('should call updateDomainName successfully', function(done) {
        //uncomment below and update the code to test updateDomainName
        //instance.updateDomainName(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIntegration', function() {
      it('should call updateIntegration successfully', function(done) {
        //uncomment below and update the code to test updateIntegration
        //instance.updateIntegration(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateIntegrationResponse', function() {
      it('should call updateIntegrationResponse successfully', function(done) {
        //uncomment below and update the code to test updateIntegrationResponse
        //instance.updateIntegrationResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateModel', function() {
      it('should call updateModel successfully', function(done) {
        //uncomment below and update the code to test updateModel
        //instance.updateModel(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRoute', function() {
      it('should call updateRoute successfully', function(done) {
        //uncomment below and update the code to test updateRoute
        //instance.updateRoute(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRouteResponse', function() {
      it('should call updateRouteResponse successfully', function(done) {
        //uncomment below and update the code to test updateRouteResponse
        //instance.updateRouteResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateStage', function() {
      it('should call updateStage successfully', function(done) {
        //uncomment below and update the code to test updateStage
        //instance.updateStage(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateVpcLink', function() {
      it('should call updateVpcLink successfully', function(done) {
        //uncomment below and update the code to test updateVpcLink
        //instance.updateVpcLink(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
