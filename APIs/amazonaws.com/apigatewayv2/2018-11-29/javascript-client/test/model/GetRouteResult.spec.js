/**
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonApiGatewayV2);
  }
}(this, function(expect, AmazonApiGatewayV2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonApiGatewayV2.GetRouteResult();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetRouteResult', function() {
    it('should create an instance of GetRouteResult', function() {
      // uncomment below and update the code to test GetRouteResult
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be.a(AmazonApiGatewayV2.GetRouteResult);
    });

    it('should have the property apiGatewayManaged (base name: "ApiGatewayManaged")', function() {
      // uncomment below and update the code to test the property apiGatewayManaged
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property apiKeyRequired (base name: "ApiKeyRequired")', function() {
      // uncomment below and update the code to test the property apiKeyRequired
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property authorizationScopes (base name: "AuthorizationScopes")', function() {
      // uncomment below and update the code to test the property authorizationScopes
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property authorizationType (base name: "AuthorizationType")', function() {
      // uncomment below and update the code to test the property authorizationType
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property authorizerId (base name: "AuthorizerId")', function() {
      // uncomment below and update the code to test the property authorizerId
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property modelSelectionExpression (base name: "ModelSelectionExpression")', function() {
      // uncomment below and update the code to test the property modelSelectionExpression
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property operationName (base name: "OperationName")', function() {
      // uncomment below and update the code to test the property operationName
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property requestModels (base name: "RequestModels")', function() {
      // uncomment below and update the code to test the property requestModels
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property requestParameters (base name: "RequestParameters")', function() {
      // uncomment below and update the code to test the property requestParameters
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property routeId (base name: "RouteId")', function() {
      // uncomment below and update the code to test the property routeId
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property routeKey (base name: "RouteKey")', function() {
      // uncomment below and update the code to test the property routeKey
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property routeResponseSelectionExpression (base name: "RouteResponseSelectionExpression")', function() {
      // uncomment below and update the code to test the property routeResponseSelectionExpression
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

    it('should have the property target (base name: "Target")', function() {
      // uncomment below and update the code to test the property target
      //var instance = new AmazonApiGatewayV2.GetRouteResult();
      //expect(instance).to.be();
    });

  });

}));
