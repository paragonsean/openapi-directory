/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CreateApiMappingRequest;
import org.openapitools.client.model.CreateApiMappingResponse;
import org.openapitools.client.model.CreateApiRequest;
import org.openapitools.client.model.CreateApiResponse;
import org.openapitools.client.model.CreateAuthorizerRequest;
import org.openapitools.client.model.CreateAuthorizerResponse;
import org.openapitools.client.model.CreateDeploymentRequest;
import org.openapitools.client.model.CreateDeploymentResponse;
import org.openapitools.client.model.CreateDomainNameRequest;
import org.openapitools.client.model.CreateDomainNameResponse;
import org.openapitools.client.model.CreateIntegrationRequest;
import org.openapitools.client.model.CreateIntegrationResponseRequest;
import org.openapitools.client.model.CreateIntegrationResponseResponse;
import org.openapitools.client.model.CreateIntegrationResult;
import org.openapitools.client.model.CreateModelRequest;
import org.openapitools.client.model.CreateModelResponse;
import org.openapitools.client.model.CreateRouteRequest;
import org.openapitools.client.model.CreateRouteResponseRequest;
import org.openapitools.client.model.CreateRouteResponseResponse;
import org.openapitools.client.model.CreateRouteResult;
import org.openapitools.client.model.CreateStageRequest;
import org.openapitools.client.model.CreateStageResponse;
import org.openapitools.client.model.CreateVpcLinkRequest;
import org.openapitools.client.model.CreateVpcLinkResponse;
import org.openapitools.client.model.ExportApiResponse;
import org.openapitools.client.model.GetApiMappingResponse;
import org.openapitools.client.model.GetApiMappingsResponse;
import org.openapitools.client.model.GetApiResponse;
import org.openapitools.client.model.GetApisResponse;
import org.openapitools.client.model.GetAuthorizerResponse;
import org.openapitools.client.model.GetAuthorizersResponse;
import org.openapitools.client.model.GetDeploymentResponse;
import org.openapitools.client.model.GetDeploymentsResponse;
import org.openapitools.client.model.GetDomainNameResponse;
import org.openapitools.client.model.GetDomainNamesResponse;
import org.openapitools.client.model.GetIntegrationResponseResponse;
import org.openapitools.client.model.GetIntegrationResponsesResponse;
import org.openapitools.client.model.GetIntegrationResult;
import org.openapitools.client.model.GetIntegrationsResponse;
import org.openapitools.client.model.GetModelResponse;
import org.openapitools.client.model.GetModelTemplateResponse;
import org.openapitools.client.model.GetModelsResponse;
import org.openapitools.client.model.GetRouteResponseResponse;
import org.openapitools.client.model.GetRouteResponsesResponse;
import org.openapitools.client.model.GetRouteResult;
import org.openapitools.client.model.GetRoutesResponse;
import org.openapitools.client.model.GetStageResponse;
import org.openapitools.client.model.GetStagesResponse;
import org.openapitools.client.model.GetTagsResponse;
import org.openapitools.client.model.GetVpcLinkResponse;
import org.openapitools.client.model.GetVpcLinksResponse;
import org.openapitools.client.model.ImportApiRequest;
import org.openapitools.client.model.ImportApiResponse;
import org.openapitools.client.model.ReimportApiResponse;
import org.openapitools.client.model.TagResourceRequest;
import org.openapitools.client.model.UpdateApiMappingRequest;
import org.openapitools.client.model.UpdateApiMappingResponse;
import org.openapitools.client.model.UpdateApiRequest;
import org.openapitools.client.model.UpdateApiResponse;
import org.openapitools.client.model.UpdateAuthorizerRequest;
import org.openapitools.client.model.UpdateAuthorizerResponse;
import org.openapitools.client.model.UpdateDeploymentRequest;
import org.openapitools.client.model.UpdateDeploymentResponse;
import org.openapitools.client.model.UpdateDomainNameRequest;
import org.openapitools.client.model.UpdateDomainNameResponse;
import org.openapitools.client.model.UpdateIntegrationRequest;
import org.openapitools.client.model.UpdateIntegrationResponseRequest;
import org.openapitools.client.model.UpdateIntegrationResponseResponse;
import org.openapitools.client.model.UpdateIntegrationResult;
import org.openapitools.client.model.UpdateModelRequest;
import org.openapitools.client.model.UpdateModelResponse;
import org.openapitools.client.model.UpdateRouteRequest;
import org.openapitools.client.model.UpdateRouteResponseRequest;
import org.openapitools.client.model.UpdateRouteResponseResponse;
import org.openapitools.client.model.UpdateRouteResult;
import org.openapitools.client.model.UpdateStageRequest;
import org.openapitools.client.model.UpdateStageResponse;
import org.openapitools.client.model.UpdateVpcLinkRequest;
import org.openapitools.client.model.UpdateVpcLinkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Creates an Api resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiTest() throws ApiException {
        CreateApiRequest createApiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApiResponse response = api.createApi(createApiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an API mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiMappingTest() throws ApiException {
        String domainName = null;
        CreateApiMappingRequest createApiMappingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateApiMappingResponse response = api.createApiMapping(domainName, createApiMappingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Authorizer for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuthorizerTest() throws ApiException {
        String apiId = null;
        CreateAuthorizerRequest createAuthorizerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateAuthorizerResponse response = api.createAuthorizer(apiId, createAuthorizerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Deployment for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDeploymentTest() throws ApiException {
        String apiId = null;
        CreateDeploymentRequest createDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDeploymentResponse response = api.createDeployment(apiId, createDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a domain name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDomainNameTest() throws ApiException {
        CreateDomainNameRequest createDomainNameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateDomainNameResponse response = api.createDomainName(createDomainNameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an Integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIntegrationTest() throws ApiException {
        String apiId = null;
        CreateIntegrationRequest createIntegrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIntegrationResult response = api.createIntegration(apiId, createIntegrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates an IntegrationResponses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createIntegrationResponseTest() throws ApiException {
        String apiId = null;
        String integrationId = null;
        CreateIntegrationResponseRequest createIntegrationResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateIntegrationResponseResponse response = api.createIntegrationResponse(apiId, integrationId, createIntegrationResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Model for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createModelTest() throws ApiException {
        String apiId = null;
        CreateModelRequest createModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateModelResponse response = api.createModel(apiId, createModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Route for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteTest() throws ApiException {
        String apiId = null;
        CreateRouteRequest createRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRouteResult response = api.createRoute(apiId, createRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a RouteResponse for a Route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRouteResponseTest() throws ApiException {
        String apiId = null;
        String routeId = null;
        CreateRouteResponseRequest createRouteResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateRouteResponseResponse response = api.createRouteResponse(apiId, routeId, createRouteResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a Stage for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createStageTest() throws ApiException {
        String apiId = null;
        CreateStageRequest createStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateStageResponse response = api.createStage(apiId, createStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a VPC link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVpcLinkTest() throws ApiException {
        CreateVpcLinkRequest createVpcLinkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        CreateVpcLinkResponse response = api.createVpcLink(createVpcLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the AccessLogSettings for a Stage. To disable access logging for a Stage, delete its AccessLogSettings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccessLogSettingsTest() throws ApiException {
        String apiId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAccessLogSettings(apiId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Api resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteApi(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an API mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteApiMappingTest() throws ApiException {
        String apiMappingId = null;
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteApiMapping(apiMappingId, domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Authorizer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAuthorizerTest() throws ApiException {
        String apiId = null;
        String authorizerId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteAuthorizer(apiId, authorizerId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a CORS configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCorsConfigurationTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteCorsConfiguration(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDeploymentTest() throws ApiException {
        String apiId = null;
        String deploymentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDeployment(apiId, deploymentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a domain name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDomainNameTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteDomainName(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an Integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntegrationTest() throws ApiException {
        String apiId = null;
        String integrationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteIntegration(apiId, integrationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes an IntegrationResponses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIntegrationResponseTest() throws ApiException {
        String apiId = null;
        String integrationId = null;
        String integrationResponseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteIntegrationResponse(apiId, integrationId, integrationResponseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        String apiId = null;
        String modelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteModel(apiId, modelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteTest() throws ApiException {
        String apiId = null;
        String routeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRoute(apiId, routeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a route request parameter. Supported only for WebSocket APIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteRequestParameterTest() throws ApiException {
        String apiId = null;
        String requestParameterKey = null;
        String routeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRouteRequestParameter(apiId, requestParameterKey, routeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a RouteResponse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteResponseTest() throws ApiException {
        String apiId = null;
        String routeId = null;
        String routeResponseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRouteResponse(apiId, routeId, routeResponseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes the RouteSettings for a stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRouteSettingsTest() throws ApiException {
        String apiId = null;
        String routeKey = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteRouteSettings(apiId, routeKey, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteStageTest() throws ApiException {
        String apiId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.deleteStage(apiId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a VPC link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVpcLinkTest() throws ApiException {
        String vpcLinkId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.deleteVpcLink(vpcLinkId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void exportApiTest() throws ApiException {
        String apiId = null;
        String outputType = null;
        String specification = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String exportVersion = null;
        Boolean includeExtensions = null;
        String stageName = null;
        ExportApiResponse response = api.exportApi(apiId, outputType, specification, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, exportVersion, includeExtensions, stageName);
        // TODO: test validations
    }

    /**
     * Gets an Api resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApiResponse response = api.getApi(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets an API mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiMappingTest() throws ApiException {
        String apiMappingId = null;
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetApiMappingResponse response = api.getApiMapping(apiMappingId, domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets API mappings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiMappingsTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetApiMappingsResponse response = api.getApiMappings(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a collection of Api resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApisTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetApisResponse response = api.getApis(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets an Authorizer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizerTest() throws ApiException {
        String apiId = null;
        String authorizerId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetAuthorizerResponse response = api.getAuthorizer(apiId, authorizerId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the Authorizers for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizersTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetAuthorizersResponse response = api.getAuthorizers(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a Deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentTest() throws ApiException {
        String apiId = null;
        String deploymentId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDeploymentResponse response = api.getDeployment(apiId, deploymentId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the Deployments for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeploymentsTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetDeploymentsResponse response = api.getDeployments(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a domain name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainNameTest() throws ApiException {
        String domainName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetDomainNameResponse response = api.getDomainName(domainName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the domain names for an AWS account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDomainNamesTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetDomainNamesResponse response = api.getDomainNames(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets an Integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationTest() throws ApiException {
        String apiId = null;
        String integrationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetIntegrationResult response = api.getIntegration(apiId, integrationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets an IntegrationResponses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationResponseTest() throws ApiException {
        String apiId = null;
        String integrationId = null;
        String integrationResponseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetIntegrationResponseResponse response = api.getIntegrationResponse(apiId, integrationId, integrationResponseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the IntegrationResponses for an Integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationResponsesTest() throws ApiException {
        String apiId = null;
        String integrationId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetIntegrationResponsesResponse response = api.getIntegrationResponses(apiId, integrationId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the Integrations for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIntegrationsTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetIntegrationsResponse response = api.getIntegrations(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a Model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelTest() throws ApiException {
        String apiId = null;
        String modelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetModelResponse response = api.getModel(apiId, modelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a model template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelTemplateTest() throws ApiException {
        String apiId = null;
        String modelId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetModelTemplateResponse response = api.getModelTemplate(apiId, modelId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the Models for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelsTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetModelsResponse response = api.getModels(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a Route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteTest() throws ApiException {
        String apiId = null;
        String routeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRouteResult response = api.getRoute(apiId, routeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a RouteResponse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteResponseTest() throws ApiException {
        String apiId = null;
        String routeId = null;
        String routeResponseId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetRouteResponseResponse response = api.getRouteResponse(apiId, routeId, routeResponseId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the RouteResponses for a Route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRouteResponsesTest() throws ApiException {
        String apiId = null;
        String routeId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetRouteResponsesResponse response = api.getRouteResponses(apiId, routeId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets the Routes for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoutesTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetRoutesResponse response = api.getRoutes(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a Stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStageTest() throws ApiException {
        String apiId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetStageResponse response = api.getStage(apiId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets the Stages for an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStagesTest() throws ApiException {
        String apiId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetStagesResponse response = api.getStages(apiId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Gets a collection of Tag resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsTest() throws ApiException {
        String resourceArn = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetTagsResponse response = api.getTags(resourceArn, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a VPC link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVpcLinkTest() throws ApiException {
        String vpcLinkId = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        GetVpcLinkResponse response = api.getVpcLink(vpcLinkId, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Gets a collection of VPC links.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVpcLinksTest() throws ApiException {
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String maxResults = null;
        String nextToken = null;
        GetVpcLinksResponse response = api.getVpcLinks(xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, maxResults, nextToken);
        // TODO: test validations
    }

    /**
     * Imports an API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importApiTest() throws ApiException {
        ImportApiRequest importApiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String basepath = null;
        Boolean failOnWarnings = null;
        ImportApiResponse response = api.importApi(importApiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, basepath, failOnWarnings);
        // TODO: test validations
    }

    /**
     * Puts an Api resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reimportApiTest() throws ApiException {
        String apiId = null;
        ImportApiRequest importApiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        String basepath = null;
        Boolean failOnWarnings = null;
        ReimportApiResponse response = api.reimportApi(apiId, importApiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders, basepath, failOnWarnings);
        // TODO: test validations
    }

    /**
     * Resets all authorizer cache entries on a stage. Supported only for HTTP APIs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetAuthorizersCacheTest() throws ApiException {
        String apiId = null;
        String stageName = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.resetAuthorizersCache(apiId, stageName, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Creates a new Tag resource to represent a tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagResourceTest() throws ApiException {
        String resourceArn = null;
        TagResourceRequest tagResourceRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        Object response = api.tagResource(resourceArn, tagResourceRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Deletes a Tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void untagResourceTest() throws ApiException {
        String resourceArn = null;
        List<String> tagKeys = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        api.untagResource(resourceArn, tagKeys, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an Api resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiTest() throws ApiException {
        String apiId = null;
        UpdateApiRequest updateApiRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApiResponse response = api.updateApi(apiId, updateApiRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * The API mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateApiMappingTest() throws ApiException {
        String apiMappingId = null;
        String domainName = null;
        UpdateApiMappingRequest updateApiMappingRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateApiMappingResponse response = api.updateApiMapping(apiMappingId, domainName, updateApiMappingRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an Authorizer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAuthorizerTest() throws ApiException {
        String apiId = null;
        String authorizerId = null;
        UpdateAuthorizerRequest updateAuthorizerRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateAuthorizerResponse response = api.updateAuthorizer(apiId, authorizerId, updateAuthorizerRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a Deployment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDeploymentTest() throws ApiException {
        String apiId = null;
        String deploymentId = null;
        UpdateDeploymentRequest updateDeploymentRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDeploymentResponse response = api.updateDeployment(apiId, deploymentId, updateDeploymentRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a domain name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDomainNameTest() throws ApiException {
        String domainName = null;
        UpdateDomainNameRequest updateDomainNameRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateDomainNameResponse response = api.updateDomainName(domainName, updateDomainNameRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an Integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIntegrationTest() throws ApiException {
        String apiId = null;
        String integrationId = null;
        UpdateIntegrationRequest updateIntegrationRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateIntegrationResult response = api.updateIntegration(apiId, integrationId, updateIntegrationRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates an IntegrationResponses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIntegrationResponseTest() throws ApiException {
        String apiId = null;
        String integrationId = null;
        String integrationResponseId = null;
        UpdateIntegrationResponseRequest updateIntegrationResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateIntegrationResponseResponse response = api.updateIntegrationResponse(apiId, integrationId, integrationResponseId, updateIntegrationResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a Model.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateModelTest() throws ApiException {
        String apiId = null;
        String modelId = null;
        UpdateModelRequest updateModelRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateModelResponse response = api.updateModel(apiId, modelId, updateModelRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a Route.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRouteTest() throws ApiException {
        String apiId = null;
        String routeId = null;
        UpdateRouteRequest updateRouteRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRouteResult response = api.updateRoute(apiId, routeId, updateRouteRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a RouteResponse.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRouteResponseTest() throws ApiException {
        String apiId = null;
        String routeId = null;
        String routeResponseId = null;
        UpdateRouteResponseRequest updateRouteResponseRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateRouteResponseResponse response = api.updateRouteResponse(apiId, routeId, routeResponseId, updateRouteResponseRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a Stage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateStageTest() throws ApiException {
        String apiId = null;
        String stageName = null;
        UpdateStageRequest updateStageRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateStageResponse response = api.updateStage(apiId, stageName, updateStageRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

    /**
     * Updates a VPC link.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVpcLinkTest() throws ApiException {
        String vpcLinkId = null;
        UpdateVpcLinkRequest updateVpcLinkRequest = null;
        String xAmzContentSha256 = null;
        String xAmzDate = null;
        String xAmzAlgorithm = null;
        String xAmzCredential = null;
        String xAmzSecurityToken = null;
        String xAmzSignature = null;
        String xAmzSignedHeaders = null;
        UpdateVpcLinkResponse response = api.updateVpcLink(vpcLinkId, updateVpcLinkRequest, xAmzContentSha256, xAmzDate, xAmzAlgorithm, xAmzCredential, xAmzSecurityToken, xAmzSignature, xAmzSignedHeaders);
        // TODO: test validations
    }

}
