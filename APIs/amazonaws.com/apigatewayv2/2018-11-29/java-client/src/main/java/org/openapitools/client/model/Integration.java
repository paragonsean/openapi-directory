/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ConnectionType;
import org.openapitools.client.model.ContentHandlingStrategy;
import org.openapitools.client.model.CreateIntegrationResultTlsConfig;
import org.openapitools.client.model.IntegrationType;
import org.openapitools.client.model.PassthroughBehavior;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an integration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Integration {
  public static final String SERIALIZED_NAME_API_GATEWAY_MANAGED = "ApiGatewayManaged";
  @SerializedName(SERIALIZED_NAME_API_GATEWAY_MANAGED)
  private Boolean apiGatewayManaged;

  public static final String SERIALIZED_NAME_CONNECTION_ID = "ConnectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "ConnectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionType connectionType;

  public static final String SERIALIZED_NAME_CONTENT_HANDLING_STRATEGY = "ContentHandlingStrategy";
  @SerializedName(SERIALIZED_NAME_CONTENT_HANDLING_STRATEGY)
  private ContentHandlingStrategy contentHandlingStrategy;

  public static final String SERIALIZED_NAME_CREDENTIALS_ARN = "CredentialsArn";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_ARN)
  private String credentialsArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INTEGRATION_ID = "IntegrationId";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_ID)
  private String integrationId;

  public static final String SERIALIZED_NAME_INTEGRATION_METHOD = "IntegrationMethod";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_METHOD)
  private String integrationMethod;

  public static final String SERIALIZED_NAME_INTEGRATION_RESPONSE_SELECTION_EXPRESSION = "IntegrationResponseSelectionExpression";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_RESPONSE_SELECTION_EXPRESSION)
  private String integrationResponseSelectionExpression;

  public static final String SERIALIZED_NAME_INTEGRATION_SUBTYPE = "IntegrationSubtype";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_SUBTYPE)
  private String integrationSubtype;

  public static final String SERIALIZED_NAME_INTEGRATION_TYPE = "IntegrationType";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPE)
  private IntegrationType integrationType;

  public static final String SERIALIZED_NAME_INTEGRATION_URI = "IntegrationUri";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_URI)
  private String integrationUri;

  public static final String SERIALIZED_NAME_PASSTHROUGH_BEHAVIOR = "PassthroughBehavior";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH_BEHAVIOR)
  private PassthroughBehavior passthroughBehavior;

  public static final String SERIALIZED_NAME_PAYLOAD_FORMAT_VERSION = "PayloadFormatVersion";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_FORMAT_VERSION)
  private String payloadFormatVersion;

  public static final String SERIALIZED_NAME_REQUEST_PARAMETERS = "RequestParameters";
  @SerializedName(SERIALIZED_NAME_REQUEST_PARAMETERS)
  private Map requestParameters;

  public static final String SERIALIZED_NAME_REQUEST_TEMPLATES = "RequestTemplates";
  @SerializedName(SERIALIZED_NAME_REQUEST_TEMPLATES)
  private Map requestTemplates;

  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "ResponseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  private Map responseParameters;

  public static final String SERIALIZED_NAME_TEMPLATE_SELECTION_EXPRESSION = "TemplateSelectionExpression";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_SELECTION_EXPRESSION)
  private String templateSelectionExpression;

  public static final String SERIALIZED_NAME_TIMEOUT_IN_MILLIS = "TimeoutInMillis";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_IN_MILLIS)
  private Integer timeoutInMillis;

  public static final String SERIALIZED_NAME_TLS_CONFIG = "TlsConfig";
  @SerializedName(SERIALIZED_NAME_TLS_CONFIG)
  private CreateIntegrationResultTlsConfig tlsConfig;

  public Integration() {
  }

  public Integration apiGatewayManaged(Boolean apiGatewayManaged) {
    this.apiGatewayManaged = apiGatewayManaged;
    return this;
  }

  /**
   * Get apiGatewayManaged
   * @return apiGatewayManaged
   */
  @javax.annotation.Nullable
  public Boolean getApiGatewayManaged() {
    return apiGatewayManaged;
  }

  public void setApiGatewayManaged(Boolean apiGatewayManaged) {
    this.apiGatewayManaged = apiGatewayManaged;
  }


  public Integration connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * Get connectionId
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public Integration connectionType(ConnectionType connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Get connectionType
   * @return connectionType
   */
  @javax.annotation.Nullable
  public ConnectionType getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionType connectionType) {
    this.connectionType = connectionType;
  }


  public Integration contentHandlingStrategy(ContentHandlingStrategy contentHandlingStrategy) {
    this.contentHandlingStrategy = contentHandlingStrategy;
    return this;
  }

  /**
   * Get contentHandlingStrategy
   * @return contentHandlingStrategy
   */
  @javax.annotation.Nullable
  public ContentHandlingStrategy getContentHandlingStrategy() {
    return contentHandlingStrategy;
  }

  public void setContentHandlingStrategy(ContentHandlingStrategy contentHandlingStrategy) {
    this.contentHandlingStrategy = contentHandlingStrategy;
  }


  public Integration credentialsArn(String credentialsArn) {
    this.credentialsArn = credentialsArn;
    return this;
  }

  /**
   * Get credentialsArn
   * @return credentialsArn
   */
  @javax.annotation.Nullable
  public String getCredentialsArn() {
    return credentialsArn;
  }

  public void setCredentialsArn(String credentialsArn) {
    this.credentialsArn = credentialsArn;
  }


  public Integration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Integration integrationId(String integrationId) {
    this.integrationId = integrationId;
    return this;
  }

  /**
   * Get integrationId
   * @return integrationId
   */
  @javax.annotation.Nullable
  public String getIntegrationId() {
    return integrationId;
  }

  public void setIntegrationId(String integrationId) {
    this.integrationId = integrationId;
  }


  public Integration integrationMethod(String integrationMethod) {
    this.integrationMethod = integrationMethod;
    return this;
  }

  /**
   * Get integrationMethod
   * @return integrationMethod
   */
  @javax.annotation.Nullable
  public String getIntegrationMethod() {
    return integrationMethod;
  }

  public void setIntegrationMethod(String integrationMethod) {
    this.integrationMethod = integrationMethod;
  }


  public Integration integrationResponseSelectionExpression(String integrationResponseSelectionExpression) {
    this.integrationResponseSelectionExpression = integrationResponseSelectionExpression;
    return this;
  }

  /**
   * Get integrationResponseSelectionExpression
   * @return integrationResponseSelectionExpression
   */
  @javax.annotation.Nullable
  public String getIntegrationResponseSelectionExpression() {
    return integrationResponseSelectionExpression;
  }

  public void setIntegrationResponseSelectionExpression(String integrationResponseSelectionExpression) {
    this.integrationResponseSelectionExpression = integrationResponseSelectionExpression;
  }


  public Integration integrationSubtype(String integrationSubtype) {
    this.integrationSubtype = integrationSubtype;
    return this;
  }

  /**
   * Get integrationSubtype
   * @return integrationSubtype
   */
  @javax.annotation.Nullable
  public String getIntegrationSubtype() {
    return integrationSubtype;
  }

  public void setIntegrationSubtype(String integrationSubtype) {
    this.integrationSubtype = integrationSubtype;
  }


  public Integration integrationType(IntegrationType integrationType) {
    this.integrationType = integrationType;
    return this;
  }

  /**
   * Get integrationType
   * @return integrationType
   */
  @javax.annotation.Nullable
  public IntegrationType getIntegrationType() {
    return integrationType;
  }

  public void setIntegrationType(IntegrationType integrationType) {
    this.integrationType = integrationType;
  }


  public Integration integrationUri(String integrationUri) {
    this.integrationUri = integrationUri;
    return this;
  }

  /**
   * Get integrationUri
   * @return integrationUri
   */
  @javax.annotation.Nullable
  public String getIntegrationUri() {
    return integrationUri;
  }

  public void setIntegrationUri(String integrationUri) {
    this.integrationUri = integrationUri;
  }


  public Integration passthroughBehavior(PassthroughBehavior passthroughBehavior) {
    this.passthroughBehavior = passthroughBehavior;
    return this;
  }

  /**
   * Get passthroughBehavior
   * @return passthroughBehavior
   */
  @javax.annotation.Nullable
  public PassthroughBehavior getPassthroughBehavior() {
    return passthroughBehavior;
  }

  public void setPassthroughBehavior(PassthroughBehavior passthroughBehavior) {
    this.passthroughBehavior = passthroughBehavior;
  }


  public Integration payloadFormatVersion(String payloadFormatVersion) {
    this.payloadFormatVersion = payloadFormatVersion;
    return this;
  }

  /**
   * Get payloadFormatVersion
   * @return payloadFormatVersion
   */
  @javax.annotation.Nullable
  public String getPayloadFormatVersion() {
    return payloadFormatVersion;
  }

  public void setPayloadFormatVersion(String payloadFormatVersion) {
    this.payloadFormatVersion = payloadFormatVersion;
  }


  public Integration requestParameters(Map requestParameters) {
    this.requestParameters = requestParameters;
    return this;
  }

  /**
   * Get requestParameters
   * @return requestParameters
   */
  @javax.annotation.Nullable
  public Map getRequestParameters() {
    return requestParameters;
  }

  public void setRequestParameters(Map requestParameters) {
    this.requestParameters = requestParameters;
  }


  public Integration requestTemplates(Map requestTemplates) {
    this.requestTemplates = requestTemplates;
    return this;
  }

  /**
   * Get requestTemplates
   * @return requestTemplates
   */
  @javax.annotation.Nullable
  public Map getRequestTemplates() {
    return requestTemplates;
  }

  public void setRequestTemplates(Map requestTemplates) {
    this.requestTemplates = requestTemplates;
  }


  public Integration responseParameters(Map responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  /**
   * Get responseParameters
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(Map responseParameters) {
    this.responseParameters = responseParameters;
  }


  public Integration templateSelectionExpression(String templateSelectionExpression) {
    this.templateSelectionExpression = templateSelectionExpression;
    return this;
  }

  /**
   * Get templateSelectionExpression
   * @return templateSelectionExpression
   */
  @javax.annotation.Nullable
  public String getTemplateSelectionExpression() {
    return templateSelectionExpression;
  }

  public void setTemplateSelectionExpression(String templateSelectionExpression) {
    this.templateSelectionExpression = templateSelectionExpression;
  }


  public Integration timeoutInMillis(Integer timeoutInMillis) {
    this.timeoutInMillis = timeoutInMillis;
    return this;
  }

  /**
   * Get timeoutInMillis
   * @return timeoutInMillis
   */
  @javax.annotation.Nullable
  public Integer getTimeoutInMillis() {
    return timeoutInMillis;
  }

  public void setTimeoutInMillis(Integer timeoutInMillis) {
    this.timeoutInMillis = timeoutInMillis;
  }


  public Integration tlsConfig(CreateIntegrationResultTlsConfig tlsConfig) {
    this.tlsConfig = tlsConfig;
    return this;
  }

  /**
   * Get tlsConfig
   * @return tlsConfig
   */
  @javax.annotation.Nullable
  public CreateIntegrationResultTlsConfig getTlsConfig() {
    return tlsConfig;
  }

  public void setTlsConfig(CreateIntegrationResultTlsConfig tlsConfig) {
    this.tlsConfig = tlsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Integration integration = (Integration) o;
    return Objects.equals(this.apiGatewayManaged, integration.apiGatewayManaged) &&
        Objects.equals(this.connectionId, integration.connectionId) &&
        Objects.equals(this.connectionType, integration.connectionType) &&
        Objects.equals(this.contentHandlingStrategy, integration.contentHandlingStrategy) &&
        Objects.equals(this.credentialsArn, integration.credentialsArn) &&
        Objects.equals(this.description, integration.description) &&
        Objects.equals(this.integrationId, integration.integrationId) &&
        Objects.equals(this.integrationMethod, integration.integrationMethod) &&
        Objects.equals(this.integrationResponseSelectionExpression, integration.integrationResponseSelectionExpression) &&
        Objects.equals(this.integrationSubtype, integration.integrationSubtype) &&
        Objects.equals(this.integrationType, integration.integrationType) &&
        Objects.equals(this.integrationUri, integration.integrationUri) &&
        Objects.equals(this.passthroughBehavior, integration.passthroughBehavior) &&
        Objects.equals(this.payloadFormatVersion, integration.payloadFormatVersion) &&
        Objects.equals(this.requestParameters, integration.requestParameters) &&
        Objects.equals(this.requestTemplates, integration.requestTemplates) &&
        Objects.equals(this.responseParameters, integration.responseParameters) &&
        Objects.equals(this.templateSelectionExpression, integration.templateSelectionExpression) &&
        Objects.equals(this.timeoutInMillis, integration.timeoutInMillis) &&
        Objects.equals(this.tlsConfig, integration.tlsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiGatewayManaged, connectionId, connectionType, contentHandlingStrategy, credentialsArn, description, integrationId, integrationMethod, integrationResponseSelectionExpression, integrationSubtype, integrationType, integrationUri, passthroughBehavior, payloadFormatVersion, requestParameters, requestTemplates, responseParameters, templateSelectionExpression, timeoutInMillis, tlsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Integration {\n");
    sb.append("    apiGatewayManaged: ").append(toIndentedString(apiGatewayManaged)).append("\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    contentHandlingStrategy: ").append(toIndentedString(contentHandlingStrategy)).append("\n");
    sb.append("    credentialsArn: ").append(toIndentedString(credentialsArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    integrationId: ").append(toIndentedString(integrationId)).append("\n");
    sb.append("    integrationMethod: ").append(toIndentedString(integrationMethod)).append("\n");
    sb.append("    integrationResponseSelectionExpression: ").append(toIndentedString(integrationResponseSelectionExpression)).append("\n");
    sb.append("    integrationSubtype: ").append(toIndentedString(integrationSubtype)).append("\n");
    sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
    sb.append("    integrationUri: ").append(toIndentedString(integrationUri)).append("\n");
    sb.append("    passthroughBehavior: ").append(toIndentedString(passthroughBehavior)).append("\n");
    sb.append("    payloadFormatVersion: ").append(toIndentedString(payloadFormatVersion)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("    requestTemplates: ").append(toIndentedString(requestTemplates)).append("\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    templateSelectionExpression: ").append(toIndentedString(templateSelectionExpression)).append("\n");
    sb.append("    timeoutInMillis: ").append(toIndentedString(timeoutInMillis)).append("\n");
    sb.append("    tlsConfig: ").append(toIndentedString(tlsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiGatewayManaged");
    openapiFields.add("ConnectionId");
    openapiFields.add("ConnectionType");
    openapiFields.add("ContentHandlingStrategy");
    openapiFields.add("CredentialsArn");
    openapiFields.add("Description");
    openapiFields.add("IntegrationId");
    openapiFields.add("IntegrationMethod");
    openapiFields.add("IntegrationResponseSelectionExpression");
    openapiFields.add("IntegrationSubtype");
    openapiFields.add("IntegrationType");
    openapiFields.add("IntegrationUri");
    openapiFields.add("PassthroughBehavior");
    openapiFields.add("PayloadFormatVersion");
    openapiFields.add("RequestParameters");
    openapiFields.add("RequestTemplates");
    openapiFields.add("ResponseParameters");
    openapiFields.add("TemplateSelectionExpression");
    openapiFields.add("TimeoutInMillis");
    openapiFields.add("TlsConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Integration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Integration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Integration is not found in the empty JSON string", Integration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Integration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Integration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApiGatewayManaged`
      if (jsonObj.get("ApiGatewayManaged") != null && !jsonObj.get("ApiGatewayManaged").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApiGatewayManaged"));
      }
      // validate the optional field `ConnectionId`
      if (jsonObj.get("ConnectionId") != null && !jsonObj.get("ConnectionId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ConnectionId"));
      }
      // validate the optional field `ConnectionType`
      if (jsonObj.get("ConnectionType") != null && !jsonObj.get("ConnectionType").isJsonNull()) {
        ConnectionType.validateJsonElement(jsonObj.get("ConnectionType"));
      }
      // validate the optional field `ContentHandlingStrategy`
      if (jsonObj.get("ContentHandlingStrategy") != null && !jsonObj.get("ContentHandlingStrategy").isJsonNull()) {
        ContentHandlingStrategy.validateJsonElement(jsonObj.get("ContentHandlingStrategy"));
      }
      // validate the optional field `CredentialsArn`
      if (jsonObj.get("CredentialsArn") != null && !jsonObj.get("CredentialsArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CredentialsArn"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `IntegrationId`
      if (jsonObj.get("IntegrationId") != null && !jsonObj.get("IntegrationId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationId"));
      }
      // validate the optional field `IntegrationMethod`
      if (jsonObj.get("IntegrationMethod") != null && !jsonObj.get("IntegrationMethod").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationMethod"));
      }
      // validate the optional field `IntegrationResponseSelectionExpression`
      if (jsonObj.get("IntegrationResponseSelectionExpression") != null && !jsonObj.get("IntegrationResponseSelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationResponseSelectionExpression"));
      }
      // validate the optional field `IntegrationSubtype`
      if (jsonObj.get("IntegrationSubtype") != null && !jsonObj.get("IntegrationSubtype").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationSubtype"));
      }
      // validate the optional field `IntegrationType`
      if (jsonObj.get("IntegrationType") != null && !jsonObj.get("IntegrationType").isJsonNull()) {
        IntegrationType.validateJsonElement(jsonObj.get("IntegrationType"));
      }
      // validate the optional field `IntegrationUri`
      if (jsonObj.get("IntegrationUri") != null && !jsonObj.get("IntegrationUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationUri"));
      }
      // validate the optional field `PassthroughBehavior`
      if (jsonObj.get("PassthroughBehavior") != null && !jsonObj.get("PassthroughBehavior").isJsonNull()) {
        PassthroughBehavior.validateJsonElement(jsonObj.get("PassthroughBehavior"));
      }
      // validate the optional field `PayloadFormatVersion`
      if (jsonObj.get("PayloadFormatVersion") != null && !jsonObj.get("PayloadFormatVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("PayloadFormatVersion"));
      }
      // validate the optional field `RequestParameters`
      if (jsonObj.get("RequestParameters") != null && !jsonObj.get("RequestParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("RequestParameters"));
      }
      // validate the optional field `RequestTemplates`
      if (jsonObj.get("RequestTemplates") != null && !jsonObj.get("RequestTemplates").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("RequestTemplates"));
      }
      // validate the optional field `ResponseParameters`
      if (jsonObj.get("ResponseParameters") != null && !jsonObj.get("ResponseParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ResponseParameters"));
      }
      // validate the optional field `TemplateSelectionExpression`
      if (jsonObj.get("TemplateSelectionExpression") != null && !jsonObj.get("TemplateSelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateSelectionExpression"));
      }
      // validate the optional field `TimeoutInMillis`
      if (jsonObj.get("TimeoutInMillis") != null && !jsonObj.get("TimeoutInMillis").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("TimeoutInMillis"));
      }
      // validate the optional field `TlsConfig`
      if (jsonObj.get("TlsConfig") != null && !jsonObj.get("TlsConfig").isJsonNull()) {
        CreateIntegrationResultTlsConfig.validateJsonElement(jsonObj.get("TlsConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Integration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Integration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Integration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Integration.class));

       return (TypeAdapter<T>) new TypeAdapter<Integration>() {
           @Override
           public void write(JsonWriter out, Integration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Integration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Integration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Integration
   * @throws IOException if the JSON string is invalid with respect to Integration
   */
  public static Integration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Integration.class);
  }

  /**
   * Convert an instance of Integration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

