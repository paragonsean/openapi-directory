/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LoggingLevel;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a collection of route settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RouteSettings {
  public static final String SERIALIZED_NAME_DATA_TRACE_ENABLED = "DataTraceEnabled";
  @SerializedName(SERIALIZED_NAME_DATA_TRACE_ENABLED)
  private Boolean dataTraceEnabled;

  public static final String SERIALIZED_NAME_DETAILED_METRICS_ENABLED = "DetailedMetricsEnabled";
  @SerializedName(SERIALIZED_NAME_DETAILED_METRICS_ENABLED)
  private Boolean detailedMetricsEnabled;

  public static final String SERIALIZED_NAME_LOGGING_LEVEL = "LoggingLevel";
  @SerializedName(SERIALIZED_NAME_LOGGING_LEVEL)
  private LoggingLevel loggingLevel;

  public static final String SERIALIZED_NAME_THROTTLING_BURST_LIMIT = "ThrottlingBurstLimit";
  @SerializedName(SERIALIZED_NAME_THROTTLING_BURST_LIMIT)
  private Integer throttlingBurstLimit;

  public static final String SERIALIZED_NAME_THROTTLING_RATE_LIMIT = "ThrottlingRateLimit";
  @SerializedName(SERIALIZED_NAME_THROTTLING_RATE_LIMIT)
  private Double throttlingRateLimit;

  public RouteSettings() {
  }

  public RouteSettings dataTraceEnabled(Boolean dataTraceEnabled) {
    this.dataTraceEnabled = dataTraceEnabled;
    return this;
  }

  /**
   * Get dataTraceEnabled
   * @return dataTraceEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDataTraceEnabled() {
    return dataTraceEnabled;
  }

  public void setDataTraceEnabled(Boolean dataTraceEnabled) {
    this.dataTraceEnabled = dataTraceEnabled;
  }


  public RouteSettings detailedMetricsEnabled(Boolean detailedMetricsEnabled) {
    this.detailedMetricsEnabled = detailedMetricsEnabled;
    return this;
  }

  /**
   * Get detailedMetricsEnabled
   * @return detailedMetricsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getDetailedMetricsEnabled() {
    return detailedMetricsEnabled;
  }

  public void setDetailedMetricsEnabled(Boolean detailedMetricsEnabled) {
    this.detailedMetricsEnabled = detailedMetricsEnabled;
  }


  public RouteSettings loggingLevel(LoggingLevel loggingLevel) {
    this.loggingLevel = loggingLevel;
    return this;
  }

  /**
   * Get loggingLevel
   * @return loggingLevel
   */
  @javax.annotation.Nullable
  public LoggingLevel getLoggingLevel() {
    return loggingLevel;
  }

  public void setLoggingLevel(LoggingLevel loggingLevel) {
    this.loggingLevel = loggingLevel;
  }


  public RouteSettings throttlingBurstLimit(Integer throttlingBurstLimit) {
    this.throttlingBurstLimit = throttlingBurstLimit;
    return this;
  }

  /**
   * Get throttlingBurstLimit
   * @return throttlingBurstLimit
   */
  @javax.annotation.Nullable
  public Integer getThrottlingBurstLimit() {
    return throttlingBurstLimit;
  }

  public void setThrottlingBurstLimit(Integer throttlingBurstLimit) {
    this.throttlingBurstLimit = throttlingBurstLimit;
  }


  public RouteSettings throttlingRateLimit(Double throttlingRateLimit) {
    this.throttlingRateLimit = throttlingRateLimit;
    return this;
  }

  /**
   * Get throttlingRateLimit
   * @return throttlingRateLimit
   */
  @javax.annotation.Nullable
  public Double getThrottlingRateLimit() {
    return throttlingRateLimit;
  }

  public void setThrottlingRateLimit(Double throttlingRateLimit) {
    this.throttlingRateLimit = throttlingRateLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteSettings routeSettings = (RouteSettings) o;
    return Objects.equals(this.dataTraceEnabled, routeSettings.dataTraceEnabled) &&
        Objects.equals(this.detailedMetricsEnabled, routeSettings.detailedMetricsEnabled) &&
        Objects.equals(this.loggingLevel, routeSettings.loggingLevel) &&
        Objects.equals(this.throttlingBurstLimit, routeSettings.throttlingBurstLimit) &&
        Objects.equals(this.throttlingRateLimit, routeSettings.throttlingRateLimit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataTraceEnabled, detailedMetricsEnabled, loggingLevel, throttlingBurstLimit, throttlingRateLimit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteSettings {\n");
    sb.append("    dataTraceEnabled: ").append(toIndentedString(dataTraceEnabled)).append("\n");
    sb.append("    detailedMetricsEnabled: ").append(toIndentedString(detailedMetricsEnabled)).append("\n");
    sb.append("    loggingLevel: ").append(toIndentedString(loggingLevel)).append("\n");
    sb.append("    throttlingBurstLimit: ").append(toIndentedString(throttlingBurstLimit)).append("\n");
    sb.append("    throttlingRateLimit: ").append(toIndentedString(throttlingRateLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DataTraceEnabled");
    openapiFields.add("DetailedMetricsEnabled");
    openapiFields.add("LoggingLevel");
    openapiFields.add("ThrottlingBurstLimit");
    openapiFields.add("ThrottlingRateLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RouteSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RouteSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RouteSettings is not found in the empty JSON string", RouteSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RouteSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RouteSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `DataTraceEnabled`
      if (jsonObj.get("DataTraceEnabled") != null && !jsonObj.get("DataTraceEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DataTraceEnabled"));
      }
      // validate the optional field `DetailedMetricsEnabled`
      if (jsonObj.get("DetailedMetricsEnabled") != null && !jsonObj.get("DetailedMetricsEnabled").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DetailedMetricsEnabled"));
      }
      // validate the optional field `LoggingLevel`
      if (jsonObj.get("LoggingLevel") != null && !jsonObj.get("LoggingLevel").isJsonNull()) {
        LoggingLevel.validateJsonElement(jsonObj.get("LoggingLevel"));
      }
      // validate the optional field `ThrottlingBurstLimit`
      if (jsonObj.get("ThrottlingBurstLimit") != null && !jsonObj.get("ThrottlingBurstLimit").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("ThrottlingBurstLimit"));
      }
      // validate the optional field `ThrottlingRateLimit`
      if (jsonObj.get("ThrottlingRateLimit") != null && !jsonObj.get("ThrottlingRateLimit").isJsonNull()) {
        Double.validateJsonElement(jsonObj.get("ThrottlingRateLimit"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RouteSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RouteSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RouteSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RouteSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<RouteSettings>() {
           @Override
           public void write(JsonWriter out, RouteSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RouteSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RouteSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RouteSettings
   * @throws IOException if the JSON string is invalid with respect to RouteSettings
   */
  public static RouteSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RouteSettings.class);
  }

  /**
   * Convert an instance of RouteSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

