/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ContentHandlingStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetIntegrationResponseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetIntegrationResponseResponse {
  public static final String SERIALIZED_NAME_CONTENT_HANDLING_STRATEGY = "ContentHandlingStrategy";
  @SerializedName(SERIALIZED_NAME_CONTENT_HANDLING_STRATEGY)
  private ContentHandlingStrategy contentHandlingStrategy;

  public static final String SERIALIZED_NAME_INTEGRATION_RESPONSE_ID = "IntegrationResponseId";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_RESPONSE_ID)
  private String integrationResponseId;

  public static final String SERIALIZED_NAME_INTEGRATION_RESPONSE_KEY = "IntegrationResponseKey";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_RESPONSE_KEY)
  private String integrationResponseKey;

  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "ResponseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  private Map responseParameters;

  public static final String SERIALIZED_NAME_RESPONSE_TEMPLATES = "ResponseTemplates";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEMPLATES)
  private Map responseTemplates;

  public static final String SERIALIZED_NAME_TEMPLATE_SELECTION_EXPRESSION = "TemplateSelectionExpression";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_SELECTION_EXPRESSION)
  private String templateSelectionExpression;

  public GetIntegrationResponseResponse() {
  }

  public GetIntegrationResponseResponse contentHandlingStrategy(ContentHandlingStrategy contentHandlingStrategy) {
    this.contentHandlingStrategy = contentHandlingStrategy;
    return this;
  }

  /**
   * Get contentHandlingStrategy
   * @return contentHandlingStrategy
   */
  @javax.annotation.Nullable
  public ContentHandlingStrategy getContentHandlingStrategy() {
    return contentHandlingStrategy;
  }

  public void setContentHandlingStrategy(ContentHandlingStrategy contentHandlingStrategy) {
    this.contentHandlingStrategy = contentHandlingStrategy;
  }


  public GetIntegrationResponseResponse integrationResponseId(String integrationResponseId) {
    this.integrationResponseId = integrationResponseId;
    return this;
  }

  /**
   * Get integrationResponseId
   * @return integrationResponseId
   */
  @javax.annotation.Nullable
  public String getIntegrationResponseId() {
    return integrationResponseId;
  }

  public void setIntegrationResponseId(String integrationResponseId) {
    this.integrationResponseId = integrationResponseId;
  }


  public GetIntegrationResponseResponse integrationResponseKey(String integrationResponseKey) {
    this.integrationResponseKey = integrationResponseKey;
    return this;
  }

  /**
   * Get integrationResponseKey
   * @return integrationResponseKey
   */
  @javax.annotation.Nullable
  public String getIntegrationResponseKey() {
    return integrationResponseKey;
  }

  public void setIntegrationResponseKey(String integrationResponseKey) {
    this.integrationResponseKey = integrationResponseKey;
  }


  public GetIntegrationResponseResponse responseParameters(Map responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  /**
   * Get responseParameters
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(Map responseParameters) {
    this.responseParameters = responseParameters;
  }


  public GetIntegrationResponseResponse responseTemplates(Map responseTemplates) {
    this.responseTemplates = responseTemplates;
    return this;
  }

  /**
   * Get responseTemplates
   * @return responseTemplates
   */
  @javax.annotation.Nullable
  public Map getResponseTemplates() {
    return responseTemplates;
  }

  public void setResponseTemplates(Map responseTemplates) {
    this.responseTemplates = responseTemplates;
  }


  public GetIntegrationResponseResponse templateSelectionExpression(String templateSelectionExpression) {
    this.templateSelectionExpression = templateSelectionExpression;
    return this;
  }

  /**
   * Get templateSelectionExpression
   * @return templateSelectionExpression
   */
  @javax.annotation.Nullable
  public String getTemplateSelectionExpression() {
    return templateSelectionExpression;
  }

  public void setTemplateSelectionExpression(String templateSelectionExpression) {
    this.templateSelectionExpression = templateSelectionExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetIntegrationResponseResponse getIntegrationResponseResponse = (GetIntegrationResponseResponse) o;
    return Objects.equals(this.contentHandlingStrategy, getIntegrationResponseResponse.contentHandlingStrategy) &&
        Objects.equals(this.integrationResponseId, getIntegrationResponseResponse.integrationResponseId) &&
        Objects.equals(this.integrationResponseKey, getIntegrationResponseResponse.integrationResponseKey) &&
        Objects.equals(this.responseParameters, getIntegrationResponseResponse.responseParameters) &&
        Objects.equals(this.responseTemplates, getIntegrationResponseResponse.responseTemplates) &&
        Objects.equals(this.templateSelectionExpression, getIntegrationResponseResponse.templateSelectionExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentHandlingStrategy, integrationResponseId, integrationResponseKey, responseParameters, responseTemplates, templateSelectionExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetIntegrationResponseResponse {\n");
    sb.append("    contentHandlingStrategy: ").append(toIndentedString(contentHandlingStrategy)).append("\n");
    sb.append("    integrationResponseId: ").append(toIndentedString(integrationResponseId)).append("\n");
    sb.append("    integrationResponseKey: ").append(toIndentedString(integrationResponseKey)).append("\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    responseTemplates: ").append(toIndentedString(responseTemplates)).append("\n");
    sb.append("    templateSelectionExpression: ").append(toIndentedString(templateSelectionExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ContentHandlingStrategy");
    openapiFields.add("IntegrationResponseId");
    openapiFields.add("IntegrationResponseKey");
    openapiFields.add("ResponseParameters");
    openapiFields.add("ResponseTemplates");
    openapiFields.add("TemplateSelectionExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetIntegrationResponseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetIntegrationResponseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetIntegrationResponseResponse is not found in the empty JSON string", GetIntegrationResponseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetIntegrationResponseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetIntegrationResponseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ContentHandlingStrategy`
      if (jsonObj.get("ContentHandlingStrategy") != null && !jsonObj.get("ContentHandlingStrategy").isJsonNull()) {
        ContentHandlingStrategy.validateJsonElement(jsonObj.get("ContentHandlingStrategy"));
      }
      // validate the optional field `IntegrationResponseId`
      if (jsonObj.get("IntegrationResponseId") != null && !jsonObj.get("IntegrationResponseId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationResponseId"));
      }
      // validate the optional field `IntegrationResponseKey`
      if (jsonObj.get("IntegrationResponseKey") != null && !jsonObj.get("IntegrationResponseKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IntegrationResponseKey"));
      }
      // validate the optional field `ResponseParameters`
      if (jsonObj.get("ResponseParameters") != null && !jsonObj.get("ResponseParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ResponseParameters"));
      }
      // validate the optional field `ResponseTemplates`
      if (jsonObj.get("ResponseTemplates") != null && !jsonObj.get("ResponseTemplates").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ResponseTemplates"));
      }
      // validate the optional field `TemplateSelectionExpression`
      if (jsonObj.get("TemplateSelectionExpression") != null && !jsonObj.get("TemplateSelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("TemplateSelectionExpression"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetIntegrationResponseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetIntegrationResponseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetIntegrationResponseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetIntegrationResponseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetIntegrationResponseResponse>() {
           @Override
           public void write(JsonWriter out, GetIntegrationResponseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetIntegrationResponseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetIntegrationResponseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetIntegrationResponseResponse
   * @throws IOException if the JSON string is invalid with respect to GetIntegrationResponseResponse
   */
  public static GetIntegrationResponseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetIntegrationResponseResponse.class);
  }

  /**
   * Convert an instance of GetIntegrationResponseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

