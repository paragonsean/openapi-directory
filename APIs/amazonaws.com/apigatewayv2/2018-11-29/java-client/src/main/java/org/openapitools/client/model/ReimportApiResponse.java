/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateApiResponseCorsConfiguration;
import org.openapitools.client.model.ProtocolType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReimportApiResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReimportApiResponse {
  public static final String SERIALIZED_NAME_API_ENDPOINT = "ApiEndpoint";
  @SerializedName(SERIALIZED_NAME_API_ENDPOINT)
  private String apiEndpoint;

  public static final String SERIALIZED_NAME_API_GATEWAY_MANAGED = "ApiGatewayManaged";
  @SerializedName(SERIALIZED_NAME_API_GATEWAY_MANAGED)
  private Boolean apiGatewayManaged;

  public static final String SERIALIZED_NAME_API_ID = "ApiId";
  @SerializedName(SERIALIZED_NAME_API_ID)
  private String apiId;

  public static final String SERIALIZED_NAME_API_KEY_SELECTION_EXPRESSION = "ApiKeySelectionExpression";
  @SerializedName(SERIALIZED_NAME_API_KEY_SELECTION_EXPRESSION)
  private String apiKeySelectionExpression;

  public static final String SERIALIZED_NAME_CORS_CONFIGURATION = "CorsConfiguration";
  @SerializedName(SERIALIZED_NAME_CORS_CONFIGURATION)
  private CreateApiResponseCorsConfiguration corsConfiguration;

  public static final String SERIALIZED_NAME_CREATED_DATE = "CreatedDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "Description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLE_SCHEMA_VALIDATION = "DisableSchemaValidation";
  @SerializedName(SERIALIZED_NAME_DISABLE_SCHEMA_VALIDATION)
  private Boolean disableSchemaValidation;

  public static final String SERIALIZED_NAME_DISABLE_EXECUTE_API_ENDPOINT = "DisableExecuteApiEndpoint";
  @SerializedName(SERIALIZED_NAME_DISABLE_EXECUTE_API_ENDPOINT)
  private Boolean disableExecuteApiEndpoint;

  public static final String SERIALIZED_NAME_IMPORT_INFO = "ImportInfo";
  @SerializedName(SERIALIZED_NAME_IMPORT_INFO)
  private List importInfo;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROTOCOL_TYPE = "ProtocolType";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_TYPE)
  private ProtocolType protocolType;

  public static final String SERIALIZED_NAME_ROUTE_SELECTION_EXPRESSION = "RouteSelectionExpression";
  @SerializedName(SERIALIZED_NAME_ROUTE_SELECTION_EXPRESSION)
  private String routeSelectionExpression;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_WARNINGS = "Warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List warnings;

  public ReimportApiResponse() {
  }

  public ReimportApiResponse apiEndpoint(String apiEndpoint) {
    this.apiEndpoint = apiEndpoint;
    return this;
  }

  /**
   * Get apiEndpoint
   * @return apiEndpoint
   */
  @javax.annotation.Nullable
  public String getApiEndpoint() {
    return apiEndpoint;
  }

  public void setApiEndpoint(String apiEndpoint) {
    this.apiEndpoint = apiEndpoint;
  }


  public ReimportApiResponse apiGatewayManaged(Boolean apiGatewayManaged) {
    this.apiGatewayManaged = apiGatewayManaged;
    return this;
  }

  /**
   * Get apiGatewayManaged
   * @return apiGatewayManaged
   */
  @javax.annotation.Nullable
  public Boolean getApiGatewayManaged() {
    return apiGatewayManaged;
  }

  public void setApiGatewayManaged(Boolean apiGatewayManaged) {
    this.apiGatewayManaged = apiGatewayManaged;
  }


  public ReimportApiResponse apiId(String apiId) {
    this.apiId = apiId;
    return this;
  }

  /**
   * Get apiId
   * @return apiId
   */
  @javax.annotation.Nullable
  public String getApiId() {
    return apiId;
  }

  public void setApiId(String apiId) {
    this.apiId = apiId;
  }


  public ReimportApiResponse apiKeySelectionExpression(String apiKeySelectionExpression) {
    this.apiKeySelectionExpression = apiKeySelectionExpression;
    return this;
  }

  /**
   * Get apiKeySelectionExpression
   * @return apiKeySelectionExpression
   */
  @javax.annotation.Nullable
  public String getApiKeySelectionExpression() {
    return apiKeySelectionExpression;
  }

  public void setApiKeySelectionExpression(String apiKeySelectionExpression) {
    this.apiKeySelectionExpression = apiKeySelectionExpression;
  }


  public ReimportApiResponse corsConfiguration(CreateApiResponseCorsConfiguration corsConfiguration) {
    this.corsConfiguration = corsConfiguration;
    return this;
  }

  /**
   * Get corsConfiguration
   * @return corsConfiguration
   */
  @javax.annotation.Nullable
  public CreateApiResponseCorsConfiguration getCorsConfiguration() {
    return corsConfiguration;
  }

  public void setCorsConfiguration(CreateApiResponseCorsConfiguration corsConfiguration) {
    this.corsConfiguration = corsConfiguration;
  }


  public ReimportApiResponse createdDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  /**
   * Get createdDate
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public ReimportApiResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ReimportApiResponse disableSchemaValidation(Boolean disableSchemaValidation) {
    this.disableSchemaValidation = disableSchemaValidation;
    return this;
  }

  /**
   * Get disableSchemaValidation
   * @return disableSchemaValidation
   */
  @javax.annotation.Nullable
  public Boolean getDisableSchemaValidation() {
    return disableSchemaValidation;
  }

  public void setDisableSchemaValidation(Boolean disableSchemaValidation) {
    this.disableSchemaValidation = disableSchemaValidation;
  }


  public ReimportApiResponse disableExecuteApiEndpoint(Boolean disableExecuteApiEndpoint) {
    this.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
    return this;
  }

  /**
   * Get disableExecuteApiEndpoint
   * @return disableExecuteApiEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getDisableExecuteApiEndpoint() {
    return disableExecuteApiEndpoint;
  }

  public void setDisableExecuteApiEndpoint(Boolean disableExecuteApiEndpoint) {
    this.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
  }


  public ReimportApiResponse importInfo(List importInfo) {
    this.importInfo = importInfo;
    return this;
  }

  /**
   * Get importInfo
   * @return importInfo
   */
  @javax.annotation.Nullable
  public List getImportInfo() {
    return importInfo;
  }

  public void setImportInfo(List importInfo) {
    this.importInfo = importInfo;
  }


  public ReimportApiResponse name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReimportApiResponse protocolType(ProtocolType protocolType) {
    this.protocolType = protocolType;
    return this;
  }

  /**
   * Get protocolType
   * @return protocolType
   */
  @javax.annotation.Nullable
  public ProtocolType getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(ProtocolType protocolType) {
    this.protocolType = protocolType;
  }


  public ReimportApiResponse routeSelectionExpression(String routeSelectionExpression) {
    this.routeSelectionExpression = routeSelectionExpression;
    return this;
  }

  /**
   * Get routeSelectionExpression
   * @return routeSelectionExpression
   */
  @javax.annotation.Nullable
  public String getRouteSelectionExpression() {
    return routeSelectionExpression;
  }

  public void setRouteSelectionExpression(String routeSelectionExpression) {
    this.routeSelectionExpression = routeSelectionExpression;
  }


  public ReimportApiResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }


  public ReimportApiResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public ReimportApiResponse warnings(List warnings) {
    this.warnings = warnings;
    return this;
  }

  /**
   * Get warnings
   * @return warnings
   */
  @javax.annotation.Nullable
  public List getWarnings() {
    return warnings;
  }

  public void setWarnings(List warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReimportApiResponse reimportApiResponse = (ReimportApiResponse) o;
    return Objects.equals(this.apiEndpoint, reimportApiResponse.apiEndpoint) &&
        Objects.equals(this.apiGatewayManaged, reimportApiResponse.apiGatewayManaged) &&
        Objects.equals(this.apiId, reimportApiResponse.apiId) &&
        Objects.equals(this.apiKeySelectionExpression, reimportApiResponse.apiKeySelectionExpression) &&
        Objects.equals(this.corsConfiguration, reimportApiResponse.corsConfiguration) &&
        Objects.equals(this.createdDate, reimportApiResponse.createdDate) &&
        Objects.equals(this.description, reimportApiResponse.description) &&
        Objects.equals(this.disableSchemaValidation, reimportApiResponse.disableSchemaValidation) &&
        Objects.equals(this.disableExecuteApiEndpoint, reimportApiResponse.disableExecuteApiEndpoint) &&
        Objects.equals(this.importInfo, reimportApiResponse.importInfo) &&
        Objects.equals(this.name, reimportApiResponse.name) &&
        Objects.equals(this.protocolType, reimportApiResponse.protocolType) &&
        Objects.equals(this.routeSelectionExpression, reimportApiResponse.routeSelectionExpression) &&
        Objects.equals(this.tags, reimportApiResponse.tags) &&
        Objects.equals(this.version, reimportApiResponse.version) &&
        Objects.equals(this.warnings, reimportApiResponse.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiEndpoint, apiGatewayManaged, apiId, apiKeySelectionExpression, corsConfiguration, createdDate, description, disableSchemaValidation, disableExecuteApiEndpoint, importInfo, name, protocolType, routeSelectionExpression, tags, version, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReimportApiResponse {\n");
    sb.append("    apiEndpoint: ").append(toIndentedString(apiEndpoint)).append("\n");
    sb.append("    apiGatewayManaged: ").append(toIndentedString(apiGatewayManaged)).append("\n");
    sb.append("    apiId: ").append(toIndentedString(apiId)).append("\n");
    sb.append("    apiKeySelectionExpression: ").append(toIndentedString(apiKeySelectionExpression)).append("\n");
    sb.append("    corsConfiguration: ").append(toIndentedString(corsConfiguration)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableSchemaValidation: ").append(toIndentedString(disableSchemaValidation)).append("\n");
    sb.append("    disableExecuteApiEndpoint: ").append(toIndentedString(disableExecuteApiEndpoint)).append("\n");
    sb.append("    importInfo: ").append(toIndentedString(importInfo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("    routeSelectionExpression: ").append(toIndentedString(routeSelectionExpression)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiEndpoint");
    openapiFields.add("ApiGatewayManaged");
    openapiFields.add("ApiId");
    openapiFields.add("ApiKeySelectionExpression");
    openapiFields.add("CorsConfiguration");
    openapiFields.add("CreatedDate");
    openapiFields.add("Description");
    openapiFields.add("DisableSchemaValidation");
    openapiFields.add("DisableExecuteApiEndpoint");
    openapiFields.add("ImportInfo");
    openapiFields.add("Name");
    openapiFields.add("ProtocolType");
    openapiFields.add("RouteSelectionExpression");
    openapiFields.add("Tags");
    openapiFields.add("Version");
    openapiFields.add("Warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReimportApiResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReimportApiResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReimportApiResponse is not found in the empty JSON string", ReimportApiResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReimportApiResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReimportApiResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApiEndpoint`
      if (jsonObj.get("ApiEndpoint") != null && !jsonObj.get("ApiEndpoint").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiEndpoint"));
      }
      // validate the optional field `ApiGatewayManaged`
      if (jsonObj.get("ApiGatewayManaged") != null && !jsonObj.get("ApiGatewayManaged").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApiGatewayManaged"));
      }
      // validate the optional field `ApiId`
      if (jsonObj.get("ApiId") != null && !jsonObj.get("ApiId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiId"));
      }
      // validate the optional field `ApiKeySelectionExpression`
      if (jsonObj.get("ApiKeySelectionExpression") != null && !jsonObj.get("ApiKeySelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiKeySelectionExpression"));
      }
      // validate the optional field `CorsConfiguration`
      if (jsonObj.get("CorsConfiguration") != null && !jsonObj.get("CorsConfiguration").isJsonNull()) {
        CreateApiResponseCorsConfiguration.validateJsonElement(jsonObj.get("CorsConfiguration"));
      }
      // validate the optional field `CreatedDate`
      if (jsonObj.get("CreatedDate") != null && !jsonObj.get("CreatedDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CreatedDate"));
      }
      // validate the optional field `Description`
      if (jsonObj.get("Description") != null && !jsonObj.get("Description").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Description"));
      }
      // validate the optional field `DisableSchemaValidation`
      if (jsonObj.get("DisableSchemaValidation") != null && !jsonObj.get("DisableSchemaValidation").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DisableSchemaValidation"));
      }
      // validate the optional field `DisableExecuteApiEndpoint`
      if (jsonObj.get("DisableExecuteApiEndpoint") != null && !jsonObj.get("DisableExecuteApiEndpoint").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("DisableExecuteApiEndpoint"));
      }
      // validate the optional field `ImportInfo`
      if (jsonObj.get("ImportInfo") != null && !jsonObj.get("ImportInfo").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("ImportInfo"));
      }
      // validate the optional field `Name`
      if (jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Name"));
      }
      // validate the optional field `ProtocolType`
      if (jsonObj.get("ProtocolType") != null && !jsonObj.get("ProtocolType").isJsonNull()) {
        ProtocolType.validateJsonElement(jsonObj.get("ProtocolType"));
      }
      // validate the optional field `RouteSelectionExpression`
      if (jsonObj.get("RouteSelectionExpression") != null && !jsonObj.get("RouteSelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RouteSelectionExpression"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
      // validate the optional field `Version`
      if (jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Version"));
      }
      // validate the optional field `Warnings`
      if (jsonObj.get("Warnings") != null && !jsonObj.get("Warnings").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("Warnings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReimportApiResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReimportApiResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReimportApiResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReimportApiResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ReimportApiResponse>() {
           @Override
           public void write(JsonWriter out, ReimportApiResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReimportApiResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReimportApiResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReimportApiResponse
   * @throws IOException if the JSON string is invalid with respect to ReimportApiResponse
   */
  public static ReimportApiResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReimportApiResponse.class);
  }

  /**
   * Convert an instance of ReimportApiResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

