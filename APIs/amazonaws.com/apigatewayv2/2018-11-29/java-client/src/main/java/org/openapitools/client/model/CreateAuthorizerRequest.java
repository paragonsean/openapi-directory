/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateAuthorizerRequestJwtConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateAuthorizerRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateAuthorizerRequest {
  public static final String SERIALIZED_NAME_AUTHORIZER_CREDENTIALS_ARN = "authorizerCredentialsArn";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_CREDENTIALS_ARN)
  private String authorizerCredentialsArn;

  public static final String SERIALIZED_NAME_AUTHORIZER_PAYLOAD_FORMAT_VERSION = "authorizerPayloadFormatVersion";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_PAYLOAD_FORMAT_VERSION)
  private String authorizerPayloadFormatVersion;

  public static final String SERIALIZED_NAME_AUTHORIZER_RESULT_TTL_IN_SECONDS = "authorizerResultTtlInSeconds";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_RESULT_TTL_IN_SECONDS)
  private Integer authorizerResultTtlInSeconds;

  /**
   * The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
   */
  @JsonAdapter(AuthorizerTypeEnum.Adapter.class)
  public enum AuthorizerTypeEnum {
    REQUEST("REQUEST"),
    
    JWT("JWT");

    private String value;

    AuthorizerTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizerTypeEnum fromValue(String value) {
      for (AuthorizerTypeEnum b : AuthorizerTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizerTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizerTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizerTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizerTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizerTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZER_TYPE = "authorizerType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_TYPE)
  private AuthorizerTypeEnum authorizerType;

  public static final String SERIALIZED_NAME_AUTHORIZER_URI = "authorizerUri";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_URI)
  private String authorizerUri;

  public static final String SERIALIZED_NAME_ENABLE_SIMPLE_RESPONSES = "enableSimpleResponses";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIMPLE_RESPONSES)
  private Boolean enableSimpleResponses;

  public static final String SERIALIZED_NAME_IDENTITY_SOURCE = "identitySource";
  @SerializedName(SERIALIZED_NAME_IDENTITY_SOURCE)
  private List<String> identitySource = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTITY_VALIDATION_EXPRESSION = "identityValidationExpression";
  @SerializedName(SERIALIZED_NAME_IDENTITY_VALIDATION_EXPRESSION)
  private String identityValidationExpression;

  public static final String SERIALIZED_NAME_JWT_CONFIGURATION = "jwtConfiguration";
  @SerializedName(SERIALIZED_NAME_JWT_CONFIGURATION)
  private CreateAuthorizerRequestJwtConfiguration jwtConfiguration;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public CreateAuthorizerRequest() {
  }

  public CreateAuthorizerRequest authorizerCredentialsArn(String authorizerCredentialsArn) {
    this.authorizerCredentialsArn = authorizerCredentialsArn;
    return this;
  }

  /**
   * Represents an Amazon Resource Name (ARN).
   * @return authorizerCredentialsArn
   */
  @javax.annotation.Nullable
  public String getAuthorizerCredentialsArn() {
    return authorizerCredentialsArn;
  }

  public void setAuthorizerCredentialsArn(String authorizerCredentialsArn) {
    this.authorizerCredentialsArn = authorizerCredentialsArn;
  }


  public CreateAuthorizerRequest authorizerPayloadFormatVersion(String authorizerPayloadFormatVersion) {
    this.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion;
    return this;
  }

  /**
   * A string with a length between [1-64].
   * @return authorizerPayloadFormatVersion
   */
  @javax.annotation.Nullable
  public String getAuthorizerPayloadFormatVersion() {
    return authorizerPayloadFormatVersion;
  }

  public void setAuthorizerPayloadFormatVersion(String authorizerPayloadFormatVersion) {
    this.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion;
  }


  public CreateAuthorizerRequest authorizerResultTtlInSeconds(Integer authorizerResultTtlInSeconds) {
    this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
    return this;
  }

  /**
   * An integer with a value between [0-3600].
   * minimum: 0
   * maximum: 3600
   * @return authorizerResultTtlInSeconds
   */
  @javax.annotation.Nullable
  public Integer getAuthorizerResultTtlInSeconds() {
    return authorizerResultTtlInSeconds;
  }

  public void setAuthorizerResultTtlInSeconds(Integer authorizerResultTtlInSeconds) {
    this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
  }


  public CreateAuthorizerRequest authorizerType(AuthorizerTypeEnum authorizerType) {
    this.authorizerType = authorizerType;
    return this;
  }

  /**
   * The authorizer type. Specify REQUEST for a Lambda function using incoming request parameters. Specify JWT to use JSON Web Tokens (supported only for HTTP APIs).
   * @return authorizerType
   */
  @javax.annotation.Nonnull
  public AuthorizerTypeEnum getAuthorizerType() {
    return authorizerType;
  }

  public void setAuthorizerType(AuthorizerTypeEnum authorizerType) {
    this.authorizerType = authorizerType;
  }


  public CreateAuthorizerRequest authorizerUri(String authorizerUri) {
    this.authorizerUri = authorizerUri;
    return this;
  }

  /**
   * A string representation of a URI with a length between [1-2048].
   * @return authorizerUri
   */
  @javax.annotation.Nullable
  public String getAuthorizerUri() {
    return authorizerUri;
  }

  public void setAuthorizerUri(String authorizerUri) {
    this.authorizerUri = authorizerUri;
  }


  public CreateAuthorizerRequest enableSimpleResponses(Boolean enableSimpleResponses) {
    this.enableSimpleResponses = enableSimpleResponses;
    return this;
  }

  /**
   * Specifies whether a Lambda authorizer returns a response in a simple format. By default, a Lambda authorizer must return an IAM policy. If enabled, the Lambda authorizer can return a boolean value instead of an IAM policy. Supported only for HTTP APIs. To learn more, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-lambda-authorizer.html\&quot;&gt;Working with AWS Lambda authorizers for HTTP APIs&lt;/a&gt;
   * @return enableSimpleResponses
   */
  @javax.annotation.Nullable
  public Boolean getEnableSimpleResponses() {
    return enableSimpleResponses;
  }

  public void setEnableSimpleResponses(Boolean enableSimpleResponses) {
    this.enableSimpleResponses = enableSimpleResponses;
  }


  public CreateAuthorizerRequest identitySource(List<String> identitySource) {
    this.identitySource = identitySource;
    return this;
  }

  public CreateAuthorizerRequest addIdentitySourceItem(String identitySourceItem) {
    if (this.identitySource == null) {
      this.identitySource = new ArrayList<>();
    }
    this.identitySource.add(identitySourceItem);
    return this;
  }

  /**
   * The identity source for which authorization is requested. For the REQUEST authorizer, this is required when authorization caching is enabled. The value is a comma-separated string of one or more mapping expressions of the specified request parameters. For example, if an Auth header, a Name query string parameter are defined as identity sources, this value is $method.request.header.Auth, $method.request.querystring.Name. These parameters will be used to derive the authorization caching key and to perform runtime validation of the REQUEST authorizer by verifying all of the identity-related request parameters are present, not null and non-empty. Only when this is true does the authorizer invoke the authorizer Lambda function, otherwise, it returns a 401 Unauthorized response without calling the Lambda function. The valid value is a string of comma-separated mapping expressions of the specified request parameters. When the authorization caching is not enabled, this property is optional.
   * @return identitySource
   */
  @javax.annotation.Nonnull
  public List<String> getIdentitySource() {
    return identitySource;
  }

  public void setIdentitySource(List<String> identitySource) {
    this.identitySource = identitySource;
  }


  public CreateAuthorizerRequest identityValidationExpression(String identityValidationExpression) {
    this.identityValidationExpression = identityValidationExpression;
    return this;
  }

  /**
   * A string with a length between [0-1024].
   * @return identityValidationExpression
   */
  @javax.annotation.Nullable
  public String getIdentityValidationExpression() {
    return identityValidationExpression;
  }

  public void setIdentityValidationExpression(String identityValidationExpression) {
    this.identityValidationExpression = identityValidationExpression;
  }


  public CreateAuthorizerRequest jwtConfiguration(CreateAuthorizerRequestJwtConfiguration jwtConfiguration) {
    this.jwtConfiguration = jwtConfiguration;
    return this;
  }

  /**
   * Get jwtConfiguration
   * @return jwtConfiguration
   */
  @javax.annotation.Nullable
  public CreateAuthorizerRequestJwtConfiguration getJwtConfiguration() {
    return jwtConfiguration;
  }

  public void setJwtConfiguration(CreateAuthorizerRequestJwtConfiguration jwtConfiguration) {
    this.jwtConfiguration = jwtConfiguration;
  }


  public CreateAuthorizerRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A string with a length between [1-128].
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAuthorizerRequest createAuthorizerRequest = (CreateAuthorizerRequest) o;
    return Objects.equals(this.authorizerCredentialsArn, createAuthorizerRequest.authorizerCredentialsArn) &&
        Objects.equals(this.authorizerPayloadFormatVersion, createAuthorizerRequest.authorizerPayloadFormatVersion) &&
        Objects.equals(this.authorizerResultTtlInSeconds, createAuthorizerRequest.authorizerResultTtlInSeconds) &&
        Objects.equals(this.authorizerType, createAuthorizerRequest.authorizerType) &&
        Objects.equals(this.authorizerUri, createAuthorizerRequest.authorizerUri) &&
        Objects.equals(this.enableSimpleResponses, createAuthorizerRequest.enableSimpleResponses) &&
        Objects.equals(this.identitySource, createAuthorizerRequest.identitySource) &&
        Objects.equals(this.identityValidationExpression, createAuthorizerRequest.identityValidationExpression) &&
        Objects.equals(this.jwtConfiguration, createAuthorizerRequest.jwtConfiguration) &&
        Objects.equals(this.name, createAuthorizerRequest.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizerCredentialsArn, authorizerPayloadFormatVersion, authorizerResultTtlInSeconds, authorizerType, authorizerUri, enableSimpleResponses, identitySource, identityValidationExpression, jwtConfiguration, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAuthorizerRequest {\n");
    sb.append("    authorizerCredentialsArn: ").append(toIndentedString(authorizerCredentialsArn)).append("\n");
    sb.append("    authorizerPayloadFormatVersion: ").append(toIndentedString(authorizerPayloadFormatVersion)).append("\n");
    sb.append("    authorizerResultTtlInSeconds: ").append(toIndentedString(authorizerResultTtlInSeconds)).append("\n");
    sb.append("    authorizerType: ").append(toIndentedString(authorizerType)).append("\n");
    sb.append("    authorizerUri: ").append(toIndentedString(authorizerUri)).append("\n");
    sb.append("    enableSimpleResponses: ").append(toIndentedString(enableSimpleResponses)).append("\n");
    sb.append("    identitySource: ").append(toIndentedString(identitySource)).append("\n");
    sb.append("    identityValidationExpression: ").append(toIndentedString(identityValidationExpression)).append("\n");
    sb.append("    jwtConfiguration: ").append(toIndentedString(jwtConfiguration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizerCredentialsArn");
    openapiFields.add("authorizerPayloadFormatVersion");
    openapiFields.add("authorizerResultTtlInSeconds");
    openapiFields.add("authorizerType");
    openapiFields.add("authorizerUri");
    openapiFields.add("enableSimpleResponses");
    openapiFields.add("identitySource");
    openapiFields.add("identityValidationExpression");
    openapiFields.add("jwtConfiguration");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("authorizerType");
    openapiRequiredFields.add("identitySource");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAuthorizerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateAuthorizerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAuthorizerRequest is not found in the empty JSON string", CreateAuthorizerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAuthorizerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAuthorizerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAuthorizerRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorizerCredentialsArn") != null && !jsonObj.get("authorizerCredentialsArn").isJsonNull()) && !jsonObj.get("authorizerCredentialsArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizerCredentialsArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizerCredentialsArn").toString()));
      }
      if ((jsonObj.get("authorizerPayloadFormatVersion") != null && !jsonObj.get("authorizerPayloadFormatVersion").isJsonNull()) && !jsonObj.get("authorizerPayloadFormatVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizerPayloadFormatVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizerPayloadFormatVersion").toString()));
      }
      if (!jsonObj.get("authorizerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizerType").toString()));
      }
      // validate the required field `authorizerType`
      AuthorizerTypeEnum.validateJsonElement(jsonObj.get("authorizerType"));
      if ((jsonObj.get("authorizerUri") != null && !jsonObj.get("authorizerUri").isJsonNull()) && !jsonObj.get("authorizerUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizerUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizerUri").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("identitySource") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("identitySource").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `identitySource` to be an array in the JSON string but got `%s`", jsonObj.get("identitySource").toString()));
      }
      if ((jsonObj.get("identityValidationExpression") != null && !jsonObj.get("identityValidationExpression").isJsonNull()) && !jsonObj.get("identityValidationExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityValidationExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityValidationExpression").toString()));
      }
      // validate the optional field `jwtConfiguration`
      if (jsonObj.get("jwtConfiguration") != null && !jsonObj.get("jwtConfiguration").isJsonNull()) {
        CreateAuthorizerRequestJwtConfiguration.validateJsonElement(jsonObj.get("jwtConfiguration"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAuthorizerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAuthorizerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAuthorizerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAuthorizerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAuthorizerRequest>() {
           @Override
           public void write(JsonWriter out, CreateAuthorizerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAuthorizerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAuthorizerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAuthorizerRequest
   * @throws IOException if the JSON string is invalid with respect to CreateAuthorizerRequest
   */
  public static CreateAuthorizerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAuthorizerRequest.class);
  }

  /**
   * Convert an instance of CreateAuthorizerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

