/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AuthorizerType;
import org.openapitools.client.model.CreateAuthorizerResponseJwtConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an authorizer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Authorizer {
  public static final String SERIALIZED_NAME_AUTHORIZER_CREDENTIALS_ARN = "AuthorizerCredentialsArn";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_CREDENTIALS_ARN)
  private String authorizerCredentialsArn;

  public static final String SERIALIZED_NAME_AUTHORIZER_ID = "AuthorizerId";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_ID)
  private String authorizerId;

  public static final String SERIALIZED_NAME_AUTHORIZER_PAYLOAD_FORMAT_VERSION = "AuthorizerPayloadFormatVersion";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_PAYLOAD_FORMAT_VERSION)
  private String authorizerPayloadFormatVersion;

  public static final String SERIALIZED_NAME_AUTHORIZER_RESULT_TTL_IN_SECONDS = "AuthorizerResultTtlInSeconds";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_RESULT_TTL_IN_SECONDS)
  private Integer authorizerResultTtlInSeconds;

  public static final String SERIALIZED_NAME_AUTHORIZER_TYPE = "AuthorizerType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_TYPE)
  private AuthorizerType authorizerType;

  public static final String SERIALIZED_NAME_AUTHORIZER_URI = "AuthorizerUri";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_URI)
  private String authorizerUri;

  public static final String SERIALIZED_NAME_ENABLE_SIMPLE_RESPONSES = "EnableSimpleResponses";
  @SerializedName(SERIALIZED_NAME_ENABLE_SIMPLE_RESPONSES)
  private Boolean enableSimpleResponses;

  public static final String SERIALIZED_NAME_IDENTITY_SOURCE = "IdentitySource";
  @SerializedName(SERIALIZED_NAME_IDENTITY_SOURCE)
  private List identitySource;

  public static final String SERIALIZED_NAME_IDENTITY_VALIDATION_EXPRESSION = "IdentityValidationExpression";
  @SerializedName(SERIALIZED_NAME_IDENTITY_VALIDATION_EXPRESSION)
  private String identityValidationExpression;

  public static final String SERIALIZED_NAME_JWT_CONFIGURATION = "JwtConfiguration";
  @SerializedName(SERIALIZED_NAME_JWT_CONFIGURATION)
  private CreateAuthorizerResponseJwtConfiguration jwtConfiguration;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public Authorizer() {
  }

  public Authorizer authorizerCredentialsArn(String authorizerCredentialsArn) {
    this.authorizerCredentialsArn = authorizerCredentialsArn;
    return this;
  }

  /**
   * Get authorizerCredentialsArn
   * @return authorizerCredentialsArn
   */
  @javax.annotation.Nullable
  public String getAuthorizerCredentialsArn() {
    return authorizerCredentialsArn;
  }

  public void setAuthorizerCredentialsArn(String authorizerCredentialsArn) {
    this.authorizerCredentialsArn = authorizerCredentialsArn;
  }


  public Authorizer authorizerId(String authorizerId) {
    this.authorizerId = authorizerId;
    return this;
  }

  /**
   * Get authorizerId
   * @return authorizerId
   */
  @javax.annotation.Nullable
  public String getAuthorizerId() {
    return authorizerId;
  }

  public void setAuthorizerId(String authorizerId) {
    this.authorizerId = authorizerId;
  }


  public Authorizer authorizerPayloadFormatVersion(String authorizerPayloadFormatVersion) {
    this.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion;
    return this;
  }

  /**
   * Get authorizerPayloadFormatVersion
   * @return authorizerPayloadFormatVersion
   */
  @javax.annotation.Nullable
  public String getAuthorizerPayloadFormatVersion() {
    return authorizerPayloadFormatVersion;
  }

  public void setAuthorizerPayloadFormatVersion(String authorizerPayloadFormatVersion) {
    this.authorizerPayloadFormatVersion = authorizerPayloadFormatVersion;
  }


  public Authorizer authorizerResultTtlInSeconds(Integer authorizerResultTtlInSeconds) {
    this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
    return this;
  }

  /**
   * Get authorizerResultTtlInSeconds
   * @return authorizerResultTtlInSeconds
   */
  @javax.annotation.Nullable
  public Integer getAuthorizerResultTtlInSeconds() {
    return authorizerResultTtlInSeconds;
  }

  public void setAuthorizerResultTtlInSeconds(Integer authorizerResultTtlInSeconds) {
    this.authorizerResultTtlInSeconds = authorizerResultTtlInSeconds;
  }


  public Authorizer authorizerType(AuthorizerType authorizerType) {
    this.authorizerType = authorizerType;
    return this;
  }

  /**
   * Get authorizerType
   * @return authorizerType
   */
  @javax.annotation.Nullable
  public AuthorizerType getAuthorizerType() {
    return authorizerType;
  }

  public void setAuthorizerType(AuthorizerType authorizerType) {
    this.authorizerType = authorizerType;
  }


  public Authorizer authorizerUri(String authorizerUri) {
    this.authorizerUri = authorizerUri;
    return this;
  }

  /**
   * Get authorizerUri
   * @return authorizerUri
   */
  @javax.annotation.Nullable
  public String getAuthorizerUri() {
    return authorizerUri;
  }

  public void setAuthorizerUri(String authorizerUri) {
    this.authorizerUri = authorizerUri;
  }


  public Authorizer enableSimpleResponses(Boolean enableSimpleResponses) {
    this.enableSimpleResponses = enableSimpleResponses;
    return this;
  }

  /**
   * Get enableSimpleResponses
   * @return enableSimpleResponses
   */
  @javax.annotation.Nullable
  public Boolean getEnableSimpleResponses() {
    return enableSimpleResponses;
  }

  public void setEnableSimpleResponses(Boolean enableSimpleResponses) {
    this.enableSimpleResponses = enableSimpleResponses;
  }


  public Authorizer identitySource(List identitySource) {
    this.identitySource = identitySource;
    return this;
  }

  /**
   * Get identitySource
   * @return identitySource
   */
  @javax.annotation.Nullable
  public List getIdentitySource() {
    return identitySource;
  }

  public void setIdentitySource(List identitySource) {
    this.identitySource = identitySource;
  }


  public Authorizer identityValidationExpression(String identityValidationExpression) {
    this.identityValidationExpression = identityValidationExpression;
    return this;
  }

  /**
   * Get identityValidationExpression
   * @return identityValidationExpression
   */
  @javax.annotation.Nullable
  public String getIdentityValidationExpression() {
    return identityValidationExpression;
  }

  public void setIdentityValidationExpression(String identityValidationExpression) {
    this.identityValidationExpression = identityValidationExpression;
  }


  public Authorizer jwtConfiguration(CreateAuthorizerResponseJwtConfiguration jwtConfiguration) {
    this.jwtConfiguration = jwtConfiguration;
    return this;
  }

  /**
   * Get jwtConfiguration
   * @return jwtConfiguration
   */
  @javax.annotation.Nullable
  public CreateAuthorizerResponseJwtConfiguration getJwtConfiguration() {
    return jwtConfiguration;
  }

  public void setJwtConfiguration(CreateAuthorizerResponseJwtConfiguration jwtConfiguration) {
    this.jwtConfiguration = jwtConfiguration;
  }


  public Authorizer name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Authorizer authorizer = (Authorizer) o;
    return Objects.equals(this.authorizerCredentialsArn, authorizer.authorizerCredentialsArn) &&
        Objects.equals(this.authorizerId, authorizer.authorizerId) &&
        Objects.equals(this.authorizerPayloadFormatVersion, authorizer.authorizerPayloadFormatVersion) &&
        Objects.equals(this.authorizerResultTtlInSeconds, authorizer.authorizerResultTtlInSeconds) &&
        Objects.equals(this.authorizerType, authorizer.authorizerType) &&
        Objects.equals(this.authorizerUri, authorizer.authorizerUri) &&
        Objects.equals(this.enableSimpleResponses, authorizer.enableSimpleResponses) &&
        Objects.equals(this.identitySource, authorizer.identitySource) &&
        Objects.equals(this.identityValidationExpression, authorizer.identityValidationExpression) &&
        Objects.equals(this.jwtConfiguration, authorizer.jwtConfiguration) &&
        Objects.equals(this.name, authorizer.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizerCredentialsArn, authorizerId, authorizerPayloadFormatVersion, authorizerResultTtlInSeconds, authorizerType, authorizerUri, enableSimpleResponses, identitySource, identityValidationExpression, jwtConfiguration, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Authorizer {\n");
    sb.append("    authorizerCredentialsArn: ").append(toIndentedString(authorizerCredentialsArn)).append("\n");
    sb.append("    authorizerId: ").append(toIndentedString(authorizerId)).append("\n");
    sb.append("    authorizerPayloadFormatVersion: ").append(toIndentedString(authorizerPayloadFormatVersion)).append("\n");
    sb.append("    authorizerResultTtlInSeconds: ").append(toIndentedString(authorizerResultTtlInSeconds)).append("\n");
    sb.append("    authorizerType: ").append(toIndentedString(authorizerType)).append("\n");
    sb.append("    authorizerUri: ").append(toIndentedString(authorizerUri)).append("\n");
    sb.append("    enableSimpleResponses: ").append(toIndentedString(enableSimpleResponses)).append("\n");
    sb.append("    identitySource: ").append(toIndentedString(identitySource)).append("\n");
    sb.append("    identityValidationExpression: ").append(toIndentedString(identityValidationExpression)).append("\n");
    sb.append("    jwtConfiguration: ").append(toIndentedString(jwtConfiguration)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AuthorizerCredentialsArn");
    openapiFields.add("AuthorizerId");
    openapiFields.add("AuthorizerPayloadFormatVersion");
    openapiFields.add("AuthorizerResultTtlInSeconds");
    openapiFields.add("AuthorizerType");
    openapiFields.add("AuthorizerUri");
    openapiFields.add("EnableSimpleResponses");
    openapiFields.add("IdentitySource");
    openapiFields.add("IdentityValidationExpression");
    openapiFields.add("JwtConfiguration");
    openapiFields.add("Name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Authorizer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Authorizer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Authorizer is not found in the empty JSON string", Authorizer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Authorizer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Authorizer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Authorizer.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AuthorizerCredentialsArn`
      if (jsonObj.get("AuthorizerCredentialsArn") != null && !jsonObj.get("AuthorizerCredentialsArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthorizerCredentialsArn"));
      }
      // validate the optional field `AuthorizerId`
      if (jsonObj.get("AuthorizerId") != null && !jsonObj.get("AuthorizerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthorizerId"));
      }
      // validate the optional field `AuthorizerPayloadFormatVersion`
      if (jsonObj.get("AuthorizerPayloadFormatVersion") != null && !jsonObj.get("AuthorizerPayloadFormatVersion").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthorizerPayloadFormatVersion"));
      }
      // validate the optional field `AuthorizerResultTtlInSeconds`
      if (jsonObj.get("AuthorizerResultTtlInSeconds") != null && !jsonObj.get("AuthorizerResultTtlInSeconds").isJsonNull()) {
        Integer.validateJsonElement(jsonObj.get("AuthorizerResultTtlInSeconds"));
      }
      // validate the optional field `AuthorizerType`
      if (jsonObj.get("AuthorizerType") != null && !jsonObj.get("AuthorizerType").isJsonNull()) {
        AuthorizerType.validateJsonElement(jsonObj.get("AuthorizerType"));
      }
      // validate the optional field `AuthorizerUri`
      if (jsonObj.get("AuthorizerUri") != null && !jsonObj.get("AuthorizerUri").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthorizerUri"));
      }
      // validate the optional field `EnableSimpleResponses`
      if (jsonObj.get("EnableSimpleResponses") != null && !jsonObj.get("EnableSimpleResponses").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("EnableSimpleResponses"));
      }
      // validate the optional field `IdentitySource`
      if (jsonObj.get("IdentitySource") != null && !jsonObj.get("IdentitySource").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("IdentitySource"));
      }
      // validate the optional field `IdentityValidationExpression`
      if (jsonObj.get("IdentityValidationExpression") != null && !jsonObj.get("IdentityValidationExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("IdentityValidationExpression"));
      }
      // validate the optional field `JwtConfiguration`
      if (jsonObj.get("JwtConfiguration") != null && !jsonObj.get("JwtConfiguration").isJsonNull()) {
        CreateAuthorizerResponseJwtConfiguration.validateJsonElement(jsonObj.get("JwtConfiguration"));
      }
      // validate the required field `Name`
      String.validateJsonElement(jsonObj.get("Name"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Authorizer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Authorizer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Authorizer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Authorizer.class));

       return (TypeAdapter<T>) new TypeAdapter<Authorizer>() {
           @Override
           public void write(JsonWriter out, Authorizer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Authorizer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Authorizer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Authorizer
   * @throws IOException if the JSON string is invalid with respect to Authorizer
   */
  public static Authorizer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Authorizer.class);
  }

  /**
   * Convert an instance of Authorizer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

