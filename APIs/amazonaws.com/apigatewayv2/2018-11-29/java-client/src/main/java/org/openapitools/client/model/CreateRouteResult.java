/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthorizationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateRouteResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateRouteResult {
  public static final String SERIALIZED_NAME_API_GATEWAY_MANAGED = "ApiGatewayManaged";
  @SerializedName(SERIALIZED_NAME_API_GATEWAY_MANAGED)
  private Boolean apiGatewayManaged;

  public static final String SERIALIZED_NAME_API_KEY_REQUIRED = "ApiKeyRequired";
  @SerializedName(SERIALIZED_NAME_API_KEY_REQUIRED)
  private Boolean apiKeyRequired;

  public static final String SERIALIZED_NAME_AUTHORIZATION_SCOPES = "AuthorizationScopes";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_SCOPES)
  private List authorizationScopes;

  public static final String SERIALIZED_NAME_AUTHORIZATION_TYPE = "AuthorizationType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TYPE)
  private AuthorizationType authorizationType;

  public static final String SERIALIZED_NAME_AUTHORIZER_ID = "AuthorizerId";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_ID)
  private String authorizerId;

  public static final String SERIALIZED_NAME_MODEL_SELECTION_EXPRESSION = "ModelSelectionExpression";
  @SerializedName(SERIALIZED_NAME_MODEL_SELECTION_EXPRESSION)
  private String modelSelectionExpression;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "OperationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  private String operationName;

  public static final String SERIALIZED_NAME_REQUEST_MODELS = "RequestModels";
  @SerializedName(SERIALIZED_NAME_REQUEST_MODELS)
  private Map requestModels;

  public static final String SERIALIZED_NAME_REQUEST_PARAMETERS = "RequestParameters";
  @SerializedName(SERIALIZED_NAME_REQUEST_PARAMETERS)
  private Map requestParameters;

  public static final String SERIALIZED_NAME_ROUTE_ID = "RouteId";
  @SerializedName(SERIALIZED_NAME_ROUTE_ID)
  private String routeId;

  public static final String SERIALIZED_NAME_ROUTE_KEY = "RouteKey";
  @SerializedName(SERIALIZED_NAME_ROUTE_KEY)
  private String routeKey;

  public static final String SERIALIZED_NAME_ROUTE_RESPONSE_SELECTION_EXPRESSION = "RouteResponseSelectionExpression";
  @SerializedName(SERIALIZED_NAME_ROUTE_RESPONSE_SELECTION_EXPRESSION)
  private String routeResponseSelectionExpression;

  public static final String SERIALIZED_NAME_TARGET = "Target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public CreateRouteResult() {
  }

  public CreateRouteResult apiGatewayManaged(Boolean apiGatewayManaged) {
    this.apiGatewayManaged = apiGatewayManaged;
    return this;
  }

  /**
   * Get apiGatewayManaged
   * @return apiGatewayManaged
   */
  @javax.annotation.Nullable
  public Boolean getApiGatewayManaged() {
    return apiGatewayManaged;
  }

  public void setApiGatewayManaged(Boolean apiGatewayManaged) {
    this.apiGatewayManaged = apiGatewayManaged;
  }


  public CreateRouteResult apiKeyRequired(Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
    return this;
  }

  /**
   * Get apiKeyRequired
   * @return apiKeyRequired
   */
  @javax.annotation.Nullable
  public Boolean getApiKeyRequired() {
    return apiKeyRequired;
  }

  public void setApiKeyRequired(Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
  }


  public CreateRouteResult authorizationScopes(List authorizationScopes) {
    this.authorizationScopes = authorizationScopes;
    return this;
  }

  /**
   * Get authorizationScopes
   * @return authorizationScopes
   */
  @javax.annotation.Nullable
  public List getAuthorizationScopes() {
    return authorizationScopes;
  }

  public void setAuthorizationScopes(List authorizationScopes) {
    this.authorizationScopes = authorizationScopes;
  }


  public CreateRouteResult authorizationType(AuthorizationType authorizationType) {
    this.authorizationType = authorizationType;
    return this;
  }

  /**
   * Get authorizationType
   * @return authorizationType
   */
  @javax.annotation.Nullable
  public AuthorizationType getAuthorizationType() {
    return authorizationType;
  }

  public void setAuthorizationType(AuthorizationType authorizationType) {
    this.authorizationType = authorizationType;
  }


  public CreateRouteResult authorizerId(String authorizerId) {
    this.authorizerId = authorizerId;
    return this;
  }

  /**
   * Get authorizerId
   * @return authorizerId
   */
  @javax.annotation.Nullable
  public String getAuthorizerId() {
    return authorizerId;
  }

  public void setAuthorizerId(String authorizerId) {
    this.authorizerId = authorizerId;
  }


  public CreateRouteResult modelSelectionExpression(String modelSelectionExpression) {
    this.modelSelectionExpression = modelSelectionExpression;
    return this;
  }

  /**
   * Get modelSelectionExpression
   * @return modelSelectionExpression
   */
  @javax.annotation.Nullable
  public String getModelSelectionExpression() {
    return modelSelectionExpression;
  }

  public void setModelSelectionExpression(String modelSelectionExpression) {
    this.modelSelectionExpression = modelSelectionExpression;
  }


  public CreateRouteResult operationName(String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * Get operationName
   * @return operationName
   */
  @javax.annotation.Nullable
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(String operationName) {
    this.operationName = operationName;
  }


  public CreateRouteResult requestModels(Map requestModels) {
    this.requestModels = requestModels;
    return this;
  }

  /**
   * Get requestModels
   * @return requestModels
   */
  @javax.annotation.Nullable
  public Map getRequestModels() {
    return requestModels;
  }

  public void setRequestModels(Map requestModels) {
    this.requestModels = requestModels;
  }


  public CreateRouteResult requestParameters(Map requestParameters) {
    this.requestParameters = requestParameters;
    return this;
  }

  /**
   * Get requestParameters
   * @return requestParameters
   */
  @javax.annotation.Nullable
  public Map getRequestParameters() {
    return requestParameters;
  }

  public void setRequestParameters(Map requestParameters) {
    this.requestParameters = requestParameters;
  }


  public CreateRouteResult routeId(String routeId) {
    this.routeId = routeId;
    return this;
  }

  /**
   * Get routeId
   * @return routeId
   */
  @javax.annotation.Nullable
  public String getRouteId() {
    return routeId;
  }

  public void setRouteId(String routeId) {
    this.routeId = routeId;
  }


  public CreateRouteResult routeKey(String routeKey) {
    this.routeKey = routeKey;
    return this;
  }

  /**
   * Get routeKey
   * @return routeKey
   */
  @javax.annotation.Nullable
  public String getRouteKey() {
    return routeKey;
  }

  public void setRouteKey(String routeKey) {
    this.routeKey = routeKey;
  }


  public CreateRouteResult routeResponseSelectionExpression(String routeResponseSelectionExpression) {
    this.routeResponseSelectionExpression = routeResponseSelectionExpression;
    return this;
  }

  /**
   * Get routeResponseSelectionExpression
   * @return routeResponseSelectionExpression
   */
  @javax.annotation.Nullable
  public String getRouteResponseSelectionExpression() {
    return routeResponseSelectionExpression;
  }

  public void setRouteResponseSelectionExpression(String routeResponseSelectionExpression) {
    this.routeResponseSelectionExpression = routeResponseSelectionExpression;
  }


  public CreateRouteResult target(String target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRouteResult createRouteResult = (CreateRouteResult) o;
    return Objects.equals(this.apiGatewayManaged, createRouteResult.apiGatewayManaged) &&
        Objects.equals(this.apiKeyRequired, createRouteResult.apiKeyRequired) &&
        Objects.equals(this.authorizationScopes, createRouteResult.authorizationScopes) &&
        Objects.equals(this.authorizationType, createRouteResult.authorizationType) &&
        Objects.equals(this.authorizerId, createRouteResult.authorizerId) &&
        Objects.equals(this.modelSelectionExpression, createRouteResult.modelSelectionExpression) &&
        Objects.equals(this.operationName, createRouteResult.operationName) &&
        Objects.equals(this.requestModels, createRouteResult.requestModels) &&
        Objects.equals(this.requestParameters, createRouteResult.requestParameters) &&
        Objects.equals(this.routeId, createRouteResult.routeId) &&
        Objects.equals(this.routeKey, createRouteResult.routeKey) &&
        Objects.equals(this.routeResponseSelectionExpression, createRouteResult.routeResponseSelectionExpression) &&
        Objects.equals(this.target, createRouteResult.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiGatewayManaged, apiKeyRequired, authorizationScopes, authorizationType, authorizerId, modelSelectionExpression, operationName, requestModels, requestParameters, routeId, routeKey, routeResponseSelectionExpression, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRouteResult {\n");
    sb.append("    apiGatewayManaged: ").append(toIndentedString(apiGatewayManaged)).append("\n");
    sb.append("    apiKeyRequired: ").append(toIndentedString(apiKeyRequired)).append("\n");
    sb.append("    authorizationScopes: ").append(toIndentedString(authorizationScopes)).append("\n");
    sb.append("    authorizationType: ").append(toIndentedString(authorizationType)).append("\n");
    sb.append("    authorizerId: ").append(toIndentedString(authorizerId)).append("\n");
    sb.append("    modelSelectionExpression: ").append(toIndentedString(modelSelectionExpression)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    requestModels: ").append(toIndentedString(requestModels)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("    routeId: ").append(toIndentedString(routeId)).append("\n");
    sb.append("    routeKey: ").append(toIndentedString(routeKey)).append("\n");
    sb.append("    routeResponseSelectionExpression: ").append(toIndentedString(routeResponseSelectionExpression)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiGatewayManaged");
    openapiFields.add("ApiKeyRequired");
    openapiFields.add("AuthorizationScopes");
    openapiFields.add("AuthorizationType");
    openapiFields.add("AuthorizerId");
    openapiFields.add("ModelSelectionExpression");
    openapiFields.add("OperationName");
    openapiFields.add("RequestModels");
    openapiFields.add("RequestParameters");
    openapiFields.add("RouteId");
    openapiFields.add("RouteKey");
    openapiFields.add("RouteResponseSelectionExpression");
    openapiFields.add("Target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateRouteResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateRouteResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateRouteResult is not found in the empty JSON string", CreateRouteResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateRouteResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateRouteResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApiGatewayManaged`
      if (jsonObj.get("ApiGatewayManaged") != null && !jsonObj.get("ApiGatewayManaged").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApiGatewayManaged"));
      }
      // validate the optional field `ApiKeyRequired`
      if (jsonObj.get("ApiKeyRequired") != null && !jsonObj.get("ApiKeyRequired").isJsonNull()) {
        Boolean.validateJsonElement(jsonObj.get("ApiKeyRequired"));
      }
      // validate the optional field `AuthorizationScopes`
      if (jsonObj.get("AuthorizationScopes") != null && !jsonObj.get("AuthorizationScopes").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("AuthorizationScopes"));
      }
      // validate the optional field `AuthorizationType`
      if (jsonObj.get("AuthorizationType") != null && !jsonObj.get("AuthorizationType").isJsonNull()) {
        AuthorizationType.validateJsonElement(jsonObj.get("AuthorizationType"));
      }
      // validate the optional field `AuthorizerId`
      if (jsonObj.get("AuthorizerId") != null && !jsonObj.get("AuthorizerId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("AuthorizerId"));
      }
      // validate the optional field `ModelSelectionExpression`
      if (jsonObj.get("ModelSelectionExpression") != null && !jsonObj.get("ModelSelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelSelectionExpression"));
      }
      // validate the optional field `OperationName`
      if (jsonObj.get("OperationName") != null && !jsonObj.get("OperationName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OperationName"));
      }
      // validate the optional field `RequestModels`
      if (jsonObj.get("RequestModels") != null && !jsonObj.get("RequestModels").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("RequestModels"));
      }
      // validate the optional field `RequestParameters`
      if (jsonObj.get("RequestParameters") != null && !jsonObj.get("RequestParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("RequestParameters"));
      }
      // validate the optional field `RouteId`
      if (jsonObj.get("RouteId") != null && !jsonObj.get("RouteId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RouteId"));
      }
      // validate the optional field `RouteKey`
      if (jsonObj.get("RouteKey") != null && !jsonObj.get("RouteKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RouteKey"));
      }
      // validate the optional field `RouteResponseSelectionExpression`
      if (jsonObj.get("RouteResponseSelectionExpression") != null && !jsonObj.get("RouteResponseSelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RouteResponseSelectionExpression"));
      }
      // validate the optional field `Target`
      if (jsonObj.get("Target") != null && !jsonObj.get("Target").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("Target"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateRouteResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateRouteResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateRouteResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateRouteResult.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateRouteResult>() {
           @Override
           public void write(JsonWriter out, CreateRouteResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateRouteResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateRouteResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateRouteResult
   * @throws IOException if the JSON string is invalid with respect to CreateRouteResult
   */
  public static CreateRouteResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateRouteResult.class);
  }

  /**
   * Convert an instance of CreateRouteResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

