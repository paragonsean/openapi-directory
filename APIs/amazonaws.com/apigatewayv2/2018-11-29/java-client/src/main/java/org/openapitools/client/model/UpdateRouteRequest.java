/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ParameterConstraints;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateRouteRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateRouteRequest {
  public static final String SERIALIZED_NAME_API_KEY_REQUIRED = "apiKeyRequired";
  @SerializedName(SERIALIZED_NAME_API_KEY_REQUIRED)
  private Boolean apiKeyRequired;

  public static final String SERIALIZED_NAME_AUTHORIZATION_SCOPES = "authorizationScopes";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_SCOPES)
  private List<String> authorizationScopes = new ArrayList<>();

  /**
   * The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
   */
  @JsonAdapter(AuthorizationTypeEnum.Adapter.class)
  public enum AuthorizationTypeEnum {
    NONE("NONE"),
    
    AWS_IAM("AWS_IAM"),
    
    CUSTOM("CUSTOM"),
    
    JWT("JWT");

    private String value;

    AuthorizationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthorizationTypeEnum fromValue(String value) {
      for (AuthorizationTypeEnum b : AuthorizationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthorizationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthorizationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthorizationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthorizationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthorizationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHORIZATION_TYPE = "authorizationType";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TYPE)
  private AuthorizationTypeEnum authorizationType;

  public static final String SERIALIZED_NAME_AUTHORIZER_ID = "authorizerId";
  @SerializedName(SERIALIZED_NAME_AUTHORIZER_ID)
  private String authorizerId;

  public static final String SERIALIZED_NAME_MODEL_SELECTION_EXPRESSION = "modelSelectionExpression";
  @SerializedName(SERIALIZED_NAME_MODEL_SELECTION_EXPRESSION)
  private String modelSelectionExpression;

  public static final String SERIALIZED_NAME_OPERATION_NAME = "operationName";
  @SerializedName(SERIALIZED_NAME_OPERATION_NAME)
  private String operationName;

  public static final String SERIALIZED_NAME_REQUEST_MODELS = "requestModels";
  @SerializedName(SERIALIZED_NAME_REQUEST_MODELS)
  private Map<String, String> requestModels = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_PARAMETERS = "requestParameters";
  @SerializedName(SERIALIZED_NAME_REQUEST_PARAMETERS)
  private Map<String, ParameterConstraints> requestParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_ROUTE_KEY = "routeKey";
  @SerializedName(SERIALIZED_NAME_ROUTE_KEY)
  private String routeKey;

  public static final String SERIALIZED_NAME_ROUTE_RESPONSE_SELECTION_EXPRESSION = "routeResponseSelectionExpression";
  @SerializedName(SERIALIZED_NAME_ROUTE_RESPONSE_SELECTION_EXPRESSION)
  private String routeResponseSelectionExpression;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public UpdateRouteRequest() {
  }

  public UpdateRouteRequest apiKeyRequired(Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
    return this;
  }

  /**
   * Specifies whether an API key is required for the route. Supported only for WebSocket APIs.
   * @return apiKeyRequired
   */
  @javax.annotation.Nullable
  public Boolean getApiKeyRequired() {
    return apiKeyRequired;
  }

  public void setApiKeyRequired(Boolean apiKeyRequired) {
    this.apiKeyRequired = apiKeyRequired;
  }


  public UpdateRouteRequest authorizationScopes(List<String> authorizationScopes) {
    this.authorizationScopes = authorizationScopes;
    return this;
  }

  public UpdateRouteRequest addAuthorizationScopesItem(String authorizationScopesItem) {
    if (this.authorizationScopes == null) {
      this.authorizationScopes = new ArrayList<>();
    }
    this.authorizationScopes.add(authorizationScopesItem);
    return this;
  }

  /**
   * A list of authorization scopes configured on a route. The scopes are used with a JWT authorizer to authorize the method invocation. The authorization works by matching the route scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any route scope matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the route scope is configured, the client must provide an access token instead of an identity token for authorization purposes.
   * @return authorizationScopes
   */
  @javax.annotation.Nullable
  public List<String> getAuthorizationScopes() {
    return authorizationScopes;
  }

  public void setAuthorizationScopes(List<String> authorizationScopes) {
    this.authorizationScopes = authorizationScopes;
  }


  public UpdateRouteRequest authorizationType(AuthorizationTypeEnum authorizationType) {
    this.authorizationType = authorizationType;
    return this;
  }

  /**
   * The authorization type. For WebSocket APIs, valid values are NONE for open access, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer. For HTTP APIs, valid values are NONE for open access, JWT for using JSON Web Tokens, AWS_IAM for using AWS IAM permissions, and CUSTOM for using a Lambda authorizer.
   * @return authorizationType
   */
  @javax.annotation.Nullable
  public AuthorizationTypeEnum getAuthorizationType() {
    return authorizationType;
  }

  public void setAuthorizationType(AuthorizationTypeEnum authorizationType) {
    this.authorizationType = authorizationType;
  }


  public UpdateRouteRequest authorizerId(String authorizerId) {
    this.authorizerId = authorizerId;
    return this;
  }

  /**
   * The identifier.
   * @return authorizerId
   */
  @javax.annotation.Nullable
  public String getAuthorizerId() {
    return authorizerId;
  }

  public void setAuthorizerId(String authorizerId) {
    this.authorizerId = authorizerId;
  }


  public UpdateRouteRequest modelSelectionExpression(String modelSelectionExpression) {
    this.modelSelectionExpression = modelSelectionExpression;
    return this;
  }

  /**
   * An expression used to extract information at runtime. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for more information.
   * @return modelSelectionExpression
   */
  @javax.annotation.Nullable
  public String getModelSelectionExpression() {
    return modelSelectionExpression;
  }

  public void setModelSelectionExpression(String modelSelectionExpression) {
    this.modelSelectionExpression = modelSelectionExpression;
  }


  public UpdateRouteRequest operationName(String operationName) {
    this.operationName = operationName;
    return this;
  }

  /**
   * A string with a length between [1-64].
   * @return operationName
   */
  @javax.annotation.Nullable
  public String getOperationName() {
    return operationName;
  }

  public void setOperationName(String operationName) {
    this.operationName = operationName;
  }


  public UpdateRouteRequest requestModels(Map<String, String> requestModels) {
    this.requestModels = requestModels;
    return this;
  }

  public UpdateRouteRequest putRequestModelsItem(String key, String requestModelsItem) {
    if (this.requestModels == null) {
      this.requestModels = new HashMap<>();
    }
    this.requestModels.put(key, requestModelsItem);
    return this;
  }

  /**
   * The route models.
   * @return requestModels
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestModels() {
    return requestModels;
  }

  public void setRequestModels(Map<String, String> requestModels) {
    this.requestModels = requestModels;
  }


  public UpdateRouteRequest requestParameters(Map<String, ParameterConstraints> requestParameters) {
    this.requestParameters = requestParameters;
    return this;
  }

  public UpdateRouteRequest putRequestParametersItem(String key, ParameterConstraints requestParametersItem) {
    if (this.requestParameters == null) {
      this.requestParameters = new HashMap<>();
    }
    this.requestParameters.put(key, requestParametersItem);
    return this;
  }

  /**
   * The route parameters.
   * @return requestParameters
   */
  @javax.annotation.Nullable
  public Map<String, ParameterConstraints> getRequestParameters() {
    return requestParameters;
  }

  public void setRequestParameters(Map<String, ParameterConstraints> requestParameters) {
    this.requestParameters = requestParameters;
  }


  public UpdateRouteRequest routeKey(String routeKey) {
    this.routeKey = routeKey;
    return this;
  }

  /**
   * After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for a list of expressions and each expression&#39;s associated selection key type.
   * @return routeKey
   */
  @javax.annotation.Nullable
  public String getRouteKey() {
    return routeKey;
  }

  public void setRouteKey(String routeKey) {
    this.routeKey = routeKey;
  }


  public UpdateRouteRequest routeResponseSelectionExpression(String routeResponseSelectionExpression) {
    this.routeResponseSelectionExpression = routeResponseSelectionExpression;
    return this;
  }

  /**
   * An expression used to extract information at runtime. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for more information.
   * @return routeResponseSelectionExpression
   */
  @javax.annotation.Nullable
  public String getRouteResponseSelectionExpression() {
    return routeResponseSelectionExpression;
  }

  public void setRouteResponseSelectionExpression(String routeResponseSelectionExpression) {
    this.routeResponseSelectionExpression = routeResponseSelectionExpression;
  }


  public UpdateRouteRequest target(String target) {
    this.target = target;
    return this;
  }

  /**
   * A string with a length between [1-128].
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateRouteRequest updateRouteRequest = (UpdateRouteRequest) o;
    return Objects.equals(this.apiKeyRequired, updateRouteRequest.apiKeyRequired) &&
        Objects.equals(this.authorizationScopes, updateRouteRequest.authorizationScopes) &&
        Objects.equals(this.authorizationType, updateRouteRequest.authorizationType) &&
        Objects.equals(this.authorizerId, updateRouteRequest.authorizerId) &&
        Objects.equals(this.modelSelectionExpression, updateRouteRequest.modelSelectionExpression) &&
        Objects.equals(this.operationName, updateRouteRequest.operationName) &&
        Objects.equals(this.requestModels, updateRouteRequest.requestModels) &&
        Objects.equals(this.requestParameters, updateRouteRequest.requestParameters) &&
        Objects.equals(this.routeKey, updateRouteRequest.routeKey) &&
        Objects.equals(this.routeResponseSelectionExpression, updateRouteRequest.routeResponseSelectionExpression) &&
        Objects.equals(this.target, updateRouteRequest.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKeyRequired, authorizationScopes, authorizationType, authorizerId, modelSelectionExpression, operationName, requestModels, requestParameters, routeKey, routeResponseSelectionExpression, target);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateRouteRequest {\n");
    sb.append("    apiKeyRequired: ").append(toIndentedString(apiKeyRequired)).append("\n");
    sb.append("    authorizationScopes: ").append(toIndentedString(authorizationScopes)).append("\n");
    sb.append("    authorizationType: ").append(toIndentedString(authorizationType)).append("\n");
    sb.append("    authorizerId: ").append(toIndentedString(authorizerId)).append("\n");
    sb.append("    modelSelectionExpression: ").append(toIndentedString(modelSelectionExpression)).append("\n");
    sb.append("    operationName: ").append(toIndentedString(operationName)).append("\n");
    sb.append("    requestModels: ").append(toIndentedString(requestModels)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("    routeKey: ").append(toIndentedString(routeKey)).append("\n");
    sb.append("    routeResponseSelectionExpression: ").append(toIndentedString(routeResponseSelectionExpression)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKeyRequired");
    openapiFields.add("authorizationScopes");
    openapiFields.add("authorizationType");
    openapiFields.add("authorizerId");
    openapiFields.add("modelSelectionExpression");
    openapiFields.add("operationName");
    openapiFields.add("requestModels");
    openapiFields.add("requestParameters");
    openapiFields.add("routeKey");
    openapiFields.add("routeResponseSelectionExpression");
    openapiFields.add("target");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateRouteRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateRouteRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateRouteRequest is not found in the empty JSON string", UpdateRouteRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateRouteRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateRouteRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("authorizationScopes") != null && !jsonObj.get("authorizationScopes").isJsonNull() && !jsonObj.get("authorizationScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationScopes` to be an array in the JSON string but got `%s`", jsonObj.get("authorizationScopes").toString()));
      }
      if ((jsonObj.get("authorizationType") != null && !jsonObj.get("authorizationType").isJsonNull()) && !jsonObj.get("authorizationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationType").toString()));
      }
      // validate the optional field `authorizationType`
      if (jsonObj.get("authorizationType") != null && !jsonObj.get("authorizationType").isJsonNull()) {
        AuthorizationTypeEnum.validateJsonElement(jsonObj.get("authorizationType"));
      }
      if ((jsonObj.get("authorizerId") != null && !jsonObj.get("authorizerId").isJsonNull()) && !jsonObj.get("authorizerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizerId").toString()));
      }
      if ((jsonObj.get("modelSelectionExpression") != null && !jsonObj.get("modelSelectionExpression").isJsonNull()) && !jsonObj.get("modelSelectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelSelectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelSelectionExpression").toString()));
      }
      if ((jsonObj.get("operationName") != null && !jsonObj.get("operationName").isJsonNull()) && !jsonObj.get("operationName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationName").toString()));
      }
      if ((jsonObj.get("routeKey") != null && !jsonObj.get("routeKey").isJsonNull()) && !jsonObj.get("routeKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeKey").toString()));
      }
      if ((jsonObj.get("routeResponseSelectionExpression") != null && !jsonObj.get("routeResponseSelectionExpression").isJsonNull()) && !jsonObj.get("routeResponseSelectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeResponseSelectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeResponseSelectionExpression").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateRouteRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateRouteRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateRouteRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateRouteRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateRouteRequest>() {
           @Override
           public void write(JsonWriter out, UpdateRouteRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateRouteRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateRouteRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateRouteRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateRouteRequest
   */
  public static UpdateRouteRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateRouteRequest.class);
  }

  /**
   * Convert an instance of UpdateRouteRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

