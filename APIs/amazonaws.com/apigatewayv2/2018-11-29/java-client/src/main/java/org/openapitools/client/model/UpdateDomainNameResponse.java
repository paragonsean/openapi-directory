/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateDomainNameResponseMutualTlsAuthentication;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateDomainNameResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateDomainNameResponse {
  public static final String SERIALIZED_NAME_API_MAPPING_SELECTION_EXPRESSION = "ApiMappingSelectionExpression";
  @SerializedName(SERIALIZED_NAME_API_MAPPING_SELECTION_EXPRESSION)
  private String apiMappingSelectionExpression;

  public static final String SERIALIZED_NAME_DOMAIN_NAME = "DomainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_DOMAIN_NAME_CONFIGURATIONS = "DomainNameConfigurations";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME_CONFIGURATIONS)
  private List domainNameConfigurations;

  public static final String SERIALIZED_NAME_MUTUAL_TLS_AUTHENTICATION = "MutualTlsAuthentication";
  @SerializedName(SERIALIZED_NAME_MUTUAL_TLS_AUTHENTICATION)
  private CreateDomainNameResponseMutualTlsAuthentication mutualTlsAuthentication;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map tags;

  public UpdateDomainNameResponse() {
  }

  public UpdateDomainNameResponse apiMappingSelectionExpression(String apiMappingSelectionExpression) {
    this.apiMappingSelectionExpression = apiMappingSelectionExpression;
    return this;
  }

  /**
   * Get apiMappingSelectionExpression
   * @return apiMappingSelectionExpression
   */
  @javax.annotation.Nullable
  public String getApiMappingSelectionExpression() {
    return apiMappingSelectionExpression;
  }

  public void setApiMappingSelectionExpression(String apiMappingSelectionExpression) {
    this.apiMappingSelectionExpression = apiMappingSelectionExpression;
  }


  public UpdateDomainNameResponse domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * Get domainName
   * @return domainName
   */
  @javax.annotation.Nullable
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public UpdateDomainNameResponse domainNameConfigurations(List domainNameConfigurations) {
    this.domainNameConfigurations = domainNameConfigurations;
    return this;
  }

  /**
   * Get domainNameConfigurations
   * @return domainNameConfigurations
   */
  @javax.annotation.Nullable
  public List getDomainNameConfigurations() {
    return domainNameConfigurations;
  }

  public void setDomainNameConfigurations(List domainNameConfigurations) {
    this.domainNameConfigurations = domainNameConfigurations;
  }


  public UpdateDomainNameResponse mutualTlsAuthentication(CreateDomainNameResponseMutualTlsAuthentication mutualTlsAuthentication) {
    this.mutualTlsAuthentication = mutualTlsAuthentication;
    return this;
  }

  /**
   * Get mutualTlsAuthentication
   * @return mutualTlsAuthentication
   */
  @javax.annotation.Nullable
  public CreateDomainNameResponseMutualTlsAuthentication getMutualTlsAuthentication() {
    return mutualTlsAuthentication;
  }

  public void setMutualTlsAuthentication(CreateDomainNameResponseMutualTlsAuthentication mutualTlsAuthentication) {
    this.mutualTlsAuthentication = mutualTlsAuthentication;
  }


  public UpdateDomainNameResponse tags(Map tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public Map getTags() {
    return tags;
  }

  public void setTags(Map tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateDomainNameResponse updateDomainNameResponse = (UpdateDomainNameResponse) o;
    return Objects.equals(this.apiMappingSelectionExpression, updateDomainNameResponse.apiMappingSelectionExpression) &&
        Objects.equals(this.domainName, updateDomainNameResponse.domainName) &&
        Objects.equals(this.domainNameConfigurations, updateDomainNameResponse.domainNameConfigurations) &&
        Objects.equals(this.mutualTlsAuthentication, updateDomainNameResponse.mutualTlsAuthentication) &&
        Objects.equals(this.tags, updateDomainNameResponse.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiMappingSelectionExpression, domainName, domainNameConfigurations, mutualTlsAuthentication, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateDomainNameResponse {\n");
    sb.append("    apiMappingSelectionExpression: ").append(toIndentedString(apiMappingSelectionExpression)).append("\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    domainNameConfigurations: ").append(toIndentedString(domainNameConfigurations)).append("\n");
    sb.append("    mutualTlsAuthentication: ").append(toIndentedString(mutualTlsAuthentication)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiMappingSelectionExpression");
    openapiFields.add("DomainName");
    openapiFields.add("DomainNameConfigurations");
    openapiFields.add("MutualTlsAuthentication");
    openapiFields.add("Tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateDomainNameResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateDomainNameResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateDomainNameResponse is not found in the empty JSON string", UpdateDomainNameResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateDomainNameResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateDomainNameResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApiMappingSelectionExpression`
      if (jsonObj.get("ApiMappingSelectionExpression") != null && !jsonObj.get("ApiMappingSelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiMappingSelectionExpression"));
      }
      // validate the optional field `DomainName`
      if (jsonObj.get("DomainName") != null && !jsonObj.get("DomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainName"));
      }
      // validate the optional field `DomainNameConfigurations`
      if (jsonObj.get("DomainNameConfigurations") != null && !jsonObj.get("DomainNameConfigurations").isJsonNull()) {
        List.validateJsonElement(jsonObj.get("DomainNameConfigurations"));
      }
      // validate the optional field `MutualTlsAuthentication`
      if (jsonObj.get("MutualTlsAuthentication") != null && !jsonObj.get("MutualTlsAuthentication").isJsonNull()) {
        CreateDomainNameResponseMutualTlsAuthentication.validateJsonElement(jsonObj.get("MutualTlsAuthentication"));
      }
      // validate the optional field `Tags`
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("Tags"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateDomainNameResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateDomainNameResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateDomainNameResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateDomainNameResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateDomainNameResponse>() {
           @Override
           public void write(JsonWriter out, UpdateDomainNameResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateDomainNameResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateDomainNameResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateDomainNameResponse
   * @throws IOException if the JSON string is invalid with respect to UpdateDomainNameResponse
   */
  public static UpdateDomainNameResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateDomainNameResponse.class);
  }

  /**
   * Convert an instance of UpdateDomainNameResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

