/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateIntegrationResponseRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateIntegrationResponseRequest {
  /**
   * Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
   */
  @JsonAdapter(ContentHandlingStrategyEnum.Adapter.class)
  public enum ContentHandlingStrategyEnum {
    BINARY("CONVERT_TO_BINARY"),
    
    TEXT("CONVERT_TO_TEXT");

    private String value;

    ContentHandlingStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentHandlingStrategyEnum fromValue(String value) {
      for (ContentHandlingStrategyEnum b : ContentHandlingStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentHandlingStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentHandlingStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentHandlingStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentHandlingStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentHandlingStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_HANDLING_STRATEGY = "contentHandlingStrategy";
  @SerializedName(SERIALIZED_NAME_CONTENT_HANDLING_STRATEGY)
  private ContentHandlingStrategyEnum contentHandlingStrategy;

  public static final String SERIALIZED_NAME_INTEGRATION_RESPONSE_KEY = "integrationResponseKey";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_RESPONSE_KEY)
  private String integrationResponseKey;

  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "responseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  private Map<String, String> responseParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_RESPONSE_TEMPLATES = "responseTemplates";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TEMPLATES)
  private Map<String, String> responseTemplates = new HashMap<>();

  public static final String SERIALIZED_NAME_TEMPLATE_SELECTION_EXPRESSION = "templateSelectionExpression";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_SELECTION_EXPRESSION)
  private String templateSelectionExpression;

  public UpdateIntegrationResponseRequest() {
  }

  public UpdateIntegrationResponseRequest contentHandlingStrategy(ContentHandlingStrategyEnum contentHandlingStrategy) {
    this.contentHandlingStrategy = contentHandlingStrategy;
    return this;
  }

  /**
   * Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
   * @return contentHandlingStrategy
   */
  @javax.annotation.Nullable
  public ContentHandlingStrategyEnum getContentHandlingStrategy() {
    return contentHandlingStrategy;
  }

  public void setContentHandlingStrategy(ContentHandlingStrategyEnum contentHandlingStrategy) {
    this.contentHandlingStrategy = contentHandlingStrategy;
  }


  public UpdateIntegrationResponseRequest integrationResponseKey(String integrationResponseKey) {
    this.integrationResponseKey = integrationResponseKey;
    return this;
  }

  /**
   * After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for a list of expressions and each expression&#39;s associated selection key type.
   * @return integrationResponseKey
   */
  @javax.annotation.Nullable
  public String getIntegrationResponseKey() {
    return integrationResponseKey;
  }

  public void setIntegrationResponseKey(String integrationResponseKey) {
    this.integrationResponseKey = integrationResponseKey;
  }


  public UpdateIntegrationResponseRequest responseParameters(Map<String, String> responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  public UpdateIntegrationResponseRequest putResponseParametersItem(String key, String responseParametersItem) {
    if (this.responseParameters == null) {
      this.responseParameters = new HashMap<>();
    }
    this.responseParameters.put(key, responseParametersItem);
    return this;
  }

  /**
   * &lt;p&gt;For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.&lt;replaceable&gt;{location}&lt;/replaceable&gt;.&lt;replaceable&gt;{name}&lt;/replaceable&gt;           , where              &lt;replaceable&gt;{location}&lt;/replaceable&gt;            is querystring, path, or header; and              &lt;replaceable&gt;{name}&lt;/replaceable&gt;            must be a valid and unique method request parameter name.&lt;/p&gt; &lt;p&gt;For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\&quot;&gt;Working with AWS service integrations for HTTP APIs&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &amp;lt;action&amp;gt;:&amp;lt;header|querystring|path&amp;gt;.&amp;lt;location&amp;gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\&quot;&gt;Transforming API requests and responses&lt;/a&gt;.&lt;/p&gt;
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(Map<String, String> responseParameters) {
    this.responseParameters = responseParameters;
  }


  public UpdateIntegrationResponseRequest responseTemplates(Map<String, String> responseTemplates) {
    this.responseTemplates = responseTemplates;
    return this;
  }

  public UpdateIntegrationResponseRequest putResponseTemplatesItem(String key, String responseTemplatesItem) {
    if (this.responseTemplates == null) {
      this.responseTemplates = new HashMap<>();
    }
    this.responseTemplates.put(key, responseTemplatesItem);
    return this;
  }

  /**
   * A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
   * @return responseTemplates
   */
  @javax.annotation.Nullable
  public Map<String, String> getResponseTemplates() {
    return responseTemplates;
  }

  public void setResponseTemplates(Map<String, String> responseTemplates) {
    this.responseTemplates = responseTemplates;
  }


  public UpdateIntegrationResponseRequest templateSelectionExpression(String templateSelectionExpression) {
    this.templateSelectionExpression = templateSelectionExpression;
    return this;
  }

  /**
   * An expression used to extract information at runtime. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for more information.
   * @return templateSelectionExpression
   */
  @javax.annotation.Nullable
  public String getTemplateSelectionExpression() {
    return templateSelectionExpression;
  }

  public void setTemplateSelectionExpression(String templateSelectionExpression) {
    this.templateSelectionExpression = templateSelectionExpression;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateIntegrationResponseRequest updateIntegrationResponseRequest = (UpdateIntegrationResponseRequest) o;
    return Objects.equals(this.contentHandlingStrategy, updateIntegrationResponseRequest.contentHandlingStrategy) &&
        Objects.equals(this.integrationResponseKey, updateIntegrationResponseRequest.integrationResponseKey) &&
        Objects.equals(this.responseParameters, updateIntegrationResponseRequest.responseParameters) &&
        Objects.equals(this.responseTemplates, updateIntegrationResponseRequest.responseTemplates) &&
        Objects.equals(this.templateSelectionExpression, updateIntegrationResponseRequest.templateSelectionExpression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentHandlingStrategy, integrationResponseKey, responseParameters, responseTemplates, templateSelectionExpression);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateIntegrationResponseRequest {\n");
    sb.append("    contentHandlingStrategy: ").append(toIndentedString(contentHandlingStrategy)).append("\n");
    sb.append("    integrationResponseKey: ").append(toIndentedString(integrationResponseKey)).append("\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    responseTemplates: ").append(toIndentedString(responseTemplates)).append("\n");
    sb.append("    templateSelectionExpression: ").append(toIndentedString(templateSelectionExpression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentHandlingStrategy");
    openapiFields.add("integrationResponseKey");
    openapiFields.add("responseParameters");
    openapiFields.add("responseTemplates");
    openapiFields.add("templateSelectionExpression");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateIntegrationResponseRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateIntegrationResponseRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateIntegrationResponseRequest is not found in the empty JSON string", UpdateIntegrationResponseRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateIntegrationResponseRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateIntegrationResponseRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contentHandlingStrategy") != null && !jsonObj.get("contentHandlingStrategy").isJsonNull()) && !jsonObj.get("contentHandlingStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentHandlingStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentHandlingStrategy").toString()));
      }
      // validate the optional field `contentHandlingStrategy`
      if (jsonObj.get("contentHandlingStrategy") != null && !jsonObj.get("contentHandlingStrategy").isJsonNull()) {
        ContentHandlingStrategyEnum.validateJsonElement(jsonObj.get("contentHandlingStrategy"));
      }
      if ((jsonObj.get("integrationResponseKey") != null && !jsonObj.get("integrationResponseKey").isJsonNull()) && !jsonObj.get("integrationResponseKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationResponseKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationResponseKey").toString()));
      }
      if ((jsonObj.get("templateSelectionExpression") != null && !jsonObj.get("templateSelectionExpression").isJsonNull()) && !jsonObj.get("templateSelectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateSelectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateSelectionExpression").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateIntegrationResponseRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateIntegrationResponseRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateIntegrationResponseRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateIntegrationResponseRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateIntegrationResponseRequest>() {
           @Override
           public void write(JsonWriter out, UpdateIntegrationResponseRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateIntegrationResponseRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateIntegrationResponseRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateIntegrationResponseRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateIntegrationResponseRequest
   */
  public static UpdateIntegrationResponseRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateIntegrationResponseRequest.class);
  }

  /**
   * Convert an instance of UpdateIntegrationResponseRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

