/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetRouteResponseResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetRouteResponseResponse {
  public static final String SERIALIZED_NAME_MODEL_SELECTION_EXPRESSION = "ModelSelectionExpression";
  @SerializedName(SERIALIZED_NAME_MODEL_SELECTION_EXPRESSION)
  private String modelSelectionExpression;

  public static final String SERIALIZED_NAME_RESPONSE_MODELS = "ResponseModels";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MODELS)
  private Map responseModels;

  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "ResponseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  private Map responseParameters;

  public static final String SERIALIZED_NAME_ROUTE_RESPONSE_ID = "RouteResponseId";
  @SerializedName(SERIALIZED_NAME_ROUTE_RESPONSE_ID)
  private String routeResponseId;

  public static final String SERIALIZED_NAME_ROUTE_RESPONSE_KEY = "RouteResponseKey";
  @SerializedName(SERIALIZED_NAME_ROUTE_RESPONSE_KEY)
  private String routeResponseKey;

  public GetRouteResponseResponse() {
  }

  public GetRouteResponseResponse modelSelectionExpression(String modelSelectionExpression) {
    this.modelSelectionExpression = modelSelectionExpression;
    return this;
  }

  /**
   * Get modelSelectionExpression
   * @return modelSelectionExpression
   */
  @javax.annotation.Nullable
  public String getModelSelectionExpression() {
    return modelSelectionExpression;
  }

  public void setModelSelectionExpression(String modelSelectionExpression) {
    this.modelSelectionExpression = modelSelectionExpression;
  }


  public GetRouteResponseResponse responseModels(Map responseModels) {
    this.responseModels = responseModels;
    return this;
  }

  /**
   * Get responseModels
   * @return responseModels
   */
  @javax.annotation.Nullable
  public Map getResponseModels() {
    return responseModels;
  }

  public void setResponseModels(Map responseModels) {
    this.responseModels = responseModels;
  }


  public GetRouteResponseResponse responseParameters(Map responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  /**
   * Get responseParameters
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(Map responseParameters) {
    this.responseParameters = responseParameters;
  }


  public GetRouteResponseResponse routeResponseId(String routeResponseId) {
    this.routeResponseId = routeResponseId;
    return this;
  }

  /**
   * Get routeResponseId
   * @return routeResponseId
   */
  @javax.annotation.Nullable
  public String getRouteResponseId() {
    return routeResponseId;
  }

  public void setRouteResponseId(String routeResponseId) {
    this.routeResponseId = routeResponseId;
  }


  public GetRouteResponseResponse routeResponseKey(String routeResponseKey) {
    this.routeResponseKey = routeResponseKey;
    return this;
  }

  /**
   * Get routeResponseKey
   * @return routeResponseKey
   */
  @javax.annotation.Nullable
  public String getRouteResponseKey() {
    return routeResponseKey;
  }

  public void setRouteResponseKey(String routeResponseKey) {
    this.routeResponseKey = routeResponseKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRouteResponseResponse getRouteResponseResponse = (GetRouteResponseResponse) o;
    return Objects.equals(this.modelSelectionExpression, getRouteResponseResponse.modelSelectionExpression) &&
        Objects.equals(this.responseModels, getRouteResponseResponse.responseModels) &&
        Objects.equals(this.responseParameters, getRouteResponseResponse.responseParameters) &&
        Objects.equals(this.routeResponseId, getRouteResponseResponse.routeResponseId) &&
        Objects.equals(this.routeResponseKey, getRouteResponseResponse.routeResponseKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelSelectionExpression, responseModels, responseParameters, routeResponseId, routeResponseKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRouteResponseResponse {\n");
    sb.append("    modelSelectionExpression: ").append(toIndentedString(modelSelectionExpression)).append("\n");
    sb.append("    responseModels: ").append(toIndentedString(responseModels)).append("\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    routeResponseId: ").append(toIndentedString(routeResponseId)).append("\n");
    sb.append("    routeResponseKey: ").append(toIndentedString(routeResponseKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ModelSelectionExpression");
    openapiFields.add("ResponseModels");
    openapiFields.add("ResponseParameters");
    openapiFields.add("RouteResponseId");
    openapiFields.add("RouteResponseKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetRouteResponseResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRouteResponseResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRouteResponseResponse is not found in the empty JSON string", GetRouteResponseResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRouteResponseResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRouteResponseResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ModelSelectionExpression`
      if (jsonObj.get("ModelSelectionExpression") != null && !jsonObj.get("ModelSelectionExpression").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ModelSelectionExpression"));
      }
      // validate the optional field `ResponseModels`
      if (jsonObj.get("ResponseModels") != null && !jsonObj.get("ResponseModels").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ResponseModels"));
      }
      // validate the optional field `ResponseParameters`
      if (jsonObj.get("ResponseParameters") != null && !jsonObj.get("ResponseParameters").isJsonNull()) {
        Map.validateJsonElement(jsonObj.get("ResponseParameters"));
      }
      // validate the optional field `RouteResponseId`
      if (jsonObj.get("RouteResponseId") != null && !jsonObj.get("RouteResponseId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RouteResponseId"));
      }
      // validate the optional field `RouteResponseKey`
      if (jsonObj.get("RouteResponseKey") != null && !jsonObj.get("RouteResponseKey").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("RouteResponseKey"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRouteResponseResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRouteResponseResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRouteResponseResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRouteResponseResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRouteResponseResponse>() {
           @Override
           public void write(JsonWriter out, GetRouteResponseResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRouteResponseResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetRouteResponseResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetRouteResponseResponse
   * @throws IOException if the JSON string is invalid with respect to GetRouteResponseResponse
   */
  public static GetRouteResponseResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRouteResponseResponse.class);
  }

  /**
   * Convert an instance of GetRouteResponseResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

