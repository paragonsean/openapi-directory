/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.CreateDomainNameRequestMutualTlsAuthentication;
import org.openapitools.client.model.DomainNameConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateDomainNameRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateDomainNameRequest {
  public static final String SERIALIZED_NAME_DOMAIN_NAME = "domainName";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME)
  private String domainName;

  public static final String SERIALIZED_NAME_DOMAIN_NAME_CONFIGURATIONS = "domainNameConfigurations";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME_CONFIGURATIONS)
  private List<DomainNameConfiguration> domainNameConfigurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MUTUAL_TLS_AUTHENTICATION = "mutualTlsAuthentication";
  @SerializedName(SERIALIZED_NAME_MUTUAL_TLS_AUTHENTICATION)
  private CreateDomainNameRequestMutualTlsAuthentication mutualTlsAuthentication;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public CreateDomainNameRequest() {
  }

  public CreateDomainNameRequest domainName(String domainName) {
    this.domainName = domainName;
    return this;
  }

  /**
   * A string with a length between [1-512].
   * @return domainName
   */
  @javax.annotation.Nonnull
  public String getDomainName() {
    return domainName;
  }

  public void setDomainName(String domainName) {
    this.domainName = domainName;
  }


  public CreateDomainNameRequest domainNameConfigurations(List<DomainNameConfiguration> domainNameConfigurations) {
    this.domainNameConfigurations = domainNameConfigurations;
    return this;
  }

  public CreateDomainNameRequest addDomainNameConfigurationsItem(DomainNameConfiguration domainNameConfigurationsItem) {
    if (this.domainNameConfigurations == null) {
      this.domainNameConfigurations = new ArrayList<>();
    }
    this.domainNameConfigurations.add(domainNameConfigurationsItem);
    return this;
  }

  /**
   * The domain name configurations.
   * @return domainNameConfigurations
   */
  @javax.annotation.Nullable
  public List<DomainNameConfiguration> getDomainNameConfigurations() {
    return domainNameConfigurations;
  }

  public void setDomainNameConfigurations(List<DomainNameConfiguration> domainNameConfigurations) {
    this.domainNameConfigurations = domainNameConfigurations;
  }


  public CreateDomainNameRequest mutualTlsAuthentication(CreateDomainNameRequestMutualTlsAuthentication mutualTlsAuthentication) {
    this.mutualTlsAuthentication = mutualTlsAuthentication;
    return this;
  }

  /**
   * Get mutualTlsAuthentication
   * @return mutualTlsAuthentication
   */
  @javax.annotation.Nullable
  public CreateDomainNameRequestMutualTlsAuthentication getMutualTlsAuthentication() {
    return mutualTlsAuthentication;
  }

  public void setMutualTlsAuthentication(CreateDomainNameRequestMutualTlsAuthentication mutualTlsAuthentication) {
    this.mutualTlsAuthentication = mutualTlsAuthentication;
  }


  public CreateDomainNameRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateDomainNameRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Represents a collection of tags associated with the resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateDomainNameRequest createDomainNameRequest = (CreateDomainNameRequest) o;
    return Objects.equals(this.domainName, createDomainNameRequest.domainName) &&
        Objects.equals(this.domainNameConfigurations, createDomainNameRequest.domainNameConfigurations) &&
        Objects.equals(this.mutualTlsAuthentication, createDomainNameRequest.mutualTlsAuthentication) &&
        Objects.equals(this.tags, createDomainNameRequest.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainName, domainNameConfigurations, mutualTlsAuthentication, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateDomainNameRequest {\n");
    sb.append("    domainName: ").append(toIndentedString(domainName)).append("\n");
    sb.append("    domainNameConfigurations: ").append(toIndentedString(domainNameConfigurations)).append("\n");
    sb.append("    mutualTlsAuthentication: ").append(toIndentedString(mutualTlsAuthentication)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domainName");
    openapiFields.add("domainNameConfigurations");
    openapiFields.add("mutualTlsAuthentication");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domainName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateDomainNameRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateDomainNameRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateDomainNameRequest is not found in the empty JSON string", CreateDomainNameRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateDomainNameRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateDomainNameRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateDomainNameRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domainName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainName").toString()));
      }
      if (jsonObj.get("domainNameConfigurations") != null && !jsonObj.get("domainNameConfigurations").isJsonNull()) {
        JsonArray jsonArraydomainNameConfigurations = jsonObj.getAsJsonArray("domainNameConfigurations");
        if (jsonArraydomainNameConfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("domainNameConfigurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `domainNameConfigurations` to be an array in the JSON string but got `%s`", jsonObj.get("domainNameConfigurations").toString()));
          }

          // validate the optional field `domainNameConfigurations` (array)
          for (int i = 0; i < jsonArraydomainNameConfigurations.size(); i++) {
            DomainNameConfiguration.validateJsonElement(jsonArraydomainNameConfigurations.get(i));
          };
        }
      }
      // validate the optional field `mutualTlsAuthentication`
      if (jsonObj.get("mutualTlsAuthentication") != null && !jsonObj.get("mutualTlsAuthentication").isJsonNull()) {
        CreateDomainNameRequestMutualTlsAuthentication.validateJsonElement(jsonObj.get("mutualTlsAuthentication"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateDomainNameRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateDomainNameRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateDomainNameRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateDomainNameRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateDomainNameRequest>() {
           @Override
           public void write(JsonWriter out, CreateDomainNameRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateDomainNameRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateDomainNameRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateDomainNameRequest
   * @throws IOException if the JSON string is invalid with respect to CreateDomainNameRequest
   */
  public static CreateDomainNameRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateDomainNameRequest.class);
  }

  /**
   * Convert an instance of CreateDomainNameRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

