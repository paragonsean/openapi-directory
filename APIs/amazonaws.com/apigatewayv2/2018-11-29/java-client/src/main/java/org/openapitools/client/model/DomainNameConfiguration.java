/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DomainNameStatus;
import org.openapitools.client.model.EndpointType;
import org.openapitools.client.model.SecurityPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The domain name configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainNameConfiguration {
  public static final String SERIALIZED_NAME_API_GATEWAY_DOMAIN_NAME = "ApiGatewayDomainName";
  @SerializedName(SERIALIZED_NAME_API_GATEWAY_DOMAIN_NAME)
  private String apiGatewayDomainName;

  public static final String SERIALIZED_NAME_CERTIFICATE_ARN = "CertificateArn";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ARN)
  private String certificateArn;

  public static final String SERIALIZED_NAME_CERTIFICATE_NAME = "CertificateName";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_NAME)
  private String certificateName;

  public static final String SERIALIZED_NAME_CERTIFICATE_UPLOAD_DATE = "CertificateUploadDate";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_UPLOAD_DATE)
  private OffsetDateTime certificateUploadDate;

  public static final String SERIALIZED_NAME_DOMAIN_NAME_STATUS = "DomainNameStatus";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME_STATUS)
  private DomainNameStatus domainNameStatus;

  public static final String SERIALIZED_NAME_DOMAIN_NAME_STATUS_MESSAGE = "DomainNameStatusMessage";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME_STATUS_MESSAGE)
  private String domainNameStatusMessage;

  public static final String SERIALIZED_NAME_ENDPOINT_TYPE = "EndpointType";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_TYPE)
  private EndpointType endpointType;

  public static final String SERIALIZED_NAME_HOSTED_ZONE_ID = "HostedZoneId";
  @SerializedName(SERIALIZED_NAME_HOSTED_ZONE_ID)
  private String hostedZoneId;

  public static final String SERIALIZED_NAME_SECURITY_POLICY = "SecurityPolicy";
  @SerializedName(SERIALIZED_NAME_SECURITY_POLICY)
  private SecurityPolicy securityPolicy;

  public static final String SERIALIZED_NAME_OWNERSHIP_VERIFICATION_CERTIFICATE_ARN = "OwnershipVerificationCertificateArn";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP_VERIFICATION_CERTIFICATE_ARN)
  private String ownershipVerificationCertificateArn;

  public DomainNameConfiguration() {
  }

  public DomainNameConfiguration apiGatewayDomainName(String apiGatewayDomainName) {
    this.apiGatewayDomainName = apiGatewayDomainName;
    return this;
  }

  /**
   * Get apiGatewayDomainName
   * @return apiGatewayDomainName
   */
  @javax.annotation.Nullable
  public String getApiGatewayDomainName() {
    return apiGatewayDomainName;
  }

  public void setApiGatewayDomainName(String apiGatewayDomainName) {
    this.apiGatewayDomainName = apiGatewayDomainName;
  }


  public DomainNameConfiguration certificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
    return this;
  }

  /**
   * Get certificateArn
   * @return certificateArn
   */
  @javax.annotation.Nullable
  public String getCertificateArn() {
    return certificateArn;
  }

  public void setCertificateArn(String certificateArn) {
    this.certificateArn = certificateArn;
  }


  public DomainNameConfiguration certificateName(String certificateName) {
    this.certificateName = certificateName;
    return this;
  }

  /**
   * Get certificateName
   * @return certificateName
   */
  @javax.annotation.Nullable
  public String getCertificateName() {
    return certificateName;
  }

  public void setCertificateName(String certificateName) {
    this.certificateName = certificateName;
  }


  public DomainNameConfiguration certificateUploadDate(OffsetDateTime certificateUploadDate) {
    this.certificateUploadDate = certificateUploadDate;
    return this;
  }

  /**
   * Get certificateUploadDate
   * @return certificateUploadDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCertificateUploadDate() {
    return certificateUploadDate;
  }

  public void setCertificateUploadDate(OffsetDateTime certificateUploadDate) {
    this.certificateUploadDate = certificateUploadDate;
  }


  public DomainNameConfiguration domainNameStatus(DomainNameStatus domainNameStatus) {
    this.domainNameStatus = domainNameStatus;
    return this;
  }

  /**
   * Get domainNameStatus
   * @return domainNameStatus
   */
  @javax.annotation.Nullable
  public DomainNameStatus getDomainNameStatus() {
    return domainNameStatus;
  }

  public void setDomainNameStatus(DomainNameStatus domainNameStatus) {
    this.domainNameStatus = domainNameStatus;
  }


  public DomainNameConfiguration domainNameStatusMessage(String domainNameStatusMessage) {
    this.domainNameStatusMessage = domainNameStatusMessage;
    return this;
  }

  /**
   * Get domainNameStatusMessage
   * @return domainNameStatusMessage
   */
  @javax.annotation.Nullable
  public String getDomainNameStatusMessage() {
    return domainNameStatusMessage;
  }

  public void setDomainNameStatusMessage(String domainNameStatusMessage) {
    this.domainNameStatusMessage = domainNameStatusMessage;
  }


  public DomainNameConfiguration endpointType(EndpointType endpointType) {
    this.endpointType = endpointType;
    return this;
  }

  /**
   * Get endpointType
   * @return endpointType
   */
  @javax.annotation.Nullable
  public EndpointType getEndpointType() {
    return endpointType;
  }

  public void setEndpointType(EndpointType endpointType) {
    this.endpointType = endpointType;
  }


  public DomainNameConfiguration hostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
    return this;
  }

  /**
   * Get hostedZoneId
   * @return hostedZoneId
   */
  @javax.annotation.Nullable
  public String getHostedZoneId() {
    return hostedZoneId;
  }

  public void setHostedZoneId(String hostedZoneId) {
    this.hostedZoneId = hostedZoneId;
  }


  public DomainNameConfiguration securityPolicy(SecurityPolicy securityPolicy) {
    this.securityPolicy = securityPolicy;
    return this;
  }

  /**
   * Get securityPolicy
   * @return securityPolicy
   */
  @javax.annotation.Nullable
  public SecurityPolicy getSecurityPolicy() {
    return securityPolicy;
  }

  public void setSecurityPolicy(SecurityPolicy securityPolicy) {
    this.securityPolicy = securityPolicy;
  }


  public DomainNameConfiguration ownershipVerificationCertificateArn(String ownershipVerificationCertificateArn) {
    this.ownershipVerificationCertificateArn = ownershipVerificationCertificateArn;
    return this;
  }

  /**
   * Get ownershipVerificationCertificateArn
   * @return ownershipVerificationCertificateArn
   */
  @javax.annotation.Nullable
  public String getOwnershipVerificationCertificateArn() {
    return ownershipVerificationCertificateArn;
  }

  public void setOwnershipVerificationCertificateArn(String ownershipVerificationCertificateArn) {
    this.ownershipVerificationCertificateArn = ownershipVerificationCertificateArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainNameConfiguration domainNameConfiguration = (DomainNameConfiguration) o;
    return Objects.equals(this.apiGatewayDomainName, domainNameConfiguration.apiGatewayDomainName) &&
        Objects.equals(this.certificateArn, domainNameConfiguration.certificateArn) &&
        Objects.equals(this.certificateName, domainNameConfiguration.certificateName) &&
        Objects.equals(this.certificateUploadDate, domainNameConfiguration.certificateUploadDate) &&
        Objects.equals(this.domainNameStatus, domainNameConfiguration.domainNameStatus) &&
        Objects.equals(this.domainNameStatusMessage, domainNameConfiguration.domainNameStatusMessage) &&
        Objects.equals(this.endpointType, domainNameConfiguration.endpointType) &&
        Objects.equals(this.hostedZoneId, domainNameConfiguration.hostedZoneId) &&
        Objects.equals(this.securityPolicy, domainNameConfiguration.securityPolicy) &&
        Objects.equals(this.ownershipVerificationCertificateArn, domainNameConfiguration.ownershipVerificationCertificateArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiGatewayDomainName, certificateArn, certificateName, certificateUploadDate, domainNameStatus, domainNameStatusMessage, endpointType, hostedZoneId, securityPolicy, ownershipVerificationCertificateArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainNameConfiguration {\n");
    sb.append("    apiGatewayDomainName: ").append(toIndentedString(apiGatewayDomainName)).append("\n");
    sb.append("    certificateArn: ").append(toIndentedString(certificateArn)).append("\n");
    sb.append("    certificateName: ").append(toIndentedString(certificateName)).append("\n");
    sb.append("    certificateUploadDate: ").append(toIndentedString(certificateUploadDate)).append("\n");
    sb.append("    domainNameStatus: ").append(toIndentedString(domainNameStatus)).append("\n");
    sb.append("    domainNameStatusMessage: ").append(toIndentedString(domainNameStatusMessage)).append("\n");
    sb.append("    endpointType: ").append(toIndentedString(endpointType)).append("\n");
    sb.append("    hostedZoneId: ").append(toIndentedString(hostedZoneId)).append("\n");
    sb.append("    securityPolicy: ").append(toIndentedString(securityPolicy)).append("\n");
    sb.append("    ownershipVerificationCertificateArn: ").append(toIndentedString(ownershipVerificationCertificateArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiGatewayDomainName");
    openapiFields.add("CertificateArn");
    openapiFields.add("CertificateName");
    openapiFields.add("CertificateUploadDate");
    openapiFields.add("DomainNameStatus");
    openapiFields.add("DomainNameStatusMessage");
    openapiFields.add("EndpointType");
    openapiFields.add("HostedZoneId");
    openapiFields.add("SecurityPolicy");
    openapiFields.add("OwnershipVerificationCertificateArn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainNameConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainNameConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainNameConfiguration is not found in the empty JSON string", DomainNameConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainNameConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainNameConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApiGatewayDomainName`
      if (jsonObj.get("ApiGatewayDomainName") != null && !jsonObj.get("ApiGatewayDomainName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("ApiGatewayDomainName"));
      }
      // validate the optional field `CertificateArn`
      if (jsonObj.get("CertificateArn") != null && !jsonObj.get("CertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateArn"));
      }
      // validate the optional field `CertificateName`
      if (jsonObj.get("CertificateName") != null && !jsonObj.get("CertificateName").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("CertificateName"));
      }
      // validate the optional field `CertificateUploadDate`
      if (jsonObj.get("CertificateUploadDate") != null && !jsonObj.get("CertificateUploadDate").isJsonNull()) {
        OffsetDateTime.validateJsonElement(jsonObj.get("CertificateUploadDate"));
      }
      // validate the optional field `DomainNameStatus`
      if (jsonObj.get("DomainNameStatus") != null && !jsonObj.get("DomainNameStatus").isJsonNull()) {
        DomainNameStatus.validateJsonElement(jsonObj.get("DomainNameStatus"));
      }
      // validate the optional field `DomainNameStatusMessage`
      if (jsonObj.get("DomainNameStatusMessage") != null && !jsonObj.get("DomainNameStatusMessage").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("DomainNameStatusMessage"));
      }
      // validate the optional field `EndpointType`
      if (jsonObj.get("EndpointType") != null && !jsonObj.get("EndpointType").isJsonNull()) {
        EndpointType.validateJsonElement(jsonObj.get("EndpointType"));
      }
      // validate the optional field `HostedZoneId`
      if (jsonObj.get("HostedZoneId") != null && !jsonObj.get("HostedZoneId").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("HostedZoneId"));
      }
      // validate the optional field `SecurityPolicy`
      if (jsonObj.get("SecurityPolicy") != null && !jsonObj.get("SecurityPolicy").isJsonNull()) {
        SecurityPolicy.validateJsonElement(jsonObj.get("SecurityPolicy"));
      }
      // validate the optional field `OwnershipVerificationCertificateArn`
      if (jsonObj.get("OwnershipVerificationCertificateArn") != null && !jsonObj.get("OwnershipVerificationCertificateArn").isJsonNull()) {
        String.validateJsonElement(jsonObj.get("OwnershipVerificationCertificateArn"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainNameConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainNameConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainNameConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainNameConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainNameConfiguration>() {
           @Override
           public void write(JsonWriter out, DomainNameConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainNameConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainNameConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainNameConfiguration
   * @throws IOException if the JSON string is invalid with respect to DomainNameConfiguration
   */
  public static DomainNameConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainNameConfiguration.class);
  }

  /**
   * Convert an instance of DomainNameConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

