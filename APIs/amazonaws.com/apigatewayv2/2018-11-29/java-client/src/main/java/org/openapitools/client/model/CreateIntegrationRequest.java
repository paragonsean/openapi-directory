/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateIntegrationRequestTlsConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateIntegrationRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateIntegrationRequest {
  public static final String SERIALIZED_NAME_CONNECTION_ID = "connectionId";
  @SerializedName(SERIALIZED_NAME_CONNECTION_ID)
  private String connectionId;

  /**
   * Represents a connection type.
   */
  @JsonAdapter(ConnectionTypeEnum.Adapter.class)
  public enum ConnectionTypeEnum {
    INTERNET("INTERNET"),
    
    VPC_LINK("VPC_LINK");

    private String value;

    ConnectionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectionTypeEnum fromValue(String value) {
      for (ConnectionTypeEnum b : ConnectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private ConnectionTypeEnum connectionType;

  /**
   * Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
   */
  @JsonAdapter(ContentHandlingStrategyEnum.Adapter.class)
  public enum ContentHandlingStrategyEnum {
    BINARY("CONVERT_TO_BINARY"),
    
    TEXT("CONVERT_TO_TEXT");

    private String value;

    ContentHandlingStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentHandlingStrategyEnum fromValue(String value) {
      for (ContentHandlingStrategyEnum b : ContentHandlingStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentHandlingStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentHandlingStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentHandlingStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentHandlingStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContentHandlingStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_HANDLING_STRATEGY = "contentHandlingStrategy";
  @SerializedName(SERIALIZED_NAME_CONTENT_HANDLING_STRATEGY)
  private ContentHandlingStrategyEnum contentHandlingStrategy;

  public static final String SERIALIZED_NAME_CREDENTIALS_ARN = "credentialsArn";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_ARN)
  private String credentialsArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INTEGRATION_METHOD = "integrationMethod";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_METHOD)
  private String integrationMethod;

  public static final String SERIALIZED_NAME_INTEGRATION_SUBTYPE = "integrationSubtype";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_SUBTYPE)
  private String integrationSubtype;

  /**
   * Represents an API method integration type.
   */
  @JsonAdapter(IntegrationTypeEnum.Adapter.class)
  public enum IntegrationTypeEnum {
    AWS("AWS"),
    
    HTTP("HTTP"),
    
    MOCK("MOCK"),
    
    HTTP_PROXY("HTTP_PROXY"),
    
    AWS_PROXY("AWS_PROXY");

    private String value;

    IntegrationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IntegrationTypeEnum fromValue(String value) {
      for (IntegrationTypeEnum b : IntegrationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IntegrationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IntegrationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IntegrationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IntegrationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IntegrationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTEGRATION_TYPE = "integrationType";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_TYPE)
  private IntegrationTypeEnum integrationType;

  public static final String SERIALIZED_NAME_INTEGRATION_URI = "integrationUri";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_URI)
  private String integrationUri;

  /**
   * Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
   */
  @JsonAdapter(PassthroughBehaviorEnum.Adapter.class)
  public enum PassthroughBehaviorEnum {
    WHEN_NO_MATCH("WHEN_NO_MATCH"),
    
    NEVER("NEVER"),
    
    WHEN_NO_TEMPLATES("WHEN_NO_TEMPLATES");

    private String value;

    PassthroughBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PassthroughBehaviorEnum fromValue(String value) {
      for (PassthroughBehaviorEnum b : PassthroughBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PassthroughBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PassthroughBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PassthroughBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PassthroughBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PassthroughBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PASSTHROUGH_BEHAVIOR = "passthroughBehavior";
  @SerializedName(SERIALIZED_NAME_PASSTHROUGH_BEHAVIOR)
  private PassthroughBehaviorEnum passthroughBehavior;

  public static final String SERIALIZED_NAME_PAYLOAD_FORMAT_VERSION = "payloadFormatVersion";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_FORMAT_VERSION)
  private String payloadFormatVersion;

  public static final String SERIALIZED_NAME_REQUEST_PARAMETERS = "requestParameters";
  @SerializedName(SERIALIZED_NAME_REQUEST_PARAMETERS)
  private Map<String, String> requestParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_TEMPLATES = "requestTemplates";
  @SerializedName(SERIALIZED_NAME_REQUEST_TEMPLATES)
  private Map<String, String> requestTemplates = new HashMap<>();

  public static final String SERIALIZED_NAME_RESPONSE_PARAMETERS = "responseParameters";
  @SerializedName(SERIALIZED_NAME_RESPONSE_PARAMETERS)
  private Map<String, Map<String, String>> responseParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_TEMPLATE_SELECTION_EXPRESSION = "templateSelectionExpression";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_SELECTION_EXPRESSION)
  private String templateSelectionExpression;

  public static final String SERIALIZED_NAME_TIMEOUT_IN_MILLIS = "timeoutInMillis";
  @SerializedName(SERIALIZED_NAME_TIMEOUT_IN_MILLIS)
  private Integer timeoutInMillis;

  public static final String SERIALIZED_NAME_TLS_CONFIG = "tlsConfig";
  @SerializedName(SERIALIZED_NAME_TLS_CONFIG)
  private CreateIntegrationRequestTlsConfig tlsConfig;

  public CreateIntegrationRequest() {
  }

  public CreateIntegrationRequest connectionId(String connectionId) {
    this.connectionId = connectionId;
    return this;
  }

  /**
   * A string with a length between [1-1024].
   * @return connectionId
   */
  @javax.annotation.Nullable
  public String getConnectionId() {
    return connectionId;
  }

  public void setConnectionId(String connectionId) {
    this.connectionId = connectionId;
  }


  public CreateIntegrationRequest connectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * Represents a connection type.
   * @return connectionType
   */
  @javax.annotation.Nullable
  public ConnectionTypeEnum getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(ConnectionTypeEnum connectionType) {
    this.connectionType = connectionType;
  }


  public CreateIntegrationRequest contentHandlingStrategy(ContentHandlingStrategyEnum contentHandlingStrategy) {
    this.contentHandlingStrategy = contentHandlingStrategy;
    return this;
  }

  /**
   * Specifies how to handle response payload content type conversions. Supported only for WebSocket APIs.
   * @return contentHandlingStrategy
   */
  @javax.annotation.Nullable
  public ContentHandlingStrategyEnum getContentHandlingStrategy() {
    return contentHandlingStrategy;
  }

  public void setContentHandlingStrategy(ContentHandlingStrategyEnum contentHandlingStrategy) {
    this.contentHandlingStrategy = contentHandlingStrategy;
  }


  public CreateIntegrationRequest credentialsArn(String credentialsArn) {
    this.credentialsArn = credentialsArn;
    return this;
  }

  /**
   * Represents an Amazon Resource Name (ARN).
   * @return credentialsArn
   */
  @javax.annotation.Nullable
  public String getCredentialsArn() {
    return credentialsArn;
  }

  public void setCredentialsArn(String credentialsArn) {
    this.credentialsArn = credentialsArn;
  }


  public CreateIntegrationRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A string with a length between [0-1024].
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateIntegrationRequest integrationMethod(String integrationMethod) {
    this.integrationMethod = integrationMethod;
    return this;
  }

  /**
   * A string with a length between [1-64].
   * @return integrationMethod
   */
  @javax.annotation.Nullable
  public String getIntegrationMethod() {
    return integrationMethod;
  }

  public void setIntegrationMethod(String integrationMethod) {
    this.integrationMethod = integrationMethod;
  }


  public CreateIntegrationRequest integrationSubtype(String integrationSubtype) {
    this.integrationSubtype = integrationSubtype;
    return this;
  }

  /**
   * A string with a length between [1-128].
   * @return integrationSubtype
   */
  @javax.annotation.Nullable
  public String getIntegrationSubtype() {
    return integrationSubtype;
  }

  public void setIntegrationSubtype(String integrationSubtype) {
    this.integrationSubtype = integrationSubtype;
  }


  public CreateIntegrationRequest integrationType(IntegrationTypeEnum integrationType) {
    this.integrationType = integrationType;
    return this;
  }

  /**
   * Represents an API method integration type.
   * @return integrationType
   */
  @javax.annotation.Nonnull
  public IntegrationTypeEnum getIntegrationType() {
    return integrationType;
  }

  public void setIntegrationType(IntegrationTypeEnum integrationType) {
    this.integrationType = integrationType;
  }


  public CreateIntegrationRequest integrationUri(String integrationUri) {
    this.integrationUri = integrationUri;
    return this;
  }

  /**
   * A string representation of a URI with a length between [1-2048].
   * @return integrationUri
   */
  @javax.annotation.Nullable
  public String getIntegrationUri() {
    return integrationUri;
  }

  public void setIntegrationUri(String integrationUri) {
    this.integrationUri = integrationUri;
  }


  public CreateIntegrationRequest passthroughBehavior(PassthroughBehaviorEnum passthroughBehavior) {
    this.passthroughBehavior = passthroughBehavior;
    return this;
  }

  /**
   * Represents passthrough behavior for an integration response. Supported only for WebSocket APIs.
   * @return passthroughBehavior
   */
  @javax.annotation.Nullable
  public PassthroughBehaviorEnum getPassthroughBehavior() {
    return passthroughBehavior;
  }

  public void setPassthroughBehavior(PassthroughBehaviorEnum passthroughBehavior) {
    this.passthroughBehavior = passthroughBehavior;
  }


  public CreateIntegrationRequest payloadFormatVersion(String payloadFormatVersion) {
    this.payloadFormatVersion = payloadFormatVersion;
    return this;
  }

  /**
   * A string with a length between [1-64].
   * @return payloadFormatVersion
   */
  @javax.annotation.Nullable
  public String getPayloadFormatVersion() {
    return payloadFormatVersion;
  }

  public void setPayloadFormatVersion(String payloadFormatVersion) {
    this.payloadFormatVersion = payloadFormatVersion;
  }


  public CreateIntegrationRequest requestParameters(Map<String, String> requestParameters) {
    this.requestParameters = requestParameters;
    return this;
  }

  public CreateIntegrationRequest putRequestParametersItem(String key, String requestParametersItem) {
    if (this.requestParameters == null) {
      this.requestParameters = new HashMap<>();
    }
    this.requestParameters.put(key, requestParametersItem);
    return this;
  }

  /**
   * &lt;p&gt;For WebSocket APIs, a key-value map specifying request parameters that are passed from the method request to the backend. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the backend. The method request parameter value must match the pattern of method.request.&lt;replaceable&gt;{location}&lt;/replaceable&gt;.&lt;replaceable&gt;{name}&lt;/replaceable&gt;           , where              &lt;replaceable&gt;{location}&lt;/replaceable&gt;            is querystring, path, or header; and              &lt;replaceable&gt;{name}&lt;/replaceable&gt;            must be a valid and unique method request parameter name.&lt;/p&gt; &lt;p&gt;For HTTP API integrations with a specified integrationSubtype, request parameters are a key-value map specifying parameters that are passed to AWS_PROXY integrations. You can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-aws-services.html\&quot;&gt;Working with AWS service integrations for HTTP APIs&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For HTTP API integrations without a specified integrationSubtype request parameters are a key-value map specifying how to transform HTTP requests before sending them to the backend. The key should follow the pattern &amp;lt;action&amp;gt;:&amp;lt;header|querystring|path&amp;gt;.&amp;lt;location&amp;gt; where action can be append, overwrite or remove. For values, you can provide static values, or map request data, stage variables, or context variables that are evaluated at runtime. To learn more, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-parameter-mapping.html\&quot;&gt;Transforming API requests and responses&lt;/a&gt;.&lt;/p&gt;
   * @return requestParameters
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestParameters() {
    return requestParameters;
  }

  public void setRequestParameters(Map<String, String> requestParameters) {
    this.requestParameters = requestParameters;
  }


  public CreateIntegrationRequest requestTemplates(Map<String, String> requestTemplates) {
    this.requestTemplates = requestTemplates;
    return this;
  }

  public CreateIntegrationRequest putRequestTemplatesItem(String key, String requestTemplatesItem) {
    if (this.requestTemplates == null) {
      this.requestTemplates = new HashMap<>();
    }
    this.requestTemplates.put(key, requestTemplatesItem);
    return this;
  }

  /**
   * A mapping of identifier keys to templates. The value is an actual template script. The key is typically a SelectionKey which is chosen based on evaluating a selection expression.
   * @return requestTemplates
   */
  @javax.annotation.Nullable
  public Map<String, String> getRequestTemplates() {
    return requestTemplates;
  }

  public void setRequestTemplates(Map<String, String> requestTemplates) {
    this.requestTemplates = requestTemplates;
  }


  public CreateIntegrationRequest responseParameters(Map<String, Map<String, String>> responseParameters) {
    this.responseParameters = responseParameters;
    return this;
  }

  public CreateIntegrationRequest putResponseParametersItem(String key, Map<String, String> responseParametersItem) {
    if (this.responseParameters == null) {
      this.responseParameters = new HashMap<>();
    }
    this.responseParameters.put(key, responseParametersItem);
    return this;
  }

  /**
   * Supported only for HTTP APIs. You use response parameters to transform the HTTP response from a backend integration before returning the response to clients.
   * @return responseParameters
   */
  @javax.annotation.Nullable
  public Map<String, Map<String, String>> getResponseParameters() {
    return responseParameters;
  }

  public void setResponseParameters(Map<String, Map<String, String>> responseParameters) {
    this.responseParameters = responseParameters;
  }


  public CreateIntegrationRequest templateSelectionExpression(String templateSelectionExpression) {
    this.templateSelectionExpression = templateSelectionExpression;
    return this;
  }

  /**
   * An expression used to extract information at runtime. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for more information.
   * @return templateSelectionExpression
   */
  @javax.annotation.Nullable
  public String getTemplateSelectionExpression() {
    return templateSelectionExpression;
  }

  public void setTemplateSelectionExpression(String templateSelectionExpression) {
    this.templateSelectionExpression = templateSelectionExpression;
  }


  public CreateIntegrationRequest timeoutInMillis(Integer timeoutInMillis) {
    this.timeoutInMillis = timeoutInMillis;
    return this;
  }

  /**
   * An integer with a value between [50-30000].
   * minimum: 50
   * maximum: 30000
   * @return timeoutInMillis
   */
  @javax.annotation.Nullable
  public Integer getTimeoutInMillis() {
    return timeoutInMillis;
  }

  public void setTimeoutInMillis(Integer timeoutInMillis) {
    this.timeoutInMillis = timeoutInMillis;
  }


  public CreateIntegrationRequest tlsConfig(CreateIntegrationRequestTlsConfig tlsConfig) {
    this.tlsConfig = tlsConfig;
    return this;
  }

  /**
   * Get tlsConfig
   * @return tlsConfig
   */
  @javax.annotation.Nullable
  public CreateIntegrationRequestTlsConfig getTlsConfig() {
    return tlsConfig;
  }

  public void setTlsConfig(CreateIntegrationRequestTlsConfig tlsConfig) {
    this.tlsConfig = tlsConfig;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateIntegrationRequest createIntegrationRequest = (CreateIntegrationRequest) o;
    return Objects.equals(this.connectionId, createIntegrationRequest.connectionId) &&
        Objects.equals(this.connectionType, createIntegrationRequest.connectionType) &&
        Objects.equals(this.contentHandlingStrategy, createIntegrationRequest.contentHandlingStrategy) &&
        Objects.equals(this.credentialsArn, createIntegrationRequest.credentialsArn) &&
        Objects.equals(this.description, createIntegrationRequest.description) &&
        Objects.equals(this.integrationMethod, createIntegrationRequest.integrationMethod) &&
        Objects.equals(this.integrationSubtype, createIntegrationRequest.integrationSubtype) &&
        Objects.equals(this.integrationType, createIntegrationRequest.integrationType) &&
        Objects.equals(this.integrationUri, createIntegrationRequest.integrationUri) &&
        Objects.equals(this.passthroughBehavior, createIntegrationRequest.passthroughBehavior) &&
        Objects.equals(this.payloadFormatVersion, createIntegrationRequest.payloadFormatVersion) &&
        Objects.equals(this.requestParameters, createIntegrationRequest.requestParameters) &&
        Objects.equals(this.requestTemplates, createIntegrationRequest.requestTemplates) &&
        Objects.equals(this.responseParameters, createIntegrationRequest.responseParameters) &&
        Objects.equals(this.templateSelectionExpression, createIntegrationRequest.templateSelectionExpression) &&
        Objects.equals(this.timeoutInMillis, createIntegrationRequest.timeoutInMillis) &&
        Objects.equals(this.tlsConfig, createIntegrationRequest.tlsConfig);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectionId, connectionType, contentHandlingStrategy, credentialsArn, description, integrationMethod, integrationSubtype, integrationType, integrationUri, passthroughBehavior, payloadFormatVersion, requestParameters, requestTemplates, responseParameters, templateSelectionExpression, timeoutInMillis, tlsConfig);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateIntegrationRequest {\n");
    sb.append("    connectionId: ").append(toIndentedString(connectionId)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    contentHandlingStrategy: ").append(toIndentedString(contentHandlingStrategy)).append("\n");
    sb.append("    credentialsArn: ").append(toIndentedString(credentialsArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    integrationMethod: ").append(toIndentedString(integrationMethod)).append("\n");
    sb.append("    integrationSubtype: ").append(toIndentedString(integrationSubtype)).append("\n");
    sb.append("    integrationType: ").append(toIndentedString(integrationType)).append("\n");
    sb.append("    integrationUri: ").append(toIndentedString(integrationUri)).append("\n");
    sb.append("    passthroughBehavior: ").append(toIndentedString(passthroughBehavior)).append("\n");
    sb.append("    payloadFormatVersion: ").append(toIndentedString(payloadFormatVersion)).append("\n");
    sb.append("    requestParameters: ").append(toIndentedString(requestParameters)).append("\n");
    sb.append("    requestTemplates: ").append(toIndentedString(requestTemplates)).append("\n");
    sb.append("    responseParameters: ").append(toIndentedString(responseParameters)).append("\n");
    sb.append("    templateSelectionExpression: ").append(toIndentedString(templateSelectionExpression)).append("\n");
    sb.append("    timeoutInMillis: ").append(toIndentedString(timeoutInMillis)).append("\n");
    sb.append("    tlsConfig: ").append(toIndentedString(tlsConfig)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectionId");
    openapiFields.add("connectionType");
    openapiFields.add("contentHandlingStrategy");
    openapiFields.add("credentialsArn");
    openapiFields.add("description");
    openapiFields.add("integrationMethod");
    openapiFields.add("integrationSubtype");
    openapiFields.add("integrationType");
    openapiFields.add("integrationUri");
    openapiFields.add("passthroughBehavior");
    openapiFields.add("payloadFormatVersion");
    openapiFields.add("requestParameters");
    openapiFields.add("requestTemplates");
    openapiFields.add("responseParameters");
    openapiFields.add("templateSelectionExpression");
    openapiFields.add("timeoutInMillis");
    openapiFields.add("tlsConfig");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("integrationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateIntegrationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateIntegrationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateIntegrationRequest is not found in the empty JSON string", CreateIntegrationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateIntegrationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateIntegrationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateIntegrationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectionId") != null && !jsonObj.get("connectionId").isJsonNull()) && !jsonObj.get("connectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionId").toString()));
      }
      if ((jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) && !jsonObj.get("connectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionType").toString()));
      }
      // validate the optional field `connectionType`
      if (jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) {
        ConnectionTypeEnum.validateJsonElement(jsonObj.get("connectionType"));
      }
      if ((jsonObj.get("contentHandlingStrategy") != null && !jsonObj.get("contentHandlingStrategy").isJsonNull()) && !jsonObj.get("contentHandlingStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentHandlingStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentHandlingStrategy").toString()));
      }
      // validate the optional field `contentHandlingStrategy`
      if (jsonObj.get("contentHandlingStrategy") != null && !jsonObj.get("contentHandlingStrategy").isJsonNull()) {
        ContentHandlingStrategyEnum.validateJsonElement(jsonObj.get("contentHandlingStrategy"));
      }
      if ((jsonObj.get("credentialsArn") != null && !jsonObj.get("credentialsArn").isJsonNull()) && !jsonObj.get("credentialsArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialsArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialsArn").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("integrationMethod") != null && !jsonObj.get("integrationMethod").isJsonNull()) && !jsonObj.get("integrationMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationMethod").toString()));
      }
      if ((jsonObj.get("integrationSubtype") != null && !jsonObj.get("integrationSubtype").isJsonNull()) && !jsonObj.get("integrationSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationSubtype").toString()));
      }
      if (!jsonObj.get("integrationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationType").toString()));
      }
      // validate the required field `integrationType`
      IntegrationTypeEnum.validateJsonElement(jsonObj.get("integrationType"));
      if ((jsonObj.get("integrationUri") != null && !jsonObj.get("integrationUri").isJsonNull()) && !jsonObj.get("integrationUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integrationUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integrationUri").toString()));
      }
      if ((jsonObj.get("passthroughBehavior") != null && !jsonObj.get("passthroughBehavior").isJsonNull()) && !jsonObj.get("passthroughBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passthroughBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passthroughBehavior").toString()));
      }
      // validate the optional field `passthroughBehavior`
      if (jsonObj.get("passthroughBehavior") != null && !jsonObj.get("passthroughBehavior").isJsonNull()) {
        PassthroughBehaviorEnum.validateJsonElement(jsonObj.get("passthroughBehavior"));
      }
      if ((jsonObj.get("payloadFormatVersion") != null && !jsonObj.get("payloadFormatVersion").isJsonNull()) && !jsonObj.get("payloadFormatVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payloadFormatVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payloadFormatVersion").toString()));
      }
      if ((jsonObj.get("templateSelectionExpression") != null && !jsonObj.get("templateSelectionExpression").isJsonNull()) && !jsonObj.get("templateSelectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateSelectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateSelectionExpression").toString()));
      }
      // validate the optional field `tlsConfig`
      if (jsonObj.get("tlsConfig") != null && !jsonObj.get("tlsConfig").isJsonNull()) {
        CreateIntegrationRequestTlsConfig.validateJsonElement(jsonObj.get("tlsConfig"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateIntegrationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateIntegrationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateIntegrationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateIntegrationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateIntegrationRequest>() {
           @Override
           public void write(JsonWriter out, CreateIntegrationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateIntegrationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateIntegrationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateIntegrationRequest
   * @throws IOException if the JSON string is invalid with respect to CreateIntegrationRequest
   */
  public static CreateIntegrationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateIntegrationRequest.class);
  }

  /**
   * Convert an instance of CreateIntegrationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

