/*
 * AmazonApiGatewayV2
 * Amazon API Gateway V2
 *
 * The version of the OpenAPI document: 2018-11-29
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CreateApiRequestCorsConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateApiRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:11:11.055256-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateApiRequest {
  public static final String SERIALIZED_NAME_API_KEY_SELECTION_EXPRESSION = "apiKeySelectionExpression";
  @SerializedName(SERIALIZED_NAME_API_KEY_SELECTION_EXPRESSION)
  private String apiKeySelectionExpression;

  public static final String SERIALIZED_NAME_CORS_CONFIGURATION = "corsConfiguration";
  @SerializedName(SERIALIZED_NAME_CORS_CONFIGURATION)
  private CreateApiRequestCorsConfiguration corsConfiguration;

  public static final String SERIALIZED_NAME_CREDENTIALS_ARN = "credentialsArn";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS_ARN)
  private String credentialsArn;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISABLE_SCHEMA_VALIDATION = "disableSchemaValidation";
  @SerializedName(SERIALIZED_NAME_DISABLE_SCHEMA_VALIDATION)
  private Boolean disableSchemaValidation;

  public static final String SERIALIZED_NAME_DISABLE_EXECUTE_API_ENDPOINT = "disableExecuteApiEndpoint";
  @SerializedName(SERIALIZED_NAME_DISABLE_EXECUTE_API_ENDPOINT)
  private Boolean disableExecuteApiEndpoint;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Represents a protocol type.
   */
  @JsonAdapter(ProtocolTypeEnum.Adapter.class)
  public enum ProtocolTypeEnum {
    WEBSOCKET("WEBSOCKET"),
    
    HTTP("HTTP");

    private String value;

    ProtocolTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolTypeEnum fromValue(String value) {
      for (ProtocolTypeEnum b : ProtocolTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL_TYPE = "protocolType";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_TYPE)
  private ProtocolTypeEnum protocolType;

  public static final String SERIALIZED_NAME_ROUTE_KEY = "routeKey";
  @SerializedName(SERIALIZED_NAME_ROUTE_KEY)
  private String routeKey;

  public static final String SERIALIZED_NAME_ROUTE_SELECTION_EXPRESSION = "routeSelectionExpression";
  @SerializedName(SERIALIZED_NAME_ROUTE_SELECTION_EXPRESSION)
  private String routeSelectionExpression;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public CreateApiRequest() {
  }

  public CreateApiRequest apiKeySelectionExpression(String apiKeySelectionExpression) {
    this.apiKeySelectionExpression = apiKeySelectionExpression;
    return this;
  }

  /**
   * An expression used to extract information at runtime. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for more information.
   * @return apiKeySelectionExpression
   */
  @javax.annotation.Nullable
  public String getApiKeySelectionExpression() {
    return apiKeySelectionExpression;
  }

  public void setApiKeySelectionExpression(String apiKeySelectionExpression) {
    this.apiKeySelectionExpression = apiKeySelectionExpression;
  }


  public CreateApiRequest corsConfiguration(CreateApiRequestCorsConfiguration corsConfiguration) {
    this.corsConfiguration = corsConfiguration;
    return this;
  }

  /**
   * Get corsConfiguration
   * @return corsConfiguration
   */
  @javax.annotation.Nullable
  public CreateApiRequestCorsConfiguration getCorsConfiguration() {
    return corsConfiguration;
  }

  public void setCorsConfiguration(CreateApiRequestCorsConfiguration corsConfiguration) {
    this.corsConfiguration = corsConfiguration;
  }


  public CreateApiRequest credentialsArn(String credentialsArn) {
    this.credentialsArn = credentialsArn;
    return this;
  }

  /**
   * Represents an Amazon Resource Name (ARN).
   * @return credentialsArn
   */
  @javax.annotation.Nullable
  public String getCredentialsArn() {
    return credentialsArn;
  }

  public void setCredentialsArn(String credentialsArn) {
    this.credentialsArn = credentialsArn;
  }


  public CreateApiRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A string with a length between [0-1024].
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CreateApiRequest disableSchemaValidation(Boolean disableSchemaValidation) {
    this.disableSchemaValidation = disableSchemaValidation;
    return this;
  }

  /**
   * Avoid validating models when creating a deployment. Supported only for WebSocket APIs.
   * @return disableSchemaValidation
   */
  @javax.annotation.Nullable
  public Boolean getDisableSchemaValidation() {
    return disableSchemaValidation;
  }

  public void setDisableSchemaValidation(Boolean disableSchemaValidation) {
    this.disableSchemaValidation = disableSchemaValidation;
  }


  public CreateApiRequest disableExecuteApiEndpoint(Boolean disableExecuteApiEndpoint) {
    this.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
    return this;
  }

  /**
   * Specifies whether clients can invoke your API by using the default execute-api endpoint. By default, clients can invoke your API with the default https://{api_id}.execute-api.{region}.amazonaws.com endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint.
   * @return disableExecuteApiEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getDisableExecuteApiEndpoint() {
    return disableExecuteApiEndpoint;
  }

  public void setDisableExecuteApiEndpoint(Boolean disableExecuteApiEndpoint) {
    this.disableExecuteApiEndpoint = disableExecuteApiEndpoint;
  }


  public CreateApiRequest name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A string with a length between [1-128].
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CreateApiRequest protocolType(ProtocolTypeEnum protocolType) {
    this.protocolType = protocolType;
    return this;
  }

  /**
   * Represents a protocol type.
   * @return protocolType
   */
  @javax.annotation.Nonnull
  public ProtocolTypeEnum getProtocolType() {
    return protocolType;
  }

  public void setProtocolType(ProtocolTypeEnum protocolType) {
    this.protocolType = protocolType;
  }


  public CreateApiRequest routeKey(String routeKey) {
    this.routeKey = routeKey;
    return this;
  }

  /**
   * After evaluating a selection expression, the result is compared against one or more selection keys to find a matching key. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for a list of expressions and each expression&#39;s associated selection key type.
   * @return routeKey
   */
  @javax.annotation.Nullable
  public String getRouteKey() {
    return routeKey;
  }

  public void setRouteKey(String routeKey) {
    this.routeKey = routeKey;
  }


  public CreateApiRequest routeSelectionExpression(String routeSelectionExpression) {
    this.routeSelectionExpression = routeSelectionExpression;
    return this;
  }

  /**
   * An expression used to extract information at runtime. See &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-apikey-selection-expressions\&quot;&gt;Selection Expressions&lt;/a&gt; for more information.
   * @return routeSelectionExpression
   */
  @javax.annotation.Nullable
  public String getRouteSelectionExpression() {
    return routeSelectionExpression;
  }

  public void setRouteSelectionExpression(String routeSelectionExpression) {
    this.routeSelectionExpression = routeSelectionExpression;
  }


  public CreateApiRequest tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public CreateApiRequest putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * Represents a collection of tags associated with the resource.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public CreateApiRequest target(String target) {
    this.target = target;
    return this;
  }

  /**
   * A string representation of a URI with a length between [1-2048].
   * @return target
   */
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public CreateApiRequest version(String version) {
    this.version = version;
    return this;
  }

  /**
   * A string with a length between [1-64].
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateApiRequest createApiRequest = (CreateApiRequest) o;
    return Objects.equals(this.apiKeySelectionExpression, createApiRequest.apiKeySelectionExpression) &&
        Objects.equals(this.corsConfiguration, createApiRequest.corsConfiguration) &&
        Objects.equals(this.credentialsArn, createApiRequest.credentialsArn) &&
        Objects.equals(this.description, createApiRequest.description) &&
        Objects.equals(this.disableSchemaValidation, createApiRequest.disableSchemaValidation) &&
        Objects.equals(this.disableExecuteApiEndpoint, createApiRequest.disableExecuteApiEndpoint) &&
        Objects.equals(this.name, createApiRequest.name) &&
        Objects.equals(this.protocolType, createApiRequest.protocolType) &&
        Objects.equals(this.routeKey, createApiRequest.routeKey) &&
        Objects.equals(this.routeSelectionExpression, createApiRequest.routeSelectionExpression) &&
        Objects.equals(this.tags, createApiRequest.tags) &&
        Objects.equals(this.target, createApiRequest.target) &&
        Objects.equals(this.version, createApiRequest.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKeySelectionExpression, corsConfiguration, credentialsArn, description, disableSchemaValidation, disableExecuteApiEndpoint, name, protocolType, routeKey, routeSelectionExpression, tags, target, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateApiRequest {\n");
    sb.append("    apiKeySelectionExpression: ").append(toIndentedString(apiKeySelectionExpression)).append("\n");
    sb.append("    corsConfiguration: ").append(toIndentedString(corsConfiguration)).append("\n");
    sb.append("    credentialsArn: ").append(toIndentedString(credentialsArn)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disableSchemaValidation: ").append(toIndentedString(disableSchemaValidation)).append("\n");
    sb.append("    disableExecuteApiEndpoint: ").append(toIndentedString(disableExecuteApiEndpoint)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    protocolType: ").append(toIndentedString(protocolType)).append("\n");
    sb.append("    routeKey: ").append(toIndentedString(routeKey)).append("\n");
    sb.append("    routeSelectionExpression: ").append(toIndentedString(routeSelectionExpression)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKeySelectionExpression");
    openapiFields.add("corsConfiguration");
    openapiFields.add("credentialsArn");
    openapiFields.add("description");
    openapiFields.add("disableSchemaValidation");
    openapiFields.add("disableExecuteApiEndpoint");
    openapiFields.add("name");
    openapiFields.add("protocolType");
    openapiFields.add("routeKey");
    openapiFields.add("routeSelectionExpression");
    openapiFields.add("tags");
    openapiFields.add("target");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("protocolType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateApiRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateApiRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateApiRequest is not found in the empty JSON string", CreateApiRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateApiRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateApiRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateApiRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiKeySelectionExpression") != null && !jsonObj.get("apiKeySelectionExpression").isJsonNull()) && !jsonObj.get("apiKeySelectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeySelectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKeySelectionExpression").toString()));
      }
      // validate the optional field `corsConfiguration`
      if (jsonObj.get("corsConfiguration") != null && !jsonObj.get("corsConfiguration").isJsonNull()) {
        CreateApiRequestCorsConfiguration.validateJsonElement(jsonObj.get("corsConfiguration"));
      }
      if ((jsonObj.get("credentialsArn") != null && !jsonObj.get("credentialsArn").isJsonNull()) && !jsonObj.get("credentialsArn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credentialsArn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credentialsArn").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("protocolType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocolType").toString()));
      }
      // validate the required field `protocolType`
      ProtocolTypeEnum.validateJsonElement(jsonObj.get("protocolType"));
      if ((jsonObj.get("routeKey") != null && !jsonObj.get("routeKey").isJsonNull()) && !jsonObj.get("routeKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeKey").toString()));
      }
      if ((jsonObj.get("routeSelectionExpression") != null && !jsonObj.get("routeSelectionExpression").isJsonNull()) && !jsonObj.get("routeSelectionExpression").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeSelectionExpression` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routeSelectionExpression").toString()));
      }
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateApiRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateApiRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateApiRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateApiRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateApiRequest>() {
           @Override
           public void write(JsonWriter out, CreateApiRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateApiRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateApiRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateApiRequest
   * @throws IOException if the JSON string is invalid with respect to CreateApiRequest
   */
  public static CreateApiRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateApiRequest.class);
  }

  /**
   * Convert an instance of CreateApiRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

